apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/name: dinner-done-better-backend
  name: localdev
---
apiVersion: v1
data:
  config.json: |-
    {
    	"observability": {
    		"logging": {
    			"level": 0,
    			"provider": "slog"
    		},
    		"metrics": {
    			"otelgrpc": {
    				"baseName": "ddb.api",
    				"metricsCollectorEndpoint": "http://0.0.0.0:4317",
    				"metricsCollectionInterval": 3000000000
    			},
    			"provider": "otelgrpc"
    		},
    		"tracing": {
    			"otelgrpc": {
    				"collector_endpoint": "http://0.0.0.0:4317",
    				"service_name": "dinner_done_better_service",
    				"spanCollectionProbability": 1
    			},
    			"provider": "otelgrpc"
    		}
    	},
    	"database": {
    		"oauth2TokenEncryptionKey": "HEREISA32CHARSECRETWHICHISMADEUP",
    		"connectionDetails": "postgres://dbuser:hunter2@postgres-postgresql.localdev.svc.cluster.local:5432/dinner-done-better?sslmode=disable",
    		"debug": true,
    		"logQueries": true,
    		"runMigrations": true,
    		"maxPingAttempts": 50,
    		"pingWaitPeriod": 1000000000
    	}
    }
kind: ConfigMap
metadata:
  annotations:
    note: generated
  labels:
    app.kubernetes.io/name: dinner-done-better-backend
    type: generated
  name: dinner-done-better-job-db-cleaner-config
  namespace: localdev
---
apiVersion: v1
data:
  config.json: |-
    {
    	"observability": {
    		"logging": {
    			"level": 0,
    			"provider": "slog"
    		},
    		"metrics": {
    			"otelgrpc": {
    				"baseName": "ddb.api",
    				"metricsCollectorEndpoint": "http://0.0.0.0:4317",
    				"metricsCollectionInterval": 3000000000
    			},
    			"provider": "otelgrpc"
    		},
    		"tracing": {
    			"otelgrpc": {
    				"collector_endpoint": "http://0.0.0.0:4317",
    				"service_name": "dinner_done_better_service",
    				"spanCollectionProbability": 1
    			},
    			"provider": "otelgrpc"
    		}
    	},
    	"email": {
    		"sendgrid": null,
    		"mailgun": null,
    		"mailjet": null,
    		"circuitBreakerConfig": null,
    		"provider": ""
    	},
    	"database": {
    		"oauth2TokenEncryptionKey": "HEREISA32CHARSECRETWHICHISMADEUP",
    		"connectionDetails": "postgres://dbuser:hunter2@postgres-postgresql.localdev.svc.cluster.local:5432/dinner-done-better?sslmode=disable",
    		"debug": true,
    		"logQueries": true,
    		"runMigrations": true,
    		"maxPingAttempts": 50,
    		"pingWaitPeriod": 1000000000
    	}
    }
kind: ConfigMap
metadata:
  annotations:
    note: generated
  labels:
    app.kubernetes.io/name: dinner-done-better-backend
    type: generated
  name: dinner-done-better-job-email-prober-config
  namespace: localdev
---
apiVersion: v1
data:
  config.json: |-
    {
    	"observability": {
    		"logging": {
    			"level": 0,
    			"provider": "slog"
    		},
    		"metrics": {
    			"otelgrpc": {
    				"baseName": "ddb.api",
    				"metricsCollectorEndpoint": "http://0.0.0.0:4317",
    				"metricsCollectionInterval": 3000000000
    			},
    			"provider": "otelgrpc"
    		},
    		"tracing": {
    			"otelgrpc": {
    				"collector_endpoint": "http://0.0.0.0:4317",
    				"service_name": "dinner_done_better_service",
    				"spanCollectionProbability": 1
    			},
    			"provider": "otelgrpc"
    		}
    	},
    	"events": {
    		"consumers": {
    			"provider": "redis",
    			"sqs": {
    				"messageQueueAddress": ""
    			},
    			"pubsub": {},
    			"redis": {
    				"username": "",
    				"queueAddress": [
    					"redis-master.localdev.svc.cluster.local:6379"
    				]
    			}
    		},
    		"publishers": {
    			"provider": "redis",
    			"sqs": {
    				"messageQueueAddress": ""
    			},
    			"pubsub": {},
    			"redis": {
    				"username": "",
    				"queueAddress": [
    					"redis-master.localdev.svc.cluster.local:6379"
    				]
    			}
    		}
    	},
    	"database": {
    		"oauth2TokenEncryptionKey": "HEREISA32CHARSECRETWHICHISMADEUP",
    		"connectionDetails": "postgres://dbuser:hunter2@postgres-postgresql.localdev.svc.cluster.local:5432/dinner-done-better?sslmode=disable",
    		"debug": true,
    		"logQueries": true,
    		"runMigrations": true,
    		"maxPingAttempts": 50,
    		"pingWaitPeriod": 1000000000
    	}
    }
kind: ConfigMap
metadata:
  annotations:
    note: generated
  labels:
    app.kubernetes.io/name: dinner-done-better-backend
    type: generated
  name: dinner-done-better-job-meal-plan-finalizer-config
  namespace: localdev
---
apiVersion: v1
data:
  config.json: |-
    {
    	"observability": {
    		"logging": {
    			"level": 0,
    			"provider": "slog"
    		},
    		"metrics": {
    			"otelgrpc": {
    				"baseName": "ddb.api",
    				"metricsCollectorEndpoint": "http://0.0.0.0:4317",
    				"metricsCollectionInterval": 3000000000
    			},
    			"provider": "otelgrpc"
    		},
    		"tracing": {
    			"otelgrpc": {
    				"collector_endpoint": "http://0.0.0.0:4317",
    				"service_name": "dinner_done_better_service",
    				"spanCollectionProbability": 1
    			},
    			"provider": "otelgrpc"
    		}
    	},
    	"analytics": {
    		"segment": null,
    		"posthog": null,
    		"rudderstack": null,
    		"circuitBreakerConfig": null,
    		"provider": ""
    	},
    	"events": {
    		"consumers": {
    			"provider": "redis",
    			"sqs": {
    				"messageQueueAddress": ""
    			},
    			"pubsub": {},
    			"redis": {
    				"username": "",
    				"queueAddress": [
    					"redis-master.localdev.svc.cluster.local:6379"
    				]
    			}
    		},
    		"publishers": {
    			"provider": "redis",
    			"sqs": {
    				"messageQueueAddress": ""
    			},
    			"pubsub": {},
    			"redis": {
    				"username": "",
    				"queueAddress": [
    					"redis-master.localdev.svc.cluster.local:6379"
    				]
    			}
    		}
    	},
    	"database": {
    		"oauth2TokenEncryptionKey": "HEREISA32CHARSECRETWHICHISMADEUP",
    		"connectionDetails": "postgres://dbuser:hunter2@postgres-postgresql.localdev.svc.cluster.local:5432/dinner-done-better?sslmode=disable",
    		"debug": true,
    		"logQueries": true,
    		"runMigrations": true,
    		"maxPingAttempts": 50,
    		"pingWaitPeriod": 1000000000
    	}
    }
kind: ConfigMap
metadata:
  annotations:
    note: generated
  labels:
    app.kubernetes.io/name: dinner-done-better-backend
    type: generated
  name: dinner-done-better-job-meal-plan-grocery-list-init-config
  namespace: localdev
---
apiVersion: v1
data:
  config.json: |-
    {
    	"observability": {
    		"logging": {
    			"level": 0,
    			"provider": "slog"
    		},
    		"metrics": {
    			"otelgrpc": {
    				"baseName": "ddb.api",
    				"metricsCollectorEndpoint": "http://0.0.0.0:4317",
    				"metricsCollectionInterval": 3000000000
    			},
    			"provider": "otelgrpc"
    		},
    		"tracing": {
    			"otelgrpc": {
    				"collector_endpoint": "http://0.0.0.0:4317",
    				"service_name": "dinner_done_better_service",
    				"spanCollectionProbability": 1
    			},
    			"provider": "otelgrpc"
    		}
    	},
    	"analytics": {
    		"segment": null,
    		"posthog": null,
    		"rudderstack": null,
    		"circuitBreakerConfig": null,
    		"provider": ""
    	},
    	"events": {
    		"consumers": {
    			"provider": "redis",
    			"sqs": {
    				"messageQueueAddress": ""
    			},
    			"pubsub": {},
    			"redis": {
    				"username": "",
    				"queueAddress": [
    					"redis-master.localdev.svc.cluster.local:6379"
    				]
    			}
    		},
    		"publishers": {
    			"provider": "redis",
    			"sqs": {
    				"messageQueueAddress": ""
    			},
    			"pubsub": {},
    			"redis": {
    				"username": "",
    				"queueAddress": [
    					"redis-master.localdev.svc.cluster.local:6379"
    				]
    			}
    		}
    	},
    	"database": {
    		"oauth2TokenEncryptionKey": "HEREISA32CHARSECRETWHICHISMADEUP",
    		"connectionDetails": "postgres://dbuser:hunter2@postgres-postgresql.localdev.svc.cluster.local:5432/dinner-done-better?sslmode=disable",
    		"debug": true,
    		"logQueries": true,
    		"runMigrations": true,
    		"maxPingAttempts": 50,
    		"pingWaitPeriod": 1000000000
    	}
    }
kind: ConfigMap
metadata:
  annotations:
    note: generated
  labels:
    app.kubernetes.io/name: dinner-done-better-backend
    type: generated
  name: dinner-done-better-job-meal-plan-task-creator-config
  namespace: localdev
---
apiVersion: v1
data:
  config.json: |-
    {
    	"observability": {
    		"logging": {
    			"level": 0,
    			"provider": "slog"
    		},
    		"metrics": {
    			"otelgrpc": {
    				"baseName": "ddb.api",
    				"metricsCollectorEndpoint": "http://0.0.0.0:4317",
    				"metricsCollectionInterval": 3000000000
    			},
    			"provider": "otelgrpc"
    		},
    		"tracing": {
    			"otelgrpc": {
    				"collector_endpoint": "http://0.0.0.0:4317",
    				"service_name": "dinner_done_better_service",
    				"spanCollectionProbability": 1
    			},
    			"provider": "otelgrpc"
    		}
    	},
    	"events": {
    		"consumers": {
    			"provider": "redis",
    			"sqs": {
    				"messageQueueAddress": ""
    			},
    			"pubsub": {},
    			"redis": {
    				"username": "",
    				"queueAddress": [
    					"redis-master.localdev.svc.cluster.local:6379"
    				]
    			}
    		},
    		"publishers": {
    			"provider": "redis",
    			"sqs": {
    				"messageQueueAddress": ""
    			},
    			"pubsub": {},
    			"redis": {
    				"username": "",
    				"queueAddress": [
    					"redis-master.localdev.svc.cluster.local:6379"
    				]
    			}
    		}
    	},
    	"database": {
    		"oauth2TokenEncryptionKey": "HEREISA32CHARSECRETWHICHISMADEUP",
    		"connectionDetails": "postgres://dbuser:hunter2@postgres-postgresql.localdev.svc.cluster.local:5432/dinner-done-better?sslmode=disable",
    		"debug": true,
    		"logQueries": true,
    		"runMigrations": true,
    		"maxPingAttempts": 50,
    		"pingWaitPeriod": 1000000000
    	}
    }
kind: ConfigMap
metadata:
  annotations:
    note: generated
  labels:
    app.kubernetes.io/name: dinner-done-better-backend
    type: generated
  name: dinner-done-better-job-search-data-index-scheduler-config
  namespace: localdev
---
apiVersion: v1
data:
  config.json: |-
    {
    	"observability": {
    		"logging": {
    			"level": 0,
    			"provider": "slog"
    		},
    		"metrics": {
    			"otelgrpc": {
    				"baseName": "ddb.api",
    				"metricsCollectorEndpoint": "http://0.0.0.0:4317",
    				"metricsCollectionInterval": 3000000000
    			},
    			"provider": "otelgrpc"
    		},
    		"tracing": {
    			"otelgrpc": {
    				"collector_endpoint": "http://0.0.0.0:4317",
    				"service_name": "dinner_done_better_service",
    				"spanCollectionProbability": 1
    			},
    			"provider": "otelgrpc"
    		}
    	},
    	"queues": {
    		"dataChangesTopicName": "data_changes",
    		"outboundEmailsTopicName": "outbound_emails",
    		"searchIndexRequestsTopicName": "search_index_requests",
    		"userDataAggregationTopicName": "user_data_aggregation_requests",
    		"webhookExecutionRequestsTopicName": "webhook_execution_requests"
    	},
    	"email": {
    		"sendgrid": null,
    		"mailgun": null,
    		"mailjet": null,
    		"circuitBreakerConfig": null,
    		"provider": ""
    	},
    	"analytics": {
    		"segment": null,
    		"posthog": null,
    		"rudderstack": null,
    		"circuitBreakerConfig": null,
    		"provider": ""
    	},
    	"search": {
    		"algolia": {
    			"appID": "",
    			"writeAPIKey": "",
    			"timeout": 0
    		},
    		"elasticsearch": null,
    		"circuitBreakerConfig": null,
    		"provider": "algolia"
    	},
    	"featureFlags": {
    		"LaunchDarkly": null,
    		"PostHog": null,
    		"CircuitBreakingConfig": null,
    		"Provider": ""
    	},
    	"encoding": {
    		"contentType": "application/json"
    	},
    	"meta": {
    		"runMode": "development",
    		"debug": true
    	},
    	"routing": {
    		"provider": "chi",
    		"enableCORSForLocalhost": true
    	},
    	"events": {
    		"consumers": {
    			"provider": "redis",
    			"sqs": {
    				"messageQueueAddress": ""
    			},
    			"pubsub": {},
    			"redis": {
    				"username": "",
    				"queueAddress": [
    					"redis-master.localdev.svc.cluster.local:6379"
    				]
    			}
    		},
    		"publishers": {
    			"provider": "redis",
    			"sqs": {
    				"messageQueueAddress": ""
    			},
    			"pubsub": {},
    			"redis": {
    				"username": "",
    				"queueAddress": [
    					"redis-master.localdev.svc.cluster.local:6379"
    				]
    			}
    		}
    	},
    	"server": {
    		"startupDeadline": 60000000000,
    		"httpPort": 8000,
    		"debug": true
    	},
    	"database": {
    		"oauth2TokenEncryptionKey": "HEREISA32CHARSECRETWHICHISMADEUP",
    		"connectionDetails": "postgres://dbuser:hunter2@postgres-postgresql.localdev.svc.cluster.local:5432/dinner-done-better?sslmode=disable",
    		"debug": true,
    		"logQueries": true,
    		"runMigrations": true,
    		"maxPingAttempts": 50,
    		"pingWaitPeriod": 1000000000
    	},
    	"services": {
    		"auditLogEntries": {},
    		"mealPlanGroceryListItems": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"validInstrumentMeasurementUnits": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"serviceSettingConfigurations": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"recipeRatings": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"validMeasurementUnitConversions": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"validIngredientGroups": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"serviceSettings": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"mealPlanTasks": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"recipeStepInstruments": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"recipeStepIngredients": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"householdInstrumentOwnerships": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"recipePrepTasks": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"recipeStepCompletionConditions": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"userIngredientPreferences": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"households": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"mealPlans": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"validPreparationInstruments": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"validIngredientPreparations": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"recipeStepProducts": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"validIngredientStateIngredients": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"mealPlanEvents": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"mealPlanOptionVotes": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"recipeStepVessels": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"validPreparationVessels": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"workers": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"userNotifications": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"mealPlanOptions": {
    			"dataChangesTopicName": "data_changes"
    		},
    		"dataPrivacy": {
    			"userDataAggregationTopicName": "user_data_aggregation_requests",
    			"dataChangesTopicName": "data_changes",
    			"uploads": {
    				"storageConfig": {
    					"filesystem": {
    						"rootDirectory": "/tmp"
    					},
    					"bucketName": "userdata",
    					"provider": "filesystem"
    				},
    				"debug": false
    			}
    		},
    		"recipeSteps": {
    			"mediaUploadPrefix": "https://example.website.lol",
    			"dataChangesTopicName": "data_changes",
    			"uploads": {
    				"storageConfig": {
    					"filesystem": {
    						"rootDirectory": "/uploads"
    					},
    					"bucketName": "recipe_media",
    					"uploadFilenameKey": "recipe_media",
    					"provider": "filesystem"
    				},
    				"debug": true
    			}
    		},
    		"users": {
    			"dataChangesTopicName": "data_changes",
    			"publicMediaURLPrefix": "",
    			"uploads": {
    				"storageConfig": {
    					"filesystem": {
    						"rootDirectory": "/uploads"
    					},
    					"bucketName": "avatars",
    					"uploadFilenameKey": "avatar",
    					"provider": "filesystem"
    				},
    				"debug": true
    			}
    		},
    		"validInstruments": {
    			"dataChangesTopicName": "data_changes",
    			"searchFromDatabase": false
    		},
    		"validMeasurementUnits": {
    			"dataChangesTopicName": "data_changes",
    			"searchFromDatabase": false
    		},
    		"oauth2Clients": {
    			"dataChangesTopicName": "data_changes",
    			"creationEnabled": false
    		},
    		"webhooks": {
    			"dataChangesTopicName": "data_changes",
    			"debug": false
    		},
    		"validIngredients": {
    			"dataChangesTopicName": "data_changes",
    			"searchFromDatabase": false
    		},
    		"meals": {
    			"dataChangesTopicName": "data_changes",
    			"searchFromDatabase": false
    		},
    		"validVessels": {
    			"dataChangesTopicName": "data_changes",
    			"searchFromDatabase": false
    		},
    		"householdInvitations": {
    			"dataChangesTopicName": "data_changes",
    			"debug": false
    		},
    		"validPreparations": {
    			"dataChangesTopicName": "data_changes",
    			"searchFromDatabase": false
    		},
    		"validIngredientStates": {
    			"dataChangesTopicName": "data_changes",
    			"searchFromDatabase": false
    		},
    		"recipes": {
    			"dataChangesTopicName": "data_changes",
    			"mediaUploadPrefix": "https://example.website.lol",
    			"uploads": {
    				"storageConfig": {
    					"filesystem": {
    						"rootDirectory": "/uploads"
    					},
    					"bucketName": "recipe_media",
    					"uploadFilenameKey": "recipe_media",
    					"provider": "filesystem"
    				},
    				"debug": true
    			},
    			"searchFromDatabase": false
    		},
    		"auth": {
    			"sso": {
    				"google": {
    					"callbackURL": "https://app.dinnerdonebetter.dev/auth/google/callback"
    				}
    			},
    			"dataChanges": "data_changes",
    			"jwtAudience": "localhost",
    			"jwtSigningKey": "SEVSRUlTQTMyQ0hBUlNFQ1JFVFdISUNISVNNQURFVVA=",
    			"oauth2": {
    				"domain": "http://localhost:9000",
    				"accessTokenLifespan": 3600000000000,
    				"refreshTokenLifespan": 3600000000000,
    				"debug": false
    			},
    			"jwtLifetime": 300000000000,
    			"debug": true,
    			"enableUserSignup": true,
    			"minimumUsernameLength": 3,
    			"minimumPasswordLength": 8
    		}
    	}
    }
kind: ConfigMap
metadata:
  annotations:
    note: generated
  labels:
    app.kubernetes.io/name: dinner-done-better-backend
    type: generated
  name: dinner-done-better-service-api-config
  namespace: localdev
---
apiVersion: v1
data:
  config.yaml: |-
    receivers:
      # TODO: this should go into a different collector instance
      postgresql:
        endpoint: postgres-postgresql.localdev.svc.cluster.local:5432
        transport: tcp
        username: dbuser
        password: hunter2
        databases:
          - dinner-done-better
        collection_interval: 10s
        tls:
          insecure: true
          insecure_skip_verify: true
      redis:
        endpoint: "redis.localdev.svc.cluster.local:6379"
        collection_interval: 10s
      filelog:
        include: [ /var/log/dinnerdonebetter/*.log ]
        operators:
          - type: json_parser
        resource:
          service_name: dinner-done-better-api-service
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318

      processors:
        k8sattributes/default:
        resourcedetection/system:
          detectors: [env, system] #, gcp
          timeout: 2s
          override: false
        batch:
          send_batch_size: 2048
          send_batch_max_size: 2048
          timeout: 1s
        batch/2:
          send_batch_size: 2048
          send_batch_max_size: 2048
          timeout: 1s

      exporters:
        debug:
        otlp:
          endpoint: tempo.localdev.svc.cluster.local:4317
          tls:
            insecure: true
        prometheusremotewrite:
          endpoint: prometheus-server.localdev.svc.cluster.local:3001/api/v1/write # /v1/push
        otlphttp:
          endpoint: http://loki.localdev.svc.cluster.local:3100/otlp

      service:
        telemetry:
          metrics:
            level: none
        pipelines:
          traces:
            receivers:
              - otlp
            processors:
              - batch
            exporters:
              - debug
              - otlp
          metrics:
            receivers:
              - otlp
            processors:
              - batch
            exporters:
              - debug
              - prometheusremotewrite
          logs:
            receivers:
              - filelog
            processors:
              - batch
            exporters:
              - otlphttp
kind: ConfigMap
metadata:
  annotations:
    note: generated
  labels:
    app.kubernetes.io/name: dinner-done-better-backend
    type: generated
  name: opentelemetry-collector-config
  namespace: localdev
---
apiVersion: v1
data:
  config.yaml: "receivers:\n  # TODO: this should go into a different collector instance\n  postgresql:\n    endpoint: postgres-postgresql.localdev.svc.cluster.local:5432\n    transport: tcp\n    username: dbuser\n    password: hunter2\n    databases:\n      - dinner-done-better\n    collection_interval: 10s\n    tls:\n      insecure: true\n      insecure_skip_verify: true\n  redis:\n    endpoint: \"redis.localdev.svc.cluster.local:6379\"\n    collection_interval: 10s\n  filelog:\n    include: [ /var/log/dinnerdonebetter/*.log ]\n    operators:\n      - type: json_parser\n    resource:\n      service_name: dinner-done-better-api-service\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n      http:\n        endpoint: 0.0.0.0:4318\n        \nprocessors:\n  k8sattributes/default:\n  resourcedetection/system:\n    detectors: [env, system] #, gcp\n    timeout: 2s\n    override: false\n  batch:\n    send_batch_size: 2048\n    send_batch_max_size: 2048\n    timeout: 1s\n  batch/2:\n    send_batch_size: 2048\n    send_batch_max_size: 2048\n    timeout: 1s\n\nexporters:\n  debug:\n  otlp:\n    endpoint: tempo.localdev.svc.cluster.local:4317\n    tls:\n      insecure: true\n  prometheusremotewrite:\n    endpoint: prometheus-server.localdev.svc.cluster.local:3001/api/v1/write # /v1/push\n  otlphttp:\n    endpoint: http://loki.localdev.svc.cluster.local:3100/otlp\n\nservice:\n  telemetry:\n    metrics:\n      level: none\n  pipelines:\n    traces:\n      receivers:\n        - otlp\n      processors:\n        - batch\n      exporters:\n        - debug\n        - otlp\n    metrics:\n      receivers:\n        - otlp\n      processors:\n        - batch\n      exporters:\n        - debug\n        - prometheusremotewrite\n    logs:\n      receivers:\n        - filelog\n      processors:\n        - batch\n      exporters:\n        - otlphttp\n"
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/name: dinner-done-better-backend
  name: opentelemetry-collector-config
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: dinner-done-better-backend
    app.kubernetes.io/name: dinner-done-better-backend
  name: dinner-done-better-api-svc
spec:
  ports:
    - name: http
      port: 8000
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: dinner-done-better-backend
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dinner-done-better-backend
    app.kubernetes.io/name: dinner-done-better-backend
  name: dinner-done-better-service-api-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dinner-done-better-backend
      app.kubernetes.io/name: dinner-done-better-backend
  template:
    metadata:
      labels:
        app: dinner-done-better-backend
        app.kubernetes.io/name: dinner-done-better-backend
    spec:
      containers:
        - env:
            - name: CONFIGURATION_FILEPATH
              value: /etc/service-config.json
          image: dinner-done-better-service-api:latest
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /_meta_/live
              port: 8000
            initialDelaySeconds: 15
            periodSeconds: 3
          name: dinner-done-better-service-api
          ports:
            - containerPort: 8000
              name: http
          readinessProbe:
            httpGet:
              path: /_meta_/ready
              port: 8000
            initialDelaySeconds: 15
            periodSeconds: 3
          resources:
            requests:
              cpu: 1000m
              memory: 256Mi
          volumeMounts:
            - mountPath: /etc/service-config.json
              name: config
              subPath: config.json
            - mountPath: /var/log/dinnerdonebetter
              name: logs
        - command:
            - /otelcol-contrib
            - --config
            - /conf/config.yaml
          image: otel/opentelemetry-collector-contrib:0.115.1
          name: opentelemetry-collector
          ports:
            - containerPort: 4317
              name: otel1
            - containerPort: 4318
              name: otel2
          volumeMounts:
            - mountPath: /var/log/dinnerdonebetter
              name: logs
              readOnly: true
            - mountPath: /conf
              name: opentelemetry-config
      volumes:
        - configMap:
            name: dinner-done-better-service-api-config
          name: config
        - emptyDir:
            sizeLimit: 500Mi
          name: logs
        - configMap:
            name: opentelemetry-collector-config
          name: opentelemetry-config
---
apiVersion: batch/v1
kind: CronJob
metadata:
  labels:
    app.kubernetes.io/name: dinner-done-better-backend
  name: dinner-done-better-cronjob-db-cleaner
spec:
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - env:
                - name: CONFIGURATION_FILEPATH
                  value: /etc/service-config.json
              image: dinner-done-better-job-db-cleaner:latest
              imagePullPolicy: IfNotPresent
              name: db-cleaner
              volumeMounts:
                - mountPath: /etc/service-config.json
                  name: config
                  subPath: config.json
                - mountPath: /var/log/dinnerdonebetter
                  name: logs
          restartPolicy: OnFailure
          volumes:
            - configMap:
                name: dinner-done-better-job-db-cleaner-config
              name: config
            - emptyDir:
                sizeLimit: 500Mi
              name: logs
  schedule: '* * 1,8,15,22 * *'
---
apiVersion: batch/v1
kind: CronJob
metadata:
  labels:
    app.kubernetes.io/name: dinner-done-better-backend
  name: dinner-done-better-job-email-prober
spec:
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - env:
                - name: CONFIGURATION_FILEPATH
                  value: /etc/service-config.json
              image: dinner-done-better-job-email-prober:latest
              imagePullPolicy: IfNotPresent
              name: email-prober
              volumeMounts:
                - mountPath: /etc/service-config.json
                  name: config
                  subPath: config.json
                - mountPath: /var/log/dinnerdonebetter
                  name: logs
          restartPolicy: OnFailure
          volumes:
            - configMap:
                name: dinner-done-better-job-email-prober-config
              name: config
            - emptyDir:
                sizeLimit: 500Mi
              name: logs
  schedule: 0 4 * * *
---
apiVersion: batch/v1
kind: CronJob
metadata:
  labels:
    app.kubernetes.io/name: dinner-done-better-backend
  name: dinner-done-better-job-meal-plan-finalizer
spec:
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - env:
                - name: CONFIGURATION_FILEPATH
                  value: /etc/service-config.json
                - name: DINNER_DONE_BETTER_DATA_CHANGES_TOPIC_NAME
                  value: data_changes
              image: dinner-done-better-job-meal-plan-finalizer:latest
              imagePullPolicy: IfNotPresent
              name: meal-plan-finalizer
              volumeMounts:
                - mountPath: /etc/service-config.json
                  name: config
                  subPath: config.json
                - mountPath: /var/log/dinnerdonebetter
                  name: logs
          restartPolicy: OnFailure
          volumes:
            - configMap:
                name: dinner-done-better-job-meal-plan-finalizer-config
              name: config
            - emptyDir:
                sizeLimit: 500Mi
              name: logs
  schedule: '*/5 * * * *'
---
apiVersion: batch/v1
kind: CronJob
metadata:
  labels:
    app.kubernetes.io/name: dinner-done-better-backend
  name: dinner-done-better-job-meal-plan-grocery-list-init
spec:
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - env:
                - name: CONFIGURATION_FILEPATH
                  value: /etc/service-config.json
                - name: DINNER_DONE_BETTER_DATA_CHANGES_TOPIC_NAME
                  value: data_changes
              image: dinner-done-better-job-meal-plan-grocery-list-init:latest
              imagePullPolicy: IfNotPresent
              name: meal-plan-grocery-list-init
              volumeMounts:
                - mountPath: /etc/service-config.json
                  name: config
                  subPath: config.json
                - mountPath: /var/log/dinnerdonebetter
                  name: logs
          restartPolicy: OnFailure
          volumes:
            - configMap:
                name: dinner-done-better-job-meal-plan-grocery-list-init-config
              name: config
            - emptyDir:
                sizeLimit: 500Mi
              name: logs
  schedule: '*/5 * * * *'
---
apiVersion: batch/v1
kind: CronJob
metadata:
  labels:
    app.kubernetes.io/name: dinner-done-better-backend
  name: dinner-done-better-job-meal-plan-task-creator
spec:
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - env:
                - name: CONFIGURATION_FILEPATH
                  value: /etc/service-config.json
                - name: DINNER_DONE_BETTER_DATA_CHANGES_TOPIC_NAME
                  value: data_changes
              image: dinner-done-better-job-meal-plan-task-creator:latest
              imagePullPolicy: IfNotPresent
              name: meal-plan-task-creator
              volumeMounts:
                - mountPath: /etc/service-config.json
                  name: config
                  subPath: config.json
                - mountPath: /var/log/dinnerdonebetter
                  name: logs
          restartPolicy: OnFailure
          volumes:
            - configMap:
                name: dinner-done-better-job-meal-plan-task-creator-config
              name: config
            - emptyDir:
                sizeLimit: 500Mi
              name: logs
  schedule: '*/5 * * * *'
---
apiVersion: batch/v1
kind: CronJob
metadata:
  labels:
    app.kubernetes.io/name: dinner-done-better-backend
  name: dinner-done-better-job-search-data-index-scheduler
spec:
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - env:
                - name: CONFIGURATION_FILEPATH
                  value: /etc/service-config.json
                - name: SEARCH_INDEXING_TOPIC_NAME
                  value: search_index_requests
              image: dinner-done-better-job-search-data-index-scheduler:latest
              imagePullPolicy: IfNotPresent
              name: search-data-index-scheduler
              volumeMounts:
                - mountPath: /etc/service-config.json
                  name: config
                  subPath: config.json
                - mountPath: /var/log/dinnerdonebetter
                  name: logs
          restartPolicy: OnFailure
          volumes:
            - configMap:
                name: dinner-done-better-job-search-data-index-scheduler-config
              name: config
            - emptyDir:
                sizeLimit: 500Mi
              name: logs
  schedule: '*/30 * * * *'
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/name: dinner-done-better-backend
  name: dinner-done-better-api-server-ingress
spec:
  rules:
    - host: api-server.k8s
      http:
        paths:
          - backend:
              service:
                name: dinner-done-better-api-svc
                port:
                  number: 8000
            path: /
            pathType: ImplementationSpecific
---
apiVersion: v1
kind: Namespace
metadata:
  name: localdev
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: dinner-done-better-admin-app
  name: dinner-done-better-admin-app-svc
spec:
  ports:
    - name: http
      port: 7000
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: dinner-done-better-admin-app
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: dinner-done-better-landing-app
  name: dinner-done-better-landing-svc
spec:
  ports:
    - name: http
      port: 10000
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: dinner-done-better-landing-app
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: dinner-done-better-webapp
  name: dinner-done-better-webapp-svc
spec:
  ports:
    - name: http
      port: 9000
      protocol: TCP
      targetPort: http
  selector:
    app.kubernetes.io/name: dinner-done-better-webapp
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dinner-done-better-admin-app
    app.kubernetes.io/name: dinner-done-better-admin-app
  name: dinner-done-better-admin-app-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dinner-done-better-admin-app
      app.kubernetes.io/name: dinner-done-better-admin-app
  template:
    metadata:
      labels:
        app: dinner-done-better-admin-app
        app.kubernetes.io/name: dinner-done-better-admin-app
    spec:
      containers:
        - env:
            - name: DISABLE_REGISTRATION
              value: "false"
            - name: NEXT_API_ENDPOINT
              value: dinner-done-better.localdev.svc.cluster.local:8000
            - name: NEXT_COOKIE_ENCRYPTION_KEY
              value: ZOTGz4KEhZFSM6udeESOX5JVqhtEdHdS
            - name: NEXT_BASE64_COOKIE_ENCRYPT_IV
              value: S2IwVXVvMW9hSEl4WjQ0ak1NYW50QndMTzJBWDJFV2o=
            - name: NEXT_DINNER_DONE_BETTER_OAUTH2_CLIENT_ID
              value: ""
            - name: NEXT_DINNER_DONE_BETTER_OAUTH2_CLIENT_SECRET
              value: ""
            - name: REWRITE_COOKIE_SECURE
              value: "false"
            - name: REWRITE_COOKIE_HOST_FROM
              value: ""
            - name: REWRITE_COOKIE_HOST_TO
              value: ""
            - name: NEXT_PUBLIC_SEGMENT_API_TOKEN
              value: ""
          image: dinner-done-better-admin-app
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /api/_meta_/live
              port: 7000
            initialDelaySeconds: 15
            periodSeconds: 32
          name: dinner-done-better-admin-app
          ports:
            - containerPort: 7000
              name: http
          readinessProbe:
            httpGet:
              path: /api/_meta_/ready
              port: 7000
            initialDelaySeconds: 15
            periodSeconds: 3
          resources:
            requests:
              cpu: 1000m
              memory: 256Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dinner-done-better-landing
    app.kubernetes.io/name: dinner-done-better-landing-app
  name: dinner-done-better-landing-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dinner-done-better-landing
      app.kubernetes.io/name: dinner-done-better-landing-app
  template:
    metadata:
      labels:
        app: dinner-done-better-landing
        app.kubernetes.io/name: dinner-done-better-landing-app
    spec:
      containers:
        - env:
            - name: NEXT_PUBLIC_SEGMENT_API_TOKEN
              value: ""
          image: dinner-done-better-landing
          imagePullPolicy: IfNotPresent
          name: dinner-done-better-landing
          ports:
            - containerPort: 10000
              name: http
          resources:
            requests:
              cpu: 1000m
              memory: 256Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dinner-done-better-webapp
  name: dinner-done-better-webapp-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dinner-done-better-webapp
      app.kubernetes.io/name: dinner-done-better-webapp
  template:
    metadata:
      labels:
        app: dinner-done-better-webapp
        app.kubernetes.io/name: dinner-done-better-webapp
    spec:
      containers:
        - env:
            - name: DISABLE_REGISTRATION
              value: "false"
            - name: NEXT_API_ENDPOINT
              value: dinner-done-better.localdev.svc.cluster.local:8000
            - name: NEXT_COOKIE_ENCRYPTION_KEY
              value: ZOTGz4KEhZFSM6udeESOX5JVqhtEdHdS
            - name: NEXT_BASE64_COOKIE_ENCRYPT_IV
              value: S2IwVXVvMW9hSEl4WjQ0ak1NYW50QndMTzJBWDJFV2o=
            - name: NEXT_DINNER_DONE_BETTER_OAUTH2_CLIENT_ID
              value: ""
            - name: NEXT_DINNER_DONE_BETTER_OAUTH2_CLIENT_SECRET
              value: ""
            - name: REWRITE_COOKIE_SECURE
              value: "false"
            - name: REWRITE_COOKIE_HOST_FROM
              value: ""
            - name: REWRITE_COOKIE_HOST_TO
              value: ""
            - name: NEXT_PUBLIC_SEGMENT_API_TOKEN
              value: ""
          image: dinner-done-better-webapp
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /api/_meta_/live
              port: 9000
            initialDelaySeconds: 15
            periodSeconds: 32
          name: dinner-done-better-webapp
          ports:
            - containerPort: 9000
              name: http
          readinessProbe:
            httpGet:
              path: /api/_meta_/ready
              port: 9000
            initialDelaySeconds: 15
            periodSeconds: 3
          resources:
            requests:
              cpu: 1000m
              memory: 256Mi
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/name: dinner-done-better-admin-app
  name: dinner-done-better-admin-app-ingress
spec:
  rules:
    - host: admin-app-server.k8s
      http:
        paths:
          - backend:
              service:
                name: dinner-done-better-admin-app-svc
                port:
                  number: 9000
            path: /
            pathType: ImplementationSpecific
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/name: dinner-done-better-landing-app
  name: dinner-done-better-landing-ingress
spec:
  rules:
    - host: landing-server.k8s
      http:
        paths:
          - backend:
              service:
                name: dinner-done-better-landing-svc
                port:
                  number: 10000
            path: /
            pathType: ImplementationSpecific
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/name: dinner-done-better-webapp
  name: dinner-done-better-webapp-ingress
spec:
  rules:
    - host: webapp-server.k8s
      http:
        paths:
          - backend:
              service:
                name: dinner-done-better-webapp-svc
                port:
                  number: 9000
            path: /
            pathType: ImplementationSpecific
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/instance: tempo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: tempo
    app.kubernetes.io/version: 2.6.1
    helm.sh/chart: tempo-1.14.0
  name: tempo
  namespace: localdev
---
apiVersion: v1
data:
  overrides.yaml: |
    overrides:
      {}
  tempo.yaml: |
    memberlist:
      cluster_label: "tempo.localdev"
    multitenancy_enabled: false
    usage_report:
      reporting_enabled: true
    compactor:
      compaction:
        block_retention: 24h
    distributor:
      receivers:
            jaeger:
              protocols:
                grpc:
                  endpoint: 0.0.0.0:14250
                thrift_binary:
                  endpoint: 0.0.0.0:6832
                thrift_compact:
                  endpoint: 0.0.0.0:6831
                thrift_http:
                  endpoint: 0.0.0.0:14268
            opencensus: null
            otlp:
              protocols:
                grpc:
                  endpoint: 0.0.0.0:4317
                http:
                  endpoint: 0.0.0.0:4318
    ingester:
          {}
    server:
          http_listen_port: 3100
    storage:
          trace:
            backend: local
            local:
              path: /var/tempo/traces
            wal:
              path: /var/tempo/wal
    querier:
          {}
    query_frontend:
          {}
    overrides:
          per_tenant_override_config: /conf/overrides.yaml
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/instance: tempo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: tempo
    app.kubernetes.io/version: 2.6.1
    helm.sh/chart: tempo-1.14.0
  name: tempo
  namespace: localdev
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: tempo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: tempo
    app.kubernetes.io/version: 2.6.1
    helm.sh/chart: tempo-1.14.0
  name: tempo
  namespace: localdev
spec:
  ports:
    - name: tempo-prom-metrics
      port: 3100
      targetPort: 3100
    - name: tempo-jaeger-thrift-compact
      port: 6831
      protocol: UDP
      targetPort: 6831
    - name: tempo-jaeger-thrift-binary
      port: 6832
      protocol: UDP
      targetPort: 6832
    - name: tempo-jaeger-thrift-http
      port: 14268
      protocol: TCP
      targetPort: 14268
    - name: grpc-tempo-jaeger
      port: 14250
      protocol: TCP
      targetPort: 14250
    - name: tempo-zipkin
      port: 9411
      protocol: TCP
      targetPort: 9411
    - name: tempo-otlp-legacy
      port: 55680
      protocol: TCP
      targetPort: 55680
    - name: tempo-otlp-http-legacy
      port: 55681
      protocol: TCP
      targetPort: 4318
    - name: grpc-tempo-otlp
      port: 4317
      protocol: TCP
      targetPort: 4317
    - name: tempo-otlp-http
      port: 4318
      protocol: TCP
      targetPort: 4318
    - name: tempo-opencensus
      port: 55678
      protocol: TCP
      targetPort: 55678
  selector:
    app.kubernetes.io/instance: tempo
    app.kubernetes.io/name: tempo
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/instance: tempo
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: tempo
    app.kubernetes.io/version: 2.6.1
    helm.sh/chart: tempo-1.14.0
  name: tempo
  namespace: localdev
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: tempo
      app.kubernetes.io/name: tempo
  serviceName: tempo-headless
  template:
    metadata:
      annotations:
        checksum/config: 8b6eead65a7952203ba89c9bf1a3054a71422e8f32edc760c8b8d781f9d32643
      labels:
        app.kubernetes.io/instance: tempo
        app.kubernetes.io/name: tempo
    spec:
      automountServiceAccountToken: true
      containers:
        - args:
            - -config.file=/conf/tempo.yaml
            - -mem-ballast-size-mbs=1024
          env: null
          image: grafana/tempo:2.6.1
          imagePullPolicy: IfNotPresent
          name: tempo
          ports:
            - containerPort: 3100
              name: prom-metrics
            - containerPort: 6831
              name: jaeger-thrift-c
              protocol: UDP
            - containerPort: 6832
              name: jaeger-thrift-b
              protocol: UDP
            - containerPort: 14268
              name: jaeger-thrift-h
            - containerPort: 14250
              name: jaeger-grpc
            - containerPort: 9411
              name: zipkin
            - containerPort: 55680
              name: otlp-legacy
            - containerPort: 4317
              name: otlp-grpc
            - containerPort: 55681
              name: otlp-httplegacy
            - containerPort: 4318
              name: otlp-http
            - containerPort: 55678
              name: opencensus
          resources: {}
          volumeMounts:
            - mountPath: /conf
              name: tempo-conf
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
      serviceAccountName: tempo
      volumes:
        - configMap:
            name: tempo
          name: tempo-conf
  updateStrategy:
    type: RollingUpdate
