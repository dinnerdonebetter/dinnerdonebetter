openapi: 3.1.0
info:
  contact:
    email: support@dinnerdonebetter.dev
  description: This is the spec for the Dinner Done Better API.
  servers:
  - url: https://api.dinnerdonebetter.dev
  tags:
  - description: Recipe-oriented routes
    name: recipes
  title: Dinner Done Better API
  version: 1.0.0
paths:
  /api/v1/admin/cycle_cookie_secret:
    post: {}
  /api/v1/admin/users/status:
    post: {}
  /api/v1/audit_log_entries/{auditLogEntryID}:
    get:
      parameters:
      - in: path
        name: auditLogEntryID
        required: true
        schema:
          type: string
  /api/v1/audit_log_entries/for_household:
    get: {}
  /api/v1/audit_log_entries/for_user:
    get: {}
  /api/v1/household_invitations/{householdInvitationID}/:
    get:
      parameters:
      - in: path
        name: householdInvitationID
        required: true
        schema:
          type: string
  /api/v1/household_invitations/{householdInvitationID}/accept:
    put:
      parameters:
      - in: path
        name: householdInvitationID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/HouseholdInvitationUpdateRequestInput'
  /api/v1/household_invitations/{householdInvitationID}/cancel:
    put:
      parameters:
      - in: path
        name: householdInvitationID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/HouseholdInvitationUpdateRequestInput'
  /api/v1/household_invitations/{householdInvitationID}/reject:
    put:
      parameters:
      - in: path
        name: householdInvitationID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/HouseholdInvitationUpdateRequestInput'
  /api/v1/household_invitations/received:
    get: {}
  /api/v1/household_invitations/sent:
    get: {}
  /api/v1/households/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
    post:
      requestBody:
        $ref: '#/components/schemas/HouseholdCreationRequestInput'
  /api/v1/households/{householdID}/:
    delete:
      parameters:
      - in: path
        name: householdID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: householdID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: householdID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/HouseholdCreationRequestInput'
  /api/v1/households/{householdID}/default:
    post:
      parameters:
      - in: path
        name: householdID
        required: true
        schema:
          type: string
  /api/v1/households/{householdID}/invitations/:
    post:
      parameters:
      - in: path
        name: householdID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/HouseholdInvitationCreationRequestInput'
  /api/v1/households/{householdID}/invitations/{householdInvitationID}/:
    get:
      parameters:
      - in: path
        name: householdID
        required: true
        schema:
          type: string
      - in: path
        name: householdInvitationID
        required: true
        schema:
          type: string
  /api/v1/households/{householdID}/invite:
    post:
      parameters:
      - in: path
        name: householdID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/HouseholdInvitationCreationRequestInput'
  /api/v1/households/{householdID}/members/{userID}:
    delete:
      parameters:
      - in: path
        name: householdID
        required: true
        schema:
          type: string
      - in: path
        name: userID
        required: true
        schema:
          type: string
  /api/v1/households/{householdID}/members/{userID}/permissions: {}
  /api/v1/households/{householdID}/transfer:
    post:
      parameters:
      - in: path
        name: householdID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/HouseholdOwnershipTransferInput'
  /api/v1/households/current:
    get: {}
  /api/v1/households/instruments/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
    post:
      requestBody:
        $ref: '#/components/schemas/HouseholdInstrumentOwnershipCreationRequestInput'
  /api/v1/households/instruments/{householdInstrumentOwnershipID}/:
    delete:
      parameters:
      - in: path
        name: householdInstrumentOwnershipID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: householdInstrumentOwnershipID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: householdInstrumentOwnershipID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/HouseholdInstrumentOwnershipUpdateRequestInput'
  /api/v1/meal_plans/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
    post:
      requestBody:
        $ref: '#/components/schemas/MealPlanCreationRequestInput'
  /api/v1/meal_plans/{mealPlanID}/:
    delete:
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/MealPlanUpdateRequestInput'
  /api/v1/meal_plans/{mealPlanID}/events/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
    post:
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/MealPlanEventCreationRequestInput'
  /api/v1/meal_plans/{mealPlanID}/events/{mealPlanEventID}/:
    delete:
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanEventID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanEventID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanEventID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/MealPlanEventUpdateRequestInput'
  /api/v1/meal_plans/{mealPlanID}/events/{mealPlanEventID}/options/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanEventID
        required: true
        schema:
          type: string
    post:
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanEventID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/MealPlanOptionCreationRequestInput'
  /api/v1/meal_plans/{mealPlanID}/events/{mealPlanEventID}/options/{mealPlanOptionID}/:
    delete:
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanEventID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanOptionID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanEventID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanOptionID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanEventID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanOptionID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/MealPlanOptionUpdateRequestInput'
  /api/v1/meal_plans/{mealPlanID}/events/{mealPlanEventID}/options/{mealPlanOptionID}/votes/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanEventID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanOptionID
        required: true
        schema:
          type: string
  /api/v1/meal_plans/{mealPlanID}/events/{mealPlanEventID}/options/{mealPlanOptionID}/votes/{mealPlanOptionVoteID}/:
    delete:
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanEventID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanOptionID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanOptionVoteID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanEventID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanOptionID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanOptionVoteID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanEventID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanOptionID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanOptionVoteID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/MealPlanOptionVoteUpdateRequestInput'
  /api/v1/meal_plans/{mealPlanID}/events/{mealPlanEventID}/vote:
    post:
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanEventID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/MealPlanOptionVoteCreationRequestInput'
  /api/v1/meal_plans/{mealPlanID}/finalize:
    post:
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
  /api/v1/meal_plans/{mealPlanID}/grocery_list_items/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
    post:
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/MealPlanGroceryListItemCreationRequestInput'
  /api/v1/meal_plans/{mealPlanID}/grocery_list_items/{mealPlanGroceryListItemID}/:
    delete:
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanGroceryListItemID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanGroceryListItemID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanGroceryListItemID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/MealPlanGroceryListItemUpdateRequestInput'
  /api/v1/meal_plans/{mealPlanID}/tasks/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
    post:
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/MealPlanTaskCreationRequestInput'
  /api/v1/meal_plans/{mealPlanID}/tasks/{mealPlanTaskID}/:
    get:
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanTaskID
        required: true
        schema:
          type: string
  /api/v1/meals/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
    post:
      requestBody:
        $ref: '#/components/schemas/MealCreationRequestInput'
  /api/v1/meals/{mealID}/:
    delete:
      parameters:
      - in: path
        name: mealID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: mealID
        required: true
        schema:
          type: string
  /api/v1/meals/search:
    get: {}
  /api/v1/oauth2_clients/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
    post:
      requestBody:
        $ref: '#/components/schemas/OAuth2ClientCreationRequestInput'
  /api/v1/oauth2_clients/{oauth2ClientID}/:
    delete: {}
    get: {}
  /api/v1/recipes/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
    post:
      requestBody:
        $ref: '#/components/schemas/RecipeCreationRequestInput'
  /api/v1/recipes/{recipeID}/:
    delete:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/RecipeUpdateRequestInput'
  /api/v1/recipes/{recipeID}/clone:
    post:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
  /api/v1/recipes/{recipeID}/dag:
    get:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
  /api/v1/recipes/{recipeID}/images:
    post:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
  /api/v1/recipes/{recipeID}/mermaid:
    get:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
  /api/v1/recipes/{recipeID}/prep_steps:
    get:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
  /api/v1/recipes/{recipeID}/prep_tasks/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
    post:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/RecipePrepTaskCreationRequestInput'
  /api/v1/recipes/{recipeID}/prep_tasks/{recipePrepTaskID}/:
    delete:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipePrepTaskID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipePrepTaskID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipePrepTaskID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/RecipePrepTaskUpdateRequestInput'
  /api/v1/recipes/{recipeID}/ratings/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
    post:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/RecipeRatingCreationRequestInput'
  /api/v1/recipes/{recipeID}/ratings/{recipeRatingID}/:
    delete:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeRatingID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeRatingID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeRatingID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/RecipeRatingUpdateRequestInput'
  /api/v1/recipes/{recipeID}/steps/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
    post:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/RecipeStepCreationRequestInput'
  /api/v1/recipes/{recipeID}/steps/{recipeStepID}/:
    delete:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/RecipeStepUpdateRequestInput'
  /api/v1/recipes/{recipeID}/steps/{recipeStepID}/completion_conditions/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
    post:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/RecipeStepCompletionConditionCreationRequestInput'
  /api/v1/recipes/{recipeID}/steps/{recipeStepID}/completion_conditions/{recipeStepCompletionConditionID}/:
    delete:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepCompletionConditionID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepCompletionConditionID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepCompletionConditionID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/RecipeStepCompletionConditionUpdateRequestInput'
  /api/v1/recipes/{recipeID}/steps/{recipeStepID}/images:
    post:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
  /api/v1/recipes/{recipeID}/steps/{recipeStepID}/ingredients/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
    post:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/RecipeStepIngredientCreationRequestInput'
  /api/v1/recipes/{recipeID}/steps/{recipeStepID}/ingredients/{recipeStepIngredientID}/:
    delete:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepIngredientID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepIngredientID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepIngredientID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/RecipeStepIngredientUpdateRequestInput'
  /api/v1/recipes/{recipeID}/steps/{recipeStepID}/instruments/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
    post:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/RecipeStepInstrumentCreationRequestInput'
  /api/v1/recipes/{recipeID}/steps/{recipeStepID}/instruments/{recipeStepInstrumentID}/:
    delete:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepInstrumentID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepInstrumentID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepInstrumentID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/RecipeStepInstrumentUpdateRequestInput'
  /api/v1/recipes/{recipeID}/steps/{recipeStepID}/products/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
    post:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/RecipeStepProductCreationRequestInput'
  /api/v1/recipes/{recipeID}/steps/{recipeStepID}/products/{recipeStepProductID}/:
    delete:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepProductID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepProductID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepProductID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/RecipeStepProductUpdateRequestInput'
  /api/v1/recipes/{recipeID}/steps/{recipeStepID}/vessels/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
    post:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/RecipeStepVesselCreationRequestInput'
  /api/v1/recipes/{recipeID}/steps/{recipeStepID}/vessels/{recipeStepVesselID}/:
    delete:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepVesselID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepVesselID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepVesselID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/RecipeStepVesselUpdateRequestInput'
  /api/v1/recipes/search:
    get: {}
  /api/v1/settings/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
    post:
      requestBody:
        $ref: '#/components/schemas/ServiceSettingCreationRequestInput'
  /api/v1/settings/{serviceSettingID}/:
    delete:
      parameters:
      - in: path
        name: serviceSettingID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: serviceSettingID
        required: true
        schema:
          type: string
  /api/v1/settings/configurations/:
    post:
      requestBody:
        $ref: '#/components/schemas/ServiceSettingConfigurationCreationRequestInput'
  /api/v1/settings/configurations/{serviceSettingConfigurationID}:
    delete:
      parameters:
      - in: path
        name: serviceSettingConfigurationID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: serviceSettingConfigurationID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/ServiceSettingConfigurationUpdateRequestInput'
  /api/v1/settings/configurations/household:
    get: {}
  /api/v1/settings/configurations/user:
    get: {}
  /api/v1/settings/configurations/user/{serviceSettingConfigurationName}:
    get:
      parameters:
      - in: path
        name: serviceSettingConfigurationName
        required: true
        schema:
          type: string
  /api/v1/settings/search:
    get: {}
  /api/v1/user_ingredient_preferences/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
    post:
      requestBody:
        $ref: '#/components/schemas/UserIngredientPreferenceCreationRequestInput'
  /api/v1/user_ingredient_preferences/{userIngredientPreferenceID}/:
    delete:
      parameters:
      - in: path
        name: userIngredientPreferenceID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: userIngredientPreferenceID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/UserIngredientPreferenceUpdateRequestInput'
  /api/v1/user_notifications/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
    post:
      requestBody:
        $ref: '#/components/schemas/UserNotificationCreationRequestInput'
  /api/v1/user_notifications/{userNotificationID}/:
    get:
      parameters:
      - in: path
        name: userNotificationID
        required: true
        schema:
          type: string
  /api/v1/users/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
  /api/v1/users/{userID}/:
    delete:
      parameters:
      - in: path
        name: userID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: userID
        required: true
        schema:
          type: string
  /api/v1/users/avatar/upload:
    post: {}
  /api/v1/users/details:
    put:
      requestBody:
        $ref: '#/components/schemas/UserDetailsUpdateRequestInput'
  /api/v1/users/email_address:
    put:
      requestBody:
        $ref: '#/components/schemas/UserEmailAddressUpdateInput'
  /api/v1/users/email_address_verification:
    post:
      requestBody:
        $ref: '#/components/schemas/EmailAddressVerificationRequestInput'
  /api/v1/users/household/select:
    post:
      requestBody:
        $ref: '#/components/schemas/ChangeActiveHouseholdInput'
  /api/v1/users/password/new:
    put: {}
  /api/v1/users/permissions/check:
    post:
      requestBody:
        $ref: '#/components/schemas/UserPermissionsRequestInput'
  /api/v1/users/search:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
  /api/v1/users/self:
    get: {}
  /api/v1/users/totp_secret/new:
    post:
      requestBody:
        $ref: '#/components/schemas/TOTPSecretRefreshInput'
  /api/v1/users/username:
    put:
      requestBody:
        $ref: '#/components/schemas/UsernameUpdateInput'
  /api/v1/valid_ingredient_groups/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
    post:
      requestBody:
        $ref: '#/components/schemas/ValidIngredientGroupCreationRequestInput'
  /api/v1/valid_ingredient_groups/{validIngredientGroupID}/:
    delete:
      parameters:
      - in: path
        name: validIngredientGroupID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: validIngredientGroupID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: validIngredientGroupID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/ValidIngredientGroupUpdateRequestInput'
  /api/v1/valid_ingredient_groups/search:
    get: {}
  /api/v1/valid_ingredient_measurement_units/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
    post:
      requestBody:
        $ref: '#/components/schemas/ValidIngredientMeasurementUnitCreationRequestInput'
  /api/v1/valid_ingredient_measurement_units/{validIngredientMeasurementUnitID}/:
    delete:
      parameters:
      - in: path
        name: validIngredientMeasurementUnitID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: validIngredientMeasurementUnitID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: validIngredientMeasurementUnitID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/ValidIngredientMeasurementUnitUpdateRequestInput'
  /api/v1/valid_ingredient_measurement_units/by_ingredient/{validIngredientID}/:
    get:
      parameters:
      - in: path
        name: validIngredientID
        required: true
        schema:
          type: string
  /api/v1/valid_ingredient_measurement_units/by_measurement_unit/{validMeasurementUnitID}/:
    get:
      parameters:
      - in: path
        name: validMeasurementUnitID
        required: true
        schema:
          type: string
  /api/v1/valid_ingredient_preparations/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
    post:
      requestBody:
        $ref: '#/components/schemas/ValidIngredientPreparationCreationRequestInput'
  /api/v1/valid_ingredient_preparations/{validIngredientPreparationID}/:
    delete:
      parameters:
      - in: path
        name: validIngredientPreparationID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: validIngredientPreparationID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: validIngredientPreparationID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/ValidIngredientPreparationUpdateRequestInput'
  /api/v1/valid_ingredient_preparations/by_ingredient/{validIngredientID}/:
    get:
      parameters:
      - in: path
        name: validIngredientID
        required: true
        schema:
          type: string
  /api/v1/valid_ingredient_preparations/by_preparation/{validPreparationID}/:
    get:
      parameters:
      - in: path
        name: validPreparationID
        required: true
        schema:
          type: string
  /api/v1/valid_ingredient_state_ingredients/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
    post:
      requestBody:
        $ref: '#/components/schemas/ValidIngredientStateIngredientCreationRequestInput'
  /api/v1/valid_ingredient_state_ingredients/{validIngredientStateIngredientID}/:
    delete:
      parameters:
      - in: path
        name: validIngredientStateIngredientID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: validIngredientStateIngredientID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: validIngredientStateIngredientID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/ValidIngredientStateIngredientUpdateRequestInput'
  /api/v1/valid_ingredient_state_ingredients/by_ingredient/{validIngredientID}/:
    get:
      parameters:
      - in: path
        name: validIngredientID
        required: true
        schema:
          type: string
  /api/v1/valid_ingredient_state_ingredients/by_ingredient_state/{validIngredientStateID}/:
    get:
      parameters:
      - in: path
        name: validIngredientStateID
        required: true
        schema:
          type: string
  /api/v1/valid_ingredient_states/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
    post:
      requestBody:
        $ref: '#/components/schemas/ValidIngredientStateCreationRequestInput'
  /api/v1/valid_ingredient_states/{validIngredientStateID}/:
    delete:
      parameters:
      - in: path
        name: validIngredientStateID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: validIngredientStateID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: validIngredientStateID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/ValidIngredientStateUpdateRequestInput'
  /api/v1/valid_ingredient_states/search:
    get: {}
  /api/v1/valid_ingredients/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
    post:
      requestBody:
        $ref: '#/components/schemas/ValidIngredientCreationRequestInput'
  /api/v1/valid_ingredients/{validIngredientID}/:
    delete:
      parameters:
      - in: path
        name: validIngredientID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: validIngredientID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: validIngredientID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/ValidIngredientUpdateRequestInput'
  /api/v1/valid_ingredients/by_preparation/{validPreparationID}/:
    get:
      parameters:
      - in: path
        name: validPreparationID
        required: true
        schema:
          type: string
  /api/v1/valid_ingredients/random:
    get: {}
  /api/v1/valid_ingredients/search:
    get: {}
  /api/v1/valid_instruments/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
    post:
      requestBody:
        $ref: '#/components/schemas/ValidInstrumentCreationRequestInput'
  /api/v1/valid_instruments/{validInstrumentID}/:
    delete:
      parameters:
      - in: path
        name: validInstrumentID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: validInstrumentID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: validInstrumentID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/ValidInstrumentUpdateRequestInput'
  /api/v1/valid_instruments/random:
    get: {}
  /api/v1/valid_instruments/search:
    get: {}
  /api/v1/valid_measurement_conversions/:
    post:
      requestBody:
        $ref: '#/components/schemas/ValidMeasurementUnitConversionCreationRequestInput'
  /api/v1/valid_measurement_conversions/{validMeasurementUnitConversionID}/:
    delete:
      parameters:
      - in: path
        name: validMeasurementUnitConversionID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: validMeasurementUnitConversionID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: validMeasurementUnitConversionID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/ValidMeasurementUnitConversionUpdateRequestInput'
  /api/v1/valid_measurement_conversions/from_unit/{validMeasurementUnitID}:
    get:
      parameters:
      - in: path
        name: validMeasurementUnitID
        required: true
        schema:
          type: string
  /api/v1/valid_measurement_conversions/to_unit/{validMeasurementUnitID}:
    get:
      parameters:
      - in: path
        name: validMeasurementUnitID
        required: true
        schema:
          type: string
  /api/v1/valid_measurement_units/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
    post:
      requestBody:
        $ref: '#/components/schemas/ValidMeasurementUnitCreationRequestInput'
  /api/v1/valid_measurement_units/{validMeasurementUnitID}/:
    delete:
      parameters:
      - in: path
        name: validMeasurementUnitID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: validMeasurementUnitID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: validMeasurementUnitID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/ValidMeasurementUnitUpdateRequestInput'
  /api/v1/valid_measurement_units/by_ingredient/{validIngredientID}:
    get:
      parameters:
      - in: path
        name: validIngredientID
        required: true
        schema:
          type: string
  /api/v1/valid_measurement_units/search:
    get: {}
  /api/v1/valid_preparation_instruments/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
    post:
      requestBody:
        $ref: '#/components/schemas/ValidPreparationInstrumentCreationRequestInput'
  /api/v1/valid_preparation_instruments/{validPreparationVesselID}/:
    delete:
      parameters:
      - in: path
        name: validPreparationVesselID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: validPreparationVesselID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: validPreparationVesselID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/ValidPreparationInstrumentUpdateRequestInput'
  /api/v1/valid_preparation_instruments/by_instrument/{validInstrumentID}/:
    get:
      parameters:
      - in: path
        name: validInstrumentID
        required: true
        schema:
          type: string
  /api/v1/valid_preparation_instruments/by_preparation/{validPreparationID}/:
    get:
      parameters:
      - in: path
        name: validPreparationID
        required: true
        schema:
          type: string
  /api/v1/valid_preparation_vessels/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
    post:
      requestBody:
        $ref: '#/components/schemas/ValidPreparationVesselCreationRequestInput'
  /api/v1/valid_preparation_vessels/{validPreparationVesselID}/:
    delete:
      parameters:
      - in: path
        name: validPreparationVesselID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: validPreparationVesselID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: validPreparationVesselID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/ValidPreparationVesselUpdateRequestInput'
  /api/v1/valid_preparation_vessels/by_preparation/{validPreparationID}/:
    get:
      parameters:
      - in: path
        name: validPreparationID
        required: true
        schema:
          type: string
  /api/v1/valid_preparation_vessels/by_vessel/{ValidVesselID}/:
    get:
      parameters:
      - in: path
        name: ValidVesselID
        required: true
        schema:
          type: string
  /api/v1/valid_preparations/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
    post:
      requestBody:
        $ref: '#/components/schemas/ValidPreparationCreationRequestInput'
  /api/v1/valid_preparations/{validPreparationID}/:
    delete:
      parameters:
      - in: path
        name: validPreparationID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: validPreparationID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: validPreparationID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/ValidPreparationUpdateRequestInput'
  /api/v1/valid_preparations/random:
    get: {}
  /api/v1/valid_preparations/search:
    get: {}
  /api/v1/valid_vessels/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
    post:
      requestBody:
        $ref: '#/components/schemas/ValidVesselCreationRequestInput'
  /api/v1/valid_vessels/{validVesselID}/:
    delete:
      parameters:
      - in: path
        name: validVesselID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: validVesselID
        required: true
        schema:
          type: string
    put:
      parameters:
      - in: path
        name: validVesselID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/ValidVesselUpdateRequestInput'
  /api/v1/valid_vessels/random:
    get: {}
  /api/v1/valid_vessels/search:
    get: {}
  /api/v1/webhooks/:
    get:
      parameters:
      - in: query
        name: page
        required: true
        schema:
          type: integer
      - in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "1"
          - t
          - T
          - "true"
          - "TRUE"
          - "True"
          - "0"
          - f
          - F
          - "false"
          - "FALSE"
          - "False"
          type: string
      - in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
    post:
      requestBody:
        $ref: '#/components/schemas/WebhookCreationRequestInput'
  /api/v1/webhooks/{webhookID}/:
    delete:
      parameters:
      - in: path
        name: webhookID
        required: true
        schema:
          type: string
    get:
      parameters:
      - in: path
        name: webhookID
        required: true
        schema:
          type: string
  /api/v1/webhooks/{webhookID}/trigger_events:
    post:
      parameters:
      - in: path
        name: webhookID
        required: true
        schema:
          type: string
      requestBody:
        $ref: '#/components/schemas/WebhookTriggerEventCreationRequestInput'
  /api/v1/webhooks/{webhookID}/trigger_events/{webhookTriggerEventID}/:
    delete:
      parameters:
      - in: path
        name: webhookID
        required: true
        schema:
          type: string
      - in: path
        name: webhookTriggerEventID
        required: true
        schema:
          type: string
  /api/v1/workers/finalize_meal_plans:
    post:
      requestBody:
        $ref: '#/components/schemas/FinalizeMealPlansRequest'
  /api/v1/workers/meal_plan_grocery_list_init:
    post: {}
  /api/v1/workers/meal_plan_tasks:
    post: {}
  /auth/{auth_provider}:
    get: {}
  /auth/{auth_provider}/callback:
    get: {}
  /auth/status:
    get: {}
  /oauth2/authorize:
    get: {}
  /oauth2/token:
    post: {}
  /users/:
    post:
      requestBody:
        $ref: '#/components/schemas/UserRegistrationInput'
  /users/email_address/verify:
    post:
      requestBody:
        $ref: '#/components/schemas/EmailAddressVerificationRequestInput'
  /users/login:
    post:
      requestBody:
        $ref: '#/components/schemas/UserLoginInput'
  /users/login/admin:
    post:
      requestBody:
        $ref: '#/components/schemas/UserLoginInput'
  /users/logout:
    post: {}
  /users/password/reset:
    post:
      requestBody:
        $ref: '#/components/schemas/PasswordResetTokenCreationRequestInput'
  /users/password/reset/redeem:
    post:
      requestBody:
        $ref: '#/components/schemas/PasswordResetTokenRedemptionRequestInput'
  /users/totp_secret/verify:
    post:
      requestBody:
        $ref: '#/components/schemas/EmailAddressVerificationRequestInput'
  /users/username/reminder:
    post:
      requestBody:
        $ref: '#/components/schemas/UsernameReminderRequestInput'
components:
  schemas:
    APIError:
      properties:
        code:
          $ref: '#/components/schemas/ErrorCode'
        message:
          type: string
      type: object
    APIResponse:
      properties:
        data:
          $ref: '#/components/schemas/T'
        details:
          $ref: '#/components/schemas/ResponseDetails'
        error:
          $ref: '#/components/schemas/APIError'
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    AuditLogEntry:
      properties:
        belongsToHousehold:
          type: string
        belongsToUser:
          type: string
        changes:
          $ref: '#/components/schemas/object'
        createdAt:
          type: string
        eventType:
          $ref: '#/components/schemas/AuditLogEntryEventType'
        id:
          type: string
        relevantID:
          type: string
        resourceType:
          type: string
      type: object
    AvatarUpdateInput:
      properties:
        base64EncodedData:
          type: string
      type: object
    ChangeActiveHouseholdInput:
      properties:
        householdID:
          type: string
      type: object
    ChangeLog:
      properties:
        newValue:
          type: string
        oldValue:
          type: string
      type: object
    EmailAddressVerificationRequestInput:
      properties:
        emailVerificationToken:
          type: string
      type: object
    FinalizeMealPlansRequest:
      properties:
        returnCount:
          type: boolean
      type: object
    FinalizeMealPlansResponse:
      properties:
        count:
          type: integer
      type: object
    FinalizedMealPlanDatabaseResult:
      properties:
        MealID:
          type: string
        MealPlanEventID:
          type: string
        MealPlanID:
          type: string
        MealPlanOptionID:
          type: string
        RecipeIDs:
          type: string
      type: object
    Household:
      properties:
        addressLine1:
          type: string
        addressLine2:
          type: string
        archivedAt:
          type: string
        belongsToUser:
          type: string
        billingStatus:
          type: string
        city:
          type: string
        contactPhone:
          type: string
        country:
          type: string
        createdAt:
          type: string
        id:
          type: string
        lastUpdatedAt:
          type: string
        latitude:
          type: number
        longitude:
          type: number
        members:
          $ref: '#/components/schemas/HouseholdUserMembershipWithUser'
        name:
          type: string
        paymentProcessorCustomer:
          type: string
        state:
          type: string
        subscriptionPlanID:
          type: string
        zipCode:
          type: string
      type: object
    HouseholdCreationRequestInput:
      properties:
        addressLine1:
          type: string
        addressLine2:
          type: string
        city:
          type: string
        contactPhone:
          type: string
        country:
          type: string
        latitude:
          type: number
        longitude:
          type: number
        name:
          type: string
        state:
          type: string
        zipCode:
          type: string
      type: object
    HouseholdInstrumentOwnership:
      properties:
        archivedAt:
          type: string
        belongsToHousehold:
          type: string
        createdAt:
          type: string
        id:
          type: string
        instrument:
          $ref: '#/components/schemas/ValidInstrument'
        lastUpdatedAt:
          type: string
        notes:
          type: string
        quantity:
          type: integer
      type: object
    HouseholdInstrumentOwnershipCreationRequestInput:
      properties:
        belongsToHousehold:
          type: string
        notes:
          type: string
        quantity:
          type: integer
        validInstrumentID:
          type: string
      type: object
    HouseholdInstrumentOwnershipUpdateRequestInput:
      properties:
        notes:
          type: string
        quantity:
          type: integer
        validInstrumentID:
          type: string
      type: object
    HouseholdInvitation:
      properties:
        archivedAt:
          type: string
        createdAt:
          type: string
        destinationHousehold:
          $ref: '#/components/schemas/Household'
        expiresAt:
          type: string
        fromUser:
          $ref: '#/components/schemas/User'
        id:
          type: string
        lastUpdatedAt:
          type: string
        note:
          type: string
        status:
          type: string
        statusNote:
          type: string
        toEmail:
          type: string
        toName:
          type: string
        toUser:
          type: string
        token:
          type: string
      type: object
    HouseholdInvitationCreationRequestInput:
      properties:
        expiresAt:
          type: string
        note:
          type: string
        toEmail:
          type: string
        toName:
          type: string
      type: object
    HouseholdInvitationUpdateRequestInput:
      properties:
        note:
          type: string
        token:
          type: string
      type: object
    HouseholdOwnershipTransferInput:
      properties:
        currentOwner:
          type: string
        newOwner:
          type: string
        reason:
          type: string
      type: object
    HouseholdUpdateRequestInput:
      properties:
        addressLine1:
          type: string
        addressLine2:
          type: string
        city:
          type: string
        contactPhone:
          type: string
        country:
          type: string
        latitude:
          type: number
        longitude:
          type: number
        name:
          type: string
        state:
          type: string
        zipCode:
          type: string
      type: object
    HouseholdUserMembership:
      properties:
        archivedAt:
          type: string
        belongsToHousehold:
          type: string
        belongsToUser:
          type: string
        createdAt:
          type: string
        defaultHousehold:
          type: boolean
        householdRole:
          type: string
        id:
          type: string
        lastUpdatedAt:
          type: string
      type: object
    HouseholdUserMembershipCreationRequestInput:
      properties:
        reason:
          type: string
        userID:
          type: string
      type: object
    HouseholdUserMembershipWithUser:
      properties:
        archivedAt:
          type: string
        belongsToHousehold:
          type: string
        belongsToUser:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
        defaultHousehold:
          type: boolean
        householdRole:
          type: string
        id:
          type: string
        lastUpdatedAt:
          type: string
      type: object
    Meal:
      properties:
        archivedAt:
          type: string
        components:
          $ref: '#/components/schemas/MealComponent'
        createdAt:
          type: string
        createdByUser:
          type: string
        description:
          type: string
        eligibleForMealPlans:
          type: boolean
        id:
          type: string
        lastUpdatedAt:
          type: string
        maximumEstimatedPortions:
          type: number
        minimumEstimatedPortions:
          type: number
        name:
          type: string
      type: object
    MealComponent:
      properties:
        componentType:
          type: string
        recipe:
          $ref: '#/components/schemas/Recipe'
        recipeScale:
          type: number
      type: object
    MealComponentCreationRequestInput:
      properties:
        componentType:
          type: string
        recipeID:
          type: string
        recipeScale:
          type: number
      type: object
    MealComponentUpdateRequestInput:
      properties:
        componentType:
          type: string
        recipeID:
          type: string
        recipeScale:
          type: number
      type: object
    MealCreationRequestInput:
      properties:
        description:
          type: string
        eligibleForMealPlans:
          type: boolean
        maximumEstimatedPortions:
          type: number
        minimumEstimatedPortions:
          type: number
        name:
          type: string
        recipes:
          $ref: '#/components/schemas/MealComponentCreationRequestInput'
      type: object
    MealPlan:
      properties:
        archivedAt:
          type: string
        belongsToHousehold:
          type: string
        createdAt:
          type: string
        createdBy:
          type: string
        electionMethod:
          type: string
        events:
          $ref: '#/components/schemas/MealPlanEvent'
        groceryListInitialized:
          type: boolean
        id:
          type: string
        lastUpdatedAt:
          type: string
        notes:
          type: string
        status:
          type: string
        tasksCreated:
          type: boolean
        votingDeadline:
          type: string
      type: object
    MealPlanCreationRequestInput:
      properties:
        electionMethod:
          type: string
        events:
          $ref: '#/components/schemas/MealPlanEventCreationRequestInput'
        notes:
          type: string
        votingDeadline:
          type: string
      type: object
    MealPlanEvent:
      properties:
        archivedAt:
          type: string
        belongsToMealPlan:
          type: string
        createdAt:
          type: string
        endsAt:
          type: string
        id:
          type: string
        lastUpdatedAt:
          type: string
        mealName:
          type: string
        notes:
          type: string
        options:
          $ref: '#/components/schemas/MealPlanOption'
        startsAt:
          type: string
      type: object
    MealPlanEventCreationRequestInput:
      properties:
        endsAt:
          type: string
        mealName:
          type: string
        notes:
          type: string
        options:
          $ref: '#/components/schemas/MealPlanOptionCreationRequestInput'
        startsAt:
          type: string
      type: object
    MealPlanEventUpdateRequestInput:
      properties:
        endsAt:
          type: string
        mealName:
          type: string
        notes:
          type: string
        startsAt:
          type: string
      type: object
    MealPlanGroceryListItem:
      properties:
        archivedAt:
          type: string
        belongsToMealPlan:
          type: string
        createdAt:
          type: string
        id:
          type: string
        ingredient:
          $ref: '#/components/schemas/ValidIngredient'
        lastUpdatedAt:
          type: string
        maximumQuantityNeeded:
          type: number
        measurementUnit:
          $ref: '#/components/schemas/ValidMeasurementUnit'
        minimumQuantityNeeded:
          type: number
        purchasePrice:
          type: number
        purchasedMeasurementUnit:
          $ref: '#/components/schemas/ValidMeasurementUnit'
        purchasedUPC:
          type: string
        quantityPurchased:
          type: number
        status:
          type: string
        statusExplanation:
          type: string
      type: object
    MealPlanGroceryListItemCreationRequestInput:
      properties:
        belongsToMealPlan:
          type: string
        maximumQuantityNeeded:
          type: number
        minimumQuantityNeeded:
          type: number
        purchasePrice:
          type: number
        purchasedMeasurementUnitID:
          type: string
        purchasedUPC:
          type: string
        quantityPurchased:
          type: number
        status:
          type: string
        statusExplanation:
          type: string
        validIngredientID:
          type: string
        validMeasurementUnitID:
          type: string
      type: object
    MealPlanGroceryListItemUpdateRequestInput:
      properties:
        belongsToMealPlan:
          type: string
        maximumQuantityNeeded:
          type: number
        minimumQuantityNeeded:
          type: number
        purchasePrice:
          type: number
        purchasedMeasurementUnitID:
          type: string
        purchasedUPC:
          type: string
        quantityPurchased:
          type: number
        status:
          type: string
        statusExplanation:
          type: string
        validIngredientID:
          type: string
        validMeasurementUnitID:
          type: string
      type: object
    MealPlanOption:
      properties:
        archivedAt:
          type: string
        assignedCook:
          type: string
        assignedDishwasher:
          type: string
        belongsToMealPlanEvent:
          type: string
        chosen:
          type: boolean
        createdAt:
          type: string
        id:
          type: string
        lastUpdatedAt:
          type: string
        meal:
          $ref: '#/components/schemas/Meal'
        mealScale:
          type: number
        notes:
          type: string
        tieBroken:
          type: boolean
        votes:
          $ref: '#/components/schemas/MealPlanOptionVote'
      type: object
    MealPlanOptionCreationRequestInput:
      properties:
        assignedCook:
          type: string
        assignedDishwasher:
          type: string
        mealID:
          type: string
        mealScale:
          type: number
        notes:
          type: string
      type: object
    MealPlanOptionUpdateRequestInput:
      properties:
        assignedCook:
          type: string
        assignedDishwasher:
          type: string
        mealID:
          type: string
        mealScale:
          type: number
        notes:
          type: string
      type: object
    MealPlanOptionVote:
      properties:
        abstain:
          type: boolean
        archivedAt:
          type: string
        belongsToMealPlanOption:
          type: string
        byUser:
          type: string
        createdAt:
          type: string
        id:
          type: string
        lastUpdatedAt:
          type: string
        notes:
          type: string
        rank:
          type: integer
      type: object
    MealPlanOptionVoteCreationInput:
      properties:
        abstain:
          type: boolean
        belongsToMealPlanOption:
          type: string
        notes:
          type: string
        rank:
          type: integer
      type: object
    MealPlanOptionVoteCreationRequestInput:
      properties:
        votes:
          $ref: '#/components/schemas/MealPlanOptionVoteCreationInput'
      type: object
    MealPlanOptionVoteUpdateRequestInput:
      properties:
        abstain:
          type: boolean
        belongsToMealPlanOption:
          type: string
        notes:
          type: string
        rank:
          type: integer
      type: object
    MealPlanTask:
      properties:
        assignedToUser:
          type: string
        completedAt:
          type: string
        createdAt:
          type: string
        creationExplanation:
          type: string
        id:
          type: string
        lastUpdatedAt:
          type: string
        mealPlanOption:
          $ref: '#/components/schemas/MealPlanOption'
        recipePrepTask:
          $ref: '#/components/schemas/RecipePrepTask'
        status:
          type: string
        statusExplanation:
          type: string
      type: object
    MealPlanTaskCreationRequestInput:
      properties:
        assignedToUser:
          type: string
        creationExplanation:
          type: string
        mealPlanOptionID:
          type: string
        recipePrepTaskID:
          type: string
        status:
          type: string
        statusExplanation:
          type: string
      type: object
    MealPlanTaskDatabaseCreationEstimate:
      properties:
        creationExplanation:
          type: string
      type: object
    MealPlanTaskStatusChangeRequestInput:
      properties:
        assignedToUser:
          type: string
        status:
          type: string
        statusExplanation:
          type: string
      type: object
    MealPlanUpdateRequestInput:
      properties:
        notes:
          type: string
        votingDeadline:
          type: string
      type: object
    MealSearchSubset:
      properties:
        description:
          type: string
        id:
          type: string
        name:
          type: string
        recipes:
          $ref: '#/components/schemas/NamedID'
      type: object
    MealUpdateRequestInput:
      properties:
        description:
          type: string
        eligibleForMealPlans:
          type: boolean
        maximumEstimatedPortions:
          type: number
        minimumEstimatedPortions:
          type: number
        name:
          type: string
        recipes:
          $ref: '#/components/schemas/MealComponentUpdateRequestInput'
      type: object
    MissingVote:
      properties:
        eventID:
          type: string
        optionID:
          type: string
        userID:
          type: string
      type: object
    ModifyUserPermissionsInput:
      properties:
        newRoles:
          type: string
        reason:
          type: string
      type: object
    NamedID:
      properties:
        id:
          type: string
        name:
          type: string
      type: object
    OAuth2Client:
      properties:
        archivedAt:
          type: string
        clientID:
          type: string
        clientSecret:
          type: string
        createdAt:
          type: string
        description:
          type: string
        id:
          type: string
        name:
          type: string
      type: object
    OAuth2ClientCreationRequestInput:
      properties:
        description:
          type: string
        name:
          type: string
      type: object
    OAuth2ClientCreationResponse:
      properties:
        clientID:
          type: string
        clientSecret:
          type: string
        description:
          type: string
        id:
          type: string
        name:
          type: string
      type: object
    OAuth2ClientToken:
      properties:
        access:
          type: string
        accessCreatedAt:
          type: string
        accessExpiresIn:
          $ref: '#/components/schemas/time.Duration'
        belongsToUser:
          type: string
        clientID:
          type: string
        code:
          type: string
        codeChallenge:
          type: string
        codeChallengeMethod:
          type: string
        codeCreatedAt:
          type: string
        codeExpiresIn:
          $ref: '#/components/schemas/time.Duration'
        id:
          type: string
        redirectURI:
          type: string
        refresh:
          type: string
        refreshCreatedAt:
          type: string
        refreshExpiresIn:
          $ref: '#/components/schemas/time.Duration'
        scope:
          type: string
      type: object
    Pagination:
      properties:
        filteredCount:
          type: integer
        limit:
          type: integer
        page:
          type: integer
        totalCount:
          type: integer
      type: object
    PasswordResetToken:
      properties:
        archivedAt:
          type: string
        belongsToUser:
          type: string
        createdAt:
          type: string
        expiresAt:
          type: string
        id:
          type: string
        lastUpdatedAt:
          type: string
        token:
          type: string
      type: object
    PasswordResetTokenCreationRequestInput:
      properties:
        emailAddress:
          type: string
      type: object
    PasswordResetTokenRedemptionRequestInput:
      properties:
        newPassword:
          type: string
        token:
          type: string
      type: object
    PasswordUpdateInput:
      properties:
        currentPassword:
          type: string
        newPassword:
          type: string
        totpToken:
          type: string
      type: object
    QueryFilter:
      properties:
        createdAfter:
          type: string
        createdBefore:
          type: string
        includeArchived:
          type: boolean
        limit:
          type: integer
        page:
          type: integer
        sortBy:
          type: string
        updatedAfter:
          type: string
        updatedBefore:
          type: string
      type: object
    Recipe:
      properties:
        archivedAt:
          type: string
        createdAt:
          type: string
        createdByUser:
          type: string
        description:
          type: string
        eligibleForMeals:
          type: boolean
        id:
          type: string
        inspiredByRecipeID:
          type: string
        lastUpdatedAt:
          type: string
        maximumEstimatedPortions:
          type: number
        media:
          $ref: '#/components/schemas/RecipeMedia'
        minimumEstimatedPortions:
          type: number
        name:
          type: string
        pluralPortionName:
          type: string
        portionName:
          type: string
        prepTasks:
          $ref: '#/components/schemas/RecipePrepTask'
        sealOfApproval:
          type: boolean
        slug:
          type: string
        source:
          type: string
        steps:
          $ref: '#/components/schemas/RecipeStep'
        supportingRecipes:
          $ref: '#/components/schemas/Recipe'
        yieldsComponentType:
          type: string
      type: object
    RecipeCreationRequestInput:
      properties:
        alsoCreateMeal:
          type: boolean
        description:
          type: string
        eligibleForMeals:
          type: boolean
        inspiredByRecipeID:
          type: string
        maximumEstimatedPortions:
          type: number
        minimumEstimatedPortions:
          type: number
        name:
          type: string
        pluralPortionName:
          type: string
        portionName:
          type: string
        prepTasks:
          $ref: '#/components/schemas/RecipePrepTaskWithinRecipeCreationRequestInput'
        sealOfApproval:
          type: boolean
        slug:
          type: string
        source:
          type: string
        steps:
          $ref: '#/components/schemas/RecipeStepCreationRequestInput'
        yieldsComponentType:
          type: string
      type: object
    RecipeMedia:
      properties:
        archivedAt:
          type: string
        belongsToRecipe:
          type: string
        belongsToRecipeStep:
          type: string
        createdAt:
          type: string
        externalPath:
          type: string
        id:
          type: string
        index:
          type: integer
        internalPath:
          type: string
        lastUpdatedAt:
          type: string
        mimeType:
          type: string
      type: object
    RecipeMediaCreationRequestInput:
      properties:
        belongsToRecipe:
          type: string
        belongsToRecipeStep:
          type: string
        externalPath:
          type: string
        index:
          type: integer
        internalPath:
          type: string
        mimeType:
          type: string
      type: object
    RecipeMediaUpdateRequestInput:
      properties:
        belongsToRecipe:
          type: string
        belongsToRecipeStep:
          type: string
        externalPath:
          type: string
        index:
          type: integer
        internalPath:
          type: string
        mimeType:
          type: string
      type: object
    RecipePrepTask:
      properties:
        archivedAt:
          type: string
        belongsToRecipe:
          type: string
        createdAt:
          type: string
        description:
          type: string
        explicitStorageInstructions:
          type: string
        id:
          type: string
        lastUpdatedAt:
          type: string
        maximumStorageTemperatureInCelsius:
          type: number
        maximumTimeBufferBeforeRecipeInSeconds:
          type: integer
        minimumStorageTemperatureInCelsius:
          type: number
        minimumTimeBufferBeforeRecipeInSeconds:
          type: integer
        name:
          type: string
        notes:
          type: string
        optional:
          type: boolean
        recipeSteps:
          $ref: '#/components/schemas/RecipePrepTaskStep'
        storageType:
          type: string
      type: object
    RecipePrepTaskCreationRequestInput:
      properties:
        belongsToRecipe:
          type: string
        description:
          type: string
        explicitStorageInstructions:
          type: string
        maximumStorageTemperatureInCelsius:
          type: number
        maximumTimeBufferBeforeRecipeInSeconds:
          type: integer
        minimumStorageTemperatureInCelsius:
          type: number
        minimumTimeBufferBeforeRecipeInSeconds:
          type: integer
        name:
          type: string
        notes:
          type: string
        optional:
          type: boolean
        recipeSteps:
          $ref: '#/components/schemas/RecipePrepTaskStepCreationRequestInput'
        storageType:
          type: string
      type: object
    RecipePrepTaskStep:
      properties:
        belongsToRecipeStep:
          type: string
        belongsToRecipeStepTask:
          type: string
        id:
          type: string
        satisfiesRecipeStep:
          type: boolean
      type: object
    RecipePrepTaskStepCreationRequestInput:
      properties:
        belongsToRecipeStep:
          type: string
        satisfiesRecipeStep:
          type: boolean
      type: object
    RecipePrepTaskStepUpdateRequestInput:
      properties:
        belongsToRecipeStep:
          type: string
        belongsToRecipeStepTask:
          type: string
        satisfiesRecipeStep:
          type: boolean
      type: object
    RecipePrepTaskStepWithinRecipeCreationRequestInput:
      properties:
        belongsToRecipeStepIndex:
          type: integer
        satisfiesRecipeStep:
          type: boolean
      type: object
    RecipePrepTaskUpdateRequestInput:
      properties:
        belongsToRecipe:
          type: string
        description:
          type: string
        explicitStorageInstructions:
          type: string
        maximumStorageTemperatureInCelsius:
          type: number
        maximumTimeBufferBeforeRecipeInSeconds:
          type: integer
        minimumStorageTemperatureInCelsius:
          type: number
        minimumTimeBufferBeforeRecipeInSeconds:
          type: integer
        name:
          type: string
        notes:
          type: string
        optional:
          type: boolean
        recipeSteps:
          $ref: '#/components/schemas/RecipePrepTaskStepUpdateRequestInput'
        storageType:
          type: string
      type: object
    RecipePrepTaskWithinRecipeCreationRequestInput:
      properties:
        belongsToRecipe:
          type: string
        description:
          type: string
        explicitStorageInstructions:
          type: string
        maximumStorageTemperatureInCelsius:
          type: number
        maximumTimeBufferBeforeRecipeInSeconds:
          type: integer
        minimumStorageTemperatureInCelsius:
          type: number
        minimumTimeBufferBeforeRecipeInSeconds:
          type: integer
        name:
          type: string
        notes:
          type: string
        optional:
          type: boolean
        recipeSteps:
          $ref: '#/components/schemas/RecipePrepTaskStepWithinRecipeCreationRequestInput'
        storageType:
          type: string
      type: object
    RecipeRating:
      properties:
        archivedAt:
          type: string
        byUser:
          type: string
        cleanup:
          type: number
        createdAt:
          type: string
        difficulty:
          type: number
        id:
          type: string
        instructions:
          type: number
        lastUpdatedAt:
          type: string
        notes:
          type: string
        overall:
          type: number
        recipeID:
          type: string
        taste:
          type: number
      type: object
    RecipeRatingCreationRequestInput:
      properties:
        byUser:
          type: string
        cleanup:
          type: number
        difficulty:
          type: number
        instructions:
          type: number
        notes:
          type: string
        overall:
          type: number
        recipeID:
          type: string
        taste:
          type: number
      type: object
    RecipeRatingUpdateRequestInput:
      properties:
        byUser:
          type: string
        cleanup:
          type: number
        difficulty:
          type: number
        instructions:
          type: number
        notes:
          type: string
        overall:
          type: number
        recipeID:
          type: string
        taste:
          type: number
      type: object
    RecipeSearchSubset:
      properties:
        description:
          type: string
        id:
          type: string
        name:
          type: string
        steps:
          $ref: '#/components/schemas/RecipeStepSearchSubset'
      type: object
    RecipeStep:
      properties:
        archivedAt:
          type: string
        belongsToRecipe:
          type: string
        completionConditions:
          $ref: '#/components/schemas/RecipeStepCompletionCondition'
        conditionExpression:
          type: string
        createdAt:
          type: string
        explicitInstructions:
          type: string
        id:
          type: string
        index:
          type: integer
        ingredients:
          $ref: '#/components/schemas/RecipeStepIngredient'
        instruments:
          $ref: '#/components/schemas/RecipeStepInstrument'
        lastUpdatedAt:
          type: string
        maximumEstimatedTimeInSeconds:
          type: integer
        maximumTemperatureInCelsius:
          type: number
        media:
          $ref: '#/components/schemas/RecipeMedia'
        minimumEstimatedTimeInSeconds:
          type: integer
        minimumTemperatureInCelsius:
          type: number
        notes:
          type: string
        optional:
          type: boolean
        preparation:
          $ref: '#/components/schemas/ValidPreparation'
        products:
          $ref: '#/components/schemas/RecipeStepProduct'
        startTimerAutomatically:
          type: boolean
        vessels:
          $ref: '#/components/schemas/RecipeStepVessel'
      type: object
    RecipeStepCompletionCondition:
      properties:
        archivedAt:
          type: string
        belongsToRecipeStep:
          type: string
        createdAt:
          type: string
        id:
          type: string
        ingredientState:
          $ref: '#/components/schemas/ValidIngredientState'
        ingredients:
          $ref: '#/components/schemas/RecipeStepCompletionConditionIngredient'
        lastUpdatedAt:
          type: string
        notes:
          type: string
        optional:
          type: boolean
      type: object
    RecipeStepCompletionConditionCreationRequestInput:
      properties:
        belongsToRecipeStep:
          type: string
        ingredientState:
          type: string
        ingredients:
          type: integer
        notes:
          type: string
        optional:
          type: boolean
      type: object
    RecipeStepCompletionConditionForExistingRecipeCreationRequestInput:
      properties:
        belongsToRecipeStep:
          type: string
        ingredientState:
          type: string
        ingredients:
          $ref: '#/components/schemas/RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput'
        notes:
          type: string
        optional:
          type: boolean
      type: object
    RecipeStepCompletionConditionIngredient:
      properties:
        archivedAt:
          type: string
        belongsToRecipeStepCompletionCondition:
          type: string
        createdAt:
          type: string
        id:
          type: string
        lastUpdatedAt:
          type: string
        recipeStepIngredient:
          type: string
      type: object
    RecipeStepCompletionConditionIngredientCreationRequestInput:
      properties:
        recipeStepIngredient:
          type: string
      type: object
    RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput:
      properties:
        recipeStepIngredient:
          type: string
      type: object
    RecipeStepCompletionConditionUpdateRequestInput:
      properties:
        belongsToRecipeStep:
          type: string
        ingredientState:
          type: string
        notes:
          type: string
        optional:
          type: boolean
      type: object
    RecipeStepCreationRequestInput:
      properties:
        completionConditions:
          $ref: '#/components/schemas/RecipeStepCompletionConditionCreationRequestInput'
        conditionExpression:
          type: string
        explicitInstructions:
          type: string
        index:
          type: integer
        ingredients:
          $ref: '#/components/schemas/RecipeStepIngredientCreationRequestInput'
        instruments:
          $ref: '#/components/schemas/RecipeStepInstrumentCreationRequestInput'
        maximumEstimatedTimeInSeconds:
          type: integer
        maximumTemperatureInCelsius:
          type: number
        minimumEstimatedTimeInSeconds:
          type: integer
        minimumTemperatureInCelsius:
          type: number
        notes:
          type: string
        optional:
          type: boolean
        preparationID:
          type: string
        products:
          $ref: '#/components/schemas/RecipeStepProductCreationRequestInput'
        startTimerAutomatically:
          type: boolean
        vessels:
          $ref: '#/components/schemas/RecipeStepVesselCreationRequestInput'
      type: object
    RecipeStepIngredient:
      properties:
        archivedAt:
          type: string
        belongsToRecipeStep:
          type: string
        createdAt:
          type: string
        id:
          type: string
        ingredient:
          $ref: '#/components/schemas/ValidIngredient'
        ingredientNotes:
          type: string
        lastUpdatedAt:
          type: string
        maximumQuantity:
          type: number
        measurementUnit:
          $ref: '#/components/schemas/ValidMeasurementUnit'
        minimumQuantity:
          type: number
        name:
          type: string
        optionIndex:
          type: integer
        optional:
          type: boolean
        productOfRecipeID:
          type: string
        productPercentageToUse:
          type: number
        quantityNotes:
          type: string
        recipeStepProductID:
          type: string
        toTaste:
          type: boolean
        vesselIndex:
          type: integer
      type: object
    RecipeStepIngredientCreationRequestInput:
      properties:
        ingredientID:
          type: string
        ingredientNotes:
          type: string
        maximumQuantity:
          type: number
        measurementUnitID:
          type: string
        minimumQuantity:
          type: number
        name:
          type: string
        optionIndex:
          type: integer
        optional:
          type: boolean
        productOfRecipeID:
          type: string
        productOfRecipeStepIndex:
          type: integer
        productOfRecipeStepProductIndex:
          type: integer
        productPercentageToUse:
          type: number
        quantityNotes:
          type: string
        toTaste:
          type: boolean
        vesselIndex:
          type: integer
      type: object
    RecipeStepIngredientUpdateRequestInput:
      properties:
        belongsToRecipeStep:
          type: string
        ingredientID:
          type: string
        ingredientNotes:
          type: string
        maximumQuantity:
          type: number
        measurementUnitID:
          type: string
        minimumQuantity:
          type: number
        name:
          type: string
        optionIndex:
          type: integer
        optional:
          type: boolean
        productOfRecipeID:
          type: string
        productPercentageToUse:
          type: number
        quantityNotes:
          type: string
        recipeStepProductID:
          type: string
        toTaste:
          type: boolean
        vesselIndex:
          type: integer
      type: object
    RecipeStepInstrument:
      properties:
        archivedAt:
          type: string
        belongsToRecipeStep:
          type: string
        createdAt:
          type: string
        id:
          type: string
        instrument:
          $ref: '#/components/schemas/ValidInstrument'
        lastUpdatedAt:
          type: string
        maximumQuantity:
          type: integer
        minimumQuantity:
          type: integer
        name:
          type: string
        notes:
          type: string
        optionIndex:
          type: integer
        optional:
          type: boolean
        preferenceRank:
          type: integer
        recipeStepProductID:
          type: string
      type: object
    RecipeStepInstrumentCreationRequestInput:
      properties:
        instrumentID:
          type: string
        maximumQuantity:
          type: integer
        minimumQuantity:
          type: integer
        name:
          type: string
        notes:
          type: string
        optionIndex:
          type: integer
        optional:
          type: boolean
        preferenceRank:
          type: integer
        productOfRecipeStepIndex:
          type: integer
        productOfRecipeStepProductIndex:
          type: integer
        recipeStepProductID:
          type: string
      type: object
    RecipeStepInstrumentUpdateRequestInput:
      properties:
        belongsToRecipeStep:
          type: string
        instrumentID:
          type: string
        maximumQuantity:
          type: integer
        minimumQuantity:
          type: integer
        name:
          type: string
        notes:
          type: string
        optionIndex:
          type: integer
        optional:
          type: boolean
        preferenceRank:
          type: integer
        recipeStepProductID:
          type: string
      type: object
    RecipeStepProduct:
      properties:
        archivedAt:
          type: string
        belongsToRecipeStep:
          type: string
        compostable:
          type: boolean
        containedInVesselIndex:
          type: integer
        createdAt:
          type: string
        id:
          type: string
        index:
          type: integer
        isLiquid:
          type: boolean
        isWaste:
          type: boolean
        lastUpdatedAt:
          type: string
        maximumQuantity:
          type: number
        maximumStorageDurationInSeconds:
          type: integer
        maximumStorageTemperatureInCelsius:
          type: number
        measurementUnit:
          $ref: '#/components/schemas/ValidMeasurementUnit'
        minimumQuantity:
          type: number
        minimumStorageTemperatureInCelsius:
          type: number
        name:
          type: string
        quantityNotes:
          type: string
        storageInstructions:
          type: string
        type:
          type: string
      type: object
    RecipeStepProductCreationRequestInput:
      properties:
        compostable:
          type: boolean
        containedInVesselIndex:
          type: integer
        index:
          type: integer
        isLiquid:
          type: boolean
        isWaste:
          type: boolean
        maximumQuantity:
          type: number
        maximumStorageDurationInSeconds:
          type: integer
        maximumStorageTemperatureInCelsius:
          type: number
        measurementUnitID:
          type: string
        minimumQuantity:
          type: number
        minimumStorageTemperatureInCelsius:
          type: number
        name:
          type: string
        quantityNotes:
          type: string
        storageInstructions:
          type: string
        type:
          type: string
      type: object
    RecipeStepProductUpdateRequestInput:
      properties:
        belongsToRecipeStep:
          type: string
        compostable:
          type: boolean
        containedInVesselIndex:
          type: integer
        index:
          type: integer
        isLiquid:
          type: boolean
        isWaste:
          type: boolean
        maximumQuantity:
          type: number
        maximumStorageDurationInSeconds:
          type: integer
        maximumStorageTemperatureInCelsius:
          type: number
        measurementUnitID:
          type: string
        minimumQuantity:
          type: number
        minimumStorageTemperatureInCelsius:
          type: number
        name:
          type: string
        quantityNotes:
          type: string
        storageInstructions:
          type: string
        type:
          type: string
      type: object
    RecipeStepSearchSubset:
      properties:
        ingredients:
          $ref: '#/components/schemas/NamedID'
        instruments:
          $ref: '#/components/schemas/NamedID'
        preparation:
          type: string
        vessels:
          $ref: '#/components/schemas/NamedID'
      type: object
    RecipeStepUpdateRequestInput:
      properties:
        belongsToRecipe:
          type: string
        conditionExpression:
          type: string
        explicitInstructions:
          type: string
        index:
          type: integer
        maximumEstimatedTimeInSeconds:
          type: integer
        maximumTemperatureInCelsius:
          type: number
        minimumEstimatedTimeInSeconds:
          type: integer
        minimumTemperatureInCelsius:
          type: number
        notes:
          type: string
        optional:
          type: boolean
        preparation:
          $ref: '#/components/schemas/ValidPreparation'
        startTimerAutomatically:
          type: boolean
      type: object
    RecipeStepVessel:
      properties:
        archivedAt:
          type: string
        belongsToRecipeStep:
          type: string
        createdAt:
          type: string
        id:
          type: string
        lastUpdatedAt:
          type: string
        maximumQuantity:
          type: integer
        minimumQuantity:
          type: integer
        name:
          type: string
        notes:
          type: string
        recipeStepProductID:
          type: string
        unavailableAfterStep:
          type: boolean
        vessel:
          $ref: '#/components/schemas/ValidVessel'
        vesselPreposition:
          type: string
      type: object
    RecipeStepVesselCreationRequestInput:
      properties:
        maximumQuantity:
          type: integer
        minimumQuantity:
          type: integer
        name:
          type: string
        notes:
          type: string
        productOfRecipeStepIndex:
          type: integer
        productOfRecipeStepProductIndex:
          type: integer
        recipeStepProductID:
          type: string
        unavailableAfterStep:
          type: boolean
        vesselID:
          type: string
        vesselPreposition:
          type: string
      type: object
    RecipeStepVesselUpdateRequestInput:
      properties:
        belongsToRecipeStep:
          type: string
        maximumQuantity:
          type: integer
        minimumQuantity:
          type: integer
        name:
          type: string
        notes:
          type: string
        recipeStepProductID:
          type: string
        unavailableAfterStep:
          type: boolean
        vesselID:
          type: string
        vesselPreposition:
          type: string
      type: object
    RecipeUpdateRequestInput:
      properties:
        description:
          type: string
        eligibleForMeals:
          type: boolean
        inspiredByRecipeID:
          type: string
        maximumEstimatedPortions:
          type: number
        minimumEstimatedPortions:
          type: number
        name:
          type: string
        pluralPortionName:
          type: string
        portionName:
          type: string
        sealOfApproval:
          type: boolean
        slug:
          type: string
        source:
          type: string
        yieldsComponentType:
          type: string
      type: object
    ResponseDetails:
      properties:
        currentHouseholdID:
          type: string
        traceID:
          type: string
      type: object
    ServiceSetting:
      properties:
        adminsOnly:
          type: boolean
        archivedAt:
          type: string
        createdAt:
          type: string
        defaultValue:
          type: string
        description:
          type: string
        enumeration:
          type: string
        id:
          type: string
        lastUpdatedAt:
          type: string
        name:
          type: string
        type:
          type: string
      type: object
    ServiceSettingConfiguration:
      properties:
        archivedAt:
          type: string
        belongsToHousehold:
          type: string
        belongsToUser:
          type: string
        createdAt:
          type: string
        id:
          type: string
        lastUpdatedAt:
          type: string
        notes:
          type: string
        serviceSetting:
          $ref: '#/components/schemas/ServiceSetting'
        value:
          type: string
      type: object
    ServiceSettingConfigurationCreationRequestInput:
      properties:
        belongsToHousehold:
          type: string
        belongsToUser:
          type: string
        notes:
          type: string
        serviceSettingID:
          type: string
        value:
          type: string
      type: object
    ServiceSettingConfigurationUpdateRequestInput:
      properties:
        belongsToHousehold:
          type: string
        belongsToUser:
          type: string
        notes:
          type: string
        serviceSettingID:
          type: string
        value:
          type: string
      type: object
    ServiceSettingCreationRequestInput:
      properties:
        adminsOnly:
          type: boolean
        defaultValue:
          type: string
        description:
          type: string
        enumeration:
          type: string
        name:
          type: string
        type:
          type: string
      type: object
    ServiceSettingUpdateRequestInput:
      properties:
        adminsOnly:
          type: boolean
        defaultValue:
          type: string
        description:
          type: string
        enumeration:
          type: string
        name:
          type: string
        type:
          type: string
      type: object
    TOTPSecretRefreshInput:
      properties:
        currentPassword:
          type: string
        totpToken:
          type: string
      type: object
    TOTPSecretRefreshResponse:
      properties:
        qrCode:
          type: string
        twoFactorSecret:
          type: string
      type: object
    TOTPSecretVerificationInput:
      properties:
        totpToken:
          type: string
        userID:
          type: string
      type: object
    User:
      properties:
        accountStatus:
          type: string
        accountStatusExplanation:
          type: string
        archivedAt:
          type: string
        avatar:
          type: string
        birthday:
          type: string
        createdAt:
          type: string
        emailAddress:
          type: string
        emailAddressVerifiedAt:
          type: string
        firstName:
          type: string
        id:
          type: string
        lastAcceptedPrivacyPolicy:
          type: string
        lastAcceptedTOS:
          type: string
        lastName:
          type: string
        lastUpdatedAt:
          type: string
        passwordLastChangedAt:
          type: string
        requiresPasswordChange:
          type: boolean
        serviceRoles:
          type: string
        twoFactorSecretVerifiedAt:
          type: string
        username:
          type: string
      type: object
    UserAccountStatusUpdateInput:
      properties:
        newStatus:
          type: string
        reason:
          type: string
        targetUserID:
          type: string
      type: object
    UserCreationResponse:
      properties:
        accountStatus:
          type: string
        avatar:
          type: string
        birthday:
          type: string
        createdAt:
          type: string
        createdUserID:
          type: string
        emailAddress:
          type: string
        firstName:
          type: string
        isAdmin:
          type: boolean
        lastName:
          type: string
        qrCode:
          type: string
        twoFactorSecret:
          type: string
        username:
          type: string
      type: object
    UserDetailsDatabaseUpdateInput:
      properties: {}
      type: object
    UserDetailsUpdateRequestInput:
      properties:
        birthday:
          type: string
        currentPassword:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        totpToken:
          type: string
      type: object
    UserEmailAddressUpdateInput:
      properties:
        currentPassword:
          type: string
        newEmailAddress:
          type: string
        totpToken:
          type: string
      type: object
    UserIngredientPreference:
      properties:
        allergy:
          type: boolean
        archivedAt:
          type: string
        belongsToUser:
          type: string
        createdAt:
          type: string
        id:
          type: string
        ingredient:
          $ref: '#/components/schemas/ValidIngredient'
        lastUpdatedAt:
          type: string
        notes:
          type: string
        rating:
          type: integer
      type: object
    UserIngredientPreferenceCreationRequestInput:
      properties:
        allergy:
          type: boolean
        notes:
          type: string
        rating:
          type: integer
        validIngredientGroupID:
          type: string
        validIngredientID:
          type: string
      type: object
    UserIngredientPreferenceUpdateRequestInput:
      properties:
        allergy:
          type: boolean
        ingredientID:
          type: string
        notes:
          type: string
        rating:
          type: integer
      type: object
    UserLoginInput:
      properties:
        password:
          type: string
        totpToken:
          type: string
        username:
          type: string
      type: object
    UserNotification:
      properties:
        belongsToUser:
          type: string
        content:
          type: string
        createdAt:
          type: string
        id:
          type: string
        lastUpdatedAt:
          type: string
        status:
          type: string
      type: object
    UserNotificationCreationRequestInput:
      properties:
        belongsToUser:
          type: string
        content:
          type: string
        status:
          type: string
      type: object
    UserNotificationUpdateRequestInput:
      properties:
        status:
          type: string
      type: object
    UserPermissionsRequestInput:
      properties:
        permissions:
          type: string
      type: object
    UserPermissionsResponse:
      properties:
        permissions:
          $ref: '#/components/schemas/object'
      type: object
    UserRegistrationInput:
      properties:
        acceptedPrivacyPolicy:
          type: boolean
        acceptedTOS:
          type: boolean
        birthday:
          type: string
        emailAddress:
          type: string
        firstName:
          type: string
        householdName:
          type: string
        invitationID:
          type: string
        invitationToken:
          type: string
        lastName:
          type: string
        password:
          type: string
        username:
          type: string
      type: object
    UserSearchSubset:
      properties:
        emailAddress:
          type: string
        firstName:
          type: string
        id:
          type: string
        lastName:
          type: string
        username:
          type: string
      type: object
    UserStatusResponse:
      properties:
        accountStatus:
          type: string
        accountStatusExplanation:
          type: string
        activeHousehold:
          type: string
        isAuthenticated:
          type: boolean
        userID:
          type: string
      type: object
    UsernameReminderRequestInput:
      properties:
        emailAddress:
          type: string
      type: object
    UsernameUpdateInput:
      properties:
        currentPassword:
          type: string
        newUsername:
          type: string
        totpToken:
          type: string
      type: object
    ValidIngredient:
      properties:
        animalDerived:
          type: boolean
        animalFlesh:
          type: boolean
        archivedAt:
          type: string
        containsAlcohol:
          type: boolean
        containsDairy:
          type: boolean
        containsEgg:
          type: boolean
        containsFish:
          type: boolean
        containsGluten:
          type: boolean
        containsPeanut:
          type: boolean
        containsSesame:
          type: boolean
        containsShellfish:
          type: boolean
        containsSoy:
          type: boolean
        containsTreeNut:
          type: boolean
        containsWheat:
          type: boolean
        createdAt:
          type: string
        description:
          type: string
        iconPath:
          type: string
        id:
          type: string
        isAcid:
          type: boolean
        isFat:
          type: boolean
        isFruit:
          type: boolean
        isGrain:
          type: boolean
        isHeat:
          type: boolean
        isLiquid:
          type: boolean
        isMeasuredVolumetrically:
          type: boolean
        isProtein:
          type: boolean
        isSalt:
          type: boolean
        isStarch:
          type: boolean
        lastUpdatedAt:
          type: string
        maximumIdealStorageTemperatureInCelsius:
          type: number
        minimumIdealStorageTemperatureInCelsius:
          type: number
        name:
          type: string
        pluralName:
          type: string
        restrictToPreparations:
          type: boolean
        shoppingSuggestions:
          type: string
        slug:
          type: string
        storageInstructions:
          type: string
        warning:
          type: string
      type: object
    ValidIngredientCreationRequestInput:
      properties:
        animalDerived:
          type: boolean
        animalFlesh:
          type: boolean
        containsAlcohol:
          type: boolean
        containsDairy:
          type: boolean
        containsEgg:
          type: boolean
        containsFish:
          type: boolean
        containsGluten:
          type: boolean
        containsPeanut:
          type: boolean
        containsSesame:
          type: boolean
        containsShellfish:
          type: boolean
        containsSoy:
          type: boolean
        containsTreeNut:
          type: boolean
        containsWheat:
          type: boolean
        description:
          type: string
        iconPath:
          type: string
        isAcid:
          type: boolean
        isFat:
          type: boolean
        isFruit:
          type: boolean
        isGrain:
          type: boolean
        isHeat:
          type: boolean
        isLiquid:
          type: boolean
        isMeasuredVolumetrically:
          type: boolean
        isProtein:
          type: boolean
        isSalt:
          type: boolean
        isStarch:
          type: boolean
        maximumIdealStorageTemperatureInCelsius:
          type: number
        minimumIdealStorageTemperatureInCelsius:
          type: number
        name:
          type: string
        pluralName:
          type: string
        restrictToPreparations:
          type: boolean
        shoppingSuggestions:
          type: string
        slug:
          type: string
        storageInstructions:
          type: string
        warning:
          type: string
      type: object
    ValidIngredientGroup:
      properties:
        archivedAt:
          type: string
        createdAt:
          type: string
        description:
          type: string
        id:
          type: string
        lastUpdatedAt:
          type: string
        members:
          $ref: '#/components/schemas/ValidIngredientGroupMember'
        name:
          type: string
        slug:
          type: string
      type: object
    ValidIngredientGroupCreationRequestInput:
      properties:
        description:
          type: string
        members:
          $ref: '#/components/schemas/ValidIngredientGroupMemberCreationRequestInput'
        name:
          type: string
        slug:
          type: string
      type: object
    ValidIngredientGroupMember:
      properties:
        archivedAt:
          type: string
        belongsToGroup:
          type: string
        createdAt:
          type: string
        id:
          type: string
        validIngredient:
          $ref: '#/components/schemas/ValidIngredient'
      type: object
    ValidIngredientGroupMemberCreationRequestInput:
      properties:
        validIngredientID:
          type: string
      type: object
    ValidIngredientGroupUpdateRequestInput:
      properties:
        description:
          type: string
        name:
          type: string
        slug:
          type: string
      type: object
    ValidIngredientMeasurementUnit:
      properties:
        archivedAt:
          type: string
        createdAt:
          type: string
        id:
          type: string
        ingredient:
          $ref: '#/components/schemas/ValidIngredient'
        lastUpdatedAt:
          type: string
        maximumAllowableQuantity:
          type: number
        measurementUnit:
          $ref: '#/components/schemas/ValidMeasurementUnit'
        minimumAllowableQuantity:
          type: number
        notes:
          type: string
      type: object
    ValidIngredientMeasurementUnitCreationRequestInput:
      properties:
        maximumAllowableQuantity:
          type: number
        minimumAllowableQuantity:
          type: number
        notes:
          type: string
        validIngredientID:
          type: string
        validMeasurementUnitID:
          type: string
      type: object
    ValidIngredientMeasurementUnitUpdateRequestInput:
      properties:
        maximumAllowableQuantity:
          type: number
        minimumAllowableQuantity:
          type: number
        notes:
          type: string
        validIngredientID:
          type: string
        validMeasurementUnitID:
          type: string
      type: object
    ValidIngredientPreparation:
      properties:
        archivedAt:
          type: string
        createdAt:
          type: string
        id:
          type: string
        ingredient:
          $ref: '#/components/schemas/ValidIngredient'
        lastUpdatedAt:
          type: string
        notes:
          type: string
        preparation:
          $ref: '#/components/schemas/ValidPreparation'
      type: object
    ValidIngredientPreparationCreationRequestInput:
      properties:
        notes:
          type: string
        validIngredientID:
          type: string
        validPreparationID:
          type: string
      type: object
    ValidIngredientPreparationUpdateRequestInput:
      properties:
        notes:
          type: string
        validIngredientID:
          type: string
        validPreparationID:
          type: string
      type: object
    ValidIngredientSearchSubset:
      properties:
        description:
          type: string
        id:
          type: string
        name:
          type: string
        pluralName:
          type: string
        shoppingSuggestions:
          type: string
      type: object
    ValidIngredientState:
      properties:
        archivedAt:
          type: string
        attributeType:
          type: string
        createdAt:
          type: string
        description:
          type: string
        iconPath:
          type: string
        id:
          type: string
        lastUpdatedAt:
          type: string
        name:
          type: string
        pastTense:
          type: string
        slug:
          type: string
      type: object
    ValidIngredientStateCreationRequestInput:
      properties:
        attributeType:
          type: string
        description:
          type: string
        iconPath:
          type: string
        name:
          type: string
        pastTense:
          type: string
        slug:
          type: string
      type: object
    ValidIngredientStateIngredient:
      properties:
        archivedAt:
          type: string
        createdAt:
          type: string
        id:
          type: string
        ingredient:
          $ref: '#/components/schemas/ValidIngredient'
        ingredientState:
          $ref: '#/components/schemas/ValidIngredientState'
        lastUpdatedAt:
          type: string
        notes:
          type: string
      type: object
    ValidIngredientStateIngredientCreationRequestInput:
      properties:
        notes:
          type: string
        validIngredientID:
          type: string
        validIngredientStateID:
          type: string
      type: object
    ValidIngredientStateIngredientUpdateRequestInput:
      properties:
        notes:
          type: string
        validIngredientID:
          type: string
        validIngredientStateID:
          type: string
      type: object
    ValidIngredientStateSearchSubset:
      properties:
        attributeType:
          type: string
        description:
          type: string
        id:
          type: string
        name:
          type: string
        pastTense:
          type: string
      type: object
    ValidIngredientStateUpdateRequestInput:
      properties:
        attributeType:
          type: string
        description:
          type: string
        iconPath:
          type: string
        name:
          type: string
        pastTense:
          type: string
        slug:
          type: string
      type: object
    ValidIngredientUpdateRequestInput:
      properties:
        animalDerived:
          type: boolean
        animalFlesh:
          type: boolean
        containsAlcohol:
          type: boolean
        containsDairy:
          type: boolean
        containsEgg:
          type: boolean
        containsFish:
          type: boolean
        containsGluten:
          type: boolean
        containsPeanut:
          type: boolean
        containsSesame:
          type: boolean
        containsShellfish:
          type: boolean
        containsSoy:
          type: boolean
        containsTreeNut:
          type: boolean
        containsWheat:
          type: boolean
        description:
          type: string
        iconPath:
          type: string
        isAcid:
          type: boolean
        isFat:
          type: boolean
        isFruit:
          type: boolean
        isGrain:
          type: boolean
        isHeat:
          type: boolean
        isLiquid:
          type: boolean
        isMeasuredVolumetrically:
          type: boolean
        isProtein:
          type: boolean
        isSalt:
          type: boolean
        isStarch:
          type: boolean
        maximumIdealStorageTemperatureInCelsius:
          type: number
        minimumIdealStorageTemperatureInCelsius:
          type: number
        name:
          type: string
        pluralName:
          type: string
        restrictToPreparations:
          type: boolean
        shoppingSuggestions:
          type: string
        slug:
          type: string
        storageInstructions:
          type: string
        warning:
          type: string
      type: object
    ValidInstrument:
      properties:
        archivedAt:
          type: string
        createdAt:
          type: string
        description:
          type: string
        displayInSummaryLists:
          type: boolean
        iconPath:
          type: string
        id:
          type: string
        includeInGeneratedInstructions:
          type: boolean
        lastUpdatedAt:
          type: string
        name:
          type: string
        pluralName:
          type: string
        slug:
          type: string
        usableForStorage:
          type: boolean
      type: object
    ValidInstrumentCreationRequestInput:
      properties:
        description:
          type: string
        displayInSummaryLists:
          type: boolean
        iconPath:
          type: string
        includeInGeneratedInstructions:
          type: boolean
        name:
          type: string
        pluralName:
          type: string
        slug:
          type: string
        usableForStorage:
          type: boolean
      type: object
    ValidInstrumentSearchSubset:
      properties:
        description:
          type: string
        id:
          type: string
        name:
          type: string
        pluralName:
          type: string
      type: object
    ValidInstrumentUpdateRequestInput:
      properties:
        description:
          type: string
        displayInSummaryLists:
          type: boolean
        iconPath:
          type: string
        includeInGeneratedInstructions:
          type: boolean
        name:
          type: string
        pluralName:
          type: string
        slug:
          type: string
        usableForStorage:
          type: boolean
      type: object
    ValidMeasurementUnit:
      properties:
        archivedAt:
          type: string
        createdAt:
          type: string
        description:
          type: string
        iconPath:
          type: string
        id:
          type: string
        imperial:
          type: boolean
        lastUpdatedAt:
          type: string
        metric:
          type: boolean
        name:
          type: string
        pluralName:
          type: string
        slug:
          type: string
        universal:
          type: boolean
        volumetric:
          type: boolean
      type: object
    ValidMeasurementUnitConversion:
      properties:
        archivedAt:
          type: string
        createdAt:
          type: string
        from:
          $ref: '#/components/schemas/ValidMeasurementUnit'
        id:
          type: string
        lastUpdatedAt:
          type: string
        modifier:
          type: number
        notes:
          type: string
        onlyForIngredient:
          $ref: '#/components/schemas/ValidIngredient'
        to:
          $ref: '#/components/schemas/ValidMeasurementUnit'
      type: object
    ValidMeasurementUnitConversionCreationRequestInput:
      properties:
        from:
          type: string
        modifier:
          type: number
        notes:
          type: string
        onlyForIngredient:
          type: string
        to:
          type: string
      type: object
    ValidMeasurementUnitConversionUpdateRequestInput:
      properties:
        from:
          type: string
        modifier:
          type: number
        notes:
          type: string
        onlyForIngredient:
          type: string
        to:
          type: string
      type: object
    ValidMeasurementUnitCreationRequestInput:
      properties:
        description:
          type: string
        iconPath:
          type: string
        imperial:
          type: boolean
        metric:
          type: boolean
        name:
          type: string
        pluralName:
          type: string
        slug:
          type: string
        universal:
          type: boolean
        volumetric:
          type: boolean
      type: object
    ValidMeasurementUnitSearchSubset:
      properties:
        description:
          type: string
        id:
          type: string
        name:
          type: string
        pluralName:
          type: string
      type: object
    ValidMeasurementUnitUpdateRequestInput:
      properties:
        description:
          type: string
        iconPath:
          type: string
        imperial:
          type: boolean
        metric:
          type: boolean
        name:
          type: string
        pluralName:
          type: string
        slug:
          type: string
        universal:
          type: boolean
        volumetric:
          type: boolean
      type: object
    ValidPreparation:
      properties:
        archivedAt:
          type: string
        conditionExpressionRequired:
          type: boolean
        consumesVessel:
          type: boolean
        createdAt:
          type: string
        description:
          type: string
        iconPath:
          type: string
        id:
          type: string
        lastUpdatedAt:
          type: string
        maximumIngredientCount:
          type: integer
        maximumInstrumentCount:
          type: integer
        maximumVesselCount:
          type: integer
        minimumIngredientCount:
          type: integer
        minimumInstrumentCount:
          type: integer
        minimumVesselCount:
          type: integer
        name:
          type: string
        onlyForVessels:
          type: boolean
        pastTense:
          type: string
        restrictToIngredients:
          type: boolean
        slug:
          type: string
        temperatureRequired:
          type: boolean
        timeEstimateRequired:
          type: boolean
        yieldsNothing:
          type: boolean
      type: object
    ValidPreparationCreationRequestInput:
      properties:
        conditionExpressionRequired:
          type: boolean
        consumesVessel:
          type: boolean
        description:
          type: string
        iconPath:
          type: string
        maximumIngredientCount:
          type: integer
        maximumInstrumentCount:
          type: integer
        maximumVesselCount:
          type: integer
        minimumIngredientCount:
          type: integer
        minimumInstrumentCount:
          type: integer
        minimumVesselCount:
          type: integer
        name:
          type: string
        onlyForVessels:
          type: boolean
        pastTense:
          type: string
        restrictToIngredients:
          type: boolean
        slug:
          type: string
        temperatureRequired:
          type: boolean
        timeEstimateRequired:
          type: boolean
        yieldsNothing:
          type: boolean
      type: object
    ValidPreparationInstrument:
      properties:
        archivedAt:
          type: string
        createdAt:
          type: string
        id:
          type: string
        instrument:
          $ref: '#/components/schemas/ValidInstrument'
        lastUpdatedAt:
          type: string
        notes:
          type: string
        preparation:
          $ref: '#/components/schemas/ValidPreparation'
      type: object
    ValidPreparationInstrumentCreationRequestInput:
      properties:
        notes:
          type: string
        validInstrumentID:
          type: string
        validPreparationID:
          type: string
      type: object
    ValidPreparationInstrumentUpdateRequestInput:
      properties:
        notes:
          type: string
        validInstrumentID:
          type: string
        validPreparationID:
          type: string
      type: object
    ValidPreparationSearchSubset:
      properties:
        description:
          type: string
        id:
          type: string
        name:
          type: string
        pastTense:
          type: string
      type: object
    ValidPreparationUpdateRequestInput:
      properties:
        conditionExpressionRequired:
          type: boolean
        consumesVessel:
          type: boolean
        description:
          type: string
        iconPath:
          type: string
        maximumIngredientCount:
          type: integer
        maximumInstrumentCount:
          type: integer
        maximumVesselCount:
          type: integer
        minimumIngredientCount:
          type: integer
        minimumInstrumentCount:
          type: integer
        minimumVesselCount:
          type: integer
        name:
          type: string
        onlyForVessels:
          type: boolean
        pastTense:
          type: string
        restrictToIngredients:
          type: boolean
        slug:
          type: string
        temperatureRequired:
          type: boolean
        timeEstimateRequired:
          type: boolean
        yieldsNothing:
          type: boolean
      type: object
    ValidPreparationVessel:
      properties:
        archivedAt:
          type: string
        createdAt:
          type: string
        id:
          type: string
        instrument:
          $ref: '#/components/schemas/ValidVessel'
        lastUpdatedAt:
          type: string
        notes:
          type: string
        preparation:
          $ref: '#/components/schemas/ValidPreparation'
      type: object
    ValidPreparationVesselCreationRequestInput:
      properties:
        notes:
          type: string
        validPreparationID:
          type: string
        validVesselID:
          type: string
      type: object
    ValidPreparationVesselUpdateRequestInput:
      properties:
        notes:
          type: string
        validPreparationID:
          type: string
        validVesselID:
          type: string
      type: object
    ValidVessel:
      properties:
        archivedAt:
          type: string
        capacity:
          type: number
        capacityUnit:
          $ref: '#/components/schemas/ValidMeasurementUnit'
        createdAt:
          type: string
        description:
          type: string
        displayInSummaryLists:
          type: boolean
        heightInMillimeters:
          type: number
        iconPath:
          type: string
        id:
          type: string
        includeInGeneratedInstructions:
          type: boolean
        lastUpdatedAt:
          type: string
        lengthInMillimeters:
          type: number
        name:
          type: string
        pluralName:
          type: string
        shape:
          type: string
        slug:
          type: string
        usableForStorage:
          type: boolean
        widthInMillimeters:
          type: number
      type: object
    ValidVesselCreationRequestInput:
      properties:
        capacity:
          type: number
        capacityUnitID:
          type: string
        description:
          type: string
        displayInSummaryLists:
          type: boolean
        heightInMillimeters:
          type: number
        iconPath:
          type: string
        includeInGeneratedInstructions:
          type: boolean
        lengthInMillimeters:
          type: number
        name:
          type: string
        pluralName:
          type: string
        shape:
          type: string
        slug:
          type: string
        usableForStorage:
          type: boolean
        widthInMillimeters:
          type: number
      type: object
    ValidVesselSearchSubset:
      properties:
        capacity:
          type: number
        capacityUnitName:
          type: string
        description:
          type: string
        id:
          type: string
        name:
          type: string
        pluralName:
          type: string
      type: object
    ValidVesselUpdateRequestInput:
      properties:
        capacity:
          type: number
        capacityUnitID:
          type: string
        description:
          type: string
        displayInSummaryLists:
          type: boolean
        heightInMillimeters:
          type: number
        iconPath:
          type: string
        includeInGeneratedInstructions:
          type: boolean
        lengthInMillimeters:
          type: number
        name:
          type: string
        pluralName:
          type: string
        shape:
          type: string
        slug:
          type: string
        usableForStorage:
          type: boolean
        widthInMillimeters:
          type: number
      type: object
    Webhook:
      properties:
        archivedAt:
          type: string
        belongsToHousehold:
          type: string
        contentType:
          type: string
        createdAt:
          type: string
        events:
          $ref: '#/components/schemas/WebhookTriggerEvent'
        id:
          type: string
        lastUpdatedAt:
          type: string
        method:
          type: string
        name:
          type: string
        url:
          type: string
      type: object
    WebhookCreationRequestInput:
      properties:
        contentType:
          type: string
        events:
          type: string
        method:
          type: string
        name:
          type: string
        url:
          type: string
      type: object
    WebhookTriggerEvent:
      properties:
        archivedAt:
          type: string
        belongsToWebhook:
          type: string
        createdAt:
          type: string
        id:
          type: string
        triggerEvent:
          type: string
      type: object
    WebhookTriggerEventCreationRequestInput:
      properties:
        belongsToWebhook:
          type: string
        triggerEvent:
          type: string
      type: object
  securitySchemes:
    cookieAuth:
      flows:
        implicit:
          authorizationUrl: /oauth2/authorize
          scopes: null
      in: cookie
      name: ddb_api_cookie
      type: oauth2
