openapi: 3.1.0
info:
  contact:
    email: support@dinnerdonebetter.dev
  description: This is the spec for the Dinner Done Better API.
  title: Dinner Done Better API
  version: 1.0.0
servers:
- description: dev API server
  url: https://api.dinnerdonebetter.dev
paths:
  /_meta_/live:
    get:
      description: checks for service liveness
      operationId: CheckForLiveness
  /_meta_/ready:
    get:
      description: checks for service readiness
      operationId: CheckForReadiness
  /api/v1/admin/cycle_cookie_secret:
    post:
      description: Operation for creating
      operationId: AdminCycleCookieSecret
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - admin
  /api/v1/admin/users/status:
    post:
      description: Operation for creating UserStatusResponse
      operationId: AdminUpdateUserStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAccountStatusUpdateInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserAccountStatusUpdateInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserStatusResponse'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserStatusResponse'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - admin
      - users
  /api/v1/audit_log_entries/{auditLogEntryID}:
    get:
      description: Operation for fetching AuditLogEntry
      operationId: GetAuditLogEntryByID
      parameters:
      - in: path
        name: auditLogEntryID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/AuditLogEntry'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/AuditLogEntry'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - audit log entries
  /api/v1/audit_log_entries/for_household:
    get:
      description: Operation for fetching AuditLogEntry
      operationId: GetAuditLogEntriesForHousehold
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/AuditLogEntry'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/AuditLogEntry'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - audit log entries
  /api/v1/audit_log_entries/for_user:
    get:
      description: Operation for fetching AuditLogEntry
      operationId: GetAuditLogEntriesForUser
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/AuditLogEntry'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/AuditLogEntry'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - audit log entries
  /api/v1/household_invitations/{householdInvitationID}:
    get:
      description: Operation for fetching HouseholdInvitation
      operationId: GetHouseholdInvitation
      parameters:
      - in: path
        name: householdInvitationID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/HouseholdInvitation'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/HouseholdInvitation'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - household invitations
  /api/v1/household_invitations/{householdInvitationID}/accept:
    put:
      description: Operation for updating HouseholdInvitation
      operationId: AcceptHouseholdInvitation
      parameters:
      - in: path
        name: householdInvitationID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HouseholdInvitationUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/HouseholdInvitationUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/HouseholdInvitation'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/HouseholdInvitation'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - household invitations
  /api/v1/household_invitations/{householdInvitationID}/cancel:
    put:
      description: Operation for updating HouseholdInvitation
      operationId: CancelHouseholdInvitation
      parameters:
      - in: path
        name: householdInvitationID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HouseholdInvitationUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/HouseholdInvitationUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/HouseholdInvitation'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/HouseholdInvitation'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - household invitations
  /api/v1/household_invitations/{householdInvitationID}/reject:
    put:
      description: Operation for updating HouseholdInvitation
      operationId: RejectHouseholdInvitation
      parameters:
      - in: path
        name: householdInvitationID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HouseholdInvitationUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/HouseholdInvitationUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/HouseholdInvitation'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/HouseholdInvitation'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - household invitations
  /api/v1/household_invitations/received:
    get:
      description: Operation for fetching HouseholdInvitation
      operationId: GetReceivedHouseholdInvitations
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/HouseholdInvitation'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/HouseholdInvitation'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - household invitations
  /api/v1/household_invitations/sent:
    get:
      description: Operation for fetching HouseholdInvitation
      operationId: GetSentHouseholdInvitations
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/HouseholdInvitation'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/HouseholdInvitation'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - household invitations
  /api/v1/households:
    get:
      description: Operation for fetching Household
      operationId: GetHouseholds
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/Household'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/Household'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - households
    post:
      description: Operation for creating Household
      operationId: CreateHousehold
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HouseholdCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/HouseholdCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Household'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Household'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - households
  /api/v1/households/{householdID}:
    delete:
      description: Operation for archiving Household
      operationId: ArchiveHousehold
      parameters:
      - in: path
        name: householdID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Household'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Household'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - households
    get:
      description: Operation for fetching Household
      operationId: GetHousehold
      parameters:
      - in: path
        name: householdID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Household'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Household'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - households
    put:
      description: Operation for updating Household
      operationId: UpdateHousehold
      parameters:
      - in: path
        name: householdID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HouseholdUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/HouseholdUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Household'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Household'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - households
  /api/v1/households/{householdID}/default:
    post:
      description: Operation for creating Household
      operationId: SetDefaultHousehold
      parameters:
      - in: path
        name: householdID
        required: true
        schema:
          type: string
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Household'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Household'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - households
  /api/v1/households/{householdID}/invitations:
    post:
      description: Operation for creating HouseholdInvitation
      operationId: CreateHouseholdInvitation
      parameters:
      - in: path
        name: householdID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HouseholdInvitationCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/HouseholdInvitationCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/HouseholdInvitation'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/HouseholdInvitation'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - households
      - invitations
  /api/v1/households/{householdID}/invitations/{householdInvitationID}:
    get:
      description: Operation for fetching HouseholdInvitation
      operationId: GetHouseholdInvitationByID
      parameters:
      - in: path
        name: householdID
        required: true
        schema:
          type: string
      - in: path
        name: householdInvitationID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/HouseholdInvitation'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/HouseholdInvitation'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - households
      - invitations
  /api/v1/households/{householdID}/invite:
    post:
      description: Operation for creating HouseholdInvitation
      operationId: POST_households_householdID_invite
      parameters:
      - in: path
        name: householdID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HouseholdInvitationCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/HouseholdInvitationCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/HouseholdInvitation'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/HouseholdInvitation'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - households
  /api/v1/households/{householdID}/members/{userID}:
    delete:
      description: Operation for archiving HouseholdUserMembership
      operationId: ArchiveUserMembership
      parameters:
      - in: path
        name: householdID
        required: true
        schema:
          type: string
      - in: path
        name: userID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/HouseholdUserMembership'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/HouseholdUserMembership'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - households
      - household members
  /api/v1/households/{householdID}/members/{userID}/permissions:
    patch:
      description: Operation for updating UserPermissionsResponse
      operationId: UpdateHouseholdMemberPermissions
      parameters:
      - in: path
        name: householdID
        required: true
        schema:
          type: string
      - in: path
        name: userID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyUserPermissionsInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ModifyUserPermissionsInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserPermissionsResponse'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserPermissionsResponse'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - households
      - household members
  /api/v1/households/{householdID}/transfer:
    post:
      description: Operation for creating Household
      operationId: TransferHouseholdOwnership
      parameters:
      - in: path
        name: householdID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HouseholdOwnershipTransferInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/HouseholdOwnershipTransferInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Household'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Household'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - households
  /api/v1/households/current:
    get:
      description: Operation for fetching Household
      operationId: GetActiveHousehold
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Household'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Household'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - households
  /api/v1/households/instruments:
    get:
      description: Operation for fetching HouseholdInstrumentOwnership
      operationId: GetHouseholdInstrumentOwnerships
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/HouseholdInstrumentOwnership'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/HouseholdInstrumentOwnership'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - households
      - household instrument ownerships
    post:
      description: Operation for creating HouseholdInstrumentOwnership
      operationId: CreateHouseholdInstrumentOwnership
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HouseholdInstrumentOwnershipCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/HouseholdInstrumentOwnershipCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/HouseholdInstrumentOwnership'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/HouseholdInstrumentOwnership'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - households
      - household instrument ownerships
  /api/v1/households/instruments/{householdInstrumentOwnershipID}:
    delete:
      description: Operation for archiving HouseholdInstrumentOwnership
      operationId: ArchiveHouseholdInstrumentOwnership
      parameters:
      - in: path
        name: householdInstrumentOwnershipID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/HouseholdInstrumentOwnership'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/HouseholdInstrumentOwnership'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - households
      - household instrument ownerships
    get:
      description: Operation for fetching HouseholdInstrumentOwnership
      operationId: GetHouseholdInstrumentOwnership
      parameters:
      - in: path
        name: householdInstrumentOwnershipID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/HouseholdInstrumentOwnership'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/HouseholdInstrumentOwnership'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - households
      - household instrument ownerships
    put:
      description: Operation for updating HouseholdInstrumentOwnership
      operationId: UpdateHouseholdInstrumentOwnership
      parameters:
      - in: path
        name: householdInstrumentOwnershipID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HouseholdInstrumentOwnershipUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/HouseholdInstrumentOwnershipUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/HouseholdInstrumentOwnership'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/HouseholdInstrumentOwnership'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - households
      - household instrument ownerships
  /api/v1/meal_plans:
    get:
      description: Operation for fetching MealPlan
      operationId: GetMealPlans
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/MealPlan'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/MealPlan'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - meal plans
    post:
      description: Operation for creating MealPlan
      operationId: CreateMealPlan
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MealPlanCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/MealPlanCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlan'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlan'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - meal plans
  /api/v1/meal_plans/{mealPlanID}:
    delete:
      description: Operation for archiving MealPlan
      operationId: ArchiveMealPlan
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlan'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlan'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - meal plans
    get:
      description: Operation for fetching MealPlan
      operationId: GetMealPlan
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlan'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlan'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - meal plans
    put:
      description: Operation for updating MealPlan
      operationId: UpdateMealPlan
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MealPlanUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/MealPlanUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlan'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlan'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - meal plans
  /api/v1/meal_plans/{mealPlanID}/events:
    get:
      description: Operation for fetching MealPlanEvent
      operationId: GetMealPlanEvents
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/MealPlanEvent'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/MealPlanEvent'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - meal plans
      - meal plan events
    post:
      description: Operation for creating MealPlanEvent
      operationId: CreateMealPlanEvent
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MealPlanEventCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/MealPlanEventCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanEvent'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanEvent'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - meal plans
      - meal plan events
  /api/v1/meal_plans/{mealPlanID}/events/{mealPlanEventID}:
    delete:
      description: Operation for archiving MealPlanEvent
      operationId: ArchiveMealPlanEvent
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanEventID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanEvent'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanEvent'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - meal plans
      - meal plan events
    get:
      description: Operation for fetching MealPlanEvent
      operationId: GetMealPlanEvent
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanEventID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanEvent'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanEvent'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - meal plans
      - meal plan events
    put:
      description: Operation for updating MealPlanEvent
      operationId: UpdateMealPlanEvent
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanEventID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MealPlanEventUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/MealPlanEventUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanEvent'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanEvent'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - meal plans
      - meal plan events
  /api/v1/meal_plans/{mealPlanID}/events/{mealPlanEventID}/options:
    get:
      description: Operation for fetching MealPlanOption
      operationId: GetMealPlanOptions
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanEventID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/MealPlanOption'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/MealPlanOption'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - meal plans
      - meal plan events
      - meal plan options
    post:
      description: Operation for creating MealPlanOption
      operationId: CreateMealPlanOption
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanEventID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MealPlanOptionCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/MealPlanOptionCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanOption'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanOption'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - meal plans
      - meal plan events
      - meal plan options
  /api/v1/meal_plans/{mealPlanID}/events/{mealPlanEventID}/options/{mealPlanOptionID}:
    delete:
      description: Operation for archiving MealPlanOption
      operationId: ArchiveMealPlanOption
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanEventID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanOptionID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanOption'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanOption'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - meal plans
      - meal plan events
      - meal plan options
    get:
      description: Operation for fetching MealPlanOption
      operationId: GetMealPlanOption
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanEventID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanOptionID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanOption'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanOption'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - meal plans
      - meal plan events
      - meal plan options
    put:
      description: Operation for updating MealPlanOption
      operationId: UpdateMealPlanOption
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanEventID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanOptionID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MealPlanOptionUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/MealPlanOptionUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanOption'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanOption'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - meal plans
      - meal plan events
      - meal plan options
  /api/v1/meal_plans/{mealPlanID}/events/{mealPlanEventID}/options/{mealPlanOptionID}/votes:
    get:
      description: Operation for fetching MealPlanOptionVote
      operationId: GetMealPlanOptionVotes
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanEventID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanOptionID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/MealPlanOptionVote'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/MealPlanOptionVote'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - meal plans
      - meal plan events
      - meal plan options
      - meal plan option votes
  /api/v1/meal_plans/{mealPlanID}/events/{mealPlanEventID}/options/{mealPlanOptionID}/votes/{mealPlanOptionVoteID}:
    delete:
      description: Operation for archiving MealPlanOptionVote
      operationId: ArchiveMealPlanOptionVote
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanEventID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanOptionID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanOptionVoteID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanOptionVote'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanOptionVote'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - meal plans
      - meal plan events
      - meal plan options
      - meal plan option votes
    get:
      description: Operation for fetching MealPlanOptionVote
      operationId: GetMealPlanOptionVote
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanEventID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanOptionID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanOptionVoteID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanOptionVote'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanOptionVote'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - meal plans
      - meal plan events
      - meal plan options
      - meal plan option votes
    put:
      description: Operation for updating MealPlanOptionVote
      operationId: UpdateMealPlanOptionVote
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanEventID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanOptionID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanOptionVoteID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MealPlanOptionVoteUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/MealPlanOptionVoteUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanOptionVote'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanOptionVote'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - meal plans
      - meal plan events
      - meal plan options
      - meal plan option votes
  /api/v1/meal_plans/{mealPlanID}/events/{mealPlanEventID}/vote:
    post:
      description: Operation for creating MealPlanOptionVote
      operationId: CreateMealPlanOptionVote
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanEventID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MealPlanOptionVoteCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/MealPlanOptionVoteCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanOptionVote'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanOptionVote'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - meal plans
      - meal plan events
  /api/v1/meal_plans/{mealPlanID}/finalize:
    post:
      description: Operation for creating FinalizeMealPlansResponse
      operationId: FinalizeMealPlan
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/FinalizeMealPlansResponse'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/FinalizeMealPlansResponse'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - meal plans
  /api/v1/meal_plans/{mealPlanID}/grocery_list_items:
    get:
      description: Operation for fetching MealPlanGroceryListItem
      operationId: GetMealPlanGroceryListItemsForMealPlan
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/MealPlanGroceryListItem'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/MealPlanGroceryListItem'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - meal plans
      - grocery list items
    post:
      description: Operation for creating MealPlanGroceryListItem
      operationId: CreateMealPlanGroceryListItem
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MealPlanGroceryListItemCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/MealPlanGroceryListItemCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanGroceryListItem'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanGroceryListItem'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - meal plans
      - grocery list items
  /api/v1/meal_plans/{mealPlanID}/grocery_list_items/{mealPlanGroceryListItemID}:
    delete:
      description: Operation for archiving MealPlanGroceryListItem
      operationId: ArchiveMealPlanGroceryListItem
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanGroceryListItemID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanGroceryListItem'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanGroceryListItem'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - meal plans
      - grocery list items
    get:
      description: Operation for fetching MealPlanGroceryListItem
      operationId: GetMealPlanGroceryListItem
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanGroceryListItemID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanGroceryListItem'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanGroceryListItem'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - meal plans
      - grocery list items
    put:
      description: Operation for updating MealPlanGroceryListItem
      operationId: UpdateMealPlanGroceryListItem
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanGroceryListItemID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MealPlanGroceryListItemUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/MealPlanGroceryListItemUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanGroceryListItem'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanGroceryListItem'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - meal plans
      - grocery list items
  /api/v1/meal_plans/{mealPlanID}/tasks:
    get:
      description: Operation for fetching MealPlanTask
      operationId: GetMealPlanTasks
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/MealPlanTask'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/MealPlanTask'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - meal plans
      - meal plan tasks
    post:
      description: Operation for creating MealPlanTask
      operationId: CreateMealPlanTask
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MealPlanTaskCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/MealPlanTaskCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanTask'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanTask'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - meal plans
      - meal plan tasks
  /api/v1/meal_plans/{mealPlanID}/tasks/{mealPlanTaskID}:
    get:
      description: Operation for fetching MealPlanTask
      operationId: GetMealPlanTask
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanTaskID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanTask'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanTask'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - meal plans
      - meal plan tasks
    patch:
      description: Operation for updating MealPlanTask
      operationId: UpdateMealPlanTaskStatus
      parameters:
      - in: path
        name: mealPlanID
        required: true
        schema:
          type: string
      - in: path
        name: mealPlanTaskID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MealPlanTaskStatusChangeRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/MealPlanTaskStatusChangeRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanTask'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/MealPlanTask'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - meal plans
      - meal plan tasks
  /api/v1/meals:
    get:
      description: Operation for fetching Meal
      operationId: GetMeals
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/Meal'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/Meal'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - meals
    post:
      description: Operation for creating Meal
      operationId: CreateMeal
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MealCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/MealCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Meal'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Meal'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - meals
  /api/v1/meals/{mealID}:
    delete:
      description: Operation for archiving Meal
      operationId: ArchiveMeal
      parameters:
      - in: path
        name: mealID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Meal'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Meal'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - meals
    get:
      description: Operation for fetching Meal
      operationId: GetMeal
      parameters:
      - in: path
        name: mealID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Meal'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Meal'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - meals
  /api/v1/meals/search:
    get:
      description: Operation for fetching Meal
      operationId: SearchForMeals
      parameters:
      - description: the search query parameter
        in: query
        name: q
        required: true
        schema:
          type: string
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/Meal'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/Meal'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - meals
  /api/v1/oauth2_clients:
    get:
      description: Operation for fetching OAuth2Client
      operationId: GetOAuth2Clients
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/OAuth2Client'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/OAuth2Client'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - oauth2
    post:
      description: Operation for creating OAuth2ClientCreationResponse
      operationId: CreateOAuth2Client
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuth2ClientCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/OAuth2ClientCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/OAuth2ClientCreationResponse'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/OAuth2ClientCreationResponse'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - oauth2
  /api/v1/oauth2_clients/{oauth2ClientID}:
    delete:
      description: Operation for archiving OAuth2Client
      operationId: ArchiveOAuth2Client
      parameters:
      - in: path
        name: oauth2ClientID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/OAuth2Client'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/OAuth2Client'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - oauth2
    get:
      description: Operation for fetching OAuth2Client
      operationId: GetOAuth2Client
      parameters:
      - in: path
        name: oauth2ClientID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/OAuth2Client'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/OAuth2Client'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - oauth2
  /api/v1/recipes:
    get:
      description: Operation for fetching Recipe
      operationId: GetRecipes
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/Recipe'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/Recipe'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
    post:
      description: Operation for creating Recipe
      operationId: CreateRecipe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/RecipeCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Recipe'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Recipe'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
  /api/v1/recipes/{recipeID}:
    delete:
      description: Operation for archiving Recipe
      operationId: ArchiveRecipe
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Recipe'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Recipe'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
    get:
      description: Operation for fetching Recipe
      operationId: GetRecipe
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Recipe'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Recipe'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
    put:
      description: Operation for updating Recipe
      operationId: UpdateRecipe
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/RecipeUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Recipe'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Recipe'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
  /api/v1/recipes/{recipeID}/clone:
    post:
      description: Operation for creating Recipe
      operationId: CloneRecipe
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Recipe'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Recipe'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
  /api/v1/recipes/{recipeID}/dag:
    get:
      description: Operation for fetching APIError
      operationId: GetRecipeDAG
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/APIError'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/APIError'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
  /api/v1/recipes/{recipeID}/images:
    post:
      description: Operation for creating
      operationId: UploadMediaForRecipe
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
  /api/v1/recipes/{recipeID}/mermaid:
    get:
      description: Operation for fetching
      operationId: GetMermaidDiagramForRecipe
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      security:
      - cookieAuth: []
      tags:
      - recipes
  /api/v1/recipes/{recipeID}/prep_steps:
    get:
      description: Operation for fetching RecipePrepTaskStep
      operationId: GetRecipeMealPlanTasks
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipePrepTaskStep'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipePrepTaskStep'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
  /api/v1/recipes/{recipeID}/prep_tasks:
    get:
      description: Operation for fetching RecipePrepTask
      operationId: GetRecipePrepTasks
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/RecipePrepTask'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/RecipePrepTask'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe prep tasks
    post:
      description: Operation for creating RecipePrepTask
      operationId: CreateRecipePrepTask
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipePrepTaskCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/RecipePrepTaskCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipePrepTask'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipePrepTask'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe prep tasks
  /api/v1/recipes/{recipeID}/prep_tasks/{recipePrepTaskID}:
    delete:
      description: Operation for archiving RecipePrepTask
      operationId: ArchiveRecipePrepTask
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipePrepTaskID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipePrepTask'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipePrepTask'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe prep tasks
    get:
      description: Operation for fetching RecipePrepTask
      operationId: GetRecipePrepTask
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipePrepTaskID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipePrepTask'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipePrepTask'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe prep tasks
    put:
      description: Operation for updating RecipePrepTask
      operationId: UpdateRecipePrepTask
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipePrepTaskID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipePrepTaskUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/RecipePrepTaskUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipePrepTask'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipePrepTask'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe prep tasks
  /api/v1/recipes/{recipeID}/ratings:
    get:
      description: Operation for fetching RecipeRating
      operationId: GetRecipeRatings
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/RecipeRating'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/RecipeRating'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe ratings
    post:
      description: Operation for creating RecipeRating
      operationId: CreateRecipeRating
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeRatingCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/RecipeRatingCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeRating'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeRating'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe ratings
  /api/v1/recipes/{recipeID}/ratings/{recipeRatingID}:
    delete:
      description: Operation for archiving RecipeRating
      operationId: ArchiveRecipeRating
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeRatingID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeRating'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeRating'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe ratings
    get:
      description: Operation for fetching RecipeRating
      operationId: GetRecipeRating
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeRatingID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeRating'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeRating'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe ratings
    put:
      description: Operation for updating RecipeRating
      operationId: UpdateRecipeRating
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeRatingID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeRatingUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/RecipeRatingUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeRating'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeRating'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe ratings
  /api/v1/recipes/{recipeID}/steps:
    get:
      description: Operation for fetching RecipeStep
      operationId: GetRecipeSteps
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/RecipeStep'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/RecipeStep'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
    post:
      description: Operation for creating RecipeStep
      operationId: CreateRecipeStep
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeStepCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/RecipeStepCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStep'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStep'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
  /api/v1/recipes/{recipeID}/steps/{recipeStepID}:
    delete:
      description: Operation for archiving RecipeStep
      operationId: ArchiveRecipeStep
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStep'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStep'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
    get:
      description: Operation for fetching RecipeStep
      operationId: GetRecipeStep
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStep'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStep'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
    put:
      description: Operation for updating RecipeStep
      operationId: UpdateRecipeStep
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeStepUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/RecipeStepUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStep'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStep'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
  /api/v1/recipes/{recipeID}/steps/{recipeStepID}/completion_conditions:
    get:
      description: Operation for fetching RecipeStepCompletionCondition
      operationId: GetRecipeStepCompletionConditions
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/RecipeStepCompletionCondition'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/RecipeStepCompletionCondition'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
      - recipe step completion conditions
    post:
      description: Operation for creating RecipeStepCompletionCondition
      operationId: CreateRecipeStepCompletionCondition
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeStepCompletionConditionForExistingRecipeCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/RecipeStepCompletionConditionForExistingRecipeCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepCompletionCondition'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepCompletionCondition'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
      - recipe step completion conditions
  /api/v1/recipes/{recipeID}/steps/{recipeStepID}/completion_conditions/{recipeStepCompletionConditionID}:
    delete:
      description: Operation for archiving RecipeStepCompletionCondition
      operationId: ArchiveRecipeStepCompletionCondition
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepCompletionConditionID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepCompletionCondition'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepCompletionCondition'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
      - recipe step completion conditions
    get:
      description: Operation for fetching RecipeStepCompletionCondition
      operationId: GetRecipeStepCompletionCondition
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepCompletionConditionID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepCompletionCondition'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepCompletionCondition'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
      - recipe step completion conditions
    put:
      description: Operation for updating RecipeStepCompletionCondition
      operationId: UpdateRecipeStepCompletionCondition
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepCompletionConditionID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeStepCompletionConditionUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/RecipeStepCompletionConditionUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepCompletionCondition'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepCompletionCondition'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
      - recipe step completion conditions
  /api/v1/recipes/{recipeID}/steps/{recipeStepID}/images:
    post:
      description: Operation for creating
      operationId: UploadMediaForRecipeStep
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
  /api/v1/recipes/{recipeID}/steps/{recipeStepID}/ingredients:
    get:
      description: Operation for fetching RecipeStepIngredient
      operationId: GetRecipeStepIngredients
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/RecipeStepIngredient'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/RecipeStepIngredient'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
      - recipe step ingredients
    post:
      description: Operation for creating RecipeStepIngredient
      operationId: CreateRecipeStepIngredient
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeStepIngredientCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/RecipeStepIngredientCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepIngredient'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepIngredient'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
      - recipe step ingredients
  /api/v1/recipes/{recipeID}/steps/{recipeStepID}/ingredients/{recipeStepIngredientID}:
    delete:
      description: Operation for archiving RecipeStepIngredient
      operationId: ArchiveRecipeStepIngredient
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepIngredientID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepIngredient'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepIngredient'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
      - recipe step ingredients
    get:
      description: Operation for fetching RecipeStepIngredient
      operationId: GetRecipeStepIngredient
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepIngredientID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepIngredient'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepIngredient'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
      - recipe step ingredients
    put:
      description: Operation for updating RecipeStepIngredient
      operationId: UpdateRecipeStepIngredient
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepIngredientID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeStepIngredientUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/RecipeStepIngredientUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepIngredient'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepIngredient'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
      - recipe step ingredients
  /api/v1/recipes/{recipeID}/steps/{recipeStepID}/instruments:
    get:
      description: Operation for fetching RecipeStepInstrument
      operationId: GetRecipeStepInstruments
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/RecipeStepInstrument'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/RecipeStepInstrument'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
      - household instrument ownerships
    post:
      description: Operation for creating RecipeStepInstrument
      operationId: CreateRecipeStepInstrument
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeStepInstrumentCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/RecipeStepInstrumentCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepInstrument'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepInstrument'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
      - household instrument ownerships
  /api/v1/recipes/{recipeID}/steps/{recipeStepID}/instruments/{recipeStepInstrumentID}:
    delete:
      description: Operation for archiving RecipeStepInstrument
      operationId: ArchiveRecipeStepInstrument
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepInstrumentID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepInstrument'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepInstrument'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
      - household instrument ownerships
    get:
      description: Operation for fetching RecipeStepInstrument
      operationId: GetRecipeStepInstrument
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepInstrumentID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepInstrument'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepInstrument'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
      - household instrument ownerships
    put:
      description: Operation for updating RecipeStepInstrument
      operationId: UpdateRecipeStepInstrument
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepInstrumentID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeStepInstrumentUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/RecipeStepInstrumentUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepInstrument'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepInstrument'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
      - household instrument ownerships
  /api/v1/recipes/{recipeID}/steps/{recipeStepID}/products:
    get:
      description: Operation for fetching RecipeStepProduct
      operationId: GetRecipeStepProducts
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/RecipeStepProduct'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/RecipeStepProduct'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
      - recipe step products
    post:
      description: Operation for creating RecipeStepProduct
      operationId: CreateRecipeStepProduct
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeStepProductCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/RecipeStepProductCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepProduct'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepProduct'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
      - recipe step products
  /api/v1/recipes/{recipeID}/steps/{recipeStepID}/products/{recipeStepProductID}:
    delete:
      description: Operation for archiving RecipeStepProduct
      operationId: ArchiveRecipeStepProduct
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepProductID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepProduct'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepProduct'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
      - recipe step products
    get:
      description: Operation for fetching RecipeStepProduct
      operationId: GetRecipeStepProduct
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepProductID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepProduct'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepProduct'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
      - recipe step products
    put:
      description: Operation for updating RecipeStepProduct
      operationId: UpdateRecipeStepProduct
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepProductID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeStepProductUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/RecipeStepProductUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepProduct'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepProduct'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
      - recipe step products
  /api/v1/recipes/{recipeID}/steps/{recipeStepID}/vessels:
    get:
      description: Operation for fetching RecipeStepVessel
      operationId: GetRecipeStepVessels
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/RecipeStepVessel'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/RecipeStepVessel'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
      - recipe step vessels
    post:
      description: Operation for creating RecipeStepVessel
      operationId: CreateRecipeStepVessel
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeStepVesselCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/RecipeStepVesselCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepVessel'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepVessel'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
      - recipe step vessels
  /api/v1/recipes/{recipeID}/steps/{recipeStepID}/vessels/{recipeStepVesselID}:
    delete:
      description: Operation for archiving RecipeStepVessel
      operationId: ArchiveRecipeStepVessel
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepVesselID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepVessel'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepVessel'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
      - recipe step vessels
    get:
      description: Operation for fetching RecipeStepVessel
      operationId: GetRecipeStepVessel
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepVesselID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepVessel'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepVessel'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
      - recipe step vessels
    put:
      description: Operation for updating RecipeStepVessel
      operationId: UpdateRecipeStepVessel
      parameters:
      - in: path
        name: recipeID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepID
        required: true
        schema:
          type: string
      - in: path
        name: recipeStepVesselID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipeStepVesselUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/RecipeStepVesselUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepVessel'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/RecipeStepVessel'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
      - recipe steps
      - recipe step vessels
  /api/v1/recipes/search:
    get:
      description: Operation for fetching Recipe
      operationId: SearchForRecipes
      parameters:
      - description: the search query parameter
        in: query
        name: q
        required: true
        schema:
          type: string
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/Recipe'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/Recipe'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - recipes
  /api/v1/settings:
    get:
      description: Operation for fetching ServiceSetting
      operationId: GetServiceSettings
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ServiceSetting'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ServiceSetting'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - service settings
    post:
      description: Operation for creating ServiceSetting
      operationId: CreateServiceSetting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceSettingCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ServiceSettingCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ServiceSetting'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ServiceSetting'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - service settings
  /api/v1/settings/{serviceSettingID}:
    delete:
      description: Operation for archiving ServiceSetting
      operationId: ArchiveServiceSetting
      parameters:
      - in: path
        name: serviceSettingID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ServiceSetting'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ServiceSetting'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - service settings
    get:
      description: Operation for fetching ServiceSetting
      operationId: GetServiceSetting
      parameters:
      - in: path
        name: serviceSettingID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ServiceSetting'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ServiceSetting'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - service settings
  /api/v1/settings/configurations:
    post:
      description: Operation for creating ServiceSettingConfiguration
      operationId: CreateServiceSettingConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceSettingConfigurationCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ServiceSettingConfigurationCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ServiceSettingConfiguration'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ServiceSettingConfiguration'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - service settings
      - service setting configurations
  /api/v1/settings/configurations/{serviceSettingConfigurationID}:
    delete:
      description: Operation for archiving ServiceSettingConfiguration
      operationId: ArchiveServiceSettingConfiguration
      parameters:
      - in: path
        name: serviceSettingConfigurationID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ServiceSettingConfiguration'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ServiceSettingConfiguration'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - service settings
      - service setting configurations
    put:
      description: Operation for updating ServiceSettingConfiguration
      operationId: UpdateServiceSettingConfiguration
      parameters:
      - in: path
        name: serviceSettingConfigurationID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceSettingConfigurationUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ServiceSettingConfigurationUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ServiceSettingConfiguration'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ServiceSettingConfiguration'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - service settings
      - service setting configurations
  /api/v1/settings/configurations/household:
    get:
      description: Operation for fetching ServiceSettingConfiguration
      operationId: GetServiceSettingConfigurationsForHousehold
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ServiceSettingConfiguration'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ServiceSettingConfiguration'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - service settings
      - service setting configurations
  /api/v1/settings/configurations/user:
    get:
      description: Operation for fetching ServiceSettingConfiguration
      operationId: GetServiceSettingConfigurationsForUser
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ServiceSettingConfiguration'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ServiceSettingConfiguration'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - service settings
      - service setting configurations
  /api/v1/settings/configurations/user/{serviceSettingConfigurationName}:
    get:
      description: Operation for fetching ServiceSettingConfiguration
      operationId: GetServiceSettingConfigurationByName
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: serviceSettingConfigurationName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ServiceSettingConfiguration'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ServiceSettingConfiguration'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - service settings
      - service setting configurations
      - user
  /api/v1/settings/search:
    get:
      description: Operation for fetching ServiceSetting
      operationId: SearchForServiceSettings
      parameters:
      - description: the search query parameter
        in: query
        name: q
        required: true
        schema:
          type: string
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ServiceSetting'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ServiceSetting'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - service settings
  /api/v1/user_ingredient_preferences:
    get:
      description: Operation for fetching UserIngredientPreference
      operationId: GetUserIngredientPreferences
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/UserIngredientPreference'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/UserIngredientPreference'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - user ingredient preferences
    post:
      description: Operation for creating UserIngredientPreference
      operationId: CreateUserIngredientPreference
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIngredientPreferenceCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserIngredientPreferenceCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserIngredientPreference'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserIngredientPreference'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - user ingredient preferences
  /api/v1/user_ingredient_preferences/{userIngredientPreferenceID}:
    delete:
      description: Operation for archiving UserIngredientPreference
      operationId: ArchiveUserIngredientPreference
      parameters:
      - in: path
        name: userIngredientPreferenceID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserIngredientPreference'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserIngredientPreference'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - user ingredient preferences
    put:
      description: Operation for updating UserIngredientPreference
      operationId: UpdateUserIngredientPreference
      parameters:
      - in: path
        name: userIngredientPreferenceID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIngredientPreferenceUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserIngredientPreferenceUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserIngredientPreference'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserIngredientPreference'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - user ingredient preferences
  /api/v1/user_notifications:
    get:
      description: Operation for fetching UserNotification
      operationId: GetUserNotifications
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/UserNotification'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/UserNotification'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - user notifications
    post:
      description: Operation for creating UserNotification
      operationId: CreateUserNotification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNotificationCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserNotificationCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserNotification'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserNotification'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - user notifications
  /api/v1/user_notifications/{userNotificationID}:
    get:
      description: Operation for fetching UserNotification
      operationId: GetUserNotification
      parameters:
      - in: path
        name: userNotificationID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserNotification'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserNotification'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - user notifications
    patch:
      description: Operation for updating UserNotification
      operationId: UpdateUserNotification
      parameters:
      - in: path
        name: userNotificationID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserNotificationUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserNotificationUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserNotification'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserNotification'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - user notifications
  /api/v1/users:
    get:
      description: Operation for fetching User
      operationId: GetUsers
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/User'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/User'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - users
  /api/v1/users/{userID}:
    delete:
      description: Operation for archiving User
      operationId: ArchiveUser
      parameters:
      - in: path
        name: userID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/User'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/User'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - users
    get:
      description: Operation for fetching User
      operationId: GetUser
      parameters:
      - in: path
        name: userID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/User'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/User'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - users
  /api/v1/users/avatar/upload:
    post:
      description: Operation for creating User
      operationId: UploadUserAvatar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AvatarUpdateInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/AvatarUpdateInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/User'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/User'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - users
  /api/v1/users/details:
    put:
      description: Operation for updating User
      operationId: UpdateUserDetails
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetailsUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserDetailsUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/User'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/User'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - users
  /api/v1/users/email_address:
    put:
      description: Operation for updating User
      operationId: UpdateUserEmailAddress
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEmailAddressUpdateInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserEmailAddressUpdateInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/User'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/User'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - users
  /api/v1/users/email_address_verification:
    post:
      description: Operation for creating User
      operationId: VerifyUserEmailAddress
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailAddressVerificationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/EmailAddressVerificationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/User'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/User'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - users
  /api/v1/users/household/select:
    post:
      description: Operation for creating Household
      operationId: ChangeActiveHousehold
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeActiveHouseholdInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ChangeActiveHouseholdInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Household'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Household'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - users
      - household
  /api/v1/users/password/new:
    put:
      description: Operation for updating
      operationId: UpdatePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordUpdateInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/PasswordUpdateInput'
        required: true
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - users
      - password
  /api/v1/users/permissions/check:
    post:
      description: Operation for creating UserPermissionsResponse
      operationId: CheckPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPermissionsRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserPermissionsRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserPermissionsResponse'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserPermissionsResponse'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - users
      - permissions
  /api/v1/users/search:
    get:
      description: Operation for fetching User
      operationId: SearchForUsers
      parameters:
      - description: the search query parameter
        in: query
        name: q
        required: true
        schema:
          type: string
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/User'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/User'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - users
  /api/v1/users/self:
    get:
      description: Operation for fetching User
      operationId: GetSelf
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/User'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/User'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - users
  /api/v1/users/totp_secret/new:
    post:
      description: Operation for creating TOTPSecretRefreshResponse
      operationId: RefreshTOTPSecret
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TOTPSecretRefreshInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/TOTPSecretRefreshInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/TOTPSecretRefreshResponse'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/TOTPSecretRefreshResponse'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - users
      - totp secret
  /api/v1/users/username:
    put:
      description: Operation for updating User
      operationId: UpdateUserUsername
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameUpdateInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/UsernameUpdateInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/User'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/User'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - users
  /api/v1/valid_ingredient_groups:
    get:
      description: Operation for fetching ValidIngredientGroup
      operationId: GetValidIngredientGroups
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredientGroup'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredientGroup'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid ingredient groups
    post:
      description: Operation for creating ValidIngredientGroup
      operationId: CreateValidIngredientGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidIngredientGroupCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidIngredientGroupCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientGroup'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientGroup'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid ingredient groups
  /api/v1/valid_ingredient_groups/{validIngredientGroupID}:
    delete:
      description: Operation for archiving ValidIngredientGroup
      operationId: ArchiveValidIngredientGroup
      parameters:
      - in: path
        name: validIngredientGroupID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientGroup'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientGroup'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid ingredient groups
    get:
      description: Operation for fetching ValidIngredientGroup
      operationId: GetValidIngredientGroup
      parameters:
      - in: path
        name: validIngredientGroupID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientGroup'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientGroup'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid ingredient groups
    put:
      description: Operation for updating ValidIngredientGroup
      operationId: UpdateValidIngredientGroup
      parameters:
      - in: path
        name: validIngredientGroupID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidIngredientGroupUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidIngredientGroupUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientGroup'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientGroup'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid ingredient groups
  /api/v1/valid_ingredient_groups/search:
    get:
      description: Operation for fetching ValidIngredientGroup
      operationId: SearchForValidIngredientGroups
      parameters:
      - description: the search query parameter
        in: query
        name: q
        required: true
        schema:
          type: string
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredientGroup'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredientGroup'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid ingredient groups
  /api/v1/valid_ingredient_measurement_units:
    get:
      description: Operation for fetching ValidIngredientMeasurementUnit
      operationId: GetValidIngredientMeasurementUnits
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredientMeasurementUnit'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredientMeasurementUnit'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid ingredient measurement units
    post:
      description: Operation for creating ValidIngredientMeasurementUnit
      operationId: CreateValidIngredientMeasurementUnit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidIngredientMeasurementUnitCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidIngredientMeasurementUnitCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientMeasurementUnit'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientMeasurementUnit'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid ingredient measurement units
  /api/v1/valid_ingredient_measurement_units/{validIngredientMeasurementUnitID}:
    delete:
      description: Operation for archiving ValidIngredientMeasurementUnit
      operationId: ArchiveValidIngredientMeasurementUnit
      parameters:
      - in: path
        name: validIngredientMeasurementUnitID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientMeasurementUnit'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientMeasurementUnit'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid ingredient measurement units
    get:
      description: Operation for fetching ValidIngredientMeasurementUnit
      operationId: GetValidIngredientMeasurementUnit
      parameters:
      - in: path
        name: validIngredientMeasurementUnitID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientMeasurementUnit'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientMeasurementUnit'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid ingredient measurement units
    put:
      description: Operation for updating ValidIngredientMeasurementUnit
      operationId: UpdateValidIngredientMeasurementUnit
      parameters:
      - in: path
        name: validIngredientMeasurementUnitID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidIngredientMeasurementUnitUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidIngredientMeasurementUnitUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientMeasurementUnit'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientMeasurementUnit'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid ingredient measurement units
  /api/v1/valid_ingredient_measurement_units/by_ingredient/{validIngredientID}:
    get:
      description: Operation for fetching ValidIngredientMeasurementUnit
      operationId: GetValidIngredientMeasurementUnitsByIngredient
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: validIngredientID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredientMeasurementUnit'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredientMeasurementUnit'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid ingredient measurement units
  /api/v1/valid_ingredient_measurement_units/by_measurement_unit/{validMeasurementUnitID}:
    get:
      description: Operation for fetching ValidIngredientMeasurementUnit
      operationId: GetValidIngredientMeasurementUnitsByMeasurementUnit
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: validMeasurementUnitID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredientMeasurementUnit'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredientMeasurementUnit'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid ingredient measurement units
  /api/v1/valid_ingredient_preparations:
    get:
      description: Operation for fetching ValidIngredientPreparation
      operationId: GetValidIngredientPreparations
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredientPreparation'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredientPreparation'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid ingredient preparations
    post:
      description: Operation for creating ValidIngredientPreparation
      operationId: CreateValidIngredientPreparation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidIngredientPreparationCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidIngredientPreparationCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientPreparation'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientPreparation'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid ingredient preparations
  /api/v1/valid_ingredient_preparations/{validIngredientPreparationID}:
    delete:
      description: Operation for archiving ValidIngredientPreparation
      operationId: ArchiveValidIngredientPreparation
      parameters:
      - in: path
        name: validIngredientPreparationID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientPreparation'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientPreparation'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid ingredient preparations
    get:
      description: Operation for fetching ValidIngredientPreparation
      operationId: GetValidIngredientPreparation
      parameters:
      - in: path
        name: validIngredientPreparationID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientPreparation'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientPreparation'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid ingredient preparations
    put:
      description: Operation for updating ValidIngredientPreparation
      operationId: UpdateValidIngredientPreparation
      parameters:
      - in: path
        name: validIngredientPreparationID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidIngredientPreparationUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidIngredientPreparationUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientPreparation'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientPreparation'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid ingredient preparations
  /api/v1/valid_ingredient_preparations/by_ingredient/{validIngredientID}:
    get:
      description: Operation for fetching ValidIngredientPreparation
      operationId: GetValidIngredientPreparationsByIngredient
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: validIngredientID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredientPreparation'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredientPreparation'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid ingredient preparations
  /api/v1/valid_ingredient_preparations/by_preparation/{validPreparationID}:
    get:
      description: Operation for fetching ValidIngredientPreparation
      operationId: GetValidIngredientPreparationsByPreparation
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: validPreparationID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredientPreparation'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredientPreparation'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid ingredient preparations
  /api/v1/valid_ingredient_state_ingredients:
    get:
      description: Operation for fetching ValidIngredientStateIngredient
      operationId: GetValidIngredientStateIngredients
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredientStateIngredient'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredientStateIngredient'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid ingredient state ingredients
    post:
      description: Operation for creating ValidIngredientStateIngredient
      operationId: CreateValidIngredientStateIngredient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidIngredientStateIngredientCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidIngredientStateIngredientCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientStateIngredient'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientStateIngredient'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid ingredient state ingredients
  /api/v1/valid_ingredient_state_ingredients/{validIngredientStateIngredientID}:
    delete:
      description: Operation for archiving ValidIngredientStateIngredient
      operationId: ArchiveValidIngredientStateIngredient
      parameters:
      - in: path
        name: validIngredientStateIngredientID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientStateIngredient'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientStateIngredient'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid ingredient state ingredients
    get:
      description: Operation for fetching ValidIngredientStateIngredient
      operationId: GetValidIngredientStateIngredient
      parameters:
      - in: path
        name: validIngredientStateIngredientID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientStateIngredient'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientStateIngredient'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid ingredient state ingredients
    put:
      description: Operation for updating ValidIngredientStateIngredient
      operationId: UpdateValidIngredientStateIngredient
      parameters:
      - in: path
        name: validIngredientStateIngredientID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidIngredientStateIngredientUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidIngredientStateIngredientUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientStateIngredient'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientStateIngredient'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid ingredient state ingredients
  /api/v1/valid_ingredient_state_ingredients/by_ingredient/{validIngredientID}:
    get:
      description: Operation for fetching ValidIngredientStateIngredient
      operationId: GetValidIngredientStateIngredientsByIngredient
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: validIngredientID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredientStateIngredient'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredientStateIngredient'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid ingredient state ingredients
  /api/v1/valid_ingredient_state_ingredients/by_ingredient_state/{validIngredientStateID}:
    get:
      description: Operation for fetching ValidIngredientStateIngredient
      operationId: GetValidIngredientStateIngredientsByIngredientState
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: validIngredientStateID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredientStateIngredient'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredientStateIngredient'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid ingredient state ingredients
  /api/v1/valid_ingredient_states:
    get:
      description: Operation for fetching ValidIngredientState
      operationId: GetValidIngredientStates
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredientState'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredientState'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid ingredient states
    post:
      description: Operation for creating ValidIngredientState
      operationId: CreateValidIngredientState
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidIngredientStateCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidIngredientStateCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientState'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientState'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid ingredient states
  /api/v1/valid_ingredient_states/{validIngredientStateID}:
    delete:
      description: Operation for archiving ValidIngredientState
      operationId: ArchiveValidIngredientState
      parameters:
      - in: path
        name: validIngredientStateID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientState'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientState'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid ingredient states
    get:
      description: Operation for fetching ValidIngredientState
      operationId: GetValidIngredientState
      parameters:
      - in: path
        name: validIngredientStateID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientState'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientState'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid ingredient states
    put:
      description: Operation for updating ValidIngredientState
      operationId: UpdateValidIngredientState
      parameters:
      - in: path
        name: validIngredientStateID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidIngredientStateUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidIngredientStateUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientState'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredientState'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid ingredient states
  /api/v1/valid_ingredient_states/search:
    get:
      description: Operation for fetching ValidIngredientState
      operationId: SearchForValidIngredientStates
      parameters:
      - description: the search query parameter
        in: query
        name: q
        required: true
        schema:
          type: string
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredientState'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredientState'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid ingredient states
  /api/v1/valid_ingredients:
    get:
      description: Operation for fetching ValidIngredient
      operationId: GetValidIngredients
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredient'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredient'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid ingredients
    post:
      description: Operation for creating ValidIngredient
      operationId: CreateValidIngredient
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidIngredientCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidIngredientCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredient'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredient'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid ingredients
  /api/v1/valid_ingredients/{validIngredientID}:
    delete:
      description: Operation for archiving ValidIngredient
      operationId: ArchiveValidIngredient
      parameters:
      - in: path
        name: validIngredientID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredient'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredient'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid ingredients
    get:
      description: Operation for fetching ValidIngredient
      operationId: GetValidIngredient
      parameters:
      - in: path
        name: validIngredientID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredient'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredient'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid ingredients
    put:
      description: Operation for updating ValidIngredient
      operationId: UpdateValidIngredient
      parameters:
      - in: path
        name: validIngredientID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidIngredientUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidIngredientUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredient'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredient'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid ingredients
  /api/v1/valid_ingredients/by_preparation/{validPreparationID}:
    get:
      description: Operation for fetching ValidIngredient
      operationId: GetValidIngredientsByPreparation
      parameters:
      - description: the search query parameter
        in: query
        name: q
        required: true
        schema:
          type: string
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: validPreparationID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredient'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredient'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid ingredients
  /api/v1/valid_ingredients/random:
    get:
      description: Operation for fetching ValidIngredient
      operationId: GetRandomValidIngredient
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredient'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidIngredient'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid ingredients
  /api/v1/valid_ingredients/search:
    get:
      description: Operation for fetching ValidIngredient
      operationId: SearchForValidIngredients
      parameters:
      - description: the search query parameter
        in: query
        name: q
        required: true
        schema:
          type: string
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredient'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidIngredient'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid ingredients
  /api/v1/valid_instruments:
    get:
      description: Operation for fetching ValidInstrument
      operationId: GetValidInstruments
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidInstrument'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidInstrument'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid instruments
    post:
      description: Operation for creating ValidInstrument
      operationId: CreateValidInstrument
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidInstrumentCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidInstrumentCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidInstrument'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidInstrument'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid instruments
  /api/v1/valid_instruments/{validInstrumentID}:
    delete:
      description: Operation for archiving ValidInstrument
      operationId: ArchiveValidInstrument
      parameters:
      - in: path
        name: validInstrumentID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidInstrument'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidInstrument'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid instruments
    get:
      description: Operation for fetching ValidInstrument
      operationId: GetValidInstrument
      parameters:
      - in: path
        name: validInstrumentID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidInstrument'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidInstrument'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid instruments
    put:
      description: Operation for updating ValidInstrument
      operationId: UpdateValidInstrument
      parameters:
      - in: path
        name: validInstrumentID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidInstrumentUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidInstrumentUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidInstrument'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidInstrument'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid instruments
  /api/v1/valid_instruments/random:
    get:
      description: Operation for fetching ValidInstrument
      operationId: GetRandomValidInstrument
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidInstrument'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidInstrument'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid instruments
  /api/v1/valid_instruments/search:
    get:
      description: Operation for fetching ValidInstrument
      operationId: SearchForValidInstruments
      parameters:
      - description: the search query parameter
        in: query
        name: q
        required: true
        schema:
          type: string
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidInstrument'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidInstrument'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid instruments
  /api/v1/valid_measurement_conversions:
    post:
      description: Operation for creating ValidMeasurementUnitConversion
      operationId: CreateValidMeasurementUnitConversion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidMeasurementUnitConversionCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidMeasurementUnitConversionCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidMeasurementUnitConversion'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidMeasurementUnitConversion'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid measurement conversions
  /api/v1/valid_measurement_conversions/{validMeasurementUnitConversionID}:
    delete:
      description: Operation for archiving ValidMeasurementUnitConversion
      operationId: ArchiveValidMeasurementUnitConversion
      parameters:
      - in: path
        name: validMeasurementUnitConversionID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidMeasurementUnitConversion'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidMeasurementUnitConversion'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid measurement conversions
    get:
      description: Operation for fetching ValidMeasurementUnitConversion
      operationId: GetValidMeasurementUnitConversion
      parameters:
      - in: path
        name: validMeasurementUnitConversionID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidMeasurementUnitConversion'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidMeasurementUnitConversion'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid measurement conversions
    put:
      description: Operation for updating ValidMeasurementUnitConversion
      operationId: UpdateValidMeasurementUnitConversion
      parameters:
      - in: path
        name: validMeasurementUnitConversionID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidMeasurementUnitConversionUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidMeasurementUnitConversionUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidMeasurementUnitConversion'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidMeasurementUnitConversion'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid measurement conversions
  /api/v1/valid_measurement_conversions/from_unit/{validMeasurementUnitID}:
    get:
      description: Operation for fetching ValidMeasurementUnitConversion
      operationId: GetValidMeasurementUnitConversionsFromUnit
      parameters:
      - in: path
        name: validMeasurementUnitID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidMeasurementUnitConversion'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidMeasurementUnitConversion'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid measurement conversions
  /api/v1/valid_measurement_conversions/to_unit/{validMeasurementUnitID}:
    get:
      description: Operation for fetching ValidMeasurementUnitConversion
      operationId: ValidMeasurementUnitConversionsToUnit
      parameters:
      - in: path
        name: validMeasurementUnitID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidMeasurementUnitConversion'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidMeasurementUnitConversion'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid measurement conversions
  /api/v1/valid_measurement_units:
    get:
      description: Operation for fetching ValidMeasurementUnit
      operationId: GetValidMeasurementUnits
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidMeasurementUnit'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidMeasurementUnit'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid measurement units
    post:
      description: Operation for creating ValidMeasurementUnit
      operationId: CreateValidMeasurementUnit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidMeasurementUnitCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidMeasurementUnitCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidMeasurementUnit'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidMeasurementUnit'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid measurement units
  /api/v1/valid_measurement_units/{validMeasurementUnitID}:
    delete:
      description: Operation for archiving ValidMeasurementUnit
      operationId: ArchiveValidMeasurementUnit
      parameters:
      - in: path
        name: validMeasurementUnitID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidMeasurementUnit'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidMeasurementUnit'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid measurement units
    get:
      description: Operation for fetching ValidMeasurementUnit
      operationId: GetValidMeasurementUnit
      parameters:
      - in: path
        name: validMeasurementUnitID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidMeasurementUnit'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidMeasurementUnit'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid measurement units
    put:
      description: Operation for updating ValidMeasurementUnit
      operationId: UpdateValidMeasurementUnit
      parameters:
      - in: path
        name: validMeasurementUnitID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidMeasurementUnitUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidMeasurementUnitUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidMeasurementUnit'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidMeasurementUnit'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid measurement units
  /api/v1/valid_measurement_units/by_ingredient/{validIngredientID}:
    get:
      description: Operation for fetching ValidMeasurementUnit
      operationId: SearchValidMeasurementUnitsByIngredient
      parameters:
      - description: the search query parameter
        in: query
        name: q
        required: true
        schema:
          type: string
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: validIngredientID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidMeasurementUnit'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidMeasurementUnit'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid measurement units
  /api/v1/valid_measurement_units/search:
    get:
      description: Operation for fetching ValidMeasurementUnit
      operationId: SearchForValidMeasurementUnits
      parameters:
      - description: the search query parameter
        in: query
        name: q
        required: true
        schema:
          type: string
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidMeasurementUnit'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidMeasurementUnit'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid measurement units
  /api/v1/valid_preparation_instruments:
    get:
      description: Operation for fetching ValidPreparationInstrument
      operationId: GetValidPreparationInstruments
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidPreparationInstrument'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidPreparationInstrument'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid preparation instruments
    post:
      description: Operation for creating ValidPreparationInstrument
      operationId: CreateValidPreparationInstrument
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidPreparationInstrumentCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidPreparationInstrumentCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidPreparationInstrument'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidPreparationInstrument'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid preparation instruments
  /api/v1/valid_preparation_instruments/{validPreparationVesselID}:
    delete:
      description: Operation for archiving ValidPreparationInstrument
      operationId: ArchiveValidPreparationInstrument
      parameters:
      - in: path
        name: validPreparationVesselID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidPreparationInstrument'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidPreparationInstrument'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid preparation instruments
    get:
      description: Operation for fetching ValidPreparationInstrument
      operationId: GetValidPreparationInstrument
      parameters:
      - in: path
        name: validPreparationVesselID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidPreparationInstrument'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidPreparationInstrument'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid preparation instruments
    put:
      description: Operation for updating ValidPreparationInstrument
      operationId: UpdateValidPreparationInstrument
      parameters:
      - in: path
        name: validPreparationVesselID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidPreparationInstrumentUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidPreparationInstrumentUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidPreparationInstrument'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidPreparationInstrument'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid preparation instruments
  /api/v1/valid_preparation_instruments/by_instrument/{validInstrumentID}:
    get:
      description: Operation for fetching ValidPreparationInstrument
      operationId: GetValidPreparationInstrumentsByInstrument
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: validInstrumentID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidPreparationInstrument'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidPreparationInstrument'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid preparation instruments
  /api/v1/valid_preparation_instruments/by_preparation/{validPreparationID}:
    get:
      description: Operation for fetching ValidPreparationInstrument
      operationId: GetValidPreparationInstrumentsByPreparation
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: validPreparationID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidPreparationInstrument'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidPreparationInstrument'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid preparation instruments
  /api/v1/valid_preparation_vessels:
    get:
      description: Operation for fetching ValidPreparationVessel
      operationId: GetValidPreparationVessels
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidPreparationVessel'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidPreparationVessel'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid preparation vessels
    post:
      description: Operation for creating ValidPreparationVessel
      operationId: CreateValidPreparationVessel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidPreparationVesselCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidPreparationVesselCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidPreparationVessel'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidPreparationVessel'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid preparation vessels
  /api/v1/valid_preparation_vessels/{validPreparationVesselID}:
    delete:
      description: Operation for archiving ValidPreparationVessel
      operationId: ArchiveValidPreparationVessel
      parameters:
      - in: path
        name: validPreparationVesselID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidPreparationVessel'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidPreparationVessel'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid preparation vessels
    get:
      description: Operation for fetching ValidPreparationVessel
      operationId: GetValidPreparationVessel
      parameters:
      - in: path
        name: validPreparationVesselID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidPreparationVessel'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidPreparationVessel'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid preparation vessels
    put:
      description: Operation for updating ValidPreparationVessel
      operationId: UpdateValidPreparationVessel
      parameters:
      - in: path
        name: validPreparationVesselID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidPreparationVesselUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidPreparationVesselUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidPreparationVessel'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidPreparationVessel'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid preparation vessels
  /api/v1/valid_preparation_vessels/by_preparation/{validPreparationID}:
    get:
      description: Operation for fetching ValidPreparationVessel
      operationId: GetValidPreparationVesselsByPreparation
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: validPreparationID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidPreparationVessel'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidPreparationVessel'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid preparation vessels
  /api/v1/valid_preparation_vessels/by_vessel/{ValidVesselID}:
    get:
      description: Operation for fetching ValidPreparationVessel
      operationId: GetValidPreparationVesselsByVessel
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      - in: path
        name: ValidVesselID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidPreparationVessel'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidPreparationVessel'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid preparation vessels
  /api/v1/valid_preparations:
    get:
      description: Operation for fetching ValidPreparation
      operationId: GetValidPreparations
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidPreparation'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidPreparation'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid preparations
    post:
      description: Operation for creating ValidPreparation
      operationId: CreateValidPreparation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidPreparationCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidPreparationCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidPreparation'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidPreparation'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid preparations
  /api/v1/valid_preparations/{validPreparationID}:
    delete:
      description: Operation for archiving ValidPreparation
      operationId: ArchiveValidPreparation
      parameters:
      - in: path
        name: validPreparationID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidPreparation'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidPreparation'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid preparations
    get:
      description: Operation for fetching ValidPreparation
      operationId: GetValidPreparation
      parameters:
      - in: path
        name: validPreparationID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidPreparation'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidPreparation'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid preparations
    put:
      description: Operation for updating ValidPreparation
      operationId: UpdateValidPreparation
      parameters:
      - in: path
        name: validPreparationID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidPreparationUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidPreparationUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidPreparation'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidPreparation'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid preparations
  /api/v1/valid_preparations/random:
    get:
      description: Operation for fetching ValidPreparation
      operationId: GetRandomValidPreparation
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidPreparation'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidPreparation'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid preparations
  /api/v1/valid_preparations/search:
    get:
      description: Operation for fetching ValidPreparation
      operationId: SearchForValidPreparations
      parameters:
      - description: the search query parameter
        in: query
        name: q
        required: true
        schema:
          type: string
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidPreparation'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidPreparation'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid preparations
  /api/v1/valid_vessels:
    get:
      description: Operation for fetching ValidVessel
      operationId: GetValidVessels
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidVessel'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidVessel'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid vessels
    post:
      description: Operation for creating ValidVessel
      operationId: CreateValidVessel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidVesselCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidVesselCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidVessel'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidVessel'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid vessels
  /api/v1/valid_vessels/{validVesselID}:
    delete:
      description: Operation for archiving ValidVessel
      operationId: ArchiveValidVessel
      parameters:
      - in: path
        name: validVesselID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidVessel'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidVessel'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid vessels
    get:
      description: Operation for fetching ValidVessel
      operationId: GetValidVessel
      parameters:
      - in: path
        name: validVesselID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidVessel'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidVessel'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid vessels
    put:
      description: Operation for updating ValidVessel
      operationId: UpdateValidVessel
      parameters:
      - in: path
        name: validVesselID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidVesselUpdateRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidVesselUpdateRequestInput'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidVessel'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidVessel'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - service_admin
      tags:
      - valid vessels
  /api/v1/valid_vessels/random:
    get:
      description: Operation for fetching ValidVessel
      operationId: GetRandomValidVessel
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidVessel'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/ValidVessel'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid vessels
  /api/v1/valid_vessels/search:
    get:
      description: Operation for fetching ValidVessel
      operationId: SearchForValidVessels
      parameters:
      - description: the search query parameter
        in: query
        name: q
        required: true
        schema:
          type: string
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidVessel'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/ValidVessel'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - valid vessels
  /api/v1/webhooks:
    get:
      description: Operation for fetching Webhook
      operationId: GetWebhooks
      parameters:
      - description: How many results should appear in output, max is 250.
        in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: What page of results should appear in output.
        in: query
        name: page
        required: true
        schema:
          type: integer
      - description: The latest CreatedAt date that should appear in output.
        in: query
        name: createdBefore
        required: true
        schema:
          type: string
      - description: The earliest CreatedAt date that should appear in output.
        in: query
        name: createdAfter
        required: true
        schema:
          type: string
      - description: The latest UpdatedAt date that should appear in output.
        in: query
        name: updatedBefore
        required: true
        schema:
          type: string
      - description: The earliest UpdatedAt date that should appear in output.
        in: query
        name: updatedAfter
        required: true
        schema:
          type: string
      - description: Whether or not to include archived results in output, limited
          to service admins.
        in: query
        name: includeArchived
        required: true
        schema:
          enum:
          - "true"
          - "false"
          type: string
      - description: The direction in which results should be sorted.
        in: query
        name: sortBy
        required: true
        schema:
          enum:
          - asc
          - desc
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/Webhook'
                      type: array
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      items:
                        $ref: '#/components/schemas/Webhook'
                      type: array
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - webhooks
    post:
      description: Operation for creating Webhook
      operationId: CreateWebhook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/WebhookCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Webhook'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Webhook'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - webhooks
  /api/v1/webhooks/{webhookID}:
    delete:
      description: Operation for archiving Webhook
      operationId: ArchiveWebhook
      parameters:
      - in: path
        name: webhookID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Webhook'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Webhook'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - webhooks
    get:
      description: Operation for fetching Webhook
      operationId: GetWebhook
      parameters:
      - in: path
        name: webhookID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Webhook'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/Webhook'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - webhooks
  /api/v1/webhooks/{webhookID}/trigger_events:
    post:
      description: Operation for creating WebhookTriggerEvent
      operationId: CreateWebhookTriggerEvent
      parameters:
      - in: path
        name: webhookID
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookTriggerEventCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/WebhookTriggerEventCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/WebhookTriggerEvent'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/WebhookTriggerEvent'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - webhooks
  /api/v1/webhooks/{webhookID}/trigger_events/{webhookTriggerEventID}:
    delete:
      description: Operation for archiving WebhookTriggerEvent
      operationId: ArchiveWebhookTriggerEvent
      parameters:
      - in: path
        name: webhookID
        required: true
        schema:
          type: string
      - in: path
        name: webhookTriggerEventID
        required: true
        schema:
          type: string
      responses:
        "202":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/WebhookTriggerEvent'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/WebhookTriggerEvent'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - webhooks
      - webhook trigger events
  /api/v1/workers/finalize_meal_plans:
    post:
      description: Operation for creating FinalizeMealPlansRequest
      operationId: RunFinalizeMealPlanWorker
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinalizeMealPlansRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/FinalizeMealPlansRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/FinalizeMealPlansRequest'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/FinalizeMealPlansRequest'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - workers
  /api/v1/workers/meal_plan_grocery_list_init:
    post:
      description: Operation for creating
      operationId: RunMealPlanGroceryListInitializerWorker
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - workers
  /api/v1/workers/meal_plan_tasks:
    post:
      description: Operation for creating
      operationId: RunMealPlanTaskCreatorWorker
      security:
      - cookieAuth: []
      - oauth2:
        - household_admin
      tags:
      - workers
  /auth/status:
    get:
      description: Operation for fetching UserStatusResponse
      operationId: GetAuthStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserStatusResponse'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserStatusResponse'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      - oauth2:
        - household_member
      tags:
      - auth
  /oauth2/authorize:
    get:
      description: Operation for fetching
      operationId: GET_oauth2_authorize
      security:
      - cookieAuth: []
      tags:
      - oauth2
  /oauth2/token:
    post:
      description: Operation for creating
      operationId: POST_oauth2_token
      security:
      - cookieAuth: []
      tags:
      - oauth2
  /users:
    post:
      description: Creates a new user
      operationId: CreateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserRegistrationInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserCreationResponse'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserCreationResponse'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      tags:
      - users
  /users/email_address/verify:
    post:
      description: Operation for creating User
      operationId: VerifyEmailAddress
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailAddressVerificationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/EmailAddressVerificationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/User'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/User'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      tags:
      - users
      - email address
  /users/login:
    post:
      description: Operation for creating UserStatusResponse
      operationId: Login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserLoginInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserStatusResponse'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserStatusResponse'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      tags:
      - users
  /users/login/admin:
    post:
      description: Operation for creating UserStatusResponse
      operationId: AdminLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserLoginInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserStatusResponse'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserStatusResponse'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      tags:
      - users
  /users/login/jwt:
    post:
      description: Operation for creating JWTResponse
      operationId: LoginForJWT
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserLoginInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/JWTResponse'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/JWTResponse'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      tags:
      - users
  /users/login/jwt/admin:
    post:
      description: Operation for creating JWTResponse
      operationId: AdminLoginForJWT
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserLoginInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/JWTResponse'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/JWTResponse'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      tags:
      - users
  /users/logout:
    post:
      description: Operation for creating UserStatusResponse
      operationId: Logout
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserStatusResponse'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/UserStatusResponse'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      security:
      - cookieAuth: []
      tags:
      - users
  /users/password/reset:
    post:
      description: Operation for creating PasswordResetToken
      operationId: RequestPasswordResetToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetTokenCreationRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/PasswordResetTokenCreationRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/PasswordResetToken'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/PasswordResetToken'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      tags:
      - users
      - password
  /users/password/reset/redeem:
    post:
      description: Operation for redeeming a password reset token
      operationId: RedeemPasswordResetToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetTokenRedemptionRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/PasswordResetTokenRedemptionRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/User'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/User'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      tags:
      - users
      - password
  /users/totp_secret/verify:
    post:
      description: Operation for creating User
      operationId: VerifyTOTPSecret
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TOTPSecretVerificationInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/TOTPSecretVerificationInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/User'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/User'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      tags:
      - users
      - totp secret
  /users/username/reminder:
    post:
      description: Operation for creating User
      operationId: RequestUsernameReminder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameReminderRequestInput'
          application/xml:
            schema:
              $ref: '#/components/schemas/UsernameReminderRequestInput'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/User'
                      type: object
                  type: object
            application/xml:
              schema:
                allOf:
                - $ref: '#/components/schemas/APIResponse'
                - properties:
                    data:
                      $ref: '#/components/schemas/User'
                      type: object
                  type: object
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
            application/xml:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
          description: ""
      tags:
      - users
components:
  schemas:
    APIError:
      properties:
        code:
          type: string
        message:
          type: string
      type: object
    APIResponse:
      properties:
        details:
          $ref: '#/components/schemas/ResponseDetails'
        error:
          $ref: '#/components/schemas/APIError'
        pagination:
          $ref: '#/components/schemas/Pagination'
      type: object
    APIResponseWithError:
      properties:
        details:
          $ref: '#/components/schemas/ResponseDetails'
        error:
          $ref: '#/components/schemas/APIError'
      type: object
    AuditLogEntry:
      properties:
        belongsToHousehold:
          type: string
        belongsToUser:
          type: string
        changes:
          $ref: '#/components/schemas/ChangeLog'
        createdAt:
          format: date-time
          type: string
        eventType:
          type: string
        id:
          type: string
        relevantID:
          type: string
        resourceType:
          type: string
      type: object
    AvatarUpdateInput:
      properties:
        base64EncodedData:
          type: string
      type: object
    ChangeActiveHouseholdInput:
      properties:
        householdID:
          type: string
      type: object
    ChangeLog:
      properties:
        newValue:
          type: string
        oldValue:
          type: string
      type: object
    EmailAddressVerificationRequestInput:
      properties:
        emailVerificationToken:
          type: string
      type: object
    FinalizeMealPlansRequest:
      properties:
        returnCount:
          type: boolean
      type: object
    FinalizeMealPlansResponse:
      properties:
        count:
          format: int32
          type: integer
      type: object
    Household:
      properties:
        addressLine1:
          type: string
        addressLine2:
          type: string
        archivedAt:
          format: date-time
          type: string
        belongsToUser:
          type: string
        billingStatus:
          type: string
        city:
          type: string
        contactPhone:
          type: string
        country:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        latitude:
          format: double
          type: number
        longitude:
          format: double
          type: number
        members:
          items:
            $ref: '#/components/schemas/HouseholdUserMembershipWithUser'
          type: array
        name:
          type: string
        paymentProcessorCustomer:
          type: string
        state:
          type: string
        subscriptionPlanID:
          type: string
        zipCode:
          type: string
      type: object
    HouseholdCreationRequestInput:
      properties:
        addressLine1:
          type: string
        addressLine2:
          type: string
        city:
          type: string
        contactPhone:
          type: string
        country:
          type: string
        latitude:
          format: double
          type: number
        longitude:
          format: double
          type: number
        name:
          type: string
        state:
          type: string
        zipCode:
          type: string
      type: object
    HouseholdInstrumentOwnership:
      properties:
        archivedAt:
          format: date-time
          type: string
        belongsToHousehold:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        instrument:
          $ref: '#/components/schemas/ValidInstrument'
        lastUpdatedAt:
          format: date-time
          type: string
        notes:
          type: string
        quantity:
          format: int64
          type: integer
      type: object
    HouseholdInstrumentOwnershipCreationRequestInput:
      properties:
        belongsToHousehold:
          type: string
        notes:
          type: string
        quantity:
          format: int64
          type: integer
        validInstrumentID:
          type: string
      type: object
    HouseholdInstrumentOwnershipUpdateRequestInput:
      properties:
        notes:
          type: string
        quantity:
          format: int64
          type: integer
        validInstrumentID:
          type: string
      type: object
    HouseholdInvitation:
      properties:
        archivedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        destinationHousehold:
          $ref: '#/components/schemas/Household'
        expiresAt:
          format: date-time
          type: string
        fromUser:
          $ref: '#/components/schemas/User'
        id:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        note:
          type: string
        status:
          type: string
        statusNote:
          type: string
        toEmail:
          type: string
        toName:
          type: string
        toUser:
          type: string
        token:
          type: string
      type: object
    HouseholdInvitationCreationRequestInput:
      properties:
        expiresAt:
          format: date-time
          type: string
        note:
          type: string
        toEmail:
          type: string
        toName:
          type: string
      type: object
    HouseholdInvitationUpdateRequestInput:
      properties:
        note:
          type: string
        token:
          type: string
      type: object
    HouseholdOwnershipTransferInput:
      properties:
        currentOwner:
          type: string
        newOwner:
          type: string
        reason:
          type: string
      type: object
    HouseholdUpdateRequestInput:
      properties:
        addressLine1:
          type: string
        addressLine2:
          type: string
        city:
          type: string
        contactPhone:
          type: string
        country:
          type: string
        latitude:
          format: double
          type: number
        longitude:
          format: double
          type: number
        name:
          type: string
        state:
          type: string
        zipCode:
          type: string
      type: object
    HouseholdUserMembership:
      properties:
        archivedAt:
          format: date-time
          type: string
        belongsToHousehold:
          type: string
        belongsToUser:
          type: string
        createdAt:
          format: date-time
          type: string
        defaultHousehold:
          type: boolean
        householdRole:
          type: string
        id:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
      type: object
    HouseholdUserMembershipWithUser:
      properties:
        archivedAt:
          format: date-time
          type: string
        belongsToHousehold:
          type: string
        belongsToUser:
          $ref: '#/components/schemas/User'
        createdAt:
          format: date-time
          type: string
        defaultHousehold:
          type: boolean
        householdRole:
          type: string
        id:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
      type: object
    JWTResponse:
      properties:
        token:
          type: string
      type: object
    Meal:
      properties:
        archivedAt:
          format: date-time
          type: string
        components:
          items:
            $ref: '#/components/schemas/MealComponent'
          type: array
        createdAt:
          format: date-time
          type: string
        createdByUser:
          type: string
        description:
          type: string
        eligibleForMealPlans:
          type: boolean
        id:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        maximumEstimatedPortions:
          format: double
          type: number
        minimumEstimatedPortions:
          format: double
          type: number
        name:
          type: string
      type: object
    MealComponent:
      properties:
        componentType:
          type: string
        recipe:
          $ref: '#/components/schemas/Recipe'
        recipeScale:
          format: double
          type: number
      type: object
    MealComponentCreationRequestInput:
      properties:
        componentType:
          type: string
        recipeID:
          type: string
        recipeScale:
          format: double
          type: number
      type: object
    MealCreationRequestInput:
      properties:
        components:
          items:
            $ref: '#/components/schemas/MealComponentCreationRequestInput'
          type: array
        description:
          type: string
        eligibleForMealPlans:
          type: boolean
        maximumEstimatedPortions:
          format: double
          type: number
        minimumEstimatedPortions:
          format: double
          type: number
        name:
          type: string
      type: object
    MealPlan:
      properties:
        archivedAt:
          format: date-time
          type: string
        belongsToHousehold:
          type: string
        createdAt:
          format: date-time
          type: string
        createdBy:
          type: string
        electionMethod:
          type: string
        events:
          items:
            $ref: '#/components/schemas/MealPlanEvent'
          type: array
        groceryListInitialized:
          type: boolean
        id:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        notes:
          type: string
        status:
          type: string
        tasksCreated:
          type: boolean
        votingDeadline:
          format: date-time
          type: string
      type: object
    MealPlanCreationRequestInput:
      properties:
        electionMethod:
          type: string
        events:
          items:
            $ref: '#/components/schemas/MealPlanEventCreationRequestInput'
          type: array
        notes:
          type: string
        votingDeadline:
          format: date-time
          type: string
      type: object
    MealPlanEvent:
      properties:
        archivedAt:
          format: date-time
          type: string
        belongsToMealPlan:
          type: string
        createdAt:
          format: date-time
          type: string
        endsAt:
          format: date-time
          type: string
        id:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        mealName:
          type: string
        notes:
          type: string
        options:
          items:
            $ref: '#/components/schemas/MealPlanOption'
          type: array
        startsAt:
          format: date-time
          type: string
      type: object
    MealPlanEventCreationRequestInput:
      properties:
        endsAt:
          format: date-time
          type: string
        mealName:
          type: string
        notes:
          type: string
        options:
          items:
            $ref: '#/components/schemas/MealPlanOptionCreationRequestInput'
          type: array
        startsAt:
          format: date-time
          type: string
      type: object
    MealPlanEventUpdateRequestInput:
      properties:
        endsAt:
          format: date-time
          type: string
        mealName:
          type: string
        notes:
          type: string
        startsAt:
          format: date-time
          type: string
      type: object
    MealPlanGroceryListItem:
      properties:
        archivedAt:
          format: date-time
          type: string
        belongsToMealPlan:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        ingredient:
          $ref: '#/components/schemas/ValidIngredient'
        lastUpdatedAt:
          format: date-time
          type: string
        maximumQuantityNeeded:
          format: double
          type: number
        measurementUnit:
          $ref: '#/components/schemas/ValidMeasurementUnit'
        minimumQuantityNeeded:
          format: double
          type: number
        purchasePrice:
          format: double
          type: number
        purchasedMeasurementUnit:
          $ref: '#/components/schemas/ValidMeasurementUnit'
        purchasedUPC:
          type: string
        quantityPurchased:
          format: double
          type: number
        status:
          type: string
        statusExplanation:
          type: string
      type: object
    MealPlanGroceryListItemCreationRequestInput:
      properties:
        belongsToMealPlan:
          type: string
        maximumQuantityNeeded:
          format: double
          type: number
        minimumQuantityNeeded:
          format: double
          type: number
        purchasePrice:
          format: double
          type: number
        purchasedMeasurementUnitID:
          type: string
        purchasedUPC:
          type: string
        quantityPurchased:
          format: double
          type: number
        status:
          type: string
        statusExplanation:
          type: string
        validIngredientID:
          type: string
        validMeasurementUnitID:
          type: string
      type: object
    MealPlanGroceryListItemUpdateRequestInput:
      properties:
        belongsToMealPlan:
          type: string
        maximumQuantityNeeded:
          format: double
          type: number
        minimumQuantityNeeded:
          format: double
          type: number
        purchasePrice:
          format: double
          type: number
        purchasedMeasurementUnitID:
          type: string
        purchasedUPC:
          type: string
        quantityPurchased:
          format: double
          type: number
        status:
          type: string
        statusExplanation:
          type: string
        validIngredientID:
          type: string
        validMeasurementUnitID:
          type: string
      type: object
    MealPlanOption:
      properties:
        archivedAt:
          format: date-time
          type: string
        assignedCook:
          type: string
        assignedDishwasher:
          type: string
        belongsToMealPlanEvent:
          type: string
        chosen:
          type: boolean
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        meal:
          $ref: '#/components/schemas/Meal'
        mealScale:
          format: double
          type: number
        notes:
          type: string
        tieBroken:
          type: boolean
        votes:
          items:
            $ref: '#/components/schemas/MealPlanOptionVote'
          type: array
      type: object
    MealPlanOptionCreationRequestInput:
      properties:
        assignedCook:
          type: string
        assignedDishwasher:
          type: string
        mealID:
          type: string
        mealScale:
          format: double
          type: number
        notes:
          type: string
      type: object
    MealPlanOptionUpdateRequestInput:
      properties:
        assignedCook:
          type: string
        assignedDishwasher:
          type: string
        mealID:
          type: string
        mealScale:
          format: double
          type: number
        notes:
          type: string
      type: object
    MealPlanOptionVote:
      properties:
        abstain:
          type: boolean
        archivedAt:
          format: date-time
          type: string
        belongsToMealPlanOption:
          type: string
        byUser:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        notes:
          type: string
        rank:
          format: int32
          type: integer
      type: object
    MealPlanOptionVoteCreationInput:
      properties:
        abstain:
          type: boolean
        belongsToMealPlanOption:
          type: string
        notes:
          type: string
        rank:
          format: int32
          type: integer
      type: object
    MealPlanOptionVoteCreationRequestInput:
      properties:
        votes:
          items:
            $ref: '#/components/schemas/MealPlanOptionVoteCreationInput'
          type: array
      type: object
    MealPlanOptionVoteUpdateRequestInput:
      properties:
        abstain:
          type: boolean
        belongsToMealPlanOption:
          type: string
        notes:
          type: string
        rank:
          format: int32
          type: integer
      type: object
    MealPlanTask:
      properties:
        assignedToUser:
          type: string
        completedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        creationExplanation:
          type: string
        id:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        mealPlanOption:
          $ref: '#/components/schemas/MealPlanOption'
        recipePrepTask:
          $ref: '#/components/schemas/RecipePrepTask'
        status:
          type: string
        statusExplanation:
          type: string
      type: object
    MealPlanTaskCreationRequestInput:
      properties:
        assignedToUser:
          type: string
        creationExplanation:
          type: string
        mealPlanOptionID:
          type: string
        recipePrepTaskID:
          type: string
        status:
          type: string
        statusExplanation:
          type: string
      type: object
    MealPlanTaskStatusChangeRequestInput:
      properties:
        assignedToUser:
          type: string
        status:
          type: string
        statusExplanation:
          type: string
      type: object
    MealPlanUpdateRequestInput:
      properties:
        notes:
          type: string
        votingDeadline:
          format: date-time
          type: string
      type: object
    ModifyUserPermissionsInput:
      properties:
        newRole:
          type: string
        reason:
          type: string
      type: object
    OAuth2Client:
      properties:
        archivedAt:
          format: date-time
          type: string
        clientID:
          type: string
        clientSecret:
          type: string
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        id:
          type: string
        name:
          type: string
      type: object
    OAuth2ClientCreationRequestInput:
      properties:
        description:
          type: string
        name:
          type: string
      type: object
    OAuth2ClientCreationResponse:
      properties:
        clientID:
          type: string
        clientSecret:
          type: string
        description:
          type: string
        id:
          type: string
        name:
          type: string
      type: object
    Pagination:
      properties:
        filteredCount:
          format: int64
          type: integer
        limit:
          format: int32
          type: integer
        page:
          format: int64
          type: integer
        totalCount:
          format: int64
          type: integer
      type: object
    PasswordResetToken:
      properties:
        archivedAt:
          format: date-time
          type: string
        belongsToUser:
          type: string
        createdAt:
          format: date-time
          type: string
        expiresAt:
          format: date-time
          type: string
        id:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        token:
          type: string
      type: object
    PasswordResetTokenCreationRequestInput:
      properties:
        emailAddress:
          format: email
          type: string
      type: object
    PasswordResetTokenRedemptionRequestInput:
      properties:
        newPassword:
          format: password
          type: string
        token:
          type: string
      type: object
    PasswordUpdateInput:
      properties:
        currentPassword:
          format: password
          type: string
        newPassword:
          format: password
          type: string
        totpToken:
          type: string
      type: object
    Recipe:
      properties:
        archivedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        createdByUser:
          type: string
        description:
          type: string
        eligibleForMeals:
          type: boolean
        id:
          type: string
        inspiredByRecipeID:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        maximumEstimatedPortions:
          format: double
          type: number
        media:
          items:
            $ref: '#/components/schemas/RecipeMedia'
          type: array
        minimumEstimatedPortions:
          format: double
          type: number
        name:
          type: string
        pluralPortionName:
          type: string
        portionName:
          type: string
        prepTasks:
          items:
            $ref: '#/components/schemas/RecipePrepTask'
          type: array
        sealOfApproval:
          type: boolean
        slug:
          type: string
        source:
          type: string
        steps:
          items:
            $ref: '#/components/schemas/RecipeStep'
          type: array
        supportingRecipes:
          items:
            $ref: '#/components/schemas/Recipe'
          type: array
        yieldsComponentType:
          type: string
      type: object
    RecipeCreationRequestInput:
      properties:
        alsoCreateMeal:
          type: boolean
        description:
          type: string
        eligibleForMeals:
          type: boolean
        inspiredByRecipeID:
          type: string
        maximumEstimatedPortions:
          format: double
          type: number
        minimumEstimatedPortions:
          format: double
          type: number
        name:
          type: string
        pluralPortionName:
          type: string
        portionName:
          type: string
        prepTasks:
          items:
            $ref: '#/components/schemas/RecipePrepTaskWithinRecipeCreationRequestInput'
          type: array
        sealOfApproval:
          type: boolean
        slug:
          type: string
        source:
          type: string
        steps:
          items:
            $ref: '#/components/schemas/RecipeStepCreationRequestInput'
          type: array
        yieldsComponentType:
          type: string
      type: object
    RecipeMedia:
      properties:
        archivedAt:
          format: date-time
          type: string
        belongsToRecipe:
          type: string
        belongsToRecipeStep:
          type: string
        createdAt:
          format: date-time
          type: string
        externalPath:
          type: string
        id:
          type: string
        index:
          format: int64
          type: integer
        internalPath:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        mimeType:
          type: string
      type: object
    RecipePrepTask:
      properties:
        archivedAt:
          format: date-time
          type: string
        belongsToRecipe:
          type: string
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        explicitStorageInstructions:
          type: string
        id:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        maximumStorageTemperatureInCelsius:
          format: double
          type: number
        maximumTimeBufferBeforeRecipeInSeconds:
          format: int64
          type: integer
        minimumStorageTemperatureInCelsius:
          format: double
          type: number
        minimumTimeBufferBeforeRecipeInSeconds:
          format: int64
          type: integer
        name:
          type: string
        notes:
          type: string
        optional:
          type: boolean
        recipeSteps:
          items:
            $ref: '#/components/schemas/RecipePrepTaskStep'
          type: array
        storageType:
          type: string
      type: object
    RecipePrepTaskCreationRequestInput:
      properties:
        belongsToRecipe:
          type: string
        description:
          type: string
        explicitStorageInstructions:
          type: string
        maximumStorageTemperatureInCelsius:
          format: double
          type: number
        maximumTimeBufferBeforeRecipeInSeconds:
          format: int64
          type: integer
        minimumStorageTemperatureInCelsius:
          format: double
          type: number
        minimumTimeBufferBeforeRecipeInSeconds:
          format: int64
          type: integer
        name:
          type: string
        notes:
          type: string
        optional:
          type: boolean
        recipeSteps:
          items:
            $ref: '#/components/schemas/RecipePrepTaskStepCreationRequestInput'
          type: array
        storageType:
          type: string
      type: object
    RecipePrepTaskStep:
      properties:
        belongsToRecipeStep:
          type: string
        belongsToRecipeStepTask:
          type: string
        id:
          type: string
        satisfiesRecipeStep:
          type: boolean
      type: object
    RecipePrepTaskStepCreationRequestInput:
      properties:
        belongsToRecipeStep:
          type: string
        satisfiesRecipeStep:
          type: boolean
      type: object
    RecipePrepTaskStepUpdateRequestInput:
      properties:
        belongsToRecipeStep:
          type: string
        belongsToRecipeStepTask:
          type: string
        satisfiesRecipeStep:
          type: boolean
      type: object
    RecipePrepTaskStepWithinRecipeCreationRequestInput:
      properties:
        belongsToRecipeStepIndex:
          format: int64
          type: integer
        satisfiesRecipeStep:
          type: boolean
      type: object
    RecipePrepTaskUpdateRequestInput:
      properties:
        belongsToRecipe:
          type: string
        description:
          type: string
        explicitStorageInstructions:
          type: string
        maximumStorageTemperatureInCelsius:
          format: double
          type: number
        maximumTimeBufferBeforeRecipeInSeconds:
          format: int64
          type: integer
        minimumStorageTemperatureInCelsius:
          format: double
          type: number
        minimumTimeBufferBeforeRecipeInSeconds:
          format: int64
          type: integer
        name:
          type: string
        notes:
          type: string
        optional:
          type: boolean
        recipeSteps:
          items:
            $ref: '#/components/schemas/RecipePrepTaskStepUpdateRequestInput'
          type: array
        storageType:
          type: string
      type: object
    RecipePrepTaskWithinRecipeCreationRequestInput:
      properties:
        belongsToRecipe:
          type: string
        description:
          type: string
        explicitStorageInstructions:
          type: string
        maximumStorageTemperatureInCelsius:
          format: double
          type: number
        maximumTimeBufferBeforeRecipeInSeconds:
          format: int64
          type: integer
        minimumStorageTemperatureInCelsius:
          format: double
          type: number
        minimumTimeBufferBeforeRecipeInSeconds:
          format: int64
          type: integer
        name:
          type: string
        notes:
          type: string
        optional:
          type: boolean
        recipeSteps:
          items:
            $ref: '#/components/schemas/RecipePrepTaskStepWithinRecipeCreationRequestInput'
          type: array
        storageType:
          type: string
      type: object
    RecipeRating:
      properties:
        archivedAt:
          format: date-time
          type: string
        byUser:
          type: string
        cleanup:
          format: double
          type: number
        createdAt:
          format: date-time
          type: string
        difficulty:
          format: double
          type: number
        id:
          type: string
        instructions:
          format: double
          type: number
        lastUpdatedAt:
          format: date-time
          type: string
        notes:
          type: string
        overall:
          format: double
          type: number
        recipeID:
          type: string
        taste:
          format: double
          type: number
      type: object
    RecipeRatingCreationRequestInput:
      properties:
        byUser:
          type: string
        cleanup:
          format: double
          type: number
        difficulty:
          format: double
          type: number
        instructions:
          format: double
          type: number
        notes:
          type: string
        overall:
          format: double
          type: number
        recipeID:
          type: string
        taste:
          format: double
          type: number
      type: object
    RecipeRatingUpdateRequestInput:
      properties:
        byUser:
          type: string
        cleanup:
          format: double
          type: number
        difficulty:
          format: double
          type: number
        instructions:
          format: double
          type: number
        notes:
          type: string
        overall:
          format: double
          type: number
        recipeID:
          type: string
        taste:
          format: double
          type: number
      type: object
    RecipeStep:
      properties:
        archivedAt:
          format: date-time
          type: string
        belongsToRecipe:
          type: string
        completionConditions:
          items:
            $ref: '#/components/schemas/RecipeStepCompletionCondition'
          type: array
        conditionExpression:
          type: string
        createdAt:
          format: date-time
          type: string
        explicitInstructions:
          type: string
        id:
          type: string
        index:
          format: int64
          type: integer
        ingredients:
          items:
            $ref: '#/components/schemas/RecipeStepIngredient'
          type: array
        instruments:
          items:
            $ref: '#/components/schemas/RecipeStepInstrument'
          type: array
        lastUpdatedAt:
          format: date-time
          type: string
        maximumEstimatedTimeInSeconds:
          format: int64
          type: integer
        maximumTemperatureInCelsius:
          format: double
          type: number
        media:
          items:
            $ref: '#/components/schemas/RecipeMedia'
          type: array
        minimumEstimatedTimeInSeconds:
          format: int64
          type: integer
        minimumTemperatureInCelsius:
          format: double
          type: number
        notes:
          type: string
        optional:
          type: boolean
        preparation:
          $ref: '#/components/schemas/ValidPreparation'
        products:
          items:
            $ref: '#/components/schemas/RecipeStepProduct'
          type: array
        startTimerAutomatically:
          type: boolean
        vessels:
          items:
            $ref: '#/components/schemas/RecipeStepVessel'
          type: array
      type: object
    RecipeStepCompletionCondition:
      properties:
        archivedAt:
          format: date-time
          type: string
        belongsToRecipeStep:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        ingredientState:
          $ref: '#/components/schemas/ValidIngredientState'
        ingredients:
          items:
            $ref: '#/components/schemas/RecipeStepCompletionConditionIngredient'
          type: array
        lastUpdatedAt:
          format: date-time
          type: string
        notes:
          type: string
        optional:
          type: boolean
      type: object
    RecipeStepCompletionConditionCreationRequestInput:
      properties:
        belongsToRecipeStep:
          type: string
        ingredientState:
          type: string
        ingredients:
          format: int64
          items:
            type: integer
          type: array
        notes:
          type: string
        optional:
          type: boolean
      type: object
    RecipeStepCompletionConditionForExistingRecipeCreationRequestInput:
      properties:
        belongsToRecipeStep:
          type: string
        ingredientStateID:
          type: string
        ingredients:
          items:
            $ref: '#/components/schemas/RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput'
          type: array
        notes:
          type: string
        optional:
          type: boolean
      type: object
    RecipeStepCompletionConditionIngredient:
      properties:
        archivedAt:
          format: date-time
          type: string
        belongsToRecipeStepCompletionCondition:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        recipeStepIngredient:
          type: string
      type: object
    RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput:
      properties:
        recipeStepIngredient:
          type: string
      type: object
    RecipeStepCompletionConditionUpdateRequestInput:
      properties:
        belongsToRecipeStep:
          type: string
        ingredientState:
          type: string
        notes:
          type: string
        optional:
          type: boolean
      type: object
    RecipeStepCreationRequestInput:
      properties:
        completionConditions:
          items:
            $ref: '#/components/schemas/RecipeStepCompletionConditionCreationRequestInput'
          type: array
        conditionExpression:
          type: string
        explicitInstructions:
          type: string
        index:
          format: int64
          type: integer
        ingredients:
          items:
            $ref: '#/components/schemas/RecipeStepIngredientCreationRequestInput'
          type: array
        instruments:
          items:
            $ref: '#/components/schemas/RecipeStepInstrumentCreationRequestInput'
          type: array
        maximumEstimatedTimeInSeconds:
          format: int64
          type: integer
        maximumTemperatureInCelsius:
          format: double
          type: number
        minimumEstimatedTimeInSeconds:
          format: int64
          type: integer
        minimumTemperatureInCelsius:
          format: double
          type: number
        notes:
          type: string
        optional:
          type: boolean
        preparationID:
          type: string
        products:
          items:
            $ref: '#/components/schemas/RecipeStepProductCreationRequestInput'
          type: array
        startTimerAutomatically:
          type: boolean
        vessels:
          items:
            $ref: '#/components/schemas/RecipeStepVesselCreationRequestInput'
          type: array
      type: object
    RecipeStepIngredient:
      properties:
        archivedAt:
          format: date-time
          type: string
        belongsToRecipeStep:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        ingredient:
          $ref: '#/components/schemas/ValidIngredient'
        ingredientNotes:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        maximumQuantity:
          format: double
          type: number
        measurementUnit:
          $ref: '#/components/schemas/ValidMeasurementUnit'
        minimumQuantity:
          format: double
          type: number
        name:
          type: string
        optionIndex:
          format: int64
          type: integer
        optional:
          type: boolean
        productOfRecipeID:
          type: string
        productPercentageToUse:
          format: double
          type: number
        quantityNotes:
          type: string
        recipeStepProductID:
          type: string
        toTaste:
          type: boolean
        vesselIndex:
          format: int64
          type: integer
      type: object
    RecipeStepIngredientCreationRequestInput:
      properties:
        ingredientID:
          type: string
        ingredientNotes:
          type: string
        maximumQuantity:
          format: double
          type: number
        measurementUnitID:
          type: string
        minimumQuantity:
          format: double
          type: number
        name:
          type: string
        optionIndex:
          format: int64
          type: integer
        optional:
          type: boolean
        productOfRecipeID:
          type: string
        productOfRecipeStepIndex:
          format: int64
          type: integer
        productOfRecipeStepProductIndex:
          format: int64
          type: integer
        productPercentageToUse:
          format: double
          type: number
        quantityNotes:
          type: string
        toTaste:
          type: boolean
        vesselIndex:
          format: int64
          type: integer
      type: object
    RecipeStepIngredientUpdateRequestInput:
      properties:
        belongsToRecipeStep:
          type: string
        ingredientID:
          type: string
        ingredientNotes:
          type: string
        maximumQuantity:
          format: double
          type: number
        measurementUnitID:
          type: string
        minimumQuantity:
          format: double
          type: number
        name:
          type: string
        optionIndex:
          format: int64
          type: integer
        optional:
          type: boolean
        productOfRecipeID:
          type: string
        productPercentageToUse:
          format: double
          type: number
        quantityNotes:
          type: string
        recipeStepProductID:
          type: string
        toTaste:
          type: boolean
        vesselIndex:
          format: int64
          type: integer
      type: object
    RecipeStepInstrument:
      properties:
        archivedAt:
          format: date-time
          type: string
        belongsToRecipeStep:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        instrument:
          $ref: '#/components/schemas/ValidInstrument'
        lastUpdatedAt:
          format: date-time
          type: string
        maximumQuantity:
          format: int64
          type: integer
        minimumQuantity:
          format: int64
          type: integer
        name:
          type: string
        notes:
          type: string
        optionIndex:
          format: int64
          type: integer
        optional:
          type: boolean
        preferenceRank:
          format: int32
          type: integer
        recipeStepProductID:
          type: string
      type: object
    RecipeStepInstrumentCreationRequestInput:
      properties:
        instrumentID:
          type: string
        maximumQuantity:
          format: int64
          type: integer
        minimumQuantity:
          format: int64
          type: integer
        name:
          type: string
        notes:
          type: string
        optionIndex:
          format: int64
          type: integer
        optional:
          type: boolean
        preferenceRank:
          format: int32
          type: integer
        productOfRecipeStepIndex:
          format: int64
          type: integer
        productOfRecipeStepProductIndex:
          format: int64
          type: integer
        recipeStepProductID:
          type: string
      type: object
    RecipeStepInstrumentUpdateRequestInput:
      properties:
        belongsToRecipeStep:
          type: string
        instrumentID:
          type: string
        maximumQuantity:
          format: int64
          type: integer
        minimumQuantity:
          format: int64
          type: integer
        name:
          type: string
        notes:
          type: string
        optionIndex:
          format: int64
          type: integer
        optional:
          type: boolean
        preferenceRank:
          format: int32
          type: integer
        recipeStepProductID:
          type: string
      type: object
    RecipeStepProduct:
      properties:
        archivedAt:
          format: date-time
          type: string
        belongsToRecipeStep:
          type: string
        compostable:
          type: boolean
        containedInVesselIndex:
          format: int64
          type: integer
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        index:
          format: int64
          type: integer
        isLiquid:
          type: boolean
        isWaste:
          type: boolean
        lastUpdatedAt:
          format: date-time
          type: string
        maximumQuantity:
          format: double
          type: number
        maximumStorageDurationInSeconds:
          format: int64
          type: integer
        maximumStorageTemperatureInCelsius:
          format: double
          type: number
        measurementUnit:
          $ref: '#/components/schemas/ValidMeasurementUnit'
        minimumQuantity:
          format: double
          type: number
        minimumStorageTemperatureInCelsius:
          format: double
          type: number
        name:
          type: string
        quantityNotes:
          type: string
        storageInstructions:
          type: string
        type:
          type: string
      type: object
    RecipeStepProductCreationRequestInput:
      properties:
        compostable:
          type: boolean
        containedInVesselIndex:
          format: int64
          type: integer
        index:
          format: int64
          type: integer
        isLiquid:
          type: boolean
        isWaste:
          type: boolean
        maximumQuantity:
          format: double
          type: number
        maximumStorageDurationInSeconds:
          format: int64
          type: integer
        maximumStorageTemperatureInCelsius:
          format: double
          type: number
        measurementUnitID:
          type: string
        minimumQuantity:
          format: double
          type: number
        minimumStorageTemperatureInCelsius:
          format: double
          type: number
        name:
          type: string
        quantityNotes:
          type: string
        storageInstructions:
          type: string
        type:
          type: string
      type: object
    RecipeStepProductUpdateRequestInput:
      properties:
        belongsToRecipeStep:
          type: string
        compostable:
          type: boolean
        containedInVesselIndex:
          format: int64
          type: integer
        index:
          format: int64
          type: integer
        isLiquid:
          type: boolean
        isWaste:
          type: boolean
        maximumQuantity:
          format: double
          type: number
        maximumStorageDurationInSeconds:
          format: int64
          type: integer
        maximumStorageTemperatureInCelsius:
          format: double
          type: number
        measurementUnitID:
          type: string
        minimumQuantity:
          format: double
          type: number
        minimumStorageTemperatureInCelsius:
          format: double
          type: number
        name:
          type: string
        quantityNotes:
          type: string
        storageInstructions:
          type: string
        type:
          type: string
      type: object
    RecipeStepUpdateRequestInput:
      properties:
        belongsToRecipe:
          type: string
        conditionExpression:
          type: string
        explicitInstructions:
          type: string
        index:
          format: int64
          type: integer
        maximumEstimatedTimeInSeconds:
          format: int64
          type: integer
        maximumTemperatureInCelsius:
          format: double
          type: number
        minimumEstimatedTimeInSeconds:
          format: int64
          type: integer
        minimumTemperatureInCelsius:
          format: double
          type: number
        notes:
          type: string
        optional:
          type: boolean
        preparation:
          $ref: '#/components/schemas/ValidPreparation'
        startTimerAutomatically:
          type: boolean
      type: object
    RecipeStepVessel:
      properties:
        archivedAt:
          format: date-time
          type: string
        belongsToRecipeStep:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        maximumQuantity:
          format: int64
          type: integer
        minimumQuantity:
          format: int64
          type: integer
        name:
          type: string
        notes:
          type: string
        recipeStepProductID:
          type: string
        unavailableAfterStep:
          type: boolean
        vessel:
          $ref: '#/components/schemas/ValidVessel'
        vesselPreposition:
          type: string
      type: object
    RecipeStepVesselCreationRequestInput:
      properties:
        maximumQuantity:
          format: int64
          type: integer
        minimumQuantity:
          format: int64
          type: integer
        name:
          type: string
        notes:
          type: string
        productOfRecipeStepIndex:
          format: int64
          type: integer
        productOfRecipeStepProductIndex:
          format: int64
          type: integer
        recipeStepProductID:
          type: string
        unavailableAfterStep:
          type: boolean
        vesselID:
          type: string
        vesselPreposition:
          type: string
      type: object
    RecipeStepVesselUpdateRequestInput:
      properties:
        belongsToRecipeStep:
          type: string
        maximumQuantity:
          format: int64
          type: integer
        minimumQuantity:
          format: int64
          type: integer
        name:
          type: string
        notes:
          type: string
        recipeStepProductID:
          type: string
        unavailableAfterStep:
          type: boolean
        vesselID:
          type: string
        vesselPreposition:
          type: string
      type: object
    RecipeUpdateRequestInput:
      properties:
        description:
          type: string
        eligibleForMeals:
          type: boolean
        inspiredByRecipeID:
          type: string
        maximumEstimatedPortions:
          format: double
          type: number
        minimumEstimatedPortions:
          format: double
          type: number
        name:
          type: string
        pluralPortionName:
          type: string
        portionName:
          type: string
        sealOfApproval:
          type: boolean
        slug:
          type: string
        source:
          type: string
        yieldsComponentType:
          type: string
      type: object
    ResponseDetails:
      properties:
        currentHouseholdID:
          type: string
        traceID:
          type: string
      type: object
    ServiceSetting:
      properties:
        adminsOnly:
          type: boolean
        archivedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        defaultValue:
          type: string
        description:
          type: string
        enumeration:
          items:
            type: string
          type: array
        id:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        name:
          type: string
        type:
          type: string
      type: object
    ServiceSettingConfiguration:
      properties:
        archivedAt:
          format: date-time
          type: string
        belongsToHousehold:
          type: string
        belongsToUser:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        notes:
          type: string
        serviceSetting:
          $ref: '#/components/schemas/ServiceSetting'
        value:
          type: string
      type: object
    ServiceSettingConfigurationCreationRequestInput:
      properties:
        belongsToHousehold:
          type: string
        belongsToUser:
          type: string
        notes:
          type: string
        serviceSettingID:
          type: string
        value:
          type: string
      type: object
    ServiceSettingConfigurationUpdateRequestInput:
      properties:
        belongsToHousehold:
          type: string
        belongsToUser:
          type: string
        notes:
          type: string
        serviceSettingID:
          type: string
        value:
          type: string
      type: object
    ServiceSettingCreationRequestInput:
      properties:
        adminsOnly:
          type: boolean
        defaultValue:
          type: string
        description:
          type: string
        enumeration:
          items:
            type: string
          type: array
        name:
          type: string
        type:
          type: string
      type: object
    TOTPSecretRefreshInput:
      properties:
        currentPassword:
          format: password
          type: string
        totpToken:
          type: string
      type: object
    TOTPSecretRefreshResponse:
      properties:
        qrCode:
          type: string
        twoFactorSecret:
          type: string
      type: object
    TOTPSecretVerificationInput:
      properties:
        totpToken:
          type: string
        userID:
          type: string
      type: object
    User:
      properties:
        accountStatus:
          type: string
        accountStatusExplanation:
          type: string
        archivedAt:
          format: date-time
          type: string
        avatar:
          type: string
        birthday:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        emailAddress:
          format: email
          type: string
        emailAddressVerifiedAt:
          format: date-time
          type: string
        firstName:
          type: string
        id:
          type: string
        lastAcceptedPrivacyPolicy:
          format: date-time
          type: string
        lastAcceptedTOS:
          format: date-time
          type: string
        lastName:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        passwordLastChangedAt:
          format: date-time
          type: string
        requiresPasswordChange:
          type: boolean
        serviceRoles:
          type: string
        twoFactorSecretVerifiedAt:
          format: date-time
          type: string
        username:
          type: string
      type: object
    UserAccountStatusUpdateInput:
      properties:
        newStatus:
          type: string
        reason:
          type: string
        targetUserID:
          type: string
      type: object
    UserCreationResponse:
      properties:
        accountStatus:
          type: string
        avatar:
          type: string
        birthday:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        createdUserID:
          type: string
        emailAddress:
          format: email
          type: string
        firstName:
          type: string
        isAdmin:
          type: boolean
        lastName:
          type: string
        qrCode:
          type: string
        twoFactorSecret:
          type: string
        username:
          type: string
      type: object
    UserDetailsUpdateRequestInput:
      properties:
        birthday:
          format: date-time
          type: string
        currentPassword:
          format: password
          type: string
        firstName:
          type: string
        lastName:
          type: string
        totpToken:
          type: string
      type: object
    UserEmailAddressUpdateInput:
      properties:
        currentPassword:
          format: password
          type: string
        newEmailAddress:
          type: string
        totpToken:
          type: string
      type: object
    UserIngredientPreference:
      properties:
        allergy:
          type: boolean
        archivedAt:
          format: date-time
          type: string
        belongsToUser:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        ingredient:
          $ref: '#/components/schemas/ValidIngredient'
        lastUpdatedAt:
          format: date-time
          type: string
        notes:
          type: string
        rating:
          format: int32
          type: integer
      type: object
    UserIngredientPreferenceCreationRequestInput:
      properties:
        allergy:
          type: boolean
        notes:
          type: string
        rating:
          format: int32
          type: integer
        validIngredientGroupID:
          type: string
        validIngredientID:
          type: string
      type: object
    UserIngredientPreferenceUpdateRequestInput:
      properties:
        allergy:
          type: boolean
        ingredientID:
          type: string
        notes:
          type: string
        rating:
          format: int32
          type: integer
      type: object
    UserLoginInput:
      properties:
        password:
          format: password
          type: string
        totpToken:
          type: string
        username:
          type: string
      type: object
    UserNotification:
      properties:
        belongsToUser:
          type: string
        content:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        status:
          type: string
      type: object
    UserNotificationCreationRequestInput:
      properties:
        belongsToUser:
          type: string
        content:
          type: string
        status:
          type: string
      type: object
    UserNotificationUpdateRequestInput:
      properties:
        status:
          type: string
      type: object
    UserPermissionsRequestInput:
      properties:
        permissions:
          items:
            type: string
          type: array
      type: object
    UserPermissionsResponse:
      properties:
        permissions:
          type: object
      type: object
    UserRegistrationInput:
      properties:
        acceptedPrivacyPolicy:
          type: boolean
        acceptedTOS:
          type: boolean
        birthday:
          format: date-time
          type: string
        emailAddress:
          format: email
          type: string
        firstName:
          type: string
        householdName:
          type: string
        invitationID:
          type: string
        invitationToken:
          type: string
        lastName:
          type: string
        password:
          format: password
          type: string
        username:
          type: string
      type: object
    UserStatusResponse:
      properties:
        accountStatus:
          type: string
        accountStatusExplanation:
          type: string
        activeHousehold:
          type: string
        isAuthenticated:
          type: boolean
        userID:
          type: string
      type: object
    UsernameReminderRequestInput:
      properties:
        emailAddress:
          format: email
          type: string
      type: object
    UsernameUpdateInput:
      properties:
        currentPassword:
          format: password
          type: string
        newUsername:
          type: string
        totpToken:
          type: string
      type: object
    ValidIngredient:
      properties:
        animalDerived:
          type: boolean
        animalFlesh:
          type: boolean
        archivedAt:
          format: date-time
          type: string
        containsAlcohol:
          type: boolean
        containsDairy:
          type: boolean
        containsEgg:
          type: boolean
        containsFish:
          type: boolean
        containsGluten:
          type: boolean
        containsPeanut:
          type: boolean
        containsSesame:
          type: boolean
        containsShellfish:
          type: boolean
        containsSoy:
          type: boolean
        containsTreeNut:
          type: boolean
        containsWheat:
          type: boolean
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        iconPath:
          type: string
        id:
          type: string
        isAcid:
          type: boolean
        isFat:
          type: boolean
        isFruit:
          type: boolean
        isGrain:
          type: boolean
        isHeat:
          type: boolean
        isLiquid:
          type: boolean
        isMeasuredVolumetrically:
          type: boolean
        isProtein:
          type: boolean
        isSalt:
          type: boolean
        isStarch:
          type: boolean
        lastUpdatedAt:
          format: date-time
          type: string
        maximumIdealStorageTemperatureInCelsius:
          format: double
          type: number
        minimumIdealStorageTemperatureInCelsius:
          format: double
          type: number
        name:
          type: string
        pluralName:
          type: string
        restrictToPreparations:
          type: boolean
        shoppingSuggestions:
          type: string
        slug:
          type: string
        storageInstructions:
          type: string
        warning:
          type: string
      type: object
    ValidIngredientCreationRequestInput:
      properties:
        animalDerived:
          type: boolean
        animalFlesh:
          type: boolean
        containsAlcohol:
          type: boolean
        containsDairy:
          type: boolean
        containsEgg:
          type: boolean
        containsFish:
          type: boolean
        containsGluten:
          type: boolean
        containsPeanut:
          type: boolean
        containsSesame:
          type: boolean
        containsShellfish:
          type: boolean
        containsSoy:
          type: boolean
        containsTreeNut:
          type: boolean
        containsWheat:
          type: boolean
        description:
          type: string
        iconPath:
          type: string
        isAcid:
          type: boolean
        isFat:
          type: boolean
        isFruit:
          type: boolean
        isGrain:
          type: boolean
        isHeat:
          type: boolean
        isLiquid:
          type: boolean
        isMeasuredVolumetrically:
          type: boolean
        isProtein:
          type: boolean
        isSalt:
          type: boolean
        isStarch:
          type: boolean
        maximumIdealStorageTemperatureInCelsius:
          format: double
          type: number
        minimumIdealStorageTemperatureInCelsius:
          format: double
          type: number
        name:
          type: string
        pluralName:
          type: string
        restrictToPreparations:
          type: boolean
        shoppingSuggestions:
          type: string
        slug:
          type: string
        storageInstructions:
          type: string
        warning:
          type: string
      type: object
    ValidIngredientGroup:
      properties:
        archivedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        id:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        members:
          items:
            $ref: '#/components/schemas/ValidIngredientGroupMember'
          type: array
        name:
          type: string
        slug:
          type: string
      type: object
    ValidIngredientGroupCreationRequestInput:
      properties:
        description:
          type: string
        members:
          items:
            $ref: '#/components/schemas/ValidIngredientGroupMemberCreationRequestInput'
          type: array
        name:
          type: string
        slug:
          type: string
      type: object
    ValidIngredientGroupMember:
      properties:
        archivedAt:
          format: date-time
          type: string
        belongsToGroup:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        validIngredient:
          $ref: '#/components/schemas/ValidIngredient'
      type: object
    ValidIngredientGroupMemberCreationRequestInput:
      properties:
        validIngredientID:
          type: string
      type: object
    ValidIngredientGroupUpdateRequestInput:
      properties:
        description:
          type: string
        name:
          type: string
        slug:
          type: string
      type: object
    ValidIngredientMeasurementUnit:
      properties:
        archivedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        ingredient:
          $ref: '#/components/schemas/ValidIngredient'
        lastUpdatedAt:
          format: date-time
          type: string
        maximumAllowableQuantity:
          format: double
          type: number
        measurementUnit:
          $ref: '#/components/schemas/ValidMeasurementUnit'
        minimumAllowableQuantity:
          format: double
          type: number
        notes:
          type: string
      type: object
    ValidIngredientMeasurementUnitCreationRequestInput:
      properties:
        maximumAllowableQuantity:
          format: double
          type: number
        minimumAllowableQuantity:
          format: double
          type: number
        notes:
          type: string
        validIngredientID:
          type: string
        validMeasurementUnitID:
          type: string
      type: object
    ValidIngredientMeasurementUnitUpdateRequestInput:
      properties:
        maximumAllowableQuantity:
          format: double
          type: number
        minimumAllowableQuantity:
          format: double
          type: number
        notes:
          type: string
        validIngredientID:
          type: string
        validMeasurementUnitID:
          type: string
      type: object
    ValidIngredientPreparation:
      properties:
        archivedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        ingredient:
          $ref: '#/components/schemas/ValidIngredient'
        lastUpdatedAt:
          format: date-time
          type: string
        notes:
          type: string
        preparation:
          $ref: '#/components/schemas/ValidPreparation'
      type: object
    ValidIngredientPreparationCreationRequestInput:
      properties:
        notes:
          type: string
        validIngredientID:
          type: string
        validPreparationID:
          type: string
      type: object
    ValidIngredientPreparationUpdateRequestInput:
      properties:
        notes:
          type: string
        validIngredientID:
          type: string
        validPreparationID:
          type: string
      type: object
    ValidIngredientState:
      properties:
        archivedAt:
          format: date-time
          type: string
        attributeType:
          type: string
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        iconPath:
          type: string
        id:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        name:
          type: string
        pastTense:
          type: string
        slug:
          type: string
      type: object
    ValidIngredientStateCreationRequestInput:
      properties:
        attributeType:
          type: string
        description:
          type: string
        iconPath:
          type: string
        name:
          type: string
        pastTense:
          type: string
        slug:
          type: string
      type: object
    ValidIngredientStateIngredient:
      properties:
        archivedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        ingredient:
          $ref: '#/components/schemas/ValidIngredient'
        ingredientState:
          $ref: '#/components/schemas/ValidIngredientState'
        lastUpdatedAt:
          format: date-time
          type: string
        notes:
          type: string
      type: object
    ValidIngredientStateIngredientCreationRequestInput:
      properties:
        notes:
          type: string
        validIngredientID:
          type: string
        validIngredientStateID:
          type: string
      type: object
    ValidIngredientStateIngredientUpdateRequestInput:
      properties:
        notes:
          type: string
        validIngredientID:
          type: string
        validIngredientStateID:
          type: string
      type: object
    ValidIngredientStateUpdateRequestInput:
      properties:
        attributeType:
          type: string
        description:
          type: string
        iconPath:
          type: string
        name:
          type: string
        pastTense:
          type: string
        slug:
          type: string
      type: object
    ValidIngredientUpdateRequestInput:
      properties:
        animalDerived:
          type: boolean
        animalFlesh:
          type: boolean
        containsAlcohol:
          type: boolean
        containsDairy:
          type: boolean
        containsEgg:
          type: boolean
        containsFish:
          type: boolean
        containsGluten:
          type: boolean
        containsPeanut:
          type: boolean
        containsSesame:
          type: boolean
        containsShellfish:
          type: boolean
        containsSoy:
          type: boolean
        containsTreeNut:
          type: boolean
        containsWheat:
          type: boolean
        description:
          type: string
        iconPath:
          type: string
        isAcid:
          type: boolean
        isFat:
          type: boolean
        isFruit:
          type: boolean
        isGrain:
          type: boolean
        isHeat:
          type: boolean
        isLiquid:
          type: boolean
        isMeasuredVolumetrically:
          type: boolean
        isProtein:
          type: boolean
        isSalt:
          type: boolean
        isStarch:
          type: boolean
        maximumIdealStorageTemperatureInCelsius:
          format: double
          type: number
        minimumIdealStorageTemperatureInCelsius:
          format: double
          type: number
        name:
          type: string
        pluralName:
          type: string
        restrictToPreparations:
          type: boolean
        shoppingSuggestions:
          type: string
        slug:
          type: string
        storageInstructions:
          type: string
        warning:
          type: string
      type: object
    ValidInstrument:
      properties:
        archivedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        displayInSummaryLists:
          type: boolean
        iconPath:
          type: string
        id:
          type: string
        includeInGeneratedInstructions:
          type: boolean
        lastUpdatedAt:
          format: date-time
          type: string
        name:
          type: string
        pluralName:
          type: string
        slug:
          type: string
        usableForStorage:
          type: boolean
      type: object
    ValidInstrumentCreationRequestInput:
      properties:
        description:
          type: string
        displayInSummaryLists:
          type: boolean
        iconPath:
          type: string
        includeInGeneratedInstructions:
          type: boolean
        name:
          type: string
        pluralName:
          type: string
        slug:
          type: string
        usableForStorage:
          type: boolean
      type: object
    ValidInstrumentUpdateRequestInput:
      properties:
        description:
          type: string
        displayInSummaryLists:
          type: boolean
        iconPath:
          type: string
        includeInGeneratedInstructions:
          type: boolean
        name:
          type: string
        pluralName:
          type: string
        slug:
          type: string
        usableForStorage:
          type: boolean
      type: object
    ValidMeasurementUnit:
      properties:
        archivedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        iconPath:
          type: string
        id:
          type: string
        imperial:
          type: boolean
        lastUpdatedAt:
          format: date-time
          type: string
        metric:
          type: boolean
        name:
          type: string
        pluralName:
          type: string
        slug:
          type: string
        universal:
          type: boolean
        volumetric:
          type: boolean
      type: object
    ValidMeasurementUnitConversion:
      properties:
        archivedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        from:
          $ref: '#/components/schemas/ValidMeasurementUnit'
        id:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        modifier:
          format: double
          type: number
        notes:
          type: string
        onlyForIngredient:
          $ref: '#/components/schemas/ValidIngredient'
        to:
          $ref: '#/components/schemas/ValidMeasurementUnit'
      type: object
    ValidMeasurementUnitConversionCreationRequestInput:
      properties:
        from:
          type: string
        modifier:
          format: double
          type: number
        notes:
          type: string
        onlyForIngredient:
          type: string
        to:
          type: string
      type: object
    ValidMeasurementUnitConversionUpdateRequestInput:
      properties:
        from:
          type: string
        modifier:
          format: double
          type: number
        notes:
          type: string
        onlyForIngredient:
          type: string
        to:
          type: string
      type: object
    ValidMeasurementUnitCreationRequestInput:
      properties:
        description:
          type: string
        iconPath:
          type: string
        imperial:
          type: boolean
        metric:
          type: boolean
        name:
          type: string
        pluralName:
          type: string
        slug:
          type: string
        universal:
          type: boolean
        volumetric:
          type: boolean
      type: object
    ValidMeasurementUnitUpdateRequestInput:
      properties:
        description:
          type: string
        iconPath:
          type: string
        imperial:
          type: boolean
        metric:
          type: boolean
        name:
          type: string
        pluralName:
          type: string
        slug:
          type: string
        universal:
          type: boolean
        volumetric:
          type: boolean
      type: object
    ValidPreparation:
      properties:
        archivedAt:
          format: date-time
          type: string
        conditionExpressionRequired:
          type: boolean
        consumesVessel:
          type: boolean
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        iconPath:
          type: string
        id:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        maximumIngredientCount:
          format: int32
          type: integer
        maximumInstrumentCount:
          format: int32
          type: integer
        maximumVesselCount:
          format: int32
          type: integer
        minimumIngredientCount:
          format: int32
          type: integer
        minimumInstrumentCount:
          format: int32
          type: integer
        minimumVesselCount:
          format: int32
          type: integer
        name:
          type: string
        onlyForVessels:
          type: boolean
        pastTense:
          type: string
        restrictToIngredients:
          type: boolean
        slug:
          type: string
        temperatureRequired:
          type: boolean
        timeEstimateRequired:
          type: boolean
        yieldsNothing:
          type: boolean
      type: object
    ValidPreparationCreationRequestInput:
      properties:
        conditionExpressionRequired:
          type: boolean
        consumesVessel:
          type: boolean
        description:
          type: string
        iconPath:
          type: string
        maximumIngredientCount:
          format: int32
          type: integer
        maximumInstrumentCount:
          format: int32
          type: integer
        maximumVesselCount:
          format: int32
          type: integer
        minimumIngredientCount:
          format: int32
          type: integer
        minimumInstrumentCount:
          format: int32
          type: integer
        minimumVesselCount:
          format: int32
          type: integer
        name:
          type: string
        onlyForVessels:
          type: boolean
        pastTense:
          type: string
        restrictToIngredients:
          type: boolean
        slug:
          type: string
        temperatureRequired:
          type: boolean
        timeEstimateRequired:
          type: boolean
        yieldsNothing:
          type: boolean
      type: object
    ValidPreparationInstrument:
      properties:
        archivedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        instrument:
          $ref: '#/components/schemas/ValidInstrument'
        lastUpdatedAt:
          format: date-time
          type: string
        notes:
          type: string
        preparation:
          $ref: '#/components/schemas/ValidPreparation'
      type: object
    ValidPreparationInstrumentCreationRequestInput:
      properties:
        notes:
          type: string
        validInstrumentID:
          type: string
        validPreparationID:
          type: string
      type: object
    ValidPreparationInstrumentUpdateRequestInput:
      properties:
        notes:
          type: string
        validInstrumentID:
          type: string
        validPreparationID:
          type: string
      type: object
    ValidPreparationUpdateRequestInput:
      properties:
        conditionExpressionRequired:
          type: boolean
        consumesVessel:
          type: boolean
        description:
          type: string
        iconPath:
          type: string
        maximumIngredientCount:
          format: int32
          type: integer
        maximumInstrumentCount:
          format: int32
          type: integer
        maximumVesselCount:
          format: int32
          type: integer
        minimumIngredientCount:
          format: int32
          type: integer
        minimumInstrumentCount:
          format: int32
          type: integer
        minimumVesselCount:
          format: int32
          type: integer
        name:
          type: string
        onlyForVessels:
          type: boolean
        pastTense:
          type: string
        restrictToIngredients:
          type: boolean
        slug:
          type: string
        temperatureRequired:
          type: boolean
        timeEstimateRequired:
          type: boolean
        yieldsNothing:
          type: boolean
      type: object
    ValidPreparationVessel:
      properties:
        archivedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        instrument:
          $ref: '#/components/schemas/ValidVessel'
        lastUpdatedAt:
          format: date-time
          type: string
        notes:
          type: string
        preparation:
          $ref: '#/components/schemas/ValidPreparation'
      type: object
    ValidPreparationVesselCreationRequestInput:
      properties:
        notes:
          type: string
        validPreparationID:
          type: string
        validVesselID:
          type: string
      type: object
    ValidPreparationVesselUpdateRequestInput:
      properties:
        notes:
          type: string
        validPreparationID:
          type: string
        validVesselID:
          type: string
      type: object
    ValidVessel:
      properties:
        archivedAt:
          format: date-time
          type: string
        capacity:
          format: double
          type: number
        capacityUnit:
          $ref: '#/components/schemas/ValidMeasurementUnit'
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        displayInSummaryLists:
          type: boolean
        heightInMillimeters:
          format: double
          type: number
        iconPath:
          type: string
        id:
          type: string
        includeInGeneratedInstructions:
          type: boolean
        lastUpdatedAt:
          format: date-time
          type: string
        lengthInMillimeters:
          format: double
          type: number
        name:
          type: string
        pluralName:
          type: string
        shape:
          type: string
        slug:
          type: string
        usableForStorage:
          type: boolean
        widthInMillimeters:
          format: double
          type: number
      type: object
    ValidVesselCreationRequestInput:
      properties:
        capacity:
          format: double
          type: number
        capacityUnitID:
          type: string
        description:
          type: string
        displayInSummaryLists:
          type: boolean
        heightInMillimeters:
          format: double
          type: number
        iconPath:
          type: string
        includeInGeneratedInstructions:
          type: boolean
        lengthInMillimeters:
          format: double
          type: number
        name:
          type: string
        pluralName:
          type: string
        shape:
          type: string
        slug:
          type: string
        usableForStorage:
          type: boolean
        widthInMillimeters:
          format: double
          type: number
      type: object
    ValidVesselUpdateRequestInput:
      properties:
        capacity:
          format: double
          type: number
        capacityUnitID:
          type: string
        description:
          type: string
        displayInSummaryLists:
          type: boolean
        heightInMillimeters:
          format: double
          type: number
        iconPath:
          type: string
        includeInGeneratedInstructions:
          type: boolean
        lengthInMillimeters:
          format: double
          type: number
        name:
          type: string
        pluralName:
          type: string
        shape:
          type: string
        slug:
          type: string
        usableForStorage:
          type: boolean
        widthInMillimeters:
          format: double
          type: number
      type: object
    Webhook:
      properties:
        archivedAt:
          format: date-time
          type: string
        belongsToHousehold:
          type: string
        contentType:
          type: string
        createdAt:
          format: date-time
          type: string
        events:
          items:
            $ref: '#/components/schemas/WebhookTriggerEvent'
          type: array
        id:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        method:
          type: string
        name:
          type: string
        url:
          format: uri
          type: string
      type: object
    WebhookCreationRequestInput:
      properties:
        contentType:
          type: string
        events:
          items:
            type: string
          type: array
        method:
          type: string
        name:
          type: string
        url:
          format: uri
          type: string
      type: object
    WebhookTriggerEvent:
      properties:
        archivedAt:
          format: date-time
          type: string
        belongsToWebhook:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        triggerEvent:
          type: string
      type: object
    WebhookTriggerEventCreationRequestInput:
      properties:
        belongsToWebhook:
          type: string
        triggerEvent:
          type: string
      type: object
  securitySchemes:
    cookieAuth:
      in: cookie
      name: ddb_api_cookie
      type: apiKey
    oauth2:
      flows:
        implicit:
          authorizationUrl: /oauth2/authorize
          scopes:
            household_admin: household-level administrator capabilities
            household_member: household-level user capabilities
            service_admin: service-level administrator capabilities
      type: oauth2
tags:
- name: admin
- name: audit log entries
- name: auth
- name: email address
- name: grocery list items
- name: household
- name: household instrument ownerships
- name: household invitations
- name: household members
- name: households
- name: invitations
- name: meal plan events
- name: meal plan option votes
- name: meal plan options
- name: meal plan tasks
- name: meal plans
- name: meals
- name: oauth2
- name: password
- name: permissions
- name: recipe prep tasks
- name: recipe ratings
- name: recipe step completion conditions
- name: recipe step ingredients
- name: recipe step products
- name: recipe step vessels
- name: recipe steps
- name: recipes
- description: Operations related to configuring service settings
  name: service setting configurations
- description: Operations related to service settings
  name: service settings
- name: totp secret
- name: user
- name: user ingredient preferences
- name: user notifications
- name: users
- name: valid ingredient groups
- name: valid ingredient measurement units
- name: valid ingredient preparations
- name: valid ingredient state ingredients
- name: valid ingredient states
- name: valid ingredients
- name: valid instruments
- name: valid measurement conversions
- name: valid measurement units
- name: valid preparation instruments
- name: valid preparation vessels
- name: valid preparations
- name: valid vessels
- name: webhook trigger events
- name: webhooks
- name: workers
