// Code generated by gen_typescript. DO NOT EDIT.

import { ValidVessel } from './validVessels';

export interface IRecipeStepVessel {
  createdAt: NonNullable<string>;
  maximumQuantity?: number;
  lastUpdatedAt?: string;
  archivedAt?: string;
  recipeStepProductID?: string;
  vessel?: ValidVessel;
  id: NonNullable<string>;
  notes: NonNullable<string>;
  belongsToRecipeStep: NonNullable<string>;
  vesselPreposition: NonNullable<string>;
  name: NonNullable<string>;
  minimumQuantity: NonNullable<number>;
  unavailableAfterStep: NonNullable<boolean>;
}

export class RecipeStepVessel implements IRecipeStepVessel {
  createdAt: NonNullable<string> = '1970-01-01T00:00:00Z';
  maximumQuantity?: number;
  lastUpdatedAt?: string;
  archivedAt?: string;
  recipeStepProductID?: string;
  vessel?: ValidVessel;
  id: NonNullable<string> = '';
  notes: NonNullable<string> = '';
  belongsToRecipeStep: NonNullable<string> = '';
  vesselPreposition: NonNullable<string> = '';
  name: NonNullable<string> = '';
  minimumQuantity: NonNullable<number> = 0;
  unavailableAfterStep: NonNullable<boolean> = false;

  constructor(input: Partial<RecipeStepVessel> = {}) {
    this.createdAt = input.createdAt ?? '1970-01-01T00:00:00Z';
    this.maximumQuantity = input.maximumQuantity;
    this.lastUpdatedAt = input.lastUpdatedAt;
    this.archivedAt = input.archivedAt;
    this.recipeStepProductID = input.recipeStepProductID;
    this.vessel = input.vessel;
    this.id = input.id ?? '';
    this.notes = input.notes ?? '';
    this.belongsToRecipeStep = input.belongsToRecipeStep ?? '';
    this.vesselPreposition = input.vesselPreposition ?? '';
    this.name = input.name ?? '';
    this.minimumQuantity = input.minimumQuantity ?? 0;
    this.unavailableAfterStep = input.unavailableAfterStep ?? false;
  }
}

export interface IRecipeStepVesselCreationRequestInput {
  recipeStepProductID?: string;
  productOfRecipeStepIndex?: number;
  productOfRecipeStepProductIndex?: number;
  vesselID?: string;
  maximumQuantity?: number;
  name: NonNullable<string>;
  notes: NonNullable<string>;
  vesselPreposition: NonNullable<string>;
  minimumQuantity: NonNullable<number>;
  unavailableAfterStep: NonNullable<boolean>;
}

export class RecipeStepVesselCreationRequestInput implements IRecipeStepVesselCreationRequestInput {
  recipeStepProductID?: string;
  productOfRecipeStepIndex?: number;
  productOfRecipeStepProductIndex?: number;
  vesselID?: string;
  maximumQuantity?: number;
  name: NonNullable<string> = '';
  notes: NonNullable<string> = '';
  vesselPreposition: NonNullable<string> = '';
  minimumQuantity: NonNullable<number> = 0;
  unavailableAfterStep: NonNullable<boolean> = false;

  constructor(input: Partial<RecipeStepVesselCreationRequestInput> = {}) {
    this.recipeStepProductID = input.recipeStepProductID;
    this.productOfRecipeStepIndex = input.productOfRecipeStepIndex;
    this.productOfRecipeStepProductIndex = input.productOfRecipeStepProductIndex;
    this.vesselID = input.vesselID;
    this.maximumQuantity = input.maximumQuantity;
    this.name = input.name ?? '';
    this.notes = input.notes ?? '';
    this.vesselPreposition = input.vesselPreposition ?? '';
    this.minimumQuantity = input.minimumQuantity ?? 0;
    this.unavailableAfterStep = input.unavailableAfterStep ?? false;
  }
}

export interface IRecipeStepVesselUpdateRequestInput {
  recipeStepProductID?: string;
  name?: string;
  notes?: string;
  belongsToRecipeStep?: string;
  vesselID?: string;
  minimumQuantity?: number;
  maximumQuantity?: number;
  vesselPreposition?: string;
  unavailableAfterStep?: boolean;
}

export class RecipeStepVesselUpdateRequestInput implements IRecipeStepVesselUpdateRequestInput {
  recipeStepProductID?: string;
  name?: string;
  notes?: string;
  belongsToRecipeStep?: string;
  vesselID?: string;
  minimumQuantity?: number;
  maximumQuantity?: number;
  vesselPreposition?: string;
  unavailableAfterStep?: boolean = false;

  constructor(input: Partial<RecipeStepVesselUpdateRequestInput> = {}) {
    this.recipeStepProductID = input.recipeStepProductID;
    this.name = input.name;
    this.notes = input.notes;
    this.belongsToRecipeStep = input.belongsToRecipeStep;
    this.vesselID = input.vesselID;
    this.minimumQuantity = input.minimumQuantity;
    this.maximumQuantity = input.maximumQuantity;
    this.vesselPreposition = input.vesselPreposition;
    this.unavailableAfterStep = input.unavailableAfterStep ?? false;
  }
}
