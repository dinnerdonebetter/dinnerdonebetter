// Code generated by gen_typescript. DO NOT EDIT.

import { NumberRange } from './main';
import { RecipeMedia } from './recipeMedia';
import {
  RecipeStepCompletionCondition,
  RecipeStepCompletionConditionCreationRequestInput,
} from './recipeStepCompletionConditions';
import { RecipeStepIngredient, RecipeStepIngredientCreationRequestInput } from './recipeStepIngredients';
import { RecipeStepInstrument, RecipeStepInstrumentCreationRequestInput } from './recipeStepInstruments';
import { RecipeStepProduct, RecipeStepProductCreationRequestInput } from './recipeStepProducts';
import { RecipeStepVessel, RecipeStepVesselCreationRequestInput } from './recipeStepVessels';
import { ValidPreparation } from './validPreparations';

export interface IRecipeStep {
  createdAt: NonNullable<string>;
  estimatedTimeInSeconds: NonNullable<NumberRange>;
  temperatureInCelsius: NonNullable<NumberRange>;
  archivedAt?: string;
  lastUpdatedAt?: string;
  belongsToRecipe: NonNullable<string>;
  conditionExpression: NonNullable<string>;
  id: NonNullable<string>;
  notes: NonNullable<string>;
  explicitInstructions: NonNullable<string>;
  media: NonNullable<Array<RecipeMedia>>;
  products: NonNullable<Array<RecipeStepProduct>>;
  instruments: NonNullable<Array<RecipeStepInstrument>>;
  vessels: NonNullable<Array<RecipeStepVessel>>;
  completionConditions: NonNullable<Array<RecipeStepCompletionCondition>>;
  ingredients: NonNullable<Array<RecipeStepIngredient>>;
  preparation: NonNullable<ValidPreparation>;
  index: NonNullable<number>;
  optional: NonNullable<boolean>;
  startTimerAutomatically: NonNullable<boolean>;
}

export class RecipeStep implements IRecipeStep {
  createdAt: NonNullable<string> = '1970-01-01T00:00:00Z';
  estimatedTimeInSeconds: NonNullable<NumberRange> = { min: 0, max: 0 };
  temperatureInCelsius: NonNullable<NumberRange> = { min: 0, max: 0 };
  archivedAt?: string;
  lastUpdatedAt?: string;
  belongsToRecipe: NonNullable<string> = '';
  conditionExpression: NonNullable<string> = '';
  id: NonNullable<string> = '';
  notes: NonNullable<string> = '';
  explicitInstructions: NonNullable<string> = '';
  media: NonNullable<Array<RecipeMedia>> = [];
  products: NonNullable<Array<RecipeStepProduct>> = [];
  instruments: NonNullable<Array<RecipeStepInstrument>> = [];
  vessels: NonNullable<Array<RecipeStepVessel>> = [];
  completionConditions: NonNullable<Array<RecipeStepCompletionCondition>> = [];
  ingredients: NonNullable<Array<RecipeStepIngredient>> = [];
  preparation: NonNullable<ValidPreparation> = new ValidPreparation();
  index: NonNullable<number> = 0;
  optional: NonNullable<boolean> = false;
  startTimerAutomatically: NonNullable<boolean> = false;

  constructor(input: Partial<RecipeStep> = {}) {
    this.createdAt = input.createdAt ?? '1970-01-01T00:00:00Z';
    this.estimatedTimeInSeconds = input.estimatedTimeInSeconds ?? { min: 0, max: 0 };
    this.temperatureInCelsius = input.temperatureInCelsius ?? { min: 0, max: 0 };
    this.archivedAt = input.archivedAt;
    this.lastUpdatedAt = input.lastUpdatedAt;
    this.belongsToRecipe = input.belongsToRecipe ?? '';
    this.conditionExpression = input.conditionExpression ?? '';
    this.id = input.id ?? '';
    this.notes = input.notes ?? '';
    this.explicitInstructions = input.explicitInstructions ?? '';
    this.media = input.media ?? [];
    this.products = input.products ?? [];
    this.instruments = input.instruments ?? [];
    this.vessels = input.vessels ?? [];
    this.completionConditions = input.completionConditions ?? [];
    this.ingredients = input.ingredients ?? [];
    this.preparation = input.preparation ?? new ValidPreparation();
    this.index = input.index ?? 0;
    this.optional = input.optional ?? false;
    this.startTimerAutomatically = input.startTimerAutomatically ?? false;
  }
}

export interface IRecipeStepCreationRequestInput {
  estimatedTimeInSeconds: NonNullable<NumberRange>;
  temperatureInCelsius: NonNullable<NumberRange>;
  preparationID: NonNullable<string>;
  notes: NonNullable<string>;
  conditionExpression: NonNullable<string>;
  explicitInstructions: NonNullable<string>;
  instruments: NonNullable<Array<RecipeStepInstrumentCreationRequestInput>>;
  vessels: NonNullable<Array<RecipeStepVesselCreationRequestInput>>;
  products: NonNullable<Array<RecipeStepProductCreationRequestInput>>;
  ingredients: NonNullable<Array<RecipeStepIngredientCreationRequestInput>>;
  completionConditions: NonNullable<Array<RecipeStepCompletionConditionCreationRequestInput>>;
  index: NonNullable<number>;
  optional: NonNullable<boolean>;
  startTimerAutomatically: NonNullable<boolean>;
}

export class RecipeStepCreationRequestInput implements IRecipeStepCreationRequestInput {
  estimatedTimeInSeconds: NonNullable<NumberRange> = { min: 0, max: 0 };
  temperatureInCelsius: NonNullable<NumberRange> = { min: 0, max: 0 };
  preparationID: NonNullable<string> = '';
  notes: NonNullable<string> = '';
  conditionExpression: NonNullable<string> = '';
  explicitInstructions: NonNullable<string> = '';
  instruments: NonNullable<Array<RecipeStepInstrumentCreationRequestInput>> = [];
  vessels: NonNullable<Array<RecipeStepVesselCreationRequestInput>> = [];
  products: NonNullable<Array<RecipeStepProductCreationRequestInput>> = [];
  ingredients: NonNullable<Array<RecipeStepIngredientCreationRequestInput>> = [];
  completionConditions: NonNullable<Array<RecipeStepCompletionConditionCreationRequestInput>> = [];
  index: NonNullable<number> = 0;
  optional: NonNullable<boolean> = false;
  startTimerAutomatically: NonNullable<boolean> = false;

  constructor(input: Partial<RecipeStepCreationRequestInput> = {}) {
    this.estimatedTimeInSeconds = input.estimatedTimeInSeconds ?? { min: 0, max: 0 };
    this.temperatureInCelsius = input.temperatureInCelsius ?? { min: 0, max: 0 };
    this.preparationID = input.preparationID ?? '';
    this.notes = input.notes ?? '';
    this.conditionExpression = input.conditionExpression ?? '';
    this.explicitInstructions = input.explicitInstructions ?? '';
    this.instruments = input.instruments ?? [];
    this.vessels = input.vessels ?? [];
    this.products = input.products ?? [];
    this.ingredients = input.ingredients ?? [];
    this.completionConditions = input.completionConditions ?? [];
    this.index = input.index ?? 0;
    this.optional = input.optional ?? false;
    this.startTimerAutomatically = input.startTimerAutomatically ?? false;
  }
}

export interface IRecipeStepUpdateRequestInput {
  estimatedTimeInSeconds: NonNullable<NumberRange>;
  temperatureInCelsius: NonNullable<NumberRange>;
  notes?: string;
  preparation?: ValidPreparation;
  index?: number;
  optional?: boolean;
  explicitInstructions?: string;
  conditionExpression?: string;
  startTimerAutomatically?: boolean;
  belongsToRecipe: NonNullable<string>;
}

export class RecipeStepUpdateRequestInput implements IRecipeStepUpdateRequestInput {
  estimatedTimeInSeconds: NonNullable<NumberRange> = { min: 0, max: 0 };
  temperatureInCelsius: NonNullable<NumberRange> = { min: 0, max: 0 };
  notes?: string;
  preparation?: ValidPreparation;
  index?: number;
  optional?: boolean = false;
  explicitInstructions?: string;
  conditionExpression?: string;
  startTimerAutomatically?: boolean = false;
  belongsToRecipe: NonNullable<string> = '';

  constructor(input: Partial<RecipeStepUpdateRequestInput> = {}) {
    this.estimatedTimeInSeconds = input.estimatedTimeInSeconds ?? { min: 0, max: 0 };
    this.temperatureInCelsius = input.temperatureInCelsius ?? { min: 0, max: 0 };
    this.notes = input.notes;
    this.preparation = input.preparation;
    this.index = input.index;
    this.optional = input.optional ?? false;
    this.explicitInstructions = input.explicitInstructions;
    this.conditionExpression = input.conditionExpression;
    this.startTimerAutomatically = input.startTimerAutomatically ?? false;
    this.belongsToRecipe = input.belongsToRecipe ?? '';
  }
}
