// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-axios';
import type {
  AdminUpdateUserStatusData,
  AdminUpdateUserStatusError,
  AdminUpdateUserStatusResponse,
  GetAuditLogEntryByIdData,
  GetAuditLogEntryByIdError,
  GetAuditLogEntryByIdResponse,
  GetAuditLogEntriesForHouseholdError,
  GetAuditLogEntriesForHouseholdResponse,
  GetAuditLogEntriesForUserError,
  GetAuditLogEntriesForUserResponse,
  GetHouseholdInvitationData,
  GetHouseholdInvitationError,
  GetHouseholdInvitationResponse,
  AcceptHouseholdInvitationData,
  AcceptHouseholdInvitationError,
  AcceptHouseholdInvitationResponse,
  CancelHouseholdInvitationData,
  CancelHouseholdInvitationError,
  CancelHouseholdInvitationResponse,
  RejectHouseholdInvitationData,
  RejectHouseholdInvitationError,
  RejectHouseholdInvitationResponse,
  GetReceivedHouseholdInvitationsData,
  GetReceivedHouseholdInvitationsError,
  GetReceivedHouseholdInvitationsResponse,
  GetSentHouseholdInvitationsData,
  GetSentHouseholdInvitationsError,
  GetSentHouseholdInvitationsResponse,
  GetHouseholdsData,
  GetHouseholdsError,
  GetHouseholdsResponse,
  CreateHouseholdData,
  CreateHouseholdError,
  CreateHouseholdResponse,
  ArchiveHouseholdData,
  ArchiveHouseholdError,
  ArchiveHouseholdResponse,
  GetHouseholdData,
  GetHouseholdError,
  GetHouseholdResponse,
  UpdateHouseholdData,
  UpdateHouseholdError,
  UpdateHouseholdResponse,
  SetDefaultHouseholdData,
  SetDefaultHouseholdError,
  SetDefaultHouseholdResponse,
  CreateHouseholdInvitationData,
  CreateHouseholdInvitationError,
  CreateHouseholdInvitationResponse,
  GetHouseholdInvitationByIdData,
  GetHouseholdInvitationByIdError,
  GetHouseholdInvitationByIdResponse,
  PostHouseholdsHouseholdIdInviteData,
  PostHouseholdsHouseholdIdInviteError,
  PostHouseholdsHouseholdIdInviteResponse,
  ArchiveUserMembershipData,
  ArchiveUserMembershipError,
  ArchiveUserMembershipResponse,
  UpdateHouseholdMemberPermissionsData,
  UpdateHouseholdMemberPermissionsError,
  UpdateHouseholdMemberPermissionsResponse,
  TransferHouseholdOwnershipData,
  TransferHouseholdOwnershipError,
  TransferHouseholdOwnershipResponse,
  GetActiveHouseholdError,
  GetActiveHouseholdResponse,
  GetHouseholdInstrumentOwnershipsData,
  GetHouseholdInstrumentOwnershipsError,
  GetHouseholdInstrumentOwnershipsResponse,
  CreateHouseholdInstrumentOwnershipData,
  CreateHouseholdInstrumentOwnershipError,
  CreateHouseholdInstrumentOwnershipResponse,
  ArchiveHouseholdInstrumentOwnershipData,
  ArchiveHouseholdInstrumentOwnershipError,
  ArchiveHouseholdInstrumentOwnershipResponse,
  GetHouseholdInstrumentOwnershipData,
  GetHouseholdInstrumentOwnershipError,
  GetHouseholdInstrumentOwnershipResponse,
  UpdateHouseholdInstrumentOwnershipData,
  UpdateHouseholdInstrumentOwnershipError,
  UpdateHouseholdInstrumentOwnershipResponse,
  GetMealPlansData,
  GetMealPlansError,
  GetMealPlansResponse,
  CreateMealPlanData,
  CreateMealPlanError,
  CreateMealPlanResponse,
  ArchiveMealPlanData,
  ArchiveMealPlanError,
  ArchiveMealPlanResponse,
  GetMealPlanData,
  GetMealPlanError,
  GetMealPlanResponse,
  UpdateMealPlanData,
  UpdateMealPlanError,
  UpdateMealPlanResponse,
  GetMealPlanEventsData,
  GetMealPlanEventsError,
  GetMealPlanEventsResponse,
  CreateMealPlanEventData,
  CreateMealPlanEventError,
  CreateMealPlanEventResponse,
  ArchiveMealPlanEventData,
  ArchiveMealPlanEventError,
  ArchiveMealPlanEventResponse,
  GetMealPlanEventData,
  GetMealPlanEventError,
  GetMealPlanEventResponse,
  UpdateMealPlanEventData,
  UpdateMealPlanEventError,
  UpdateMealPlanEventResponse,
  GetMealPlanOptionsData,
  GetMealPlanOptionsError,
  GetMealPlanOptionsResponse,
  CreateMealPlanOptionData,
  CreateMealPlanOptionError,
  CreateMealPlanOptionResponse,
  ArchiveMealPlanOptionData,
  ArchiveMealPlanOptionError,
  ArchiveMealPlanOptionResponse,
  GetMealPlanOptionData,
  GetMealPlanOptionError,
  GetMealPlanOptionResponse,
  UpdateMealPlanOptionData,
  UpdateMealPlanOptionError,
  UpdateMealPlanOptionResponse,
  GetMealPlanOptionVotesData,
  GetMealPlanOptionVotesError,
  GetMealPlanOptionVotesResponse,
  ArchiveMealPlanOptionVoteData,
  ArchiveMealPlanOptionVoteError,
  ArchiveMealPlanOptionVoteResponse,
  GetMealPlanOptionVoteData,
  GetMealPlanOptionVoteError,
  GetMealPlanOptionVoteResponse,
  UpdateMealPlanOptionVoteData,
  UpdateMealPlanOptionVoteError,
  UpdateMealPlanOptionVoteResponse,
  CreateMealPlanOptionVoteData,
  CreateMealPlanOptionVoteError,
  CreateMealPlanOptionVoteResponse,
  FinalizeMealPlanData,
  FinalizeMealPlanError,
  FinalizeMealPlanResponse,
  GetMealPlanGroceryListItemsForMealPlanData,
  GetMealPlanGroceryListItemsForMealPlanError,
  GetMealPlanGroceryListItemsForMealPlanResponse,
  CreateMealPlanGroceryListItemData,
  CreateMealPlanGroceryListItemError,
  CreateMealPlanGroceryListItemResponse,
  ArchiveMealPlanGroceryListItemData,
  ArchiveMealPlanGroceryListItemError,
  ArchiveMealPlanGroceryListItemResponse,
  GetMealPlanGroceryListItemData,
  GetMealPlanGroceryListItemError,
  GetMealPlanGroceryListItemResponse,
  UpdateMealPlanGroceryListItemData,
  UpdateMealPlanGroceryListItemError,
  UpdateMealPlanGroceryListItemResponse,
  GetMealPlanTasksData,
  GetMealPlanTasksError,
  GetMealPlanTasksResponse,
  CreateMealPlanTaskData,
  CreateMealPlanTaskError,
  CreateMealPlanTaskResponse,
  GetMealPlanTaskData,
  GetMealPlanTaskError,
  GetMealPlanTaskResponse,
  UpdateMealPlanTaskStatusData,
  UpdateMealPlanTaskStatusError,
  UpdateMealPlanTaskStatusResponse,
  GetMealsData,
  GetMealsError,
  GetMealsResponse,
  CreateMealData,
  CreateMealError,
  CreateMealResponse,
  ArchiveMealData,
  ArchiveMealError,
  ArchiveMealResponse,
  GetMealData,
  GetMealError,
  GetMealResponse,
  SearchForMealsData,
  SearchForMealsError,
  SearchForMealsResponse,
  GetOauth2ClientsData,
  GetOauth2ClientsError,
  GetOauth2ClientsResponse,
  CreateOauth2ClientData,
  CreateOauth2ClientError,
  CreateOauth2ClientResponse,
  ArchiveOauth2ClientData,
  ArchiveOauth2ClientError,
  ArchiveOauth2ClientResponse,
  GetOauth2ClientData,
  GetOauth2ClientError,
  GetOauth2ClientResponse,
  GetRecipesData,
  GetRecipesError,
  GetRecipesResponse,
  CreateRecipeData,
  CreateRecipeError,
  CreateRecipeResponse,
  ArchiveRecipeData,
  ArchiveRecipeError,
  ArchiveRecipeResponse,
  GetRecipeData,
  GetRecipeError,
  GetRecipeResponse,
  UpdateRecipeData,
  UpdateRecipeError,
  UpdateRecipeResponse,
  CloneRecipeData,
  CloneRecipeError,
  CloneRecipeResponse,
  GetRecipeDagData,
  GetRecipeDagError,
  GetRecipeDagResponse,
  UploadMediaForRecipeData,
  GetMermaidDiagramForRecipeData,
  GetRecipeMealPlanTasksData,
  GetRecipeMealPlanTasksError,
  GetRecipeMealPlanTasksResponse,
  GetRecipePrepTasksData,
  GetRecipePrepTasksError,
  GetRecipePrepTasksResponse,
  CreateRecipePrepTaskData,
  CreateRecipePrepTaskError,
  CreateRecipePrepTaskResponse,
  ArchiveRecipePrepTaskData,
  ArchiveRecipePrepTaskError,
  ArchiveRecipePrepTaskResponse,
  GetRecipePrepTaskData,
  GetRecipePrepTaskError,
  GetRecipePrepTaskResponse,
  UpdateRecipePrepTaskData,
  UpdateRecipePrepTaskError,
  UpdateRecipePrepTaskResponse,
  GetRecipeRatingsData,
  GetRecipeRatingsError,
  GetRecipeRatingsResponse,
  CreateRecipeRatingData,
  CreateRecipeRatingError,
  CreateRecipeRatingResponse,
  ArchiveRecipeRatingData,
  ArchiveRecipeRatingError,
  ArchiveRecipeRatingResponse,
  GetRecipeRatingData,
  GetRecipeRatingError,
  GetRecipeRatingResponse,
  UpdateRecipeRatingData,
  UpdateRecipeRatingError,
  UpdateRecipeRatingResponse,
  GetRecipeStepsData,
  GetRecipeStepsError,
  GetRecipeStepsResponse,
  CreateRecipeStepData,
  CreateRecipeStepError,
  CreateRecipeStepResponse,
  ArchiveRecipeStepData,
  ArchiveRecipeStepError,
  ArchiveRecipeStepResponse,
  GetRecipeStepData,
  GetRecipeStepError,
  GetRecipeStepResponse,
  UpdateRecipeStepData,
  UpdateRecipeStepError,
  UpdateRecipeStepResponse,
  GetRecipeStepCompletionConditionsData,
  GetRecipeStepCompletionConditionsError,
  GetRecipeStepCompletionConditionsResponse,
  CreateRecipeStepCompletionConditionData,
  CreateRecipeStepCompletionConditionError,
  CreateRecipeStepCompletionConditionResponse,
  ArchiveRecipeStepCompletionConditionData,
  ArchiveRecipeStepCompletionConditionError,
  ArchiveRecipeStepCompletionConditionResponse,
  GetRecipeStepCompletionConditionData,
  GetRecipeStepCompletionConditionError,
  GetRecipeStepCompletionConditionResponse,
  UpdateRecipeStepCompletionConditionData,
  UpdateRecipeStepCompletionConditionError,
  UpdateRecipeStepCompletionConditionResponse,
  UploadMediaForRecipeStepData,
  GetRecipeStepIngredientsData,
  GetRecipeStepIngredientsError,
  GetRecipeStepIngredientsResponse,
  CreateRecipeStepIngredientData,
  CreateRecipeStepIngredientError,
  CreateRecipeStepIngredientResponse,
  ArchiveRecipeStepIngredientData,
  ArchiveRecipeStepIngredientError,
  ArchiveRecipeStepIngredientResponse,
  GetRecipeStepIngredientData,
  GetRecipeStepIngredientError,
  GetRecipeStepIngredientResponse,
  UpdateRecipeStepIngredientData,
  UpdateRecipeStepIngredientError,
  UpdateRecipeStepIngredientResponse,
  GetRecipeStepInstrumentsData,
  GetRecipeStepInstrumentsError,
  GetRecipeStepInstrumentsResponse,
  CreateRecipeStepInstrumentData,
  CreateRecipeStepInstrumentError,
  CreateRecipeStepInstrumentResponse,
  ArchiveRecipeStepInstrumentData,
  ArchiveRecipeStepInstrumentError,
  ArchiveRecipeStepInstrumentResponse,
  GetRecipeStepInstrumentData,
  GetRecipeStepInstrumentError,
  GetRecipeStepInstrumentResponse,
  UpdateRecipeStepInstrumentData,
  UpdateRecipeStepInstrumentError,
  UpdateRecipeStepInstrumentResponse,
  GetRecipeStepProductsData,
  GetRecipeStepProductsError,
  GetRecipeStepProductsResponse,
  CreateRecipeStepProductData,
  CreateRecipeStepProductError,
  CreateRecipeStepProductResponse,
  ArchiveRecipeStepProductData,
  ArchiveRecipeStepProductError,
  ArchiveRecipeStepProductResponse,
  GetRecipeStepProductData,
  GetRecipeStepProductError,
  GetRecipeStepProductResponse,
  UpdateRecipeStepProductData,
  UpdateRecipeStepProductError,
  UpdateRecipeStepProductResponse,
  GetRecipeStepVesselsData,
  GetRecipeStepVesselsError,
  GetRecipeStepVesselsResponse,
  CreateRecipeStepVesselData,
  CreateRecipeStepVesselError,
  CreateRecipeStepVesselResponse,
  ArchiveRecipeStepVesselData,
  ArchiveRecipeStepVesselError,
  ArchiveRecipeStepVesselResponse,
  GetRecipeStepVesselData,
  GetRecipeStepVesselError,
  GetRecipeStepVesselResponse,
  UpdateRecipeStepVesselData,
  UpdateRecipeStepVesselError,
  UpdateRecipeStepVesselResponse,
  SearchForRecipesData,
  SearchForRecipesError,
  SearchForRecipesResponse,
  GetServiceSettingsData,
  GetServiceSettingsError,
  GetServiceSettingsResponse,
  CreateServiceSettingData,
  CreateServiceSettingError,
  CreateServiceSettingResponse,
  ArchiveServiceSettingData,
  ArchiveServiceSettingError,
  ArchiveServiceSettingResponse,
  GetServiceSettingData,
  GetServiceSettingError,
  GetServiceSettingResponse,
  CreateServiceSettingConfigurationData,
  CreateServiceSettingConfigurationError,
  CreateServiceSettingConfigurationResponse,
  ArchiveServiceSettingConfigurationData,
  ArchiveServiceSettingConfigurationError,
  ArchiveServiceSettingConfigurationResponse,
  UpdateServiceSettingConfigurationData,
  UpdateServiceSettingConfigurationError,
  UpdateServiceSettingConfigurationResponse,
  GetServiceSettingConfigurationsForHouseholdData,
  GetServiceSettingConfigurationsForHouseholdError,
  GetServiceSettingConfigurationsForHouseholdResponse,
  GetServiceSettingConfigurationsForUserData,
  GetServiceSettingConfigurationsForUserError,
  GetServiceSettingConfigurationsForUserResponse,
  GetServiceSettingConfigurationByNameData,
  GetServiceSettingConfigurationByNameError,
  GetServiceSettingConfigurationByNameResponse,
  SearchForServiceSettingsData,
  SearchForServiceSettingsError,
  SearchForServiceSettingsResponse,
  GetUserIngredientPreferencesData,
  GetUserIngredientPreferencesError,
  GetUserIngredientPreferencesResponse,
  CreateUserIngredientPreferenceData,
  CreateUserIngredientPreferenceError,
  CreateUserIngredientPreferenceResponse,
  ArchiveUserIngredientPreferenceData,
  ArchiveUserIngredientPreferenceError,
  ArchiveUserIngredientPreferenceResponse,
  UpdateUserIngredientPreferenceData,
  UpdateUserIngredientPreferenceError,
  UpdateUserIngredientPreferenceResponse,
  GetUserNotificationsData,
  GetUserNotificationsError,
  GetUserNotificationsResponse,
  CreateUserNotificationData,
  CreateUserNotificationError,
  CreateUserNotificationResponse,
  GetUserNotificationData,
  GetUserNotificationError,
  GetUserNotificationResponse,
  UpdateUserNotificationData,
  UpdateUserNotificationError,
  UpdateUserNotificationResponse,
  GetUsersData,
  GetUsersError,
  GetUsersResponse,
  ArchiveUserData,
  ArchiveUserError,
  ArchiveUserResponse,
  GetUserData,
  GetUserError,
  GetUserResponse,
  UploadUserAvatarData,
  UploadUserAvatarError,
  UploadUserAvatarResponse,
  UpdateUserDetailsData,
  UpdateUserDetailsError,
  UpdateUserDetailsResponse,
  UpdateUserEmailAddressData,
  UpdateUserEmailAddressError,
  UpdateUserEmailAddressResponse,
  VerifyUserEmailAddressData,
  VerifyUserEmailAddressError,
  VerifyUserEmailAddressResponse,
  UpdatePasswordData,
  CheckPermissionsData,
  CheckPermissionsError,
  CheckPermissionsResponse,
  SearchForUsersData,
  SearchForUsersError,
  SearchForUsersResponse,
  GetSelfError,
  GetSelfResponse,
  RefreshTotpSecretData,
  RefreshTotpSecretError,
  RefreshTotpSecretResponse,
  UpdateUserUsernameData,
  UpdateUserUsernameError,
  UpdateUserUsernameResponse,
  GetValidIngredientGroupsData,
  GetValidIngredientGroupsError,
  GetValidIngredientGroupsResponse,
  CreateValidIngredientGroupData,
  CreateValidIngredientGroupError,
  CreateValidIngredientGroupResponse,
  ArchiveValidIngredientGroupData,
  ArchiveValidIngredientGroupError,
  ArchiveValidIngredientGroupResponse,
  GetValidIngredientGroupData,
  GetValidIngredientGroupError,
  GetValidIngredientGroupResponse,
  UpdateValidIngredientGroupData,
  UpdateValidIngredientGroupError,
  UpdateValidIngredientGroupResponse,
  SearchForValidIngredientGroupsData,
  SearchForValidIngredientGroupsError,
  SearchForValidIngredientGroupsResponse,
  GetValidIngredientMeasurementUnitsData,
  GetValidIngredientMeasurementUnitsError,
  GetValidIngredientMeasurementUnitsResponse,
  CreateValidIngredientMeasurementUnitData,
  CreateValidIngredientMeasurementUnitError,
  CreateValidIngredientMeasurementUnitResponse,
  ArchiveValidIngredientMeasurementUnitData,
  ArchiveValidIngredientMeasurementUnitError,
  ArchiveValidIngredientMeasurementUnitResponse,
  GetValidIngredientMeasurementUnitData,
  GetValidIngredientMeasurementUnitError,
  GetValidIngredientMeasurementUnitResponse,
  UpdateValidIngredientMeasurementUnitData,
  UpdateValidIngredientMeasurementUnitError,
  UpdateValidIngredientMeasurementUnitResponse,
  GetValidIngredientMeasurementUnitsByIngredientData,
  GetValidIngredientMeasurementUnitsByIngredientError,
  GetValidIngredientMeasurementUnitsByIngredientResponse,
  GetValidIngredientMeasurementUnitsByMeasurementUnitData,
  GetValidIngredientMeasurementUnitsByMeasurementUnitError,
  GetValidIngredientMeasurementUnitsByMeasurementUnitResponse,
  GetValidIngredientPreparationsData,
  GetValidIngredientPreparationsError,
  GetValidIngredientPreparationsResponse,
  CreateValidIngredientPreparationData,
  CreateValidIngredientPreparationError,
  CreateValidIngredientPreparationResponse,
  ArchiveValidIngredientPreparationData,
  ArchiveValidIngredientPreparationError,
  ArchiveValidIngredientPreparationResponse,
  GetValidIngredientPreparationData,
  GetValidIngredientPreparationError,
  GetValidIngredientPreparationResponse,
  UpdateValidIngredientPreparationData,
  UpdateValidIngredientPreparationError,
  UpdateValidIngredientPreparationResponse,
  GetValidIngredientPreparationsByIngredientData,
  GetValidIngredientPreparationsByIngredientError,
  GetValidIngredientPreparationsByIngredientResponse,
  GetValidIngredientPreparationsByPreparationData,
  GetValidIngredientPreparationsByPreparationError,
  GetValidIngredientPreparationsByPreparationResponse,
  GetValidIngredientStateIngredientsData,
  GetValidIngredientStateIngredientsError,
  GetValidIngredientStateIngredientsResponse,
  CreateValidIngredientStateIngredientData,
  CreateValidIngredientStateIngredientError,
  CreateValidIngredientStateIngredientResponse,
  ArchiveValidIngredientStateIngredientData,
  ArchiveValidIngredientStateIngredientError,
  ArchiveValidIngredientStateIngredientResponse,
  GetValidIngredientStateIngredientData,
  GetValidIngredientStateIngredientError,
  GetValidIngredientStateIngredientResponse,
  UpdateValidIngredientStateIngredientData,
  UpdateValidIngredientStateIngredientError,
  UpdateValidIngredientStateIngredientResponse,
  GetValidIngredientStateIngredientsByIngredientData,
  GetValidIngredientStateIngredientsByIngredientError,
  GetValidIngredientStateIngredientsByIngredientResponse,
  GetValidIngredientStateIngredientsByIngredientStateData,
  GetValidIngredientStateIngredientsByIngredientStateError,
  GetValidIngredientStateIngredientsByIngredientStateResponse,
  GetValidIngredientStatesData,
  GetValidIngredientStatesError,
  GetValidIngredientStatesResponse,
  CreateValidIngredientStateData,
  CreateValidIngredientStateError,
  CreateValidIngredientStateResponse,
  ArchiveValidIngredientStateData,
  ArchiveValidIngredientStateError,
  ArchiveValidIngredientStateResponse,
  GetValidIngredientStateData,
  GetValidIngredientStateError,
  GetValidIngredientStateResponse,
  UpdateValidIngredientStateData,
  UpdateValidIngredientStateError,
  UpdateValidIngredientStateResponse,
  SearchForValidIngredientStatesData,
  SearchForValidIngredientStatesError,
  SearchForValidIngredientStatesResponse,
  GetValidIngredientsData,
  GetValidIngredientsError,
  GetValidIngredientsResponse,
  CreateValidIngredientData,
  CreateValidIngredientError,
  CreateValidIngredientResponse,
  ArchiveValidIngredientData,
  ArchiveValidIngredientError,
  ArchiveValidIngredientResponse,
  GetValidIngredientData,
  GetValidIngredientError,
  GetValidIngredientResponse,
  UpdateValidIngredientData,
  UpdateValidIngredientError,
  UpdateValidIngredientResponse,
  GetValidIngredientsByPreparationData,
  GetValidIngredientsByPreparationError,
  GetValidIngredientsByPreparationResponse,
  GetRandomValidIngredientError,
  GetRandomValidIngredientResponse,
  SearchForValidIngredientsData,
  SearchForValidIngredientsError,
  SearchForValidIngredientsResponse,
  GetValidInstrumentsData,
  GetValidInstrumentsError,
  GetValidInstrumentsResponse,
  CreateValidInstrumentData,
  CreateValidInstrumentError,
  CreateValidInstrumentResponse,
  ArchiveValidInstrumentData,
  ArchiveValidInstrumentError,
  ArchiveValidInstrumentResponse,
  GetValidInstrumentData,
  GetValidInstrumentError,
  GetValidInstrumentResponse,
  UpdateValidInstrumentData,
  UpdateValidInstrumentError,
  UpdateValidInstrumentResponse,
  GetRandomValidInstrumentError,
  GetRandomValidInstrumentResponse,
  SearchForValidInstrumentsData,
  SearchForValidInstrumentsError,
  SearchForValidInstrumentsResponse,
  CreateValidMeasurementUnitConversionData,
  CreateValidMeasurementUnitConversionError,
  CreateValidMeasurementUnitConversionResponse,
  ArchiveValidMeasurementUnitConversionData,
  ArchiveValidMeasurementUnitConversionError,
  ArchiveValidMeasurementUnitConversionResponse,
  GetValidMeasurementUnitConversionData,
  GetValidMeasurementUnitConversionError,
  GetValidMeasurementUnitConversionResponse,
  UpdateValidMeasurementUnitConversionData,
  UpdateValidMeasurementUnitConversionError,
  UpdateValidMeasurementUnitConversionResponse,
  GetValidMeasurementUnitConversionsFromUnitData,
  GetValidMeasurementUnitConversionsFromUnitError,
  GetValidMeasurementUnitConversionsFromUnitResponse,
  ValidMeasurementUnitConversionsToUnitData,
  ValidMeasurementUnitConversionsToUnitError,
  ValidMeasurementUnitConversionsToUnitResponse,
  GetValidMeasurementUnitsData,
  GetValidMeasurementUnitsError,
  GetValidMeasurementUnitsResponse,
  CreateValidMeasurementUnitData,
  CreateValidMeasurementUnitError,
  CreateValidMeasurementUnitResponse,
  ArchiveValidMeasurementUnitData,
  ArchiveValidMeasurementUnitError,
  ArchiveValidMeasurementUnitResponse,
  GetValidMeasurementUnitData,
  GetValidMeasurementUnitError,
  GetValidMeasurementUnitResponse,
  UpdateValidMeasurementUnitData,
  UpdateValidMeasurementUnitError,
  UpdateValidMeasurementUnitResponse,
  SearchValidMeasurementUnitsByIngredientData,
  SearchValidMeasurementUnitsByIngredientError,
  SearchValidMeasurementUnitsByIngredientResponse,
  SearchForValidMeasurementUnitsData,
  SearchForValidMeasurementUnitsError,
  SearchForValidMeasurementUnitsResponse,
  GetValidPreparationInstrumentsData,
  GetValidPreparationInstrumentsError,
  GetValidPreparationInstrumentsResponse,
  CreateValidPreparationInstrumentData,
  CreateValidPreparationInstrumentError,
  CreateValidPreparationInstrumentResponse,
  ArchiveValidPreparationInstrumentData,
  ArchiveValidPreparationInstrumentError,
  ArchiveValidPreparationInstrumentResponse,
  GetValidPreparationInstrumentData,
  GetValidPreparationInstrumentError,
  GetValidPreparationInstrumentResponse,
  UpdateValidPreparationInstrumentData,
  UpdateValidPreparationInstrumentError,
  UpdateValidPreparationInstrumentResponse,
  GetValidPreparationInstrumentsByInstrumentData,
  GetValidPreparationInstrumentsByInstrumentError,
  GetValidPreparationInstrumentsByInstrumentResponse,
  GetValidPreparationInstrumentsByPreparationData,
  GetValidPreparationInstrumentsByPreparationError,
  GetValidPreparationInstrumentsByPreparationResponse,
  GetValidPreparationVesselsData,
  GetValidPreparationVesselsError,
  GetValidPreparationVesselsResponse,
  CreateValidPreparationVesselData,
  CreateValidPreparationVesselError,
  CreateValidPreparationVesselResponse,
  ArchiveValidPreparationVesselData,
  ArchiveValidPreparationVesselError,
  ArchiveValidPreparationVesselResponse,
  GetValidPreparationVesselData,
  GetValidPreparationVesselError,
  GetValidPreparationVesselResponse,
  UpdateValidPreparationVesselData,
  UpdateValidPreparationVesselError,
  UpdateValidPreparationVesselResponse,
  GetValidPreparationVesselsByPreparationData,
  GetValidPreparationVesselsByPreparationError,
  GetValidPreparationVesselsByPreparationResponse,
  GetValidPreparationVesselsByVesselData,
  GetValidPreparationVesselsByVesselError,
  GetValidPreparationVesselsByVesselResponse,
  GetValidPreparationsData,
  GetValidPreparationsError,
  GetValidPreparationsResponse,
  CreateValidPreparationData,
  CreateValidPreparationError,
  CreateValidPreparationResponse,
  ArchiveValidPreparationData,
  ArchiveValidPreparationError,
  ArchiveValidPreparationResponse,
  GetValidPreparationData,
  GetValidPreparationError,
  GetValidPreparationResponse,
  UpdateValidPreparationData,
  UpdateValidPreparationError,
  UpdateValidPreparationResponse,
  GetRandomValidPreparationError,
  GetRandomValidPreparationResponse,
  SearchForValidPreparationsData,
  SearchForValidPreparationsError,
  SearchForValidPreparationsResponse,
  GetValidVesselsData,
  GetValidVesselsError,
  GetValidVesselsResponse,
  CreateValidVesselData,
  CreateValidVesselError,
  CreateValidVesselResponse,
  ArchiveValidVesselData,
  ArchiveValidVesselError,
  ArchiveValidVesselResponse,
  GetValidVesselData,
  GetValidVesselError,
  GetValidVesselResponse,
  UpdateValidVesselData,
  UpdateValidVesselError,
  UpdateValidVesselResponse,
  GetRandomValidVesselError,
  GetRandomValidVesselResponse,
  SearchForValidVesselsData,
  SearchForValidVesselsError,
  SearchForValidVesselsResponse,
  GetWebhooksData,
  GetWebhooksError,
  GetWebhooksResponse,
  CreateWebhookData,
  CreateWebhookError,
  CreateWebhookResponse,
  ArchiveWebhookData,
  ArchiveWebhookError,
  ArchiveWebhookResponse,
  GetWebhookData,
  GetWebhookError,
  GetWebhookResponse,
  CreateWebhookTriggerEventData,
  CreateWebhookTriggerEventError,
  CreateWebhookTriggerEventResponse,
  ArchiveWebhookTriggerEventData,
  ArchiveWebhookTriggerEventError,
  ArchiveWebhookTriggerEventResponse,
  RunFinalizeMealPlanWorkerData,
  RunFinalizeMealPlanWorkerError,
  RunFinalizeMealPlanWorkerResponse,
  GetAuthStatusError,
  GetAuthStatusResponse,
  CreateUserData,
  CreateUserError,
  CreateUserResponse,
  VerifyEmailAddressData,
  VerifyEmailAddressError,
  VerifyEmailAddressResponse,
  LoginForJwtData,
  LoginForJwtError,
  LoginForJwtResponse,
  AdminLoginForJwtData,
  AdminLoginForJwtError,
  AdminLoginForJwtResponse,
  RequestPasswordResetTokenData,
  RequestPasswordResetTokenError,
  RequestPasswordResetTokenResponse,
  RedeemPasswordResetTokenData,
  RedeemPasswordResetTokenError,
  RedeemPasswordResetTokenResponse,
  VerifyTotpSecretData,
  VerifyTotpSecretError,
  VerifyTotpSecretResponse,
  RequestUsernameReminderData,
  RequestUsernameReminderError,
  RequestUsernameReminderResponse,
} from './types.gen';

export const client = createClient(createConfig());

/**
 * checks for service liveness
 */
export const checkForLiveness = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
  return (options?.client ?? client).get<void, unknown, ThrowOnError>({
    ...options,
    url: '/_meta_/live',
  });
};

/**
 * checks for service readiness
 */
export const checkForReadiness = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
  return (options?.client ?? client).get<void, unknown, ThrowOnError>({
    ...options,
    url: '/_meta_/ready',
  });
};

/**
 * Operation for creating UserStatusResponse
 */
export const adminUpdateUserStatus = <ThrowOnError extends boolean = false>(
  options: Options<AdminUpdateUserStatusData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<AdminUpdateUserStatusResponse, AdminUpdateUserStatusError, ThrowOnError>({
    ...options,
    url: '/api/v1/admin/users/status',
  });
};

/**
 * Operation for fetching AuditLogEntry
 */
export const getAuditLogEntryById = <ThrowOnError extends boolean = false>(
  options: Options<GetAuditLogEntryByIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetAuditLogEntryByIdResponse, GetAuditLogEntryByIdError, ThrowOnError>({
    ...options,
    url: '/api/v1/audit_log_entries/{auditLogEntryID}',
  });
};

/**
 * Operation for fetching AuditLogEntry
 */
export const getAuditLogEntriesForHousehold = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAuditLogEntriesForHouseholdResponse,
    GetAuditLogEntriesForHouseholdError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/audit_log_entries/for_household',
  });
};

/**
 * Operation for fetching AuditLogEntry
 */
export const getAuditLogEntriesForUser = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAuditLogEntriesForUserResponse,
    GetAuditLogEntriesForUserError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/audit_log_entries/for_user',
  });
};

/**
 * Operation for fetching HouseholdInvitation
 */
export const getHouseholdInvitation = <ThrowOnError extends boolean = false>(
  options: Options<GetHouseholdInvitationData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetHouseholdInvitationResponse, GetHouseholdInvitationError, ThrowOnError>({
    ...options,
    url: '/api/v1/household_invitations/{householdInvitationID}',
  });
};

/**
 * Operation for updating HouseholdInvitation
 */
export const acceptHouseholdInvitation = <ThrowOnError extends boolean = false>(
  options: Options<AcceptHouseholdInvitationData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    AcceptHouseholdInvitationResponse,
    AcceptHouseholdInvitationError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/household_invitations/{householdInvitationID}/accept',
  });
};

/**
 * Operation for updating HouseholdInvitation
 */
export const cancelHouseholdInvitation = <ThrowOnError extends boolean = false>(
  options: Options<CancelHouseholdInvitationData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    CancelHouseholdInvitationResponse,
    CancelHouseholdInvitationError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/household_invitations/{householdInvitationID}/cancel',
  });
};

/**
 * Operation for updating HouseholdInvitation
 */
export const rejectHouseholdInvitation = <ThrowOnError extends boolean = false>(
  options: Options<RejectHouseholdInvitationData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    RejectHouseholdInvitationResponse,
    RejectHouseholdInvitationError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/household_invitations/{householdInvitationID}/reject',
  });
};

/**
 * Operation for fetching HouseholdInvitation
 */
export const getReceivedHouseholdInvitations = <ThrowOnError extends boolean = false>(
  options: Options<GetReceivedHouseholdInvitationsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetReceivedHouseholdInvitationsResponse,
    GetReceivedHouseholdInvitationsError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/household_invitations/received',
  });
};

/**
 * Operation for fetching HouseholdInvitation
 */
export const getSentHouseholdInvitations = <ThrowOnError extends boolean = false>(
  options: Options<GetSentHouseholdInvitationsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSentHouseholdInvitationsResponse,
    GetSentHouseholdInvitationsError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/household_invitations/sent',
  });
};

/**
 * Operation for fetching Household
 */
export const getHouseholds = <ThrowOnError extends boolean = false>(
  options: Options<GetHouseholdsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetHouseholdsResponse, GetHouseholdsError, ThrowOnError>({
    ...options,
    url: '/api/v1/households',
  });
};

/**
 * Operation for creating Household
 */
export const createHousehold = <ThrowOnError extends boolean = false>(
  options: Options<CreateHouseholdData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CreateHouseholdResponse, CreateHouseholdError, ThrowOnError>({
    ...options,
    url: '/api/v1/households',
  });
};

/**
 * Operation for archiving Household
 */
export const archiveHousehold = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveHouseholdData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<ArchiveHouseholdResponse, ArchiveHouseholdError, ThrowOnError>({
    ...options,
    url: '/api/v1/households/{householdID}',
  });
};

/**
 * Operation for fetching Household
 */
export const getHousehold = <ThrowOnError extends boolean = false>(
  options: Options<GetHouseholdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetHouseholdResponse, GetHouseholdError, ThrowOnError>({
    ...options,
    url: '/api/v1/households/{householdID}',
  });
};

/**
 * Operation for updating Household
 */
export const updateHousehold = <ThrowOnError extends boolean = false>(
  options: Options<UpdateHouseholdData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<UpdateHouseholdResponse, UpdateHouseholdError, ThrowOnError>({
    ...options,
    url: '/api/v1/households/{householdID}',
  });
};

/**
 * Operation for creating Household
 */
export const setDefaultHousehold = <ThrowOnError extends boolean = false>(
  options: Options<SetDefaultHouseholdData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<SetDefaultHouseholdResponse, SetDefaultHouseholdError, ThrowOnError>({
    ...options,
    url: '/api/v1/households/{householdID}/default',
  });
};

/**
 * Operation for creating HouseholdInvitation
 */
export const createHouseholdInvitation = <ThrowOnError extends boolean = false>(
  options: Options<CreateHouseholdInvitationData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateHouseholdInvitationResponse,
    CreateHouseholdInvitationError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/households/{householdID}/invitations',
  });
};

/**
 * Operation for fetching HouseholdInvitation
 */
export const getHouseholdInvitationById = <ThrowOnError extends boolean = false>(
  options: Options<GetHouseholdInvitationByIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetHouseholdInvitationByIdResponse,
    GetHouseholdInvitationByIdError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/households/{householdID}/invitations/{householdInvitationID}',
  });
};

/**
 * Operation for creating HouseholdInvitation
 */
export const postHouseholdsHouseholdIdInvite = <ThrowOnError extends boolean = false>(
  options: Options<PostHouseholdsHouseholdIdInviteData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    PostHouseholdsHouseholdIdInviteResponse,
    PostHouseholdsHouseholdIdInviteError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/households/{householdID}/invite',
  });
};

/**
 * Operation for archiving HouseholdUserMembership
 */
export const archiveUserMembership = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveUserMembershipData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<ArchiveUserMembershipResponse, ArchiveUserMembershipError, ThrowOnError>({
    ...options,
    url: '/api/v1/households/{householdID}/members/{userID}',
  });
};

/**
 * Operation for updating UserPermissionsResponse
 */
export const updateHouseholdMemberPermissions = <ThrowOnError extends boolean = false>(
  options: Options<UpdateHouseholdMemberPermissionsData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    UpdateHouseholdMemberPermissionsResponse,
    UpdateHouseholdMemberPermissionsError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/households/{householdID}/members/{userID}/permissions',
  });
};

/**
 * Operation for creating Household
 */
export const transferHouseholdOwnership = <ThrowOnError extends boolean = false>(
  options: Options<TransferHouseholdOwnershipData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    TransferHouseholdOwnershipResponse,
    TransferHouseholdOwnershipError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/households/{householdID}/transfer',
  });
};

/**
 * Operation for fetching Household
 */
export const getActiveHousehold = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
  return (options?.client ?? client).get<GetActiveHouseholdResponse, GetActiveHouseholdError, ThrowOnError>({
    ...options,
    url: '/api/v1/households/current',
  });
};

/**
 * Operation for fetching HouseholdInstrumentOwnership
 */
export const getHouseholdInstrumentOwnerships = <ThrowOnError extends boolean = false>(
  options: Options<GetHouseholdInstrumentOwnershipsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetHouseholdInstrumentOwnershipsResponse,
    GetHouseholdInstrumentOwnershipsError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/households/instruments',
  });
};

/**
 * Operation for creating HouseholdInstrumentOwnership
 */
export const createHouseholdInstrumentOwnership = <ThrowOnError extends boolean = false>(
  options: Options<CreateHouseholdInstrumentOwnershipData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateHouseholdInstrumentOwnershipResponse,
    CreateHouseholdInstrumentOwnershipError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/households/instruments',
  });
};

/**
 * Operation for archiving HouseholdInstrumentOwnership
 */
export const archiveHouseholdInstrumentOwnership = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveHouseholdInstrumentOwnershipData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    ArchiveHouseholdInstrumentOwnershipResponse,
    ArchiveHouseholdInstrumentOwnershipError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/households/instruments/{householdInstrumentOwnershipID}',
  });
};

/**
 * Operation for fetching HouseholdInstrumentOwnership
 */
export const getHouseholdInstrumentOwnership = <ThrowOnError extends boolean = false>(
  options: Options<GetHouseholdInstrumentOwnershipData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetHouseholdInstrumentOwnershipResponse,
    GetHouseholdInstrumentOwnershipError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/households/instruments/{householdInstrumentOwnershipID}',
  });
};

/**
 * Operation for updating HouseholdInstrumentOwnership
 */
export const updateHouseholdInstrumentOwnership = <ThrowOnError extends boolean = false>(
  options: Options<UpdateHouseholdInstrumentOwnershipData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateHouseholdInstrumentOwnershipResponse,
    UpdateHouseholdInstrumentOwnershipError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/households/instruments/{householdInstrumentOwnershipID}',
  });
};

/**
 * Operation for fetching MealPlan
 */
export const getMealPlans = <ThrowOnError extends boolean = false>(
  options: Options<GetMealPlansData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetMealPlansResponse, GetMealPlansError, ThrowOnError>({
    ...options,
    url: '/api/v1/meal_plans',
  });
};

/**
 * Operation for creating MealPlan
 */
export const createMealPlan = <ThrowOnError extends boolean = false>(
  options: Options<CreateMealPlanData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CreateMealPlanResponse, CreateMealPlanError, ThrowOnError>({
    ...options,
    url: '/api/v1/meal_plans',
  });
};

/**
 * Operation for archiving MealPlan
 */
export const archiveMealPlan = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveMealPlanData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<ArchiveMealPlanResponse, ArchiveMealPlanError, ThrowOnError>({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}',
  });
};

/**
 * Operation for fetching MealPlan
 */
export const getMealPlan = <ThrowOnError extends boolean = false>(options: Options<GetMealPlanData, ThrowOnError>) => {
  return (options?.client ?? client).get<GetMealPlanResponse, GetMealPlanError, ThrowOnError>({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}',
  });
};

/**
 * Operation for updating MealPlan
 */
export const updateMealPlan = <ThrowOnError extends boolean = false>(
  options: Options<UpdateMealPlanData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<UpdateMealPlanResponse, UpdateMealPlanError, ThrowOnError>({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}',
  });
};

/**
 * Operation for fetching MealPlanEvent
 */
export const getMealPlanEvents = <ThrowOnError extends boolean = false>(
  options: Options<GetMealPlanEventsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetMealPlanEventsResponse, GetMealPlanEventsError, ThrowOnError>({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}/events',
  });
};

/**
 * Operation for creating MealPlanEvent
 */
export const createMealPlanEvent = <ThrowOnError extends boolean = false>(
  options: Options<CreateMealPlanEventData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CreateMealPlanEventResponse, CreateMealPlanEventError, ThrowOnError>({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}/events',
  });
};

/**
 * Operation for archiving MealPlanEvent
 */
export const archiveMealPlanEvent = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveMealPlanEventData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<ArchiveMealPlanEventResponse, ArchiveMealPlanEventError, ThrowOnError>({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}/events/{mealPlanEventID}',
  });
};

/**
 * Operation for fetching MealPlanEvent
 */
export const getMealPlanEvent = <ThrowOnError extends boolean = false>(
  options: Options<GetMealPlanEventData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetMealPlanEventResponse, GetMealPlanEventError, ThrowOnError>({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}/events/{mealPlanEventID}',
  });
};

/**
 * Operation for updating MealPlanEvent
 */
export const updateMealPlanEvent = <ThrowOnError extends boolean = false>(
  options: Options<UpdateMealPlanEventData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<UpdateMealPlanEventResponse, UpdateMealPlanEventError, ThrowOnError>({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}/events/{mealPlanEventID}',
  });
};

/**
 * Operation for fetching MealPlanOption
 */
export const getMealPlanOptions = <ThrowOnError extends boolean = false>(
  options: Options<GetMealPlanOptionsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetMealPlanOptionsResponse, GetMealPlanOptionsError, ThrowOnError>({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}/events/{mealPlanEventID}/options',
  });
};

/**
 * Operation for creating MealPlanOption
 */
export const createMealPlanOption = <ThrowOnError extends boolean = false>(
  options: Options<CreateMealPlanOptionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CreateMealPlanOptionResponse, CreateMealPlanOptionError, ThrowOnError>({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}/events/{mealPlanEventID}/options',
  });
};

/**
 * Operation for archiving MealPlanOption
 */
export const archiveMealPlanOption = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveMealPlanOptionData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<ArchiveMealPlanOptionResponse, ArchiveMealPlanOptionError, ThrowOnError>({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}/events/{mealPlanEventID}/options/{mealPlanOptionID}',
  });
};

/**
 * Operation for fetching MealPlanOption
 */
export const getMealPlanOption = <ThrowOnError extends boolean = false>(
  options: Options<GetMealPlanOptionData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetMealPlanOptionResponse, GetMealPlanOptionError, ThrowOnError>({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}/events/{mealPlanEventID}/options/{mealPlanOptionID}',
  });
};

/**
 * Operation for updating MealPlanOption
 */
export const updateMealPlanOption = <ThrowOnError extends boolean = false>(
  options: Options<UpdateMealPlanOptionData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<UpdateMealPlanOptionResponse, UpdateMealPlanOptionError, ThrowOnError>({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}/events/{mealPlanEventID}/options/{mealPlanOptionID}',
  });
};

/**
 * Operation for fetching MealPlanOptionVote
 */
export const getMealPlanOptionVotes = <ThrowOnError extends boolean = false>(
  options: Options<GetMealPlanOptionVotesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetMealPlanOptionVotesResponse, GetMealPlanOptionVotesError, ThrowOnError>({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}/events/{mealPlanEventID}/options/{mealPlanOptionID}/votes',
  });
};

/**
 * Operation for archiving MealPlanOptionVote
 */
export const archiveMealPlanOptionVote = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveMealPlanOptionVoteData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    ArchiveMealPlanOptionVoteResponse,
    ArchiveMealPlanOptionVoteError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}/events/{mealPlanEventID}/options/{mealPlanOptionID}/votes/{mealPlanOptionVoteID}',
  });
};

/**
 * Operation for fetching MealPlanOptionVote
 */
export const getMealPlanOptionVote = <ThrowOnError extends boolean = false>(
  options: Options<GetMealPlanOptionVoteData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetMealPlanOptionVoteResponse, GetMealPlanOptionVoteError, ThrowOnError>({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}/events/{mealPlanEventID}/options/{mealPlanOptionID}/votes/{mealPlanOptionVoteID}',
  });
};

/**
 * Operation for updating MealPlanOptionVote
 */
export const updateMealPlanOptionVote = <ThrowOnError extends boolean = false>(
  options: Options<UpdateMealPlanOptionVoteData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<UpdateMealPlanOptionVoteResponse, UpdateMealPlanOptionVoteError, ThrowOnError>(
    {
      ...options,
      url: '/api/v1/meal_plans/{mealPlanID}/events/{mealPlanEventID}/options/{mealPlanOptionID}/votes/{mealPlanOptionVoteID}',
    },
  );
};

/**
 * Operation for creating MealPlanOptionVote
 */
export const createMealPlanOptionVote = <ThrowOnError extends boolean = false>(
  options: Options<CreateMealPlanOptionVoteData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateMealPlanOptionVoteResponse,
    CreateMealPlanOptionVoteError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}/events/{mealPlanEventID}/vote',
  });
};

/**
 * Operation for creating FinalizeMealPlansResponse
 */
export const finalizeMealPlan = <ThrowOnError extends boolean = false>(
  options: Options<FinalizeMealPlanData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<FinalizeMealPlanResponse, FinalizeMealPlanError, ThrowOnError>({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}/finalize',
  });
};

/**
 * Operation for fetching MealPlanGroceryListItem
 */
export const getMealPlanGroceryListItemsForMealPlan = <ThrowOnError extends boolean = false>(
  options: Options<GetMealPlanGroceryListItemsForMealPlanData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetMealPlanGroceryListItemsForMealPlanResponse,
    GetMealPlanGroceryListItemsForMealPlanError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}/grocery_list_items',
  });
};

/**
 * Operation for creating MealPlanGroceryListItem
 */
export const createMealPlanGroceryListItem = <ThrowOnError extends boolean = false>(
  options: Options<CreateMealPlanGroceryListItemData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateMealPlanGroceryListItemResponse,
    CreateMealPlanGroceryListItemError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}/grocery_list_items',
  });
};

/**
 * Operation for archiving MealPlanGroceryListItem
 */
export const archiveMealPlanGroceryListItem = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveMealPlanGroceryListItemData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    ArchiveMealPlanGroceryListItemResponse,
    ArchiveMealPlanGroceryListItemError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}/grocery_list_items/{mealPlanGroceryListItemID}',
  });
};

/**
 * Operation for fetching MealPlanGroceryListItem
 */
export const getMealPlanGroceryListItem = <ThrowOnError extends boolean = false>(
  options: Options<GetMealPlanGroceryListItemData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetMealPlanGroceryListItemResponse,
    GetMealPlanGroceryListItemError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}/grocery_list_items/{mealPlanGroceryListItemID}',
  });
};

/**
 * Operation for updating MealPlanGroceryListItem
 */
export const updateMealPlanGroceryListItem = <ThrowOnError extends boolean = false>(
  options: Options<UpdateMealPlanGroceryListItemData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateMealPlanGroceryListItemResponse,
    UpdateMealPlanGroceryListItemError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}/grocery_list_items/{mealPlanGroceryListItemID}',
  });
};

/**
 * Operation for fetching MealPlanTask
 */
export const getMealPlanTasks = <ThrowOnError extends boolean = false>(
  options: Options<GetMealPlanTasksData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetMealPlanTasksResponse, GetMealPlanTasksError, ThrowOnError>({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}/tasks',
  });
};

/**
 * Operation for creating MealPlanTask
 */
export const createMealPlanTask = <ThrowOnError extends boolean = false>(
  options: Options<CreateMealPlanTaskData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CreateMealPlanTaskResponse, CreateMealPlanTaskError, ThrowOnError>({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}/tasks',
  });
};

/**
 * Operation for fetching MealPlanTask
 */
export const getMealPlanTask = <ThrowOnError extends boolean = false>(
  options: Options<GetMealPlanTaskData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetMealPlanTaskResponse, GetMealPlanTaskError, ThrowOnError>({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}/tasks/{mealPlanTaskID}',
  });
};

/**
 * Operation for updating MealPlanTask
 */
export const updateMealPlanTaskStatus = <ThrowOnError extends boolean = false>(
  options: Options<UpdateMealPlanTaskStatusData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<
    UpdateMealPlanTaskStatusResponse,
    UpdateMealPlanTaskStatusError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/meal_plans/{mealPlanID}/tasks/{mealPlanTaskID}',
  });
};

/**
 * Operation for fetching Meal
 */
export const getMeals = <ThrowOnError extends boolean = false>(options: Options<GetMealsData, ThrowOnError>) => {
  return (options?.client ?? client).get<GetMealsResponse, GetMealsError, ThrowOnError>({
    ...options,
    url: '/api/v1/meals',
  });
};

/**
 * Operation for creating Meal
 */
export const createMeal = <ThrowOnError extends boolean = false>(options: Options<CreateMealData, ThrowOnError>) => {
  return (options?.client ?? client).post<CreateMealResponse, CreateMealError, ThrowOnError>({
    ...options,
    url: '/api/v1/meals',
  });
};

/**
 * Operation for archiving Meal
 */
export const archiveMeal = <ThrowOnError extends boolean = false>(options: Options<ArchiveMealData, ThrowOnError>) => {
  return (options?.client ?? client).delete<ArchiveMealResponse, ArchiveMealError, ThrowOnError>({
    ...options,
    url: '/api/v1/meals/{mealID}',
  });
};

/**
 * Operation for fetching Meal
 */
export const getMeal = <ThrowOnError extends boolean = false>(options: Options<GetMealData, ThrowOnError>) => {
  return (options?.client ?? client).get<GetMealResponse, GetMealError, ThrowOnError>({
    ...options,
    url: '/api/v1/meals/{mealID}',
  });
};

/**
 * Operation for fetching Meal
 */
export const searchForMeals = <ThrowOnError extends boolean = false>(
  options: Options<SearchForMealsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<SearchForMealsResponse, SearchForMealsError, ThrowOnError>({
    ...options,
    url: '/api/v1/meals/search',
  });
};

/**
 * Operation for fetching OAuth2Client
 */
export const getOauth2Clients = <ThrowOnError extends boolean = false>(
  options: Options<GetOauth2ClientsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetOauth2ClientsResponse, GetOauth2ClientsError, ThrowOnError>({
    ...options,
    url: '/api/v1/oauth2_clients',
  });
};

/**
 * Operation for creating OAuth2ClientCreationResponse
 */
export const createOauth2Client = <ThrowOnError extends boolean = false>(
  options: Options<CreateOauth2ClientData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CreateOauth2ClientResponse, CreateOauth2ClientError, ThrowOnError>({
    ...options,
    url: '/api/v1/oauth2_clients',
  });
};

/**
 * Operation for archiving OAuth2Client
 */
export const archiveOauth2Client = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveOauth2ClientData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<ArchiveOauth2ClientResponse, ArchiveOauth2ClientError, ThrowOnError>({
    ...options,
    url: '/api/v1/oauth2_clients/{oauth2ClientID}',
  });
};

/**
 * Operation for fetching OAuth2Client
 */
export const getOauth2Client = <ThrowOnError extends boolean = false>(
  options: Options<GetOauth2ClientData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetOauth2ClientResponse, GetOauth2ClientError, ThrowOnError>({
    ...options,
    url: '/api/v1/oauth2_clients/{oauth2ClientID}',
  });
};

/**
 * Operation for fetching Recipe
 */
export const getRecipes = <ThrowOnError extends boolean = false>(options: Options<GetRecipesData, ThrowOnError>) => {
  return (options?.client ?? client).get<GetRecipesResponse, GetRecipesError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes',
  });
};

/**
 * Operation for creating Recipe
 */
export const createRecipe = <ThrowOnError extends boolean = false>(
  options: Options<CreateRecipeData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CreateRecipeResponse, CreateRecipeError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes',
  });
};

/**
 * Operation for archiving Recipe
 */
export const archiveRecipe = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveRecipeData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<ArchiveRecipeResponse, ArchiveRecipeError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}',
  });
};

/**
 * Operation for fetching Recipe
 */
export const getRecipe = <ThrowOnError extends boolean = false>(options: Options<GetRecipeData, ThrowOnError>) => {
  return (options?.client ?? client).get<GetRecipeResponse, GetRecipeError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}',
  });
};

/**
 * Operation for updating Recipe
 */
export const updateRecipe = <ThrowOnError extends boolean = false>(
  options: Options<UpdateRecipeData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<UpdateRecipeResponse, UpdateRecipeError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}',
  });
};

/**
 * Operation for creating Recipe
 */
export const cloneRecipe = <ThrowOnError extends boolean = false>(options: Options<CloneRecipeData, ThrowOnError>) => {
  return (options?.client ?? client).post<CloneRecipeResponse, CloneRecipeError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/clone',
  });
};

/**
 * Operation for fetching APIError
 */
export const getRecipeDag = <ThrowOnError extends boolean = false>(
  options: Options<GetRecipeDagData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetRecipeDagResponse, GetRecipeDagError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/dag',
  });
};

/**
 * Operation for creating
 */
export const uploadMediaForRecipe = <ThrowOnError extends boolean = false>(
  options: Options<UploadMediaForRecipeData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<void, unknown, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/images',
  });
};

/**
 * Operation for fetching
 */
export const getMermaidDiagramForRecipe = <ThrowOnError extends boolean = false>(
  options: Options<GetMermaidDiagramForRecipeData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<void, unknown, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/mermaid',
  });
};

/**
 * Operation for fetching RecipePrepTaskStep
 */
export const getRecipeMealPlanTasks = <ThrowOnError extends boolean = false>(
  options: Options<GetRecipeMealPlanTasksData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetRecipeMealPlanTasksResponse, GetRecipeMealPlanTasksError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/prep_steps',
  });
};

/**
 * Operation for fetching RecipePrepTask
 */
export const getRecipePrepTasks = <ThrowOnError extends boolean = false>(
  options: Options<GetRecipePrepTasksData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetRecipePrepTasksResponse, GetRecipePrepTasksError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/prep_tasks',
  });
};

/**
 * Operation for creating RecipePrepTask
 */
export const createRecipePrepTask = <ThrowOnError extends boolean = false>(
  options: Options<CreateRecipePrepTaskData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CreateRecipePrepTaskResponse, CreateRecipePrepTaskError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/prep_tasks',
  });
};

/**
 * Operation for archiving RecipePrepTask
 */
export const archiveRecipePrepTask = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveRecipePrepTaskData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<ArchiveRecipePrepTaskResponse, ArchiveRecipePrepTaskError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/prep_tasks/{recipePrepTaskID}',
  });
};

/**
 * Operation for fetching RecipePrepTask
 */
export const getRecipePrepTask = <ThrowOnError extends boolean = false>(
  options: Options<GetRecipePrepTaskData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetRecipePrepTaskResponse, GetRecipePrepTaskError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/prep_tasks/{recipePrepTaskID}',
  });
};

/**
 * Operation for updating RecipePrepTask
 */
export const updateRecipePrepTask = <ThrowOnError extends boolean = false>(
  options: Options<UpdateRecipePrepTaskData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<UpdateRecipePrepTaskResponse, UpdateRecipePrepTaskError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/prep_tasks/{recipePrepTaskID}',
  });
};

/**
 * Operation for fetching RecipeRating
 */
export const getRecipeRatings = <ThrowOnError extends boolean = false>(
  options: Options<GetRecipeRatingsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetRecipeRatingsResponse, GetRecipeRatingsError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/ratings',
  });
};

/**
 * Operation for creating RecipeRating
 */
export const createRecipeRating = <ThrowOnError extends boolean = false>(
  options: Options<CreateRecipeRatingData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CreateRecipeRatingResponse, CreateRecipeRatingError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/ratings',
  });
};

/**
 * Operation for archiving RecipeRating
 */
export const archiveRecipeRating = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveRecipeRatingData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<ArchiveRecipeRatingResponse, ArchiveRecipeRatingError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/ratings/{recipeRatingID}',
  });
};

/**
 * Operation for fetching RecipeRating
 */
export const getRecipeRating = <ThrowOnError extends boolean = false>(
  options: Options<GetRecipeRatingData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetRecipeRatingResponse, GetRecipeRatingError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/ratings/{recipeRatingID}',
  });
};

/**
 * Operation for updating RecipeRating
 */
export const updateRecipeRating = <ThrowOnError extends boolean = false>(
  options: Options<UpdateRecipeRatingData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<UpdateRecipeRatingResponse, UpdateRecipeRatingError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/ratings/{recipeRatingID}',
  });
};

/**
 * Operation for fetching RecipeStep
 */
export const getRecipeSteps = <ThrowOnError extends boolean = false>(
  options: Options<GetRecipeStepsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetRecipeStepsResponse, GetRecipeStepsError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps',
  });
};

/**
 * Operation for creating RecipeStep
 */
export const createRecipeStep = <ThrowOnError extends boolean = false>(
  options: Options<CreateRecipeStepData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CreateRecipeStepResponse, CreateRecipeStepError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps',
  });
};

/**
 * Operation for archiving RecipeStep
 */
export const archiveRecipeStep = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveRecipeStepData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<ArchiveRecipeStepResponse, ArchiveRecipeStepError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}',
  });
};

/**
 * Operation for fetching RecipeStep
 */
export const getRecipeStep = <ThrowOnError extends boolean = false>(
  options: Options<GetRecipeStepData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetRecipeStepResponse, GetRecipeStepError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}',
  });
};

/**
 * Operation for updating RecipeStep
 */
export const updateRecipeStep = <ThrowOnError extends boolean = false>(
  options: Options<UpdateRecipeStepData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<UpdateRecipeStepResponse, UpdateRecipeStepError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}',
  });
};

/**
 * Operation for fetching RecipeStepCompletionCondition
 */
export const getRecipeStepCompletionConditions = <ThrowOnError extends boolean = false>(
  options: Options<GetRecipeStepCompletionConditionsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetRecipeStepCompletionConditionsResponse,
    GetRecipeStepCompletionConditionsError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}/completion_conditions',
  });
};

/**
 * Operation for creating RecipeStepCompletionCondition
 */
export const createRecipeStepCompletionCondition = <ThrowOnError extends boolean = false>(
  options: Options<CreateRecipeStepCompletionConditionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateRecipeStepCompletionConditionResponse,
    CreateRecipeStepCompletionConditionError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}/completion_conditions',
  });
};

/**
 * Operation for archiving RecipeStepCompletionCondition
 */
export const archiveRecipeStepCompletionCondition = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveRecipeStepCompletionConditionData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    ArchiveRecipeStepCompletionConditionResponse,
    ArchiveRecipeStepCompletionConditionError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}/completion_conditions/{recipeStepCompletionConditionID}',
  });
};

/**
 * Operation for fetching RecipeStepCompletionCondition
 */
export const getRecipeStepCompletionCondition = <ThrowOnError extends boolean = false>(
  options: Options<GetRecipeStepCompletionConditionData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetRecipeStepCompletionConditionResponse,
    GetRecipeStepCompletionConditionError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}/completion_conditions/{recipeStepCompletionConditionID}',
  });
};

/**
 * Operation for updating RecipeStepCompletionCondition
 */
export const updateRecipeStepCompletionCondition = <ThrowOnError extends boolean = false>(
  options: Options<UpdateRecipeStepCompletionConditionData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateRecipeStepCompletionConditionResponse,
    UpdateRecipeStepCompletionConditionError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}/completion_conditions/{recipeStepCompletionConditionID}',
  });
};

/**
 * Operation for creating
 */
export const uploadMediaForRecipeStep = <ThrowOnError extends boolean = false>(
  options: Options<UploadMediaForRecipeStepData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<void, unknown, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}/images',
  });
};

/**
 * Operation for fetching RecipeStepIngredient
 */
export const getRecipeStepIngredients = <ThrowOnError extends boolean = false>(
  options: Options<GetRecipeStepIngredientsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetRecipeStepIngredientsResponse, GetRecipeStepIngredientsError, ThrowOnError>(
    {
      ...options,
      url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}/ingredients',
    },
  );
};

/**
 * Operation for creating RecipeStepIngredient
 */
export const createRecipeStepIngredient = <ThrowOnError extends boolean = false>(
  options: Options<CreateRecipeStepIngredientData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateRecipeStepIngredientResponse,
    CreateRecipeStepIngredientError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}/ingredients',
  });
};

/**
 * Operation for archiving RecipeStepIngredient
 */
export const archiveRecipeStepIngredient = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveRecipeStepIngredientData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    ArchiveRecipeStepIngredientResponse,
    ArchiveRecipeStepIngredientError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}/ingredients/{recipeStepIngredientID}',
  });
};

/**
 * Operation for fetching RecipeStepIngredient
 */
export const getRecipeStepIngredient = <ThrowOnError extends boolean = false>(
  options: Options<GetRecipeStepIngredientData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetRecipeStepIngredientResponse, GetRecipeStepIngredientError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}/ingredients/{recipeStepIngredientID}',
  });
};

/**
 * Operation for updating RecipeStepIngredient
 */
export const updateRecipeStepIngredient = <ThrowOnError extends boolean = false>(
  options: Options<UpdateRecipeStepIngredientData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateRecipeStepIngredientResponse,
    UpdateRecipeStepIngredientError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}/ingredients/{recipeStepIngredientID}',
  });
};

/**
 * Operation for fetching RecipeStepInstrument
 */
export const getRecipeStepInstruments = <ThrowOnError extends boolean = false>(
  options: Options<GetRecipeStepInstrumentsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetRecipeStepInstrumentsResponse, GetRecipeStepInstrumentsError, ThrowOnError>(
    {
      ...options,
      url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}/instruments',
    },
  );
};

/**
 * Operation for creating RecipeStepInstrument
 */
export const createRecipeStepInstrument = <ThrowOnError extends boolean = false>(
  options: Options<CreateRecipeStepInstrumentData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateRecipeStepInstrumentResponse,
    CreateRecipeStepInstrumentError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}/instruments',
  });
};

/**
 * Operation for archiving RecipeStepInstrument
 */
export const archiveRecipeStepInstrument = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveRecipeStepInstrumentData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    ArchiveRecipeStepInstrumentResponse,
    ArchiveRecipeStepInstrumentError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}/instruments/{recipeStepInstrumentID}',
  });
};

/**
 * Operation for fetching RecipeStepInstrument
 */
export const getRecipeStepInstrument = <ThrowOnError extends boolean = false>(
  options: Options<GetRecipeStepInstrumentData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetRecipeStepInstrumentResponse, GetRecipeStepInstrumentError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}/instruments/{recipeStepInstrumentID}',
  });
};

/**
 * Operation for updating RecipeStepInstrument
 */
export const updateRecipeStepInstrument = <ThrowOnError extends boolean = false>(
  options: Options<UpdateRecipeStepInstrumentData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateRecipeStepInstrumentResponse,
    UpdateRecipeStepInstrumentError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}/instruments/{recipeStepInstrumentID}',
  });
};

/**
 * Operation for fetching RecipeStepProduct
 */
export const getRecipeStepProducts = <ThrowOnError extends boolean = false>(
  options: Options<GetRecipeStepProductsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetRecipeStepProductsResponse, GetRecipeStepProductsError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}/products',
  });
};

/**
 * Operation for creating RecipeStepProduct
 */
export const createRecipeStepProduct = <ThrowOnError extends boolean = false>(
  options: Options<CreateRecipeStepProductData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CreateRecipeStepProductResponse, CreateRecipeStepProductError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}/products',
  });
};

/**
 * Operation for archiving RecipeStepProduct
 */
export const archiveRecipeStepProduct = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveRecipeStepProductData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    ArchiveRecipeStepProductResponse,
    ArchiveRecipeStepProductError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}/products/{recipeStepProductID}',
  });
};

/**
 * Operation for fetching RecipeStepProduct
 */
export const getRecipeStepProduct = <ThrowOnError extends boolean = false>(
  options: Options<GetRecipeStepProductData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetRecipeStepProductResponse, GetRecipeStepProductError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}/products/{recipeStepProductID}',
  });
};

/**
 * Operation for updating RecipeStepProduct
 */
export const updateRecipeStepProduct = <ThrowOnError extends boolean = false>(
  options: Options<UpdateRecipeStepProductData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<UpdateRecipeStepProductResponse, UpdateRecipeStepProductError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}/products/{recipeStepProductID}',
  });
};

/**
 * Operation for fetching RecipeStepVessel
 */
export const getRecipeStepVessels = <ThrowOnError extends boolean = false>(
  options: Options<GetRecipeStepVesselsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetRecipeStepVesselsResponse, GetRecipeStepVesselsError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}/vessels',
  });
};

/**
 * Operation for creating RecipeStepVessel
 */
export const createRecipeStepVessel = <ThrowOnError extends boolean = false>(
  options: Options<CreateRecipeStepVesselData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CreateRecipeStepVesselResponse, CreateRecipeStepVesselError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}/vessels',
  });
};

/**
 * Operation for archiving RecipeStepVessel
 */
export const archiveRecipeStepVessel = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveRecipeStepVesselData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    ArchiveRecipeStepVesselResponse,
    ArchiveRecipeStepVesselError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}/vessels/{recipeStepVesselID}',
  });
};

/**
 * Operation for fetching RecipeStepVessel
 */
export const getRecipeStepVessel = <ThrowOnError extends boolean = false>(
  options: Options<GetRecipeStepVesselData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetRecipeStepVesselResponse, GetRecipeStepVesselError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}/vessels/{recipeStepVesselID}',
  });
};

/**
 * Operation for updating RecipeStepVessel
 */
export const updateRecipeStepVessel = <ThrowOnError extends boolean = false>(
  options: Options<UpdateRecipeStepVesselData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<UpdateRecipeStepVesselResponse, UpdateRecipeStepVesselError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/{recipeID}/steps/{recipeStepID}/vessels/{recipeStepVesselID}',
  });
};

/**
 * Operation for fetching Recipe
 */
export const searchForRecipes = <ThrowOnError extends boolean = false>(
  options: Options<SearchForRecipesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<SearchForRecipesResponse, SearchForRecipesError, ThrowOnError>({
    ...options,
    url: '/api/v1/recipes/search',
  });
};

/**
 * Operation for fetching ServiceSetting
 */
export const getServiceSettings = <ThrowOnError extends boolean = false>(
  options: Options<GetServiceSettingsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetServiceSettingsResponse, GetServiceSettingsError, ThrowOnError>({
    ...options,
    url: '/api/v1/settings',
  });
};

/**
 * Operation for creating ServiceSetting
 */
export const createServiceSetting = <ThrowOnError extends boolean = false>(
  options: Options<CreateServiceSettingData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CreateServiceSettingResponse, CreateServiceSettingError, ThrowOnError>({
    ...options,
    url: '/api/v1/settings',
  });
};

/**
 * Operation for archiving ServiceSetting
 */
export const archiveServiceSetting = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveServiceSettingData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<ArchiveServiceSettingResponse, ArchiveServiceSettingError, ThrowOnError>({
    ...options,
    url: '/api/v1/settings/{serviceSettingID}',
  });
};

/**
 * Operation for fetching ServiceSetting
 */
export const getServiceSetting = <ThrowOnError extends boolean = false>(
  options: Options<GetServiceSettingData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetServiceSettingResponse, GetServiceSettingError, ThrowOnError>({
    ...options,
    url: '/api/v1/settings/{serviceSettingID}',
  });
};

/**
 * Operation for creating ServiceSettingConfiguration
 */
export const createServiceSettingConfiguration = <ThrowOnError extends boolean = false>(
  options: Options<CreateServiceSettingConfigurationData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateServiceSettingConfigurationResponse,
    CreateServiceSettingConfigurationError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/settings/configurations',
  });
};

/**
 * Operation for archiving ServiceSettingConfiguration
 */
export const archiveServiceSettingConfiguration = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveServiceSettingConfigurationData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    ArchiveServiceSettingConfigurationResponse,
    ArchiveServiceSettingConfigurationError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/settings/configurations/{serviceSettingConfigurationID}',
  });
};

/**
 * Operation for updating ServiceSettingConfiguration
 */
export const updateServiceSettingConfiguration = <ThrowOnError extends boolean = false>(
  options: Options<UpdateServiceSettingConfigurationData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateServiceSettingConfigurationResponse,
    UpdateServiceSettingConfigurationError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/settings/configurations/{serviceSettingConfigurationID}',
  });
};

/**
 * Operation for fetching ServiceSettingConfiguration
 */
export const getServiceSettingConfigurationsForHousehold = <ThrowOnError extends boolean = false>(
  options: Options<GetServiceSettingConfigurationsForHouseholdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetServiceSettingConfigurationsForHouseholdResponse,
    GetServiceSettingConfigurationsForHouseholdError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/settings/configurations/household',
  });
};

/**
 * Operation for fetching ServiceSettingConfiguration
 */
export const getServiceSettingConfigurationsForUser = <ThrowOnError extends boolean = false>(
  options: Options<GetServiceSettingConfigurationsForUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetServiceSettingConfigurationsForUserResponse,
    GetServiceSettingConfigurationsForUserError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/settings/configurations/user',
  });
};

/**
 * Operation for fetching ServiceSettingConfiguration
 */
export const getServiceSettingConfigurationByName = <ThrowOnError extends boolean = false>(
  options: Options<GetServiceSettingConfigurationByNameData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetServiceSettingConfigurationByNameResponse,
    GetServiceSettingConfigurationByNameError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/settings/configurations/user/{serviceSettingConfigurationName}',
  });
};

/**
 * Operation for fetching ServiceSetting
 */
export const searchForServiceSettings = <ThrowOnError extends boolean = false>(
  options: Options<SearchForServiceSettingsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<SearchForServiceSettingsResponse, SearchForServiceSettingsError, ThrowOnError>(
    {
      ...options,
      url: '/api/v1/settings/search',
    },
  );
};

/**
 * Operation for fetching UserIngredientPreference
 */
export const getUserIngredientPreferences = <ThrowOnError extends boolean = false>(
  options: Options<GetUserIngredientPreferencesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetUserIngredientPreferencesResponse,
    GetUserIngredientPreferencesError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/user_ingredient_preferences',
  });
};

/**
 * Operation for creating UserIngredientPreference
 */
export const createUserIngredientPreference = <ThrowOnError extends boolean = false>(
  options: Options<CreateUserIngredientPreferenceData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateUserIngredientPreferenceResponse,
    CreateUserIngredientPreferenceError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/user_ingredient_preferences',
  });
};

/**
 * Operation for archiving UserIngredientPreference
 */
export const archiveUserIngredientPreference = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveUserIngredientPreferenceData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    ArchiveUserIngredientPreferenceResponse,
    ArchiveUserIngredientPreferenceError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/user_ingredient_preferences/{userIngredientPreferenceID}',
  });
};

/**
 * Operation for updating UserIngredientPreference
 */
export const updateUserIngredientPreference = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserIngredientPreferenceData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateUserIngredientPreferenceResponse,
    UpdateUserIngredientPreferenceError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/user_ingredient_preferences/{userIngredientPreferenceID}',
  });
};

/**
 * Operation for fetching UserNotification
 */
export const getUserNotifications = <ThrowOnError extends boolean = false>(
  options: Options<GetUserNotificationsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetUserNotificationsResponse, GetUserNotificationsError, ThrowOnError>({
    ...options,
    url: '/api/v1/user_notifications',
  });
};

/**
 * Operation for creating UserNotification
 */
export const createUserNotification = <ThrowOnError extends boolean = false>(
  options: Options<CreateUserNotificationData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CreateUserNotificationResponse, CreateUserNotificationError, ThrowOnError>({
    ...options,
    url: '/api/v1/user_notifications',
  });
};

/**
 * Operation for fetching UserNotification
 */
export const getUserNotification = <ThrowOnError extends boolean = false>(
  options: Options<GetUserNotificationData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetUserNotificationResponse, GetUserNotificationError, ThrowOnError>({
    ...options,
    url: '/api/v1/user_notifications/{userNotificationID}',
  });
};

/**
 * Operation for updating UserNotification
 */
export const updateUserNotification = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserNotificationData, ThrowOnError>,
) => {
  return (options?.client ?? client).patch<UpdateUserNotificationResponse, UpdateUserNotificationError, ThrowOnError>({
    ...options,
    url: '/api/v1/user_notifications/{userNotificationID}',
  });
};

/**
 * Operation for fetching User
 */
export const getUsers = <ThrowOnError extends boolean = false>(options: Options<GetUsersData, ThrowOnError>) => {
  return (options?.client ?? client).get<GetUsersResponse, GetUsersError, ThrowOnError>({
    ...options,
    url: '/api/v1/users',
  });
};

/**
 * Operation for archiving User
 */
export const archiveUser = <ThrowOnError extends boolean = false>(options: Options<ArchiveUserData, ThrowOnError>) => {
  return (options?.client ?? client).delete<ArchiveUserResponse, ArchiveUserError, ThrowOnError>({
    ...options,
    url: '/api/v1/users/{userID}',
  });
};

/**
 * Operation for fetching User
 */
export const getUser = <ThrowOnError extends boolean = false>(options: Options<GetUserData, ThrowOnError>) => {
  return (options?.client ?? client).get<GetUserResponse, GetUserError, ThrowOnError>({
    ...options,
    url: '/api/v1/users/{userID}',
  });
};

/**
 * Operation for creating User
 */
export const uploadUserAvatar = <ThrowOnError extends boolean = false>(
  options: Options<UploadUserAvatarData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<UploadUserAvatarResponse, UploadUserAvatarError, ThrowOnError>({
    ...options,
    url: '/api/v1/users/avatar/upload',
  });
};

/**
 * Operation for updating User
 */
export const updateUserDetails = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserDetailsData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<UpdateUserDetailsResponse, UpdateUserDetailsError, ThrowOnError>({
    ...options,
    url: '/api/v1/users/details',
  });
};

/**
 * Operation for updating User
 */
export const updateUserEmailAddress = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserEmailAddressData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<UpdateUserEmailAddressResponse, UpdateUserEmailAddressError, ThrowOnError>({
    ...options,
    url: '/api/v1/users/email_address',
  });
};

/**
 * Operation for creating User
 */
export const verifyUserEmailAddress = <ThrowOnError extends boolean = false>(
  options: Options<VerifyUserEmailAddressData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<VerifyUserEmailAddressResponse, VerifyUserEmailAddressError, ThrowOnError>({
    ...options,
    url: '/api/v1/users/email_address_verification',
  });
};

/**
 * Operation for updating
 */
export const updatePassword = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePasswordData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<void, unknown, ThrowOnError>({
    ...options,
    url: '/api/v1/users/password/new',
  });
};

/**
 * Operation for creating UserPermissionsResponse
 */
export const checkPermissions = <ThrowOnError extends boolean = false>(
  options: Options<CheckPermissionsData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CheckPermissionsResponse, CheckPermissionsError, ThrowOnError>({
    ...options,
    url: '/api/v1/users/permissions/check',
  });
};

/**
 * Operation for fetching User
 */
export const searchForUsers = <ThrowOnError extends boolean = false>(
  options: Options<SearchForUsersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<SearchForUsersResponse, SearchForUsersError, ThrowOnError>({
    ...options,
    url: '/api/v1/users/search',
  });
};

/**
 * Operation for fetching User
 */
export const getSelf = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
  return (options?.client ?? client).get<GetSelfResponse, GetSelfError, ThrowOnError>({
    ...options,
    url: '/api/v1/users/self',
  });
};

/**
 * Operation for creating TOTPSecretRefreshResponse
 */
export const refreshTotpSecret = <ThrowOnError extends boolean = false>(
  options: Options<RefreshTotpSecretData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<RefreshTotpSecretResponse, RefreshTotpSecretError, ThrowOnError>({
    ...options,
    url: '/api/v1/users/totp_secret/new',
  });
};

/**
 * Operation for updating User
 */
export const updateUserUsername = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserUsernameData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<UpdateUserUsernameResponse, UpdateUserUsernameError, ThrowOnError>({
    ...options,
    url: '/api/v1/users/username',
  });
};

/**
 * Operation for fetching ValidIngredientGroup
 */
export const getValidIngredientGroups = <ThrowOnError extends boolean = false>(
  options: Options<GetValidIngredientGroupsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetValidIngredientGroupsResponse, GetValidIngredientGroupsError, ThrowOnError>(
    {
      ...options,
      url: '/api/v1/valid_ingredient_groups',
    },
  );
};

/**
 * Operation for creating ValidIngredientGroup
 */
export const createValidIngredientGroup = <ThrowOnError extends boolean = false>(
  options: Options<CreateValidIngredientGroupData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateValidIngredientGroupResponse,
    CreateValidIngredientGroupError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_groups',
  });
};

/**
 * Operation for archiving ValidIngredientGroup
 */
export const archiveValidIngredientGroup = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveValidIngredientGroupData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    ArchiveValidIngredientGroupResponse,
    ArchiveValidIngredientGroupError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_groups/{validIngredientGroupID}',
  });
};

/**
 * Operation for fetching ValidIngredientGroup
 */
export const getValidIngredientGroup = <ThrowOnError extends boolean = false>(
  options: Options<GetValidIngredientGroupData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetValidIngredientGroupResponse, GetValidIngredientGroupError, ThrowOnError>({
    ...options,
    url: '/api/v1/valid_ingredient_groups/{validIngredientGroupID}',
  });
};

/**
 * Operation for updating ValidIngredientGroup
 */
export const updateValidIngredientGroup = <ThrowOnError extends boolean = false>(
  options: Options<UpdateValidIngredientGroupData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateValidIngredientGroupResponse,
    UpdateValidIngredientGroupError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_groups/{validIngredientGroupID}',
  });
};

/**
 * Operation for fetching ValidIngredientGroup
 */
export const searchForValidIngredientGroups = <ThrowOnError extends boolean = false>(
  options: Options<SearchForValidIngredientGroupsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SearchForValidIngredientGroupsResponse,
    SearchForValidIngredientGroupsError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_groups/search',
  });
};

/**
 * Operation for fetching ValidIngredientMeasurementUnit
 */
export const getValidIngredientMeasurementUnits = <ThrowOnError extends boolean = false>(
  options: Options<GetValidIngredientMeasurementUnitsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetValidIngredientMeasurementUnitsResponse,
    GetValidIngredientMeasurementUnitsError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_measurement_units',
  });
};

/**
 * Operation for creating ValidIngredientMeasurementUnit
 */
export const createValidIngredientMeasurementUnit = <ThrowOnError extends boolean = false>(
  options: Options<CreateValidIngredientMeasurementUnitData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateValidIngredientMeasurementUnitResponse,
    CreateValidIngredientMeasurementUnitError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_measurement_units',
  });
};

/**
 * Operation for archiving ValidIngredientMeasurementUnit
 */
export const archiveValidIngredientMeasurementUnit = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveValidIngredientMeasurementUnitData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    ArchiveValidIngredientMeasurementUnitResponse,
    ArchiveValidIngredientMeasurementUnitError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_measurement_units/{validIngredientMeasurementUnitID}',
  });
};

/**
 * Operation for fetching ValidIngredientMeasurementUnit
 */
export const getValidIngredientMeasurementUnit = <ThrowOnError extends boolean = false>(
  options: Options<GetValidIngredientMeasurementUnitData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetValidIngredientMeasurementUnitResponse,
    GetValidIngredientMeasurementUnitError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_measurement_units/{validIngredientMeasurementUnitID}',
  });
};

/**
 * Operation for updating ValidIngredientMeasurementUnit
 */
export const updateValidIngredientMeasurementUnit = <ThrowOnError extends boolean = false>(
  options: Options<UpdateValidIngredientMeasurementUnitData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateValidIngredientMeasurementUnitResponse,
    UpdateValidIngredientMeasurementUnitError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_measurement_units/{validIngredientMeasurementUnitID}',
  });
};

/**
 * Operation for fetching ValidIngredientMeasurementUnit
 */
export const getValidIngredientMeasurementUnitsByIngredient = <ThrowOnError extends boolean = false>(
  options: Options<GetValidIngredientMeasurementUnitsByIngredientData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetValidIngredientMeasurementUnitsByIngredientResponse,
    GetValidIngredientMeasurementUnitsByIngredientError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_measurement_units/by_ingredient/{validIngredientID}',
  });
};

/**
 * Operation for fetching ValidIngredientMeasurementUnit
 */
export const getValidIngredientMeasurementUnitsByMeasurementUnit = <ThrowOnError extends boolean = false>(
  options: Options<GetValidIngredientMeasurementUnitsByMeasurementUnitData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetValidIngredientMeasurementUnitsByMeasurementUnitResponse,
    GetValidIngredientMeasurementUnitsByMeasurementUnitError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_measurement_units/by_measurement_unit/{validMeasurementUnitID}',
  });
};

/**
 * Operation for fetching ValidIngredientPreparation
 */
export const getValidIngredientPreparations = <ThrowOnError extends boolean = false>(
  options: Options<GetValidIngredientPreparationsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetValidIngredientPreparationsResponse,
    GetValidIngredientPreparationsError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_preparations',
  });
};

/**
 * Operation for creating ValidIngredientPreparation
 */
export const createValidIngredientPreparation = <ThrowOnError extends boolean = false>(
  options: Options<CreateValidIngredientPreparationData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateValidIngredientPreparationResponse,
    CreateValidIngredientPreparationError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_preparations',
  });
};

/**
 * Operation for archiving ValidIngredientPreparation
 */
export const archiveValidIngredientPreparation = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveValidIngredientPreparationData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    ArchiveValidIngredientPreparationResponse,
    ArchiveValidIngredientPreparationError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_preparations/{validIngredientPreparationID}',
  });
};

/**
 * Operation for fetching ValidIngredientPreparation
 */
export const getValidIngredientPreparation = <ThrowOnError extends boolean = false>(
  options: Options<GetValidIngredientPreparationData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetValidIngredientPreparationResponse,
    GetValidIngredientPreparationError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_preparations/{validIngredientPreparationID}',
  });
};

/**
 * Operation for updating ValidIngredientPreparation
 */
export const updateValidIngredientPreparation = <ThrowOnError extends boolean = false>(
  options: Options<UpdateValidIngredientPreparationData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateValidIngredientPreparationResponse,
    UpdateValidIngredientPreparationError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_preparations/{validIngredientPreparationID}',
  });
};

/**
 * Operation for fetching ValidIngredientPreparation
 */
export const getValidIngredientPreparationsByIngredient = <ThrowOnError extends boolean = false>(
  options: Options<GetValidIngredientPreparationsByIngredientData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetValidIngredientPreparationsByIngredientResponse,
    GetValidIngredientPreparationsByIngredientError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_preparations/by_ingredient/{validIngredientID}',
  });
};

/**
 * Operation for fetching ValidIngredientPreparation
 */
export const getValidIngredientPreparationsByPreparation = <ThrowOnError extends boolean = false>(
  options: Options<GetValidIngredientPreparationsByPreparationData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetValidIngredientPreparationsByPreparationResponse,
    GetValidIngredientPreparationsByPreparationError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_preparations/by_preparation/{validPreparationID}',
  });
};

/**
 * Operation for fetching ValidIngredientStateIngredient
 */
export const getValidIngredientStateIngredients = <ThrowOnError extends boolean = false>(
  options: Options<GetValidIngredientStateIngredientsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetValidIngredientStateIngredientsResponse,
    GetValidIngredientStateIngredientsError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_state_ingredients',
  });
};

/**
 * Operation for creating ValidIngredientStateIngredient
 */
export const createValidIngredientStateIngredient = <ThrowOnError extends boolean = false>(
  options: Options<CreateValidIngredientStateIngredientData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateValidIngredientStateIngredientResponse,
    CreateValidIngredientStateIngredientError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_state_ingredients',
  });
};

/**
 * Operation for archiving ValidIngredientStateIngredient
 */
export const archiveValidIngredientStateIngredient = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveValidIngredientStateIngredientData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    ArchiveValidIngredientStateIngredientResponse,
    ArchiveValidIngredientStateIngredientError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_state_ingredients/{validIngredientStateIngredientID}',
  });
};

/**
 * Operation for fetching ValidIngredientStateIngredient
 */
export const getValidIngredientStateIngredient = <ThrowOnError extends boolean = false>(
  options: Options<GetValidIngredientStateIngredientData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetValidIngredientStateIngredientResponse,
    GetValidIngredientStateIngredientError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_state_ingredients/{validIngredientStateIngredientID}',
  });
};

/**
 * Operation for updating ValidIngredientStateIngredient
 */
export const updateValidIngredientStateIngredient = <ThrowOnError extends boolean = false>(
  options: Options<UpdateValidIngredientStateIngredientData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateValidIngredientStateIngredientResponse,
    UpdateValidIngredientStateIngredientError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_state_ingredients/{validIngredientStateIngredientID}',
  });
};

/**
 * Operation for fetching ValidIngredientStateIngredient
 */
export const getValidIngredientStateIngredientsByIngredient = <ThrowOnError extends boolean = false>(
  options: Options<GetValidIngredientStateIngredientsByIngredientData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetValidIngredientStateIngredientsByIngredientResponse,
    GetValidIngredientStateIngredientsByIngredientError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_state_ingredients/by_ingredient/{validIngredientID}',
  });
};

/**
 * Operation for fetching ValidIngredientStateIngredient
 */
export const getValidIngredientStateIngredientsByIngredientState = <ThrowOnError extends boolean = false>(
  options: Options<GetValidIngredientStateIngredientsByIngredientStateData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetValidIngredientStateIngredientsByIngredientStateResponse,
    GetValidIngredientStateIngredientsByIngredientStateError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_state_ingredients/by_ingredient_state/{validIngredientStateID}',
  });
};

/**
 * Operation for fetching ValidIngredientState
 */
export const getValidIngredientStates = <ThrowOnError extends boolean = false>(
  options: Options<GetValidIngredientStatesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetValidIngredientStatesResponse, GetValidIngredientStatesError, ThrowOnError>(
    {
      ...options,
      url: '/api/v1/valid_ingredient_states',
    },
  );
};

/**
 * Operation for creating ValidIngredientState
 */
export const createValidIngredientState = <ThrowOnError extends boolean = false>(
  options: Options<CreateValidIngredientStateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateValidIngredientStateResponse,
    CreateValidIngredientStateError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_states',
  });
};

/**
 * Operation for archiving ValidIngredientState
 */
export const archiveValidIngredientState = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveValidIngredientStateData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    ArchiveValidIngredientStateResponse,
    ArchiveValidIngredientStateError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_states/{validIngredientStateID}',
  });
};

/**
 * Operation for fetching ValidIngredientState
 */
export const getValidIngredientState = <ThrowOnError extends boolean = false>(
  options: Options<GetValidIngredientStateData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetValidIngredientStateResponse, GetValidIngredientStateError, ThrowOnError>({
    ...options,
    url: '/api/v1/valid_ingredient_states/{validIngredientStateID}',
  });
};

/**
 * Operation for updating ValidIngredientState
 */
export const updateValidIngredientState = <ThrowOnError extends boolean = false>(
  options: Options<UpdateValidIngredientStateData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateValidIngredientStateResponse,
    UpdateValidIngredientStateError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_states/{validIngredientStateID}',
  });
};

/**
 * Operation for fetching ValidIngredientState
 */
export const searchForValidIngredientStates = <ThrowOnError extends boolean = false>(
  options: Options<SearchForValidIngredientStatesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SearchForValidIngredientStatesResponse,
    SearchForValidIngredientStatesError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredient_states/search',
  });
};

/**
 * Operation for fetching ValidIngredient
 */
export const getValidIngredients = <ThrowOnError extends boolean = false>(
  options: Options<GetValidIngredientsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetValidIngredientsResponse, GetValidIngredientsError, ThrowOnError>({
    ...options,
    url: '/api/v1/valid_ingredients',
  });
};

/**
 * Operation for creating ValidIngredient
 */
export const createValidIngredient = <ThrowOnError extends boolean = false>(
  options: Options<CreateValidIngredientData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CreateValidIngredientResponse, CreateValidIngredientError, ThrowOnError>({
    ...options,
    url: '/api/v1/valid_ingredients',
  });
};

/**
 * Operation for archiving ValidIngredient
 */
export const archiveValidIngredient = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveValidIngredientData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<ArchiveValidIngredientResponse, ArchiveValidIngredientError, ThrowOnError>({
    ...options,
    url: '/api/v1/valid_ingredients/{validIngredientID}',
  });
};

/**
 * Operation for fetching ValidIngredient
 */
export const getValidIngredient = <ThrowOnError extends boolean = false>(
  options: Options<GetValidIngredientData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetValidIngredientResponse, GetValidIngredientError, ThrowOnError>({
    ...options,
    url: '/api/v1/valid_ingredients/{validIngredientID}',
  });
};

/**
 * Operation for updating ValidIngredient
 */
export const updateValidIngredient = <ThrowOnError extends boolean = false>(
  options: Options<UpdateValidIngredientData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<UpdateValidIngredientResponse, UpdateValidIngredientError, ThrowOnError>({
    ...options,
    url: '/api/v1/valid_ingredients/{validIngredientID}',
  });
};

/**
 * Operation for fetching ValidIngredient
 */
export const getValidIngredientsByPreparation = <ThrowOnError extends boolean = false>(
  options: Options<GetValidIngredientsByPreparationData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetValidIngredientsByPreparationResponse,
    GetValidIngredientsByPreparationError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredients/by_preparation/{validPreparationID}',
  });
};

/**
 * Operation for fetching ValidIngredient
 */
export const getRandomValidIngredient = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetRandomValidIngredientResponse, GetRandomValidIngredientError, ThrowOnError>(
    {
      ...options,
      url: '/api/v1/valid_ingredients/random',
    },
  );
};

/**
 * Operation for fetching ValidIngredient
 */
export const searchForValidIngredients = <ThrowOnError extends boolean = false>(
  options: Options<SearchForValidIngredientsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SearchForValidIngredientsResponse,
    SearchForValidIngredientsError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_ingredients/search',
  });
};

/**
 * Operation for fetching ValidInstrument
 */
export const getValidInstruments = <ThrowOnError extends boolean = false>(
  options: Options<GetValidInstrumentsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetValidInstrumentsResponse, GetValidInstrumentsError, ThrowOnError>({
    ...options,
    url: '/api/v1/valid_instruments',
  });
};

/**
 * Operation for creating ValidInstrument
 */
export const createValidInstrument = <ThrowOnError extends boolean = false>(
  options: Options<CreateValidInstrumentData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CreateValidInstrumentResponse, CreateValidInstrumentError, ThrowOnError>({
    ...options,
    url: '/api/v1/valid_instruments',
  });
};

/**
 * Operation for archiving ValidInstrument
 */
export const archiveValidInstrument = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveValidInstrumentData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<ArchiveValidInstrumentResponse, ArchiveValidInstrumentError, ThrowOnError>({
    ...options,
    url: '/api/v1/valid_instruments/{validInstrumentID}',
  });
};

/**
 * Operation for fetching ValidInstrument
 */
export const getValidInstrument = <ThrowOnError extends boolean = false>(
  options: Options<GetValidInstrumentData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetValidInstrumentResponse, GetValidInstrumentError, ThrowOnError>({
    ...options,
    url: '/api/v1/valid_instruments/{validInstrumentID}',
  });
};

/**
 * Operation for updating ValidInstrument
 */
export const updateValidInstrument = <ThrowOnError extends boolean = false>(
  options: Options<UpdateValidInstrumentData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<UpdateValidInstrumentResponse, UpdateValidInstrumentError, ThrowOnError>({
    ...options,
    url: '/api/v1/valid_instruments/{validInstrumentID}',
  });
};

/**
 * Operation for fetching ValidInstrument
 */
export const getRandomValidInstrument = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetRandomValidInstrumentResponse, GetRandomValidInstrumentError, ThrowOnError>(
    {
      ...options,
      url: '/api/v1/valid_instruments/random',
    },
  );
};

/**
 * Operation for fetching ValidInstrument
 */
export const searchForValidInstruments = <ThrowOnError extends boolean = false>(
  options: Options<SearchForValidInstrumentsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SearchForValidInstrumentsResponse,
    SearchForValidInstrumentsError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_instruments/search',
  });
};

/**
 * Operation for creating ValidMeasurementUnitConversion
 */
export const createValidMeasurementUnitConversion = <ThrowOnError extends boolean = false>(
  options: Options<CreateValidMeasurementUnitConversionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateValidMeasurementUnitConversionResponse,
    CreateValidMeasurementUnitConversionError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_measurement_conversions',
  });
};

/**
 * Operation for archiving ValidMeasurementUnitConversion
 */
export const archiveValidMeasurementUnitConversion = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveValidMeasurementUnitConversionData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    ArchiveValidMeasurementUnitConversionResponse,
    ArchiveValidMeasurementUnitConversionError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_measurement_conversions/{validMeasurementUnitConversionID}',
  });
};

/**
 * Operation for fetching ValidMeasurementUnitConversion
 */
export const getValidMeasurementUnitConversion = <ThrowOnError extends boolean = false>(
  options: Options<GetValidMeasurementUnitConversionData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetValidMeasurementUnitConversionResponse,
    GetValidMeasurementUnitConversionError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_measurement_conversions/{validMeasurementUnitConversionID}',
  });
};

/**
 * Operation for updating ValidMeasurementUnitConversion
 */
export const updateValidMeasurementUnitConversion = <ThrowOnError extends boolean = false>(
  options: Options<UpdateValidMeasurementUnitConversionData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateValidMeasurementUnitConversionResponse,
    UpdateValidMeasurementUnitConversionError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_measurement_conversions/{validMeasurementUnitConversionID}',
  });
};

/**
 * Operation for fetching ValidMeasurementUnitConversion
 */
export const getValidMeasurementUnitConversionsFromUnit = <ThrowOnError extends boolean = false>(
  options: Options<GetValidMeasurementUnitConversionsFromUnitData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetValidMeasurementUnitConversionsFromUnitResponse,
    GetValidMeasurementUnitConversionsFromUnitError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_measurement_conversions/from_unit/{validMeasurementUnitID}',
  });
};

/**
 * Operation for fetching ValidMeasurementUnitConversion
 */
export const validMeasurementUnitConversionsToUnit = <ThrowOnError extends boolean = false>(
  options: Options<ValidMeasurementUnitConversionsToUnitData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ValidMeasurementUnitConversionsToUnitResponse,
    ValidMeasurementUnitConversionsToUnitError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_measurement_conversions/to_unit/{validMeasurementUnitID}',
  });
};

/**
 * Operation for fetching ValidMeasurementUnit
 */
export const getValidMeasurementUnits = <ThrowOnError extends boolean = false>(
  options: Options<GetValidMeasurementUnitsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetValidMeasurementUnitsResponse, GetValidMeasurementUnitsError, ThrowOnError>(
    {
      ...options,
      url: '/api/v1/valid_measurement_units',
    },
  );
};

/**
 * Operation for creating ValidMeasurementUnit
 */
export const createValidMeasurementUnit = <ThrowOnError extends boolean = false>(
  options: Options<CreateValidMeasurementUnitData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateValidMeasurementUnitResponse,
    CreateValidMeasurementUnitError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_measurement_units',
  });
};

/**
 * Operation for archiving ValidMeasurementUnit
 */
export const archiveValidMeasurementUnit = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveValidMeasurementUnitData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    ArchiveValidMeasurementUnitResponse,
    ArchiveValidMeasurementUnitError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_measurement_units/{validMeasurementUnitID}',
  });
};

/**
 * Operation for fetching ValidMeasurementUnit
 */
export const getValidMeasurementUnit = <ThrowOnError extends boolean = false>(
  options: Options<GetValidMeasurementUnitData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetValidMeasurementUnitResponse, GetValidMeasurementUnitError, ThrowOnError>({
    ...options,
    url: '/api/v1/valid_measurement_units/{validMeasurementUnitID}',
  });
};

/**
 * Operation for updating ValidMeasurementUnit
 */
export const updateValidMeasurementUnit = <ThrowOnError extends boolean = false>(
  options: Options<UpdateValidMeasurementUnitData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateValidMeasurementUnitResponse,
    UpdateValidMeasurementUnitError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_measurement_units/{validMeasurementUnitID}',
  });
};

/**
 * Operation for fetching ValidMeasurementUnit
 */
export const searchValidMeasurementUnitsByIngredient = <ThrowOnError extends boolean = false>(
  options: Options<SearchValidMeasurementUnitsByIngredientData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SearchValidMeasurementUnitsByIngredientResponse,
    SearchValidMeasurementUnitsByIngredientError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_measurement_units/by_ingredient/{validIngredientID}',
  });
};

/**
 * Operation for fetching ValidMeasurementUnit
 */
export const searchForValidMeasurementUnits = <ThrowOnError extends boolean = false>(
  options: Options<SearchForValidMeasurementUnitsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SearchForValidMeasurementUnitsResponse,
    SearchForValidMeasurementUnitsError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_measurement_units/search',
  });
};

/**
 * Operation for fetching ValidPreparationInstrument
 */
export const getValidPreparationInstruments = <ThrowOnError extends boolean = false>(
  options: Options<GetValidPreparationInstrumentsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetValidPreparationInstrumentsResponse,
    GetValidPreparationInstrumentsError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_preparation_instruments',
  });
};

/**
 * Operation for creating ValidPreparationInstrument
 */
export const createValidPreparationInstrument = <ThrowOnError extends boolean = false>(
  options: Options<CreateValidPreparationInstrumentData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateValidPreparationInstrumentResponse,
    CreateValidPreparationInstrumentError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_preparation_instruments',
  });
};

/**
 * Operation for archiving ValidPreparationInstrument
 */
export const archiveValidPreparationInstrument = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveValidPreparationInstrumentData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    ArchiveValidPreparationInstrumentResponse,
    ArchiveValidPreparationInstrumentError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_preparation_instruments/{validPreparationVesselID}',
  });
};

/**
 * Operation for fetching ValidPreparationInstrument
 */
export const getValidPreparationInstrument = <ThrowOnError extends boolean = false>(
  options: Options<GetValidPreparationInstrumentData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetValidPreparationInstrumentResponse,
    GetValidPreparationInstrumentError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_preparation_instruments/{validPreparationVesselID}',
  });
};

/**
 * Operation for updating ValidPreparationInstrument
 */
export const updateValidPreparationInstrument = <ThrowOnError extends boolean = false>(
  options: Options<UpdateValidPreparationInstrumentData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateValidPreparationInstrumentResponse,
    UpdateValidPreparationInstrumentError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_preparation_instruments/{validPreparationVesselID}',
  });
};

/**
 * Operation for fetching ValidPreparationInstrument
 */
export const getValidPreparationInstrumentsByInstrument = <ThrowOnError extends boolean = false>(
  options: Options<GetValidPreparationInstrumentsByInstrumentData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetValidPreparationInstrumentsByInstrumentResponse,
    GetValidPreparationInstrumentsByInstrumentError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_preparation_instruments/by_instrument/{validInstrumentID}',
  });
};

/**
 * Operation for fetching ValidPreparationInstrument
 */
export const getValidPreparationInstrumentsByPreparation = <ThrowOnError extends boolean = false>(
  options: Options<GetValidPreparationInstrumentsByPreparationData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetValidPreparationInstrumentsByPreparationResponse,
    GetValidPreparationInstrumentsByPreparationError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_preparation_instruments/by_preparation/{validPreparationID}',
  });
};

/**
 * Operation for fetching ValidPreparationVessel
 */
export const getValidPreparationVessels = <ThrowOnError extends boolean = false>(
  options: Options<GetValidPreparationVesselsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetValidPreparationVesselsResponse,
    GetValidPreparationVesselsError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_preparation_vessels',
  });
};

/**
 * Operation for creating ValidPreparationVessel
 */
export const createValidPreparationVessel = <ThrowOnError extends boolean = false>(
  options: Options<CreateValidPreparationVesselData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateValidPreparationVesselResponse,
    CreateValidPreparationVesselError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_preparation_vessels',
  });
};

/**
 * Operation for archiving ValidPreparationVessel
 */
export const archiveValidPreparationVessel = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveValidPreparationVesselData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    ArchiveValidPreparationVesselResponse,
    ArchiveValidPreparationVesselError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_preparation_vessels/{validPreparationVesselID}',
  });
};

/**
 * Operation for fetching ValidPreparationVessel
 */
export const getValidPreparationVessel = <ThrowOnError extends boolean = false>(
  options: Options<GetValidPreparationVesselData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetValidPreparationVesselResponse,
    GetValidPreparationVesselError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_preparation_vessels/{validPreparationVesselID}',
  });
};

/**
 * Operation for updating ValidPreparationVessel
 */
export const updateValidPreparationVessel = <ThrowOnError extends boolean = false>(
  options: Options<UpdateValidPreparationVesselData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateValidPreparationVesselResponse,
    UpdateValidPreparationVesselError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_preparation_vessels/{validPreparationVesselID}',
  });
};

/**
 * Operation for fetching ValidPreparationVessel
 */
export const getValidPreparationVesselsByPreparation = <ThrowOnError extends boolean = false>(
  options: Options<GetValidPreparationVesselsByPreparationData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetValidPreparationVesselsByPreparationResponse,
    GetValidPreparationVesselsByPreparationError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_preparation_vessels/by_preparation/{validPreparationID}',
  });
};

/**
 * Operation for fetching ValidPreparationVessel
 */
export const getValidPreparationVesselsByVessel = <ThrowOnError extends boolean = false>(
  options: Options<GetValidPreparationVesselsByVesselData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetValidPreparationVesselsByVesselResponse,
    GetValidPreparationVesselsByVesselError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_preparation_vessels/by_vessel/{ValidVesselID}',
  });
};

/**
 * Operation for fetching ValidPreparation
 */
export const getValidPreparations = <ThrowOnError extends boolean = false>(
  options: Options<GetValidPreparationsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetValidPreparationsResponse, GetValidPreparationsError, ThrowOnError>({
    ...options,
    url: '/api/v1/valid_preparations',
  });
};

/**
 * Operation for creating ValidPreparation
 */
export const createValidPreparation = <ThrowOnError extends boolean = false>(
  options: Options<CreateValidPreparationData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CreateValidPreparationResponse, CreateValidPreparationError, ThrowOnError>({
    ...options,
    url: '/api/v1/valid_preparations',
  });
};

/**
 * Operation for archiving ValidPreparation
 */
export const archiveValidPreparation = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveValidPreparationData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    ArchiveValidPreparationResponse,
    ArchiveValidPreparationError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_preparations/{validPreparationID}',
  });
};

/**
 * Operation for fetching ValidPreparation
 */
export const getValidPreparation = <ThrowOnError extends boolean = false>(
  options: Options<GetValidPreparationData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetValidPreparationResponse, GetValidPreparationError, ThrowOnError>({
    ...options,
    url: '/api/v1/valid_preparations/{validPreparationID}',
  });
};

/**
 * Operation for updating ValidPreparation
 */
export const updateValidPreparation = <ThrowOnError extends boolean = false>(
  options: Options<UpdateValidPreparationData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<UpdateValidPreparationResponse, UpdateValidPreparationError, ThrowOnError>({
    ...options,
    url: '/api/v1/valid_preparations/{validPreparationID}',
  });
};

/**
 * Operation for fetching ValidPreparation
 */
export const getRandomValidPreparation = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetRandomValidPreparationResponse,
    GetRandomValidPreparationError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_preparations/random',
  });
};

/**
 * Operation for fetching ValidPreparation
 */
export const searchForValidPreparations = <ThrowOnError extends boolean = false>(
  options: Options<SearchForValidPreparationsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SearchForValidPreparationsResponse,
    SearchForValidPreparationsError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/valid_preparations/search',
  });
};

/**
 * Operation for fetching ValidVessel
 */
export const getValidVessels = <ThrowOnError extends boolean = false>(
  options: Options<GetValidVesselsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetValidVesselsResponse, GetValidVesselsError, ThrowOnError>({
    ...options,
    url: '/api/v1/valid_vessels',
  });
};

/**
 * Operation for creating ValidVessel
 */
export const createValidVessel = <ThrowOnError extends boolean = false>(
  options: Options<CreateValidVesselData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CreateValidVesselResponse, CreateValidVesselError, ThrowOnError>({
    ...options,
    url: '/api/v1/valid_vessels',
  });
};

/**
 * Operation for archiving ValidVessel
 */
export const archiveValidVessel = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveValidVesselData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<ArchiveValidVesselResponse, ArchiveValidVesselError, ThrowOnError>({
    ...options,
    url: '/api/v1/valid_vessels/{validVesselID}',
  });
};

/**
 * Operation for fetching ValidVessel
 */
export const getValidVessel = <ThrowOnError extends boolean = false>(
  options: Options<GetValidVesselData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetValidVesselResponse, GetValidVesselError, ThrowOnError>({
    ...options,
    url: '/api/v1/valid_vessels/{validVesselID}',
  });
};

/**
 * Operation for updating ValidVessel
 */
export const updateValidVessel = <ThrowOnError extends boolean = false>(
  options: Options<UpdateValidVesselData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<UpdateValidVesselResponse, UpdateValidVesselError, ThrowOnError>({
    ...options,
    url: '/api/v1/valid_vessels/{validVesselID}',
  });
};

/**
 * Operation for fetching ValidVessel
 */
export const getRandomValidVessel = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<GetRandomValidVesselResponse, GetRandomValidVesselError, ThrowOnError>({
    ...options,
    url: '/api/v1/valid_vessels/random',
  });
};

/**
 * Operation for fetching ValidVessel
 */
export const searchForValidVessels = <ThrowOnError extends boolean = false>(
  options: Options<SearchForValidVesselsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<SearchForValidVesselsResponse, SearchForValidVesselsError, ThrowOnError>({
    ...options,
    url: '/api/v1/valid_vessels/search',
  });
};

/**
 * Operation for fetching Webhook
 */
export const getWebhooks = <ThrowOnError extends boolean = false>(options: Options<GetWebhooksData, ThrowOnError>) => {
  return (options?.client ?? client).get<GetWebhooksResponse, GetWebhooksError, ThrowOnError>({
    ...options,
    url: '/api/v1/webhooks',
  });
};

/**
 * Operation for creating Webhook
 */
export const createWebhook = <ThrowOnError extends boolean = false>(
  options: Options<CreateWebhookData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<CreateWebhookResponse, CreateWebhookError, ThrowOnError>({
    ...options,
    url: '/api/v1/webhooks',
  });
};

/**
 * Operation for archiving Webhook
 */
export const archiveWebhook = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveWebhookData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<ArchiveWebhookResponse, ArchiveWebhookError, ThrowOnError>({
    ...options,
    url: '/api/v1/webhooks/{webhookID}',
  });
};

/**
 * Operation for fetching Webhook
 */
export const getWebhook = <ThrowOnError extends boolean = false>(options: Options<GetWebhookData, ThrowOnError>) => {
  return (options?.client ?? client).get<GetWebhookResponse, GetWebhookError, ThrowOnError>({
    ...options,
    url: '/api/v1/webhooks/{webhookID}',
  });
};

/**
 * Operation for creating WebhookTriggerEvent
 */
export const createWebhookTriggerEvent = <ThrowOnError extends boolean = false>(
  options: Options<CreateWebhookTriggerEventData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateWebhookTriggerEventResponse,
    CreateWebhookTriggerEventError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/webhooks/{webhookID}/trigger_events',
  });
};

/**
 * Operation for archiving WebhookTriggerEvent
 */
export const archiveWebhookTriggerEvent = <ThrowOnError extends boolean = false>(
  options: Options<ArchiveWebhookTriggerEventData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    ArchiveWebhookTriggerEventResponse,
    ArchiveWebhookTriggerEventError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/webhooks/{webhookID}/trigger_events/{webhookTriggerEventID}',
  });
};

/**
 * Operation for creating FinalizeMealPlansRequest
 */
export const runFinalizeMealPlanWorker = <ThrowOnError extends boolean = false>(
  options: Options<RunFinalizeMealPlanWorkerData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    RunFinalizeMealPlanWorkerResponse,
    RunFinalizeMealPlanWorkerError,
    ThrowOnError
  >({
    ...options,
    url: '/api/v1/workers/finalize_meal_plans',
  });
};

/**
 * Operation for creating
 */
export const runMealPlanGroceryListInitializerWorker = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).post<void, unknown, ThrowOnError>({
    ...options,
    url: '/api/v1/workers/meal_plan_grocery_list_init',
  });
};

/**
 * Operation for creating
 */
export const runMealPlanTaskCreatorWorker = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).post<void, unknown, ThrowOnError>({
    ...options,
    url: '/api/v1/workers/meal_plan_tasks',
  });
};

/**
 * Operation for fetching UserStatusResponse
 */
export const getAuthStatus = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
  return (options?.client ?? client).get<GetAuthStatusResponse, GetAuthStatusError, ThrowOnError>({
    ...options,
    url: '/auth/status',
  });
};

/**
 * Operation for fetching
 */
export const getOauth2Authorize = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
  return (options?.client ?? client).get<void, unknown, ThrowOnError>({
    ...options,
    url: '/oauth2/authorize',
  });
};

/**
 * Operation for creating
 */
export const postOauth2Token = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
  return (options?.client ?? client).post<void, unknown, ThrowOnError>({
    ...options,
    url: '/oauth2/token',
  });
};

/**
 * Creates a new user
 */
export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
  return (options?.client ?? client).post<CreateUserResponse, CreateUserError, ThrowOnError>({
    ...options,
    url: '/users',
  });
};

/**
 * Operation for creating User
 */
export const verifyEmailAddress = <ThrowOnError extends boolean = false>(
  options: Options<VerifyEmailAddressData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<VerifyEmailAddressResponse, VerifyEmailAddressError, ThrowOnError>({
    ...options,
    url: '/users/email_address/verify',
  });
};

/**
 * Operation for creating JWTResponse
 */
export const loginForJwt = <ThrowOnError extends boolean = false>(options: Options<LoginForJwtData, ThrowOnError>) => {
  return (options?.client ?? client).post<LoginForJwtResponse, LoginForJwtError, ThrowOnError>({
    ...options,
    url: '/users/login/jwt',
  });
};

/**
 * Operation for creating JWTResponse
 */
export const adminLoginForJwt = <ThrowOnError extends boolean = false>(
  options: Options<AdminLoginForJwtData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<AdminLoginForJwtResponse, AdminLoginForJwtError, ThrowOnError>({
    ...options,
    url: '/users/login/jwt/admin',
  });
};

/**
 * Operation for creating PasswordResetToken
 */
export const requestPasswordResetToken = <ThrowOnError extends boolean = false>(
  options: Options<RequestPasswordResetTokenData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    RequestPasswordResetTokenResponse,
    RequestPasswordResetTokenError,
    ThrowOnError
  >({
    ...options,
    url: '/users/password/reset',
  });
};

/**
 * Operation for redeeming a password reset token
 */
export const redeemPasswordResetToken = <ThrowOnError extends boolean = false>(
  options: Options<RedeemPasswordResetTokenData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    RedeemPasswordResetTokenResponse,
    RedeemPasswordResetTokenError,
    ThrowOnError
  >({
    ...options,
    url: '/users/password/reset/redeem',
  });
};

/**
 * Operation for creating User
 */
export const verifyTotpSecret = <ThrowOnError extends boolean = false>(
  options: Options<VerifyTotpSecretData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<VerifyTotpSecretResponse, VerifyTotpSecretError, ThrowOnError>({
    ...options,
    url: '/users/totp_secret/verify',
  });
};

/**
 * Operation for creating User
 */
export const requestUsernameReminder = <ThrowOnError extends boolean = false>(
  options: Options<RequestUsernameReminderData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<RequestUsernameReminderResponse, RequestUsernameReminderError, ThrowOnError>({
    ...options,
    url: '/users/username/reminder',
  });
};
