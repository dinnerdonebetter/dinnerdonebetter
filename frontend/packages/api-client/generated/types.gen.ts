// This file is auto-generated by @hey-api/openapi-ts

export type APIError = {
  code?: string;
  message?: string;
};

export type APIResponse = {
  details?: ResponseDetails;
  error?: APIError;
  pagination?: Pagination;
};

export type APIResponseWithError = {
  details?: ResponseDetails;
  error?: APIError;
};

export type AuditLogEntry = {
  belongsToHousehold?: string;
  belongsToUser?: string;
  changes?: ChangeLog;
  createdAt?: string;
  eventType?: string;
  id?: string;
  relevantID?: string;
  resourceType?: string;
};

export type AvatarUpdateInput = {
  base64EncodedData?: string;
};

export type ChangeActiveHouseholdInput = {
  householdID?: string;
};

export type ChangeLog = {
  newValue?: string;
  oldValue?: string;
};

export type EmailAddressVerificationRequestInput = {
  emailVerificationToken?: string;
};

export type FinalizeMealPlansRequest = {
  returnCount?: boolean;
};

export type FinalizeMealPlansResponse = {
  count?: number;
};

export type Household = {
  addressLine1?: string;
  addressLine2?: string;
  archivedAt?: string;
  belongsToUser?: string;
  billingStatus?: string;
  city?: string;
  contactPhone?: string;
  country?: string;
  createdAt?: string;
  id?: string;
  lastUpdatedAt?: string;
  latitude?: number;
  longitude?: number;
  members?: Array<HouseholdUserMembershipWithUser>;
  name?: string;
  paymentProcessorCustomer?: string;
  state?: string;
  subscriptionPlanID?: string;
  zipCode?: string;
};

export type HouseholdCreationRequestInput = {
  addressLine1?: string;
  addressLine2?: string;
  city?: string;
  contactPhone?: string;
  country?: string;
  latitude?: number;
  longitude?: number;
  name?: string;
  state?: string;
  zipCode?: string;
};

export type HouseholdInstrumentOwnership = {
  archivedAt?: string;
  belongsToHousehold?: string;
  createdAt?: string;
  id?: string;
  instrument?: ValidInstrument;
  lastUpdatedAt?: string;
  notes?: string;
  quantity?: number;
};

export type HouseholdInstrumentOwnershipCreationRequestInput = {
  belongsToHousehold?: string;
  notes?: string;
  quantity?: number;
  validInstrumentID?: string;
};

export type HouseholdInstrumentOwnershipUpdateRequestInput = {
  notes?: string;
  quantity?: number;
  validInstrumentID?: string;
};

export type HouseholdInvitation = {
  archivedAt?: string;
  createdAt?: string;
  destinationHousehold?: Household;
  expiresAt?: string;
  fromUser?: User;
  id?: string;
  lastUpdatedAt?: string;
  note?: string;
  status?: string;
  statusNote?: string;
  toEmail?: string;
  toName?: string;
  toUser?: string;
  token?: string;
};

export type HouseholdInvitationCreationRequestInput = {
  expiresAt?: string;
  note?: string;
  toEmail?: string;
  toName?: string;
};

export type HouseholdInvitationUpdateRequestInput = {
  note?: string;
  token?: string;
};

export type HouseholdOwnershipTransferInput = {
  currentOwner?: string;
  newOwner?: string;
  reason?: string;
};

export type HouseholdUpdateRequestInput = {
  addressLine1?: string;
  addressLine2?: string;
  city?: string;
  contactPhone?: string;
  country?: string;
  latitude?: number;
  longitude?: number;
  name?: string;
  state?: string;
  zipCode?: string;
};

export type HouseholdUserMembership = {
  archivedAt?: string;
  belongsToHousehold?: string;
  belongsToUser?: string;
  createdAt?: string;
  defaultHousehold?: boolean;
  householdRole?: string;
  id?: string;
  lastUpdatedAt?: string;
};

export type HouseholdUserMembershipWithUser = {
  archivedAt?: string;
  belongsToHousehold?: string;
  belongsToUser?: User;
  createdAt?: string;
  defaultHousehold?: boolean;
  householdRole?: string;
  id?: string;
  lastUpdatedAt?: string;
};

export type JWTResponse = {
  householdID?: string;
  token?: string;
  userID?: string;
};

export type Meal = {
  archivedAt?: string;
  components?: Array<MealComponent>;
  createdAt?: string;
  createdByUser?: string;
  description?: string;
  eligibleForMealPlans?: boolean;
  id?: string;
  lastUpdatedAt?: string;
  maximumEstimatedPortions?: number;
  minimumEstimatedPortions?: number;
  name?: string;
};

export type MealComponent = {
  componentType?: string;
  recipe?: Recipe;
  recipeScale?: number;
};

export type MealComponentCreationRequestInput = {
  componentType?: string;
  recipeID?: string;
  recipeScale?: number;
};

export type MealCreationRequestInput = {
  components?: Array<MealComponentCreationRequestInput>;
  description?: string;
  eligibleForMealPlans?: boolean;
  maximumEstimatedPortions?: number;
  minimumEstimatedPortions?: number;
  name?: string;
};

export type MealPlan = {
  archivedAt?: string;
  belongsToHousehold?: string;
  createdAt?: string;
  createdBy?: string;
  electionMethod?: string;
  events?: Array<MealPlanEvent>;
  groceryListInitialized?: boolean;
  id?: string;
  lastUpdatedAt?: string;
  notes?: string;
  status?: string;
  tasksCreated?: boolean;
  votingDeadline?: string;
};

export type MealPlanCreationRequestInput = {
  electionMethod?: string;
  events?: Array<MealPlanEventCreationRequestInput>;
  notes?: string;
  votingDeadline?: string;
};

export type MealPlanEvent = {
  archivedAt?: string;
  belongsToMealPlan?: string;
  createdAt?: string;
  endsAt?: string;
  id?: string;
  lastUpdatedAt?: string;
  mealName?: string;
  notes?: string;
  options?: Array<MealPlanOption>;
  startsAt?: string;
};

export type MealPlanEventCreationRequestInput = {
  endsAt?: string;
  mealName?: string;
  notes?: string;
  options?: Array<MealPlanOptionCreationRequestInput>;
  startsAt?: string;
};

export type MealPlanEventUpdateRequestInput = {
  endsAt?: string;
  mealName?: string;
  notes?: string;
  startsAt?: string;
};

export type MealPlanGroceryListItem = {
  archivedAt?: string;
  belongsToMealPlan?: string;
  createdAt?: string;
  id?: string;
  ingredient?: ValidIngredient;
  lastUpdatedAt?: string;
  maximumQuantityNeeded?: number;
  measurementUnit?: ValidMeasurementUnit;
  minimumQuantityNeeded?: number;
  purchasePrice?: number;
  purchasedMeasurementUnit?: ValidMeasurementUnit;
  purchasedUPC?: string;
  quantityPurchased?: number;
  status?: string;
  statusExplanation?: string;
};

export type MealPlanGroceryListItemCreationRequestInput = {
  belongsToMealPlan?: string;
  maximumQuantityNeeded?: number;
  minimumQuantityNeeded?: number;
  purchasePrice?: number;
  purchasedMeasurementUnitID?: string;
  purchasedUPC?: string;
  quantityPurchased?: number;
  status?: string;
  statusExplanation?: string;
  validIngredientID?: string;
  validMeasurementUnitID?: string;
};

export type MealPlanGroceryListItemUpdateRequestInput = {
  belongsToMealPlan?: string;
  maximumQuantityNeeded?: number;
  minimumQuantityNeeded?: number;
  purchasePrice?: number;
  purchasedMeasurementUnitID?: string;
  purchasedUPC?: string;
  quantityPurchased?: number;
  status?: string;
  statusExplanation?: string;
  validIngredientID?: string;
  validMeasurementUnitID?: string;
};

export type MealPlanOption = {
  archivedAt?: string;
  assignedCook?: string;
  assignedDishwasher?: string;
  belongsToMealPlanEvent?: string;
  chosen?: boolean;
  createdAt?: string;
  id?: string;
  lastUpdatedAt?: string;
  meal?: Meal;
  mealScale?: number;
  notes?: string;
  tieBroken?: boolean;
  votes?: Array<MealPlanOptionVote>;
};

export type MealPlanOptionCreationRequestInput = {
  assignedCook?: string;
  assignedDishwasher?: string;
  mealID?: string;
  mealScale?: number;
  notes?: string;
};

export type MealPlanOptionUpdateRequestInput = {
  assignedCook?: string;
  assignedDishwasher?: string;
  mealID?: string;
  mealScale?: number;
  notes?: string;
};

export type MealPlanOptionVote = {
  abstain?: boolean;
  archivedAt?: string;
  belongsToMealPlanOption?: string;
  byUser?: string;
  createdAt?: string;
  id?: string;
  lastUpdatedAt?: string;
  notes?: string;
  rank?: number;
};

export type MealPlanOptionVoteCreationInput = {
  abstain?: boolean;
  belongsToMealPlanOption?: string;
  notes?: string;
  rank?: number;
};

export type MealPlanOptionVoteCreationRequestInput = {
  votes?: Array<MealPlanOptionVoteCreationInput>;
};

export type MealPlanOptionVoteUpdateRequestInput = {
  abstain?: boolean;
  belongsToMealPlanOption?: string;
  notes?: string;
  rank?: number;
};

export type MealPlanTask = {
  assignedToUser?: string;
  completedAt?: string;
  createdAt?: string;
  creationExplanation?: string;
  id?: string;
  lastUpdatedAt?: string;
  mealPlanOption?: MealPlanOption;
  recipePrepTask?: RecipePrepTask;
  status?: string;
  statusExplanation?: string;
};

export type MealPlanTaskCreationRequestInput = {
  assignedToUser?: string;
  creationExplanation?: string;
  mealPlanOptionID?: string;
  recipePrepTaskID?: string;
  status?: string;
  statusExplanation?: string;
};

export type MealPlanTaskStatusChangeRequestInput = {
  assignedToUser?: string;
  status?: string;
  statusExplanation?: string;
};

export type MealPlanUpdateRequestInput = {
  notes?: string;
  votingDeadline?: string;
};

export type ModifyUserPermissionsInput = {
  newRole?: string;
  reason?: string;
};

export type OAuth2Client = {
  archivedAt?: string;
  clientID?: string;
  clientSecret?: string;
  createdAt?: string;
  description?: string;
  id?: string;
  name?: string;
};

export type OAuth2ClientCreationRequestInput = {
  description?: string;
  name?: string;
};

export type OAuth2ClientCreationResponse = {
  clientID?: string;
  clientSecret?: string;
  description?: string;
  id?: string;
  name?: string;
};

export type Pagination = {
  filteredCount?: number;
  limit?: number;
  page?: number;
  totalCount?: number;
};

export type PasswordResetToken = {
  archivedAt?: string;
  belongsToUser?: string;
  createdAt?: string;
  expiresAt?: string;
  id?: string;
  lastUpdatedAt?: string;
  token?: string;
};

export type PasswordResetTokenCreationRequestInput = {
  emailAddress?: string;
};

export type PasswordResetTokenRedemptionRequestInput = {
  newPassword?: string;
  token?: string;
};

export type PasswordUpdateInput = {
  currentPassword?: string;
  newPassword?: string;
  totpToken?: string;
};

export type Recipe = {
  archivedAt?: string;
  createdAt?: string;
  createdByUser?: string;
  description?: string;
  eligibleForMeals?: boolean;
  id?: string;
  inspiredByRecipeID?: string;
  lastUpdatedAt?: string;
  maximumEstimatedPortions?: number;
  media?: Array<RecipeMedia>;
  minimumEstimatedPortions?: number;
  name?: string;
  pluralPortionName?: string;
  portionName?: string;
  prepTasks?: Array<RecipePrepTask>;
  sealOfApproval?: boolean;
  slug?: string;
  source?: string;
  steps?: Array<RecipeStep>;
  supportingRecipes?: Array<Recipe>;
  yieldsComponentType?: string;
};

export type RecipeCreationRequestInput = {
  alsoCreateMeal?: boolean;
  description?: string;
  eligibleForMeals?: boolean;
  inspiredByRecipeID?: string;
  maximumEstimatedPortions?: number;
  minimumEstimatedPortions?: number;
  name?: string;
  pluralPortionName?: string;
  portionName?: string;
  prepTasks?: Array<RecipePrepTaskWithinRecipeCreationRequestInput>;
  sealOfApproval?: boolean;
  slug?: string;
  source?: string;
  steps?: Array<RecipeStepCreationRequestInput>;
  yieldsComponentType?: string;
};

export type RecipeMedia = {
  archivedAt?: string;
  belongsToRecipe?: string;
  belongsToRecipeStep?: string;
  createdAt?: string;
  externalPath?: string;
  id?: string;
  index?: number;
  internalPath?: string;
  lastUpdatedAt?: string;
  mimeType?: string;
};

export type RecipePrepTask = {
  archivedAt?: string;
  belongsToRecipe?: string;
  createdAt?: string;
  description?: string;
  explicitStorageInstructions?: string;
  id?: string;
  lastUpdatedAt?: string;
  maximumStorageTemperatureInCelsius?: number;
  maximumTimeBufferBeforeRecipeInSeconds?: number;
  minimumStorageTemperatureInCelsius?: number;
  minimumTimeBufferBeforeRecipeInSeconds?: number;
  name?: string;
  notes?: string;
  optional?: boolean;
  recipeSteps?: Array<RecipePrepTaskStep>;
  storageType?: string;
};

export type RecipePrepTaskCreationRequestInput = {
  belongsToRecipe?: string;
  description?: string;
  explicitStorageInstructions?: string;
  maximumStorageTemperatureInCelsius?: number;
  maximumTimeBufferBeforeRecipeInSeconds?: number;
  minimumStorageTemperatureInCelsius?: number;
  minimumTimeBufferBeforeRecipeInSeconds?: number;
  name?: string;
  notes?: string;
  optional?: boolean;
  recipeSteps?: Array<RecipePrepTaskStepCreationRequestInput>;
  storageType?: string;
};

export type RecipePrepTaskStep = {
  belongsToRecipeStep?: string;
  belongsToRecipeStepTask?: string;
  id?: string;
  satisfiesRecipeStep?: boolean;
};

export type RecipePrepTaskStepCreationRequestInput = {
  belongsToRecipeStep?: string;
  satisfiesRecipeStep?: boolean;
};

export type RecipePrepTaskStepUpdateRequestInput = {
  belongsToRecipeStep?: string;
  belongsToRecipeStepTask?: string;
  satisfiesRecipeStep?: boolean;
};

export type RecipePrepTaskStepWithinRecipeCreationRequestInput = {
  belongsToRecipeStepIndex?: number;
  satisfiesRecipeStep?: boolean;
};

export type RecipePrepTaskUpdateRequestInput = {
  belongsToRecipe?: string;
  description?: string;
  explicitStorageInstructions?: string;
  maximumStorageTemperatureInCelsius?: number;
  maximumTimeBufferBeforeRecipeInSeconds?: number;
  minimumStorageTemperatureInCelsius?: number;
  minimumTimeBufferBeforeRecipeInSeconds?: number;
  name?: string;
  notes?: string;
  optional?: boolean;
  recipeSteps?: Array<RecipePrepTaskStepUpdateRequestInput>;
  storageType?: string;
};

export type RecipePrepTaskWithinRecipeCreationRequestInput = {
  belongsToRecipe?: string;
  description?: string;
  explicitStorageInstructions?: string;
  maximumStorageTemperatureInCelsius?: number;
  maximumTimeBufferBeforeRecipeInSeconds?: number;
  minimumStorageTemperatureInCelsius?: number;
  minimumTimeBufferBeforeRecipeInSeconds?: number;
  name?: string;
  notes?: string;
  optional?: boolean;
  recipeSteps?: Array<RecipePrepTaskStepWithinRecipeCreationRequestInput>;
  storageType?: string;
};

export type RecipeRating = {
  archivedAt?: string;
  byUser?: string;
  cleanup?: number;
  createdAt?: string;
  difficulty?: number;
  id?: string;
  instructions?: number;
  lastUpdatedAt?: string;
  notes?: string;
  overall?: number;
  recipeID?: string;
  taste?: number;
};

export type RecipeRatingCreationRequestInput = {
  byUser?: string;
  cleanup?: number;
  difficulty?: number;
  instructions?: number;
  notes?: string;
  overall?: number;
  recipeID?: string;
  taste?: number;
};

export type RecipeRatingUpdateRequestInput = {
  byUser?: string;
  cleanup?: number;
  difficulty?: number;
  instructions?: number;
  notes?: string;
  overall?: number;
  recipeID?: string;
  taste?: number;
};

export type RecipeStep = {
  archivedAt?: string;
  belongsToRecipe?: string;
  completionConditions?: Array<RecipeStepCompletionCondition>;
  conditionExpression?: string;
  createdAt?: string;
  explicitInstructions?: string;
  id?: string;
  index?: number;
  ingredients?: Array<RecipeStepIngredient>;
  instruments?: Array<RecipeStepInstrument>;
  lastUpdatedAt?: string;
  maximumEstimatedTimeInSeconds?: number;
  maximumTemperatureInCelsius?: number;
  media?: Array<RecipeMedia>;
  minimumEstimatedTimeInSeconds?: number;
  minimumTemperatureInCelsius?: number;
  notes?: string;
  optional?: boolean;
  preparation?: ValidPreparation;
  products?: Array<RecipeStepProduct>;
  startTimerAutomatically?: boolean;
  vessels?: Array<RecipeStepVessel>;
};

export type RecipeStepCompletionCondition = {
  archivedAt?: string;
  belongsToRecipeStep?: string;
  createdAt?: string;
  id?: string;
  ingredientState?: ValidIngredientState;
  ingredients?: Array<RecipeStepCompletionConditionIngredient>;
  lastUpdatedAt?: string;
  notes?: string;
  optional?: boolean;
};

export type RecipeStepCompletionConditionCreationRequestInput = {
  belongsToRecipeStep?: string;
  ingredientState?: string;
  ingredients?: Array<number>;
  notes?: string;
  optional?: boolean;
};

export type RecipeStepCompletionConditionForExistingRecipeCreationRequestInput = {
  belongsToRecipeStep?: string;
  ingredientStateID?: string;
  ingredients?: Array<RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput>;
  notes?: string;
  optional?: boolean;
};

export type RecipeStepCompletionConditionIngredient = {
  archivedAt?: string;
  belongsToRecipeStepCompletionCondition?: string;
  createdAt?: string;
  id?: string;
  lastUpdatedAt?: string;
  recipeStepIngredient?: string;
};

export type RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput = {
  recipeStepIngredient?: string;
};

export type RecipeStepCompletionConditionUpdateRequestInput = {
  belongsToRecipeStep?: string;
  ingredientState?: string;
  notes?: string;
  optional?: boolean;
};

export type RecipeStepCreationRequestInput = {
  completionConditions?: Array<RecipeStepCompletionConditionCreationRequestInput>;
  conditionExpression?: string;
  explicitInstructions?: string;
  index?: number;
  ingredients?: Array<RecipeStepIngredientCreationRequestInput>;
  instruments?: Array<RecipeStepInstrumentCreationRequestInput>;
  maximumEstimatedTimeInSeconds?: number;
  maximumTemperatureInCelsius?: number;
  minimumEstimatedTimeInSeconds?: number;
  minimumTemperatureInCelsius?: number;
  notes?: string;
  optional?: boolean;
  preparationID?: string;
  products?: Array<RecipeStepProductCreationRequestInput>;
  startTimerAutomatically?: boolean;
  vessels?: Array<RecipeStepVesselCreationRequestInput>;
};

export type RecipeStepIngredient = {
  archivedAt?: string;
  belongsToRecipeStep?: string;
  createdAt?: string;
  id?: string;
  ingredient?: ValidIngredient;
  ingredientNotes?: string;
  lastUpdatedAt?: string;
  maximumQuantity?: number;
  measurementUnit?: ValidMeasurementUnit;
  minimumQuantity?: number;
  name?: string;
  optionIndex?: number;
  optional?: boolean;
  productOfRecipeID?: string;
  productPercentageToUse?: number;
  quantityNotes?: string;
  recipeStepProductID?: string;
  toTaste?: boolean;
  vesselIndex?: number;
};

export type RecipeStepIngredientCreationRequestInput = {
  ingredientID?: string;
  ingredientNotes?: string;
  maximumQuantity?: number;
  measurementUnitID?: string;
  minimumQuantity?: number;
  name?: string;
  optionIndex?: number;
  optional?: boolean;
  productOfRecipeID?: string;
  productOfRecipeStepIndex?: number;
  productOfRecipeStepProductIndex?: number;
  productPercentageToUse?: number;
  quantityNotes?: string;
  toTaste?: boolean;
  vesselIndex?: number;
};

export type RecipeStepIngredientUpdateRequestInput = {
  belongsToRecipeStep?: string;
  ingredientID?: string;
  ingredientNotes?: string;
  maximumQuantity?: number;
  measurementUnitID?: string;
  minimumQuantity?: number;
  name?: string;
  optionIndex?: number;
  optional?: boolean;
  productOfRecipeID?: string;
  productPercentageToUse?: number;
  quantityNotes?: string;
  recipeStepProductID?: string;
  toTaste?: boolean;
  vesselIndex?: number;
};

export type RecipeStepInstrument = {
  archivedAt?: string;
  belongsToRecipeStep?: string;
  createdAt?: string;
  id?: string;
  instrument?: ValidInstrument;
  lastUpdatedAt?: string;
  maximumQuantity?: number;
  minimumQuantity?: number;
  name?: string;
  notes?: string;
  optionIndex?: number;
  optional?: boolean;
  preferenceRank?: number;
  recipeStepProductID?: string;
};

export type RecipeStepInstrumentCreationRequestInput = {
  instrumentID?: string;
  maximumQuantity?: number;
  minimumQuantity?: number;
  name?: string;
  notes?: string;
  optionIndex?: number;
  optional?: boolean;
  preferenceRank?: number;
  productOfRecipeStepIndex?: number;
  productOfRecipeStepProductIndex?: number;
  recipeStepProductID?: string;
};

export type RecipeStepInstrumentUpdateRequestInput = {
  belongsToRecipeStep?: string;
  instrumentID?: string;
  maximumQuantity?: number;
  minimumQuantity?: number;
  name?: string;
  notes?: string;
  optionIndex?: number;
  optional?: boolean;
  preferenceRank?: number;
  recipeStepProductID?: string;
};

export type RecipeStepProduct = {
  archivedAt?: string;
  belongsToRecipeStep?: string;
  compostable?: boolean;
  containedInVesselIndex?: number;
  createdAt?: string;
  id?: string;
  index?: number;
  isLiquid?: boolean;
  isWaste?: boolean;
  lastUpdatedAt?: string;
  maximumQuantity?: number;
  maximumStorageDurationInSeconds?: number;
  maximumStorageTemperatureInCelsius?: number;
  measurementUnit?: ValidMeasurementUnit;
  minimumQuantity?: number;
  minimumStorageTemperatureInCelsius?: number;
  name?: string;
  quantityNotes?: string;
  storageInstructions?: string;
  type?: string;
};

export type RecipeStepProductCreationRequestInput = {
  compostable?: boolean;
  containedInVesselIndex?: number;
  index?: number;
  isLiquid?: boolean;
  isWaste?: boolean;
  maximumQuantity?: number;
  maximumStorageDurationInSeconds?: number;
  maximumStorageTemperatureInCelsius?: number;
  measurementUnitID?: string;
  minimumQuantity?: number;
  minimumStorageTemperatureInCelsius?: number;
  name?: string;
  quantityNotes?: string;
  storageInstructions?: string;
  type?: string;
};

export type RecipeStepProductUpdateRequestInput = {
  belongsToRecipeStep?: string;
  compostable?: boolean;
  containedInVesselIndex?: number;
  index?: number;
  isLiquid?: boolean;
  isWaste?: boolean;
  maximumQuantity?: number;
  maximumStorageDurationInSeconds?: number;
  maximumStorageTemperatureInCelsius?: number;
  measurementUnitID?: string;
  minimumQuantity?: number;
  minimumStorageTemperatureInCelsius?: number;
  name?: string;
  quantityNotes?: string;
  storageInstructions?: string;
  type?: string;
};

export type RecipeStepUpdateRequestInput = {
  belongsToRecipe?: string;
  conditionExpression?: string;
  explicitInstructions?: string;
  index?: number;
  maximumEstimatedTimeInSeconds?: number;
  maximumTemperatureInCelsius?: number;
  minimumEstimatedTimeInSeconds?: number;
  minimumTemperatureInCelsius?: number;
  notes?: string;
  optional?: boolean;
  preparation?: ValidPreparation;
  startTimerAutomatically?: boolean;
};

export type RecipeStepVessel = {
  archivedAt?: string;
  belongsToRecipeStep?: string;
  createdAt?: string;
  id?: string;
  lastUpdatedAt?: string;
  maximumQuantity?: number;
  minimumQuantity?: number;
  name?: string;
  notes?: string;
  recipeStepProductID?: string;
  unavailableAfterStep?: boolean;
  vessel?: ValidVessel;
  vesselPreposition?: string;
};

export type RecipeStepVesselCreationRequestInput = {
  maximumQuantity?: number;
  minimumQuantity?: number;
  name?: string;
  notes?: string;
  productOfRecipeStepIndex?: number;
  productOfRecipeStepProductIndex?: number;
  recipeStepProductID?: string;
  unavailableAfterStep?: boolean;
  vesselID?: string;
  vesselPreposition?: string;
};

export type RecipeStepVesselUpdateRequestInput = {
  belongsToRecipeStep?: string;
  maximumQuantity?: number;
  minimumQuantity?: number;
  name?: string;
  notes?: string;
  recipeStepProductID?: string;
  unavailableAfterStep?: boolean;
  vesselID?: string;
  vesselPreposition?: string;
};

export type RecipeUpdateRequestInput = {
  description?: string;
  eligibleForMeals?: boolean;
  inspiredByRecipeID?: string;
  maximumEstimatedPortions?: number;
  minimumEstimatedPortions?: number;
  name?: string;
  pluralPortionName?: string;
  portionName?: string;
  sealOfApproval?: boolean;
  slug?: string;
  source?: string;
  yieldsComponentType?: string;
};

export type ResponseDetails = {
  currentHouseholdID?: string;
  traceID?: string;
};

export type ServiceSetting = {
  adminsOnly?: boolean;
  archivedAt?: string;
  createdAt?: string;
  defaultValue?: string;
  description?: string;
  enumeration?: Array<string>;
  id?: string;
  lastUpdatedAt?: string;
  name?: string;
  type?: string;
};

export type ServiceSettingConfiguration = {
  archivedAt?: string;
  belongsToHousehold?: string;
  belongsToUser?: string;
  createdAt?: string;
  id?: string;
  lastUpdatedAt?: string;
  notes?: string;
  serviceSetting?: ServiceSetting;
  value?: string;
};

export type ServiceSettingConfigurationCreationRequestInput = {
  belongsToHousehold?: string;
  belongsToUser?: string;
  notes?: string;
  serviceSettingID?: string;
  value?: string;
};

export type ServiceSettingConfigurationUpdateRequestInput = {
  belongsToHousehold?: string;
  belongsToUser?: string;
  notes?: string;
  serviceSettingID?: string;
  value?: string;
};

export type ServiceSettingCreationRequestInput = {
  adminsOnly?: boolean;
  defaultValue?: string;
  description?: string;
  enumeration?: Array<string>;
  name?: string;
  type?: string;
};

export type TOTPSecretRefreshInput = {
  currentPassword?: string;
  totpToken?: string;
};

export type TOTPSecretRefreshResponse = {
  qrCode?: string;
  twoFactorSecret?: string;
};

export type TOTPSecretVerificationInput = {
  totpToken?: string;
  userID?: string;
};

export type User = {
  accountStatus?: string;
  accountStatusExplanation?: string;
  archivedAt?: string;
  avatar?: string;
  birthday?: string;
  createdAt?: string;
  emailAddress?: string;
  emailAddressVerifiedAt?: string;
  firstName?: string;
  id?: string;
  lastAcceptedPrivacyPolicy?: string;
  lastAcceptedTOS?: string;
  lastName?: string;
  lastUpdatedAt?: string;
  passwordLastChangedAt?: string;
  requiresPasswordChange?: boolean;
  serviceRoles?: string;
  twoFactorSecretVerifiedAt?: string;
  username?: string;
};

export type UserAccountStatusUpdateInput = {
  newStatus?: string;
  reason?: string;
  targetUserID?: string;
};

export type UserCreationResponse = {
  accountStatus?: string;
  avatar?: string;
  birthday?: string;
  createdAt?: string;
  createdUserID?: string;
  emailAddress?: string;
  firstName?: string;
  isAdmin?: boolean;
  lastName?: string;
  qrCode?: string;
  twoFactorSecret?: string;
  username?: string;
};

export type UserDetailsUpdateRequestInput = {
  birthday?: string;
  currentPassword?: string;
  firstName?: string;
  lastName?: string;
  totpToken?: string;
};

export type UserEmailAddressUpdateInput = {
  currentPassword?: string;
  newEmailAddress?: string;
  totpToken?: string;
};

export type UserIngredientPreference = {
  allergy?: boolean;
  archivedAt?: string;
  belongsToUser?: string;
  createdAt?: string;
  id?: string;
  ingredient?: ValidIngredient;
  lastUpdatedAt?: string;
  notes?: string;
  rating?: number;
};

export type UserIngredientPreferenceCreationRequestInput = {
  allergy?: boolean;
  notes?: string;
  rating?: number;
  validIngredientGroupID?: string;
  validIngredientID?: string;
};

export type UserIngredientPreferenceUpdateRequestInput = {
  allergy?: boolean;
  ingredientID?: string;
  notes?: string;
  rating?: number;
};

export type UserLoginInput = {
  password?: string;
  totpToken?: string;
  username?: string;
};

export type UserNotification = {
  belongsToUser?: string;
  content?: string;
  createdAt?: string;
  id?: string;
  lastUpdatedAt?: string;
  status?: string;
};

export type UserNotificationCreationRequestInput = {
  belongsToUser?: string;
  content?: string;
  status?: string;
};

export type UserNotificationUpdateRequestInput = {
  status?: string;
};

export type UserPermissionsRequestInput = {
  permissions?: Array<string>;
};

export type UserPermissionsResponse = {
  permissions?: {
    [key: string]: unknown;
  };
};

export type UserRegistrationInput = {
  acceptedPrivacyPolicy?: boolean;
  acceptedTOS?: boolean;
  birthday?: string;
  emailAddress?: string;
  firstName?: string;
  householdName?: string;
  invitationID?: string;
  invitationToken?: string;
  lastName?: string;
  password?: string;
  username?: string;
};

export type UserStatusResponse = {
  accountStatus?: string;
  accountStatusExplanation?: string;
  activeHousehold?: string;
  isAuthenticated?: boolean;
  userID?: string;
};

export type UsernameReminderRequestInput = {
  emailAddress?: string;
};

export type UsernameUpdateInput = {
  currentPassword?: string;
  newUsername?: string;
  totpToken?: string;
};

export type ValidIngredient = {
  animalDerived?: boolean;
  animalFlesh?: boolean;
  archivedAt?: string;
  containsAlcohol?: boolean;
  containsDairy?: boolean;
  containsEgg?: boolean;
  containsFish?: boolean;
  containsGluten?: boolean;
  containsPeanut?: boolean;
  containsSesame?: boolean;
  containsShellfish?: boolean;
  containsSoy?: boolean;
  containsTreeNut?: boolean;
  containsWheat?: boolean;
  createdAt?: string;
  description?: string;
  iconPath?: string;
  id?: string;
  isAcid?: boolean;
  isFat?: boolean;
  isFruit?: boolean;
  isGrain?: boolean;
  isHeat?: boolean;
  isLiquid?: boolean;
  isMeasuredVolumetrically?: boolean;
  isProtein?: boolean;
  isSalt?: boolean;
  isStarch?: boolean;
  lastUpdatedAt?: string;
  maximumIdealStorageTemperatureInCelsius?: number;
  minimumIdealStorageTemperatureInCelsius?: number;
  name?: string;
  pluralName?: string;
  restrictToPreparations?: boolean;
  shoppingSuggestions?: string;
  slug?: string;
  storageInstructions?: string;
  warning?: string;
};

export type ValidIngredientCreationRequestInput = {
  animalDerived?: boolean;
  animalFlesh?: boolean;
  containsAlcohol?: boolean;
  containsDairy?: boolean;
  containsEgg?: boolean;
  containsFish?: boolean;
  containsGluten?: boolean;
  containsPeanut?: boolean;
  containsSesame?: boolean;
  containsShellfish?: boolean;
  containsSoy?: boolean;
  containsTreeNut?: boolean;
  containsWheat?: boolean;
  description?: string;
  iconPath?: string;
  isAcid?: boolean;
  isFat?: boolean;
  isFruit?: boolean;
  isGrain?: boolean;
  isHeat?: boolean;
  isLiquid?: boolean;
  isMeasuredVolumetrically?: boolean;
  isProtein?: boolean;
  isSalt?: boolean;
  isStarch?: boolean;
  maximumIdealStorageTemperatureInCelsius?: number;
  minimumIdealStorageTemperatureInCelsius?: number;
  name?: string;
  pluralName?: string;
  restrictToPreparations?: boolean;
  shoppingSuggestions?: string;
  slug?: string;
  storageInstructions?: string;
  warning?: string;
};

export type ValidIngredientGroup = {
  archivedAt?: string;
  createdAt?: string;
  description?: string;
  id?: string;
  lastUpdatedAt?: string;
  members?: Array<ValidIngredientGroupMember>;
  name?: string;
  slug?: string;
};

export type ValidIngredientGroupCreationRequestInput = {
  description?: string;
  members?: Array<ValidIngredientGroupMemberCreationRequestInput>;
  name?: string;
  slug?: string;
};

export type ValidIngredientGroupMember = {
  archivedAt?: string;
  belongsToGroup?: string;
  createdAt?: string;
  id?: string;
  validIngredient?: ValidIngredient;
};

export type ValidIngredientGroupMemberCreationRequestInput = {
  validIngredientID?: string;
};

export type ValidIngredientGroupUpdateRequestInput = {
  description?: string;
  name?: string;
  slug?: string;
};

export type ValidIngredientMeasurementUnit = {
  archivedAt?: string;
  createdAt?: string;
  id?: string;
  ingredient?: ValidIngredient;
  lastUpdatedAt?: string;
  maximumAllowableQuantity?: number;
  measurementUnit?: ValidMeasurementUnit;
  minimumAllowableQuantity?: number;
  notes?: string;
};

export type ValidIngredientMeasurementUnitCreationRequestInput = {
  maximumAllowableQuantity?: number;
  minimumAllowableQuantity?: number;
  notes?: string;
  validIngredientID?: string;
  validMeasurementUnitID?: string;
};

export type ValidIngredientMeasurementUnitUpdateRequestInput = {
  maximumAllowableQuantity?: number;
  minimumAllowableQuantity?: number;
  notes?: string;
  validIngredientID?: string;
  validMeasurementUnitID?: string;
};

export type ValidIngredientPreparation = {
  archivedAt?: string;
  createdAt?: string;
  id?: string;
  ingredient?: ValidIngredient;
  lastUpdatedAt?: string;
  notes?: string;
  preparation?: ValidPreparation;
};

export type ValidIngredientPreparationCreationRequestInput = {
  notes?: string;
  validIngredientID?: string;
  validPreparationID?: string;
};

export type ValidIngredientPreparationUpdateRequestInput = {
  notes?: string;
  validIngredientID?: string;
  validPreparationID?: string;
};

export type ValidIngredientState = {
  archivedAt?: string;
  attributeType?: string;
  createdAt?: string;
  description?: string;
  iconPath?: string;
  id?: string;
  lastUpdatedAt?: string;
  name?: string;
  pastTense?: string;
  slug?: string;
};

export type ValidIngredientStateCreationRequestInput = {
  attributeType?: string;
  description?: string;
  iconPath?: string;
  name?: string;
  pastTense?: string;
  slug?: string;
};

export type ValidIngredientStateIngredient = {
  archivedAt?: string;
  createdAt?: string;
  id?: string;
  ingredient?: ValidIngredient;
  ingredientState?: ValidIngredientState;
  lastUpdatedAt?: string;
  notes?: string;
};

export type ValidIngredientStateIngredientCreationRequestInput = {
  notes?: string;
  validIngredientID?: string;
  validIngredientStateID?: string;
};

export type ValidIngredientStateIngredientUpdateRequestInput = {
  notes?: string;
  validIngredientID?: string;
  validIngredientStateID?: string;
};

export type ValidIngredientStateUpdateRequestInput = {
  attributeType?: string;
  description?: string;
  iconPath?: string;
  name?: string;
  pastTense?: string;
  slug?: string;
};

export type ValidIngredientUpdateRequestInput = {
  animalDerived?: boolean;
  animalFlesh?: boolean;
  containsAlcohol?: boolean;
  containsDairy?: boolean;
  containsEgg?: boolean;
  containsFish?: boolean;
  containsGluten?: boolean;
  containsPeanut?: boolean;
  containsSesame?: boolean;
  containsShellfish?: boolean;
  containsSoy?: boolean;
  containsTreeNut?: boolean;
  containsWheat?: boolean;
  description?: string;
  iconPath?: string;
  isAcid?: boolean;
  isFat?: boolean;
  isFruit?: boolean;
  isGrain?: boolean;
  isHeat?: boolean;
  isLiquid?: boolean;
  isMeasuredVolumetrically?: boolean;
  isProtein?: boolean;
  isSalt?: boolean;
  isStarch?: boolean;
  maximumIdealStorageTemperatureInCelsius?: number;
  minimumIdealStorageTemperatureInCelsius?: number;
  name?: string;
  pluralName?: string;
  restrictToPreparations?: boolean;
  shoppingSuggestions?: string;
  slug?: string;
  storageInstructions?: string;
  warning?: string;
};

export type ValidInstrument = {
  archivedAt?: string;
  createdAt?: string;
  description?: string;
  displayInSummaryLists?: boolean;
  iconPath?: string;
  id?: string;
  includeInGeneratedInstructions?: boolean;
  lastUpdatedAt?: string;
  name?: string;
  pluralName?: string;
  slug?: string;
  usableForStorage?: boolean;
};

export type ValidInstrumentCreationRequestInput = {
  description?: string;
  displayInSummaryLists?: boolean;
  iconPath?: string;
  includeInGeneratedInstructions?: boolean;
  name?: string;
  pluralName?: string;
  slug?: string;
  usableForStorage?: boolean;
};

export type ValidInstrumentUpdateRequestInput = {
  description?: string;
  displayInSummaryLists?: boolean;
  iconPath?: string;
  includeInGeneratedInstructions?: boolean;
  name?: string;
  pluralName?: string;
  slug?: string;
  usableForStorage?: boolean;
};

export type ValidMeasurementUnit = {
  archivedAt?: string;
  createdAt?: string;
  description?: string;
  iconPath?: string;
  id?: string;
  imperial?: boolean;
  lastUpdatedAt?: string;
  metric?: boolean;
  name?: string;
  pluralName?: string;
  slug?: string;
  universal?: boolean;
  volumetric?: boolean;
};

export type ValidMeasurementUnitConversion = {
  archivedAt?: string;
  createdAt?: string;
  from?: ValidMeasurementUnit;
  id?: string;
  lastUpdatedAt?: string;
  modifier?: number;
  notes?: string;
  onlyForIngredient?: ValidIngredient;
  to?: ValidMeasurementUnit;
};

export type ValidMeasurementUnitConversionCreationRequestInput = {
  from?: string;
  modifier?: number;
  notes?: string;
  onlyForIngredient?: string;
  to?: string;
};

export type ValidMeasurementUnitConversionUpdateRequestInput = {
  from?: string;
  modifier?: number;
  notes?: string;
  onlyForIngredient?: string;
  to?: string;
};

export type ValidMeasurementUnitCreationRequestInput = {
  description?: string;
  iconPath?: string;
  imperial?: boolean;
  metric?: boolean;
  name?: string;
  pluralName?: string;
  slug?: string;
  universal?: boolean;
  volumetric?: boolean;
};

export type ValidMeasurementUnitUpdateRequestInput = {
  description?: string;
  iconPath?: string;
  imperial?: boolean;
  metric?: boolean;
  name?: string;
  pluralName?: string;
  slug?: string;
  universal?: boolean;
  volumetric?: boolean;
};

export type ValidPreparation = {
  archivedAt?: string;
  conditionExpressionRequired?: boolean;
  consumesVessel?: boolean;
  createdAt?: string;
  description?: string;
  iconPath?: string;
  id?: string;
  lastUpdatedAt?: string;
  maximumIngredientCount?: number;
  maximumInstrumentCount?: number;
  maximumVesselCount?: number;
  minimumIngredientCount?: number;
  minimumInstrumentCount?: number;
  minimumVesselCount?: number;
  name?: string;
  onlyForVessels?: boolean;
  pastTense?: string;
  restrictToIngredients?: boolean;
  slug?: string;
  temperatureRequired?: boolean;
  timeEstimateRequired?: boolean;
  yieldsNothing?: boolean;
};

export type ValidPreparationCreationRequestInput = {
  conditionExpressionRequired?: boolean;
  consumesVessel?: boolean;
  description?: string;
  iconPath?: string;
  maximumIngredientCount?: number;
  maximumInstrumentCount?: number;
  maximumVesselCount?: number;
  minimumIngredientCount?: number;
  minimumInstrumentCount?: number;
  minimumVesselCount?: number;
  name?: string;
  onlyForVessels?: boolean;
  pastTense?: string;
  restrictToIngredients?: boolean;
  slug?: string;
  temperatureRequired?: boolean;
  timeEstimateRequired?: boolean;
  yieldsNothing?: boolean;
};

export type ValidPreparationInstrument = {
  archivedAt?: string;
  createdAt?: string;
  id?: string;
  instrument?: ValidInstrument;
  lastUpdatedAt?: string;
  notes?: string;
  preparation?: ValidPreparation;
};

export type ValidPreparationInstrumentCreationRequestInput = {
  notes?: string;
  validInstrumentID?: string;
  validPreparationID?: string;
};

export type ValidPreparationInstrumentUpdateRequestInput = {
  notes?: string;
  validInstrumentID?: string;
  validPreparationID?: string;
};

export type ValidPreparationUpdateRequestInput = {
  conditionExpressionRequired?: boolean;
  consumesVessel?: boolean;
  description?: string;
  iconPath?: string;
  maximumIngredientCount?: number;
  maximumInstrumentCount?: number;
  maximumVesselCount?: number;
  minimumIngredientCount?: number;
  minimumInstrumentCount?: number;
  minimumVesselCount?: number;
  name?: string;
  onlyForVessels?: boolean;
  pastTense?: string;
  restrictToIngredients?: boolean;
  slug?: string;
  temperatureRequired?: boolean;
  timeEstimateRequired?: boolean;
  yieldsNothing?: boolean;
};

export type ValidPreparationVessel = {
  archivedAt?: string;
  createdAt?: string;
  id?: string;
  instrument?: ValidVessel;
  lastUpdatedAt?: string;
  notes?: string;
  preparation?: ValidPreparation;
};

export type ValidPreparationVesselCreationRequestInput = {
  notes?: string;
  validPreparationID?: string;
  validVesselID?: string;
};

export type ValidPreparationVesselUpdateRequestInput = {
  notes?: string;
  validPreparationID?: string;
  validVesselID?: string;
};

export type ValidVessel = {
  archivedAt?: string;
  capacity?: number;
  capacityUnit?: ValidMeasurementUnit;
  createdAt?: string;
  description?: string;
  displayInSummaryLists?: boolean;
  heightInMillimeters?: number;
  iconPath?: string;
  id?: string;
  includeInGeneratedInstructions?: boolean;
  lastUpdatedAt?: string;
  lengthInMillimeters?: number;
  name?: string;
  pluralName?: string;
  shape?: string;
  slug?: string;
  usableForStorage?: boolean;
  widthInMillimeters?: number;
};

export type ValidVesselCreationRequestInput = {
  capacity?: number;
  capacityUnitID?: string;
  description?: string;
  displayInSummaryLists?: boolean;
  heightInMillimeters?: number;
  iconPath?: string;
  includeInGeneratedInstructions?: boolean;
  lengthInMillimeters?: number;
  name?: string;
  pluralName?: string;
  shape?: string;
  slug?: string;
  usableForStorage?: boolean;
  widthInMillimeters?: number;
};

export type ValidVesselUpdateRequestInput = {
  capacity?: number;
  capacityUnitID?: string;
  description?: string;
  displayInSummaryLists?: boolean;
  heightInMillimeters?: number;
  iconPath?: string;
  includeInGeneratedInstructions?: boolean;
  lengthInMillimeters?: number;
  name?: string;
  pluralName?: string;
  shape?: string;
  slug?: string;
  usableForStorage?: boolean;
  widthInMillimeters?: number;
};

export type Webhook = {
  archivedAt?: string;
  belongsToHousehold?: string;
  contentType?: string;
  createdAt?: string;
  events?: Array<WebhookTriggerEvent>;
  id?: string;
  lastUpdatedAt?: string;
  method?: string;
  name?: string;
  url?: string;
};

export type WebhookCreationRequestInput = {
  contentType?: string;
  events?: Array<string>;
  method?: string;
  name?: string;
  url?: string;
};

export type WebhookTriggerEvent = {
  archivedAt?: string;
  belongsToWebhook?: string;
  createdAt?: string;
  id?: string;
  triggerEvent?: string;
};

export type WebhookTriggerEventCreationRequestInput = {
  belongsToWebhook?: string;
  triggerEvent?: string;
};

export type AdminUpdateUserStatusData = {
  body: UserAccountStatusUpdateInput;
};

export type AdminUpdateUserStatusResponse = APIResponse & {
  data?: UserStatusResponse;
};

export type AdminUpdateUserStatusError = APIResponseWithError;

export type GetAuditLogEntryByIdData = {
  path: {
    auditLogEntryID: string;
  };
};

export type GetAuditLogEntryByIdResponse = APIResponse & {
  data?: AuditLogEntry;
};

export type GetAuditLogEntryByIdError = APIResponseWithError;

export type GetAuditLogEntriesForHouseholdResponse = APIResponse & {
  data?: AuditLogEntry;
};

export type GetAuditLogEntriesForHouseholdError = APIResponseWithError;

export type GetAuditLogEntriesForUserResponse = APIResponse & {
  data?: AuditLogEntry;
};

export type GetAuditLogEntriesForUserError = APIResponseWithError;

export type GetHouseholdInvitationData = {
  path: {
    householdInvitationID: string;
  };
};

export type GetHouseholdInvitationResponse = APIResponse & {
  data?: HouseholdInvitation;
};

export type GetHouseholdInvitationError = APIResponseWithError;

export type AcceptHouseholdInvitationData = {
  body: HouseholdInvitationUpdateRequestInput;
  path: {
    householdInvitationID: string;
  };
};

export type AcceptHouseholdInvitationResponse = APIResponse & {
  data?: HouseholdInvitation;
};

export type AcceptHouseholdInvitationError = APIResponseWithError;

export type CancelHouseholdInvitationData = {
  body: HouseholdInvitationUpdateRequestInput;
  path: {
    householdInvitationID: string;
  };
};

export type CancelHouseholdInvitationResponse = APIResponse & {
  data?: HouseholdInvitation;
};

export type CancelHouseholdInvitationError = APIResponseWithError;

export type RejectHouseholdInvitationData = {
  body: HouseholdInvitationUpdateRequestInput;
  path: {
    householdInvitationID: string;
  };
};

export type RejectHouseholdInvitationResponse = APIResponse & {
  data?: HouseholdInvitation;
};

export type RejectHouseholdInvitationError = APIResponseWithError;

export type GetReceivedHouseholdInvitationsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetReceivedHouseholdInvitationsResponse = APIResponse & {
  data?: Array<HouseholdInvitation>;
};

export type GetReceivedHouseholdInvitationsError = APIResponseWithError;

export type GetSentHouseholdInvitationsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetSentHouseholdInvitationsResponse = APIResponse & {
  data?: Array<HouseholdInvitation>;
};

export type GetSentHouseholdInvitationsError = APIResponseWithError;

export type GetHouseholdsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetHouseholdsResponse = APIResponse & {
  data?: Array<Household>;
};

export type GetHouseholdsError = APIResponseWithError;

export type CreateHouseholdData = {
  body: HouseholdCreationRequestInput;
};

export type CreateHouseholdResponse = APIResponse & {
  data?: Household;
};

export type CreateHouseholdError = APIResponseWithError;

export type ArchiveHouseholdData = {
  path: {
    householdID: string;
  };
};

export type ArchiveHouseholdResponse = APIResponse & {
  data?: Household;
};

export type ArchiveHouseholdError = APIResponseWithError;

export type GetHouseholdData = {
  path: {
    householdID: string;
  };
};

export type GetHouseholdResponse = APIResponse & {
  data?: Household;
};

export type GetHouseholdError = APIResponseWithError;

export type UpdateHouseholdData = {
  body: HouseholdUpdateRequestInput;
  path: {
    householdID: string;
  };
};

export type UpdateHouseholdResponse = APIResponse & {
  data?: Household;
};

export type UpdateHouseholdError = APIResponseWithError;

export type SetDefaultHouseholdData = {
  path: {
    householdID: string;
  };
};

export type SetDefaultHouseholdResponse = APIResponse & {
  data?: Household;
};

export type SetDefaultHouseholdError = APIResponseWithError;

export type CreateHouseholdInvitationData = {
  body: HouseholdInvitationCreationRequestInput;
  path: {
    householdID: string;
  };
};

export type CreateHouseholdInvitationResponse = APIResponse & {
  data?: HouseholdInvitation;
};

export type CreateHouseholdInvitationError = APIResponseWithError;

export type GetHouseholdInvitationByIdData = {
  path: {
    householdID: string;
    householdInvitationID: string;
  };
};

export type GetHouseholdInvitationByIdResponse = APIResponse & {
  data?: HouseholdInvitation;
};

export type GetHouseholdInvitationByIdError = APIResponseWithError;

export type PostHouseholdsHouseholdIdInviteData = {
  body: HouseholdInvitationCreationRequestInput;
  path: {
    householdID: string;
  };
};

export type PostHouseholdsHouseholdIdInviteResponse = APIResponse & {
  data?: HouseholdInvitation;
};

export type PostHouseholdsHouseholdIdInviteError = APIResponseWithError;

export type ArchiveUserMembershipData = {
  path: {
    householdID: string;
    userID: string;
  };
};

export type ArchiveUserMembershipResponse = APIResponse & {
  data?: HouseholdUserMembership;
};

export type ArchiveUserMembershipError = APIResponseWithError;

export type UpdateHouseholdMemberPermissionsData = {
  body: ModifyUserPermissionsInput;
  path: {
    householdID: string;
    userID: string;
  };
};

export type UpdateHouseholdMemberPermissionsResponse = APIResponse & {
  data?: UserPermissionsResponse;
};

export type UpdateHouseholdMemberPermissionsError = APIResponseWithError;

export type TransferHouseholdOwnershipData = {
  body: HouseholdOwnershipTransferInput;
  path: {
    householdID: string;
  };
};

export type TransferHouseholdOwnershipResponse = APIResponse & {
  data?: Household;
};

export type TransferHouseholdOwnershipError = APIResponseWithError;

export type GetActiveHouseholdResponse = APIResponse & {
  data?: Household;
};

export type GetActiveHouseholdError = APIResponseWithError;

export type GetHouseholdInstrumentOwnershipsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetHouseholdInstrumentOwnershipsResponse = APIResponse & {
  data?: Array<HouseholdInstrumentOwnership>;
};

export type GetHouseholdInstrumentOwnershipsError = APIResponseWithError;

export type CreateHouseholdInstrumentOwnershipData = {
  body: HouseholdInstrumentOwnershipCreationRequestInput;
};

export type CreateHouseholdInstrumentOwnershipResponse = APIResponse & {
  data?: HouseholdInstrumentOwnership;
};

export type CreateHouseholdInstrumentOwnershipError = APIResponseWithError;

export type ArchiveHouseholdInstrumentOwnershipData = {
  path: {
    householdInstrumentOwnershipID: string;
  };
};

export type ArchiveHouseholdInstrumentOwnershipResponse = APIResponse & {
  data?: HouseholdInstrumentOwnership;
};

export type ArchiveHouseholdInstrumentOwnershipError = APIResponseWithError;

export type GetHouseholdInstrumentOwnershipData = {
  path: {
    householdInstrumentOwnershipID: string;
  };
};

export type GetHouseholdInstrumentOwnershipResponse = APIResponse & {
  data?: HouseholdInstrumentOwnership;
};

export type GetHouseholdInstrumentOwnershipError = APIResponseWithError;

export type UpdateHouseholdInstrumentOwnershipData = {
  body: HouseholdInstrumentOwnershipUpdateRequestInput;
  path: {
    householdInstrumentOwnershipID: string;
  };
};

export type UpdateHouseholdInstrumentOwnershipResponse = APIResponse & {
  data?: HouseholdInstrumentOwnership;
};

export type UpdateHouseholdInstrumentOwnershipError = APIResponseWithError;

export type GetMealPlansData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetMealPlansResponse = APIResponse & {
  data?: Array<MealPlan>;
};

export type GetMealPlansError = APIResponseWithError;

export type CreateMealPlanData = {
  body: MealPlanCreationRequestInput;
};

export type CreateMealPlanResponse = APIResponse & {
  data?: MealPlan;
};

export type CreateMealPlanError = APIResponseWithError;

export type ArchiveMealPlanData = {
  path: {
    mealPlanID: string;
  };
};

export type ArchiveMealPlanResponse = APIResponse & {
  data?: MealPlan;
};

export type ArchiveMealPlanError = APIResponseWithError;

export type GetMealPlanData = {
  path: {
    mealPlanID: string;
  };
};

export type GetMealPlanResponse = APIResponse & {
  data?: MealPlan;
};

export type GetMealPlanError = APIResponseWithError;

export type UpdateMealPlanData = {
  body: MealPlanUpdateRequestInput;
  path: {
    mealPlanID: string;
  };
};

export type UpdateMealPlanResponse = APIResponse & {
  data?: MealPlan;
};

export type UpdateMealPlanError = APIResponseWithError;

export type GetMealPlanEventsData = {
  path: {
    mealPlanID: string;
  };
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetMealPlanEventsResponse = APIResponse & {
  data?: Array<MealPlanEvent>;
};

export type GetMealPlanEventsError = APIResponseWithError;

export type CreateMealPlanEventData = {
  body: MealPlanEventCreationRequestInput;
  path: {
    mealPlanID: string;
  };
};

export type CreateMealPlanEventResponse = APIResponse & {
  data?: MealPlanEvent;
};

export type CreateMealPlanEventError = APIResponseWithError;

export type ArchiveMealPlanEventData = {
  path: {
    mealPlanEventID: string;
    mealPlanID: string;
  };
};

export type ArchiveMealPlanEventResponse = APIResponse & {
  data?: MealPlanEvent;
};

export type ArchiveMealPlanEventError = APIResponseWithError;

export type GetMealPlanEventData = {
  path: {
    mealPlanEventID: string;
    mealPlanID: string;
  };
};

export type GetMealPlanEventResponse = APIResponse & {
  data?: MealPlanEvent;
};

export type GetMealPlanEventError = APIResponseWithError;

export type UpdateMealPlanEventData = {
  body: MealPlanEventUpdateRequestInput;
  path: {
    mealPlanEventID: string;
    mealPlanID: string;
  };
};

export type UpdateMealPlanEventResponse = APIResponse & {
  data?: MealPlanEvent;
};

export type UpdateMealPlanEventError = APIResponseWithError;

export type GetMealPlanOptionsData = {
  path: {
    mealPlanEventID: string;
    mealPlanID: string;
  };
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetMealPlanOptionsResponse = APIResponse & {
  data?: Array<MealPlanOption>;
};

export type GetMealPlanOptionsError = APIResponseWithError;

export type CreateMealPlanOptionData = {
  body: MealPlanOptionCreationRequestInput;
  path: {
    mealPlanEventID: string;
    mealPlanID: string;
  };
};

export type CreateMealPlanOptionResponse = APIResponse & {
  data?: MealPlanOption;
};

export type CreateMealPlanOptionError = APIResponseWithError;

export type ArchiveMealPlanOptionData = {
  path: {
    mealPlanEventID: string;
    mealPlanID: string;
    mealPlanOptionID: string;
  };
};

export type ArchiveMealPlanOptionResponse = APIResponse & {
  data?: MealPlanOption;
};

export type ArchiveMealPlanOptionError = APIResponseWithError;

export type GetMealPlanOptionData = {
  path: {
    mealPlanEventID: string;
    mealPlanID: string;
    mealPlanOptionID: string;
  };
};

export type GetMealPlanOptionResponse = APIResponse & {
  data?: MealPlanOption;
};

export type GetMealPlanOptionError = APIResponseWithError;

export type UpdateMealPlanOptionData = {
  body: MealPlanOptionUpdateRequestInput;
  path: {
    mealPlanEventID: string;
    mealPlanID: string;
    mealPlanOptionID: string;
  };
};

export type UpdateMealPlanOptionResponse = APIResponse & {
  data?: MealPlanOption;
};

export type UpdateMealPlanOptionError = APIResponseWithError;

export type GetMealPlanOptionVotesData = {
  path: {
    mealPlanEventID: string;
    mealPlanID: string;
    mealPlanOptionID: string;
  };
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetMealPlanOptionVotesResponse = APIResponse & {
  data?: Array<MealPlanOptionVote>;
};

export type GetMealPlanOptionVotesError = APIResponseWithError;

export type ArchiveMealPlanOptionVoteData = {
  path: {
    mealPlanEventID: string;
    mealPlanID: string;
    mealPlanOptionID: string;
    mealPlanOptionVoteID: string;
  };
};

export type ArchiveMealPlanOptionVoteResponse = APIResponse & {
  data?: MealPlanOptionVote;
};

export type ArchiveMealPlanOptionVoteError = APIResponseWithError;

export type GetMealPlanOptionVoteData = {
  path: {
    mealPlanEventID: string;
    mealPlanID: string;
    mealPlanOptionID: string;
    mealPlanOptionVoteID: string;
  };
};

export type GetMealPlanOptionVoteResponse = APIResponse & {
  data?: MealPlanOptionVote;
};

export type GetMealPlanOptionVoteError = APIResponseWithError;

export type UpdateMealPlanOptionVoteData = {
  body: MealPlanOptionVoteUpdateRequestInput;
  path: {
    mealPlanEventID: string;
    mealPlanID: string;
    mealPlanOptionID: string;
    mealPlanOptionVoteID: string;
  };
};

export type UpdateMealPlanOptionVoteResponse = APIResponse & {
  data?: MealPlanOptionVote;
};

export type UpdateMealPlanOptionVoteError = APIResponseWithError;

export type CreateMealPlanOptionVoteData = {
  body: MealPlanOptionVoteCreationRequestInput;
  path: {
    mealPlanEventID: string;
    mealPlanID: string;
  };
};

export type CreateMealPlanOptionVoteResponse = APIResponse & {
  data?: MealPlanOptionVote;
};

export type CreateMealPlanOptionVoteError = APIResponseWithError;

export type FinalizeMealPlanData = {
  path: {
    mealPlanID: string;
  };
};

export type FinalizeMealPlanResponse = APIResponse & {
  data?: FinalizeMealPlansResponse;
};

export type FinalizeMealPlanError = APIResponseWithError;

export type GetMealPlanGroceryListItemsForMealPlanData = {
  path: {
    mealPlanID: string;
  };
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetMealPlanGroceryListItemsForMealPlanResponse = APIResponse & {
  data?: Array<MealPlanGroceryListItem>;
};

export type GetMealPlanGroceryListItemsForMealPlanError = APIResponseWithError;

export type CreateMealPlanGroceryListItemData = {
  body: MealPlanGroceryListItemCreationRequestInput;
  path: {
    mealPlanID: string;
  };
};

export type CreateMealPlanGroceryListItemResponse = APIResponse & {
  data?: MealPlanGroceryListItem;
};

export type CreateMealPlanGroceryListItemError = APIResponseWithError;

export type ArchiveMealPlanGroceryListItemData = {
  path: {
    mealPlanGroceryListItemID: string;
    mealPlanID: string;
  };
};

export type ArchiveMealPlanGroceryListItemResponse = APIResponse & {
  data?: MealPlanGroceryListItem;
};

export type ArchiveMealPlanGroceryListItemError = APIResponseWithError;

export type GetMealPlanGroceryListItemData = {
  path: {
    mealPlanGroceryListItemID: string;
    mealPlanID: string;
  };
};

export type GetMealPlanGroceryListItemResponse = APIResponse & {
  data?: MealPlanGroceryListItem;
};

export type GetMealPlanGroceryListItemError = APIResponseWithError;

export type UpdateMealPlanGroceryListItemData = {
  body: MealPlanGroceryListItemUpdateRequestInput;
  path: {
    mealPlanGroceryListItemID: string;
    mealPlanID: string;
  };
};

export type UpdateMealPlanGroceryListItemResponse = APIResponse & {
  data?: MealPlanGroceryListItem;
};

export type UpdateMealPlanGroceryListItemError = APIResponseWithError;

export type GetMealPlanTasksData = {
  path: {
    mealPlanID: string;
  };
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetMealPlanTasksResponse = APIResponse & {
  data?: Array<MealPlanTask>;
};

export type GetMealPlanTasksError = APIResponseWithError;

export type CreateMealPlanTaskData = {
  body: MealPlanTaskCreationRequestInput;
  path: {
    mealPlanID: string;
  };
};

export type CreateMealPlanTaskResponse = APIResponse & {
  data?: MealPlanTask;
};

export type CreateMealPlanTaskError = APIResponseWithError;

export type GetMealPlanTaskData = {
  path: {
    mealPlanID: string;
    mealPlanTaskID: string;
  };
};

export type GetMealPlanTaskResponse = APIResponse & {
  data?: MealPlanTask;
};

export type GetMealPlanTaskError = APIResponseWithError;

export type UpdateMealPlanTaskStatusData = {
  body: MealPlanTaskStatusChangeRequestInput;
  path: {
    mealPlanID: string;
    mealPlanTaskID: string;
  };
};

export type UpdateMealPlanTaskStatusResponse = APIResponse & {
  data?: MealPlanTask;
};

export type UpdateMealPlanTaskStatusError = APIResponseWithError;

export type GetMealsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetMealsResponse = APIResponse & {
  data?: Array<Meal>;
};

export type GetMealsError = APIResponseWithError;

export type CreateMealData = {
  body: MealCreationRequestInput;
};

export type CreateMealResponse = APIResponse & {
  data?: Meal;
};

export type CreateMealError = APIResponseWithError;

export type ArchiveMealData = {
  path: {
    mealID: string;
  };
};

export type ArchiveMealResponse = APIResponse & {
  data?: Meal;
};

export type ArchiveMealError = APIResponseWithError;

export type GetMealData = {
  path: {
    mealID: string;
  };
};

export type GetMealResponse = APIResponse & {
  data?: Meal;
};

export type GetMealError = APIResponseWithError;

export type SearchForMealsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * the search query parameter
     */
    q: string;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type SearchForMealsResponse = APIResponse & {
  data?: Array<Meal>;
};

export type SearchForMealsError = APIResponseWithError;

export type GetOauth2ClientsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetOauth2ClientsResponse = APIResponse & {
  data?: Array<OAuth2Client>;
};

export type GetOauth2ClientsError = APIResponseWithError;

export type CreateOauth2ClientData = {
  body: OAuth2ClientCreationRequestInput;
};

export type CreateOauth2ClientResponse = APIResponse & {
  data?: OAuth2ClientCreationResponse;
};

export type CreateOauth2ClientError = APIResponseWithError;

export type ArchiveOauth2ClientData = {
  path: {
    oauth2ClientID: string;
  };
};

export type ArchiveOauth2ClientResponse = APIResponse & {
  data?: OAuth2Client;
};

export type ArchiveOauth2ClientError = APIResponseWithError;

export type GetOauth2ClientData = {
  path: {
    oauth2ClientID: string;
  };
};

export type GetOauth2ClientResponse = APIResponse & {
  data?: OAuth2Client;
};

export type GetOauth2ClientError = APIResponseWithError;

export type GetRecipesData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetRecipesResponse = APIResponse & {
  data?: Array<Recipe>;
};

export type GetRecipesError = APIResponseWithError;

export type CreateRecipeData = {
  body: RecipeCreationRequestInput;
};

export type CreateRecipeResponse = APIResponse & {
  data?: Recipe;
};

export type CreateRecipeError = APIResponseWithError;

export type ArchiveRecipeData = {
  path: {
    recipeID: string;
  };
};

export type ArchiveRecipeResponse = APIResponse & {
  data?: Recipe;
};

export type ArchiveRecipeError = APIResponseWithError;

export type GetRecipeData = {
  path: {
    recipeID: string;
  };
};

export type GetRecipeResponse = APIResponse & {
  data?: Recipe;
};

export type GetRecipeError = APIResponseWithError;

export type UpdateRecipeData = {
  body: RecipeUpdateRequestInput;
  path: {
    recipeID: string;
  };
};

export type UpdateRecipeResponse = APIResponse & {
  data?: Recipe;
};

export type UpdateRecipeError = APIResponseWithError;

export type CloneRecipeData = {
  path: {
    recipeID: string;
  };
};

export type CloneRecipeResponse = APIResponse & {
  data?: Recipe;
};

export type CloneRecipeError = APIResponseWithError;

export type GetRecipeDagData = {
  path: {
    recipeID: string;
  };
};

export type GetRecipeDagResponse = APIResponse & {
  data?: APIError;
};

export type GetRecipeDagError = APIResponseWithError;

export type UploadMediaForRecipeData = {
  path: {
    recipeID: string;
  };
};

export type GetMermaidDiagramForRecipeData = {
  path: {
    recipeID: string;
  };
};

export type GetRecipeMealPlanTasksData = {
  path: {
    recipeID: string;
  };
};

export type GetRecipeMealPlanTasksResponse = APIResponse & {
  data?: RecipePrepTaskStep;
};

export type GetRecipeMealPlanTasksError = APIResponseWithError;

export type GetRecipePrepTasksData = {
  path: {
    recipeID: string;
  };
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetRecipePrepTasksResponse = APIResponse & {
  data?: Array<RecipePrepTask>;
};

export type GetRecipePrepTasksError = APIResponseWithError;

export type CreateRecipePrepTaskData = {
  body: RecipePrepTaskCreationRequestInput;
  path: {
    recipeID: string;
  };
};

export type CreateRecipePrepTaskResponse = APIResponse & {
  data?: RecipePrepTask;
};

export type CreateRecipePrepTaskError = APIResponseWithError;

export type ArchiveRecipePrepTaskData = {
  path: {
    recipeID: string;
    recipePrepTaskID: string;
  };
};

export type ArchiveRecipePrepTaskResponse = APIResponse & {
  data?: RecipePrepTask;
};

export type ArchiveRecipePrepTaskError = APIResponseWithError;

export type GetRecipePrepTaskData = {
  path: {
    recipeID: string;
    recipePrepTaskID: string;
  };
};

export type GetRecipePrepTaskResponse = APIResponse & {
  data?: RecipePrepTask;
};

export type GetRecipePrepTaskError = APIResponseWithError;

export type UpdateRecipePrepTaskData = {
  body: RecipePrepTaskUpdateRequestInput;
  path: {
    recipeID: string;
    recipePrepTaskID: string;
  };
};

export type UpdateRecipePrepTaskResponse = APIResponse & {
  data?: RecipePrepTask;
};

export type UpdateRecipePrepTaskError = APIResponseWithError;

export type GetRecipeRatingsData = {
  path: {
    recipeID: string;
  };
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetRecipeRatingsResponse = APIResponse & {
  data?: Array<RecipeRating>;
};

export type GetRecipeRatingsError = APIResponseWithError;

export type CreateRecipeRatingData = {
  body: RecipeRatingCreationRequestInput;
  path: {
    recipeID: string;
  };
};

export type CreateRecipeRatingResponse = APIResponse & {
  data?: RecipeRating;
};

export type CreateRecipeRatingError = APIResponseWithError;

export type ArchiveRecipeRatingData = {
  path: {
    recipeID: string;
    recipeRatingID: string;
  };
};

export type ArchiveRecipeRatingResponse = APIResponse & {
  data?: RecipeRating;
};

export type ArchiveRecipeRatingError = APIResponseWithError;

export type GetRecipeRatingData = {
  path: {
    recipeID: string;
    recipeRatingID: string;
  };
};

export type GetRecipeRatingResponse = APIResponse & {
  data?: RecipeRating;
};

export type GetRecipeRatingError = APIResponseWithError;

export type UpdateRecipeRatingData = {
  body: RecipeRatingUpdateRequestInput;
  path: {
    recipeID: string;
    recipeRatingID: string;
  };
};

export type UpdateRecipeRatingResponse = APIResponse & {
  data?: RecipeRating;
};

export type UpdateRecipeRatingError = APIResponseWithError;

export type GetRecipeStepsData = {
  path: {
    recipeID: string;
  };
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetRecipeStepsResponse = APIResponse & {
  data?: Array<RecipeStep>;
};

export type GetRecipeStepsError = APIResponseWithError;

export type CreateRecipeStepData = {
  body: RecipeStepCreationRequestInput;
  path: {
    recipeID: string;
  };
};

export type CreateRecipeStepResponse = APIResponse & {
  data?: RecipeStep;
};

export type CreateRecipeStepError = APIResponseWithError;

export type ArchiveRecipeStepData = {
  path: {
    recipeID: string;
    recipeStepID: string;
  };
};

export type ArchiveRecipeStepResponse = APIResponse & {
  data?: RecipeStep;
};

export type ArchiveRecipeStepError = APIResponseWithError;

export type GetRecipeStepData = {
  path: {
    recipeID: string;
    recipeStepID: string;
  };
};

export type GetRecipeStepResponse = APIResponse & {
  data?: RecipeStep;
};

export type GetRecipeStepError = APIResponseWithError;

export type UpdateRecipeStepData = {
  body: RecipeStepUpdateRequestInput;
  path: {
    recipeID: string;
    recipeStepID: string;
  };
};

export type UpdateRecipeStepResponse = APIResponse & {
  data?: RecipeStep;
};

export type UpdateRecipeStepError = APIResponseWithError;

export type GetRecipeStepCompletionConditionsData = {
  path: {
    recipeID: string;
    recipeStepID: string;
  };
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetRecipeStepCompletionConditionsResponse = APIResponse & {
  data?: Array<RecipeStepCompletionCondition>;
};

export type GetRecipeStepCompletionConditionsError = APIResponseWithError;

export type CreateRecipeStepCompletionConditionData = {
  body: RecipeStepCompletionConditionForExistingRecipeCreationRequestInput;
  path: {
    recipeID: string;
    recipeStepID: string;
  };
};

export type CreateRecipeStepCompletionConditionResponse = APIResponse & {
  data?: RecipeStepCompletionCondition;
};

export type CreateRecipeStepCompletionConditionError = APIResponseWithError;

export type ArchiveRecipeStepCompletionConditionData = {
  path: {
    recipeID: string;
    recipeStepCompletionConditionID: string;
    recipeStepID: string;
  };
};

export type ArchiveRecipeStepCompletionConditionResponse = APIResponse & {
  data?: RecipeStepCompletionCondition;
};

export type ArchiveRecipeStepCompletionConditionError = APIResponseWithError;

export type GetRecipeStepCompletionConditionData = {
  path: {
    recipeID: string;
    recipeStepCompletionConditionID: string;
    recipeStepID: string;
  };
};

export type GetRecipeStepCompletionConditionResponse = APIResponse & {
  data?: RecipeStepCompletionCondition;
};

export type GetRecipeStepCompletionConditionError = APIResponseWithError;

export type UpdateRecipeStepCompletionConditionData = {
  body: RecipeStepCompletionConditionUpdateRequestInput;
  path: {
    recipeID: string;
    recipeStepCompletionConditionID: string;
    recipeStepID: string;
  };
};

export type UpdateRecipeStepCompletionConditionResponse = APIResponse & {
  data?: RecipeStepCompletionCondition;
};

export type UpdateRecipeStepCompletionConditionError = APIResponseWithError;

export type UploadMediaForRecipeStepData = {
  path: {
    recipeID: string;
    recipeStepID: string;
  };
};

export type GetRecipeStepIngredientsData = {
  path: {
    recipeID: string;
    recipeStepID: string;
  };
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetRecipeStepIngredientsResponse = APIResponse & {
  data?: Array<RecipeStepIngredient>;
};

export type GetRecipeStepIngredientsError = APIResponseWithError;

export type CreateRecipeStepIngredientData = {
  body: RecipeStepIngredientCreationRequestInput;
  path: {
    recipeID: string;
    recipeStepID: string;
  };
};

export type CreateRecipeStepIngredientResponse = APIResponse & {
  data?: RecipeStepIngredient;
};

export type CreateRecipeStepIngredientError = APIResponseWithError;

export type ArchiveRecipeStepIngredientData = {
  path: {
    recipeID: string;
    recipeStepID: string;
    recipeStepIngredientID: string;
  };
};

export type ArchiveRecipeStepIngredientResponse = APIResponse & {
  data?: RecipeStepIngredient;
};

export type ArchiveRecipeStepIngredientError = APIResponseWithError;

export type GetRecipeStepIngredientData = {
  path: {
    recipeID: string;
    recipeStepID: string;
    recipeStepIngredientID: string;
  };
};

export type GetRecipeStepIngredientResponse = APIResponse & {
  data?: RecipeStepIngredient;
};

export type GetRecipeStepIngredientError = APIResponseWithError;

export type UpdateRecipeStepIngredientData = {
  body: RecipeStepIngredientUpdateRequestInput;
  path: {
    recipeID: string;
    recipeStepID: string;
    recipeStepIngredientID: string;
  };
};

export type UpdateRecipeStepIngredientResponse = APIResponse & {
  data?: RecipeStepIngredient;
};

export type UpdateRecipeStepIngredientError = APIResponseWithError;

export type GetRecipeStepInstrumentsData = {
  path: {
    recipeID: string;
    recipeStepID: string;
  };
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetRecipeStepInstrumentsResponse = APIResponse & {
  data?: Array<RecipeStepInstrument>;
};

export type GetRecipeStepInstrumentsError = APIResponseWithError;

export type CreateRecipeStepInstrumentData = {
  body: RecipeStepInstrumentCreationRequestInput;
  path: {
    recipeID: string;
    recipeStepID: string;
  };
};

export type CreateRecipeStepInstrumentResponse = APIResponse & {
  data?: RecipeStepInstrument;
};

export type CreateRecipeStepInstrumentError = APIResponseWithError;

export type ArchiveRecipeStepInstrumentData = {
  path: {
    recipeID: string;
    recipeStepID: string;
    recipeStepInstrumentID: string;
  };
};

export type ArchiveRecipeStepInstrumentResponse = APIResponse & {
  data?: RecipeStepInstrument;
};

export type ArchiveRecipeStepInstrumentError = APIResponseWithError;

export type GetRecipeStepInstrumentData = {
  path: {
    recipeID: string;
    recipeStepID: string;
    recipeStepInstrumentID: string;
  };
};

export type GetRecipeStepInstrumentResponse = APIResponse & {
  data?: RecipeStepInstrument;
};

export type GetRecipeStepInstrumentError = APIResponseWithError;

export type UpdateRecipeStepInstrumentData = {
  body: RecipeStepInstrumentUpdateRequestInput;
  path: {
    recipeID: string;
    recipeStepID: string;
    recipeStepInstrumentID: string;
  };
};

export type UpdateRecipeStepInstrumentResponse = APIResponse & {
  data?: RecipeStepInstrument;
};

export type UpdateRecipeStepInstrumentError = APIResponseWithError;

export type GetRecipeStepProductsData = {
  path: {
    recipeID: string;
    recipeStepID: string;
  };
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetRecipeStepProductsResponse = APIResponse & {
  data?: Array<RecipeStepProduct>;
};

export type GetRecipeStepProductsError = APIResponseWithError;

export type CreateRecipeStepProductData = {
  body: RecipeStepProductCreationRequestInput;
  path: {
    recipeID: string;
    recipeStepID: string;
  };
};

export type CreateRecipeStepProductResponse = APIResponse & {
  data?: RecipeStepProduct;
};

export type CreateRecipeStepProductError = APIResponseWithError;

export type ArchiveRecipeStepProductData = {
  path: {
    recipeID: string;
    recipeStepID: string;
    recipeStepProductID: string;
  };
};

export type ArchiveRecipeStepProductResponse = APIResponse & {
  data?: RecipeStepProduct;
};

export type ArchiveRecipeStepProductError = APIResponseWithError;

export type GetRecipeStepProductData = {
  path: {
    recipeID: string;
    recipeStepID: string;
    recipeStepProductID: string;
  };
};

export type GetRecipeStepProductResponse = APIResponse & {
  data?: RecipeStepProduct;
};

export type GetRecipeStepProductError = APIResponseWithError;

export type UpdateRecipeStepProductData = {
  body: RecipeStepProductUpdateRequestInput;
  path: {
    recipeID: string;
    recipeStepID: string;
    recipeStepProductID: string;
  };
};

export type UpdateRecipeStepProductResponse = APIResponse & {
  data?: RecipeStepProduct;
};

export type UpdateRecipeStepProductError = APIResponseWithError;

export type GetRecipeStepVesselsData = {
  path: {
    recipeID: string;
    recipeStepID: string;
  };
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetRecipeStepVesselsResponse = APIResponse & {
  data?: Array<RecipeStepVessel>;
};

export type GetRecipeStepVesselsError = APIResponseWithError;

export type CreateRecipeStepVesselData = {
  body: RecipeStepVesselCreationRequestInput;
  path: {
    recipeID: string;
    recipeStepID: string;
  };
};

export type CreateRecipeStepVesselResponse = APIResponse & {
  data?: RecipeStepVessel;
};

export type CreateRecipeStepVesselError = APIResponseWithError;

export type ArchiveRecipeStepVesselData = {
  path: {
    recipeID: string;
    recipeStepID: string;
    recipeStepVesselID: string;
  };
};

export type ArchiveRecipeStepVesselResponse = APIResponse & {
  data?: RecipeStepVessel;
};

export type ArchiveRecipeStepVesselError = APIResponseWithError;

export type GetRecipeStepVesselData = {
  path: {
    recipeID: string;
    recipeStepID: string;
    recipeStepVesselID: string;
  };
};

export type GetRecipeStepVesselResponse = APIResponse & {
  data?: RecipeStepVessel;
};

export type GetRecipeStepVesselError = APIResponseWithError;

export type UpdateRecipeStepVesselData = {
  body: RecipeStepVesselUpdateRequestInput;
  path: {
    recipeID: string;
    recipeStepID: string;
    recipeStepVesselID: string;
  };
};

export type UpdateRecipeStepVesselResponse = APIResponse & {
  data?: RecipeStepVessel;
};

export type UpdateRecipeStepVesselError = APIResponseWithError;

export type SearchForRecipesData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * the search query parameter
     */
    q: string;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type SearchForRecipesResponse = APIResponse & {
  data?: Array<Recipe>;
};

export type SearchForRecipesError = APIResponseWithError;

export type GetServiceSettingsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetServiceSettingsResponse = APIResponse & {
  data?: Array<ServiceSetting>;
};

export type GetServiceSettingsError = APIResponseWithError;

export type CreateServiceSettingData = {
  body: ServiceSettingCreationRequestInput;
};

export type CreateServiceSettingResponse = APIResponse & {
  data?: ServiceSetting;
};

export type CreateServiceSettingError = APIResponseWithError;

export type ArchiveServiceSettingData = {
  path: {
    serviceSettingID: string;
  };
};

export type ArchiveServiceSettingResponse = APIResponse & {
  data?: ServiceSetting;
};

export type ArchiveServiceSettingError = APIResponseWithError;

export type GetServiceSettingData = {
  path: {
    serviceSettingID: string;
  };
};

export type GetServiceSettingResponse = APIResponse & {
  data?: ServiceSetting;
};

export type GetServiceSettingError = APIResponseWithError;

export type CreateServiceSettingConfigurationData = {
  body: ServiceSettingConfigurationCreationRequestInput;
};

export type CreateServiceSettingConfigurationResponse = APIResponse & {
  data?: ServiceSettingConfiguration;
};

export type CreateServiceSettingConfigurationError = APIResponseWithError;

export type ArchiveServiceSettingConfigurationData = {
  path: {
    serviceSettingConfigurationID: string;
  };
};

export type ArchiveServiceSettingConfigurationResponse = APIResponse & {
  data?: ServiceSettingConfiguration;
};

export type ArchiveServiceSettingConfigurationError = APIResponseWithError;

export type UpdateServiceSettingConfigurationData = {
  body: ServiceSettingConfigurationUpdateRequestInput;
  path: {
    serviceSettingConfigurationID: string;
  };
};

export type UpdateServiceSettingConfigurationResponse = APIResponse & {
  data?: ServiceSettingConfiguration;
};

export type UpdateServiceSettingConfigurationError = APIResponseWithError;

export type GetServiceSettingConfigurationsForHouseholdData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetServiceSettingConfigurationsForHouseholdResponse = APIResponse & {
  data?: Array<ServiceSettingConfiguration>;
};

export type GetServiceSettingConfigurationsForHouseholdError = APIResponseWithError;

export type GetServiceSettingConfigurationsForUserData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetServiceSettingConfigurationsForUserResponse = APIResponse & {
  data?: Array<ServiceSettingConfiguration>;
};

export type GetServiceSettingConfigurationsForUserError = APIResponseWithError;

export type GetServiceSettingConfigurationByNameData = {
  path: {
    serviceSettingConfigurationName: string;
  };
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetServiceSettingConfigurationByNameResponse = APIResponse & {
  data?: Array<ServiceSettingConfiguration>;
};

export type GetServiceSettingConfigurationByNameError = APIResponseWithError;

export type SearchForServiceSettingsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * the search query parameter
     */
    q: string;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type SearchForServiceSettingsResponse = APIResponse & {
  data?: Array<ServiceSetting>;
};

export type SearchForServiceSettingsError = APIResponseWithError;

export type GetUserIngredientPreferencesData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetUserIngredientPreferencesResponse = APIResponse & {
  data?: Array<UserIngredientPreference>;
};

export type GetUserIngredientPreferencesError = APIResponseWithError;

export type CreateUserIngredientPreferenceData = {
  body: UserIngredientPreferenceCreationRequestInput;
};

export type CreateUserIngredientPreferenceResponse = APIResponse & {
  data?: UserIngredientPreference;
};

export type CreateUserIngredientPreferenceError = APIResponseWithError;

export type ArchiveUserIngredientPreferenceData = {
  path: {
    userIngredientPreferenceID: string;
  };
};

export type ArchiveUserIngredientPreferenceResponse = APIResponse & {
  data?: UserIngredientPreference;
};

export type ArchiveUserIngredientPreferenceError = APIResponseWithError;

export type UpdateUserIngredientPreferenceData = {
  body: UserIngredientPreferenceUpdateRequestInput;
  path: {
    userIngredientPreferenceID: string;
  };
};

export type UpdateUserIngredientPreferenceResponse = APIResponse & {
  data?: UserIngredientPreference;
};

export type UpdateUserIngredientPreferenceError = APIResponseWithError;

export type GetUserNotificationsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetUserNotificationsResponse = APIResponse & {
  data?: Array<UserNotification>;
};

export type GetUserNotificationsError = APIResponseWithError;

export type CreateUserNotificationData = {
  body: UserNotificationCreationRequestInput;
};

export type CreateUserNotificationResponse = APIResponse & {
  data?: UserNotification;
};

export type CreateUserNotificationError = APIResponseWithError;

export type GetUserNotificationData = {
  path: {
    userNotificationID: string;
  };
};

export type GetUserNotificationResponse = APIResponse & {
  data?: UserNotification;
};

export type GetUserNotificationError = APIResponseWithError;

export type UpdateUserNotificationData = {
  body: UserNotificationUpdateRequestInput;
  path: {
    userNotificationID: string;
  };
};

export type UpdateUserNotificationResponse = APIResponse & {
  data?: UserNotification;
};

export type UpdateUserNotificationError = APIResponseWithError;

export type GetUsersData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetUsersResponse = APIResponse & {
  data?: Array<User>;
};

export type GetUsersError = APIResponseWithError;

export type ArchiveUserData = {
  path: {
    userID: string;
  };
};

export type ArchiveUserResponse = APIResponse & {
  data?: User;
};

export type ArchiveUserError = APIResponseWithError;

export type GetUserData = {
  path: {
    userID: string;
  };
};

export type GetUserResponse = APIResponse & {
  data?: User;
};

export type GetUserError = APIResponseWithError;

export type UploadUserAvatarData = {
  body: AvatarUpdateInput;
};

export type UploadUserAvatarResponse = APIResponse & {
  data?: User;
};

export type UploadUserAvatarError = APIResponseWithError;

export type UpdateUserDetailsData = {
  body: UserDetailsUpdateRequestInput;
};

export type UpdateUserDetailsResponse = APIResponse & {
  data?: User;
};

export type UpdateUserDetailsError = APIResponseWithError;

export type UpdateUserEmailAddressData = {
  body: UserEmailAddressUpdateInput;
};

export type UpdateUserEmailAddressResponse = APIResponse & {
  data?: User;
};

export type UpdateUserEmailAddressError = APIResponseWithError;

export type VerifyUserEmailAddressData = {
  body: EmailAddressVerificationRequestInput;
};

export type VerifyUserEmailAddressResponse = APIResponse & {
  data?: User;
};

export type VerifyUserEmailAddressError = APIResponseWithError;

export type UpdatePasswordData = {
  body: PasswordUpdateInput;
};

export type CheckPermissionsData = {
  body: UserPermissionsRequestInput;
};

export type CheckPermissionsResponse = APIResponse & {
  data?: UserPermissionsResponse;
};

export type CheckPermissionsError = APIResponseWithError;

export type SearchForUsersData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * the search query parameter
     */
    q: string;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type SearchForUsersResponse = APIResponse & {
  data?: Array<User>;
};

export type SearchForUsersError = APIResponseWithError;

export type GetSelfResponse = APIResponse & {
  data?: User;
};

export type GetSelfError = APIResponseWithError;

export type RefreshTotpSecretData = {
  body: TOTPSecretRefreshInput;
};

export type RefreshTotpSecretResponse = APIResponse & {
  data?: TOTPSecretRefreshResponse;
};

export type RefreshTotpSecretError = APIResponseWithError;

export type UpdateUserUsernameData = {
  body: UsernameUpdateInput;
};

export type UpdateUserUsernameResponse = APIResponse & {
  data?: User;
};

export type UpdateUserUsernameError = APIResponseWithError;

export type GetValidIngredientGroupsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetValidIngredientGroupsResponse = APIResponse & {
  data?: Array<ValidIngredientGroup>;
};

export type GetValidIngredientGroupsError = APIResponseWithError;

export type CreateValidIngredientGroupData = {
  body: ValidIngredientGroupCreationRequestInput;
};

export type CreateValidIngredientGroupResponse = APIResponse & {
  data?: ValidIngredientGroup;
};

export type CreateValidIngredientGroupError = APIResponseWithError;

export type ArchiveValidIngredientGroupData = {
  path: {
    validIngredientGroupID: string;
  };
};

export type ArchiveValidIngredientGroupResponse = APIResponse & {
  data?: ValidIngredientGroup;
};

export type ArchiveValidIngredientGroupError = APIResponseWithError;

export type GetValidIngredientGroupData = {
  path: {
    validIngredientGroupID: string;
  };
};

export type GetValidIngredientGroupResponse = APIResponse & {
  data?: ValidIngredientGroup;
};

export type GetValidIngredientGroupError = APIResponseWithError;

export type UpdateValidIngredientGroupData = {
  body: ValidIngredientGroupUpdateRequestInput;
  path: {
    validIngredientGroupID: string;
  };
};

export type UpdateValidIngredientGroupResponse = APIResponse & {
  data?: ValidIngredientGroup;
};

export type UpdateValidIngredientGroupError = APIResponseWithError;

export type SearchForValidIngredientGroupsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * the search query parameter
     */
    q: string;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type SearchForValidIngredientGroupsResponse = APIResponse & {
  data?: Array<ValidIngredientGroup>;
};

export type SearchForValidIngredientGroupsError = APIResponseWithError;

export type GetValidIngredientMeasurementUnitsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetValidIngredientMeasurementUnitsResponse = APIResponse & {
  data?: Array<ValidIngredientMeasurementUnit>;
};

export type GetValidIngredientMeasurementUnitsError = APIResponseWithError;

export type CreateValidIngredientMeasurementUnitData = {
  body: ValidIngredientMeasurementUnitCreationRequestInput;
};

export type CreateValidIngredientMeasurementUnitResponse = APIResponse & {
  data?: ValidIngredientMeasurementUnit;
};

export type CreateValidIngredientMeasurementUnitError = APIResponseWithError;

export type ArchiveValidIngredientMeasurementUnitData = {
  path: {
    validIngredientMeasurementUnitID: string;
  };
};

export type ArchiveValidIngredientMeasurementUnitResponse = APIResponse & {
  data?: ValidIngredientMeasurementUnit;
};

export type ArchiveValidIngredientMeasurementUnitError = APIResponseWithError;

export type GetValidIngredientMeasurementUnitData = {
  path: {
    validIngredientMeasurementUnitID: string;
  };
};

export type GetValidIngredientMeasurementUnitResponse = APIResponse & {
  data?: ValidIngredientMeasurementUnit;
};

export type GetValidIngredientMeasurementUnitError = APIResponseWithError;

export type UpdateValidIngredientMeasurementUnitData = {
  body: ValidIngredientMeasurementUnitUpdateRequestInput;
  path: {
    validIngredientMeasurementUnitID: string;
  };
};

export type UpdateValidIngredientMeasurementUnitResponse = APIResponse & {
  data?: ValidIngredientMeasurementUnit;
};

export type UpdateValidIngredientMeasurementUnitError = APIResponseWithError;

export type GetValidIngredientMeasurementUnitsByIngredientData = {
  path: {
    validIngredientID: string;
  };
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetValidIngredientMeasurementUnitsByIngredientResponse = APIResponse & {
  data?: Array<ValidIngredientMeasurementUnit>;
};

export type GetValidIngredientMeasurementUnitsByIngredientError = APIResponseWithError;

export type GetValidIngredientMeasurementUnitsByMeasurementUnitData = {
  path: {
    validMeasurementUnitID: string;
  };
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetValidIngredientMeasurementUnitsByMeasurementUnitResponse = APIResponse & {
  data?: Array<ValidIngredientMeasurementUnit>;
};

export type GetValidIngredientMeasurementUnitsByMeasurementUnitError = APIResponseWithError;

export type GetValidIngredientPreparationsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetValidIngredientPreparationsResponse = APIResponse & {
  data?: Array<ValidIngredientPreparation>;
};

export type GetValidIngredientPreparationsError = APIResponseWithError;

export type CreateValidIngredientPreparationData = {
  body: ValidIngredientPreparationCreationRequestInput;
};

export type CreateValidIngredientPreparationResponse = APIResponse & {
  data?: ValidIngredientPreparation;
};

export type CreateValidIngredientPreparationError = APIResponseWithError;

export type ArchiveValidIngredientPreparationData = {
  path: {
    validIngredientPreparationID: string;
  };
};

export type ArchiveValidIngredientPreparationResponse = APIResponse & {
  data?: ValidIngredientPreparation;
};

export type ArchiveValidIngredientPreparationError = APIResponseWithError;

export type GetValidIngredientPreparationData = {
  path: {
    validIngredientPreparationID: string;
  };
};

export type GetValidIngredientPreparationResponse = APIResponse & {
  data?: ValidIngredientPreparation;
};

export type GetValidIngredientPreparationError = APIResponseWithError;

export type UpdateValidIngredientPreparationData = {
  body: ValidIngredientPreparationUpdateRequestInput;
  path: {
    validIngredientPreparationID: string;
  };
};

export type UpdateValidIngredientPreparationResponse = APIResponse & {
  data?: ValidIngredientPreparation;
};

export type UpdateValidIngredientPreparationError = APIResponseWithError;

export type GetValidIngredientPreparationsByIngredientData = {
  path: {
    validIngredientID: string;
  };
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetValidIngredientPreparationsByIngredientResponse = APIResponse & {
  data?: Array<ValidIngredientPreparation>;
};

export type GetValidIngredientPreparationsByIngredientError = APIResponseWithError;

export type GetValidIngredientPreparationsByPreparationData = {
  path: {
    validPreparationID: string;
  };
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetValidIngredientPreparationsByPreparationResponse = APIResponse & {
  data?: Array<ValidIngredientPreparation>;
};

export type GetValidIngredientPreparationsByPreparationError = APIResponseWithError;

export type GetValidIngredientStateIngredientsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetValidIngredientStateIngredientsResponse = APIResponse & {
  data?: Array<ValidIngredientStateIngredient>;
};

export type GetValidIngredientStateIngredientsError = APIResponseWithError;

export type CreateValidIngredientStateIngredientData = {
  body: ValidIngredientStateIngredientCreationRequestInput;
};

export type CreateValidIngredientStateIngredientResponse = APIResponse & {
  data?: ValidIngredientStateIngredient;
};

export type CreateValidIngredientStateIngredientError = APIResponseWithError;

export type ArchiveValidIngredientStateIngredientData = {
  path: {
    validIngredientStateIngredientID: string;
  };
};

export type ArchiveValidIngredientStateIngredientResponse = APIResponse & {
  data?: ValidIngredientStateIngredient;
};

export type ArchiveValidIngredientStateIngredientError = APIResponseWithError;

export type GetValidIngredientStateIngredientData = {
  path: {
    validIngredientStateIngredientID: string;
  };
};

export type GetValidIngredientStateIngredientResponse = APIResponse & {
  data?: ValidIngredientStateIngredient;
};

export type GetValidIngredientStateIngredientError = APIResponseWithError;

export type UpdateValidIngredientStateIngredientData = {
  body: ValidIngredientStateIngredientUpdateRequestInput;
  path: {
    validIngredientStateIngredientID: string;
  };
};

export type UpdateValidIngredientStateIngredientResponse = APIResponse & {
  data?: ValidIngredientStateIngredient;
};

export type UpdateValidIngredientStateIngredientError = APIResponseWithError;

export type GetValidIngredientStateIngredientsByIngredientData = {
  path: {
    validIngredientID: string;
  };
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetValidIngredientStateIngredientsByIngredientResponse = APIResponse & {
  data?: Array<ValidIngredientStateIngredient>;
};

export type GetValidIngredientStateIngredientsByIngredientError = APIResponseWithError;

export type GetValidIngredientStateIngredientsByIngredientStateData = {
  path: {
    validIngredientStateID: string;
  };
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetValidIngredientStateIngredientsByIngredientStateResponse = APIResponse & {
  data?: Array<ValidIngredientStateIngredient>;
};

export type GetValidIngredientStateIngredientsByIngredientStateError = APIResponseWithError;

export type GetValidIngredientStatesData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetValidIngredientStatesResponse = APIResponse & {
  data?: Array<ValidIngredientState>;
};

export type GetValidIngredientStatesError = APIResponseWithError;

export type CreateValidIngredientStateData = {
  body: ValidIngredientStateCreationRequestInput;
};

export type CreateValidIngredientStateResponse = APIResponse & {
  data?: ValidIngredientState;
};

export type CreateValidIngredientStateError = APIResponseWithError;

export type ArchiveValidIngredientStateData = {
  path: {
    validIngredientStateID: string;
  };
};

export type ArchiveValidIngredientStateResponse = APIResponse & {
  data?: ValidIngredientState;
};

export type ArchiveValidIngredientStateError = APIResponseWithError;

export type GetValidIngredientStateData = {
  path: {
    validIngredientStateID: string;
  };
};

export type GetValidIngredientStateResponse = APIResponse & {
  data?: ValidIngredientState;
};

export type GetValidIngredientStateError = APIResponseWithError;

export type UpdateValidIngredientStateData = {
  body: ValidIngredientStateUpdateRequestInput;
  path: {
    validIngredientStateID: string;
  };
};

export type UpdateValidIngredientStateResponse = APIResponse & {
  data?: ValidIngredientState;
};

export type UpdateValidIngredientStateError = APIResponseWithError;

export type SearchForValidIngredientStatesData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * the search query parameter
     */
    q: string;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type SearchForValidIngredientStatesResponse = APIResponse & {
  data?: Array<ValidIngredientState>;
};

export type SearchForValidIngredientStatesError = APIResponseWithError;

export type GetValidIngredientsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetValidIngredientsResponse = APIResponse & {
  data?: Array<ValidIngredient>;
};

export type GetValidIngredientsError = APIResponseWithError;

export type CreateValidIngredientData = {
  body: ValidIngredientCreationRequestInput;
};

export type CreateValidIngredientResponse = APIResponse & {
  data?: ValidIngredient;
};

export type CreateValidIngredientError = APIResponseWithError;

export type ArchiveValidIngredientData = {
  path: {
    validIngredientID: string;
  };
};

export type ArchiveValidIngredientResponse = APIResponse & {
  data?: ValidIngredient;
};

export type ArchiveValidIngredientError = APIResponseWithError;

export type GetValidIngredientData = {
  path: {
    validIngredientID: string;
  };
};

export type GetValidIngredientResponse = APIResponse & {
  data?: ValidIngredient;
};

export type GetValidIngredientError = APIResponseWithError;

export type UpdateValidIngredientData = {
  body: ValidIngredientUpdateRequestInput;
  path: {
    validIngredientID: string;
  };
};

export type UpdateValidIngredientResponse = APIResponse & {
  data?: ValidIngredient;
};

export type UpdateValidIngredientError = APIResponseWithError;

export type GetValidIngredientsByPreparationData = {
  path: {
    validPreparationID: string;
  };
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * the search query parameter
     */
    q: string;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetValidIngredientsByPreparationResponse = APIResponse & {
  data?: Array<ValidIngredient>;
};

export type GetValidIngredientsByPreparationError = APIResponseWithError;

export type GetRandomValidIngredientResponse = APIResponse & {
  data?: ValidIngredient;
};

export type GetRandomValidIngredientError = APIResponseWithError;

export type SearchForValidIngredientsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * the search query parameter
     */
    q: string;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type SearchForValidIngredientsResponse = APIResponse & {
  data?: Array<ValidIngredient>;
};

export type SearchForValidIngredientsError = APIResponseWithError;

export type GetValidInstrumentsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetValidInstrumentsResponse = APIResponse & {
  data?: Array<ValidInstrument>;
};

export type GetValidInstrumentsError = APIResponseWithError;

export type CreateValidInstrumentData = {
  body: ValidInstrumentCreationRequestInput;
};

export type CreateValidInstrumentResponse = APIResponse & {
  data?: ValidInstrument;
};

export type CreateValidInstrumentError = APIResponseWithError;

export type ArchiveValidInstrumentData = {
  path: {
    validInstrumentID: string;
  };
};

export type ArchiveValidInstrumentResponse = APIResponse & {
  data?: ValidInstrument;
};

export type ArchiveValidInstrumentError = APIResponseWithError;

export type GetValidInstrumentData = {
  path: {
    validInstrumentID: string;
  };
};

export type GetValidInstrumentResponse = APIResponse & {
  data?: ValidInstrument;
};

export type GetValidInstrumentError = APIResponseWithError;

export type UpdateValidInstrumentData = {
  body: ValidInstrumentUpdateRequestInput;
  path: {
    validInstrumentID: string;
  };
};

export type UpdateValidInstrumentResponse = APIResponse & {
  data?: ValidInstrument;
};

export type UpdateValidInstrumentError = APIResponseWithError;

export type GetRandomValidInstrumentResponse = APIResponse & {
  data?: ValidInstrument;
};

export type GetRandomValidInstrumentError = APIResponseWithError;

export type SearchForValidInstrumentsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * the search query parameter
     */
    q: string;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type SearchForValidInstrumentsResponse = APIResponse & {
  data?: Array<ValidInstrument>;
};

export type SearchForValidInstrumentsError = APIResponseWithError;

export type CreateValidMeasurementUnitConversionData = {
  body: ValidMeasurementUnitConversionCreationRequestInput;
};

export type CreateValidMeasurementUnitConversionResponse = APIResponse & {
  data?: ValidMeasurementUnitConversion;
};

export type CreateValidMeasurementUnitConversionError = APIResponseWithError;

export type ArchiveValidMeasurementUnitConversionData = {
  path: {
    validMeasurementUnitConversionID: string;
  };
};

export type ArchiveValidMeasurementUnitConversionResponse = APIResponse & {
  data?: ValidMeasurementUnitConversion;
};

export type ArchiveValidMeasurementUnitConversionError = APIResponseWithError;

export type GetValidMeasurementUnitConversionData = {
  path: {
    validMeasurementUnitConversionID: string;
  };
};

export type GetValidMeasurementUnitConversionResponse = APIResponse & {
  data?: ValidMeasurementUnitConversion;
};

export type GetValidMeasurementUnitConversionError = APIResponseWithError;

export type UpdateValidMeasurementUnitConversionData = {
  body: ValidMeasurementUnitConversionUpdateRequestInput;
  path: {
    validMeasurementUnitConversionID: string;
  };
};

export type UpdateValidMeasurementUnitConversionResponse = APIResponse & {
  data?: ValidMeasurementUnitConversion;
};

export type UpdateValidMeasurementUnitConversionError = APIResponseWithError;

export type GetValidMeasurementUnitConversionsFromUnitData = {
  path: {
    validMeasurementUnitID: string;
  };
};

export type GetValidMeasurementUnitConversionsFromUnitResponse = APIResponse & {
  data?: ValidMeasurementUnitConversion;
};

export type GetValidMeasurementUnitConversionsFromUnitError = APIResponseWithError;

export type ValidMeasurementUnitConversionsToUnitData = {
  path: {
    validMeasurementUnitID: string;
  };
};

export type ValidMeasurementUnitConversionsToUnitResponse = APIResponse & {
  data?: ValidMeasurementUnitConversion;
};

export type ValidMeasurementUnitConversionsToUnitError = APIResponseWithError;

export type GetValidMeasurementUnitsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetValidMeasurementUnitsResponse = APIResponse & {
  data?: Array<ValidMeasurementUnit>;
};

export type GetValidMeasurementUnitsError = APIResponseWithError;

export type CreateValidMeasurementUnitData = {
  body: ValidMeasurementUnitCreationRequestInput;
};

export type CreateValidMeasurementUnitResponse = APIResponse & {
  data?: ValidMeasurementUnit;
};

export type CreateValidMeasurementUnitError = APIResponseWithError;

export type ArchiveValidMeasurementUnitData = {
  path: {
    validMeasurementUnitID: string;
  };
};

export type ArchiveValidMeasurementUnitResponse = APIResponse & {
  data?: ValidMeasurementUnit;
};

export type ArchiveValidMeasurementUnitError = APIResponseWithError;

export type GetValidMeasurementUnitData = {
  path: {
    validMeasurementUnitID: string;
  };
};

export type GetValidMeasurementUnitResponse = APIResponse & {
  data?: ValidMeasurementUnit;
};

export type GetValidMeasurementUnitError = APIResponseWithError;

export type UpdateValidMeasurementUnitData = {
  body: ValidMeasurementUnitUpdateRequestInput;
  path: {
    validMeasurementUnitID: string;
  };
};

export type UpdateValidMeasurementUnitResponse = APIResponse & {
  data?: ValidMeasurementUnit;
};

export type UpdateValidMeasurementUnitError = APIResponseWithError;

export type SearchValidMeasurementUnitsByIngredientData = {
  path: {
    validIngredientID: string;
  };
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * the search query parameter
     */
    q: string;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type SearchValidMeasurementUnitsByIngredientResponse = APIResponse & {
  data?: Array<ValidMeasurementUnit>;
};

export type SearchValidMeasurementUnitsByIngredientError = APIResponseWithError;

export type SearchForValidMeasurementUnitsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * the search query parameter
     */
    q: string;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type SearchForValidMeasurementUnitsResponse = APIResponse & {
  data?: Array<ValidMeasurementUnit>;
};

export type SearchForValidMeasurementUnitsError = APIResponseWithError;

export type GetValidPreparationInstrumentsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetValidPreparationInstrumentsResponse = APIResponse & {
  data?: Array<ValidPreparationInstrument>;
};

export type GetValidPreparationInstrumentsError = APIResponseWithError;

export type CreateValidPreparationInstrumentData = {
  body: ValidPreparationInstrumentCreationRequestInput;
};

export type CreateValidPreparationInstrumentResponse = APIResponse & {
  data?: ValidPreparationInstrument;
};

export type CreateValidPreparationInstrumentError = APIResponseWithError;

export type ArchiveValidPreparationInstrumentData = {
  path: {
    validPreparationVesselID: string;
  };
};

export type ArchiveValidPreparationInstrumentResponse = APIResponse & {
  data?: ValidPreparationInstrument;
};

export type ArchiveValidPreparationInstrumentError = APIResponseWithError;

export type GetValidPreparationInstrumentData = {
  path: {
    validPreparationVesselID: string;
  };
};

export type GetValidPreparationInstrumentResponse = APIResponse & {
  data?: ValidPreparationInstrument;
};

export type GetValidPreparationInstrumentError = APIResponseWithError;

export type UpdateValidPreparationInstrumentData = {
  body: ValidPreparationInstrumentUpdateRequestInput;
  path: {
    validPreparationVesselID: string;
  };
};

export type UpdateValidPreparationInstrumentResponse = APIResponse & {
  data?: ValidPreparationInstrument;
};

export type UpdateValidPreparationInstrumentError = APIResponseWithError;

export type GetValidPreparationInstrumentsByInstrumentData = {
  path: {
    validInstrumentID: string;
  };
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetValidPreparationInstrumentsByInstrumentResponse = APIResponse & {
  data?: Array<ValidPreparationInstrument>;
};

export type GetValidPreparationInstrumentsByInstrumentError = APIResponseWithError;

export type GetValidPreparationInstrumentsByPreparationData = {
  path: {
    validPreparationID: string;
  };
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetValidPreparationInstrumentsByPreparationResponse = APIResponse & {
  data?: Array<ValidPreparationInstrument>;
};

export type GetValidPreparationInstrumentsByPreparationError = APIResponseWithError;

export type GetValidPreparationVesselsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetValidPreparationVesselsResponse = APIResponse & {
  data?: Array<ValidPreparationVessel>;
};

export type GetValidPreparationVesselsError = APIResponseWithError;

export type CreateValidPreparationVesselData = {
  body: ValidPreparationVesselCreationRequestInput;
};

export type CreateValidPreparationVesselResponse = APIResponse & {
  data?: ValidPreparationVessel;
};

export type CreateValidPreparationVesselError = APIResponseWithError;

export type ArchiveValidPreparationVesselData = {
  path: {
    validPreparationVesselID: string;
  };
};

export type ArchiveValidPreparationVesselResponse = APIResponse & {
  data?: ValidPreparationVessel;
};

export type ArchiveValidPreparationVesselError = APIResponseWithError;

export type GetValidPreparationVesselData = {
  path: {
    validPreparationVesselID: string;
  };
};

export type GetValidPreparationVesselResponse = APIResponse & {
  data?: ValidPreparationVessel;
};

export type GetValidPreparationVesselError = APIResponseWithError;

export type UpdateValidPreparationVesselData = {
  body: ValidPreparationVesselUpdateRequestInput;
  path: {
    validPreparationVesselID: string;
  };
};

export type UpdateValidPreparationVesselResponse = APIResponse & {
  data?: ValidPreparationVessel;
};

export type UpdateValidPreparationVesselError = APIResponseWithError;

export type GetValidPreparationVesselsByPreparationData = {
  path: {
    validPreparationID: string;
  };
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetValidPreparationVesselsByPreparationResponse = APIResponse & {
  data?: Array<ValidPreparationVessel>;
};

export type GetValidPreparationVesselsByPreparationError = APIResponseWithError;

export type GetValidPreparationVesselsByVesselData = {
  path: {
    ValidVesselID: string;
  };
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetValidPreparationVesselsByVesselResponse = APIResponse & {
  data?: Array<ValidPreparationVessel>;
};

export type GetValidPreparationVesselsByVesselError = APIResponseWithError;

export type GetValidPreparationsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetValidPreparationsResponse = APIResponse & {
  data?: Array<ValidPreparation>;
};

export type GetValidPreparationsError = APIResponseWithError;

export type CreateValidPreparationData = {
  body: ValidPreparationCreationRequestInput;
};

export type CreateValidPreparationResponse = APIResponse & {
  data?: ValidPreparation;
};

export type CreateValidPreparationError = APIResponseWithError;

export type ArchiveValidPreparationData = {
  path: {
    validPreparationID: string;
  };
};

export type ArchiveValidPreparationResponse = APIResponse & {
  data?: ValidPreparation;
};

export type ArchiveValidPreparationError = APIResponseWithError;

export type GetValidPreparationData = {
  path: {
    validPreparationID: string;
  };
};

export type GetValidPreparationResponse = APIResponse & {
  data?: ValidPreparation;
};

export type GetValidPreparationError = APIResponseWithError;

export type UpdateValidPreparationData = {
  body: ValidPreparationUpdateRequestInput;
  path: {
    validPreparationID: string;
  };
};

export type UpdateValidPreparationResponse = APIResponse & {
  data?: ValidPreparation;
};

export type UpdateValidPreparationError = APIResponseWithError;

export type GetRandomValidPreparationResponse = APIResponse & {
  data?: ValidPreparation;
};

export type GetRandomValidPreparationError = APIResponseWithError;

export type SearchForValidPreparationsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * the search query parameter
     */
    q: string;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type SearchForValidPreparationsResponse = APIResponse & {
  data?: Array<ValidPreparation>;
};

export type SearchForValidPreparationsError = APIResponseWithError;

export type GetValidVesselsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetValidVesselsResponse = APIResponse & {
  data?: Array<ValidVessel>;
};

export type GetValidVesselsError = APIResponseWithError;

export type CreateValidVesselData = {
  body: ValidVesselCreationRequestInput;
};

export type CreateValidVesselResponse = APIResponse & {
  data?: ValidVessel;
};

export type CreateValidVesselError = APIResponseWithError;

export type ArchiveValidVesselData = {
  path: {
    validVesselID: string;
  };
};

export type ArchiveValidVesselResponse = APIResponse & {
  data?: ValidVessel;
};

export type ArchiveValidVesselError = APIResponseWithError;

export type GetValidVesselData = {
  path: {
    validVesselID: string;
  };
};

export type GetValidVesselResponse = APIResponse & {
  data?: ValidVessel;
};

export type GetValidVesselError = APIResponseWithError;

export type UpdateValidVesselData = {
  body: ValidVesselUpdateRequestInput;
  path: {
    validVesselID: string;
  };
};

export type UpdateValidVesselResponse = APIResponse & {
  data?: ValidVessel;
};

export type UpdateValidVesselError = APIResponseWithError;

export type GetRandomValidVesselResponse = APIResponse & {
  data?: ValidVessel;
};

export type GetRandomValidVesselError = APIResponseWithError;

export type SearchForValidVesselsData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * the search query parameter
     */
    q: string;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type SearchForValidVesselsResponse = APIResponse & {
  data?: Array<ValidVessel>;
};

export type SearchForValidVesselsError = APIResponseWithError;

export type GetWebhooksData = {
  query: {
    /**
     * The earliest CreatedAt date that should appear in output.
     */
    createdAfter: string;
    /**
     * The latest CreatedAt date that should appear in output.
     */
    createdBefore: string;
    /**
     * Whether or not to include archived results in output, limited to service admins.
     */
    includeArchived: 'true' | 'false';
    /**
     * How many results should appear in output, max is 250.
     */
    limit: number;
    /**
     * What page of results should appear in output.
     */
    page: number;
    /**
     * The direction in which results should be sorted.
     */
    sortBy: 'asc' | 'desc';
    /**
     * The earliest UpdatedAt date that should appear in output.
     */
    updatedAfter: string;
    /**
     * The latest UpdatedAt date that should appear in output.
     */
    updatedBefore: string;
  };
};

export type GetWebhooksResponse = APIResponse & {
  data?: Array<Webhook>;
};

export type GetWebhooksError = APIResponseWithError;

export type CreateWebhookData = {
  body: WebhookCreationRequestInput;
};

export type CreateWebhookResponse = APIResponse & {
  data?: Webhook;
};

export type CreateWebhookError = APIResponseWithError;

export type ArchiveWebhookData = {
  path: {
    webhookID: string;
  };
};

export type ArchiveWebhookResponse = APIResponse & {
  data?: Webhook;
};

export type ArchiveWebhookError = APIResponseWithError;

export type GetWebhookData = {
  path: {
    webhookID: string;
  };
};

export type GetWebhookResponse = APIResponse & {
  data?: Webhook;
};

export type GetWebhookError = APIResponseWithError;

export type CreateWebhookTriggerEventData = {
  body: WebhookTriggerEventCreationRequestInput;
  path: {
    webhookID: string;
  };
};

export type CreateWebhookTriggerEventResponse = APIResponse & {
  data?: WebhookTriggerEvent;
};

export type CreateWebhookTriggerEventError = APIResponseWithError;

export type ArchiveWebhookTriggerEventData = {
  path: {
    webhookID: string;
    webhookTriggerEventID: string;
  };
};

export type ArchiveWebhookTriggerEventResponse = APIResponse & {
  data?: WebhookTriggerEvent;
};

export type ArchiveWebhookTriggerEventError = APIResponseWithError;

export type RunFinalizeMealPlanWorkerData = {
  body: FinalizeMealPlansRequest;
};

export type RunFinalizeMealPlanWorkerResponse = APIResponse & {
  data?: FinalizeMealPlansRequest;
};

export type RunFinalizeMealPlanWorkerError = APIResponseWithError;

export type GetAuthStatusResponse = APIResponse & {
  data?: UserStatusResponse;
};

export type GetAuthStatusError = APIResponseWithError;

export type CreateUserData = {
  body: UserRegistrationInput;
};

export type CreateUserResponse = APIResponse & {
  data?: UserCreationResponse;
};

export type CreateUserError = APIResponseWithError;

export type VerifyEmailAddressData = {
  body: EmailAddressVerificationRequestInput;
};

export type VerifyEmailAddressResponse = APIResponse & {
  data?: User;
};

export type VerifyEmailAddressError = APIResponseWithError;

export type LoginForJwtData = {
  body: UserLoginInput;
};

export type LoginForJwtResponse = APIResponse & {
  data?: JWTResponse;
};

export type LoginForJwtError = APIResponseWithError;

export type AdminLoginForJwtData = {
  body: UserLoginInput;
};

export type AdminLoginForJwtResponse = APIResponse & {
  data?: JWTResponse;
};

export type AdminLoginForJwtError = APIResponseWithError;

export type RequestPasswordResetTokenData = {
  body: PasswordResetTokenCreationRequestInput;
};

export type RequestPasswordResetTokenResponse = APIResponse & {
  data?: PasswordResetToken;
};

export type RequestPasswordResetTokenError = APIResponseWithError;

export type RedeemPasswordResetTokenData = {
  body: PasswordResetTokenRedemptionRequestInput;
};

export type RedeemPasswordResetTokenResponse = APIResponse & {
  data?: User;
};

export type RedeemPasswordResetTokenError = APIResponseWithError;

export type VerifyTotpSecretData = {
  body: TOTPSecretVerificationInput;
};

export type VerifyTotpSecretResponse = APIResponse & {
  data?: User;
};

export type VerifyTotpSecretError = APIResponseWithError;

export type RequestUsernameReminderData = {
  body: UsernameReminderRequestInput;
};

export type RequestUsernameReminderResponse = APIResponse & {
  data?: User;
};

export type RequestUsernameReminderError = APIResponseWithError;
