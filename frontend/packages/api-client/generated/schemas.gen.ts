// This file is auto-generated by @hey-api/openapi-ts

export const APIErrorSchema = {
  properties: {
    code: {
      type: 'string',
    },
    message: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const APIResponseSchema = {
  properties: {
    details: {
      $ref: '#/components/schemas/ResponseDetails',
    },
    error: {
      $ref: '#/components/schemas/APIError',
    },
    pagination: {
      $ref: '#/components/schemas/Pagination',
    },
  },
  type: 'object',
} as const;

export const APIResponseWithErrorSchema = {
  properties: {
    details: {
      $ref: '#/components/schemas/ResponseDetails',
    },
    error: {
      $ref: '#/components/schemas/APIError',
    },
  },
  type: 'object',
} as const;

export const AuditLogEntrySchema = {
  properties: {
    belongsToHousehold: {
      type: 'string',
    },
    belongsToUser: {
      type: 'string',
    },
    changes: {
      $ref: '#/components/schemas/ChangeLog',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    eventType: {
      type: 'string',
    },
    id: {
      type: 'string',
    },
    relevantID: {
      type: 'string',
    },
    resourceType: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const AvatarUpdateInputSchema = {
  properties: {
    base64EncodedData: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ChangeActiveHouseholdInputSchema = {
  properties: {
    householdID: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ChangeLogSchema = {
  properties: {
    newValue: {
      type: 'string',
    },
    oldValue: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const EmailAddressVerificationRequestInputSchema = {
  properties: {
    emailVerificationToken: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const FinalizeMealPlansRequestSchema = {
  properties: {
    returnCount: {
      type: 'boolean',
    },
  },
  type: 'object',
} as const;

export const FinalizeMealPlansResponseSchema = {
  properties: {
    count: {
      format: 'int32',
      type: 'integer',
    },
  },
  type: 'object',
} as const;

export const HouseholdSchema = {
  properties: {
    addressLine1: {
      type: 'string',
    },
    addressLine2: {
      type: 'string',
    },
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    belongsToUser: {
      type: 'string',
    },
    billingStatus: {
      type: 'string',
    },
    city: {
      type: 'string',
    },
    contactPhone: {
      type: 'string',
    },
    country: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    id: {
      type: 'string',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    latitude: {
      format: 'double',
      type: 'number',
    },
    longitude: {
      format: 'double',
      type: 'number',
    },
    members: {
      items: {
        $ref: '#/components/schemas/HouseholdUserMembershipWithUser',
      },
      type: 'array',
    },
    name: {
      type: 'string',
    },
    paymentProcessorCustomer: {
      type: 'string',
    },
    state: {
      type: 'string',
    },
    subscriptionPlanID: {
      type: 'string',
    },
    zipCode: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const HouseholdCreationRequestInputSchema = {
  properties: {
    addressLine1: {
      type: 'string',
    },
    addressLine2: {
      type: 'string',
    },
    city: {
      type: 'string',
    },
    contactPhone: {
      type: 'string',
    },
    country: {
      type: 'string',
    },
    latitude: {
      format: 'double',
      type: 'number',
    },
    longitude: {
      format: 'double',
      type: 'number',
    },
    name: {
      type: 'string',
    },
    state: {
      type: 'string',
    },
    zipCode: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const HouseholdInstrumentOwnershipSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    belongsToHousehold: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    id: {
      type: 'string',
    },
    instrument: {
      $ref: '#/components/schemas/ValidInstrument',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    quantity: {
      format: 'int64',
      type: 'integer',
    },
  },
  type: 'object',
} as const;

export const HouseholdInstrumentOwnershipCreationRequestInputSchema = {
  properties: {
    belongsToHousehold: {
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    quantity: {
      format: 'int64',
      type: 'integer',
    },
    validInstrumentID: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const HouseholdInstrumentOwnershipUpdateRequestInputSchema = {
  properties: {
    notes: {
      type: 'string',
    },
    quantity: {
      format: 'int64',
      type: 'integer',
    },
    validInstrumentID: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const HouseholdInvitationSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    destinationHousehold: {
      $ref: '#/components/schemas/Household',
    },
    expiresAt: {
      format: 'date-time',
      type: 'string',
    },
    fromUser: {
      $ref: '#/components/schemas/User',
    },
    id: {
      type: 'string',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    note: {
      type: 'string',
    },
    status: {
      type: 'string',
    },
    statusNote: {
      type: 'string',
    },
    toEmail: {
      type: 'string',
    },
    toName: {
      type: 'string',
    },
    toUser: {
      type: 'string',
    },
    token: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const HouseholdInvitationCreationRequestInputSchema = {
  properties: {
    expiresAt: {
      format: 'date-time',
      type: 'string',
    },
    note: {
      type: 'string',
    },
    toEmail: {
      type: 'string',
    },
    toName: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const HouseholdInvitationUpdateRequestInputSchema = {
  properties: {
    note: {
      type: 'string',
    },
    token: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const HouseholdOwnershipTransferInputSchema = {
  properties: {
    currentOwner: {
      type: 'string',
    },
    newOwner: {
      type: 'string',
    },
    reason: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const HouseholdUpdateRequestInputSchema = {
  properties: {
    addressLine1: {
      type: 'string',
    },
    addressLine2: {
      type: 'string',
    },
    city: {
      type: 'string',
    },
    contactPhone: {
      type: 'string',
    },
    country: {
      type: 'string',
    },
    latitude: {
      format: 'double',
      type: 'number',
    },
    longitude: {
      format: 'double',
      type: 'number',
    },
    name: {
      type: 'string',
    },
    state: {
      type: 'string',
    },
    zipCode: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const HouseholdUserMembershipSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    belongsToHousehold: {
      type: 'string',
    },
    belongsToUser: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    defaultHousehold: {
      type: 'boolean',
    },
    householdRole: {
      type: 'string',
    },
    id: {
      type: 'string',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const HouseholdUserMembershipWithUserSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    belongsToHousehold: {
      type: 'string',
    },
    belongsToUser: {
      $ref: '#/components/schemas/User',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    defaultHousehold: {
      type: 'boolean',
    },
    householdRole: {
      type: 'string',
    },
    id: {
      type: 'string',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const JWTResponseSchema = {
  properties: {
    householdID: {
      type: 'string',
    },
    token: {
      type: 'string',
    },
    userID: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const MealSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    components: {
      items: {
        $ref: '#/components/schemas/MealComponent',
      },
      type: 'array',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    createdByUser: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    eligibleForMealPlans: {
      type: 'boolean',
    },
    id: {
      type: 'string',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    maximumEstimatedPortions: {
      format: 'double',
      type: 'number',
    },
    minimumEstimatedPortions: {
      format: 'double',
      type: 'number',
    },
    name: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const MealComponentSchema = {
  properties: {
    componentType: {
      type: 'string',
    },
    recipe: {
      $ref: '#/components/schemas/Recipe',
    },
    recipeScale: {
      format: 'double',
      type: 'number',
    },
  },
  type: 'object',
} as const;

export const MealComponentCreationRequestInputSchema = {
  properties: {
    componentType: {
      type: 'string',
    },
    recipeID: {
      type: 'string',
    },
    recipeScale: {
      format: 'double',
      type: 'number',
    },
  },
  type: 'object',
} as const;

export const MealCreationRequestInputSchema = {
  properties: {
    components: {
      items: {
        $ref: '#/components/schemas/MealComponentCreationRequestInput',
      },
      type: 'array',
    },
    description: {
      type: 'string',
    },
    eligibleForMealPlans: {
      type: 'boolean',
    },
    maximumEstimatedPortions: {
      format: 'double',
      type: 'number',
    },
    minimumEstimatedPortions: {
      format: 'double',
      type: 'number',
    },
    name: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const MealPlanSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    belongsToHousehold: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    createdBy: {
      type: 'string',
    },
    electionMethod: {
      type: 'string',
    },
    events: {
      items: {
        $ref: '#/components/schemas/MealPlanEvent',
      },
      type: 'array',
    },
    groceryListInitialized: {
      type: 'boolean',
    },
    id: {
      type: 'string',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    status: {
      type: 'string',
    },
    tasksCreated: {
      type: 'boolean',
    },
    votingDeadline: {
      format: 'date-time',
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const MealPlanCreationRequestInputSchema = {
  properties: {
    electionMethod: {
      type: 'string',
    },
    events: {
      items: {
        $ref: '#/components/schemas/MealPlanEventCreationRequestInput',
      },
      type: 'array',
    },
    notes: {
      type: 'string',
    },
    votingDeadline: {
      format: 'date-time',
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const MealPlanEventSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    belongsToMealPlan: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    endsAt: {
      format: 'date-time',
      type: 'string',
    },
    id: {
      type: 'string',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    mealName: {
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    options: {
      items: {
        $ref: '#/components/schemas/MealPlanOption',
      },
      type: 'array',
    },
    startsAt: {
      format: 'date-time',
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const MealPlanEventCreationRequestInputSchema = {
  properties: {
    endsAt: {
      format: 'date-time',
      type: 'string',
    },
    mealName: {
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    options: {
      items: {
        $ref: '#/components/schemas/MealPlanOptionCreationRequestInput',
      },
      type: 'array',
    },
    startsAt: {
      format: 'date-time',
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const MealPlanEventUpdateRequestInputSchema = {
  properties: {
    endsAt: {
      format: 'date-time',
      type: 'string',
    },
    mealName: {
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    startsAt: {
      format: 'date-time',
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const MealPlanGroceryListItemSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    belongsToMealPlan: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    id: {
      type: 'string',
    },
    ingredient: {
      $ref: '#/components/schemas/ValidIngredient',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    maximumQuantityNeeded: {
      format: 'double',
      type: 'number',
    },
    measurementUnit: {
      $ref: '#/components/schemas/ValidMeasurementUnit',
    },
    minimumQuantityNeeded: {
      format: 'double',
      type: 'number',
    },
    purchasePrice: {
      format: 'double',
      type: 'number',
    },
    purchasedMeasurementUnit: {
      $ref: '#/components/schemas/ValidMeasurementUnit',
    },
    purchasedUPC: {
      type: 'string',
    },
    quantityPurchased: {
      format: 'double',
      type: 'number',
    },
    status: {
      type: 'string',
    },
    statusExplanation: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const MealPlanGroceryListItemCreationRequestInputSchema = {
  properties: {
    belongsToMealPlan: {
      type: 'string',
    },
    maximumQuantityNeeded: {
      format: 'double',
      type: 'number',
    },
    minimumQuantityNeeded: {
      format: 'double',
      type: 'number',
    },
    purchasePrice: {
      format: 'double',
      type: 'number',
    },
    purchasedMeasurementUnitID: {
      type: 'string',
    },
    purchasedUPC: {
      type: 'string',
    },
    quantityPurchased: {
      format: 'double',
      type: 'number',
    },
    status: {
      type: 'string',
    },
    statusExplanation: {
      type: 'string',
    },
    validIngredientID: {
      type: 'string',
    },
    validMeasurementUnitID: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const MealPlanGroceryListItemUpdateRequestInputSchema = {
  properties: {
    belongsToMealPlan: {
      type: 'string',
    },
    maximumQuantityNeeded: {
      format: 'double',
      type: 'number',
    },
    minimumQuantityNeeded: {
      format: 'double',
      type: 'number',
    },
    purchasePrice: {
      format: 'double',
      type: 'number',
    },
    purchasedMeasurementUnitID: {
      type: 'string',
    },
    purchasedUPC: {
      type: 'string',
    },
    quantityPurchased: {
      format: 'double',
      type: 'number',
    },
    status: {
      type: 'string',
    },
    statusExplanation: {
      type: 'string',
    },
    validIngredientID: {
      type: 'string',
    },
    validMeasurementUnitID: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const MealPlanOptionSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    assignedCook: {
      type: 'string',
    },
    assignedDishwasher: {
      type: 'string',
    },
    belongsToMealPlanEvent: {
      type: 'string',
    },
    chosen: {
      type: 'boolean',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    id: {
      type: 'string',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    meal: {
      $ref: '#/components/schemas/Meal',
    },
    mealScale: {
      format: 'double',
      type: 'number',
    },
    notes: {
      type: 'string',
    },
    tieBroken: {
      type: 'boolean',
    },
    votes: {
      items: {
        $ref: '#/components/schemas/MealPlanOptionVote',
      },
      type: 'array',
    },
  },
  type: 'object',
} as const;

export const MealPlanOptionCreationRequestInputSchema = {
  properties: {
    assignedCook: {
      type: 'string',
    },
    assignedDishwasher: {
      type: 'string',
    },
    mealID: {
      type: 'string',
    },
    mealScale: {
      format: 'double',
      type: 'number',
    },
    notes: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const MealPlanOptionUpdateRequestInputSchema = {
  properties: {
    assignedCook: {
      type: 'string',
    },
    assignedDishwasher: {
      type: 'string',
    },
    mealID: {
      type: 'string',
    },
    mealScale: {
      format: 'double',
      type: 'number',
    },
    notes: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const MealPlanOptionVoteSchema = {
  properties: {
    abstain: {
      type: 'boolean',
    },
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    belongsToMealPlanOption: {
      type: 'string',
    },
    byUser: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    id: {
      type: 'string',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    rank: {
      format: 'int32',
      type: 'integer',
    },
  },
  type: 'object',
} as const;

export const MealPlanOptionVoteCreationInputSchema = {
  properties: {
    abstain: {
      type: 'boolean',
    },
    belongsToMealPlanOption: {
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    rank: {
      format: 'int32',
      type: 'integer',
    },
  },
  type: 'object',
} as const;

export const MealPlanOptionVoteCreationRequestInputSchema = {
  properties: {
    votes: {
      items: {
        $ref: '#/components/schemas/MealPlanOptionVoteCreationInput',
      },
      type: 'array',
    },
  },
  type: 'object',
} as const;

export const MealPlanOptionVoteUpdateRequestInputSchema = {
  properties: {
    abstain: {
      type: 'boolean',
    },
    belongsToMealPlanOption: {
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    rank: {
      format: 'int32',
      type: 'integer',
    },
  },
  type: 'object',
} as const;

export const MealPlanTaskSchema = {
  properties: {
    assignedToUser: {
      type: 'string',
    },
    completedAt: {
      format: 'date-time',
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    creationExplanation: {
      type: 'string',
    },
    id: {
      type: 'string',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    mealPlanOption: {
      $ref: '#/components/schemas/MealPlanOption',
    },
    recipePrepTask: {
      $ref: '#/components/schemas/RecipePrepTask',
    },
    status: {
      type: 'string',
    },
    statusExplanation: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const MealPlanTaskCreationRequestInputSchema = {
  properties: {
    assignedToUser: {
      type: 'string',
    },
    creationExplanation: {
      type: 'string',
    },
    mealPlanOptionID: {
      type: 'string',
    },
    recipePrepTaskID: {
      type: 'string',
    },
    status: {
      type: 'string',
    },
    statusExplanation: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const MealPlanTaskStatusChangeRequestInputSchema = {
  properties: {
    assignedToUser: {
      type: 'string',
    },
    status: {
      type: 'string',
    },
    statusExplanation: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const MealPlanUpdateRequestInputSchema = {
  properties: {
    notes: {
      type: 'string',
    },
    votingDeadline: {
      format: 'date-time',
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ModifyUserPermissionsInputSchema = {
  properties: {
    newRole: {
      type: 'string',
    },
    reason: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const OAuth2ClientSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    clientID: {
      type: 'string',
    },
    clientSecret: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    description: {
      type: 'string',
    },
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const OAuth2ClientCreationRequestInputSchema = {
  properties: {
    description: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const OAuth2ClientCreationResponseSchema = {
  properties: {
    clientID: {
      type: 'string',
    },
    clientSecret: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    id: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const PaginationSchema = {
  properties: {
    filteredCount: {
      format: 'int64',
      type: 'integer',
    },
    limit: {
      format: 'int32',
      type: 'integer',
    },
    page: {
      format: 'int64',
      type: 'integer',
    },
    totalCount: {
      format: 'int64',
      type: 'integer',
    },
  },
  type: 'object',
} as const;

export const PasswordResetTokenSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    belongsToUser: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    expiresAt: {
      format: 'date-time',
      type: 'string',
    },
    id: {
      type: 'string',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    token: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const PasswordResetTokenCreationRequestInputSchema = {
  properties: {
    emailAddress: {
      format: 'email',
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const PasswordResetTokenRedemptionRequestInputSchema = {
  properties: {
    newPassword: {
      format: 'password',
      type: 'string',
    },
    token: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const PasswordUpdateInputSchema = {
  properties: {
    currentPassword: {
      format: 'password',
      type: 'string',
    },
    newPassword: {
      format: 'password',
      type: 'string',
    },
    totpToken: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const RecipeSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    createdByUser: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    eligibleForMeals: {
      type: 'boolean',
    },
    id: {
      type: 'string',
    },
    inspiredByRecipeID: {
      type: 'string',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    maximumEstimatedPortions: {
      format: 'double',
      type: 'number',
    },
    media: {
      items: {
        $ref: '#/components/schemas/RecipeMedia',
      },
      type: 'array',
    },
    minimumEstimatedPortions: {
      format: 'double',
      type: 'number',
    },
    name: {
      type: 'string',
    },
    pluralPortionName: {
      type: 'string',
    },
    portionName: {
      type: 'string',
    },
    prepTasks: {
      items: {
        $ref: '#/components/schemas/RecipePrepTask',
      },
      type: 'array',
    },
    sealOfApproval: {
      type: 'boolean',
    },
    slug: {
      type: 'string',
    },
    source: {
      type: 'string',
    },
    steps: {
      items: {
        $ref: '#/components/schemas/RecipeStep',
      },
      type: 'array',
    },
    supportingRecipes: {
      items: {
        $ref: '#/components/schemas/Recipe',
      },
      type: 'array',
    },
    yieldsComponentType: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const RecipeCreationRequestInputSchema = {
  properties: {
    alsoCreateMeal: {
      type: 'boolean',
    },
    description: {
      type: 'string',
    },
    eligibleForMeals: {
      type: 'boolean',
    },
    inspiredByRecipeID: {
      type: 'string',
    },
    maximumEstimatedPortions: {
      format: 'double',
      type: 'number',
    },
    minimumEstimatedPortions: {
      format: 'double',
      type: 'number',
    },
    name: {
      type: 'string',
    },
    pluralPortionName: {
      type: 'string',
    },
    portionName: {
      type: 'string',
    },
    prepTasks: {
      items: {
        $ref: '#/components/schemas/RecipePrepTaskWithinRecipeCreationRequestInput',
      },
      type: 'array',
    },
    sealOfApproval: {
      type: 'boolean',
    },
    slug: {
      type: 'string',
    },
    source: {
      type: 'string',
    },
    steps: {
      items: {
        $ref: '#/components/schemas/RecipeStepCreationRequestInput',
      },
      type: 'array',
    },
    yieldsComponentType: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const RecipeMediaSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    belongsToRecipe: {
      type: 'string',
    },
    belongsToRecipeStep: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    externalPath: {
      type: 'string',
    },
    id: {
      type: 'string',
    },
    index: {
      format: 'int64',
      type: 'integer',
    },
    internalPath: {
      type: 'string',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    mimeType: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const RecipePrepTaskSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    belongsToRecipe: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    description: {
      type: 'string',
    },
    explicitStorageInstructions: {
      type: 'string',
    },
    id: {
      type: 'string',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    maximumStorageTemperatureInCelsius: {
      format: 'double',
      type: 'number',
    },
    maximumTimeBufferBeforeRecipeInSeconds: {
      format: 'int64',
      type: 'integer',
    },
    minimumStorageTemperatureInCelsius: {
      format: 'double',
      type: 'number',
    },
    minimumTimeBufferBeforeRecipeInSeconds: {
      format: 'int64',
      type: 'integer',
    },
    name: {
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    optional: {
      type: 'boolean',
    },
    recipeSteps: {
      items: {
        $ref: '#/components/schemas/RecipePrepTaskStep',
      },
      type: 'array',
    },
    storageType: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const RecipePrepTaskCreationRequestInputSchema = {
  properties: {
    belongsToRecipe: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    explicitStorageInstructions: {
      type: 'string',
    },
    maximumStorageTemperatureInCelsius: {
      format: 'double',
      type: 'number',
    },
    maximumTimeBufferBeforeRecipeInSeconds: {
      format: 'int64',
      type: 'integer',
    },
    minimumStorageTemperatureInCelsius: {
      format: 'double',
      type: 'number',
    },
    minimumTimeBufferBeforeRecipeInSeconds: {
      format: 'int64',
      type: 'integer',
    },
    name: {
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    optional: {
      type: 'boolean',
    },
    recipeSteps: {
      items: {
        $ref: '#/components/schemas/RecipePrepTaskStepCreationRequestInput',
      },
      type: 'array',
    },
    storageType: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const RecipePrepTaskStepSchema = {
  properties: {
    belongsToRecipeStep: {
      type: 'string',
    },
    belongsToRecipeStepTask: {
      type: 'string',
    },
    id: {
      type: 'string',
    },
    satisfiesRecipeStep: {
      type: 'boolean',
    },
  },
  type: 'object',
} as const;

export const RecipePrepTaskStepCreationRequestInputSchema = {
  properties: {
    belongsToRecipeStep: {
      type: 'string',
    },
    satisfiesRecipeStep: {
      type: 'boolean',
    },
  },
  type: 'object',
} as const;

export const RecipePrepTaskStepUpdateRequestInputSchema = {
  properties: {
    belongsToRecipeStep: {
      type: 'string',
    },
    belongsToRecipeStepTask: {
      type: 'string',
    },
    satisfiesRecipeStep: {
      type: 'boolean',
    },
  },
  type: 'object',
} as const;

export const RecipePrepTaskStepWithinRecipeCreationRequestInputSchema = {
  properties: {
    belongsToRecipeStepIndex: {
      format: 'int64',
      type: 'integer',
    },
    satisfiesRecipeStep: {
      type: 'boolean',
    },
  },
  type: 'object',
} as const;

export const RecipePrepTaskUpdateRequestInputSchema = {
  properties: {
    belongsToRecipe: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    explicitStorageInstructions: {
      type: 'string',
    },
    maximumStorageTemperatureInCelsius: {
      format: 'double',
      type: 'number',
    },
    maximumTimeBufferBeforeRecipeInSeconds: {
      format: 'int64',
      type: 'integer',
    },
    minimumStorageTemperatureInCelsius: {
      format: 'double',
      type: 'number',
    },
    minimumTimeBufferBeforeRecipeInSeconds: {
      format: 'int64',
      type: 'integer',
    },
    name: {
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    optional: {
      type: 'boolean',
    },
    recipeSteps: {
      items: {
        $ref: '#/components/schemas/RecipePrepTaskStepUpdateRequestInput',
      },
      type: 'array',
    },
    storageType: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const RecipePrepTaskWithinRecipeCreationRequestInputSchema = {
  properties: {
    belongsToRecipe: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    explicitStorageInstructions: {
      type: 'string',
    },
    maximumStorageTemperatureInCelsius: {
      format: 'double',
      type: 'number',
    },
    maximumTimeBufferBeforeRecipeInSeconds: {
      format: 'int64',
      type: 'integer',
    },
    minimumStorageTemperatureInCelsius: {
      format: 'double',
      type: 'number',
    },
    minimumTimeBufferBeforeRecipeInSeconds: {
      format: 'int64',
      type: 'integer',
    },
    name: {
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    optional: {
      type: 'boolean',
    },
    recipeSteps: {
      items: {
        $ref: '#/components/schemas/RecipePrepTaskStepWithinRecipeCreationRequestInput',
      },
      type: 'array',
    },
    storageType: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const RecipeRatingSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    byUser: {
      type: 'string',
    },
    cleanup: {
      format: 'double',
      type: 'number',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    difficulty: {
      format: 'double',
      type: 'number',
    },
    id: {
      type: 'string',
    },
    instructions: {
      format: 'double',
      type: 'number',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    overall: {
      format: 'double',
      type: 'number',
    },
    recipeID: {
      type: 'string',
    },
    taste: {
      format: 'double',
      type: 'number',
    },
  },
  type: 'object',
} as const;

export const RecipeRatingCreationRequestInputSchema = {
  properties: {
    byUser: {
      type: 'string',
    },
    cleanup: {
      format: 'double',
      type: 'number',
    },
    difficulty: {
      format: 'double',
      type: 'number',
    },
    instructions: {
      format: 'double',
      type: 'number',
    },
    notes: {
      type: 'string',
    },
    overall: {
      format: 'double',
      type: 'number',
    },
    recipeID: {
      type: 'string',
    },
    taste: {
      format: 'double',
      type: 'number',
    },
  },
  type: 'object',
} as const;

export const RecipeRatingUpdateRequestInputSchema = {
  properties: {
    byUser: {
      type: 'string',
    },
    cleanup: {
      format: 'double',
      type: 'number',
    },
    difficulty: {
      format: 'double',
      type: 'number',
    },
    instructions: {
      format: 'double',
      type: 'number',
    },
    notes: {
      type: 'string',
    },
    overall: {
      format: 'double',
      type: 'number',
    },
    recipeID: {
      type: 'string',
    },
    taste: {
      format: 'double',
      type: 'number',
    },
  },
  type: 'object',
} as const;

export const RecipeStepSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    belongsToRecipe: {
      type: 'string',
    },
    completionConditions: {
      items: {
        $ref: '#/components/schemas/RecipeStepCompletionCondition',
      },
      type: 'array',
    },
    conditionExpression: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    explicitInstructions: {
      type: 'string',
    },
    id: {
      type: 'string',
    },
    index: {
      format: 'int64',
      type: 'integer',
    },
    ingredients: {
      items: {
        $ref: '#/components/schemas/RecipeStepIngredient',
      },
      type: 'array',
    },
    instruments: {
      items: {
        $ref: '#/components/schemas/RecipeStepInstrument',
      },
      type: 'array',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    maximumEstimatedTimeInSeconds: {
      format: 'int64',
      type: 'integer',
    },
    maximumTemperatureInCelsius: {
      format: 'double',
      type: 'number',
    },
    media: {
      items: {
        $ref: '#/components/schemas/RecipeMedia',
      },
      type: 'array',
    },
    minimumEstimatedTimeInSeconds: {
      format: 'int64',
      type: 'integer',
    },
    minimumTemperatureInCelsius: {
      format: 'double',
      type: 'number',
    },
    notes: {
      type: 'string',
    },
    optional: {
      type: 'boolean',
    },
    preparation: {
      $ref: '#/components/schemas/ValidPreparation',
    },
    products: {
      items: {
        $ref: '#/components/schemas/RecipeStepProduct',
      },
      type: 'array',
    },
    startTimerAutomatically: {
      type: 'boolean',
    },
    vessels: {
      items: {
        $ref: '#/components/schemas/RecipeStepVessel',
      },
      type: 'array',
    },
  },
  type: 'object',
} as const;

export const RecipeStepCompletionConditionSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    belongsToRecipeStep: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    id: {
      type: 'string',
    },
    ingredientState: {
      $ref: '#/components/schemas/ValidIngredientState',
    },
    ingredients: {
      items: {
        $ref: '#/components/schemas/RecipeStepCompletionConditionIngredient',
      },
      type: 'array',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    optional: {
      type: 'boolean',
    },
  },
  type: 'object',
} as const;

export const RecipeStepCompletionConditionCreationRequestInputSchema = {
  properties: {
    belongsToRecipeStep: {
      type: 'string',
    },
    ingredientState: {
      type: 'string',
    },
    ingredients: {
      format: 'int64',
      items: {
        type: 'integer',
      },
      type: 'array',
    },
    notes: {
      type: 'string',
    },
    optional: {
      type: 'boolean',
    },
  },
  type: 'object',
} as const;

export const RecipeStepCompletionConditionForExistingRecipeCreationRequestInputSchema = {
  properties: {
    belongsToRecipeStep: {
      type: 'string',
    },
    ingredientStateID: {
      type: 'string',
    },
    ingredients: {
      items: {
        $ref: '#/components/schemas/RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput',
      },
      type: 'array',
    },
    notes: {
      type: 'string',
    },
    optional: {
      type: 'boolean',
    },
  },
  type: 'object',
} as const;

export const RecipeStepCompletionConditionIngredientSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    belongsToRecipeStepCompletionCondition: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    id: {
      type: 'string',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    recipeStepIngredient: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInputSchema = {
  properties: {
    recipeStepIngredient: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const RecipeStepCompletionConditionUpdateRequestInputSchema = {
  properties: {
    belongsToRecipeStep: {
      type: 'string',
    },
    ingredientState: {
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    optional: {
      type: 'boolean',
    },
  },
  type: 'object',
} as const;

export const RecipeStepCreationRequestInputSchema = {
  properties: {
    completionConditions: {
      items: {
        $ref: '#/components/schemas/RecipeStepCompletionConditionCreationRequestInput',
      },
      type: 'array',
    },
    conditionExpression: {
      type: 'string',
    },
    explicitInstructions: {
      type: 'string',
    },
    index: {
      format: 'int64',
      type: 'integer',
    },
    ingredients: {
      items: {
        $ref: '#/components/schemas/RecipeStepIngredientCreationRequestInput',
      },
      type: 'array',
    },
    instruments: {
      items: {
        $ref: '#/components/schemas/RecipeStepInstrumentCreationRequestInput',
      },
      type: 'array',
    },
    maximumEstimatedTimeInSeconds: {
      format: 'int64',
      type: 'integer',
    },
    maximumTemperatureInCelsius: {
      format: 'double',
      type: 'number',
    },
    minimumEstimatedTimeInSeconds: {
      format: 'int64',
      type: 'integer',
    },
    minimumTemperatureInCelsius: {
      format: 'double',
      type: 'number',
    },
    notes: {
      type: 'string',
    },
    optional: {
      type: 'boolean',
    },
    preparationID: {
      type: 'string',
    },
    products: {
      items: {
        $ref: '#/components/schemas/RecipeStepProductCreationRequestInput',
      },
      type: 'array',
    },
    startTimerAutomatically: {
      type: 'boolean',
    },
    vessels: {
      items: {
        $ref: '#/components/schemas/RecipeStepVesselCreationRequestInput',
      },
      type: 'array',
    },
  },
  type: 'object',
} as const;

export const RecipeStepIngredientSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    belongsToRecipeStep: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    id: {
      type: 'string',
    },
    ingredient: {
      $ref: '#/components/schemas/ValidIngredient',
    },
    ingredientNotes: {
      type: 'string',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    maximumQuantity: {
      format: 'double',
      type: 'number',
    },
    measurementUnit: {
      $ref: '#/components/schemas/ValidMeasurementUnit',
    },
    minimumQuantity: {
      format: 'double',
      type: 'number',
    },
    name: {
      type: 'string',
    },
    optionIndex: {
      format: 'int64',
      type: 'integer',
    },
    optional: {
      type: 'boolean',
    },
    productOfRecipeID: {
      type: 'string',
    },
    productPercentageToUse: {
      format: 'double',
      type: 'number',
    },
    quantityNotes: {
      type: 'string',
    },
    recipeStepProductID: {
      type: 'string',
    },
    toTaste: {
      type: 'boolean',
    },
    vesselIndex: {
      format: 'int64',
      type: 'integer',
    },
  },
  type: 'object',
} as const;

export const RecipeStepIngredientCreationRequestInputSchema = {
  properties: {
    ingredientID: {
      type: 'string',
    },
    ingredientNotes: {
      type: 'string',
    },
    maximumQuantity: {
      format: 'double',
      type: 'number',
    },
    measurementUnitID: {
      type: 'string',
    },
    minimumQuantity: {
      format: 'double',
      type: 'number',
    },
    name: {
      type: 'string',
    },
    optionIndex: {
      format: 'int64',
      type: 'integer',
    },
    optional: {
      type: 'boolean',
    },
    productOfRecipeID: {
      type: 'string',
    },
    productOfRecipeStepIndex: {
      format: 'int64',
      type: 'integer',
    },
    productOfRecipeStepProductIndex: {
      format: 'int64',
      type: 'integer',
    },
    productPercentageToUse: {
      format: 'double',
      type: 'number',
    },
    quantityNotes: {
      type: 'string',
    },
    toTaste: {
      type: 'boolean',
    },
    vesselIndex: {
      format: 'int64',
      type: 'integer',
    },
  },
  type: 'object',
} as const;

export const RecipeStepIngredientUpdateRequestInputSchema = {
  properties: {
    belongsToRecipeStep: {
      type: 'string',
    },
    ingredientID: {
      type: 'string',
    },
    ingredientNotes: {
      type: 'string',
    },
    maximumQuantity: {
      format: 'double',
      type: 'number',
    },
    measurementUnitID: {
      type: 'string',
    },
    minimumQuantity: {
      format: 'double',
      type: 'number',
    },
    name: {
      type: 'string',
    },
    optionIndex: {
      format: 'int64',
      type: 'integer',
    },
    optional: {
      type: 'boolean',
    },
    productOfRecipeID: {
      type: 'string',
    },
    productPercentageToUse: {
      format: 'double',
      type: 'number',
    },
    quantityNotes: {
      type: 'string',
    },
    recipeStepProductID: {
      type: 'string',
    },
    toTaste: {
      type: 'boolean',
    },
    vesselIndex: {
      format: 'int64',
      type: 'integer',
    },
  },
  type: 'object',
} as const;

export const RecipeStepInstrumentSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    belongsToRecipeStep: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    id: {
      type: 'string',
    },
    instrument: {
      $ref: '#/components/schemas/ValidInstrument',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    maximumQuantity: {
      format: 'int64',
      type: 'integer',
    },
    minimumQuantity: {
      format: 'int64',
      type: 'integer',
    },
    name: {
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    optionIndex: {
      format: 'int64',
      type: 'integer',
    },
    optional: {
      type: 'boolean',
    },
    preferenceRank: {
      format: 'int32',
      type: 'integer',
    },
    recipeStepProductID: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const RecipeStepInstrumentCreationRequestInputSchema = {
  properties: {
    instrumentID: {
      type: 'string',
    },
    maximumQuantity: {
      format: 'int64',
      type: 'integer',
    },
    minimumQuantity: {
      format: 'int64',
      type: 'integer',
    },
    name: {
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    optionIndex: {
      format: 'int64',
      type: 'integer',
    },
    optional: {
      type: 'boolean',
    },
    preferenceRank: {
      format: 'int32',
      type: 'integer',
    },
    productOfRecipeStepIndex: {
      format: 'int64',
      type: 'integer',
    },
    productOfRecipeStepProductIndex: {
      format: 'int64',
      type: 'integer',
    },
    recipeStepProductID: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const RecipeStepInstrumentUpdateRequestInputSchema = {
  properties: {
    belongsToRecipeStep: {
      type: 'string',
    },
    instrumentID: {
      type: 'string',
    },
    maximumQuantity: {
      format: 'int64',
      type: 'integer',
    },
    minimumQuantity: {
      format: 'int64',
      type: 'integer',
    },
    name: {
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    optionIndex: {
      format: 'int64',
      type: 'integer',
    },
    optional: {
      type: 'boolean',
    },
    preferenceRank: {
      format: 'int32',
      type: 'integer',
    },
    recipeStepProductID: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const RecipeStepProductSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    belongsToRecipeStep: {
      type: 'string',
    },
    compostable: {
      type: 'boolean',
    },
    containedInVesselIndex: {
      format: 'int64',
      type: 'integer',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    id: {
      type: 'string',
    },
    index: {
      format: 'int64',
      type: 'integer',
    },
    isLiquid: {
      type: 'boolean',
    },
    isWaste: {
      type: 'boolean',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    maximumQuantity: {
      format: 'double',
      type: 'number',
    },
    maximumStorageDurationInSeconds: {
      format: 'int64',
      type: 'integer',
    },
    maximumStorageTemperatureInCelsius: {
      format: 'double',
      type: 'number',
    },
    measurementUnit: {
      $ref: '#/components/schemas/ValidMeasurementUnit',
    },
    minimumQuantity: {
      format: 'double',
      type: 'number',
    },
    minimumStorageTemperatureInCelsius: {
      format: 'double',
      type: 'number',
    },
    name: {
      type: 'string',
    },
    quantityNotes: {
      type: 'string',
    },
    storageInstructions: {
      type: 'string',
    },
    type: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const RecipeStepProductCreationRequestInputSchema = {
  properties: {
    compostable: {
      type: 'boolean',
    },
    containedInVesselIndex: {
      format: 'int64',
      type: 'integer',
    },
    index: {
      format: 'int64',
      type: 'integer',
    },
    isLiquid: {
      type: 'boolean',
    },
    isWaste: {
      type: 'boolean',
    },
    maximumQuantity: {
      format: 'double',
      type: 'number',
    },
    maximumStorageDurationInSeconds: {
      format: 'int64',
      type: 'integer',
    },
    maximumStorageTemperatureInCelsius: {
      format: 'double',
      type: 'number',
    },
    measurementUnitID: {
      type: 'string',
    },
    minimumQuantity: {
      format: 'double',
      type: 'number',
    },
    minimumStorageTemperatureInCelsius: {
      format: 'double',
      type: 'number',
    },
    name: {
      type: 'string',
    },
    quantityNotes: {
      type: 'string',
    },
    storageInstructions: {
      type: 'string',
    },
    type: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const RecipeStepProductUpdateRequestInputSchema = {
  properties: {
    belongsToRecipeStep: {
      type: 'string',
    },
    compostable: {
      type: 'boolean',
    },
    containedInVesselIndex: {
      format: 'int64',
      type: 'integer',
    },
    index: {
      format: 'int64',
      type: 'integer',
    },
    isLiquid: {
      type: 'boolean',
    },
    isWaste: {
      type: 'boolean',
    },
    maximumQuantity: {
      format: 'double',
      type: 'number',
    },
    maximumStorageDurationInSeconds: {
      format: 'int64',
      type: 'integer',
    },
    maximumStorageTemperatureInCelsius: {
      format: 'double',
      type: 'number',
    },
    measurementUnitID: {
      type: 'string',
    },
    minimumQuantity: {
      format: 'double',
      type: 'number',
    },
    minimumStorageTemperatureInCelsius: {
      format: 'double',
      type: 'number',
    },
    name: {
      type: 'string',
    },
    quantityNotes: {
      type: 'string',
    },
    storageInstructions: {
      type: 'string',
    },
    type: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const RecipeStepUpdateRequestInputSchema = {
  properties: {
    belongsToRecipe: {
      type: 'string',
    },
    conditionExpression: {
      type: 'string',
    },
    explicitInstructions: {
      type: 'string',
    },
    index: {
      format: 'int64',
      type: 'integer',
    },
    maximumEstimatedTimeInSeconds: {
      format: 'int64',
      type: 'integer',
    },
    maximumTemperatureInCelsius: {
      format: 'double',
      type: 'number',
    },
    minimumEstimatedTimeInSeconds: {
      format: 'int64',
      type: 'integer',
    },
    minimumTemperatureInCelsius: {
      format: 'double',
      type: 'number',
    },
    notes: {
      type: 'string',
    },
    optional: {
      type: 'boolean',
    },
    preparation: {
      $ref: '#/components/schemas/ValidPreparation',
    },
    startTimerAutomatically: {
      type: 'boolean',
    },
  },
  type: 'object',
} as const;

export const RecipeStepVesselSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    belongsToRecipeStep: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    id: {
      type: 'string',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    maximumQuantity: {
      format: 'int64',
      type: 'integer',
    },
    minimumQuantity: {
      format: 'int64',
      type: 'integer',
    },
    name: {
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    recipeStepProductID: {
      type: 'string',
    },
    unavailableAfterStep: {
      type: 'boolean',
    },
    vessel: {
      $ref: '#/components/schemas/ValidVessel',
    },
    vesselPreposition: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const RecipeStepVesselCreationRequestInputSchema = {
  properties: {
    maximumQuantity: {
      format: 'int64',
      type: 'integer',
    },
    minimumQuantity: {
      format: 'int64',
      type: 'integer',
    },
    name: {
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    productOfRecipeStepIndex: {
      format: 'int64',
      type: 'integer',
    },
    productOfRecipeStepProductIndex: {
      format: 'int64',
      type: 'integer',
    },
    recipeStepProductID: {
      type: 'string',
    },
    unavailableAfterStep: {
      type: 'boolean',
    },
    vesselID: {
      type: 'string',
    },
    vesselPreposition: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const RecipeStepVesselUpdateRequestInputSchema = {
  properties: {
    belongsToRecipeStep: {
      type: 'string',
    },
    maximumQuantity: {
      format: 'int64',
      type: 'integer',
    },
    minimumQuantity: {
      format: 'int64',
      type: 'integer',
    },
    name: {
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    recipeStepProductID: {
      type: 'string',
    },
    unavailableAfterStep: {
      type: 'boolean',
    },
    vesselID: {
      type: 'string',
    },
    vesselPreposition: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const RecipeUpdateRequestInputSchema = {
  properties: {
    description: {
      type: 'string',
    },
    eligibleForMeals: {
      type: 'boolean',
    },
    inspiredByRecipeID: {
      type: 'string',
    },
    maximumEstimatedPortions: {
      format: 'double',
      type: 'number',
    },
    minimumEstimatedPortions: {
      format: 'double',
      type: 'number',
    },
    name: {
      type: 'string',
    },
    pluralPortionName: {
      type: 'string',
    },
    portionName: {
      type: 'string',
    },
    sealOfApproval: {
      type: 'boolean',
    },
    slug: {
      type: 'string',
    },
    source: {
      type: 'string',
    },
    yieldsComponentType: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ResponseDetailsSchema = {
  properties: {
    currentHouseholdID: {
      type: 'string',
    },
    traceID: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ServiceSettingSchema = {
  properties: {
    adminsOnly: {
      type: 'boolean',
    },
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    defaultValue: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    enumeration: {
      items: {
        type: 'string',
      },
      type: 'array',
    },
    id: {
      type: 'string',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    name: {
      type: 'string',
    },
    type: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ServiceSettingConfigurationSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    belongsToHousehold: {
      type: 'string',
    },
    belongsToUser: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    id: {
      type: 'string',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    serviceSetting: {
      $ref: '#/components/schemas/ServiceSetting',
    },
    value: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ServiceSettingConfigurationCreationRequestInputSchema = {
  properties: {
    belongsToHousehold: {
      type: 'string',
    },
    belongsToUser: {
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    serviceSettingID: {
      type: 'string',
    },
    value: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ServiceSettingConfigurationUpdateRequestInputSchema = {
  properties: {
    belongsToHousehold: {
      type: 'string',
    },
    belongsToUser: {
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    serviceSettingID: {
      type: 'string',
    },
    value: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ServiceSettingCreationRequestInputSchema = {
  properties: {
    adminsOnly: {
      type: 'boolean',
    },
    defaultValue: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    enumeration: {
      items: {
        type: 'string',
      },
      type: 'array',
    },
    name: {
      type: 'string',
    },
    type: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const TOTPSecretRefreshInputSchema = {
  properties: {
    currentPassword: {
      format: 'password',
      type: 'string',
    },
    totpToken: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const TOTPSecretRefreshResponseSchema = {
  properties: {
    qrCode: {
      type: 'string',
    },
    twoFactorSecret: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const TOTPSecretVerificationInputSchema = {
  properties: {
    totpToken: {
      type: 'string',
    },
    userID: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const UserSchema = {
  properties: {
    accountStatus: {
      type: 'string',
    },
    accountStatusExplanation: {
      type: 'string',
    },
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    avatar: {
      type: 'string',
    },
    birthday: {
      format: 'date-time',
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    emailAddress: {
      format: 'email',
      type: 'string',
    },
    emailAddressVerifiedAt: {
      format: 'date-time',
      type: 'string',
    },
    firstName: {
      type: 'string',
    },
    id: {
      type: 'string',
    },
    lastAcceptedPrivacyPolicy: {
      format: 'date-time',
      type: 'string',
    },
    lastAcceptedTOS: {
      format: 'date-time',
      type: 'string',
    },
    lastName: {
      type: 'string',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    passwordLastChangedAt: {
      format: 'date-time',
      type: 'string',
    },
    requiresPasswordChange: {
      type: 'boolean',
    },
    serviceRoles: {
      type: 'string',
    },
    twoFactorSecretVerifiedAt: {
      format: 'date-time',
      type: 'string',
    },
    username: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const UserAccountStatusUpdateInputSchema = {
  properties: {
    newStatus: {
      type: 'string',
    },
    reason: {
      type: 'string',
    },
    targetUserID: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const UserCreationResponseSchema = {
  properties: {
    accountStatus: {
      type: 'string',
    },
    avatar: {
      type: 'string',
    },
    birthday: {
      format: 'date-time',
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    createdUserID: {
      type: 'string',
    },
    emailAddress: {
      format: 'email',
      type: 'string',
    },
    firstName: {
      type: 'string',
    },
    isAdmin: {
      type: 'boolean',
    },
    lastName: {
      type: 'string',
    },
    qrCode: {
      type: 'string',
    },
    twoFactorSecret: {
      type: 'string',
    },
    username: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const UserDetailsUpdateRequestInputSchema = {
  properties: {
    birthday: {
      format: 'date-time',
      type: 'string',
    },
    currentPassword: {
      format: 'password',
      type: 'string',
    },
    firstName: {
      type: 'string',
    },
    lastName: {
      type: 'string',
    },
    totpToken: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const UserEmailAddressUpdateInputSchema = {
  properties: {
    currentPassword: {
      format: 'password',
      type: 'string',
    },
    newEmailAddress: {
      type: 'string',
    },
    totpToken: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const UserIngredientPreferenceSchema = {
  properties: {
    allergy: {
      type: 'boolean',
    },
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    belongsToUser: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    id: {
      type: 'string',
    },
    ingredient: {
      $ref: '#/components/schemas/ValidIngredient',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    rating: {
      format: 'int32',
      type: 'integer',
    },
  },
  type: 'object',
} as const;

export const UserIngredientPreferenceCreationRequestInputSchema = {
  properties: {
    allergy: {
      type: 'boolean',
    },
    notes: {
      type: 'string',
    },
    rating: {
      format: 'int32',
      type: 'integer',
    },
    validIngredientGroupID: {
      type: 'string',
    },
    validIngredientID: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const UserIngredientPreferenceUpdateRequestInputSchema = {
  properties: {
    allergy: {
      type: 'boolean',
    },
    ingredientID: {
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    rating: {
      format: 'int32',
      type: 'integer',
    },
  },
  type: 'object',
} as const;

export const UserLoginInputSchema = {
  properties: {
    password: {
      format: 'password',
      type: 'string',
    },
    totpToken: {
      type: 'string',
    },
    username: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const UserNotificationSchema = {
  properties: {
    belongsToUser: {
      type: 'string',
    },
    content: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    id: {
      type: 'string',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    status: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const UserNotificationCreationRequestInputSchema = {
  properties: {
    belongsToUser: {
      type: 'string',
    },
    content: {
      type: 'string',
    },
    status: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const UserNotificationUpdateRequestInputSchema = {
  properties: {
    status: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const UserPermissionsRequestInputSchema = {
  properties: {
    permissions: {
      items: {
        type: 'string',
      },
      type: 'array',
    },
  },
  type: 'object',
} as const;

export const UserPermissionsResponseSchema = {
  properties: {
    permissions: {
      type: 'object',
    },
  },
  type: 'object',
} as const;

export const UserRegistrationInputSchema = {
  properties: {
    acceptedPrivacyPolicy: {
      type: 'boolean',
    },
    acceptedTOS: {
      type: 'boolean',
    },
    birthday: {
      format: 'date-time',
      type: 'string',
    },
    emailAddress: {
      format: 'email',
      type: 'string',
    },
    firstName: {
      type: 'string',
    },
    householdName: {
      type: 'string',
    },
    invitationID: {
      type: 'string',
    },
    invitationToken: {
      type: 'string',
    },
    lastName: {
      type: 'string',
    },
    password: {
      format: 'password',
      type: 'string',
    },
    username: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const UserStatusResponseSchema = {
  properties: {
    accountStatus: {
      type: 'string',
    },
    accountStatusExplanation: {
      type: 'string',
    },
    activeHousehold: {
      type: 'string',
    },
    isAuthenticated: {
      type: 'boolean',
    },
    userID: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const UsernameReminderRequestInputSchema = {
  properties: {
    emailAddress: {
      format: 'email',
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const UsernameUpdateInputSchema = {
  properties: {
    currentPassword: {
      format: 'password',
      type: 'string',
    },
    newUsername: {
      type: 'string',
    },
    totpToken: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ValidIngredientSchema = {
  properties: {
    animalDerived: {
      type: 'boolean',
    },
    animalFlesh: {
      type: 'boolean',
    },
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    containsAlcohol: {
      type: 'boolean',
    },
    containsDairy: {
      type: 'boolean',
    },
    containsEgg: {
      type: 'boolean',
    },
    containsFish: {
      type: 'boolean',
    },
    containsGluten: {
      type: 'boolean',
    },
    containsPeanut: {
      type: 'boolean',
    },
    containsSesame: {
      type: 'boolean',
    },
    containsShellfish: {
      type: 'boolean',
    },
    containsSoy: {
      type: 'boolean',
    },
    containsTreeNut: {
      type: 'boolean',
    },
    containsWheat: {
      type: 'boolean',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    description: {
      type: 'string',
    },
    iconPath: {
      type: 'string',
    },
    id: {
      type: 'string',
    },
    isAcid: {
      type: 'boolean',
    },
    isFat: {
      type: 'boolean',
    },
    isFruit: {
      type: 'boolean',
    },
    isGrain: {
      type: 'boolean',
    },
    isHeat: {
      type: 'boolean',
    },
    isLiquid: {
      type: 'boolean',
    },
    isMeasuredVolumetrically: {
      type: 'boolean',
    },
    isProtein: {
      type: 'boolean',
    },
    isSalt: {
      type: 'boolean',
    },
    isStarch: {
      type: 'boolean',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    maximumIdealStorageTemperatureInCelsius: {
      format: 'double',
      type: 'number',
    },
    minimumIdealStorageTemperatureInCelsius: {
      format: 'double',
      type: 'number',
    },
    name: {
      type: 'string',
    },
    pluralName: {
      type: 'string',
    },
    restrictToPreparations: {
      type: 'boolean',
    },
    shoppingSuggestions: {
      type: 'string',
    },
    slug: {
      type: 'string',
    },
    storageInstructions: {
      type: 'string',
    },
    warning: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ValidIngredientCreationRequestInputSchema = {
  properties: {
    animalDerived: {
      type: 'boolean',
    },
    animalFlesh: {
      type: 'boolean',
    },
    containsAlcohol: {
      type: 'boolean',
    },
    containsDairy: {
      type: 'boolean',
    },
    containsEgg: {
      type: 'boolean',
    },
    containsFish: {
      type: 'boolean',
    },
    containsGluten: {
      type: 'boolean',
    },
    containsPeanut: {
      type: 'boolean',
    },
    containsSesame: {
      type: 'boolean',
    },
    containsShellfish: {
      type: 'boolean',
    },
    containsSoy: {
      type: 'boolean',
    },
    containsTreeNut: {
      type: 'boolean',
    },
    containsWheat: {
      type: 'boolean',
    },
    description: {
      type: 'string',
    },
    iconPath: {
      type: 'string',
    },
    isAcid: {
      type: 'boolean',
    },
    isFat: {
      type: 'boolean',
    },
    isFruit: {
      type: 'boolean',
    },
    isGrain: {
      type: 'boolean',
    },
    isHeat: {
      type: 'boolean',
    },
    isLiquid: {
      type: 'boolean',
    },
    isMeasuredVolumetrically: {
      type: 'boolean',
    },
    isProtein: {
      type: 'boolean',
    },
    isSalt: {
      type: 'boolean',
    },
    isStarch: {
      type: 'boolean',
    },
    maximumIdealStorageTemperatureInCelsius: {
      format: 'double',
      type: 'number',
    },
    minimumIdealStorageTemperatureInCelsius: {
      format: 'double',
      type: 'number',
    },
    name: {
      type: 'string',
    },
    pluralName: {
      type: 'string',
    },
    restrictToPreparations: {
      type: 'boolean',
    },
    shoppingSuggestions: {
      type: 'string',
    },
    slug: {
      type: 'string',
    },
    storageInstructions: {
      type: 'string',
    },
    warning: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ValidIngredientGroupSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    description: {
      type: 'string',
    },
    id: {
      type: 'string',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    members: {
      items: {
        $ref: '#/components/schemas/ValidIngredientGroupMember',
      },
      type: 'array',
    },
    name: {
      type: 'string',
    },
    slug: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ValidIngredientGroupCreationRequestInputSchema = {
  properties: {
    description: {
      type: 'string',
    },
    members: {
      items: {
        $ref: '#/components/schemas/ValidIngredientGroupMemberCreationRequestInput',
      },
      type: 'array',
    },
    name: {
      type: 'string',
    },
    slug: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ValidIngredientGroupMemberSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    belongsToGroup: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    id: {
      type: 'string',
    },
    validIngredient: {
      $ref: '#/components/schemas/ValidIngredient',
    },
  },
  type: 'object',
} as const;

export const ValidIngredientGroupMemberCreationRequestInputSchema = {
  properties: {
    validIngredientID: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ValidIngredientGroupUpdateRequestInputSchema = {
  properties: {
    description: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    slug: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ValidIngredientMeasurementUnitSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    id: {
      type: 'string',
    },
    ingredient: {
      $ref: '#/components/schemas/ValidIngredient',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    maximumAllowableQuantity: {
      format: 'double',
      type: 'number',
    },
    measurementUnit: {
      $ref: '#/components/schemas/ValidMeasurementUnit',
    },
    minimumAllowableQuantity: {
      format: 'double',
      type: 'number',
    },
    notes: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ValidIngredientMeasurementUnitCreationRequestInputSchema = {
  properties: {
    maximumAllowableQuantity: {
      format: 'double',
      type: 'number',
    },
    minimumAllowableQuantity: {
      format: 'double',
      type: 'number',
    },
    notes: {
      type: 'string',
    },
    validIngredientID: {
      type: 'string',
    },
    validMeasurementUnitID: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ValidIngredientMeasurementUnitUpdateRequestInputSchema = {
  properties: {
    maximumAllowableQuantity: {
      format: 'double',
      type: 'number',
    },
    minimumAllowableQuantity: {
      format: 'double',
      type: 'number',
    },
    notes: {
      type: 'string',
    },
    validIngredientID: {
      type: 'string',
    },
    validMeasurementUnitID: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ValidIngredientPreparationSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    id: {
      type: 'string',
    },
    ingredient: {
      $ref: '#/components/schemas/ValidIngredient',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    preparation: {
      $ref: '#/components/schemas/ValidPreparation',
    },
  },
  type: 'object',
} as const;

export const ValidIngredientPreparationCreationRequestInputSchema = {
  properties: {
    notes: {
      type: 'string',
    },
    validIngredientID: {
      type: 'string',
    },
    validPreparationID: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ValidIngredientPreparationUpdateRequestInputSchema = {
  properties: {
    notes: {
      type: 'string',
    },
    validIngredientID: {
      type: 'string',
    },
    validPreparationID: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ValidIngredientStateSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    attributeType: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    description: {
      type: 'string',
    },
    iconPath: {
      type: 'string',
    },
    id: {
      type: 'string',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    name: {
      type: 'string',
    },
    pastTense: {
      type: 'string',
    },
    slug: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ValidIngredientStateCreationRequestInputSchema = {
  properties: {
    attributeType: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    iconPath: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    pastTense: {
      type: 'string',
    },
    slug: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ValidIngredientStateIngredientSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    id: {
      type: 'string',
    },
    ingredient: {
      $ref: '#/components/schemas/ValidIngredient',
    },
    ingredientState: {
      $ref: '#/components/schemas/ValidIngredientState',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    notes: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ValidIngredientStateIngredientCreationRequestInputSchema = {
  properties: {
    notes: {
      type: 'string',
    },
    validIngredientID: {
      type: 'string',
    },
    validIngredientStateID: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ValidIngredientStateIngredientUpdateRequestInputSchema = {
  properties: {
    notes: {
      type: 'string',
    },
    validIngredientID: {
      type: 'string',
    },
    validIngredientStateID: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ValidIngredientStateUpdateRequestInputSchema = {
  properties: {
    attributeType: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    iconPath: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    pastTense: {
      type: 'string',
    },
    slug: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ValidIngredientUpdateRequestInputSchema = {
  properties: {
    animalDerived: {
      type: 'boolean',
    },
    animalFlesh: {
      type: 'boolean',
    },
    containsAlcohol: {
      type: 'boolean',
    },
    containsDairy: {
      type: 'boolean',
    },
    containsEgg: {
      type: 'boolean',
    },
    containsFish: {
      type: 'boolean',
    },
    containsGluten: {
      type: 'boolean',
    },
    containsPeanut: {
      type: 'boolean',
    },
    containsSesame: {
      type: 'boolean',
    },
    containsShellfish: {
      type: 'boolean',
    },
    containsSoy: {
      type: 'boolean',
    },
    containsTreeNut: {
      type: 'boolean',
    },
    containsWheat: {
      type: 'boolean',
    },
    description: {
      type: 'string',
    },
    iconPath: {
      type: 'string',
    },
    isAcid: {
      type: 'boolean',
    },
    isFat: {
      type: 'boolean',
    },
    isFruit: {
      type: 'boolean',
    },
    isGrain: {
      type: 'boolean',
    },
    isHeat: {
      type: 'boolean',
    },
    isLiquid: {
      type: 'boolean',
    },
    isMeasuredVolumetrically: {
      type: 'boolean',
    },
    isProtein: {
      type: 'boolean',
    },
    isSalt: {
      type: 'boolean',
    },
    isStarch: {
      type: 'boolean',
    },
    maximumIdealStorageTemperatureInCelsius: {
      format: 'double',
      type: 'number',
    },
    minimumIdealStorageTemperatureInCelsius: {
      format: 'double',
      type: 'number',
    },
    name: {
      type: 'string',
    },
    pluralName: {
      type: 'string',
    },
    restrictToPreparations: {
      type: 'boolean',
    },
    shoppingSuggestions: {
      type: 'string',
    },
    slug: {
      type: 'string',
    },
    storageInstructions: {
      type: 'string',
    },
    warning: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ValidInstrumentSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    description: {
      type: 'string',
    },
    displayInSummaryLists: {
      type: 'boolean',
    },
    iconPath: {
      type: 'string',
    },
    id: {
      type: 'string',
    },
    includeInGeneratedInstructions: {
      type: 'boolean',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    name: {
      type: 'string',
    },
    pluralName: {
      type: 'string',
    },
    slug: {
      type: 'string',
    },
    usableForStorage: {
      type: 'boolean',
    },
  },
  type: 'object',
} as const;

export const ValidInstrumentCreationRequestInputSchema = {
  properties: {
    description: {
      type: 'string',
    },
    displayInSummaryLists: {
      type: 'boolean',
    },
    iconPath: {
      type: 'string',
    },
    includeInGeneratedInstructions: {
      type: 'boolean',
    },
    name: {
      type: 'string',
    },
    pluralName: {
      type: 'string',
    },
    slug: {
      type: 'string',
    },
    usableForStorage: {
      type: 'boolean',
    },
  },
  type: 'object',
} as const;

export const ValidInstrumentUpdateRequestInputSchema = {
  properties: {
    description: {
      type: 'string',
    },
    displayInSummaryLists: {
      type: 'boolean',
    },
    iconPath: {
      type: 'string',
    },
    includeInGeneratedInstructions: {
      type: 'boolean',
    },
    name: {
      type: 'string',
    },
    pluralName: {
      type: 'string',
    },
    slug: {
      type: 'string',
    },
    usableForStorage: {
      type: 'boolean',
    },
  },
  type: 'object',
} as const;

export const ValidMeasurementUnitSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    description: {
      type: 'string',
    },
    iconPath: {
      type: 'string',
    },
    id: {
      type: 'string',
    },
    imperial: {
      type: 'boolean',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    metric: {
      type: 'boolean',
    },
    name: {
      type: 'string',
    },
    pluralName: {
      type: 'string',
    },
    slug: {
      type: 'string',
    },
    universal: {
      type: 'boolean',
    },
    volumetric: {
      type: 'boolean',
    },
  },
  type: 'object',
} as const;

export const ValidMeasurementUnitConversionSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    from: {
      $ref: '#/components/schemas/ValidMeasurementUnit',
    },
    id: {
      type: 'string',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    modifier: {
      format: 'double',
      type: 'number',
    },
    notes: {
      type: 'string',
    },
    onlyForIngredient: {
      $ref: '#/components/schemas/ValidIngredient',
    },
    to: {
      $ref: '#/components/schemas/ValidMeasurementUnit',
    },
  },
  type: 'object',
} as const;

export const ValidMeasurementUnitConversionCreationRequestInputSchema = {
  properties: {
    from: {
      type: 'string',
    },
    modifier: {
      format: 'double',
      type: 'number',
    },
    notes: {
      type: 'string',
    },
    onlyForIngredient: {
      type: 'string',
    },
    to: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ValidMeasurementUnitConversionUpdateRequestInputSchema = {
  properties: {
    from: {
      type: 'string',
    },
    modifier: {
      format: 'double',
      type: 'number',
    },
    notes: {
      type: 'string',
    },
    onlyForIngredient: {
      type: 'string',
    },
    to: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ValidMeasurementUnitCreationRequestInputSchema = {
  properties: {
    description: {
      type: 'string',
    },
    iconPath: {
      type: 'string',
    },
    imperial: {
      type: 'boolean',
    },
    metric: {
      type: 'boolean',
    },
    name: {
      type: 'string',
    },
    pluralName: {
      type: 'string',
    },
    slug: {
      type: 'string',
    },
    universal: {
      type: 'boolean',
    },
    volumetric: {
      type: 'boolean',
    },
  },
  type: 'object',
} as const;

export const ValidMeasurementUnitUpdateRequestInputSchema = {
  properties: {
    description: {
      type: 'string',
    },
    iconPath: {
      type: 'string',
    },
    imperial: {
      type: 'boolean',
    },
    metric: {
      type: 'boolean',
    },
    name: {
      type: 'string',
    },
    pluralName: {
      type: 'string',
    },
    slug: {
      type: 'string',
    },
    universal: {
      type: 'boolean',
    },
    volumetric: {
      type: 'boolean',
    },
  },
  type: 'object',
} as const;

export const ValidPreparationSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    conditionExpressionRequired: {
      type: 'boolean',
    },
    consumesVessel: {
      type: 'boolean',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    description: {
      type: 'string',
    },
    iconPath: {
      type: 'string',
    },
    id: {
      type: 'string',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    maximumIngredientCount: {
      format: 'int32',
      type: 'integer',
    },
    maximumInstrumentCount: {
      format: 'int32',
      type: 'integer',
    },
    maximumVesselCount: {
      format: 'int32',
      type: 'integer',
    },
    minimumIngredientCount: {
      format: 'int32',
      type: 'integer',
    },
    minimumInstrumentCount: {
      format: 'int32',
      type: 'integer',
    },
    minimumVesselCount: {
      format: 'int32',
      type: 'integer',
    },
    name: {
      type: 'string',
    },
    onlyForVessels: {
      type: 'boolean',
    },
    pastTense: {
      type: 'string',
    },
    restrictToIngredients: {
      type: 'boolean',
    },
    slug: {
      type: 'string',
    },
    temperatureRequired: {
      type: 'boolean',
    },
    timeEstimateRequired: {
      type: 'boolean',
    },
    yieldsNothing: {
      type: 'boolean',
    },
  },
  type: 'object',
} as const;

export const ValidPreparationCreationRequestInputSchema = {
  properties: {
    conditionExpressionRequired: {
      type: 'boolean',
    },
    consumesVessel: {
      type: 'boolean',
    },
    description: {
      type: 'string',
    },
    iconPath: {
      type: 'string',
    },
    maximumIngredientCount: {
      format: 'int32',
      type: 'integer',
    },
    maximumInstrumentCount: {
      format: 'int32',
      type: 'integer',
    },
    maximumVesselCount: {
      format: 'int32',
      type: 'integer',
    },
    minimumIngredientCount: {
      format: 'int32',
      type: 'integer',
    },
    minimumInstrumentCount: {
      format: 'int32',
      type: 'integer',
    },
    minimumVesselCount: {
      format: 'int32',
      type: 'integer',
    },
    name: {
      type: 'string',
    },
    onlyForVessels: {
      type: 'boolean',
    },
    pastTense: {
      type: 'string',
    },
    restrictToIngredients: {
      type: 'boolean',
    },
    slug: {
      type: 'string',
    },
    temperatureRequired: {
      type: 'boolean',
    },
    timeEstimateRequired: {
      type: 'boolean',
    },
    yieldsNothing: {
      type: 'boolean',
    },
  },
  type: 'object',
} as const;

export const ValidPreparationInstrumentSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    id: {
      type: 'string',
    },
    instrument: {
      $ref: '#/components/schemas/ValidInstrument',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    preparation: {
      $ref: '#/components/schemas/ValidPreparation',
    },
  },
  type: 'object',
} as const;

export const ValidPreparationInstrumentCreationRequestInputSchema = {
  properties: {
    notes: {
      type: 'string',
    },
    validInstrumentID: {
      type: 'string',
    },
    validPreparationID: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ValidPreparationInstrumentUpdateRequestInputSchema = {
  properties: {
    notes: {
      type: 'string',
    },
    validInstrumentID: {
      type: 'string',
    },
    validPreparationID: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ValidPreparationUpdateRequestInputSchema = {
  properties: {
    conditionExpressionRequired: {
      type: 'boolean',
    },
    consumesVessel: {
      type: 'boolean',
    },
    description: {
      type: 'string',
    },
    iconPath: {
      type: 'string',
    },
    maximumIngredientCount: {
      format: 'int32',
      type: 'integer',
    },
    maximumInstrumentCount: {
      format: 'int32',
      type: 'integer',
    },
    maximumVesselCount: {
      format: 'int32',
      type: 'integer',
    },
    minimumIngredientCount: {
      format: 'int32',
      type: 'integer',
    },
    minimumInstrumentCount: {
      format: 'int32',
      type: 'integer',
    },
    minimumVesselCount: {
      format: 'int32',
      type: 'integer',
    },
    name: {
      type: 'string',
    },
    onlyForVessels: {
      type: 'boolean',
    },
    pastTense: {
      type: 'string',
    },
    restrictToIngredients: {
      type: 'boolean',
    },
    slug: {
      type: 'string',
    },
    temperatureRequired: {
      type: 'boolean',
    },
    timeEstimateRequired: {
      type: 'boolean',
    },
    yieldsNothing: {
      type: 'boolean',
    },
  },
  type: 'object',
} as const;

export const ValidPreparationVesselSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    id: {
      type: 'string',
    },
    instrument: {
      $ref: '#/components/schemas/ValidVessel',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    notes: {
      type: 'string',
    },
    preparation: {
      $ref: '#/components/schemas/ValidPreparation',
    },
  },
  type: 'object',
} as const;

export const ValidPreparationVesselCreationRequestInputSchema = {
  properties: {
    notes: {
      type: 'string',
    },
    validPreparationID: {
      type: 'string',
    },
    validVesselID: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ValidPreparationVesselUpdateRequestInputSchema = {
  properties: {
    notes: {
      type: 'string',
    },
    validPreparationID: {
      type: 'string',
    },
    validVesselID: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const ValidVesselSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    capacity: {
      format: 'double',
      type: 'number',
    },
    capacityUnit: {
      $ref: '#/components/schemas/ValidMeasurementUnit',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    description: {
      type: 'string',
    },
    displayInSummaryLists: {
      type: 'boolean',
    },
    heightInMillimeters: {
      format: 'double',
      type: 'number',
    },
    iconPath: {
      type: 'string',
    },
    id: {
      type: 'string',
    },
    includeInGeneratedInstructions: {
      type: 'boolean',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    lengthInMillimeters: {
      format: 'double',
      type: 'number',
    },
    name: {
      type: 'string',
    },
    pluralName: {
      type: 'string',
    },
    shape: {
      type: 'string',
    },
    slug: {
      type: 'string',
    },
    usableForStorage: {
      type: 'boolean',
    },
    widthInMillimeters: {
      format: 'double',
      type: 'number',
    },
  },
  type: 'object',
} as const;

export const ValidVesselCreationRequestInputSchema = {
  properties: {
    capacity: {
      format: 'double',
      type: 'number',
    },
    capacityUnitID: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    displayInSummaryLists: {
      type: 'boolean',
    },
    heightInMillimeters: {
      format: 'double',
      type: 'number',
    },
    iconPath: {
      type: 'string',
    },
    includeInGeneratedInstructions: {
      type: 'boolean',
    },
    lengthInMillimeters: {
      format: 'double',
      type: 'number',
    },
    name: {
      type: 'string',
    },
    pluralName: {
      type: 'string',
    },
    shape: {
      type: 'string',
    },
    slug: {
      type: 'string',
    },
    usableForStorage: {
      type: 'boolean',
    },
    widthInMillimeters: {
      format: 'double',
      type: 'number',
    },
  },
  type: 'object',
} as const;

export const ValidVesselUpdateRequestInputSchema = {
  properties: {
    capacity: {
      format: 'double',
      type: 'number',
    },
    capacityUnitID: {
      type: 'string',
    },
    description: {
      type: 'string',
    },
    displayInSummaryLists: {
      type: 'boolean',
    },
    heightInMillimeters: {
      format: 'double',
      type: 'number',
    },
    iconPath: {
      type: 'string',
    },
    includeInGeneratedInstructions: {
      type: 'boolean',
    },
    lengthInMillimeters: {
      format: 'double',
      type: 'number',
    },
    name: {
      type: 'string',
    },
    pluralName: {
      type: 'string',
    },
    shape: {
      type: 'string',
    },
    slug: {
      type: 'string',
    },
    usableForStorage: {
      type: 'boolean',
    },
    widthInMillimeters: {
      format: 'double',
      type: 'number',
    },
  },
  type: 'object',
} as const;

export const WebhookSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    belongsToHousehold: {
      type: 'string',
    },
    contentType: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    events: {
      items: {
        $ref: '#/components/schemas/WebhookTriggerEvent',
      },
      type: 'array',
    },
    id: {
      type: 'string',
    },
    lastUpdatedAt: {
      format: 'date-time',
      type: 'string',
    },
    method: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    url: {
      format: 'uri',
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const WebhookCreationRequestInputSchema = {
  properties: {
    contentType: {
      type: 'string',
    },
    events: {
      items: {
        type: 'string',
      },
      type: 'array',
    },
    method: {
      type: 'string',
    },
    name: {
      type: 'string',
    },
    url: {
      format: 'uri',
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const WebhookTriggerEventSchema = {
  properties: {
    archivedAt: {
      format: 'date-time',
      type: 'string',
    },
    belongsToWebhook: {
      type: 'string',
    },
    createdAt: {
      format: 'date-time',
      type: 'string',
    },
    id: {
      type: 'string',
    },
    triggerEvent: {
      type: 'string',
    },
  },
  type: 'object',
} as const;

export const WebhookTriggerEventCreationRequestInputSchema = {
  properties: {
    belongsToWebhook: {
      type: 'string',
    },
    triggerEvent: {
      type: 'string',
    },
  },
  type: 'object',
} as const;
