openapi: 3.1.0
info:
  title: Dinner Done Better
  description: |-
    This is the spec for the Dinner Done Better API.
#   termsOfService: https://terms.dinnerdonebetter.com
#   contact:
#     email: support@dinnerdonebetter.dev
  version: 1.0.0
servers:
  - url: https://api.dinnerdonebetter.dev
tags:
  - name: recipes
    description: Recipe-oriented routes
paths:
  /users/login:
    post:
      summary: Logs in and returns the authentication cookie
      requestBody:
        required: true
        description: A JSON object containing the login and password.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
      security: []
      responses:
        '200':
          description: >
            Successfully authenticated.
          headers:
            Set-Cookie:
              schema:
                type: string
                examples:
                  - ddb_api_cookie=abcde12345; Path=/; HttpOnly
  /api/v1/recipes:
    get:
      tags:
        - recipes
      summary: Add a new pet
      security:
        - oAuth2:
        - cookieAuth:
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: createdBefore
          schema:
            type: string
        - in: query
          name: createdAfter
          schema:
            type: string
        - in: query
          name: updatedBefore
          schema:
            type: string
        - in: query
          name: updatedAfter
          schema:
            type: string
        - in: query
          name: includeArchived
          schema:
            type: string
            enum: [ '1', 't', 'T', 'true', 'TRUE', 'True', '0', 'f', 'F', 'false', 'FALSE', 'False' ]
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [ 'asc', 'desc' ]
      responses:
        200:
          description: successful retrieval
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/APIResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Recipe'
        400:
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
        401:
          description: unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
        500:
          description: internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIResponseWithError'
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: ddb_api_cookie
    oAuth2:
      type: oauth2
      description: This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)
      flows:
        authorizationCode:
          authorizationUrl: /oauth2/authorize
  schemas:
    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        filteredCount:
          type: integer
        totalCount:
          type: integer
    ResponseDetails:
      type: object
      properties:
        currentHouseholdID:
          type: string
        traceID:
          type: string
    APIError:
      type: object
      properties:
        message:
          type: string
        code:
          type: string
    APIResponse:
      type: object
      properties:
        details:
          $ref: '#/components/schemas/ResponseDetails'
    APIResponseWithPagination:
      type: object
      properties:
        details:
          $ref: '#/components/schemas/ResponseDetails'
        pagination:
          $ref: '#/components/schemas/Pagination'
    APIResponseWithError:
      type: object
      properties:
        details:
          $ref: '#/components/schemas/ResponseDetails'
        error:
          $ref: '#/components/schemas/APIError'
    UserLoginRequest:
      type: object
      properties:
        username:
          type: string
          examples:
            - "chefmaster"
        password:
          type: string
          examples:
            - "hunter2"
        totpToken:
          type: string
          examples:
            - "123456"
    Recipe:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        portionName:
          type: string
        pluralPortionName:
          type:
            string