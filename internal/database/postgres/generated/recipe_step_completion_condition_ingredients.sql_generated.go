// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: recipe_step_completion_condition_ingredients.sql

package generated

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const createRecipeStepCompletionConditionIngredient = `-- name: CreateRecipeStepCompletionConditionIngredient :exec

INSERT INTO recipe_step_completion_condition_ingredients (
	id,
	belongs_to_recipe_step_completion_condition,
	recipe_step_ingredient
) VALUES (
	$1,
	$2,
	$3
)
`

type CreateRecipeStepCompletionConditionIngredientParams struct {
	ID                                     string
	BelongsToRecipeStepCompletionCondition string
	RecipeStepIngredient                   string
}

func (q *Queries) CreateRecipeStepCompletionConditionIngredient(ctx context.Context, db DBTX, arg *CreateRecipeStepCompletionConditionIngredientParams) error {
	_, err := db.ExecContext(ctx, createRecipeStepCompletionConditionIngredient, arg.ID, arg.BelongsToRecipeStepCompletionCondition, arg.RecipeStepIngredient)
	return err
}

const getAllRecipeStepCompletionConditionIngredientsForRecipeCompletionIDs = `-- name: GetAllRecipeStepCompletionConditionIngredientsForRecipeCompletionIDs :many

SELECT
	recipe_step_completion_condition_ingredients.id as recipe_step_completion_condition_ingredient_id,
	recipe_step_completion_condition_ingredients.belongs_to_recipe_step_completion_condition as recipe_step_completion_condition_ingredient_belongs_to_recipe_step_completion_condition,
	recipe_step_completion_condition_ingredients.recipe_step_ingredient as recipe_step_completion_condition_ingredient_recipe_step_ingredient,
	recipe_step_completion_condition_ingredients.created_at as recipe_step_completion_condition_ingredient_created_at,
	recipe_step_completion_condition_ingredients.last_updated_at as recipe_step_completion_condition_ingredient_last_updated_at,
	recipe_step_completion_condition_ingredients.archived_at as recipe_step_completion_condition_ingredient_archived_at,
	valid_ingredient_states.id as valid_ingredient_state_id,
	valid_ingredient_states.name as valid_ingredient_state_name,
	valid_ingredient_states.past_tense as valid_ingredient_state_past_tense,
	valid_ingredient_states.slug as valid_ingredient_state_slug,
	valid_ingredient_states.description as valid_ingredient_state_description,
	valid_ingredient_states.icon_path as valid_ingredient_state_icon_path,
	valid_ingredient_states.attribute_type as valid_ingredient_state_attribute_type,
	valid_ingredient_states.last_indexed_at as valid_ingredient_state_last_indexed_at,
	valid_ingredient_states.created_at as valid_ingredient_state_created_at,
	valid_ingredient_states.last_updated_at as valid_ingredient_state_last_updated_at,
	valid_ingredient_states.archived_at as valid_ingredient_state_archived_at
FROM recipe_step_completion_condition_ingredients
	JOIN recipe_step_completion_conditions ON recipe_step_completion_condition_ingredients.belongs_to_recipe_step_completion_condition = recipe_step_completion_conditions.id
	JOIN valid_ingredient_states ON recipe_step_completion_conditions.ingredient_state = valid_ingredient_states.id
WHERE recipe_step_completion_conditions.archived_at IS NULL
	AND recipe_step_completion_condition_ingredients.archived_at IS NULL
	AND recipe_step_completion_condition_ingredients.belongs_to_recipe_step_completion_condition = ANY($1::text[])
	AND valid_ingredient_states.archived_at IS NULL
`

type GetAllRecipeStepCompletionConditionIngredientsForRecipeCompletionIDsRow struct {
	RecipeStepCompletionConditionIngredientID                string
	RecipeStepCompletionConditionIngredientBelongsToRecipeS  string
	RecipeStepCompletionConditionIngredientRecipeStepIngredi string
	RecipeStepCompletionConditionIngredientCreatedAt         time.Time
	RecipeStepCompletionConditionIngredientLastUpdatedAt     sql.NullTime
	RecipeStepCompletionConditionIngredientArchivedAt        sql.NullTime
	ValidIngredientStateID                                   string
	ValidIngredientStateName                                 string
	ValidIngredientStatePastTense                            string
	ValidIngredientStateSlug                                 string
	ValidIngredientStateDescription                          string
	ValidIngredientStateIconPath                             string
	ValidIngredientStateAttributeType                        IngredientAttributeType
	ValidIngredientStateLastIndexedAt                        sql.NullTime
	ValidIngredientStateCreatedAt                            time.Time
	ValidIngredientStateLastUpdatedAt                        sql.NullTime
	ValidIngredientStateArchivedAt                           sql.NullTime
}

func (q *Queries) GetAllRecipeStepCompletionConditionIngredientsForRecipeCompletionIDs(ctx context.Context, db DBTX, ids []string) ([]*GetAllRecipeStepCompletionConditionIngredientsForRecipeCompletionIDsRow, error) {
	rows, err := db.QueryContext(ctx, getAllRecipeStepCompletionConditionIngredientsForRecipeCompletionIDs, pq.Array(ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetAllRecipeStepCompletionConditionIngredientsForRecipeCompletionIDsRow{}
	for rows.Next() {
		var i GetAllRecipeStepCompletionConditionIngredientsForRecipeCompletionIDsRow
		if err := rows.Scan(
			&i.RecipeStepCompletionConditionIngredientID,
			&i.RecipeStepCompletionConditionIngredientBelongsToRecipeS,
			&i.RecipeStepCompletionConditionIngredientRecipeStepIngredi,
			&i.RecipeStepCompletionConditionIngredientCreatedAt,
			&i.RecipeStepCompletionConditionIngredientLastUpdatedAt,
			&i.RecipeStepCompletionConditionIngredientArchivedAt,
			&i.ValidIngredientStateID,
			&i.ValidIngredientStateName,
			&i.ValidIngredientStatePastTense,
			&i.ValidIngredientStateSlug,
			&i.ValidIngredientStateDescription,
			&i.ValidIngredientStateIconPath,
			&i.ValidIngredientStateAttributeType,
			&i.ValidIngredientStateLastIndexedAt,
			&i.ValidIngredientStateCreatedAt,
			&i.ValidIngredientStateLastUpdatedAt,
			&i.ValidIngredientStateArchivedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
