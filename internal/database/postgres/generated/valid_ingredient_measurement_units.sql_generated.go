// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: valid_ingredient_measurement_units.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const archiveValidIngredientMeasurementUnit = `-- name: ArchiveValidIngredientMeasurementUnit :execrows

UPDATE valid_ingredient_measurement_units SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1
`

func (q *Queries) ArchiveValidIngredientMeasurementUnit(ctx context.Context, db DBTX, id string) (int64, error) {
	result, err := db.ExecContext(ctx, archiveValidIngredientMeasurementUnit, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const checkValidIngredientMeasurementUnitExistence = `-- name: CheckValidIngredientMeasurementUnitExistence :one

SELECT EXISTS (
	SELECT valid_ingredient_measurement_units.id
	FROM valid_ingredient_measurement_units
	WHERE valid_ingredient_measurement_units.archived_at IS NULL
		AND valid_ingredient_measurement_units.id = $1
)
`

func (q *Queries) CheckValidIngredientMeasurementUnitExistence(ctx context.Context, db DBTX, id string) (bool, error) {
	row := db.QueryRowContext(ctx, checkValidIngredientMeasurementUnitExistence, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createValidIngredientMeasurementUnit = `-- name: CreateValidIngredientMeasurementUnit :exec

INSERT INTO valid_ingredient_measurement_units (
	id,
	notes,
	valid_measurement_unit_id,
	valid_ingredient_id,
	minimum_allowable_quantity,
	maximum_allowable_quantity
) VALUES (
	$1,
	$2,
	$3,
	$4,
	$5,
	$6
)
`

type CreateValidIngredientMeasurementUnitParams struct {
	ID                       string
	Notes                    string
	ValidMeasurementUnitID   string
	ValidIngredientID        string
	MinimumAllowableQuantity string
	MaximumAllowableQuantity sql.NullString
}

func (q *Queries) CreateValidIngredientMeasurementUnit(ctx context.Context, db DBTX, arg *CreateValidIngredientMeasurementUnitParams) error {
	_, err := db.ExecContext(ctx, createValidIngredientMeasurementUnit,
		arg.ID,
		arg.Notes,
		arg.ValidMeasurementUnitID,
		arg.ValidIngredientID,
		arg.MinimumAllowableQuantity,
		arg.MaximumAllowableQuantity,
	)
	return err
}

const getValidIngredientMeasurementUnit = `-- name: GetValidIngredientMeasurementUnit :one

SELECT
	valid_ingredient_measurement_units.id as valid_ingredient_measurement_unit_id,
	valid_ingredient_measurement_units.notes as valid_ingredient_measurement_unit_notes,
	valid_measurement_units.id as valid_measurement_unit_id,
	valid_measurement_units.name as valid_measurement_unit_name,
	valid_measurement_units.description as valid_measurement_unit_description,
	valid_measurement_units.volumetric as valid_measurement_unit_volumetric,
	valid_measurement_units.icon_path as valid_measurement_unit_icon_path,
	valid_measurement_units.universal as valid_measurement_unit_universal,
	valid_measurement_units.metric as valid_measurement_unit_metric,
	valid_measurement_units.imperial as valid_measurement_unit_imperial,
	valid_measurement_units.slug as valid_measurement_unit_slug,
	valid_measurement_units.plural_name as valid_measurement_unit_plural_name,
	valid_measurement_units.last_indexed_at as valid_measurement_unit_last_indexed_at,
	valid_measurement_units.created_at as valid_measurement_unit_created_at,
	valid_measurement_units.last_updated_at as valid_measurement_unit_last_updated_at,
	valid_measurement_units.archived_at as valid_measurement_unit_archived_at,
	valid_ingredients.id as valid_ingredient_id,
	valid_ingredients.name as valid_ingredient_name,
	valid_ingredients.description as valid_ingredient_description,
	valid_ingredients.warning as valid_ingredient_warning,
	valid_ingredients.contains_egg as valid_ingredient_contains_egg,
	valid_ingredients.contains_dairy as valid_ingredient_contains_dairy,
	valid_ingredients.contains_peanut as valid_ingredient_contains_peanut,
	valid_ingredients.contains_tree_nut as valid_ingredient_contains_tree_nut,
	valid_ingredients.contains_soy as valid_ingredient_contains_soy,
	valid_ingredients.contains_wheat as valid_ingredient_contains_wheat,
	valid_ingredients.contains_shellfish as valid_ingredient_contains_shellfish,
	valid_ingredients.contains_sesame as valid_ingredient_contains_sesame,
	valid_ingredients.contains_fish as valid_ingredient_contains_fish,
	valid_ingredients.contains_gluten as valid_ingredient_contains_gluten,
	valid_ingredients.animal_flesh as valid_ingredient_animal_flesh,
	valid_ingredients.volumetric as valid_ingredient_volumetric,
	valid_ingredients.is_liquid as valid_ingredient_is_liquid,
	valid_ingredients.icon_path as valid_ingredient_icon_path,
	valid_ingredients.animal_derived as valid_ingredient_animal_derived,
	valid_ingredients.plural_name as valid_ingredient_plural_name,
	valid_ingredients.restrict_to_preparations as valid_ingredient_restrict_to_preparations,
	valid_ingredients.minimum_ideal_storage_temperature_in_celsius as valid_ingredient_minimum_ideal_storage_temperature_in_celsius,
	valid_ingredients.maximum_ideal_storage_temperature_in_celsius as valid_ingredient_maximum_ideal_storage_temperature_in_celsius,
	valid_ingredients.storage_instructions as valid_ingredient_storage_instructions,
	valid_ingredients.slug as valid_ingredient_slug,
	valid_ingredients.contains_alcohol as valid_ingredient_contains_alcohol,
	valid_ingredients.shopping_suggestions as valid_ingredient_shopping_suggestions,
	valid_ingredients.is_starch as valid_ingredient_is_starch,
	valid_ingredients.is_protein as valid_ingredient_is_protein,
	valid_ingredients.is_grain as valid_ingredient_is_grain,
	valid_ingredients.is_fruit as valid_ingredient_is_fruit,
	valid_ingredients.is_salt as valid_ingredient_is_salt,
	valid_ingredients.is_fat as valid_ingredient_is_fat,
	valid_ingredients.is_acid as valid_ingredient_is_acid,
	valid_ingredients.is_heat as valid_ingredient_is_heat,
	valid_ingredients.last_indexed_at as valid_ingredient_last_indexed_at,
	valid_ingredients.created_at as valid_ingredient_created_at,
	valid_ingredients.last_updated_at as valid_ingredient_last_updated_at,
	valid_ingredients.archived_at as valid_ingredient_archived_at,
	valid_ingredient_measurement_units.minimum_allowable_quantity as valid_ingredient_measurement_unit_minimum_allowable_quantity,
	valid_ingredient_measurement_units.maximum_allowable_quantity as valid_ingredient_measurement_unit_maximum_allowable_quantity,
	valid_ingredient_measurement_units.created_at as valid_ingredient_measurement_unit_created_at,
	valid_ingredient_measurement_units.last_updated_at as valid_ingredient_measurement_unit_last_updated_at,
	valid_ingredient_measurement_units.archived_at as valid_ingredient_measurement_unit_archived_at
FROM valid_ingredient_measurement_units
	JOIN valid_measurement_units ON valid_ingredient_measurement_units.valid_measurement_unit_id = valid_measurement_units.id
	JOIN valid_ingredients ON valid_ingredient_measurement_units.valid_ingredient_id = valid_ingredients.id
WHERE
	valid_ingredient_measurement_units.archived_at IS NULL
	AND valid_measurement_units.archived_at IS NULL
	AND valid_ingredients.archived_at IS NULL
	AND valid_ingredient_measurement_units.id = $1
`

type GetValidIngredientMeasurementUnitRow struct {
	ValidMeasurementUnitCreatedAt                          time.Time
	ValidIngredientCreatedAt                               time.Time
	ValidIngredientMeasurementUnitCreatedAt                time.Time
	ValidMeasurementUnitArchivedAt                         sql.NullTime
	ValidMeasurementUnitLastIndexedAt                      sql.NullTime
	ValidIngredientLastIndexedAt                           sql.NullTime
	ValidIngredientLastUpdatedAt                           sql.NullTime
	ValidIngredientArchivedAt                              sql.NullTime
	ValidIngredientMeasurementUnitLastUpdatedAt            sql.NullTime
	ValidIngredientMeasurementUnitArchivedAt               sql.NullTime
	ValidMeasurementUnitLastUpdatedAt                      sql.NullTime
	ValidMeasurementUnitSlug                               string
	ValidMeasurementUnitDescription                        string
	ValidIngredientName                                    string
	ValidIngredientDescription                             string
	ValidIngredientWarning                                 string
	ValidIngredientIconPath                                string
	ValidMeasurementUnitPluralName                         string
	ValidIngredientPluralName                              string
	ValidMeasurementUnitIconPath                           string
	ValidIngredientMeasurementUnitID                       string
	ValidIngredientMeasurementUnitMinimumAllowableQuantity string
	ValidIngredientID                                      string
	ValidMeasurementUnitName                               string
	ValidMeasurementUnitID                                 string
	ValidIngredientMeasurementUnitNotes                    string
	ValidIngredientShoppingSuggestions                     string
	ValidIngredientSlug                                    string
	ValidIngredientStorageInstructions                     string
	ValidIngredientMaximumIdealStorageTemperatureInCelsius sql.NullString
	ValidIngredientMeasurementUnitMaximumAllowableQuantity sql.NullString
	ValidIngredientMinimumIdealStorageTemperatureInCelsius sql.NullString
	ValidIngredientIsLiquid                                sql.NullBool
	ValidMeasurementUnitVolumetric                         sql.NullBool
	ValidIngredientAnimalFlesh                             bool
	ValidIngredientAnimalDerived                           bool
	ValidIngredientRestrictToPreparations                  bool
	ValidIngredientVolumetric                              bool
	ValidIngredientContainsGluten                          bool
	ValidIngredientContainsFish                            bool
	ValidIngredientContainsSesame                          bool
	ValidIngredientContainsAlcohol                         bool
	ValidIngredientContainsShellfish                       bool
	ValidIngredientIsStarch                                bool
	ValidIngredientIsProtein                               bool
	ValidIngredientIsGrain                                 bool
	ValidIngredientIsFruit                                 bool
	ValidIngredientIsSalt                                  bool
	ValidIngredientIsFat                                   bool
	ValidIngredientIsAcid                                  bool
	ValidIngredientIsHeat                                  bool
	ValidIngredientContainsWheat                           bool
	ValidIngredientContainsSoy                             bool
	ValidIngredientContainsTreeNut                         bool
	ValidIngredientContainsPeanut                          bool
	ValidIngredientContainsDairy                           bool
	ValidIngredientContainsEgg                             bool
	ValidMeasurementUnitImperial                           bool
	ValidMeasurementUnitMetric                             bool
	ValidMeasurementUnitUniversal                          bool
}

func (q *Queries) GetValidIngredientMeasurementUnit(ctx context.Context, db DBTX, id string) (*GetValidIngredientMeasurementUnitRow, error) {
	row := db.QueryRowContext(ctx, getValidIngredientMeasurementUnit, id)
	var i GetValidIngredientMeasurementUnitRow
	err := row.Scan(
		&i.ValidIngredientMeasurementUnitID,
		&i.ValidIngredientMeasurementUnitNotes,
		&i.ValidMeasurementUnitID,
		&i.ValidMeasurementUnitName,
		&i.ValidMeasurementUnitDescription,
		&i.ValidMeasurementUnitVolumetric,
		&i.ValidMeasurementUnitIconPath,
		&i.ValidMeasurementUnitUniversal,
		&i.ValidMeasurementUnitMetric,
		&i.ValidMeasurementUnitImperial,
		&i.ValidMeasurementUnitSlug,
		&i.ValidMeasurementUnitPluralName,
		&i.ValidMeasurementUnitLastIndexedAt,
		&i.ValidMeasurementUnitCreatedAt,
		&i.ValidMeasurementUnitLastUpdatedAt,
		&i.ValidMeasurementUnitArchivedAt,
		&i.ValidIngredientID,
		&i.ValidIngredientName,
		&i.ValidIngredientDescription,
		&i.ValidIngredientWarning,
		&i.ValidIngredientContainsEgg,
		&i.ValidIngredientContainsDairy,
		&i.ValidIngredientContainsPeanut,
		&i.ValidIngredientContainsTreeNut,
		&i.ValidIngredientContainsSoy,
		&i.ValidIngredientContainsWheat,
		&i.ValidIngredientContainsShellfish,
		&i.ValidIngredientContainsSesame,
		&i.ValidIngredientContainsFish,
		&i.ValidIngredientContainsGluten,
		&i.ValidIngredientAnimalFlesh,
		&i.ValidIngredientVolumetric,
		&i.ValidIngredientIsLiquid,
		&i.ValidIngredientIconPath,
		&i.ValidIngredientAnimalDerived,
		&i.ValidIngredientPluralName,
		&i.ValidIngredientRestrictToPreparations,
		&i.ValidIngredientMinimumIdealStorageTemperatureInCelsius,
		&i.ValidIngredientMaximumIdealStorageTemperatureInCelsius,
		&i.ValidIngredientStorageInstructions,
		&i.ValidIngredientSlug,
		&i.ValidIngredientContainsAlcohol,
		&i.ValidIngredientShoppingSuggestions,
		&i.ValidIngredientIsStarch,
		&i.ValidIngredientIsProtein,
		&i.ValidIngredientIsGrain,
		&i.ValidIngredientIsFruit,
		&i.ValidIngredientIsSalt,
		&i.ValidIngredientIsFat,
		&i.ValidIngredientIsAcid,
		&i.ValidIngredientIsHeat,
		&i.ValidIngredientLastIndexedAt,
		&i.ValidIngredientCreatedAt,
		&i.ValidIngredientLastUpdatedAt,
		&i.ValidIngredientArchivedAt,
		&i.ValidIngredientMeasurementUnitMinimumAllowableQuantity,
		&i.ValidIngredientMeasurementUnitMaximumAllowableQuantity,
		&i.ValidIngredientMeasurementUnitCreatedAt,
		&i.ValidIngredientMeasurementUnitLastUpdatedAt,
		&i.ValidIngredientMeasurementUnitArchivedAt,
	)
	return &i, err
}

const getValidIngredientMeasurementUnits = `-- name: GetValidIngredientMeasurementUnits :many

SELECT
	valid_ingredient_measurement_units.id as valid_ingredient_measurement_unit_id,
	valid_ingredient_measurement_units.notes as valid_ingredient_measurement_unit_notes,
	valid_measurement_units.id as valid_measurement_unit_id,
	valid_measurement_units.name as valid_measurement_unit_name,
	valid_measurement_units.description as valid_measurement_unit_description,
	valid_measurement_units.volumetric as valid_measurement_unit_volumetric,
	valid_measurement_units.icon_path as valid_measurement_unit_icon_path,
	valid_measurement_units.universal as valid_measurement_unit_universal,
	valid_measurement_units.metric as valid_measurement_unit_metric,
	valid_measurement_units.imperial as valid_measurement_unit_imperial,
	valid_measurement_units.slug as valid_measurement_unit_slug,
	valid_measurement_units.plural_name as valid_measurement_unit_plural_name,
	valid_measurement_units.last_indexed_at as valid_measurement_unit_last_indexed_at,
	valid_measurement_units.created_at as valid_measurement_unit_created_at,
	valid_measurement_units.last_updated_at as valid_measurement_unit_last_updated_at,
	valid_measurement_units.archived_at as valid_measurement_unit_archived_at,
	valid_ingredients.id as valid_ingredient_id,
	valid_ingredients.name as valid_ingredient_name,
	valid_ingredients.description as valid_ingredient_description,
	valid_ingredients.warning as valid_ingredient_warning,
	valid_ingredients.contains_egg as valid_ingredient_contains_egg,
	valid_ingredients.contains_dairy as valid_ingredient_contains_dairy,
	valid_ingredients.contains_peanut as valid_ingredient_contains_peanut,
	valid_ingredients.contains_tree_nut as valid_ingredient_contains_tree_nut,
	valid_ingredients.contains_soy as valid_ingredient_contains_soy,
	valid_ingredients.contains_wheat as valid_ingredient_contains_wheat,
	valid_ingredients.contains_shellfish as valid_ingredient_contains_shellfish,
	valid_ingredients.contains_sesame as valid_ingredient_contains_sesame,
	valid_ingredients.contains_fish as valid_ingredient_contains_fish,
	valid_ingredients.contains_gluten as valid_ingredient_contains_gluten,
	valid_ingredients.animal_flesh as valid_ingredient_animal_flesh,
	valid_ingredients.volumetric as valid_ingredient_volumetric,
	valid_ingredients.is_liquid as valid_ingredient_is_liquid,
	valid_ingredients.icon_path as valid_ingredient_icon_path,
	valid_ingredients.animal_derived as valid_ingredient_animal_derived,
	valid_ingredients.plural_name as valid_ingredient_plural_name,
	valid_ingredients.restrict_to_preparations as valid_ingredient_restrict_to_preparations,
	valid_ingredients.minimum_ideal_storage_temperature_in_celsius as valid_ingredient_minimum_ideal_storage_temperature_in_celsius,
	valid_ingredients.maximum_ideal_storage_temperature_in_celsius as valid_ingredient_maximum_ideal_storage_temperature_in_celsius,
	valid_ingredients.storage_instructions as valid_ingredient_storage_instructions,
	valid_ingredients.slug as valid_ingredient_slug,
	valid_ingredients.contains_alcohol as valid_ingredient_contains_alcohol,
	valid_ingredients.shopping_suggestions as valid_ingredient_shopping_suggestions,
	valid_ingredients.is_starch as valid_ingredient_is_starch,
	valid_ingredients.is_protein as valid_ingredient_is_protein,
	valid_ingredients.is_grain as valid_ingredient_is_grain,
	valid_ingredients.is_fruit as valid_ingredient_is_fruit,
	valid_ingredients.is_salt as valid_ingredient_is_salt,
	valid_ingredients.is_fat as valid_ingredient_is_fat,
	valid_ingredients.is_acid as valid_ingredient_is_acid,
	valid_ingredients.is_heat as valid_ingredient_is_heat,
	valid_ingredients.last_indexed_at as valid_ingredient_last_indexed_at,
	valid_ingredients.created_at as valid_ingredient_created_at,
	valid_ingredients.last_updated_at as valid_ingredient_last_updated_at,
	valid_ingredients.archived_at as valid_ingredient_archived_at,
	valid_ingredient_measurement_units.minimum_allowable_quantity as valid_ingredient_measurement_unit_minimum_allowable_quantity,
	valid_ingredient_measurement_units.maximum_allowable_quantity as valid_ingredient_measurement_unit_maximum_allowable_quantity,
	valid_ingredient_measurement_units.created_at as valid_ingredient_measurement_unit_created_at,
	valid_ingredient_measurement_units.last_updated_at as valid_ingredient_measurement_unit_last_updated_at,
	valid_ingredient_measurement_units.archived_at as valid_ingredient_measurement_unit_archived_at,
	(
		SELECT COUNT(valid_ingredient_measurement_units.id)
		FROM valid_ingredient_measurement_units
		WHERE valid_ingredient_measurement_units.archived_at IS NULL
			AND valid_ingredient_measurement_units.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
			AND valid_ingredient_measurement_units.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
			AND (
				valid_ingredient_measurement_units.last_updated_at IS NULL
				OR valid_ingredient_measurement_units.last_updated_at > COALESCE($3, (SELECT NOW() - '999 years'::INTERVAL))
			)
			AND (
				valid_ingredient_measurement_units.last_updated_at IS NULL
				OR valid_ingredient_measurement_units.last_updated_at < COALESCE($4, (SELECT NOW() + '999 years'::INTERVAL))
			)
	) AS filtered_count,
	(
		SELECT COUNT(valid_ingredient_measurement_units.id)
		FROM valid_ingredient_measurement_units
		WHERE valid_ingredient_measurement_units.archived_at IS NULL
	) AS total_count
FROM valid_ingredient_measurement_units
	JOIN valid_measurement_units ON valid_ingredient_measurement_units.valid_measurement_unit_id = valid_measurement_units.id
	JOIN valid_ingredients ON valid_ingredient_measurement_units.valid_ingredient_id = valid_ingredients.id
WHERE
	valid_ingredient_measurement_units.archived_at IS NULL
	AND valid_measurement_units.archived_at IS NULL
	AND valid_ingredients.archived_at IS NULL
	AND valid_ingredient_measurement_units.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
	AND valid_ingredient_measurement_units.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
	AND (
		valid_ingredient_measurement_units.last_updated_at IS NULL
		OR valid_ingredient_measurement_units.last_updated_at > COALESCE($4, (SELECT NOW() - '999 years'::INTERVAL))
	)
	AND (
		valid_ingredient_measurement_units.last_updated_at IS NULL
		OR valid_ingredient_measurement_units.last_updated_at < COALESCE($3, (SELECT NOW() + '999 years'::INTERVAL))
	)
LIMIT $6
OFFSET $5
`

type GetValidIngredientMeasurementUnitsParams struct {
	CreatedAfter  sql.NullTime
	CreatedBefore sql.NullTime
	UpdatedBefore sql.NullTime
	UpdatedAfter  sql.NullTime
	QueryOffset   sql.NullInt32
	QueryLimit    sql.NullInt32
}

type GetValidIngredientMeasurementUnitsRow struct {
	ValidMeasurementUnitCreatedAt                          time.Time
	ValidIngredientCreatedAt                               time.Time
	ValidIngredientMeasurementUnitCreatedAt                time.Time
	ValidMeasurementUnitArchivedAt                         sql.NullTime
	ValidMeasurementUnitLastIndexedAt                      sql.NullTime
	ValidIngredientLastIndexedAt                           sql.NullTime
	ValidIngredientLastUpdatedAt                           sql.NullTime
	ValidIngredientArchivedAt                              sql.NullTime
	ValidIngredientMeasurementUnitLastUpdatedAt            sql.NullTime
	ValidIngredientMeasurementUnitArchivedAt               sql.NullTime
	ValidMeasurementUnitLastUpdatedAt                      sql.NullTime
	ValidMeasurementUnitPluralName                         string
	ValidIngredientMeasurementUnitID                       string
	ValidIngredientName                                    string
	ValidIngredientDescription                             string
	ValidIngredientWarning                                 string
	ValidIngredientPluralName                              string
	ValidIngredientIconPath                                string
	ValidIngredientStorageInstructions                     string
	ValidIngredientID                                      string
	ValidMeasurementUnitSlug                               string
	ValidMeasurementUnitIconPath                           string
	ValidIngredientSlug                                    string
	ValidIngredientMeasurementUnitMinimumAllowableQuantity string
	ValidMeasurementUnitDescription                        string
	ValidMeasurementUnitName                               string
	ValidMeasurementUnitID                                 string
	ValidIngredientMeasurementUnitNotes                    string
	ValidIngredientShoppingSuggestions                     string
	ValidIngredientMeasurementUnitMaximumAllowableQuantity sql.NullString
	ValidIngredientMinimumIdealStorageTemperatureInCelsius sql.NullString
	ValidIngredientMaximumIdealStorageTemperatureInCelsius sql.NullString
	FilteredCount                                          int64
	TotalCount                                             int64
	ValidIngredientIsLiquid                                sql.NullBool
	ValidMeasurementUnitVolumetric                         sql.NullBool
	ValidIngredientAnimalFlesh                             bool
	ValidIngredientRestrictToPreparations                  bool
	ValidIngredientAnimalDerived                           bool
	ValidIngredientVolumetric                              bool
	ValidIngredientContainsGluten                          bool
	ValidIngredientContainsAlcohol                         bool
	ValidIngredientContainsFish                            bool
	ValidIngredientIsStarch                                bool
	ValidIngredientIsProtein                               bool
	ValidIngredientIsGrain                                 bool
	ValidIngredientIsFruit                                 bool
	ValidIngredientIsSalt                                  bool
	ValidIngredientIsFat                                   bool
	ValidIngredientIsAcid                                  bool
	ValidIngredientIsHeat                                  bool
	ValidIngredientContainsSesame                          bool
	ValidIngredientContainsShellfish                       bool
	ValidIngredientContainsWheat                           bool
	ValidIngredientContainsSoy                             bool
	ValidIngredientContainsTreeNut                         bool
	ValidIngredientContainsPeanut                          bool
	ValidIngredientContainsDairy                           bool
	ValidIngredientContainsEgg                             bool
	ValidMeasurementUnitImperial                           bool
	ValidMeasurementUnitMetric                             bool
	ValidMeasurementUnitUniversal                          bool
}

func (q *Queries) GetValidIngredientMeasurementUnits(ctx context.Context, db DBTX, arg *GetValidIngredientMeasurementUnitsParams) ([]*GetValidIngredientMeasurementUnitsRow, error) {
	rows, err := db.QueryContext(ctx, getValidIngredientMeasurementUnits,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedBefore,
		arg.UpdatedAfter,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidIngredientMeasurementUnitsRow{}
	for rows.Next() {
		var i GetValidIngredientMeasurementUnitsRow
		if err := rows.Scan(
			&i.ValidIngredientMeasurementUnitID,
			&i.ValidIngredientMeasurementUnitNotes,
			&i.ValidMeasurementUnitID,
			&i.ValidMeasurementUnitName,
			&i.ValidMeasurementUnitDescription,
			&i.ValidMeasurementUnitVolumetric,
			&i.ValidMeasurementUnitIconPath,
			&i.ValidMeasurementUnitUniversal,
			&i.ValidMeasurementUnitMetric,
			&i.ValidMeasurementUnitImperial,
			&i.ValidMeasurementUnitSlug,
			&i.ValidMeasurementUnitPluralName,
			&i.ValidMeasurementUnitLastIndexedAt,
			&i.ValidMeasurementUnitCreatedAt,
			&i.ValidMeasurementUnitLastUpdatedAt,
			&i.ValidMeasurementUnitArchivedAt,
			&i.ValidIngredientID,
			&i.ValidIngredientName,
			&i.ValidIngredientDescription,
			&i.ValidIngredientWarning,
			&i.ValidIngredientContainsEgg,
			&i.ValidIngredientContainsDairy,
			&i.ValidIngredientContainsPeanut,
			&i.ValidIngredientContainsTreeNut,
			&i.ValidIngredientContainsSoy,
			&i.ValidIngredientContainsWheat,
			&i.ValidIngredientContainsShellfish,
			&i.ValidIngredientContainsSesame,
			&i.ValidIngredientContainsFish,
			&i.ValidIngredientContainsGluten,
			&i.ValidIngredientAnimalFlesh,
			&i.ValidIngredientVolumetric,
			&i.ValidIngredientIsLiquid,
			&i.ValidIngredientIconPath,
			&i.ValidIngredientAnimalDerived,
			&i.ValidIngredientPluralName,
			&i.ValidIngredientRestrictToPreparations,
			&i.ValidIngredientMinimumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientMaximumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientStorageInstructions,
			&i.ValidIngredientSlug,
			&i.ValidIngredientContainsAlcohol,
			&i.ValidIngredientShoppingSuggestions,
			&i.ValidIngredientIsStarch,
			&i.ValidIngredientIsProtein,
			&i.ValidIngredientIsGrain,
			&i.ValidIngredientIsFruit,
			&i.ValidIngredientIsSalt,
			&i.ValidIngredientIsFat,
			&i.ValidIngredientIsAcid,
			&i.ValidIngredientIsHeat,
			&i.ValidIngredientLastIndexedAt,
			&i.ValidIngredientCreatedAt,
			&i.ValidIngredientLastUpdatedAt,
			&i.ValidIngredientArchivedAt,
			&i.ValidIngredientMeasurementUnitMinimumAllowableQuantity,
			&i.ValidIngredientMeasurementUnitMaximumAllowableQuantity,
			&i.ValidIngredientMeasurementUnitCreatedAt,
			&i.ValidIngredientMeasurementUnitLastUpdatedAt,
			&i.ValidIngredientMeasurementUnitArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidIngredientMeasurementUnitsForIngredient = `-- name: GetValidIngredientMeasurementUnitsForIngredient :many

SELECT
	valid_ingredient_measurement_units.id as valid_ingredient_measurement_unit_id,
	valid_ingredient_measurement_units.notes as valid_ingredient_measurement_unit_notes,
	valid_measurement_units.id as valid_measurement_unit_id,
	valid_measurement_units.name as valid_measurement_unit_name,
	valid_measurement_units.description as valid_measurement_unit_description,
	valid_measurement_units.volumetric as valid_measurement_unit_volumetric,
	valid_measurement_units.icon_path as valid_measurement_unit_icon_path,
	valid_measurement_units.universal as valid_measurement_unit_universal,
	valid_measurement_units.metric as valid_measurement_unit_metric,
	valid_measurement_units.imperial as valid_measurement_unit_imperial,
	valid_measurement_units.slug as valid_measurement_unit_slug,
	valid_measurement_units.plural_name as valid_measurement_unit_plural_name,
	valid_measurement_units.last_indexed_at as valid_measurement_unit_last_indexed_at,
	valid_measurement_units.created_at as valid_measurement_unit_created_at,
	valid_measurement_units.last_updated_at as valid_measurement_unit_last_updated_at,
	valid_measurement_units.archived_at as valid_measurement_unit_archived_at,
	valid_ingredients.id as valid_ingredient_id,
	valid_ingredients.name as valid_ingredient_name,
	valid_ingredients.description as valid_ingredient_description,
	valid_ingredients.warning as valid_ingredient_warning,
	valid_ingredients.contains_egg as valid_ingredient_contains_egg,
	valid_ingredients.contains_dairy as valid_ingredient_contains_dairy,
	valid_ingredients.contains_peanut as valid_ingredient_contains_peanut,
	valid_ingredients.contains_tree_nut as valid_ingredient_contains_tree_nut,
	valid_ingredients.contains_soy as valid_ingredient_contains_soy,
	valid_ingredients.contains_wheat as valid_ingredient_contains_wheat,
	valid_ingredients.contains_shellfish as valid_ingredient_contains_shellfish,
	valid_ingredients.contains_sesame as valid_ingredient_contains_sesame,
	valid_ingredients.contains_fish as valid_ingredient_contains_fish,
	valid_ingredients.contains_gluten as valid_ingredient_contains_gluten,
	valid_ingredients.animal_flesh as valid_ingredient_animal_flesh,
	valid_ingredients.volumetric as valid_ingredient_volumetric,
	valid_ingredients.is_liquid as valid_ingredient_is_liquid,
	valid_ingredients.icon_path as valid_ingredient_icon_path,
	valid_ingredients.animal_derived as valid_ingredient_animal_derived,
	valid_ingredients.plural_name as valid_ingredient_plural_name,
	valid_ingredients.restrict_to_preparations as valid_ingredient_restrict_to_preparations,
	valid_ingredients.minimum_ideal_storage_temperature_in_celsius as valid_ingredient_minimum_ideal_storage_temperature_in_celsius,
	valid_ingredients.maximum_ideal_storage_temperature_in_celsius as valid_ingredient_maximum_ideal_storage_temperature_in_celsius,
	valid_ingredients.storage_instructions as valid_ingredient_storage_instructions,
	valid_ingredients.slug as valid_ingredient_slug,
	valid_ingredients.contains_alcohol as valid_ingredient_contains_alcohol,
	valid_ingredients.shopping_suggestions as valid_ingredient_shopping_suggestions,
	valid_ingredients.is_starch as valid_ingredient_is_starch,
	valid_ingredients.is_protein as valid_ingredient_is_protein,
	valid_ingredients.is_grain as valid_ingredient_is_grain,
	valid_ingredients.is_fruit as valid_ingredient_is_fruit,
	valid_ingredients.is_salt as valid_ingredient_is_salt,
	valid_ingredients.is_fat as valid_ingredient_is_fat,
	valid_ingredients.is_acid as valid_ingredient_is_acid,
	valid_ingredients.is_heat as valid_ingredient_is_heat,
	valid_ingredients.last_indexed_at as valid_ingredient_last_indexed_at,
	valid_ingredients.created_at as valid_ingredient_created_at,
	valid_ingredients.last_updated_at as valid_ingredient_last_updated_at,
	valid_ingredients.archived_at as valid_ingredient_archived_at,
	valid_ingredient_measurement_units.minimum_allowable_quantity as valid_ingredient_measurement_unit_minimum_allowable_quantity,
	valid_ingredient_measurement_units.maximum_allowable_quantity as valid_ingredient_measurement_unit_maximum_allowable_quantity,
	valid_ingredient_measurement_units.created_at as valid_ingredient_measurement_unit_created_at,
	valid_ingredient_measurement_units.last_updated_at as valid_ingredient_measurement_unit_last_updated_at,
	valid_ingredient_measurement_units.archived_at as valid_ingredient_measurement_unit_archived_at,
	(
		SELECT COUNT(valid_ingredient_measurement_units.id)
		FROM valid_ingredient_measurement_units
		WHERE valid_ingredient_measurement_units.archived_at IS NULL
			AND valid_ingredient_measurement_units.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
			AND valid_ingredient_measurement_units.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
			AND (
				valid_ingredient_measurement_units.last_updated_at IS NULL
				OR valid_ingredient_measurement_units.last_updated_at > COALESCE($3, (SELECT NOW() - '999 years'::INTERVAL))
			)
			AND (
				valid_ingredient_measurement_units.last_updated_at IS NULL
				OR valid_ingredient_measurement_units.last_updated_at < COALESCE($4, (SELECT NOW() + '999 years'::INTERVAL))
			)
	) AS filtered_count,
	(
		SELECT COUNT(valid_ingredient_measurement_units.id)
		FROM valid_ingredient_measurement_units
		WHERE valid_ingredient_measurement_units.archived_at IS NULL
	) AS total_count
FROM valid_ingredient_measurement_units
	JOIN valid_measurement_units ON valid_ingredient_measurement_units.valid_measurement_unit_id = valid_measurement_units.id
	JOIN valid_ingredients ON valid_ingredient_measurement_units.valid_ingredient_id = valid_ingredients.id
WHERE
	valid_ingredient_measurement_units.archived_at IS NULL
	AND valid_measurement_units.archived_at IS NULL
	AND valid_ingredients.archived_at IS NULL
	AND valid_ingredient_measurement_units.valid_ingredient_id = $5
	AND valid_ingredient_measurement_units.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
	AND valid_ingredient_measurement_units.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
	AND (
		valid_ingredient_measurement_units.last_updated_at IS NULL
		OR valid_ingredient_measurement_units.last_updated_at > COALESCE($4, (SELECT NOW() - '999 years'::INTERVAL))
	)
	AND (
		valid_ingredient_measurement_units.last_updated_at IS NULL
		OR valid_ingredient_measurement_units.last_updated_at < COALESCE($3, (SELECT NOW() + '999 years'::INTERVAL))
	)
LIMIT $7
OFFSET $6
`

type GetValidIngredientMeasurementUnitsForIngredientParams struct {
	CreatedAfter      sql.NullTime
	CreatedBefore     sql.NullTime
	UpdatedBefore     sql.NullTime
	UpdatedAfter      sql.NullTime
	ValidIngredientID string
	QueryOffset       sql.NullInt32
	QueryLimit        sql.NullInt32
}

type GetValidIngredientMeasurementUnitsForIngredientRow struct {
	ValidMeasurementUnitCreatedAt                          time.Time
	ValidIngredientCreatedAt                               time.Time
	ValidIngredientMeasurementUnitCreatedAt                time.Time
	ValidMeasurementUnitArchivedAt                         sql.NullTime
	ValidMeasurementUnitLastIndexedAt                      sql.NullTime
	ValidIngredientLastIndexedAt                           sql.NullTime
	ValidIngredientLastUpdatedAt                           sql.NullTime
	ValidIngredientArchivedAt                              sql.NullTime
	ValidIngredientMeasurementUnitLastUpdatedAt            sql.NullTime
	ValidIngredientMeasurementUnitArchivedAt               sql.NullTime
	ValidMeasurementUnitLastUpdatedAt                      sql.NullTime
	ValidMeasurementUnitPluralName                         string
	ValidIngredientMeasurementUnitID                       string
	ValidIngredientName                                    string
	ValidIngredientDescription                             string
	ValidIngredientWarning                                 string
	ValidIngredientPluralName                              string
	ValidIngredientIconPath                                string
	ValidIngredientStorageInstructions                     string
	ValidIngredientID                                      string
	ValidMeasurementUnitSlug                               string
	ValidMeasurementUnitIconPath                           string
	ValidIngredientSlug                                    string
	ValidIngredientMeasurementUnitMinimumAllowableQuantity string
	ValidMeasurementUnitDescription                        string
	ValidMeasurementUnitName                               string
	ValidMeasurementUnitID                                 string
	ValidIngredientMeasurementUnitNotes                    string
	ValidIngredientShoppingSuggestions                     string
	ValidIngredientMeasurementUnitMaximumAllowableQuantity sql.NullString
	ValidIngredientMinimumIdealStorageTemperatureInCelsius sql.NullString
	ValidIngredientMaximumIdealStorageTemperatureInCelsius sql.NullString
	FilteredCount                                          int64
	TotalCount                                             int64
	ValidIngredientIsLiquid                                sql.NullBool
	ValidMeasurementUnitVolumetric                         sql.NullBool
	ValidIngredientAnimalFlesh                             bool
	ValidIngredientRestrictToPreparations                  bool
	ValidIngredientAnimalDerived                           bool
	ValidIngredientVolumetric                              bool
	ValidIngredientContainsGluten                          bool
	ValidIngredientContainsAlcohol                         bool
	ValidIngredientContainsFish                            bool
	ValidIngredientIsStarch                                bool
	ValidIngredientIsProtein                               bool
	ValidIngredientIsGrain                                 bool
	ValidIngredientIsFruit                                 bool
	ValidIngredientIsSalt                                  bool
	ValidIngredientIsFat                                   bool
	ValidIngredientIsAcid                                  bool
	ValidIngredientIsHeat                                  bool
	ValidIngredientContainsSesame                          bool
	ValidIngredientContainsShellfish                       bool
	ValidIngredientContainsWheat                           bool
	ValidIngredientContainsSoy                             bool
	ValidIngredientContainsTreeNut                         bool
	ValidIngredientContainsPeanut                          bool
	ValidIngredientContainsDairy                           bool
	ValidIngredientContainsEgg                             bool
	ValidMeasurementUnitImperial                           bool
	ValidMeasurementUnitMetric                             bool
	ValidMeasurementUnitUniversal                          bool
}

func (q *Queries) GetValidIngredientMeasurementUnitsForIngredient(ctx context.Context, db DBTX, arg *GetValidIngredientMeasurementUnitsForIngredientParams) ([]*GetValidIngredientMeasurementUnitsForIngredientRow, error) {
	rows, err := db.QueryContext(ctx, getValidIngredientMeasurementUnitsForIngredient,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedBefore,
		arg.UpdatedAfter,
		arg.ValidIngredientID,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidIngredientMeasurementUnitsForIngredientRow{}
	for rows.Next() {
		var i GetValidIngredientMeasurementUnitsForIngredientRow
		if err := rows.Scan(
			&i.ValidIngredientMeasurementUnitID,
			&i.ValidIngredientMeasurementUnitNotes,
			&i.ValidMeasurementUnitID,
			&i.ValidMeasurementUnitName,
			&i.ValidMeasurementUnitDescription,
			&i.ValidMeasurementUnitVolumetric,
			&i.ValidMeasurementUnitIconPath,
			&i.ValidMeasurementUnitUniversal,
			&i.ValidMeasurementUnitMetric,
			&i.ValidMeasurementUnitImperial,
			&i.ValidMeasurementUnitSlug,
			&i.ValidMeasurementUnitPluralName,
			&i.ValidMeasurementUnitLastIndexedAt,
			&i.ValidMeasurementUnitCreatedAt,
			&i.ValidMeasurementUnitLastUpdatedAt,
			&i.ValidMeasurementUnitArchivedAt,
			&i.ValidIngredientID,
			&i.ValidIngredientName,
			&i.ValidIngredientDescription,
			&i.ValidIngredientWarning,
			&i.ValidIngredientContainsEgg,
			&i.ValidIngredientContainsDairy,
			&i.ValidIngredientContainsPeanut,
			&i.ValidIngredientContainsTreeNut,
			&i.ValidIngredientContainsSoy,
			&i.ValidIngredientContainsWheat,
			&i.ValidIngredientContainsShellfish,
			&i.ValidIngredientContainsSesame,
			&i.ValidIngredientContainsFish,
			&i.ValidIngredientContainsGluten,
			&i.ValidIngredientAnimalFlesh,
			&i.ValidIngredientVolumetric,
			&i.ValidIngredientIsLiquid,
			&i.ValidIngredientIconPath,
			&i.ValidIngredientAnimalDerived,
			&i.ValidIngredientPluralName,
			&i.ValidIngredientRestrictToPreparations,
			&i.ValidIngredientMinimumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientMaximumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientStorageInstructions,
			&i.ValidIngredientSlug,
			&i.ValidIngredientContainsAlcohol,
			&i.ValidIngredientShoppingSuggestions,
			&i.ValidIngredientIsStarch,
			&i.ValidIngredientIsProtein,
			&i.ValidIngredientIsGrain,
			&i.ValidIngredientIsFruit,
			&i.ValidIngredientIsSalt,
			&i.ValidIngredientIsFat,
			&i.ValidIngredientIsAcid,
			&i.ValidIngredientIsHeat,
			&i.ValidIngredientLastIndexedAt,
			&i.ValidIngredientCreatedAt,
			&i.ValidIngredientLastUpdatedAt,
			&i.ValidIngredientArchivedAt,
			&i.ValidIngredientMeasurementUnitMinimumAllowableQuantity,
			&i.ValidIngredientMeasurementUnitMaximumAllowableQuantity,
			&i.ValidIngredientMeasurementUnitCreatedAt,
			&i.ValidIngredientMeasurementUnitLastUpdatedAt,
			&i.ValidIngredientMeasurementUnitArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidIngredientMeasurementUnitsForMeasurementUnit = `-- name: GetValidIngredientMeasurementUnitsForMeasurementUnit :many

SELECT
	valid_ingredient_measurement_units.id as valid_ingredient_measurement_unit_id,
	valid_ingredient_measurement_units.notes as valid_ingredient_measurement_unit_notes,
	valid_measurement_units.id as valid_measurement_unit_id,
	valid_measurement_units.name as valid_measurement_unit_name,
	valid_measurement_units.description as valid_measurement_unit_description,
	valid_measurement_units.volumetric as valid_measurement_unit_volumetric,
	valid_measurement_units.icon_path as valid_measurement_unit_icon_path,
	valid_measurement_units.universal as valid_measurement_unit_universal,
	valid_measurement_units.metric as valid_measurement_unit_metric,
	valid_measurement_units.imperial as valid_measurement_unit_imperial,
	valid_measurement_units.slug as valid_measurement_unit_slug,
	valid_measurement_units.plural_name as valid_measurement_unit_plural_name,
	valid_measurement_units.last_indexed_at as valid_measurement_unit_last_indexed_at,
	valid_measurement_units.created_at as valid_measurement_unit_created_at,
	valid_measurement_units.last_updated_at as valid_measurement_unit_last_updated_at,
	valid_measurement_units.archived_at as valid_measurement_unit_archived_at,
	valid_ingredients.id as valid_ingredient_id,
	valid_ingredients.name as valid_ingredient_name,
	valid_ingredients.description as valid_ingredient_description,
	valid_ingredients.warning as valid_ingredient_warning,
	valid_ingredients.contains_egg as valid_ingredient_contains_egg,
	valid_ingredients.contains_dairy as valid_ingredient_contains_dairy,
	valid_ingredients.contains_peanut as valid_ingredient_contains_peanut,
	valid_ingredients.contains_tree_nut as valid_ingredient_contains_tree_nut,
	valid_ingredients.contains_soy as valid_ingredient_contains_soy,
	valid_ingredients.contains_wheat as valid_ingredient_contains_wheat,
	valid_ingredients.contains_shellfish as valid_ingredient_contains_shellfish,
	valid_ingredients.contains_sesame as valid_ingredient_contains_sesame,
	valid_ingredients.contains_fish as valid_ingredient_contains_fish,
	valid_ingredients.contains_gluten as valid_ingredient_contains_gluten,
	valid_ingredients.animal_flesh as valid_ingredient_animal_flesh,
	valid_ingredients.volumetric as valid_ingredient_volumetric,
	valid_ingredients.is_liquid as valid_ingredient_is_liquid,
	valid_ingredients.icon_path as valid_ingredient_icon_path,
	valid_ingredients.animal_derived as valid_ingredient_animal_derived,
	valid_ingredients.plural_name as valid_ingredient_plural_name,
	valid_ingredients.restrict_to_preparations as valid_ingredient_restrict_to_preparations,
	valid_ingredients.minimum_ideal_storage_temperature_in_celsius as valid_ingredient_minimum_ideal_storage_temperature_in_celsius,
	valid_ingredients.maximum_ideal_storage_temperature_in_celsius as valid_ingredient_maximum_ideal_storage_temperature_in_celsius,
	valid_ingredients.storage_instructions as valid_ingredient_storage_instructions,
	valid_ingredients.slug as valid_ingredient_slug,
	valid_ingredients.contains_alcohol as valid_ingredient_contains_alcohol,
	valid_ingredients.shopping_suggestions as valid_ingredient_shopping_suggestions,
	valid_ingredients.is_starch as valid_ingredient_is_starch,
	valid_ingredients.is_protein as valid_ingredient_is_protein,
	valid_ingredients.is_grain as valid_ingredient_is_grain,
	valid_ingredients.is_fruit as valid_ingredient_is_fruit,
	valid_ingredients.is_salt as valid_ingredient_is_salt,
	valid_ingredients.is_fat as valid_ingredient_is_fat,
	valid_ingredients.is_acid as valid_ingredient_is_acid,
	valid_ingredients.is_heat as valid_ingredient_is_heat,
	valid_ingredients.last_indexed_at as valid_ingredient_last_indexed_at,
	valid_ingredients.created_at as valid_ingredient_created_at,
	valid_ingredients.last_updated_at as valid_ingredient_last_updated_at,
	valid_ingredients.archived_at as valid_ingredient_archived_at,
	valid_ingredient_measurement_units.minimum_allowable_quantity as valid_ingredient_measurement_unit_minimum_allowable_quantity,
	valid_ingredient_measurement_units.maximum_allowable_quantity as valid_ingredient_measurement_unit_maximum_allowable_quantity,
	valid_ingredient_measurement_units.created_at as valid_ingredient_measurement_unit_created_at,
	valid_ingredient_measurement_units.last_updated_at as valid_ingredient_measurement_unit_last_updated_at,
	valid_ingredient_measurement_units.archived_at as valid_ingredient_measurement_unit_archived_at,
	(
		SELECT COUNT(valid_ingredient_measurement_units.id)
		FROM valid_ingredient_measurement_units
		WHERE valid_ingredient_measurement_units.archived_at IS NULL
			AND valid_ingredient_measurement_units.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
			AND valid_ingredient_measurement_units.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
			AND (
				valid_ingredient_measurement_units.last_updated_at IS NULL
				OR valid_ingredient_measurement_units.last_updated_at > COALESCE($3, (SELECT NOW() - '999 years'::INTERVAL))
			)
			AND (
				valid_ingredient_measurement_units.last_updated_at IS NULL
				OR valid_ingredient_measurement_units.last_updated_at < COALESCE($4, (SELECT NOW() + '999 years'::INTERVAL))
			)
	) AS filtered_count,
	(
		SELECT COUNT(valid_ingredient_measurement_units.id)
		FROM valid_ingredient_measurement_units
		WHERE valid_ingredient_measurement_units.archived_at IS NULL
	) AS total_count
FROM valid_ingredient_measurement_units
	JOIN valid_measurement_units ON valid_ingredient_measurement_units.valid_measurement_unit_id = valid_measurement_units.id
	JOIN valid_ingredients ON valid_ingredient_measurement_units.valid_ingredient_id = valid_ingredients.id
WHERE
	valid_ingredient_measurement_units.archived_at IS NULL
	AND valid_measurement_units.archived_at IS NULL
	AND valid_ingredients.archived_at IS NULL
	AND valid_ingredient_measurement_units.valid_measurement_unit_id = $5
	AND valid_ingredient_measurement_units.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
	AND valid_ingredient_measurement_units.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
	AND (
		valid_ingredient_measurement_units.last_updated_at IS NULL
		OR valid_ingredient_measurement_units.last_updated_at > COALESCE($4, (SELECT NOW() - '999 years'::INTERVAL))
	)
	AND (
		valid_ingredient_measurement_units.last_updated_at IS NULL
		OR valid_ingredient_measurement_units.last_updated_at < COALESCE($3, (SELECT NOW() + '999 years'::INTERVAL))
	)
LIMIT $7
OFFSET $6
`

type GetValidIngredientMeasurementUnitsForMeasurementUnitParams struct {
	CreatedAfter           sql.NullTime
	CreatedBefore          sql.NullTime
	UpdatedBefore          sql.NullTime
	UpdatedAfter           sql.NullTime
	ValidMeasurementUnitID string
	QueryOffset            sql.NullInt32
	QueryLimit             sql.NullInt32
}

type GetValidIngredientMeasurementUnitsForMeasurementUnitRow struct {
	ValidMeasurementUnitCreatedAt                          time.Time
	ValidIngredientCreatedAt                               time.Time
	ValidIngredientMeasurementUnitCreatedAt                time.Time
	ValidMeasurementUnitArchivedAt                         sql.NullTime
	ValidMeasurementUnitLastIndexedAt                      sql.NullTime
	ValidIngredientLastIndexedAt                           sql.NullTime
	ValidIngredientLastUpdatedAt                           sql.NullTime
	ValidIngredientArchivedAt                              sql.NullTime
	ValidIngredientMeasurementUnitLastUpdatedAt            sql.NullTime
	ValidIngredientMeasurementUnitArchivedAt               sql.NullTime
	ValidMeasurementUnitLastUpdatedAt                      sql.NullTime
	ValidMeasurementUnitPluralName                         string
	ValidIngredientMeasurementUnitID                       string
	ValidIngredientName                                    string
	ValidIngredientDescription                             string
	ValidIngredientWarning                                 string
	ValidIngredientPluralName                              string
	ValidIngredientIconPath                                string
	ValidIngredientStorageInstructions                     string
	ValidIngredientID                                      string
	ValidMeasurementUnitSlug                               string
	ValidMeasurementUnitIconPath                           string
	ValidIngredientSlug                                    string
	ValidIngredientMeasurementUnitMinimumAllowableQuantity string
	ValidMeasurementUnitDescription                        string
	ValidMeasurementUnitName                               string
	ValidMeasurementUnitID                                 string
	ValidIngredientMeasurementUnitNotes                    string
	ValidIngredientShoppingSuggestions                     string
	ValidIngredientMeasurementUnitMaximumAllowableQuantity sql.NullString
	ValidIngredientMinimumIdealStorageTemperatureInCelsius sql.NullString
	ValidIngredientMaximumIdealStorageTemperatureInCelsius sql.NullString
	FilteredCount                                          int64
	TotalCount                                             int64
	ValidIngredientIsLiquid                                sql.NullBool
	ValidMeasurementUnitVolumetric                         sql.NullBool
	ValidIngredientAnimalFlesh                             bool
	ValidIngredientRestrictToPreparations                  bool
	ValidIngredientAnimalDerived                           bool
	ValidIngredientVolumetric                              bool
	ValidIngredientContainsGluten                          bool
	ValidIngredientContainsAlcohol                         bool
	ValidIngredientContainsFish                            bool
	ValidIngredientIsStarch                                bool
	ValidIngredientIsProtein                               bool
	ValidIngredientIsGrain                                 bool
	ValidIngredientIsFruit                                 bool
	ValidIngredientIsSalt                                  bool
	ValidIngredientIsFat                                   bool
	ValidIngredientIsAcid                                  bool
	ValidIngredientIsHeat                                  bool
	ValidIngredientContainsSesame                          bool
	ValidIngredientContainsShellfish                       bool
	ValidIngredientContainsWheat                           bool
	ValidIngredientContainsSoy                             bool
	ValidIngredientContainsTreeNut                         bool
	ValidIngredientContainsPeanut                          bool
	ValidIngredientContainsDairy                           bool
	ValidIngredientContainsEgg                             bool
	ValidMeasurementUnitImperial                           bool
	ValidMeasurementUnitMetric                             bool
	ValidMeasurementUnitUniversal                          bool
}

func (q *Queries) GetValidIngredientMeasurementUnitsForMeasurementUnit(ctx context.Context, db DBTX, arg *GetValidIngredientMeasurementUnitsForMeasurementUnitParams) ([]*GetValidIngredientMeasurementUnitsForMeasurementUnitRow, error) {
	rows, err := db.QueryContext(ctx, getValidIngredientMeasurementUnitsForMeasurementUnit,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedBefore,
		arg.UpdatedAfter,
		arg.ValidMeasurementUnitID,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidIngredientMeasurementUnitsForMeasurementUnitRow{}
	for rows.Next() {
		var i GetValidIngredientMeasurementUnitsForMeasurementUnitRow
		if err := rows.Scan(
			&i.ValidIngredientMeasurementUnitID,
			&i.ValidIngredientMeasurementUnitNotes,
			&i.ValidMeasurementUnitID,
			&i.ValidMeasurementUnitName,
			&i.ValidMeasurementUnitDescription,
			&i.ValidMeasurementUnitVolumetric,
			&i.ValidMeasurementUnitIconPath,
			&i.ValidMeasurementUnitUniversal,
			&i.ValidMeasurementUnitMetric,
			&i.ValidMeasurementUnitImperial,
			&i.ValidMeasurementUnitSlug,
			&i.ValidMeasurementUnitPluralName,
			&i.ValidMeasurementUnitLastIndexedAt,
			&i.ValidMeasurementUnitCreatedAt,
			&i.ValidMeasurementUnitLastUpdatedAt,
			&i.ValidMeasurementUnitArchivedAt,
			&i.ValidIngredientID,
			&i.ValidIngredientName,
			&i.ValidIngredientDescription,
			&i.ValidIngredientWarning,
			&i.ValidIngredientContainsEgg,
			&i.ValidIngredientContainsDairy,
			&i.ValidIngredientContainsPeanut,
			&i.ValidIngredientContainsTreeNut,
			&i.ValidIngredientContainsSoy,
			&i.ValidIngredientContainsWheat,
			&i.ValidIngredientContainsShellfish,
			&i.ValidIngredientContainsSesame,
			&i.ValidIngredientContainsFish,
			&i.ValidIngredientContainsGluten,
			&i.ValidIngredientAnimalFlesh,
			&i.ValidIngredientVolumetric,
			&i.ValidIngredientIsLiquid,
			&i.ValidIngredientIconPath,
			&i.ValidIngredientAnimalDerived,
			&i.ValidIngredientPluralName,
			&i.ValidIngredientRestrictToPreparations,
			&i.ValidIngredientMinimumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientMaximumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientStorageInstructions,
			&i.ValidIngredientSlug,
			&i.ValidIngredientContainsAlcohol,
			&i.ValidIngredientShoppingSuggestions,
			&i.ValidIngredientIsStarch,
			&i.ValidIngredientIsProtein,
			&i.ValidIngredientIsGrain,
			&i.ValidIngredientIsFruit,
			&i.ValidIngredientIsSalt,
			&i.ValidIngredientIsFat,
			&i.ValidIngredientIsAcid,
			&i.ValidIngredientIsHeat,
			&i.ValidIngredientLastIndexedAt,
			&i.ValidIngredientCreatedAt,
			&i.ValidIngredientLastUpdatedAt,
			&i.ValidIngredientArchivedAt,
			&i.ValidIngredientMeasurementUnitMinimumAllowableQuantity,
			&i.ValidIngredientMeasurementUnitMaximumAllowableQuantity,
			&i.ValidIngredientMeasurementUnitCreatedAt,
			&i.ValidIngredientMeasurementUnitLastUpdatedAt,
			&i.ValidIngredientMeasurementUnitArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateValidIngredientMeasurementUnit = `-- name: UpdateValidIngredientMeasurementUnit :execrows

UPDATE valid_ingredient_measurement_units SET
	notes = $1,
	valid_measurement_unit_id = $2,
	valid_ingredient_id = $3,
	minimum_allowable_quantity = $4,
	maximum_allowable_quantity = $5,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND id = $6
`

type UpdateValidIngredientMeasurementUnitParams struct {
	Notes                    string
	ValidMeasurementUnitID   string
	ValidIngredientID        string
	MinimumAllowableQuantity string
	ID                       string
	MaximumAllowableQuantity sql.NullString
}

func (q *Queries) UpdateValidIngredientMeasurementUnit(ctx context.Context, db DBTX, arg *UpdateValidIngredientMeasurementUnitParams) (int64, error) {
	result, err := db.ExecContext(ctx, updateValidIngredientMeasurementUnit,
		arg.Notes,
		arg.ValidMeasurementUnitID,
		arg.ValidIngredientID,
		arg.MinimumAllowableQuantity,
		arg.MaximumAllowableQuantity,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const validIngredientMeasurementUnitPairIsValid = `-- name: ValidIngredientMeasurementUnitPairIsValid :one

SELECT EXISTS(
	SELECT id
	FROM valid_ingredient_measurement_units
	WHERE valid_measurement_unit_id = $1
	AND valid_ingredient_id = $2
	AND archived_at IS NULL
)
`

type ValidIngredientMeasurementUnitPairIsValidParams struct {
	ValidMeasurementUnitID string
	ValidIngredientID      string
}

func (q *Queries) ValidIngredientMeasurementUnitPairIsValid(ctx context.Context, db DBTX, arg *ValidIngredientMeasurementUnitPairIsValidParams) (bool, error) {
	row := db.QueryRowContext(ctx, validIngredientMeasurementUnitPairIsValid, arg.ValidMeasurementUnitID, arg.ValidIngredientID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
