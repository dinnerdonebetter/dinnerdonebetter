// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: household_user_memberships.sql

package generated

import (
	"context"
)

const addUserToHousehold = `-- name: AddUserToHousehold :exec

INSERT INTO household_user_memberships (
	id,
	belongs_to_household,
	belongs_to_user,
	household_role
) VALUES (
	$1,
	$2,
	$3,
	$4
)
`

type AddUserToHouseholdParams struct {
	ID                 string
	BelongsToHousehold string
	BelongsToUser      string
	HouseholdRole      string
}

func (q *Queries) AddUserToHousehold(ctx context.Context, db DBTX, arg *AddUserToHouseholdParams) error {
	_, err := db.ExecContext(ctx, addUserToHousehold,
		arg.ID,
		arg.BelongsToHousehold,
		arg.BelongsToUser,
		arg.HouseholdRole,
	)
	return err
}

const createHouseholdUserMembershipForNewUser = `-- name: CreateHouseholdUserMembershipForNewUser :exec

INSERT INTO household_user_memberships (
	id,
	belongs_to_household,
	belongs_to_user,
	default_household,
	household_role
) VALUES (
	$1,
	$2,
	$3,
	$4,
	$5
)
`

type CreateHouseholdUserMembershipForNewUserParams struct {
	ID                 string
	BelongsToHousehold string
	BelongsToUser      string
	HouseholdRole      string
	DefaultHousehold   bool
}

func (q *Queries) CreateHouseholdUserMembershipForNewUser(ctx context.Context, db DBTX, arg *CreateHouseholdUserMembershipForNewUserParams) error {
	_, err := db.ExecContext(ctx, createHouseholdUserMembershipForNewUser,
		arg.ID,
		arg.BelongsToHousehold,
		arg.BelongsToUser,
		arg.DefaultHousehold,
		arg.HouseholdRole,
	)
	return err
}

const getDefaultHouseholdIDForUser = `-- name: GetDefaultHouseholdIDForUser :one

SELECT households.id
FROM households
	JOIN household_user_memberships ON household_user_memberships.belongs_to_household = households.id
WHERE household_user_memberships.belongs_to_user = $1
	AND household_user_memberships.default_household = TRUE
`

func (q *Queries) GetDefaultHouseholdIDForUser(ctx context.Context, db DBTX, belongsToUser string) (string, error) {
	row := db.QueryRowContext(ctx, getDefaultHouseholdIDForUser, belongsToUser)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getHouseholdUserMembershipsForUser = `-- name: GetHouseholdUserMembershipsForUser :many

SELECT
	household_user_memberships.id,
	household_user_memberships.belongs_to_household,
	household_user_memberships.belongs_to_user,
	household_user_memberships.default_household,
	household_user_memberships.household_role,
	household_user_memberships.created_at,
	household_user_memberships.last_updated_at,
	household_user_memberships.archived_at
FROM household_user_memberships
	JOIN households ON households.id = household_user_memberships.belongs_to_household
WHERE household_user_memberships.archived_at IS NULL
	AND household_user_memberships.belongs_to_user = $1
`

func (q *Queries) GetHouseholdUserMembershipsForUser(ctx context.Context, db DBTX, belongsToUser string) ([]*HouseholdUserMemberships, error) {
	rows, err := db.QueryContext(ctx, getHouseholdUserMembershipsForUser, belongsToUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*HouseholdUserMemberships{}
	for rows.Next() {
		var i HouseholdUserMemberships
		if err := rows.Scan(
			&i.ID,
			&i.BelongsToHousehold,
			&i.BelongsToUser,
			&i.DefaultHousehold,
			&i.HouseholdRole,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markHouseholdUserMembershipAsUserDefault = `-- name: MarkHouseholdUserMembershipAsUserDefault :exec

UPDATE household_user_memberships SET
	default_household = (belongs_to_user = $1 AND belongs_to_household = $2)
WHERE archived_at IS NULL
	AND belongs_to_user = $1
`

type MarkHouseholdUserMembershipAsUserDefaultParams struct {
	BelongsToUser      string
	BelongsToHousehold string
}

func (q *Queries) MarkHouseholdUserMembershipAsUserDefault(ctx context.Context, db DBTX, arg *MarkHouseholdUserMembershipAsUserDefaultParams) error {
	_, err := db.ExecContext(ctx, markHouseholdUserMembershipAsUserDefault, arg.BelongsToUser, arg.BelongsToHousehold)
	return err
}

const modifyHouseholdUserPermissions = `-- name: ModifyHouseholdUserPermissions :exec

UPDATE household_user_memberships SET
	household_role = $1
WHERE belongs_to_household = $2
	AND belongs_to_user = $3
`

type ModifyHouseholdUserPermissionsParams struct {
	HouseholdRole      string
	BelongsToHousehold string
	BelongsToUser      string
}

func (q *Queries) ModifyHouseholdUserPermissions(ctx context.Context, db DBTX, arg *ModifyHouseholdUserPermissionsParams) error {
	_, err := db.ExecContext(ctx, modifyHouseholdUserPermissions, arg.HouseholdRole, arg.BelongsToHousehold, arg.BelongsToUser)
	return err
}

const removeUserFromHousehold = `-- name: RemoveUserFromHousehold :exec

UPDATE household_user_memberships SET
	archived_at = NOW(),
	default_household = 'false'
WHERE household_user_memberships.archived_at IS NULL
	AND household_user_memberships.belongs_to_household = $1
	AND household_user_memberships.belongs_to_user = $2
`

type RemoveUserFromHouseholdParams struct {
	BelongsToHousehold string
	BelongsToUser      string
}

func (q *Queries) RemoveUserFromHousehold(ctx context.Context, db DBTX, arg *RemoveUserFromHouseholdParams) error {
	_, err := db.ExecContext(ctx, removeUserFromHousehold, arg.BelongsToHousehold, arg.BelongsToUser)
	return err
}

const transferHouseholdMembership = `-- name: TransferHouseholdMembership :exec

UPDATE household_user_memberships SET
	belongs_to_user = $1
WHERE archived_at IS NULL
	AND belongs_to_household = $2
	AND belongs_to_user = $1
`

type TransferHouseholdMembershipParams struct {
	BelongsToUser      string
	BelongsToHousehold string
}

func (q *Queries) TransferHouseholdMembership(ctx context.Context, db DBTX, arg *TransferHouseholdMembershipParams) error {
	_, err := db.ExecContext(ctx, transferHouseholdMembership, arg.BelongsToUser, arg.BelongsToHousehold)
	return err
}

const transferHouseholdOwnership = `-- name: TransferHouseholdOwnership :exec

UPDATE households SET
	belongs_to_user = $1
WHERE archived_at IS NULL
	AND belongs_to_user = $2
	AND id = $3
`

type TransferHouseholdOwnershipParams struct {
	NewOwner    string
	OldOwner    string
	HouseholdID string
}

func (q *Queries) TransferHouseholdOwnership(ctx context.Context, db DBTX, arg *TransferHouseholdOwnershipParams) error {
	_, err := db.ExecContext(ctx, transferHouseholdOwnership, arg.NewOwner, arg.OldOwner, arg.HouseholdID)
	return err
}

const userIsHouseholdMember = `-- name: UserIsHouseholdMember :one

SELECT EXISTS (
	SELECT household_user_memberships.id
	FROM household_user_memberships
	WHERE household_user_memberships.archived_at IS NULL
		AND household_user_memberships.belongs_to_household = $1
		AND household_user_memberships.belongs_to_user = $2
)
`

type UserIsHouseholdMemberParams struct {
	BelongsToHousehold string
	BelongsToUser      string
}

func (q *Queries) UserIsHouseholdMember(ctx context.Context, db DBTX, arg *UserIsHouseholdMemberParams) (bool, error) {
	row := db.QueryRowContext(ctx, userIsHouseholdMember, arg.BelongsToHousehold, arg.BelongsToUser)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
