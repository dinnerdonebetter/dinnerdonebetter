// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: valid_preparation_instruments.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const archiveValidPreparationInstrument = `-- name: ArchiveValidPreparationInstrument :execrows

UPDATE valid_preparation_instruments SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1
`

func (q *Queries) ArchiveValidPreparationInstrument(ctx context.Context, db DBTX, id string) (int64, error) {
	result, err := db.ExecContext(ctx, archiveValidPreparationInstrument, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const checkValidPreparationInstrumentExistence = `-- name: CheckValidPreparationInstrumentExistence :one

SELECT EXISTS (
	SELECT valid_preparation_instruments.id
	FROM valid_preparation_instruments
	WHERE valid_preparation_instruments.archived_at IS NULL
		AND valid_preparation_instruments.id = $1
)
`

func (q *Queries) CheckValidPreparationInstrumentExistence(ctx context.Context, db DBTX, id string) (bool, error) {
	row := db.QueryRowContext(ctx, checkValidPreparationInstrumentExistence, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createValidPreparationInstrument = `-- name: CreateValidPreparationInstrument :exec

INSERT INTO valid_preparation_instruments (
	id,
	notes,
	valid_preparation_id,
	valid_instrument_id
) VALUES (
	$1,
	$2,
	$3,
	$4
)
`

type CreateValidPreparationInstrumentParams struct {
	ID                 string
	Notes              string
	ValidPreparationID string
	ValidInstrumentID  string
}

func (q *Queries) CreateValidPreparationInstrument(ctx context.Context, db DBTX, arg *CreateValidPreparationInstrumentParams) error {
	_, err := db.ExecContext(ctx, createValidPreparationInstrument,
		arg.ID,
		arg.Notes,
		arg.ValidPreparationID,
		arg.ValidInstrumentID,
	)
	return err
}

const getValidPreparationInstrument = `-- name: GetValidPreparationInstrument :one

SELECT
	valid_preparation_instruments.id as valid_preparation_instrument_id,
	valid_preparation_instruments.notes as valid_preparation_instrument_notes,
	valid_preparations.id as valid_preparation_id,
	valid_preparations.name as valid_preparation_name,
	valid_preparations.description as valid_preparation_description,
	valid_preparations.icon_path as valid_preparation_icon_path,
	valid_preparations.yields_nothing as valid_preparation_yields_nothing,
	valid_preparations.restrict_to_ingredients as valid_preparation_restrict_to_ingredients,
	valid_preparations.past_tense as valid_preparation_past_tense,
	valid_preparations.slug as valid_preparation_slug,
	valid_preparations.minimum_ingredient_count as valid_preparation_minimum_ingredient_count,
	valid_preparations.maximum_ingredient_count as valid_preparation_maximum_ingredient_count,
	valid_preparations.minimum_instrument_count as valid_preparation_minimum_instrument_count,
	valid_preparations.maximum_instrument_count as valid_preparation_maximum_instrument_count,
	valid_preparations.temperature_required as valid_preparation_temperature_required,
	valid_preparations.time_estimate_required as valid_preparation_time_estimate_required,
	valid_preparations.condition_expression_required as valid_preparation_condition_expression_required,
	valid_preparations.consumes_vessel as valid_preparation_consumes_vessel,
	valid_preparations.only_for_vessels as valid_preparation_only_for_vessels,
	valid_preparations.minimum_vessel_count as valid_preparation_minimum_vessel_count,
	valid_preparations.maximum_vessel_count as valid_preparation_maximum_vessel_count,
	valid_preparations.last_indexed_at as valid_preparation_last_indexed_at,
	valid_preparations.created_at as valid_preparation_created_at,
	valid_preparations.last_updated_at as valid_preparation_last_updated_at,
	valid_preparations.archived_at as valid_preparation_archived_at,
	valid_instruments.id as valid_instrument_id,
	valid_instruments.name as valid_instrument_name,
	valid_instruments.description as valid_instrument_description,
	valid_instruments.icon_path as valid_instrument_icon_path,
	valid_instruments.plural_name as valid_instrument_plural_name,
	valid_instruments.usable_for_storage as valid_instrument_usable_for_storage,
	valid_instruments.slug as valid_instrument_slug,
	valid_instruments.display_in_summary_lists as valid_instrument_display_in_summary_lists,
	valid_instruments.include_in_generated_instructions as valid_instrument_include_in_generated_instructions,
	valid_instruments.last_indexed_at as valid_instrument_last_indexed_at,
	valid_instruments.created_at as valid_instrument_created_at,
	valid_instruments.last_updated_at as valid_instrument_last_updated_at,
	valid_instruments.archived_at as valid_instrument_archived_at,
	valid_preparation_instruments.created_at as valid_preparation_instrument_created_at,
	valid_preparation_instruments.last_updated_at as valid_preparation_instrument_last_updated_at,
	valid_preparation_instruments.archived_at as valid_preparation_instrument_archived_at
FROM
	valid_preparation_instruments
	JOIN valid_instruments ON valid_preparation_instruments.valid_instrument_id = valid_instruments.id
	JOIN valid_preparations ON valid_preparation_instruments.valid_preparation_id = valid_preparations.id
WHERE
	valid_preparation_instruments.archived_at IS NULL
	AND valid_instruments.archived_at IS NULL
	AND valid_preparations.archived_at IS NULL
	AND valid_preparation_instruments.id = $1
`

type GetValidPreparationInstrumentRow struct {
	ValidPreparationInstrumentCreatedAt           time.Time
	ValidPreparationCreatedAt                     time.Time
	ValidInstrumentCreatedAt                      time.Time
	ValidInstrumentArchivedAt                     sql.NullTime
	ValidInstrumentLastUpdatedAt                  sql.NullTime
	ValidPreparationArchivedAt                    sql.NullTime
	ValidPreparationInstrumentArchivedAt          sql.NullTime
	ValidPreparationInstrumentLastUpdatedAt       sql.NullTime
	ValidPreparationLastUpdatedAt                 sql.NullTime
	ValidPreparationLastIndexedAt                 sql.NullTime
	ValidInstrumentLastIndexedAt                  sql.NullTime
	ValidPreparationID                            string
	ValidPreparationIconPath                      string
	ValidInstrumentDescription                    string
	ValidInstrumentIconPath                       string
	ValidInstrumentName                           string
	ValidPreparationDescription                   string
	ValidPreparationInstrumentID                  string
	ValidInstrumentSlug                           string
	ValidInstrumentPluralName                     string
	ValidInstrumentID                             string
	ValidPreparationSlug                          string
	ValidPreparationInstrumentNotes               string
	ValidPreparationPastTense                     string
	ValidPreparationName                          string
	ValidPreparationMaximumVesselCount            sql.NullInt32
	ValidPreparationMaximumIngredientCount        sql.NullInt32
	ValidPreparationMaximumInstrumentCount        sql.NullInt32
	ValidPreparationMinimumIngredientCount        int32
	ValidPreparationMinimumVesselCount            int32
	ValidPreparationMinimumInstrumentCount        int32
	ValidInstrumentUsableForStorage               bool
	ValidPreparationOnlyForVessels                bool
	ValidInstrumentDisplayInSummaryLists          bool
	ValidInstrumentIncludeInGeneratedInstructions bool
	ValidPreparationConsumesVessel                bool
	ValidPreparationConditionExpressionRequired   bool
	ValidPreparationTimeEstimateRequired          bool
	ValidPreparationTemperatureRequired           bool
	ValidPreparationRestrictToIngredients         bool
	ValidPreparationYieldsNothing                 bool
}

func (q *Queries) GetValidPreparationInstrument(ctx context.Context, db DBTX, id string) (*GetValidPreparationInstrumentRow, error) {
	row := db.QueryRowContext(ctx, getValidPreparationInstrument, id)
	var i GetValidPreparationInstrumentRow
	err := row.Scan(
		&i.ValidPreparationInstrumentID,
		&i.ValidPreparationInstrumentNotes,
		&i.ValidPreparationID,
		&i.ValidPreparationName,
		&i.ValidPreparationDescription,
		&i.ValidPreparationIconPath,
		&i.ValidPreparationYieldsNothing,
		&i.ValidPreparationRestrictToIngredients,
		&i.ValidPreparationPastTense,
		&i.ValidPreparationSlug,
		&i.ValidPreparationMinimumIngredientCount,
		&i.ValidPreparationMaximumIngredientCount,
		&i.ValidPreparationMinimumInstrumentCount,
		&i.ValidPreparationMaximumInstrumentCount,
		&i.ValidPreparationTemperatureRequired,
		&i.ValidPreparationTimeEstimateRequired,
		&i.ValidPreparationConditionExpressionRequired,
		&i.ValidPreparationConsumesVessel,
		&i.ValidPreparationOnlyForVessels,
		&i.ValidPreparationMinimumVesselCount,
		&i.ValidPreparationMaximumVesselCount,
		&i.ValidPreparationLastIndexedAt,
		&i.ValidPreparationCreatedAt,
		&i.ValidPreparationLastUpdatedAt,
		&i.ValidPreparationArchivedAt,
		&i.ValidInstrumentID,
		&i.ValidInstrumentName,
		&i.ValidInstrumentDescription,
		&i.ValidInstrumentIconPath,
		&i.ValidInstrumentPluralName,
		&i.ValidInstrumentUsableForStorage,
		&i.ValidInstrumentSlug,
		&i.ValidInstrumentDisplayInSummaryLists,
		&i.ValidInstrumentIncludeInGeneratedInstructions,
		&i.ValidInstrumentLastIndexedAt,
		&i.ValidInstrumentCreatedAt,
		&i.ValidInstrumentLastUpdatedAt,
		&i.ValidInstrumentArchivedAt,
		&i.ValidPreparationInstrumentCreatedAt,
		&i.ValidPreparationInstrumentLastUpdatedAt,
		&i.ValidPreparationInstrumentArchivedAt,
	)
	return &i, err
}

const getValidPreparationInstruments = `-- name: GetValidPreparationInstruments :many

SELECT
	valid_preparation_instruments.id as valid_preparation_instrument_id,
	valid_preparation_instruments.notes as valid_preparation_instrument_notes,
	valid_preparations.id as valid_preparation_id,
	valid_preparations.name as valid_preparation_name,
	valid_preparations.description as valid_preparation_description,
	valid_preparations.icon_path as valid_preparation_icon_path,
	valid_preparations.yields_nothing as valid_preparation_yields_nothing,
	valid_preparations.restrict_to_ingredients as valid_preparation_restrict_to_ingredients,
	valid_preparations.past_tense as valid_preparation_past_tense,
	valid_preparations.slug as valid_preparation_slug,
	valid_preparations.minimum_ingredient_count as valid_preparation_minimum_ingredient_count,
	valid_preparations.maximum_ingredient_count as valid_preparation_maximum_ingredient_count,
	valid_preparations.minimum_instrument_count as valid_preparation_minimum_instrument_count,
	valid_preparations.maximum_instrument_count as valid_preparation_maximum_instrument_count,
	valid_preparations.temperature_required as valid_preparation_temperature_required,
	valid_preparations.time_estimate_required as valid_preparation_time_estimate_required,
	valid_preparations.condition_expression_required as valid_preparation_condition_expression_required,
	valid_preparations.consumes_vessel as valid_preparation_consumes_vessel,
	valid_preparations.only_for_vessels as valid_preparation_only_for_vessels,
	valid_preparations.minimum_vessel_count as valid_preparation_minimum_vessel_count,
	valid_preparations.maximum_vessel_count as valid_preparation_maximum_vessel_count,
	valid_preparations.last_indexed_at as valid_preparation_last_indexed_at,
	valid_preparations.created_at as valid_preparation_created_at,
	valid_preparations.last_updated_at as valid_preparation_last_updated_at,
	valid_preparations.archived_at as valid_preparation_archived_at,
	valid_instruments.id as valid_instrument_id,
	valid_instruments.name as valid_instrument_name,
	valid_instruments.description as valid_instrument_description,
	valid_instruments.icon_path as valid_instrument_icon_path,
	valid_instruments.plural_name as valid_instrument_plural_name,
	valid_instruments.usable_for_storage as valid_instrument_usable_for_storage,
	valid_instruments.slug as valid_instrument_slug,
	valid_instruments.display_in_summary_lists as valid_instrument_display_in_summary_lists,
	valid_instruments.include_in_generated_instructions as valid_instrument_include_in_generated_instructions,
	valid_instruments.last_indexed_at as valid_instrument_last_indexed_at,
	valid_instruments.created_at as valid_instrument_created_at,
	valid_instruments.last_updated_at as valid_instrument_last_updated_at,
	valid_instruments.archived_at as valid_instrument_archived_at,
	valid_preparation_instruments.created_at as valid_preparation_instrument_created_at,
	valid_preparation_instruments.last_updated_at as valid_preparation_instrument_last_updated_at,
	valid_preparation_instruments.archived_at as valid_preparation_instrument_archived_at,
	(
		SELECT COUNT(valid_preparation_instruments.id)
		FROM valid_preparation_instruments
			JOIN valid_instruments ON valid_preparation_instruments.valid_instrument_id = valid_instruments.id
			JOIN valid_preparations ON valid_preparation_instruments.valid_preparation_id = valid_preparations.id
		WHERE
			valid_preparation_instruments.archived_at IS NULL
			AND valid_instruments.archived_at IS NULL
			AND valid_preparations.archived_at IS NULL
			AND valid_preparation_instruments.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
	AND valid_preparation_instruments.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
	AND (
		valid_preparation_instruments.last_updated_at IS NULL
		OR valid_preparation_instruments.last_updated_at > COALESCE($3, (SELECT NOW() - '999 years'::INTERVAL))
	)
	AND (
		valid_preparation_instruments.last_updated_at IS NULL
		OR valid_preparation_instruments.last_updated_at < COALESCE($4, (SELECT NOW() + '999 years'::INTERVAL))
	)
	) as filtered_count,
	(
		SELECT COUNT(valid_preparation_instruments.id)
		FROM valid_preparation_instruments
			JOIN valid_instruments ON valid_preparation_instruments.valid_instrument_id = valid_instruments.id
			JOIN valid_preparations ON valid_preparation_instruments.valid_preparation_id = valid_preparations.id
		WHERE
			valid_preparation_instruments.archived_at IS NULL
			AND valid_instruments.archived_at IS NULL
			AND valid_preparations.archived_at IS NULL
	) as total_count
FROM valid_preparation_instruments
	JOIN valid_instruments ON valid_preparation_instruments.valid_instrument_id = valid_instruments.id
	JOIN valid_preparations ON valid_preparation_instruments.valid_preparation_id = valid_preparations.id
WHERE
	valid_preparation_instruments.archived_at IS NULL
	AND valid_instruments.archived_at IS NULL
	AND valid_preparations.archived_at IS NULL
	AND valid_preparation_instruments.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
	AND valid_preparation_instruments.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
	AND (
		valid_preparation_instruments.last_updated_at IS NULL
		OR valid_preparation_instruments.last_updated_at > COALESCE($3, (SELECT NOW() - '999 years'::INTERVAL))
	)
	AND (
		valid_preparation_instruments.last_updated_at IS NULL
		OR valid_preparation_instruments.last_updated_at < COALESCE($4, (SELECT NOW() + '999 years'::INTERVAL))
	)
GROUP BY
	valid_preparation_instruments.id,
	valid_preparations.id,
	valid_instruments.id
ORDER BY valid_preparation_instruments.id
LIMIT $6
OFFSET $5
`

type GetValidPreparationInstrumentsParams struct {
	CreatedAfter  sql.NullTime
	CreatedBefore sql.NullTime
	UpdatedAfter  sql.NullTime
	UpdatedBefore sql.NullTime
	QueryOffset   sql.NullInt32
	QueryLimit    sql.NullInt32
}

type GetValidPreparationInstrumentsRow struct {
	ValidPreparationInstrumentCreatedAt           time.Time
	ValidPreparationCreatedAt                     time.Time
	ValidInstrumentCreatedAt                      time.Time
	ValidPreparationLastIndexedAt                 sql.NullTime
	ValidPreparationInstrumentArchivedAt          sql.NullTime
	ValidPreparationArchivedAt                    sql.NullTime
	ValidPreparationLastUpdatedAt                 sql.NullTime
	ValidInstrumentLastIndexedAt                  sql.NullTime
	ValidInstrumentLastUpdatedAt                  sql.NullTime
	ValidInstrumentArchivedAt                     sql.NullTime
	ValidPreparationInstrumentLastUpdatedAt       sql.NullTime
	ValidPreparationInstrumentID                  string
	ValidPreparationIconPath                      string
	ValidInstrumentPluralName                     string
	ValidPreparationDescription                   string
	ValidPreparationName                          string
	ValidPreparationSlug                          string
	ValidPreparationPastTense                     string
	ValidPreparationID                            string
	ValidInstrumentIconPath                       string
	ValidInstrumentDescription                    string
	ValidInstrumentSlug                           string
	ValidPreparationInstrumentNotes               string
	ValidInstrumentName                           string
	ValidInstrumentID                             string
	TotalCount                                    int64
	FilteredCount                                 int64
	ValidPreparationMaximumIngredientCount        sql.NullInt32
	ValidPreparationMaximumVesselCount            sql.NullInt32
	ValidPreparationMaximumInstrumentCount        sql.NullInt32
	ValidPreparationMinimumIngredientCount        int32
	ValidPreparationMinimumVesselCount            int32
	ValidPreparationMinimumInstrumentCount        int32
	ValidInstrumentUsableForStorage               bool
	ValidInstrumentDisplayInSummaryLists          bool
	ValidInstrumentIncludeInGeneratedInstructions bool
	ValidPreparationOnlyForVessels                bool
	ValidPreparationConsumesVessel                bool
	ValidPreparationConditionExpressionRequired   bool
	ValidPreparationTimeEstimateRequired          bool
	ValidPreparationTemperatureRequired           bool
	ValidPreparationRestrictToIngredients         bool
	ValidPreparationYieldsNothing                 bool
}

func (q *Queries) GetValidPreparationInstruments(ctx context.Context, db DBTX, arg *GetValidPreparationInstrumentsParams) ([]*GetValidPreparationInstrumentsRow, error) {
	rows, err := db.QueryContext(ctx, getValidPreparationInstruments,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedAfter,
		arg.UpdatedBefore,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidPreparationInstrumentsRow{}
	for rows.Next() {
		var i GetValidPreparationInstrumentsRow
		if err := rows.Scan(
			&i.ValidPreparationInstrumentID,
			&i.ValidPreparationInstrumentNotes,
			&i.ValidPreparationID,
			&i.ValidPreparationName,
			&i.ValidPreparationDescription,
			&i.ValidPreparationIconPath,
			&i.ValidPreparationYieldsNothing,
			&i.ValidPreparationRestrictToIngredients,
			&i.ValidPreparationPastTense,
			&i.ValidPreparationSlug,
			&i.ValidPreparationMinimumIngredientCount,
			&i.ValidPreparationMaximumIngredientCount,
			&i.ValidPreparationMinimumInstrumentCount,
			&i.ValidPreparationMaximumInstrumentCount,
			&i.ValidPreparationTemperatureRequired,
			&i.ValidPreparationTimeEstimateRequired,
			&i.ValidPreparationConditionExpressionRequired,
			&i.ValidPreparationConsumesVessel,
			&i.ValidPreparationOnlyForVessels,
			&i.ValidPreparationMinimumVesselCount,
			&i.ValidPreparationMaximumVesselCount,
			&i.ValidPreparationLastIndexedAt,
			&i.ValidPreparationCreatedAt,
			&i.ValidPreparationLastUpdatedAt,
			&i.ValidPreparationArchivedAt,
			&i.ValidInstrumentID,
			&i.ValidInstrumentName,
			&i.ValidInstrumentDescription,
			&i.ValidInstrumentIconPath,
			&i.ValidInstrumentPluralName,
			&i.ValidInstrumentUsableForStorage,
			&i.ValidInstrumentSlug,
			&i.ValidInstrumentDisplayInSummaryLists,
			&i.ValidInstrumentIncludeInGeneratedInstructions,
			&i.ValidInstrumentLastIndexedAt,
			&i.ValidInstrumentCreatedAt,
			&i.ValidInstrumentLastUpdatedAt,
			&i.ValidInstrumentArchivedAt,
			&i.ValidPreparationInstrumentCreatedAt,
			&i.ValidPreparationInstrumentLastUpdatedAt,
			&i.ValidPreparationInstrumentArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidPreparationInstrumentsForInstrument = `-- name: GetValidPreparationInstrumentsForInstrument :many

SELECT
	valid_preparation_instruments.id as valid_preparation_instrument_id,
	valid_preparation_instruments.notes as valid_preparation_instrument_notes,
	valid_preparations.id as valid_preparation_id,
	valid_preparations.name as valid_preparation_name,
	valid_preparations.description as valid_preparation_description,
	valid_preparations.icon_path as valid_preparation_icon_path,
	valid_preparations.yields_nothing as valid_preparation_yields_nothing,
	valid_preparations.restrict_to_ingredients as valid_preparation_restrict_to_ingredients,
	valid_preparations.past_tense as valid_preparation_past_tense,
	valid_preparations.slug as valid_preparation_slug,
	valid_preparations.minimum_ingredient_count as valid_preparation_minimum_ingredient_count,
	valid_preparations.maximum_ingredient_count as valid_preparation_maximum_ingredient_count,
	valid_preparations.minimum_instrument_count as valid_preparation_minimum_instrument_count,
	valid_preparations.maximum_instrument_count as valid_preparation_maximum_instrument_count,
	valid_preparations.temperature_required as valid_preparation_temperature_required,
	valid_preparations.time_estimate_required as valid_preparation_time_estimate_required,
	valid_preparations.condition_expression_required as valid_preparation_condition_expression_required,
	valid_preparations.consumes_vessel as valid_preparation_consumes_vessel,
	valid_preparations.only_for_vessels as valid_preparation_only_for_vessels,
	valid_preparations.minimum_vessel_count as valid_preparation_minimum_vessel_count,
	valid_preparations.maximum_vessel_count as valid_preparation_maximum_vessel_count,
	valid_preparations.last_indexed_at as valid_preparation_last_indexed_at,
	valid_preparations.created_at as valid_preparation_created_at,
	valid_preparations.last_updated_at as valid_preparation_last_updated_at,
	valid_preparations.archived_at as valid_preparation_archived_at,
	valid_instruments.id as valid_instrument_id,
	valid_instruments.name as valid_instrument_name,
	valid_instruments.description as valid_instrument_description,
	valid_instruments.icon_path as valid_instrument_icon_path,
	valid_instruments.plural_name as valid_instrument_plural_name,
	valid_instruments.usable_for_storage as valid_instrument_usable_for_storage,
	valid_instruments.slug as valid_instrument_slug,
	valid_instruments.display_in_summary_lists as valid_instrument_display_in_summary_lists,
	valid_instruments.include_in_generated_instructions as valid_instrument_include_in_generated_instructions,
	valid_instruments.last_indexed_at as valid_instrument_last_indexed_at,
	valid_instruments.created_at as valid_instrument_created_at,
	valid_instruments.last_updated_at as valid_instrument_last_updated_at,
	valid_instruments.archived_at as valid_instrument_archived_at,
	valid_preparation_instruments.created_at as valid_preparation_instrument_created_at,
	valid_preparation_instruments.last_updated_at as valid_preparation_instrument_last_updated_at,
	valid_preparation_instruments.archived_at as valid_preparation_instrument_archived_at,
	(
		SELECT COUNT(valid_preparation_instruments.id)
		FROM valid_preparation_instruments
			JOIN valid_instruments ON valid_preparation_instruments.valid_instrument_id = valid_instruments.id
			JOIN valid_preparations ON valid_preparation_instruments.valid_preparation_id = valid_preparations.id
		WHERE
			valid_preparation_instruments.archived_at IS NULL
			AND valid_instruments.archived_at IS NULL
			AND valid_preparations.archived_at IS NULL
			AND valid_preparation_instruments.valid_instrument_id = $1
			AND valid_preparation_instruments.created_at > COALESCE($2, (SELECT NOW() - '999 years'::INTERVAL))
	AND valid_preparation_instruments.created_at < COALESCE($3, (SELECT NOW() + '999 years'::INTERVAL))
	AND (
		valid_preparation_instruments.last_updated_at IS NULL
		OR valid_preparation_instruments.last_updated_at > COALESCE($4, (SELECT NOW() - '999 years'::INTERVAL))
	)
	AND (
		valid_preparation_instruments.last_updated_at IS NULL
		OR valid_preparation_instruments.last_updated_at < COALESCE($5, (SELECT NOW() + '999 years'::INTERVAL))
	)
	) as filtered_count,
	(
		SELECT COUNT(valid_preparation_instruments.id)
		FROM valid_preparation_instruments
			JOIN valid_instruments ON valid_preparation_instruments.valid_instrument_id = valid_instruments.id
			JOIN valid_preparations ON valid_preparation_instruments.valid_preparation_id = valid_preparations.id
		WHERE
			valid_preparation_instruments.archived_at IS NULL
			AND valid_instruments.archived_at IS NULL
			AND valid_preparations.archived_at IS NULL
			AND valid_preparation_instruments.valid_instrument_id = $1
	) as total_count
FROM valid_preparation_instruments
	JOIN valid_instruments ON valid_preparation_instruments.valid_instrument_id = valid_instruments.id
	JOIN valid_preparations ON valid_preparation_instruments.valid_preparation_id = valid_preparations.id
WHERE
	valid_preparation_instruments.archived_at IS NULL
	AND valid_preparation_instruments.valid_instrument_id = $1
	AND valid_instruments.archived_at IS NULL
	AND valid_preparations.archived_at IS NULL
	AND valid_preparation_instruments.created_at > COALESCE($2, (SELECT NOW() - '999 years'::INTERVAL))
	AND valid_preparation_instruments.created_at < COALESCE($3, (SELECT NOW() + '999 years'::INTERVAL))
	AND (
		valid_preparation_instruments.last_updated_at IS NULL
		OR valid_preparation_instruments.last_updated_at > COALESCE($4, (SELECT NOW() - '999 years'::INTERVAL))
	)
	AND (
		valid_preparation_instruments.last_updated_at IS NULL
		OR valid_preparation_instruments.last_updated_at < COALESCE($5, (SELECT NOW() + '999 years'::INTERVAL))
	)
GROUP BY
	valid_preparation_instruments.id,
	valid_preparations.id,
	valid_instruments.id
ORDER BY valid_preparation_instruments.id
LIMIT $7
OFFSET $6
`

type GetValidPreparationInstrumentsForInstrumentParams struct {
	ID            string
	CreatedAfter  sql.NullTime
	CreatedBefore sql.NullTime
	UpdatedAfter  sql.NullTime
	UpdatedBefore sql.NullTime
	QueryOffset   sql.NullInt32
	QueryLimit    sql.NullInt32
}

type GetValidPreparationInstrumentsForInstrumentRow struct {
	ValidPreparationInstrumentCreatedAt           time.Time
	ValidPreparationCreatedAt                     time.Time
	ValidInstrumentCreatedAt                      time.Time
	ValidPreparationLastIndexedAt                 sql.NullTime
	ValidPreparationInstrumentArchivedAt          sql.NullTime
	ValidPreparationArchivedAt                    sql.NullTime
	ValidPreparationLastUpdatedAt                 sql.NullTime
	ValidInstrumentLastIndexedAt                  sql.NullTime
	ValidInstrumentLastUpdatedAt                  sql.NullTime
	ValidInstrumentArchivedAt                     sql.NullTime
	ValidPreparationInstrumentLastUpdatedAt       sql.NullTime
	ValidPreparationInstrumentID                  string
	ValidPreparationIconPath                      string
	ValidInstrumentPluralName                     string
	ValidPreparationDescription                   string
	ValidPreparationName                          string
	ValidPreparationSlug                          string
	ValidPreparationPastTense                     string
	ValidPreparationID                            string
	ValidInstrumentIconPath                       string
	ValidInstrumentDescription                    string
	ValidInstrumentSlug                           string
	ValidPreparationInstrumentNotes               string
	ValidInstrumentName                           string
	ValidInstrumentID                             string
	TotalCount                                    int64
	FilteredCount                                 int64
	ValidPreparationMaximumIngredientCount        sql.NullInt32
	ValidPreparationMaximumVesselCount            sql.NullInt32
	ValidPreparationMaximumInstrumentCount        sql.NullInt32
	ValidPreparationMinimumIngredientCount        int32
	ValidPreparationMinimumVesselCount            int32
	ValidPreparationMinimumInstrumentCount        int32
	ValidInstrumentUsableForStorage               bool
	ValidInstrumentDisplayInSummaryLists          bool
	ValidInstrumentIncludeInGeneratedInstructions bool
	ValidPreparationOnlyForVessels                bool
	ValidPreparationConsumesVessel                bool
	ValidPreparationConditionExpressionRequired   bool
	ValidPreparationTimeEstimateRequired          bool
	ValidPreparationTemperatureRequired           bool
	ValidPreparationRestrictToIngredients         bool
	ValidPreparationYieldsNothing                 bool
}

func (q *Queries) GetValidPreparationInstrumentsForInstrument(ctx context.Context, db DBTX, arg *GetValidPreparationInstrumentsForInstrumentParams) ([]*GetValidPreparationInstrumentsForInstrumentRow, error) {
	rows, err := db.QueryContext(ctx, getValidPreparationInstrumentsForInstrument,
		arg.ID,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedAfter,
		arg.UpdatedBefore,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidPreparationInstrumentsForInstrumentRow{}
	for rows.Next() {
		var i GetValidPreparationInstrumentsForInstrumentRow
		if err := rows.Scan(
			&i.ValidPreparationInstrumentID,
			&i.ValidPreparationInstrumentNotes,
			&i.ValidPreparationID,
			&i.ValidPreparationName,
			&i.ValidPreparationDescription,
			&i.ValidPreparationIconPath,
			&i.ValidPreparationYieldsNothing,
			&i.ValidPreparationRestrictToIngredients,
			&i.ValidPreparationPastTense,
			&i.ValidPreparationSlug,
			&i.ValidPreparationMinimumIngredientCount,
			&i.ValidPreparationMaximumIngredientCount,
			&i.ValidPreparationMinimumInstrumentCount,
			&i.ValidPreparationMaximumInstrumentCount,
			&i.ValidPreparationTemperatureRequired,
			&i.ValidPreparationTimeEstimateRequired,
			&i.ValidPreparationConditionExpressionRequired,
			&i.ValidPreparationConsumesVessel,
			&i.ValidPreparationOnlyForVessels,
			&i.ValidPreparationMinimumVesselCount,
			&i.ValidPreparationMaximumVesselCount,
			&i.ValidPreparationLastIndexedAt,
			&i.ValidPreparationCreatedAt,
			&i.ValidPreparationLastUpdatedAt,
			&i.ValidPreparationArchivedAt,
			&i.ValidInstrumentID,
			&i.ValidInstrumentName,
			&i.ValidInstrumentDescription,
			&i.ValidInstrumentIconPath,
			&i.ValidInstrumentPluralName,
			&i.ValidInstrumentUsableForStorage,
			&i.ValidInstrumentSlug,
			&i.ValidInstrumentDisplayInSummaryLists,
			&i.ValidInstrumentIncludeInGeneratedInstructions,
			&i.ValidInstrumentLastIndexedAt,
			&i.ValidInstrumentCreatedAt,
			&i.ValidInstrumentLastUpdatedAt,
			&i.ValidInstrumentArchivedAt,
			&i.ValidPreparationInstrumentCreatedAt,
			&i.ValidPreparationInstrumentLastUpdatedAt,
			&i.ValidPreparationInstrumentArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidPreparationInstrumentsForPreparation = `-- name: GetValidPreparationInstrumentsForPreparation :many

SELECT
	valid_preparation_instruments.id as valid_preparation_instrument_id,
	valid_preparation_instruments.notes as valid_preparation_instrument_notes,
	valid_preparations.id as valid_preparation_id,
	valid_preparations.name as valid_preparation_name,
	valid_preparations.description as valid_preparation_description,
	valid_preparations.icon_path as valid_preparation_icon_path,
	valid_preparations.yields_nothing as valid_preparation_yields_nothing,
	valid_preparations.restrict_to_ingredients as valid_preparation_restrict_to_ingredients,
	valid_preparations.past_tense as valid_preparation_past_tense,
	valid_preparations.slug as valid_preparation_slug,
	valid_preparations.minimum_ingredient_count as valid_preparation_minimum_ingredient_count,
	valid_preparations.maximum_ingredient_count as valid_preparation_maximum_ingredient_count,
	valid_preparations.minimum_instrument_count as valid_preparation_minimum_instrument_count,
	valid_preparations.maximum_instrument_count as valid_preparation_maximum_instrument_count,
	valid_preparations.temperature_required as valid_preparation_temperature_required,
	valid_preparations.time_estimate_required as valid_preparation_time_estimate_required,
	valid_preparations.condition_expression_required as valid_preparation_condition_expression_required,
	valid_preparations.consumes_vessel as valid_preparation_consumes_vessel,
	valid_preparations.only_for_vessels as valid_preparation_only_for_vessels,
	valid_preparations.minimum_vessel_count as valid_preparation_minimum_vessel_count,
	valid_preparations.maximum_vessel_count as valid_preparation_maximum_vessel_count,
	valid_preparations.last_indexed_at as valid_preparation_last_indexed_at,
	valid_preparations.created_at as valid_preparation_created_at,
	valid_preparations.last_updated_at as valid_preparation_last_updated_at,
	valid_preparations.archived_at as valid_preparation_archived_at,
	valid_instruments.id as valid_instrument_id,
	valid_instruments.name as valid_instrument_name,
	valid_instruments.description as valid_instrument_description,
	valid_instruments.icon_path as valid_instrument_icon_path,
	valid_instruments.plural_name as valid_instrument_plural_name,
	valid_instruments.usable_for_storage as valid_instrument_usable_for_storage,
	valid_instruments.slug as valid_instrument_slug,
	valid_instruments.display_in_summary_lists as valid_instrument_display_in_summary_lists,
	valid_instruments.include_in_generated_instructions as valid_instrument_include_in_generated_instructions,
	valid_instruments.last_indexed_at as valid_instrument_last_indexed_at,
	valid_instruments.created_at as valid_instrument_created_at,
	valid_instruments.last_updated_at as valid_instrument_last_updated_at,
	valid_instruments.archived_at as valid_instrument_archived_at,
	valid_preparation_instruments.created_at as valid_preparation_instrument_created_at,
	valid_preparation_instruments.last_updated_at as valid_preparation_instrument_last_updated_at,
	valid_preparation_instruments.archived_at as valid_preparation_instrument_archived_at,
	(
		SELECT COUNT(valid_preparation_instruments.id)
		FROM valid_preparation_instruments
			JOIN valid_instruments ON valid_preparation_instruments.valid_instrument_id = valid_instruments.id
			JOIN valid_preparations ON valid_preparation_instruments.valid_preparation_id = valid_preparations.id
		WHERE
			valid_preparation_instruments.archived_at IS NULL
			AND valid_instruments.archived_at IS NULL
			AND valid_preparations.archived_at IS NULL
			AND valid_preparation_instruments.valid_preparation_id = $1
			AND valid_preparation_instruments.created_at > COALESCE($2, (SELECT NOW() - '999 years'::INTERVAL))
	AND valid_preparation_instruments.created_at < COALESCE($3, (SELECT NOW() + '999 years'::INTERVAL))
	AND (
		valid_preparation_instruments.last_updated_at IS NULL
		OR valid_preparation_instruments.last_updated_at > COALESCE($4, (SELECT NOW() - '999 years'::INTERVAL))
	)
	AND (
		valid_preparation_instruments.last_updated_at IS NULL
		OR valid_preparation_instruments.last_updated_at < COALESCE($5, (SELECT NOW() + '999 years'::INTERVAL))
	)
	) as filtered_count,
	(
		SELECT COUNT(valid_preparation_instruments.id)
		FROM valid_preparation_instruments
			JOIN valid_instruments ON valid_preparation_instruments.valid_instrument_id = valid_instruments.id
			JOIN valid_preparations ON valid_preparation_instruments.valid_preparation_id = valid_preparations.id
		WHERE
			valid_preparation_instruments.archived_at IS NULL
			AND valid_instruments.archived_at IS NULL
			AND valid_preparations.archived_at IS NULL
			AND valid_preparation_instruments.valid_preparation_id = $1
	) as total_count
FROM valid_preparation_instruments
	JOIN valid_instruments ON valid_preparation_instruments.valid_instrument_id = valid_instruments.id
	JOIN valid_preparations ON valid_preparation_instruments.valid_preparation_id = valid_preparations.id
WHERE
	valid_preparation_instruments.archived_at IS NULL
	AND valid_preparation_instruments.valid_preparation_id = $1
	AND valid_instruments.archived_at IS NULL
	AND valid_preparations.archived_at IS NULL
	AND valid_preparation_instruments.created_at > COALESCE($2, (SELECT NOW() - '999 years'::INTERVAL))
	AND valid_preparation_instruments.created_at < COALESCE($3, (SELECT NOW() + '999 years'::INTERVAL))
	AND (
		valid_preparation_instruments.last_updated_at IS NULL
		OR valid_preparation_instruments.last_updated_at > COALESCE($4, (SELECT NOW() - '999 years'::INTERVAL))
	)
	AND (
		valid_preparation_instruments.last_updated_at IS NULL
		OR valid_preparation_instruments.last_updated_at < COALESCE($5, (SELECT NOW() + '999 years'::INTERVAL))
	)
GROUP BY
	valid_preparation_instruments.id,
	valid_preparations.id,
	valid_instruments.id
ORDER BY valid_preparation_instruments.id
LIMIT $7
OFFSET $6
`

type GetValidPreparationInstrumentsForPreparationParams struct {
	ID            string
	CreatedAfter  sql.NullTime
	CreatedBefore sql.NullTime
	UpdatedAfter  sql.NullTime
	UpdatedBefore sql.NullTime
	QueryOffset   sql.NullInt32
	QueryLimit    sql.NullInt32
}

type GetValidPreparationInstrumentsForPreparationRow struct {
	ValidPreparationInstrumentCreatedAt           time.Time
	ValidPreparationCreatedAt                     time.Time
	ValidInstrumentCreatedAt                      time.Time
	ValidPreparationLastIndexedAt                 sql.NullTime
	ValidPreparationInstrumentArchivedAt          sql.NullTime
	ValidPreparationArchivedAt                    sql.NullTime
	ValidPreparationLastUpdatedAt                 sql.NullTime
	ValidInstrumentLastIndexedAt                  sql.NullTime
	ValidInstrumentLastUpdatedAt                  sql.NullTime
	ValidInstrumentArchivedAt                     sql.NullTime
	ValidPreparationInstrumentLastUpdatedAt       sql.NullTime
	ValidPreparationInstrumentID                  string
	ValidPreparationIconPath                      string
	ValidInstrumentPluralName                     string
	ValidPreparationDescription                   string
	ValidPreparationName                          string
	ValidPreparationSlug                          string
	ValidPreparationPastTense                     string
	ValidPreparationID                            string
	ValidInstrumentIconPath                       string
	ValidInstrumentDescription                    string
	ValidInstrumentSlug                           string
	ValidPreparationInstrumentNotes               string
	ValidInstrumentName                           string
	ValidInstrumentID                             string
	TotalCount                                    int64
	FilteredCount                                 int64
	ValidPreparationMaximumIngredientCount        sql.NullInt32
	ValidPreparationMaximumVesselCount            sql.NullInt32
	ValidPreparationMaximumInstrumentCount        sql.NullInt32
	ValidPreparationMinimumIngredientCount        int32
	ValidPreparationMinimumVesselCount            int32
	ValidPreparationMinimumInstrumentCount        int32
	ValidInstrumentUsableForStorage               bool
	ValidInstrumentDisplayInSummaryLists          bool
	ValidInstrumentIncludeInGeneratedInstructions bool
	ValidPreparationOnlyForVessels                bool
	ValidPreparationConsumesVessel                bool
	ValidPreparationConditionExpressionRequired   bool
	ValidPreparationTimeEstimateRequired          bool
	ValidPreparationTemperatureRequired           bool
	ValidPreparationRestrictToIngredients         bool
	ValidPreparationYieldsNothing                 bool
}

func (q *Queries) GetValidPreparationInstrumentsForPreparation(ctx context.Context, db DBTX, arg *GetValidPreparationInstrumentsForPreparationParams) ([]*GetValidPreparationInstrumentsForPreparationRow, error) {
	rows, err := db.QueryContext(ctx, getValidPreparationInstrumentsForPreparation,
		arg.ID,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedAfter,
		arg.UpdatedBefore,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidPreparationInstrumentsForPreparationRow{}
	for rows.Next() {
		var i GetValidPreparationInstrumentsForPreparationRow
		if err := rows.Scan(
			&i.ValidPreparationInstrumentID,
			&i.ValidPreparationInstrumentNotes,
			&i.ValidPreparationID,
			&i.ValidPreparationName,
			&i.ValidPreparationDescription,
			&i.ValidPreparationIconPath,
			&i.ValidPreparationYieldsNothing,
			&i.ValidPreparationRestrictToIngredients,
			&i.ValidPreparationPastTense,
			&i.ValidPreparationSlug,
			&i.ValidPreparationMinimumIngredientCount,
			&i.ValidPreparationMaximumIngredientCount,
			&i.ValidPreparationMinimumInstrumentCount,
			&i.ValidPreparationMaximumInstrumentCount,
			&i.ValidPreparationTemperatureRequired,
			&i.ValidPreparationTimeEstimateRequired,
			&i.ValidPreparationConditionExpressionRequired,
			&i.ValidPreparationConsumesVessel,
			&i.ValidPreparationOnlyForVessels,
			&i.ValidPreparationMinimumVesselCount,
			&i.ValidPreparationMaximumVesselCount,
			&i.ValidPreparationLastIndexedAt,
			&i.ValidPreparationCreatedAt,
			&i.ValidPreparationLastUpdatedAt,
			&i.ValidPreparationArchivedAt,
			&i.ValidInstrumentID,
			&i.ValidInstrumentName,
			&i.ValidInstrumentDescription,
			&i.ValidInstrumentIconPath,
			&i.ValidInstrumentPluralName,
			&i.ValidInstrumentUsableForStorage,
			&i.ValidInstrumentSlug,
			&i.ValidInstrumentDisplayInSummaryLists,
			&i.ValidInstrumentIncludeInGeneratedInstructions,
			&i.ValidInstrumentLastIndexedAt,
			&i.ValidInstrumentCreatedAt,
			&i.ValidInstrumentLastUpdatedAt,
			&i.ValidInstrumentArchivedAt,
			&i.ValidPreparationInstrumentCreatedAt,
			&i.ValidPreparationInstrumentLastUpdatedAt,
			&i.ValidPreparationInstrumentArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateValidPreparationInstrument = `-- name: UpdateValidPreparationInstrument :execrows

UPDATE valid_preparation_instruments SET
	notes = $1,
	valid_preparation_id = $2,
	valid_instrument_id = $3,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND id = $4
`

type UpdateValidPreparationInstrumentParams struct {
	Notes              string
	ValidPreparationID string
	ValidInstrumentID  string
	ID                 string
}

func (q *Queries) UpdateValidPreparationInstrument(ctx context.Context, db DBTX, arg *UpdateValidPreparationInstrumentParams) (int64, error) {
	result, err := db.ExecContext(ctx, updateValidPreparationInstrument,
		arg.Notes,
		arg.ValidPreparationID,
		arg.ValidInstrumentID,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const validPreparationInstrumentPairIsValid = `-- name: ValidPreparationInstrumentPairIsValid :one

SELECT EXISTS(
	SELECT valid_preparation_instruments.id
	FROM valid_preparation_instruments
	WHERE valid_instrument_id = $1
	AND valid_preparation_id = $2
	AND archived_at IS NULL
)
`

type ValidPreparationInstrumentPairIsValidParams struct {
	ValidInstrumentID  string
	ValidPreparationID string
}

func (q *Queries) ValidPreparationInstrumentPairIsValid(ctx context.Context, db DBTX, arg *ValidPreparationInstrumentPairIsValidParams) (bool, error) {
	row := db.QueryRowContext(ctx, validPreparationInstrumentPairIsValid, arg.ValidInstrumentID, arg.ValidPreparationID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
