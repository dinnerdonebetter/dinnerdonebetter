// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: recipe_step_ingredients.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const archiveRecipeStepIngredient = `-- name: ArchiveRecipeStepIngredient :execrows

UPDATE recipe_step_ingredients SET archived_at = NOW() WHERE archived_at IS NULL AND belongs_to_recipe_step = $1 AND id = $2
`

type ArchiveRecipeStepIngredientParams struct {
	BelongsToRecipeStep string
	ID                  string
}

func (q *Queries) ArchiveRecipeStepIngredient(ctx context.Context, db DBTX, arg *ArchiveRecipeStepIngredientParams) (int64, error) {
	result, err := db.ExecContext(ctx, archiveRecipeStepIngredient, arg.BelongsToRecipeStep, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const checkRecipeStepIngredientExistence = `-- name: CheckRecipeStepIngredientExistence :one

SELECT EXISTS (
	SELECT recipe_step_ingredients.id
	FROM recipe_step_ingredients
		JOIN recipe_steps ON recipe_step_ingredients.belongs_to_recipe_step=recipe_steps.id
		JOIN recipes ON recipe_steps.belongs_to_recipe=recipes.id
	WHERE recipe_step_ingredients.archived_at IS NULL
		AND recipe_step_ingredients.belongs_to_recipe_step = $1
		AND recipe_step_ingredients.id = $2
		AND recipe_steps.archived_at IS NULL
		AND recipe_steps.belongs_to_recipe = $3
		AND recipe_steps.id = $1
		AND recipes.archived_at IS NULL
		AND recipes.id = $3
)
`

type CheckRecipeStepIngredientExistenceParams struct {
	RecipeStepID           string
	RecipeStepIngredientID string
	RecipeID               string
}

func (q *Queries) CheckRecipeStepIngredientExistence(ctx context.Context, db DBTX, arg *CheckRecipeStepIngredientExistenceParams) (bool, error) {
	row := db.QueryRowContext(ctx, checkRecipeStepIngredientExistence, arg.RecipeStepID, arg.RecipeStepIngredientID, arg.RecipeID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createRecipeStepIngredient = `-- name: CreateRecipeStepIngredient :exec

INSERT INTO recipe_step_ingredients (
	id,
	name,
	optional,
	ingredient_id,
	measurement_unit,
	minimum_quantity_value,
	maximum_quantity_value,
	quantity_notes,
	recipe_step_product_id,
	ingredient_notes,
	option_index,
	to_taste,
	product_percentage_to_use,
	vessel_index,
	recipe_step_product_recipe_id,
	belongs_to_recipe_step
) VALUES (
	$1,
	$2,
	$3,
	$4,
	$5,
	$6,
	$7,
	$8,
	$9,
	$10,
	$11,
	$12,
	$13,
	$14,
	$15,
	$16
)
`

type CreateRecipeStepIngredientParams struct {
	QuantityNotes             string
	Name                      string
	BelongsToRecipeStep       string
	IngredientNotes           string
	ID                        string
	MinimumQuantityValue      string
	RecipeStepProductID       sql.NullString
	MaximumQuantityValue      sql.NullString
	MeasurementUnit           sql.NullString
	IngredientID              sql.NullString
	ProductPercentageToUse    sql.NullString
	RecipeStepProductRecipeID sql.NullString
	VesselIndex               sql.NullInt32
	OptionIndex               int32
	ToTaste                   bool
	Optional                  bool
}

func (q *Queries) CreateRecipeStepIngredient(ctx context.Context, db DBTX, arg *CreateRecipeStepIngredientParams) error {
	_, err := db.ExecContext(ctx, createRecipeStepIngredient,
		arg.ID,
		arg.Name,
		arg.Optional,
		arg.IngredientID,
		arg.MeasurementUnit,
		arg.MinimumQuantityValue,
		arg.MaximumQuantityValue,
		arg.QuantityNotes,
		arg.RecipeStepProductID,
		arg.IngredientNotes,
		arg.OptionIndex,
		arg.ToTaste,
		arg.ProductPercentageToUse,
		arg.VesselIndex,
		arg.RecipeStepProductRecipeID,
		arg.BelongsToRecipeStep,
	)
	return err
}

const getAllRecipeStepIngredientsForRecipe = `-- name: GetAllRecipeStepIngredientsForRecipe :many

SELECT
	recipe_step_ingredients.id,
	recipe_step_ingredients.name,
	recipe_step_ingredients.optional,
	valid_ingredients.id as valid_ingredient_id,
	valid_ingredients.name as valid_ingredient_name,
	valid_ingredients.description as valid_ingredient_description,
	valid_ingredients.warning as valid_ingredient_warning,
	valid_ingredients.contains_egg as valid_ingredient_contains_egg,
	valid_ingredients.contains_dairy as valid_ingredient_contains_dairy,
	valid_ingredients.contains_peanut as valid_ingredient_contains_peanut,
	valid_ingredients.contains_tree_nut as valid_ingredient_contains_tree_nut,
	valid_ingredients.contains_soy as valid_ingredient_contains_soy,
	valid_ingredients.contains_wheat as valid_ingredient_contains_wheat,
	valid_ingredients.contains_shellfish as valid_ingredient_contains_shellfish,
	valid_ingredients.contains_sesame as valid_ingredient_contains_sesame,
	valid_ingredients.contains_fish as valid_ingredient_contains_fish,
	valid_ingredients.contains_gluten as valid_ingredient_contains_gluten,
	valid_ingredients.animal_flesh as valid_ingredient_animal_flesh,
	valid_ingredients.volumetric as valid_ingredient_volumetric,
	valid_ingredients.is_liquid as valid_ingredient_is_liquid,
	valid_ingredients.icon_path as valid_ingredient_icon_path,
	valid_ingredients.animal_derived as valid_ingredient_animal_derived,
	valid_ingredients.plural_name as valid_ingredient_plural_name,
	valid_ingredients.restrict_to_preparations as valid_ingredient_restrict_to_preparations,
	valid_ingredients.minimum_ideal_storage_temperature_in_celsius as valid_ingredient_minimum_ideal_storage_temperature_in_celsius,
	valid_ingredients.maximum_ideal_storage_temperature_in_celsius as valid_ingredient_maximum_ideal_storage_temperature_in_celsius,
	valid_ingredients.storage_instructions as valid_ingredient_storage_instructions,
	valid_ingredients.slug as valid_ingredient_slug,
	valid_ingredients.contains_alcohol as valid_ingredient_contains_alcohol,
	valid_ingredients.shopping_suggestions as valid_ingredient_shopping_suggestions,
	valid_ingredients.is_starch as valid_ingredient_is_starch,
	valid_ingredients.is_protein as valid_ingredient_is_protein,
	valid_ingredients.is_grain as valid_ingredient_is_grain,
	valid_ingredients.is_fruit as valid_ingredient_is_fruit,
	valid_ingredients.is_salt as valid_ingredient_is_salt,
	valid_ingredients.is_fat as valid_ingredient_is_fat,
	valid_ingredients.is_acid as valid_ingredient_is_acid,
	valid_ingredients.is_heat as valid_ingredient_is_heat,
	valid_ingredients.last_indexed_at as valid_ingredient_last_indexed_at,
	valid_ingredients.created_at as valid_ingredient_created_at,
	valid_ingredients.last_updated_at as valid_ingredient_last_updated_at,
	valid_ingredients.archived_at as valid_ingredient_archived_at,
	valid_measurement_units.id as valid_measurement_unit_id,
	valid_measurement_units.name as valid_measurement_unit_name,
	valid_measurement_units.description as valid_measurement_unit_description,
	valid_measurement_units.volumetric as valid_measurement_unit_volumetric,
	valid_measurement_units.icon_path as valid_measurement_unit_icon_path,
	valid_measurement_units.universal as valid_measurement_unit_universal,
	valid_measurement_units.metric as valid_measurement_unit_metric,
	valid_measurement_units.imperial as valid_measurement_unit_imperial,
	valid_measurement_units.slug as valid_measurement_unit_slug,
	valid_measurement_units.plural_name as valid_measurement_unit_plural_name,
	valid_measurement_units.last_indexed_at as valid_measurement_unit_last_indexed_at,
	valid_measurement_units.created_at as valid_measurement_unit_created_at,
	valid_measurement_units.last_updated_at as valid_measurement_unit_last_updated_at,
	valid_measurement_units.archived_at as valid_measurement_unit_archived_at,
	recipe_step_ingredients.minimum_quantity_value,
	recipe_step_ingredients.maximum_quantity_value,
	recipe_step_ingredients.quantity_notes,
	recipe_step_ingredients.recipe_step_product_id,
	recipe_step_ingredients.ingredient_notes,
	recipe_step_ingredients.option_index,
	recipe_step_ingredients.to_taste,
	recipe_step_ingredients.product_percentage_to_use,
	recipe_step_ingredients.vessel_index,
	recipe_step_ingredients.created_at,
	recipe_step_ingredients.last_updated_at,
	recipe_step_ingredients.archived_at,
	recipe_step_ingredients.recipe_step_product_recipe_id,
	recipe_step_ingredients.belongs_to_recipe_step
FROM recipe_step_ingredients
	JOIN recipe_steps ON recipe_step_ingredients.belongs_to_recipe_step = recipe_steps.id
	JOIN recipes ON recipe_steps.belongs_to_recipe = recipes.id
	LEFT JOIN valid_ingredients ON recipe_step_ingredients.ingredient_id = valid_ingredients.id
	JOIN valid_measurement_units ON recipe_step_ingredients.measurement_unit = valid_measurement_units.id
WHERE
	recipe_step_ingredients.archived_at IS NULL
	AND recipes.id = $1
	AND recipe_steps.belongs_to_recipe = $1
`

type GetAllRecipeStepIngredientsForRecipeRow struct {
	CreatedAt                                              time.Time
	ValidMeasurementUnitCreatedAt                          time.Time
	ValidMeasurementUnitLastIndexedAt                      sql.NullTime
	ValidIngredientLastUpdatedAt                           sql.NullTime
	ValidIngredientCreatedAt                               sql.NullTime
	ValidMeasurementUnitArchivedAt                         sql.NullTime
	ValidIngredientArchivedAt                              sql.NullTime
	ValidMeasurementUnitLastUpdatedAt                      sql.NullTime
	ArchivedAt                                             sql.NullTime
	LastUpdatedAt                                          sql.NullTime
	ValidIngredientLastIndexedAt                           sql.NullTime
	Name                                                   string
	ValidMeasurementUnitID                                 string
	ValidMeasurementUnitName                               string
	IngredientNotes                                        string
	ValidMeasurementUnitDescription                        string
	QuantityNotes                                          string
	ID                                                     string
	ValidMeasurementUnitIconPath                           string
	MinimumQuantityValue                                   string
	BelongsToRecipeStep                                    string
	ValidMeasurementUnitSlug                               string
	ValidMeasurementUnitPluralName                         string
	MaximumQuantityValue                                   sql.NullString
	ValidIngredientIconPath                                sql.NullString
	ProductPercentageToUse                                 sql.NullString
	ValidIngredientStorageInstructions                     sql.NullString
	ValidIngredientPluralName                              sql.NullString
	RecipeStepProductRecipeID                              sql.NullString
	ValidIngredientShoppingSuggestions                     sql.NullString
	ValidIngredientID                                      sql.NullString
	ValidIngredientSlug                                    sql.NullString
	ValidIngredientName                                    sql.NullString
	ValidIngredientMinimumIdealStorageTemperatureInCelsius sql.NullString
	RecipeStepProductID                                    sql.NullString
	ValidIngredientDescription                             sql.NullString
	ValidIngredientMaximumIdealStorageTemperatureInCelsius sql.NullString
	ValidIngredientWarning                                 sql.NullString
	VesselIndex                                            sql.NullInt32
	OptionIndex                                            int32
	ValidIngredientAnimalFlesh                             sql.NullBool
	ValidIngredientContainsAlcohol                         sql.NullBool
	ValidIngredientIsAcid                                  sql.NullBool
	ValidIngredientIsFat                                   sql.NullBool
	ValidIngredientIsSalt                                  sql.NullBool
	ValidMeasurementUnitVolumetric                         sql.NullBool
	ValidIngredientIsFruit                                 sql.NullBool
	ValidIngredientContainsEgg                             sql.NullBool
	ValidIngredientIsHeat                                  sql.NullBool
	ValidIngredientContainsDairy                           sql.NullBool
	ValidIngredientIsGrain                                 sql.NullBool
	ValidIngredientIsProtein                               sql.NullBool
	ValidIngredientIsStarch                                sql.NullBool
	ValidIngredientContainsTreeNut                         sql.NullBool
	ValidIngredientRestrictToPreparations                  sql.NullBool
	ValidIngredientAnimalDerived                           sql.NullBool
	ValidIngredientIsLiquid                                sql.NullBool
	ValidIngredientVolumetric                              sql.NullBool
	ValidIngredientContainsGluten                          sql.NullBool
	ValidIngredientContainsFish                            sql.NullBool
	ValidIngredientContainsSesame                          sql.NullBool
	ValidIngredientContainsShellfish                       sql.NullBool
	ValidIngredientContainsPeanut                          sql.NullBool
	ValidIngredientContainsWheat                           sql.NullBool
	ValidIngredientContainsSoy                             sql.NullBool
	ValidMeasurementUnitMetric                             bool
	ToTaste                                                bool
	ValidMeasurementUnitImperial                           bool
	ValidMeasurementUnitUniversal                          bool
	Optional                                               bool
}

func (q *Queries) GetAllRecipeStepIngredientsForRecipe(ctx context.Context, db DBTX, recipeID string) ([]*GetAllRecipeStepIngredientsForRecipeRow, error) {
	rows, err := db.QueryContext(ctx, getAllRecipeStepIngredientsForRecipe, recipeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetAllRecipeStepIngredientsForRecipeRow{}
	for rows.Next() {
		var i GetAllRecipeStepIngredientsForRecipeRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Optional,
			&i.ValidIngredientID,
			&i.ValidIngredientName,
			&i.ValidIngredientDescription,
			&i.ValidIngredientWarning,
			&i.ValidIngredientContainsEgg,
			&i.ValidIngredientContainsDairy,
			&i.ValidIngredientContainsPeanut,
			&i.ValidIngredientContainsTreeNut,
			&i.ValidIngredientContainsSoy,
			&i.ValidIngredientContainsWheat,
			&i.ValidIngredientContainsShellfish,
			&i.ValidIngredientContainsSesame,
			&i.ValidIngredientContainsFish,
			&i.ValidIngredientContainsGluten,
			&i.ValidIngredientAnimalFlesh,
			&i.ValidIngredientVolumetric,
			&i.ValidIngredientIsLiquid,
			&i.ValidIngredientIconPath,
			&i.ValidIngredientAnimalDerived,
			&i.ValidIngredientPluralName,
			&i.ValidIngredientRestrictToPreparations,
			&i.ValidIngredientMinimumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientMaximumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientStorageInstructions,
			&i.ValidIngredientSlug,
			&i.ValidIngredientContainsAlcohol,
			&i.ValidIngredientShoppingSuggestions,
			&i.ValidIngredientIsStarch,
			&i.ValidIngredientIsProtein,
			&i.ValidIngredientIsGrain,
			&i.ValidIngredientIsFruit,
			&i.ValidIngredientIsSalt,
			&i.ValidIngredientIsFat,
			&i.ValidIngredientIsAcid,
			&i.ValidIngredientIsHeat,
			&i.ValidIngredientLastIndexedAt,
			&i.ValidIngredientCreatedAt,
			&i.ValidIngredientLastUpdatedAt,
			&i.ValidIngredientArchivedAt,
			&i.ValidMeasurementUnitID,
			&i.ValidMeasurementUnitName,
			&i.ValidMeasurementUnitDescription,
			&i.ValidMeasurementUnitVolumetric,
			&i.ValidMeasurementUnitIconPath,
			&i.ValidMeasurementUnitUniversal,
			&i.ValidMeasurementUnitMetric,
			&i.ValidMeasurementUnitImperial,
			&i.ValidMeasurementUnitSlug,
			&i.ValidMeasurementUnitPluralName,
			&i.ValidMeasurementUnitLastIndexedAt,
			&i.ValidMeasurementUnitCreatedAt,
			&i.ValidMeasurementUnitLastUpdatedAt,
			&i.ValidMeasurementUnitArchivedAt,
			&i.MinimumQuantityValue,
			&i.MaximumQuantityValue,
			&i.QuantityNotes,
			&i.RecipeStepProductID,
			&i.IngredientNotes,
			&i.OptionIndex,
			&i.ToTaste,
			&i.ProductPercentageToUse,
			&i.VesselIndex,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.RecipeStepProductRecipeID,
			&i.BelongsToRecipeStep,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecipeStepIngredient = `-- name: GetRecipeStepIngredient :one

SELECT
	recipe_step_ingredients.id,
	recipe_step_ingredients.name,
	recipe_step_ingredients.optional,
	valid_ingredients.id as valid_ingredient_id,
	valid_ingredients.name as valid_ingredient_name,
	valid_ingredients.description as valid_ingredient_description,
	valid_ingredients.warning as valid_ingredient_warning,
	valid_ingredients.contains_egg as valid_ingredient_contains_egg,
	valid_ingredients.contains_dairy as valid_ingredient_contains_dairy,
	valid_ingredients.contains_peanut as valid_ingredient_contains_peanut,
	valid_ingredients.contains_tree_nut as valid_ingredient_contains_tree_nut,
	valid_ingredients.contains_soy as valid_ingredient_contains_soy,
	valid_ingredients.contains_wheat as valid_ingredient_contains_wheat,
	valid_ingredients.contains_shellfish as valid_ingredient_contains_shellfish,
	valid_ingredients.contains_sesame as valid_ingredient_contains_sesame,
	valid_ingredients.contains_fish as valid_ingredient_contains_fish,
	valid_ingredients.contains_gluten as valid_ingredient_contains_gluten,
	valid_ingredients.animal_flesh as valid_ingredient_animal_flesh,
	valid_ingredients.volumetric as valid_ingredient_volumetric,
	valid_ingredients.is_liquid as valid_ingredient_is_liquid,
	valid_ingredients.icon_path as valid_ingredient_icon_path,
	valid_ingredients.animal_derived as valid_ingredient_animal_derived,
	valid_ingredients.plural_name as valid_ingredient_plural_name,
	valid_ingredients.restrict_to_preparations as valid_ingredient_restrict_to_preparations,
	valid_ingredients.minimum_ideal_storage_temperature_in_celsius as valid_ingredient_minimum_ideal_storage_temperature_in_celsius,
	valid_ingredients.maximum_ideal_storage_temperature_in_celsius as valid_ingredient_maximum_ideal_storage_temperature_in_celsius,
	valid_ingredients.storage_instructions as valid_ingredient_storage_instructions,
	valid_ingredients.slug as valid_ingredient_slug,
	valid_ingredients.contains_alcohol as valid_ingredient_contains_alcohol,
	valid_ingredients.shopping_suggestions as valid_ingredient_shopping_suggestions,
	valid_ingredients.is_starch as valid_ingredient_is_starch,
	valid_ingredients.is_protein as valid_ingredient_is_protein,
	valid_ingredients.is_grain as valid_ingredient_is_grain,
	valid_ingredients.is_fruit as valid_ingredient_is_fruit,
	valid_ingredients.is_salt as valid_ingredient_is_salt,
	valid_ingredients.is_fat as valid_ingredient_is_fat,
	valid_ingredients.is_acid as valid_ingredient_is_acid,
	valid_ingredients.is_heat as valid_ingredient_is_heat,
	valid_ingredients.last_indexed_at as valid_ingredient_last_indexed_at,
	valid_ingredients.created_at as valid_ingredient_created_at,
	valid_ingredients.last_updated_at as valid_ingredient_last_updated_at,
	valid_ingredients.archived_at as valid_ingredient_archived_at,
	valid_measurement_units.id as valid_measurement_unit_id,
	valid_measurement_units.name as valid_measurement_unit_name,
	valid_measurement_units.description as valid_measurement_unit_description,
	valid_measurement_units.volumetric as valid_measurement_unit_volumetric,
	valid_measurement_units.icon_path as valid_measurement_unit_icon_path,
	valid_measurement_units.universal as valid_measurement_unit_universal,
	valid_measurement_units.metric as valid_measurement_unit_metric,
	valid_measurement_units.imperial as valid_measurement_unit_imperial,
	valid_measurement_units.slug as valid_measurement_unit_slug,
	valid_measurement_units.plural_name as valid_measurement_unit_plural_name,
	valid_measurement_units.last_indexed_at as valid_measurement_unit_last_indexed_at,
	valid_measurement_units.created_at as valid_measurement_unit_created_at,
	valid_measurement_units.last_updated_at as valid_measurement_unit_last_updated_at,
	valid_measurement_units.archived_at as valid_measurement_unit_archived_at,
	recipe_step_ingredients.minimum_quantity_value,
	recipe_step_ingredients.maximum_quantity_value,
	recipe_step_ingredients.quantity_notes,
	recipe_step_ingredients.recipe_step_product_id,
	recipe_step_ingredients.ingredient_notes,
	recipe_step_ingredients.option_index,
	recipe_step_ingredients.to_taste,
	recipe_step_ingredients.product_percentage_to_use,
	recipe_step_ingredients.vessel_index,
	recipe_step_ingredients.created_at,
	recipe_step_ingredients.last_updated_at,
	recipe_step_ingredients.archived_at,
	recipe_step_ingredients.recipe_step_product_recipe_id,
	recipe_step_ingredients.belongs_to_recipe_step
FROM recipe_step_ingredients
	JOIN recipe_steps ON recipe_step_ingredients.belongs_to_recipe_step = recipe_steps.id
	JOIN recipes ON recipe_steps.belongs_to_recipe = recipes.id
	LEFT JOIN valid_ingredients ON recipe_step_ingredients.ingredient_id = valid_ingredients.id
	JOIN valid_measurement_units ON recipe_step_ingredients.measurement_unit = valid_measurement_units.id
WHERE recipe_step_ingredients.archived_at IS NULL
	AND recipe_step_ingredients.belongs_to_recipe_step = $1
	AND recipe_step_ingredients.id = $2
	AND recipe_steps.archived_at IS NULL
	AND recipe_steps.belongs_to_recipe = $3
	AND recipe_steps.id = $1
	AND recipes.archived_at IS NULL
	AND recipes.id = $3
`

type GetRecipeStepIngredientParams struct {
	RecipeStepID           string
	RecipeStepIngredientID string
	RecipeID               string
}

type GetRecipeStepIngredientRow struct {
	CreatedAt                                              time.Time
	ValidMeasurementUnitCreatedAt                          time.Time
	ValidMeasurementUnitLastIndexedAt                      sql.NullTime
	ValidIngredientLastUpdatedAt                           sql.NullTime
	ValidIngredientCreatedAt                               sql.NullTime
	ValidMeasurementUnitArchivedAt                         sql.NullTime
	ValidIngredientArchivedAt                              sql.NullTime
	ValidMeasurementUnitLastUpdatedAt                      sql.NullTime
	ArchivedAt                                             sql.NullTime
	LastUpdatedAt                                          sql.NullTime
	ValidIngredientLastIndexedAt                           sql.NullTime
	Name                                                   string
	ValidMeasurementUnitID                                 string
	ValidMeasurementUnitName                               string
	IngredientNotes                                        string
	ValidMeasurementUnitDescription                        string
	QuantityNotes                                          string
	ID                                                     string
	ValidMeasurementUnitIconPath                           string
	MinimumQuantityValue                                   string
	BelongsToRecipeStep                                    string
	ValidMeasurementUnitSlug                               string
	ValidMeasurementUnitPluralName                         string
	MaximumQuantityValue                                   sql.NullString
	ValidIngredientIconPath                                sql.NullString
	ProductPercentageToUse                                 sql.NullString
	ValidIngredientStorageInstructions                     sql.NullString
	ValidIngredientPluralName                              sql.NullString
	RecipeStepProductRecipeID                              sql.NullString
	ValidIngredientShoppingSuggestions                     sql.NullString
	ValidIngredientID                                      sql.NullString
	ValidIngredientSlug                                    sql.NullString
	ValidIngredientName                                    sql.NullString
	ValidIngredientMinimumIdealStorageTemperatureInCelsius sql.NullString
	RecipeStepProductID                                    sql.NullString
	ValidIngredientDescription                             sql.NullString
	ValidIngredientMaximumIdealStorageTemperatureInCelsius sql.NullString
	ValidIngredientWarning                                 sql.NullString
	VesselIndex                                            sql.NullInt32
	OptionIndex                                            int32
	ValidIngredientAnimalFlesh                             sql.NullBool
	ValidIngredientContainsAlcohol                         sql.NullBool
	ValidIngredientIsAcid                                  sql.NullBool
	ValidIngredientIsFat                                   sql.NullBool
	ValidIngredientIsSalt                                  sql.NullBool
	ValidMeasurementUnitVolumetric                         sql.NullBool
	ValidIngredientIsFruit                                 sql.NullBool
	ValidIngredientContainsEgg                             sql.NullBool
	ValidIngredientIsHeat                                  sql.NullBool
	ValidIngredientContainsDairy                           sql.NullBool
	ValidIngredientIsGrain                                 sql.NullBool
	ValidIngredientIsProtein                               sql.NullBool
	ValidIngredientIsStarch                                sql.NullBool
	ValidIngredientContainsTreeNut                         sql.NullBool
	ValidIngredientRestrictToPreparations                  sql.NullBool
	ValidIngredientAnimalDerived                           sql.NullBool
	ValidIngredientIsLiquid                                sql.NullBool
	ValidIngredientVolumetric                              sql.NullBool
	ValidIngredientContainsGluten                          sql.NullBool
	ValidIngredientContainsFish                            sql.NullBool
	ValidIngredientContainsSesame                          sql.NullBool
	ValidIngredientContainsShellfish                       sql.NullBool
	ValidIngredientContainsPeanut                          sql.NullBool
	ValidIngredientContainsWheat                           sql.NullBool
	ValidIngredientContainsSoy                             sql.NullBool
	ValidMeasurementUnitMetric                             bool
	ToTaste                                                bool
	ValidMeasurementUnitImperial                           bool
	ValidMeasurementUnitUniversal                          bool
	Optional                                               bool
}

func (q *Queries) GetRecipeStepIngredient(ctx context.Context, db DBTX, arg *GetRecipeStepIngredientParams) (*GetRecipeStepIngredientRow, error) {
	row := db.QueryRowContext(ctx, getRecipeStepIngredient, arg.RecipeStepID, arg.RecipeStepIngredientID, arg.RecipeID)
	var i GetRecipeStepIngredientRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Optional,
		&i.ValidIngredientID,
		&i.ValidIngredientName,
		&i.ValidIngredientDescription,
		&i.ValidIngredientWarning,
		&i.ValidIngredientContainsEgg,
		&i.ValidIngredientContainsDairy,
		&i.ValidIngredientContainsPeanut,
		&i.ValidIngredientContainsTreeNut,
		&i.ValidIngredientContainsSoy,
		&i.ValidIngredientContainsWheat,
		&i.ValidIngredientContainsShellfish,
		&i.ValidIngredientContainsSesame,
		&i.ValidIngredientContainsFish,
		&i.ValidIngredientContainsGluten,
		&i.ValidIngredientAnimalFlesh,
		&i.ValidIngredientVolumetric,
		&i.ValidIngredientIsLiquid,
		&i.ValidIngredientIconPath,
		&i.ValidIngredientAnimalDerived,
		&i.ValidIngredientPluralName,
		&i.ValidIngredientRestrictToPreparations,
		&i.ValidIngredientMinimumIdealStorageTemperatureInCelsius,
		&i.ValidIngredientMaximumIdealStorageTemperatureInCelsius,
		&i.ValidIngredientStorageInstructions,
		&i.ValidIngredientSlug,
		&i.ValidIngredientContainsAlcohol,
		&i.ValidIngredientShoppingSuggestions,
		&i.ValidIngredientIsStarch,
		&i.ValidIngredientIsProtein,
		&i.ValidIngredientIsGrain,
		&i.ValidIngredientIsFruit,
		&i.ValidIngredientIsSalt,
		&i.ValidIngredientIsFat,
		&i.ValidIngredientIsAcid,
		&i.ValidIngredientIsHeat,
		&i.ValidIngredientLastIndexedAt,
		&i.ValidIngredientCreatedAt,
		&i.ValidIngredientLastUpdatedAt,
		&i.ValidIngredientArchivedAt,
		&i.ValidMeasurementUnitID,
		&i.ValidMeasurementUnitName,
		&i.ValidMeasurementUnitDescription,
		&i.ValidMeasurementUnitVolumetric,
		&i.ValidMeasurementUnitIconPath,
		&i.ValidMeasurementUnitUniversal,
		&i.ValidMeasurementUnitMetric,
		&i.ValidMeasurementUnitImperial,
		&i.ValidMeasurementUnitSlug,
		&i.ValidMeasurementUnitPluralName,
		&i.ValidMeasurementUnitLastIndexedAt,
		&i.ValidMeasurementUnitCreatedAt,
		&i.ValidMeasurementUnitLastUpdatedAt,
		&i.ValidMeasurementUnitArchivedAt,
		&i.MinimumQuantityValue,
		&i.MaximumQuantityValue,
		&i.QuantityNotes,
		&i.RecipeStepProductID,
		&i.IngredientNotes,
		&i.OptionIndex,
		&i.ToTaste,
		&i.ProductPercentageToUse,
		&i.VesselIndex,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.ArchivedAt,
		&i.RecipeStepProductRecipeID,
		&i.BelongsToRecipeStep,
	)
	return &i, err
}

const getRecipeStepIngredients = `-- name: GetRecipeStepIngredients :many

SELECT
	recipe_step_ingredients.id,
	recipe_step_ingredients.name,
	recipe_step_ingredients.optional,
	valid_ingredients.id as valid_ingredient_id,
	valid_ingredients.name as valid_ingredient_name,
	valid_ingredients.description as valid_ingredient_description,
	valid_ingredients.warning as valid_ingredient_warning,
	valid_ingredients.contains_egg as valid_ingredient_contains_egg,
	valid_ingredients.contains_dairy as valid_ingredient_contains_dairy,
	valid_ingredients.contains_peanut as valid_ingredient_contains_peanut,
	valid_ingredients.contains_tree_nut as valid_ingredient_contains_tree_nut,
	valid_ingredients.contains_soy as valid_ingredient_contains_soy,
	valid_ingredients.contains_wheat as valid_ingredient_contains_wheat,
	valid_ingredients.contains_shellfish as valid_ingredient_contains_shellfish,
	valid_ingredients.contains_sesame as valid_ingredient_contains_sesame,
	valid_ingredients.contains_fish as valid_ingredient_contains_fish,
	valid_ingredients.contains_gluten as valid_ingredient_contains_gluten,
	valid_ingredients.animal_flesh as valid_ingredient_animal_flesh,
	valid_ingredients.volumetric as valid_ingredient_volumetric,
	valid_ingredients.is_liquid as valid_ingredient_is_liquid,
	valid_ingredients.icon_path as valid_ingredient_icon_path,
	valid_ingredients.animal_derived as valid_ingredient_animal_derived,
	valid_ingredients.plural_name as valid_ingredient_plural_name,
	valid_ingredients.restrict_to_preparations as valid_ingredient_restrict_to_preparations,
	valid_ingredients.minimum_ideal_storage_temperature_in_celsius as valid_ingredient_minimum_ideal_storage_temperature_in_celsius,
	valid_ingredients.maximum_ideal_storage_temperature_in_celsius as valid_ingredient_maximum_ideal_storage_temperature_in_celsius,
	valid_ingredients.storage_instructions as valid_ingredient_storage_instructions,
	valid_ingredients.slug as valid_ingredient_slug,
	valid_ingredients.contains_alcohol as valid_ingredient_contains_alcohol,
	valid_ingredients.shopping_suggestions as valid_ingredient_shopping_suggestions,
	valid_ingredients.is_starch as valid_ingredient_is_starch,
	valid_ingredients.is_protein as valid_ingredient_is_protein,
	valid_ingredients.is_grain as valid_ingredient_is_grain,
	valid_ingredients.is_fruit as valid_ingredient_is_fruit,
	valid_ingredients.is_salt as valid_ingredient_is_salt,
	valid_ingredients.is_fat as valid_ingredient_is_fat,
	valid_ingredients.is_acid as valid_ingredient_is_acid,
	valid_ingredients.is_heat as valid_ingredient_is_heat,
	valid_ingredients.last_indexed_at as valid_ingredient_last_indexed_at,
	valid_ingredients.created_at as valid_ingredient_created_at,
	valid_ingredients.last_updated_at as valid_ingredient_last_updated_at,
	valid_ingredients.archived_at as valid_ingredient_archived_at,
	valid_measurement_units.id as valid_measurement_unit_id,
	valid_measurement_units.name as valid_measurement_unit_name,
	valid_measurement_units.description as valid_measurement_unit_description,
	valid_measurement_units.volumetric as valid_measurement_unit_volumetric,
	valid_measurement_units.icon_path as valid_measurement_unit_icon_path,
	valid_measurement_units.universal as valid_measurement_unit_universal,
	valid_measurement_units.metric as valid_measurement_unit_metric,
	valid_measurement_units.imperial as valid_measurement_unit_imperial,
	valid_measurement_units.slug as valid_measurement_unit_slug,
	valid_measurement_units.plural_name as valid_measurement_unit_plural_name,
	valid_measurement_units.last_indexed_at as valid_measurement_unit_last_indexed_at,
	valid_measurement_units.created_at as valid_measurement_unit_created_at,
	valid_measurement_units.last_updated_at as valid_measurement_unit_last_updated_at,
	valid_measurement_units.archived_at as valid_measurement_unit_archived_at,
	recipe_step_ingredients.minimum_quantity_value,
	recipe_step_ingredients.maximum_quantity_value,
	recipe_step_ingredients.quantity_notes,
	recipe_step_ingredients.recipe_step_product_id,
	recipe_step_ingredients.ingredient_notes,
	recipe_step_ingredients.option_index,
	recipe_step_ingredients.to_taste,
	recipe_step_ingredients.product_percentage_to_use,
	recipe_step_ingredients.vessel_index,
	recipe_step_ingredients.created_at,
	recipe_step_ingredients.last_updated_at,
	recipe_step_ingredients.archived_at,
	recipe_step_ingredients.recipe_step_product_recipe_id,
	recipe_step_ingredients.belongs_to_recipe_step,
	(
		SELECT COUNT(recipe_step_ingredients.id)
		FROM recipe_step_ingredients
			JOIN recipe_steps ON recipe_step_ingredients.belongs_to_recipe_step = recipe_steps.id
			JOIN recipes ON recipe_steps.belongs_to_recipe = recipes.id
		WHERE
			recipe_step_ingredients.archived_at IS NULL
			AND recipes.id = $1
			AND recipe_steps.id = $2
			AND recipe_steps.belongs_to_recipe = $1
			AND recipe_step_ingredients.belongs_to_recipe_step = $2
			AND recipe_step_ingredients.created_at > COALESCE($3, (SELECT NOW() - '999 years'::INTERVAL))
			AND recipe_step_ingredients.created_at < COALESCE($4, (SELECT NOW() + '999 years'::INTERVAL))
			AND (
				recipe_step_ingredients.last_updated_at IS NULL
				OR recipe_step_ingredients.last_updated_at > COALESCE($5, (SELECT NOW() - '999 years'::INTERVAL))
			)
			AND (
				recipe_step_ingredients.last_updated_at IS NULL
				OR recipe_step_ingredients.last_updated_at < COALESCE($6, (SELECT NOW() + '999 years'::INTERVAL))
			)
	) as filtered_count,
	(
		SELECT COUNT(recipe_step_ingredients.id)
		FROM recipe_step_ingredients
			JOIN recipe_steps ON recipe_step_ingredients.belongs_to_recipe_step = recipe_steps.id
			JOIN recipes ON recipe_steps.belongs_to_recipe = recipes.id
		WHERE recipe_step_ingredients.archived_at IS NULL
			AND recipes.id = $1
			AND recipe_step_ingredients.belongs_to_recipe_step = $2
	) as total_count
FROM recipe_step_ingredients
	JOIN recipe_steps ON recipe_step_ingredients.belongs_to_recipe_step = recipe_steps.id
	JOIN recipes ON recipe_steps.belongs_to_recipe = recipes.id
	LEFT JOIN valid_ingredients ON recipe_step_ingredients.ingredient_id = valid_ingredients.id
	JOIN valid_measurement_units ON recipe_step_ingredients.measurement_unit = valid_measurement_units.id
WHERE
	recipe_step_ingredients.archived_at IS NULL
	AND recipes.id = $1
	AND recipe_steps.id = $2
	AND recipe_steps.belongs_to_recipe = $1
	AND recipe_step_ingredients.belongs_to_recipe_step = $2
	AND recipe_step_ingredients.created_at > COALESCE($3, (SELECT NOW() - '999 years'::INTERVAL))
	AND recipe_step_ingredients.created_at < COALESCE($4, (SELECT NOW() + '999 years'::INTERVAL))
	AND (
		recipe_step_ingredients.last_updated_at IS NULL
		OR recipe_step_ingredients.last_updated_at > COALESCE($5, (SELECT NOW() - '999 years'::INTERVAL))
	)
	AND (
		recipe_step_ingredients.last_updated_at IS NULL
		OR recipe_step_ingredients.last_updated_at < COALESCE($6, (SELECT NOW() + '999 years'::INTERVAL))
	)
LIMIT $8
OFFSET $7
`

type GetRecipeStepIngredientsParams struct {
	RecipeID      string
	RecipeStepID  string
	CreatedAfter  sql.NullTime
	CreatedBefore sql.NullTime
	UpdatedAfter  sql.NullTime
	UpdatedBefore sql.NullTime
	QueryOffset   sql.NullInt32
	QueryLimit    sql.NullInt32
}

type GetRecipeStepIngredientsRow struct {
	CreatedAt                                              time.Time
	ValidMeasurementUnitCreatedAt                          time.Time
	ValidMeasurementUnitLastUpdatedAt                      sql.NullTime
	LastUpdatedAt                                          sql.NullTime
	ValidIngredientArchivedAt                              sql.NullTime
	ValidIngredientLastUpdatedAt                           sql.NullTime
	ValidIngredientCreatedAt                               sql.NullTime
	ValidIngredientLastIndexedAt                           sql.NullTime
	ValidMeasurementUnitLastIndexedAt                      sql.NullTime
	ValidMeasurementUnitArchivedAt                         sql.NullTime
	ArchivedAt                                             sql.NullTime
	ValidMeasurementUnitID                                 string
	MinimumQuantityValue                                   string
	ValidMeasurementUnitName                               string
	ValidMeasurementUnitIconPath                           string
	ValidMeasurementUnitSlug                               string
	IngredientNotes                                        string
	ValidMeasurementUnitPluralName                         string
	ID                                                     string
	Name                                                   string
	BelongsToRecipeStep                                    string
	ValidMeasurementUnitDescription                        string
	QuantityNotes                                          string
	ValidIngredientPluralName                              sql.NullString
	ValidIngredientIconPath                                sql.NullString
	ValidIngredientMaximumIdealStorageTemperatureInCelsius sql.NullString
	ValidIngredientStorageInstructions                     sql.NullString
	ValidIngredientSlug                                    sql.NullString
	RecipeStepProductRecipeID                              sql.NullString
	ValidIngredientShoppingSuggestions                     sql.NullString
	ValidIngredientID                                      sql.NullString
	ValidIngredientName                                    sql.NullString
	ValidIngredientMinimumIdealStorageTemperatureInCelsius sql.NullString
	RecipeStepProductID                                    sql.NullString
	ValidIngredientDescription                             sql.NullString
	ProductPercentageToUse                                 sql.NullString
	MaximumQuantityValue                                   sql.NullString
	ValidIngredientWarning                                 sql.NullString
	FilteredCount                                          int64
	TotalCount                                             int64
	VesselIndex                                            sql.NullInt32
	OptionIndex                                            int32
	ValidIngredientVolumetric                              sql.NullBool
	ValidIngredientAnimalDerived                           sql.NullBool
	ValidIngredientIsAcid                                  sql.NullBool
	ValidMeasurementUnitVolumetric                         sql.NullBool
	ValidIngredientIsFat                                   sql.NullBool
	ValidIngredientContainsEgg                             sql.NullBool
	ValidIngredientContainsDairy                           sql.NullBool
	ValidIngredientContainsPeanut                          sql.NullBool
	ValidIngredientIsSalt                                  sql.NullBool
	ValidIngredientIsFruit                                 sql.NullBool
	ValidIngredientIsGrain                                 sql.NullBool
	ValidIngredientIsProtein                               sql.NullBool
	ValidIngredientIsStarch                                sql.NullBool
	ValidIngredientContainsAlcohol                         sql.NullBool
	ValidIngredientRestrictToPreparations                  sql.NullBool
	ValidIngredientIsHeat                                  sql.NullBool
	ValidIngredientIsLiquid                                sql.NullBool
	ValidIngredientAnimalFlesh                             sql.NullBool
	ValidIngredientContainsGluten                          sql.NullBool
	ValidIngredientContainsFish                            sql.NullBool
	ValidIngredientContainsTreeNut                         sql.NullBool
	ValidIngredientContainsSesame                          sql.NullBool
	ValidIngredientContainsShellfish                       sql.NullBool
	ValidIngredientContainsWheat                           sql.NullBool
	ValidIngredientContainsSoy                             sql.NullBool
	ToTaste                                                bool
	ValidMeasurementUnitImperial                           bool
	ValidMeasurementUnitMetric                             bool
	ValidMeasurementUnitUniversal                          bool
	Optional                                               bool
}

func (q *Queries) GetRecipeStepIngredients(ctx context.Context, db DBTX, arg *GetRecipeStepIngredientsParams) ([]*GetRecipeStepIngredientsRow, error) {
	rows, err := db.QueryContext(ctx, getRecipeStepIngredients,
		arg.RecipeID,
		arg.RecipeStepID,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedAfter,
		arg.UpdatedBefore,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetRecipeStepIngredientsRow{}
	for rows.Next() {
		var i GetRecipeStepIngredientsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Optional,
			&i.ValidIngredientID,
			&i.ValidIngredientName,
			&i.ValidIngredientDescription,
			&i.ValidIngredientWarning,
			&i.ValidIngredientContainsEgg,
			&i.ValidIngredientContainsDairy,
			&i.ValidIngredientContainsPeanut,
			&i.ValidIngredientContainsTreeNut,
			&i.ValidIngredientContainsSoy,
			&i.ValidIngredientContainsWheat,
			&i.ValidIngredientContainsShellfish,
			&i.ValidIngredientContainsSesame,
			&i.ValidIngredientContainsFish,
			&i.ValidIngredientContainsGluten,
			&i.ValidIngredientAnimalFlesh,
			&i.ValidIngredientVolumetric,
			&i.ValidIngredientIsLiquid,
			&i.ValidIngredientIconPath,
			&i.ValidIngredientAnimalDerived,
			&i.ValidIngredientPluralName,
			&i.ValidIngredientRestrictToPreparations,
			&i.ValidIngredientMinimumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientMaximumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientStorageInstructions,
			&i.ValidIngredientSlug,
			&i.ValidIngredientContainsAlcohol,
			&i.ValidIngredientShoppingSuggestions,
			&i.ValidIngredientIsStarch,
			&i.ValidIngredientIsProtein,
			&i.ValidIngredientIsGrain,
			&i.ValidIngredientIsFruit,
			&i.ValidIngredientIsSalt,
			&i.ValidIngredientIsFat,
			&i.ValidIngredientIsAcid,
			&i.ValidIngredientIsHeat,
			&i.ValidIngredientLastIndexedAt,
			&i.ValidIngredientCreatedAt,
			&i.ValidIngredientLastUpdatedAt,
			&i.ValidIngredientArchivedAt,
			&i.ValidMeasurementUnitID,
			&i.ValidMeasurementUnitName,
			&i.ValidMeasurementUnitDescription,
			&i.ValidMeasurementUnitVolumetric,
			&i.ValidMeasurementUnitIconPath,
			&i.ValidMeasurementUnitUniversal,
			&i.ValidMeasurementUnitMetric,
			&i.ValidMeasurementUnitImperial,
			&i.ValidMeasurementUnitSlug,
			&i.ValidMeasurementUnitPluralName,
			&i.ValidMeasurementUnitLastIndexedAt,
			&i.ValidMeasurementUnitCreatedAt,
			&i.ValidMeasurementUnitLastUpdatedAt,
			&i.ValidMeasurementUnitArchivedAt,
			&i.MinimumQuantityValue,
			&i.MaximumQuantityValue,
			&i.QuantityNotes,
			&i.RecipeStepProductID,
			&i.IngredientNotes,
			&i.OptionIndex,
			&i.ToTaste,
			&i.ProductPercentageToUse,
			&i.VesselIndex,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.RecipeStepProductRecipeID,
			&i.BelongsToRecipeStep,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecipeStepIngredient = `-- name: UpdateRecipeStepIngredient :execrows

UPDATE recipe_step_ingredients SET
	name = $1,
	optional = $2,
	ingredient_id = $3,
	measurement_unit = $4,
	minimum_quantity_value = $5,
	maximum_quantity_value = $6,
	quantity_notes = $7,
	recipe_step_product_id = $8,
	ingredient_notes = $9,
	option_index = $10,
	to_taste = $11,
	product_percentage_to_use = $12,
	vessel_index = $13,
	recipe_step_product_recipe_id = $14,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND belongs_to_recipe_step = $15
	AND id = $16
`

type UpdateRecipeStepIngredientParams struct {
	IngredientNotes           string
	QuantityNotes             string
	ID                        string
	BelongsToRecipeStep       string
	Name                      string
	MinimumQuantityValue      string
	RecipeStepProductID       sql.NullString
	MaximumQuantityValue      sql.NullString
	ProductPercentageToUse    sql.NullString
	RecipeStepProductRecipeID sql.NullString
	MeasurementUnit           sql.NullString
	IngredientID              sql.NullString
	VesselIndex               sql.NullInt32
	OptionIndex               int32
	Optional                  bool
	ToTaste                   bool
}

func (q *Queries) UpdateRecipeStepIngredient(ctx context.Context, db DBTX, arg *UpdateRecipeStepIngredientParams) (int64, error) {
	result, err := db.ExecContext(ctx, updateRecipeStepIngredient,
		arg.Name,
		arg.Optional,
		arg.IngredientID,
		arg.MeasurementUnit,
		arg.MinimumQuantityValue,
		arg.MaximumQuantityValue,
		arg.QuantityNotes,
		arg.RecipeStepProductID,
		arg.IngredientNotes,
		arg.OptionIndex,
		arg.ToTaste,
		arg.ProductPercentageToUse,
		arg.VesselIndex,
		arg.RecipeStepProductRecipeID,
		arg.BelongsToRecipeStep,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
