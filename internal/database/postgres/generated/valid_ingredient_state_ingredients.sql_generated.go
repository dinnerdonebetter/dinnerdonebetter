// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: valid_ingredient_state_ingredients.sql

package generated

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const archiveValidIngredientStateIngredient = `-- name: ArchiveValidIngredientStateIngredient :execrows

UPDATE valid_ingredient_state_ingredients SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1
`

func (q *Queries) ArchiveValidIngredientStateIngredient(ctx context.Context, db DBTX, id string) (int64, error) {
	result, err := db.ExecContext(ctx, archiveValidIngredientStateIngredient, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const checkValidIngredientStateIngredientExistence = `-- name: CheckValidIngredientStateIngredientExistence :one

SELECT EXISTS (
	SELECT valid_ingredient_state_ingredients.id
	FROM valid_ingredient_state_ingredients
	WHERE valid_ingredient_state_ingredients.archived_at IS NULL
		AND valid_ingredient_state_ingredients.id = $1
)
`

func (q *Queries) CheckValidIngredientStateIngredientExistence(ctx context.Context, db DBTX, id string) (bool, error) {
	row := db.QueryRowContext(ctx, checkValidIngredientStateIngredientExistence, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkValidityOfValidIngredientStateIngredientPair = `-- name: CheckValidityOfValidIngredientStateIngredientPair :one

SELECT EXISTS(
	SELECT valid_ingredient_state_ingredients.id
	FROM valid_ingredient_state_ingredients
	WHERE valid_ingredient = $1
	AND valid_ingredient_state = $2
	AND archived_at IS NULL
)
`

type CheckValidityOfValidIngredientStateIngredientPairParams struct {
	ValidIngredient      string
	ValidIngredientState string
}

func (q *Queries) CheckValidityOfValidIngredientStateIngredientPair(ctx context.Context, db DBTX, arg *CheckValidityOfValidIngredientStateIngredientPairParams) (bool, error) {
	row := db.QueryRowContext(ctx, checkValidityOfValidIngredientStateIngredientPair, arg.ValidIngredient, arg.ValidIngredientState)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createValidIngredientStateIngredient = `-- name: CreateValidIngredientStateIngredient :exec

INSERT INTO valid_ingredient_state_ingredients (
	id,
	notes,
	valid_ingredient_state,
	valid_ingredient
) VALUES (
	$1,
	$2,
	$3,
	$4
)
`

type CreateValidIngredientStateIngredientParams struct {
	ID                   string
	Notes                string
	ValidIngredientState string
	ValidIngredient      string
}

func (q *Queries) CreateValidIngredientStateIngredient(ctx context.Context, db DBTX, arg *CreateValidIngredientStateIngredientParams) error {
	_, err := db.ExecContext(ctx, createValidIngredientStateIngredient,
		arg.ID,
		arg.Notes,
		arg.ValidIngredientState,
		arg.ValidIngredient,
	)
	return err
}

const getValidIngredientStateIngredient = `-- name: GetValidIngredientStateIngredient :one

SELECT
	valid_ingredient_state_ingredients.id as valid_ingredient_state_ingredient_id,
	valid_ingredient_state_ingredients.notes as valid_ingredient_state_ingredient_notes,
	valid_ingredient_states.id as valid_ingredient_state_id,
	valid_ingredient_states.name as valid_ingredient_state_name,
	valid_ingredient_states.past_tense as valid_ingredient_state_past_tense,
	valid_ingredient_states.slug as valid_ingredient_state_slug,
	valid_ingredient_states.description as valid_ingredient_state_description,
	valid_ingredient_states.icon_path as valid_ingredient_state_icon_path,
	valid_ingredient_states.attribute_type as valid_ingredient_state_attribute_type,
	valid_ingredient_states.last_indexed_at as valid_ingredient_state_last_indexed_at,
	valid_ingredient_states.created_at as valid_ingredient_state_created_at,
	valid_ingredient_states.last_updated_at as valid_ingredient_state_last_updated_at,
	valid_ingredient_states.archived_at as valid_ingredient_state_archived_at,
	valid_ingredients.id as valid_ingredient_id,
	valid_ingredients.name as valid_ingredient_name,
	valid_ingredients.description as valid_ingredient_description,
	valid_ingredients.warning as valid_ingredient_warning,
	valid_ingredients.contains_egg as valid_ingredient_contains_egg,
	valid_ingredients.contains_dairy as valid_ingredient_contains_dairy,
	valid_ingredients.contains_peanut as valid_ingredient_contains_peanut,
	valid_ingredients.contains_tree_nut as valid_ingredient_contains_tree_nut,
	valid_ingredients.contains_soy as valid_ingredient_contains_soy,
	valid_ingredients.contains_wheat as valid_ingredient_contains_wheat,
	valid_ingredients.contains_shellfish as valid_ingredient_contains_shellfish,
	valid_ingredients.contains_sesame as valid_ingredient_contains_sesame,
	valid_ingredients.contains_fish as valid_ingredient_contains_fish,
	valid_ingredients.contains_gluten as valid_ingredient_contains_gluten,
	valid_ingredients.animal_flesh as valid_ingredient_animal_flesh,
	valid_ingredients.volumetric as valid_ingredient_volumetric,
	valid_ingredients.is_liquid as valid_ingredient_is_liquid,
	valid_ingredients.icon_path as valid_ingredient_icon_path,
	valid_ingredients.animal_derived as valid_ingredient_animal_derived,
	valid_ingredients.plural_name as valid_ingredient_plural_name,
	valid_ingredients.restrict_to_preparations as valid_ingredient_restrict_to_preparations,
	valid_ingredients.minimum_ideal_storage_temperature_in_celsius as valid_ingredient_minimum_ideal_storage_temperature_in_celsius,
	valid_ingredients.maximum_ideal_storage_temperature_in_celsius as valid_ingredient_maximum_ideal_storage_temperature_in_celsius,
	valid_ingredients.storage_instructions as valid_ingredient_storage_instructions,
	valid_ingredients.slug as valid_ingredient_slug,
	valid_ingredients.contains_alcohol as valid_ingredient_contains_alcohol,
	valid_ingredients.shopping_suggestions as valid_ingredient_shopping_suggestions,
	valid_ingredients.is_starch as valid_ingredient_is_starch,
	valid_ingredients.is_protein as valid_ingredient_is_protein,
	valid_ingredients.is_grain as valid_ingredient_is_grain,
	valid_ingredients.is_fruit as valid_ingredient_is_fruit,
	valid_ingredients.is_salt as valid_ingredient_is_salt,
	valid_ingredients.is_fat as valid_ingredient_is_fat,
	valid_ingredients.is_acid as valid_ingredient_is_acid,
	valid_ingredients.is_heat as valid_ingredient_is_heat,
	valid_ingredients.last_indexed_at as valid_ingredient_last_indexed_at,
	valid_ingredients.created_at as valid_ingredient_created_at,
	valid_ingredients.last_updated_at as valid_ingredient_last_updated_at,
	valid_ingredients.archived_at as valid_ingredient_archived_at,
	valid_ingredient_state_ingredients.valid_ingredient_state as valid_ingredient_state_ingredient_valid_ingredient_state,
	valid_ingredient_state_ingredients.valid_ingredient as valid_ingredient_state_ingredient_valid_ingredient,
	valid_ingredient_state_ingredients.created_at as valid_ingredient_state_ingredient_created_at,
	valid_ingredient_state_ingredients.last_updated_at as valid_ingredient_state_ingredient_last_updated_at,
	valid_ingredient_state_ingredients.archived_at as valid_ingredient_state_ingredient_archived_at
FROM valid_ingredient_state_ingredients
	JOIN valid_ingredients ON valid_ingredient_state_ingredients.valid_ingredient = valid_ingredients.id
	JOIN valid_ingredient_states ON valid_ingredient_state_ingredients.valid_ingredient_state = valid_ingredient_states.id
WHERE
	valid_ingredient_state_ingredients.archived_at IS NULL
	AND valid_ingredients.archived_at IS NULL
	AND valid_ingredient_states.archived_at IS NULL
	AND valid_ingredient_state_ingredients.id = $1
`

type GetValidIngredientStateIngredientRow struct {
	ValidIngredientCreatedAt                               time.Time
	ValidIngredientStateIngredientCreatedAt                time.Time
	ValidIngredientStateCreatedAt                          time.Time
	ValidIngredientStateLastUpdatedAt                      sql.NullTime
	ValidIngredientLastIndexedAt                           sql.NullTime
	ValidIngredientLastUpdatedAt                           sql.NullTime
	ValidIngredientArchivedAt                              sql.NullTime
	ValidIngredientStateIngredientLastUpdatedAt            sql.NullTime
	ValidIngredientStateIngredientArchivedAt               sql.NullTime
	ValidIngredientStateArchivedAt                         sql.NullTime
	ValidIngredientStateLastIndexedAt                      sql.NullTime
	ValidIngredientStateAttributeType                      IngredientAttributeType
	ValidIngredientStatePastTense                          string
	ValidIngredientID                                      string
	ValidIngredientName                                    string
	ValidIngredientDescription                             string
	ValidIngredientWarning                                 string
	ValidIngredientStateIconPath                           string
	ValidIngredientStateDescription                        string
	ValidIngredientStateSlug                               string
	ValidIngredientStateIngredientValidIngredient          string
	ValidIngredientStateIngredientValidIngredientState     string
	ValidIngredientPluralName                              string
	ValidIngredientStateName                               string
	ValidIngredientStateID                                 string
	ValidIngredientStateIngredientNotes                    string
	ValidIngredientShoppingSuggestions                     string
	ValidIngredientStateIngredientID                       string
	ValidIngredientSlug                                    string
	ValidIngredientStorageInstructions                     string
	ValidIngredientIconPath                                string
	ValidIngredientMinimumIdealStorageTemperatureInCelsius sql.NullString
	ValidIngredientMaximumIdealStorageTemperatureInCelsius sql.NullString
	ValidIngredientIsLiquid                                sql.NullBool
	ValidIngredientAnimalFlesh                             bool
	ValidIngredientRestrictToPreparations                  bool
	ValidIngredientAnimalDerived                           bool
	ValidIngredientVolumetric                              bool
	ValidIngredientContainsAlcohol                         bool
	ValidIngredientContainsGluten                          bool
	ValidIngredientIsStarch                                bool
	ValidIngredientIsProtein                               bool
	ValidIngredientIsGrain                                 bool
	ValidIngredientIsFruit                                 bool
	ValidIngredientIsSalt                                  bool
	ValidIngredientIsFat                                   bool
	ValidIngredientIsAcid                                  bool
	ValidIngredientIsHeat                                  bool
	ValidIngredientContainsFish                            bool
	ValidIngredientContainsSesame                          bool
	ValidIngredientContainsShellfish                       bool
	ValidIngredientContainsWheat                           bool
	ValidIngredientContainsSoy                             bool
	ValidIngredientContainsTreeNut                         bool
	ValidIngredientContainsPeanut                          bool
	ValidIngredientContainsDairy                           bool
	ValidIngredientContainsEgg                             bool
}

func (q *Queries) GetValidIngredientStateIngredient(ctx context.Context, db DBTX, id string) (*GetValidIngredientStateIngredientRow, error) {
	row := db.QueryRowContext(ctx, getValidIngredientStateIngredient, id)
	var i GetValidIngredientStateIngredientRow
	err := row.Scan(
		&i.ValidIngredientStateIngredientID,
		&i.ValidIngredientStateIngredientNotes,
		&i.ValidIngredientStateID,
		&i.ValidIngredientStateName,
		&i.ValidIngredientStatePastTense,
		&i.ValidIngredientStateSlug,
		&i.ValidIngredientStateDescription,
		&i.ValidIngredientStateIconPath,
		&i.ValidIngredientStateAttributeType,
		&i.ValidIngredientStateLastIndexedAt,
		&i.ValidIngredientStateCreatedAt,
		&i.ValidIngredientStateLastUpdatedAt,
		&i.ValidIngredientStateArchivedAt,
		&i.ValidIngredientID,
		&i.ValidIngredientName,
		&i.ValidIngredientDescription,
		&i.ValidIngredientWarning,
		&i.ValidIngredientContainsEgg,
		&i.ValidIngredientContainsDairy,
		&i.ValidIngredientContainsPeanut,
		&i.ValidIngredientContainsTreeNut,
		&i.ValidIngredientContainsSoy,
		&i.ValidIngredientContainsWheat,
		&i.ValidIngredientContainsShellfish,
		&i.ValidIngredientContainsSesame,
		&i.ValidIngredientContainsFish,
		&i.ValidIngredientContainsGluten,
		&i.ValidIngredientAnimalFlesh,
		&i.ValidIngredientVolumetric,
		&i.ValidIngredientIsLiquid,
		&i.ValidIngredientIconPath,
		&i.ValidIngredientAnimalDerived,
		&i.ValidIngredientPluralName,
		&i.ValidIngredientRestrictToPreparations,
		&i.ValidIngredientMinimumIdealStorageTemperatureInCelsius,
		&i.ValidIngredientMaximumIdealStorageTemperatureInCelsius,
		&i.ValidIngredientStorageInstructions,
		&i.ValidIngredientSlug,
		&i.ValidIngredientContainsAlcohol,
		&i.ValidIngredientShoppingSuggestions,
		&i.ValidIngredientIsStarch,
		&i.ValidIngredientIsProtein,
		&i.ValidIngredientIsGrain,
		&i.ValidIngredientIsFruit,
		&i.ValidIngredientIsSalt,
		&i.ValidIngredientIsFat,
		&i.ValidIngredientIsAcid,
		&i.ValidIngredientIsHeat,
		&i.ValidIngredientLastIndexedAt,
		&i.ValidIngredientCreatedAt,
		&i.ValidIngredientLastUpdatedAt,
		&i.ValidIngredientArchivedAt,
		&i.ValidIngredientStateIngredientValidIngredientState,
		&i.ValidIngredientStateIngredientValidIngredient,
		&i.ValidIngredientStateIngredientCreatedAt,
		&i.ValidIngredientStateIngredientLastUpdatedAt,
		&i.ValidIngredientStateIngredientArchivedAt,
	)
	return &i, err
}

const getValidIngredientStateIngredients = `-- name: GetValidIngredientStateIngredients :many

SELECT
	valid_ingredient_state_ingredients.id as valid_ingredient_state_ingredient_id,
	valid_ingredient_state_ingredients.notes as valid_ingredient_state_ingredient_notes,
	valid_ingredient_states.id as valid_ingredient_state_id,
	valid_ingredient_states.name as valid_ingredient_state_name,
	valid_ingredient_states.past_tense as valid_ingredient_state_past_tense,
	valid_ingredient_states.slug as valid_ingredient_state_slug,
	valid_ingredient_states.description as valid_ingredient_state_description,
	valid_ingredient_states.icon_path as valid_ingredient_state_icon_path,
	valid_ingredient_states.attribute_type as valid_ingredient_state_attribute_type,
	valid_ingredient_states.last_indexed_at as valid_ingredient_state_last_indexed_at,
	valid_ingredient_states.created_at as valid_ingredient_state_created_at,
	valid_ingredient_states.last_updated_at as valid_ingredient_state_last_updated_at,
	valid_ingredient_states.archived_at as valid_ingredient_state_archived_at,
	valid_ingredients.id as valid_ingredient_id,
	valid_ingredients.name as valid_ingredient_name,
	valid_ingredients.description as valid_ingredient_description,
	valid_ingredients.warning as valid_ingredient_warning,
	valid_ingredients.contains_egg as valid_ingredient_contains_egg,
	valid_ingredients.contains_dairy as valid_ingredient_contains_dairy,
	valid_ingredients.contains_peanut as valid_ingredient_contains_peanut,
	valid_ingredients.contains_tree_nut as valid_ingredient_contains_tree_nut,
	valid_ingredients.contains_soy as valid_ingredient_contains_soy,
	valid_ingredients.contains_wheat as valid_ingredient_contains_wheat,
	valid_ingredients.contains_shellfish as valid_ingredient_contains_shellfish,
	valid_ingredients.contains_sesame as valid_ingredient_contains_sesame,
	valid_ingredients.contains_fish as valid_ingredient_contains_fish,
	valid_ingredients.contains_gluten as valid_ingredient_contains_gluten,
	valid_ingredients.animal_flesh as valid_ingredient_animal_flesh,
	valid_ingredients.volumetric as valid_ingredient_volumetric,
	valid_ingredients.is_liquid as valid_ingredient_is_liquid,
	valid_ingredients.icon_path as valid_ingredient_icon_path,
	valid_ingredients.animal_derived as valid_ingredient_animal_derived,
	valid_ingredients.plural_name as valid_ingredient_plural_name,
	valid_ingredients.restrict_to_preparations as valid_ingredient_restrict_to_preparations,
	valid_ingredients.minimum_ideal_storage_temperature_in_celsius as valid_ingredient_minimum_ideal_storage_temperature_in_celsius,
	valid_ingredients.maximum_ideal_storage_temperature_in_celsius as valid_ingredient_maximum_ideal_storage_temperature_in_celsius,
	valid_ingredients.storage_instructions as valid_ingredient_storage_instructions,
	valid_ingredients.slug as valid_ingredient_slug,
	valid_ingredients.contains_alcohol as valid_ingredient_contains_alcohol,
	valid_ingredients.shopping_suggestions as valid_ingredient_shopping_suggestions,
	valid_ingredients.is_starch as valid_ingredient_is_starch,
	valid_ingredients.is_protein as valid_ingredient_is_protein,
	valid_ingredients.is_grain as valid_ingredient_is_grain,
	valid_ingredients.is_fruit as valid_ingredient_is_fruit,
	valid_ingredients.is_salt as valid_ingredient_is_salt,
	valid_ingredients.is_fat as valid_ingredient_is_fat,
	valid_ingredients.is_acid as valid_ingredient_is_acid,
	valid_ingredients.is_heat as valid_ingredient_is_heat,
	valid_ingredients.last_indexed_at as valid_ingredient_last_indexed_at,
	valid_ingredients.created_at as valid_ingredient_created_at,
	valid_ingredients.last_updated_at as valid_ingredient_last_updated_at,
	valid_ingredients.archived_at as valid_ingredient_archived_at,
	valid_ingredient_state_ingredients.valid_ingredient_state as valid_ingredient_state_ingredient_valid_ingredient_state,
	valid_ingredient_state_ingredients.valid_ingredient as valid_ingredient_state_ingredient_valid_ingredient,
	valid_ingredient_state_ingredients.created_at as valid_ingredient_state_ingredient_created_at,
	valid_ingredient_state_ingredients.last_updated_at as valid_ingredient_state_ingredient_last_updated_at,
	valid_ingredient_state_ingredients.archived_at as valid_ingredient_state_ingredient_archived_at,
	(
		SELECT COUNT(valid_ingredient_state_ingredients.id)
		FROM valid_ingredient_state_ingredients
		WHERE valid_ingredient_state_ingredients.archived_at IS NULL
			AND valid_ingredient_state_ingredients.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
			AND valid_ingredient_state_ingredients.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
			AND (
				valid_ingredient_state_ingredients.last_updated_at IS NULL
				OR valid_ingredient_state_ingredients.last_updated_at > COALESCE($3, (SELECT NOW() - '999 years'::INTERVAL))
			)
			AND (
				valid_ingredient_state_ingredients.last_updated_at IS NULL
				OR valid_ingredient_state_ingredients.last_updated_at < COALESCE($4, (SELECT NOW() + '999 years'::INTERVAL))
			)
	) AS filtered_count,
	(
		SELECT COUNT(valid_ingredient_state_ingredients.id)
		FROM valid_ingredient_state_ingredients
		WHERE valid_ingredient_state_ingredients.archived_at IS NULL
	) AS total_count
FROM valid_ingredient_state_ingredients
	JOIN valid_ingredients ON valid_ingredient_state_ingredients.valid_ingredient = valid_ingredients.id
	JOIN valid_ingredient_states ON valid_ingredient_state_ingredients.valid_ingredient_state = valid_ingredient_states.id
WHERE
	valid_ingredient_state_ingredients.archived_at IS NULL
	AND valid_ingredients.archived_at IS NULL
	AND valid_ingredient_states.archived_at IS NULL
	AND valid_ingredient_state_ingredients.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
	AND valid_ingredient_state_ingredients.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
	AND (
		valid_ingredient_state_ingredients.last_updated_at IS NULL
		OR valid_ingredient_state_ingredients.last_updated_at > COALESCE($4, (SELECT NOW() - '999 years'::INTERVAL))
	)
	AND (
		valid_ingredient_state_ingredients.last_updated_at IS NULL
		OR valid_ingredient_state_ingredients.last_updated_at < COALESCE($3, (SELECT NOW() + '999 years'::INTERVAL))
	)
LIMIT $6
OFFSET $5
`

type GetValidIngredientStateIngredientsParams struct {
	CreatedAfter  sql.NullTime
	CreatedBefore sql.NullTime
	UpdatedBefore sql.NullTime
	UpdatedAfter  sql.NullTime
	QueryOffset   sql.NullInt32
	QueryLimit    sql.NullInt32
}

type GetValidIngredientStateIngredientsRow struct {
	ValidIngredientCreatedAt                               time.Time
	ValidIngredientStateIngredientCreatedAt                time.Time
	ValidIngredientStateCreatedAt                          time.Time
	ValidIngredientStateLastUpdatedAt                      sql.NullTime
	ValidIngredientLastIndexedAt                           sql.NullTime
	ValidIngredientLastUpdatedAt                           sql.NullTime
	ValidIngredientArchivedAt                              sql.NullTime
	ValidIngredientStateIngredientLastUpdatedAt            sql.NullTime
	ValidIngredientStateIngredientArchivedAt               sql.NullTime
	ValidIngredientStateArchivedAt                         sql.NullTime
	ValidIngredientStateLastIndexedAt                      sql.NullTime
	ValidIngredientStateIngredientID                       string
	ValidIngredientIconPath                                string
	ValidIngredientID                                      string
	ValidIngredientName                                    string
	ValidIngredientDescription                             string
	ValidIngredientWarning                                 string
	ValidIngredientSlug                                    string
	ValidIngredientPluralName                              string
	ValidIngredientStateIconPath                           string
	ValidIngredientStateDescription                        string
	ValidIngredientStateSlug                               string
	ValidIngredientStateIngredientValidIngredient          string
	ValidIngredientStateIngredientValidIngredientState     string
	ValidIngredientStatePastTense                          string
	ValidIngredientStateName                               string
	ValidIngredientStateID                                 string
	ValidIngredientStorageInstructions                     string
	ValidIngredientStateIngredientNotes                    string
	ValidIngredientShoppingSuggestions                     string
	ValidIngredientStateAttributeType                      IngredientAttributeType
	ValidIngredientMinimumIdealStorageTemperatureInCelsius sql.NullString
	ValidIngredientMaximumIdealStorageTemperatureInCelsius sql.NullString
	FilteredCount                                          int64
	TotalCount                                             int64
	ValidIngredientIsLiquid                                sql.NullBool
	ValidIngredientAnimalFlesh                             bool
	ValidIngredientRestrictToPreparations                  bool
	ValidIngredientContainsAlcohol                         bool
	ValidIngredientAnimalDerived                           bool
	ValidIngredientIsStarch                                bool
	ValidIngredientIsProtein                               bool
	ValidIngredientIsGrain                                 bool
	ValidIngredientIsFruit                                 bool
	ValidIngredientIsSalt                                  bool
	ValidIngredientIsFat                                   bool
	ValidIngredientIsAcid                                  bool
	ValidIngredientIsHeat                                  bool
	ValidIngredientVolumetric                              bool
	ValidIngredientContainsGluten                          bool
	ValidIngredientContainsFish                            bool
	ValidIngredientContainsSesame                          bool
	ValidIngredientContainsShellfish                       bool
	ValidIngredientContainsWheat                           bool
	ValidIngredientContainsSoy                             bool
	ValidIngredientContainsTreeNut                         bool
	ValidIngredientContainsPeanut                          bool
	ValidIngredientContainsDairy                           bool
	ValidIngredientContainsEgg                             bool
}

func (q *Queries) GetValidIngredientStateIngredients(ctx context.Context, db DBTX, arg *GetValidIngredientStateIngredientsParams) ([]*GetValidIngredientStateIngredientsRow, error) {
	rows, err := db.QueryContext(ctx, getValidIngredientStateIngredients,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedBefore,
		arg.UpdatedAfter,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidIngredientStateIngredientsRow{}
	for rows.Next() {
		var i GetValidIngredientStateIngredientsRow
		if err := rows.Scan(
			&i.ValidIngredientStateIngredientID,
			&i.ValidIngredientStateIngredientNotes,
			&i.ValidIngredientStateID,
			&i.ValidIngredientStateName,
			&i.ValidIngredientStatePastTense,
			&i.ValidIngredientStateSlug,
			&i.ValidIngredientStateDescription,
			&i.ValidIngredientStateIconPath,
			&i.ValidIngredientStateAttributeType,
			&i.ValidIngredientStateLastIndexedAt,
			&i.ValidIngredientStateCreatedAt,
			&i.ValidIngredientStateLastUpdatedAt,
			&i.ValidIngredientStateArchivedAt,
			&i.ValidIngredientID,
			&i.ValidIngredientName,
			&i.ValidIngredientDescription,
			&i.ValidIngredientWarning,
			&i.ValidIngredientContainsEgg,
			&i.ValidIngredientContainsDairy,
			&i.ValidIngredientContainsPeanut,
			&i.ValidIngredientContainsTreeNut,
			&i.ValidIngredientContainsSoy,
			&i.ValidIngredientContainsWheat,
			&i.ValidIngredientContainsShellfish,
			&i.ValidIngredientContainsSesame,
			&i.ValidIngredientContainsFish,
			&i.ValidIngredientContainsGluten,
			&i.ValidIngredientAnimalFlesh,
			&i.ValidIngredientVolumetric,
			&i.ValidIngredientIsLiquid,
			&i.ValidIngredientIconPath,
			&i.ValidIngredientAnimalDerived,
			&i.ValidIngredientPluralName,
			&i.ValidIngredientRestrictToPreparations,
			&i.ValidIngredientMinimumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientMaximumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientStorageInstructions,
			&i.ValidIngredientSlug,
			&i.ValidIngredientContainsAlcohol,
			&i.ValidIngredientShoppingSuggestions,
			&i.ValidIngredientIsStarch,
			&i.ValidIngredientIsProtein,
			&i.ValidIngredientIsGrain,
			&i.ValidIngredientIsFruit,
			&i.ValidIngredientIsSalt,
			&i.ValidIngredientIsFat,
			&i.ValidIngredientIsAcid,
			&i.ValidIngredientIsHeat,
			&i.ValidIngredientLastIndexedAt,
			&i.ValidIngredientCreatedAt,
			&i.ValidIngredientLastUpdatedAt,
			&i.ValidIngredientArchivedAt,
			&i.ValidIngredientStateIngredientValidIngredientState,
			&i.ValidIngredientStateIngredientValidIngredient,
			&i.ValidIngredientStateIngredientCreatedAt,
			&i.ValidIngredientStateIngredientLastUpdatedAt,
			&i.ValidIngredientStateIngredientArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidIngredientStateIngredientsForIngredient = `-- name: GetValidIngredientStateIngredientsForIngredient :many

SELECT
	valid_ingredient_state_ingredients.id as valid_ingredient_state_ingredient_id,
	valid_ingredient_state_ingredients.notes as valid_ingredient_state_ingredient_notes,
	valid_ingredient_states.id as valid_ingredient_state_id,
	valid_ingredient_states.name as valid_ingredient_state_name,
	valid_ingredient_states.past_tense as valid_ingredient_state_past_tense,
	valid_ingredient_states.slug as valid_ingredient_state_slug,
	valid_ingredient_states.description as valid_ingredient_state_description,
	valid_ingredient_states.icon_path as valid_ingredient_state_icon_path,
	valid_ingredient_states.attribute_type as valid_ingredient_state_attribute_type,
	valid_ingredient_states.last_indexed_at as valid_ingredient_state_last_indexed_at,
	valid_ingredient_states.created_at as valid_ingredient_state_created_at,
	valid_ingredient_states.last_updated_at as valid_ingredient_state_last_updated_at,
	valid_ingredient_states.archived_at as valid_ingredient_state_archived_at,
	valid_ingredients.id as valid_ingredient_id,
	valid_ingredients.name as valid_ingredient_name,
	valid_ingredients.description as valid_ingredient_description,
	valid_ingredients.warning as valid_ingredient_warning,
	valid_ingredients.contains_egg as valid_ingredient_contains_egg,
	valid_ingredients.contains_dairy as valid_ingredient_contains_dairy,
	valid_ingredients.contains_peanut as valid_ingredient_contains_peanut,
	valid_ingredients.contains_tree_nut as valid_ingredient_contains_tree_nut,
	valid_ingredients.contains_soy as valid_ingredient_contains_soy,
	valid_ingredients.contains_wheat as valid_ingredient_contains_wheat,
	valid_ingredients.contains_shellfish as valid_ingredient_contains_shellfish,
	valid_ingredients.contains_sesame as valid_ingredient_contains_sesame,
	valid_ingredients.contains_fish as valid_ingredient_contains_fish,
	valid_ingredients.contains_gluten as valid_ingredient_contains_gluten,
	valid_ingredients.animal_flesh as valid_ingredient_animal_flesh,
	valid_ingredients.volumetric as valid_ingredient_volumetric,
	valid_ingredients.is_liquid as valid_ingredient_is_liquid,
	valid_ingredients.icon_path as valid_ingredient_icon_path,
	valid_ingredients.animal_derived as valid_ingredient_animal_derived,
	valid_ingredients.plural_name as valid_ingredient_plural_name,
	valid_ingredients.restrict_to_preparations as valid_ingredient_restrict_to_preparations,
	valid_ingredients.minimum_ideal_storage_temperature_in_celsius as valid_ingredient_minimum_ideal_storage_temperature_in_celsius,
	valid_ingredients.maximum_ideal_storage_temperature_in_celsius as valid_ingredient_maximum_ideal_storage_temperature_in_celsius,
	valid_ingredients.storage_instructions as valid_ingredient_storage_instructions,
	valid_ingredients.slug as valid_ingredient_slug,
	valid_ingredients.contains_alcohol as valid_ingredient_contains_alcohol,
	valid_ingredients.shopping_suggestions as valid_ingredient_shopping_suggestions,
	valid_ingredients.is_starch as valid_ingredient_is_starch,
	valid_ingredients.is_protein as valid_ingredient_is_protein,
	valid_ingredients.is_grain as valid_ingredient_is_grain,
	valid_ingredients.is_fruit as valid_ingredient_is_fruit,
	valid_ingredients.is_salt as valid_ingredient_is_salt,
	valid_ingredients.is_fat as valid_ingredient_is_fat,
	valid_ingredients.is_acid as valid_ingredient_is_acid,
	valid_ingredients.is_heat as valid_ingredient_is_heat,
	valid_ingredients.last_indexed_at as valid_ingredient_last_indexed_at,
	valid_ingredients.created_at as valid_ingredient_created_at,
	valid_ingredients.last_updated_at as valid_ingredient_last_updated_at,
	valid_ingredients.archived_at as valid_ingredient_archived_at,
	valid_ingredient_state_ingredients.valid_ingredient_state as valid_ingredient_state_ingredient_valid_ingredient_state,
	valid_ingredient_state_ingredients.valid_ingredient as valid_ingredient_state_ingredient_valid_ingredient,
	valid_ingredient_state_ingredients.created_at as valid_ingredient_state_ingredient_created_at,
	valid_ingredient_state_ingredients.last_updated_at as valid_ingredient_state_ingredient_last_updated_at,
	valid_ingredient_state_ingredients.archived_at as valid_ingredient_state_ingredient_archived_at,
	(
		SELECT COUNT(valid_ingredient_state_ingredients.id)
		FROM valid_ingredient_state_ingredients
		WHERE valid_ingredient_state_ingredients.archived_at IS NULL
			AND valid_ingredient_state_ingredients.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
			AND valid_ingredient_state_ingredients.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
			AND (
				valid_ingredient_state_ingredients.last_updated_at IS NULL
				OR valid_ingredient_state_ingredients.last_updated_at > COALESCE($3, (SELECT NOW() - '999 years'::INTERVAL))
			)
			AND (
				valid_ingredient_state_ingredients.last_updated_at IS NULL
				OR valid_ingredient_state_ingredients.last_updated_at < COALESCE($4, (SELECT NOW() + '999 years'::INTERVAL))
			)
	) AS filtered_count,
	(
		SELECT COUNT(valid_ingredient_state_ingredients.id)
		FROM valid_ingredient_state_ingredients
		WHERE valid_ingredient_state_ingredients.archived_at IS NULL
	) AS total_count
FROM valid_ingredient_state_ingredients
	JOIN valid_ingredients ON valid_ingredient_state_ingredients.valid_ingredient = valid_ingredients.id
	JOIN valid_ingredient_states ON valid_ingredient_state_ingredients.valid_ingredient_state = valid_ingredient_states.id
WHERE
	valid_ingredient_state_ingredients.archived_at IS NULL
	AND valid_ingredients.archived_at IS NULL
	AND valid_ingredient_states.archived_at IS NULL
	AND valid_ingredient_state_ingredients.valid_ingredient = $5
	AND valid_ingredient_state_ingredients.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
	AND valid_ingredient_state_ingredients.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
	AND (
		valid_ingredient_state_ingredients.last_updated_at IS NULL
		OR valid_ingredient_state_ingredients.last_updated_at > COALESCE($4, (SELECT NOW() - '999 years'::INTERVAL))
	)
	AND (
		valid_ingredient_state_ingredients.last_updated_at IS NULL
		OR valid_ingredient_state_ingredients.last_updated_at < COALESCE($3, (SELECT NOW() + '999 years'::INTERVAL))
	)
LIMIT $7
OFFSET $6
`

type GetValidIngredientStateIngredientsForIngredientParams struct {
	CreatedAfter    sql.NullTime
	CreatedBefore   sql.NullTime
	UpdatedBefore   sql.NullTime
	UpdatedAfter    sql.NullTime
	ValidIngredient string
	QueryOffset     sql.NullInt32
	QueryLimit      sql.NullInt32
}

type GetValidIngredientStateIngredientsForIngredientRow struct {
	ValidIngredientCreatedAt                               time.Time
	ValidIngredientStateIngredientCreatedAt                time.Time
	ValidIngredientStateCreatedAt                          time.Time
	ValidIngredientStateLastUpdatedAt                      sql.NullTime
	ValidIngredientLastIndexedAt                           sql.NullTime
	ValidIngredientLastUpdatedAt                           sql.NullTime
	ValidIngredientArchivedAt                              sql.NullTime
	ValidIngredientStateIngredientLastUpdatedAt            sql.NullTime
	ValidIngredientStateIngredientArchivedAt               sql.NullTime
	ValidIngredientStateArchivedAt                         sql.NullTime
	ValidIngredientStateLastIndexedAt                      sql.NullTime
	ValidIngredientStateIngredientID                       string
	ValidIngredientIconPath                                string
	ValidIngredientID                                      string
	ValidIngredientName                                    string
	ValidIngredientDescription                             string
	ValidIngredientWarning                                 string
	ValidIngredientSlug                                    string
	ValidIngredientPluralName                              string
	ValidIngredientStateIconPath                           string
	ValidIngredientStateDescription                        string
	ValidIngredientStateSlug                               string
	ValidIngredientStateIngredientValidIngredient          string
	ValidIngredientStateIngredientValidIngredientState     string
	ValidIngredientStatePastTense                          string
	ValidIngredientStateName                               string
	ValidIngredientStateID                                 string
	ValidIngredientStorageInstructions                     string
	ValidIngredientStateIngredientNotes                    string
	ValidIngredientShoppingSuggestions                     string
	ValidIngredientStateAttributeType                      IngredientAttributeType
	ValidIngredientMinimumIdealStorageTemperatureInCelsius sql.NullString
	ValidIngredientMaximumIdealStorageTemperatureInCelsius sql.NullString
	FilteredCount                                          int64
	TotalCount                                             int64
	ValidIngredientIsLiquid                                sql.NullBool
	ValidIngredientAnimalFlesh                             bool
	ValidIngredientRestrictToPreparations                  bool
	ValidIngredientContainsAlcohol                         bool
	ValidIngredientAnimalDerived                           bool
	ValidIngredientIsStarch                                bool
	ValidIngredientIsProtein                               bool
	ValidIngredientIsGrain                                 bool
	ValidIngredientIsFruit                                 bool
	ValidIngredientIsSalt                                  bool
	ValidIngredientIsFat                                   bool
	ValidIngredientIsAcid                                  bool
	ValidIngredientIsHeat                                  bool
	ValidIngredientVolumetric                              bool
	ValidIngredientContainsGluten                          bool
	ValidIngredientContainsFish                            bool
	ValidIngredientContainsSesame                          bool
	ValidIngredientContainsShellfish                       bool
	ValidIngredientContainsWheat                           bool
	ValidIngredientContainsSoy                             bool
	ValidIngredientContainsTreeNut                         bool
	ValidIngredientContainsPeanut                          bool
	ValidIngredientContainsDairy                           bool
	ValidIngredientContainsEgg                             bool
}

func (q *Queries) GetValidIngredientStateIngredientsForIngredient(ctx context.Context, db DBTX, arg *GetValidIngredientStateIngredientsForIngredientParams) ([]*GetValidIngredientStateIngredientsForIngredientRow, error) {
	rows, err := db.QueryContext(ctx, getValidIngredientStateIngredientsForIngredient,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedBefore,
		arg.UpdatedAfter,
		arg.ValidIngredient,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidIngredientStateIngredientsForIngredientRow{}
	for rows.Next() {
		var i GetValidIngredientStateIngredientsForIngredientRow
		if err := rows.Scan(
			&i.ValidIngredientStateIngredientID,
			&i.ValidIngredientStateIngredientNotes,
			&i.ValidIngredientStateID,
			&i.ValidIngredientStateName,
			&i.ValidIngredientStatePastTense,
			&i.ValidIngredientStateSlug,
			&i.ValidIngredientStateDescription,
			&i.ValidIngredientStateIconPath,
			&i.ValidIngredientStateAttributeType,
			&i.ValidIngredientStateLastIndexedAt,
			&i.ValidIngredientStateCreatedAt,
			&i.ValidIngredientStateLastUpdatedAt,
			&i.ValidIngredientStateArchivedAt,
			&i.ValidIngredientID,
			&i.ValidIngredientName,
			&i.ValidIngredientDescription,
			&i.ValidIngredientWarning,
			&i.ValidIngredientContainsEgg,
			&i.ValidIngredientContainsDairy,
			&i.ValidIngredientContainsPeanut,
			&i.ValidIngredientContainsTreeNut,
			&i.ValidIngredientContainsSoy,
			&i.ValidIngredientContainsWheat,
			&i.ValidIngredientContainsShellfish,
			&i.ValidIngredientContainsSesame,
			&i.ValidIngredientContainsFish,
			&i.ValidIngredientContainsGluten,
			&i.ValidIngredientAnimalFlesh,
			&i.ValidIngredientVolumetric,
			&i.ValidIngredientIsLiquid,
			&i.ValidIngredientIconPath,
			&i.ValidIngredientAnimalDerived,
			&i.ValidIngredientPluralName,
			&i.ValidIngredientRestrictToPreparations,
			&i.ValidIngredientMinimumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientMaximumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientStorageInstructions,
			&i.ValidIngredientSlug,
			&i.ValidIngredientContainsAlcohol,
			&i.ValidIngredientShoppingSuggestions,
			&i.ValidIngredientIsStarch,
			&i.ValidIngredientIsProtein,
			&i.ValidIngredientIsGrain,
			&i.ValidIngredientIsFruit,
			&i.ValidIngredientIsSalt,
			&i.ValidIngredientIsFat,
			&i.ValidIngredientIsAcid,
			&i.ValidIngredientIsHeat,
			&i.ValidIngredientLastIndexedAt,
			&i.ValidIngredientCreatedAt,
			&i.ValidIngredientLastUpdatedAt,
			&i.ValidIngredientArchivedAt,
			&i.ValidIngredientStateIngredientValidIngredientState,
			&i.ValidIngredientStateIngredientValidIngredient,
			&i.ValidIngredientStateIngredientCreatedAt,
			&i.ValidIngredientStateIngredientLastUpdatedAt,
			&i.ValidIngredientStateIngredientArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidIngredientStateIngredientsForIngredientState = `-- name: GetValidIngredientStateIngredientsForIngredientState :many

SELECT
	valid_ingredient_state_ingredients.id as valid_ingredient_state_ingredient_id,
	valid_ingredient_state_ingredients.notes as valid_ingredient_state_ingredient_notes,
	valid_ingredient_states.id as valid_ingredient_state_id,
	valid_ingredient_states.name as valid_ingredient_state_name,
	valid_ingredient_states.past_tense as valid_ingredient_state_past_tense,
	valid_ingredient_states.slug as valid_ingredient_state_slug,
	valid_ingredient_states.description as valid_ingredient_state_description,
	valid_ingredient_states.icon_path as valid_ingredient_state_icon_path,
	valid_ingredient_states.attribute_type as valid_ingredient_state_attribute_type,
	valid_ingredient_states.last_indexed_at as valid_ingredient_state_last_indexed_at,
	valid_ingredient_states.created_at as valid_ingredient_state_created_at,
	valid_ingredient_states.last_updated_at as valid_ingredient_state_last_updated_at,
	valid_ingredient_states.archived_at as valid_ingredient_state_archived_at,
	valid_ingredients.id as valid_ingredient_id,
	valid_ingredients.name as valid_ingredient_name,
	valid_ingredients.description as valid_ingredient_description,
	valid_ingredients.warning as valid_ingredient_warning,
	valid_ingredients.contains_egg as valid_ingredient_contains_egg,
	valid_ingredients.contains_dairy as valid_ingredient_contains_dairy,
	valid_ingredients.contains_peanut as valid_ingredient_contains_peanut,
	valid_ingredients.contains_tree_nut as valid_ingredient_contains_tree_nut,
	valid_ingredients.contains_soy as valid_ingredient_contains_soy,
	valid_ingredients.contains_wheat as valid_ingredient_contains_wheat,
	valid_ingredients.contains_shellfish as valid_ingredient_contains_shellfish,
	valid_ingredients.contains_sesame as valid_ingredient_contains_sesame,
	valid_ingredients.contains_fish as valid_ingredient_contains_fish,
	valid_ingredients.contains_gluten as valid_ingredient_contains_gluten,
	valid_ingredients.animal_flesh as valid_ingredient_animal_flesh,
	valid_ingredients.volumetric as valid_ingredient_volumetric,
	valid_ingredients.is_liquid as valid_ingredient_is_liquid,
	valid_ingredients.icon_path as valid_ingredient_icon_path,
	valid_ingredients.animal_derived as valid_ingredient_animal_derived,
	valid_ingredients.plural_name as valid_ingredient_plural_name,
	valid_ingredients.restrict_to_preparations as valid_ingredient_restrict_to_preparations,
	valid_ingredients.minimum_ideal_storage_temperature_in_celsius as valid_ingredient_minimum_ideal_storage_temperature_in_celsius,
	valid_ingredients.maximum_ideal_storage_temperature_in_celsius as valid_ingredient_maximum_ideal_storage_temperature_in_celsius,
	valid_ingredients.storage_instructions as valid_ingredient_storage_instructions,
	valid_ingredients.slug as valid_ingredient_slug,
	valid_ingredients.contains_alcohol as valid_ingredient_contains_alcohol,
	valid_ingredients.shopping_suggestions as valid_ingredient_shopping_suggestions,
	valid_ingredients.is_starch as valid_ingredient_is_starch,
	valid_ingredients.is_protein as valid_ingredient_is_protein,
	valid_ingredients.is_grain as valid_ingredient_is_grain,
	valid_ingredients.is_fruit as valid_ingredient_is_fruit,
	valid_ingredients.is_salt as valid_ingredient_is_salt,
	valid_ingredients.is_fat as valid_ingredient_is_fat,
	valid_ingredients.is_acid as valid_ingredient_is_acid,
	valid_ingredients.is_heat as valid_ingredient_is_heat,
	valid_ingredients.last_indexed_at as valid_ingredient_last_indexed_at,
	valid_ingredients.created_at as valid_ingredient_created_at,
	valid_ingredients.last_updated_at as valid_ingredient_last_updated_at,
	valid_ingredients.archived_at as valid_ingredient_archived_at,
	valid_ingredient_state_ingredients.valid_ingredient_state as valid_ingredient_state_ingredient_valid_ingredient_state,
	valid_ingredient_state_ingredients.valid_ingredient as valid_ingredient_state_ingredient_valid_ingredient,
	valid_ingredient_state_ingredients.created_at as valid_ingredient_state_ingredient_created_at,
	valid_ingredient_state_ingredients.last_updated_at as valid_ingredient_state_ingredient_last_updated_at,
	valid_ingredient_state_ingredients.archived_at as valid_ingredient_state_ingredient_archived_at,
	(
		SELECT COUNT(valid_ingredient_state_ingredients.id)
		FROM valid_ingredient_state_ingredients
		WHERE valid_ingredient_state_ingredients.archived_at IS NULL
			AND valid_ingredient_state_ingredients.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
			AND valid_ingredient_state_ingredients.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
			AND (
				valid_ingredient_state_ingredients.last_updated_at IS NULL
				OR valid_ingredient_state_ingredients.last_updated_at > COALESCE($3, (SELECT NOW() - '999 years'::INTERVAL))
			)
			AND (
				valid_ingredient_state_ingredients.last_updated_at IS NULL
				OR valid_ingredient_state_ingredients.last_updated_at < COALESCE($4, (SELECT NOW() + '999 years'::INTERVAL))
			)
	) AS filtered_count,
	(
		SELECT COUNT(valid_ingredient_state_ingredients.id)
		FROM valid_ingredient_state_ingredients
		WHERE valid_ingredient_state_ingredients.archived_at IS NULL
	) AS total_count
FROM valid_ingredient_state_ingredients
	JOIN valid_ingredients ON valid_ingredient_state_ingredients.valid_ingredient = valid_ingredients.id
	JOIN valid_ingredient_states ON valid_ingredient_state_ingredients.valid_ingredient_state = valid_ingredient_states.id
WHERE
	valid_ingredient_state_ingredients.archived_at IS NULL
	AND valid_ingredients.archived_at IS NULL
	AND valid_ingredient_states.archived_at IS NULL
	AND valid_ingredient_state_ingredients.valid_ingredient_state = $5
	AND valid_ingredient_state_ingredients.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
	AND valid_ingredient_state_ingredients.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
	AND (
		valid_ingredient_state_ingredients.last_updated_at IS NULL
		OR valid_ingredient_state_ingredients.last_updated_at > COALESCE($4, (SELECT NOW() - '999 years'::INTERVAL))
	)
	AND (
		valid_ingredient_state_ingredients.last_updated_at IS NULL
		OR valid_ingredient_state_ingredients.last_updated_at < COALESCE($3, (SELECT NOW() + '999 years'::INTERVAL))
	)
LIMIT $7
OFFSET $6
`

type GetValidIngredientStateIngredientsForIngredientStateParams struct {
	CreatedAfter         sql.NullTime
	CreatedBefore        sql.NullTime
	UpdatedBefore        sql.NullTime
	UpdatedAfter         sql.NullTime
	ValidIngredientState string
	QueryOffset          sql.NullInt32
	QueryLimit           sql.NullInt32
}

type GetValidIngredientStateIngredientsForIngredientStateRow struct {
	ValidIngredientCreatedAt                               time.Time
	ValidIngredientStateIngredientCreatedAt                time.Time
	ValidIngredientStateCreatedAt                          time.Time
	ValidIngredientStateLastUpdatedAt                      sql.NullTime
	ValidIngredientLastIndexedAt                           sql.NullTime
	ValidIngredientLastUpdatedAt                           sql.NullTime
	ValidIngredientArchivedAt                              sql.NullTime
	ValidIngredientStateIngredientLastUpdatedAt            sql.NullTime
	ValidIngredientStateIngredientArchivedAt               sql.NullTime
	ValidIngredientStateArchivedAt                         sql.NullTime
	ValidIngredientStateLastIndexedAt                      sql.NullTime
	ValidIngredientStateIngredientID                       string
	ValidIngredientIconPath                                string
	ValidIngredientID                                      string
	ValidIngredientName                                    string
	ValidIngredientDescription                             string
	ValidIngredientWarning                                 string
	ValidIngredientSlug                                    string
	ValidIngredientPluralName                              string
	ValidIngredientStateIconPath                           string
	ValidIngredientStateDescription                        string
	ValidIngredientStateSlug                               string
	ValidIngredientStateIngredientValidIngredient          string
	ValidIngredientStateIngredientValidIngredientState     string
	ValidIngredientStatePastTense                          string
	ValidIngredientStateName                               string
	ValidIngredientStateID                                 string
	ValidIngredientStorageInstructions                     string
	ValidIngredientStateIngredientNotes                    string
	ValidIngredientShoppingSuggestions                     string
	ValidIngredientStateAttributeType                      IngredientAttributeType
	ValidIngredientMinimumIdealStorageTemperatureInCelsius sql.NullString
	ValidIngredientMaximumIdealStorageTemperatureInCelsius sql.NullString
	FilteredCount                                          int64
	TotalCount                                             int64
	ValidIngredientIsLiquid                                sql.NullBool
	ValidIngredientAnimalFlesh                             bool
	ValidIngredientRestrictToPreparations                  bool
	ValidIngredientContainsAlcohol                         bool
	ValidIngredientAnimalDerived                           bool
	ValidIngredientIsStarch                                bool
	ValidIngredientIsProtein                               bool
	ValidIngredientIsGrain                                 bool
	ValidIngredientIsFruit                                 bool
	ValidIngredientIsSalt                                  bool
	ValidIngredientIsFat                                   bool
	ValidIngredientIsAcid                                  bool
	ValidIngredientIsHeat                                  bool
	ValidIngredientVolumetric                              bool
	ValidIngredientContainsGluten                          bool
	ValidIngredientContainsFish                            bool
	ValidIngredientContainsSesame                          bool
	ValidIngredientContainsShellfish                       bool
	ValidIngredientContainsWheat                           bool
	ValidIngredientContainsSoy                             bool
	ValidIngredientContainsTreeNut                         bool
	ValidIngredientContainsPeanut                          bool
	ValidIngredientContainsDairy                           bool
	ValidIngredientContainsEgg                             bool
}

func (q *Queries) GetValidIngredientStateIngredientsForIngredientState(ctx context.Context, db DBTX, arg *GetValidIngredientStateIngredientsForIngredientStateParams) ([]*GetValidIngredientStateIngredientsForIngredientStateRow, error) {
	rows, err := db.QueryContext(ctx, getValidIngredientStateIngredientsForIngredientState,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedBefore,
		arg.UpdatedAfter,
		arg.ValidIngredientState,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidIngredientStateIngredientsForIngredientStateRow{}
	for rows.Next() {
		var i GetValidIngredientStateIngredientsForIngredientStateRow
		if err := rows.Scan(
			&i.ValidIngredientStateIngredientID,
			&i.ValidIngredientStateIngredientNotes,
			&i.ValidIngredientStateID,
			&i.ValidIngredientStateName,
			&i.ValidIngredientStatePastTense,
			&i.ValidIngredientStateSlug,
			&i.ValidIngredientStateDescription,
			&i.ValidIngredientStateIconPath,
			&i.ValidIngredientStateAttributeType,
			&i.ValidIngredientStateLastIndexedAt,
			&i.ValidIngredientStateCreatedAt,
			&i.ValidIngredientStateLastUpdatedAt,
			&i.ValidIngredientStateArchivedAt,
			&i.ValidIngredientID,
			&i.ValidIngredientName,
			&i.ValidIngredientDescription,
			&i.ValidIngredientWarning,
			&i.ValidIngredientContainsEgg,
			&i.ValidIngredientContainsDairy,
			&i.ValidIngredientContainsPeanut,
			&i.ValidIngredientContainsTreeNut,
			&i.ValidIngredientContainsSoy,
			&i.ValidIngredientContainsWheat,
			&i.ValidIngredientContainsShellfish,
			&i.ValidIngredientContainsSesame,
			&i.ValidIngredientContainsFish,
			&i.ValidIngredientContainsGluten,
			&i.ValidIngredientAnimalFlesh,
			&i.ValidIngredientVolumetric,
			&i.ValidIngredientIsLiquid,
			&i.ValidIngredientIconPath,
			&i.ValidIngredientAnimalDerived,
			&i.ValidIngredientPluralName,
			&i.ValidIngredientRestrictToPreparations,
			&i.ValidIngredientMinimumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientMaximumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientStorageInstructions,
			&i.ValidIngredientSlug,
			&i.ValidIngredientContainsAlcohol,
			&i.ValidIngredientShoppingSuggestions,
			&i.ValidIngredientIsStarch,
			&i.ValidIngredientIsProtein,
			&i.ValidIngredientIsGrain,
			&i.ValidIngredientIsFruit,
			&i.ValidIngredientIsSalt,
			&i.ValidIngredientIsFat,
			&i.ValidIngredientIsAcid,
			&i.ValidIngredientIsHeat,
			&i.ValidIngredientLastIndexedAt,
			&i.ValidIngredientCreatedAt,
			&i.ValidIngredientLastUpdatedAt,
			&i.ValidIngredientArchivedAt,
			&i.ValidIngredientStateIngredientValidIngredientState,
			&i.ValidIngredientStateIngredientValidIngredient,
			&i.ValidIngredientStateIngredientCreatedAt,
			&i.ValidIngredientStateIngredientLastUpdatedAt,
			&i.ValidIngredientStateIngredientArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidIngredientStateIngredientsWithIDs = `-- name: GetValidIngredientStateIngredientsWithIDs :many

SELECT
	valid_ingredient_state_ingredients.id as valid_ingredient_state_ingredient_id,
	valid_ingredient_state_ingredients.notes as valid_ingredient_state_ingredient_notes,
	valid_ingredient_states.id as valid_ingredient_state_id,
	valid_ingredient_states.name as valid_ingredient_state_name,
	valid_ingredient_states.past_tense as valid_ingredient_state_past_tense,
	valid_ingredient_states.slug as valid_ingredient_state_slug,
	valid_ingredient_states.description as valid_ingredient_state_description,
	valid_ingredient_states.icon_path as valid_ingredient_state_icon_path,
	valid_ingredient_states.attribute_type as valid_ingredient_state_attribute_type,
	valid_ingredient_states.last_indexed_at as valid_ingredient_state_last_indexed_at,
	valid_ingredient_states.created_at as valid_ingredient_state_created_at,
	valid_ingredient_states.last_updated_at as valid_ingredient_state_last_updated_at,
	valid_ingredient_states.archived_at as valid_ingredient_state_archived_at,
	valid_ingredients.id as valid_ingredient_id,
	valid_ingredients.name as valid_ingredient_name,
	valid_ingredients.description as valid_ingredient_description,
	valid_ingredients.warning as valid_ingredient_warning,
	valid_ingredients.contains_egg as valid_ingredient_contains_egg,
	valid_ingredients.contains_dairy as valid_ingredient_contains_dairy,
	valid_ingredients.contains_peanut as valid_ingredient_contains_peanut,
	valid_ingredients.contains_tree_nut as valid_ingredient_contains_tree_nut,
	valid_ingredients.contains_soy as valid_ingredient_contains_soy,
	valid_ingredients.contains_wheat as valid_ingredient_contains_wheat,
	valid_ingredients.contains_shellfish as valid_ingredient_contains_shellfish,
	valid_ingredients.contains_sesame as valid_ingredient_contains_sesame,
	valid_ingredients.contains_fish as valid_ingredient_contains_fish,
	valid_ingredients.contains_gluten as valid_ingredient_contains_gluten,
	valid_ingredients.animal_flesh as valid_ingredient_animal_flesh,
	valid_ingredients.volumetric as valid_ingredient_volumetric,
	valid_ingredients.is_liquid as valid_ingredient_is_liquid,
	valid_ingredients.icon_path as valid_ingredient_icon_path,
	valid_ingredients.animal_derived as valid_ingredient_animal_derived,
	valid_ingredients.plural_name as valid_ingredient_plural_name,
	valid_ingredients.restrict_to_preparations as valid_ingredient_restrict_to_preparations,
	valid_ingredients.minimum_ideal_storage_temperature_in_celsius as valid_ingredient_minimum_ideal_storage_temperature_in_celsius,
	valid_ingredients.maximum_ideal_storage_temperature_in_celsius as valid_ingredient_maximum_ideal_storage_temperature_in_celsius,
	valid_ingredients.storage_instructions as valid_ingredient_storage_instructions,
	valid_ingredients.slug as valid_ingredient_slug,
	valid_ingredients.contains_alcohol as valid_ingredient_contains_alcohol,
	valid_ingredients.shopping_suggestions as valid_ingredient_shopping_suggestions,
	valid_ingredients.is_starch as valid_ingredient_is_starch,
	valid_ingredients.is_protein as valid_ingredient_is_protein,
	valid_ingredients.is_grain as valid_ingredient_is_grain,
	valid_ingredients.is_fruit as valid_ingredient_is_fruit,
	valid_ingredients.is_salt as valid_ingredient_is_salt,
	valid_ingredients.is_fat as valid_ingredient_is_fat,
	valid_ingredients.is_acid as valid_ingredient_is_acid,
	valid_ingredients.is_heat as valid_ingredient_is_heat,
	valid_ingredients.last_indexed_at as valid_ingredient_last_indexed_at,
	valid_ingredients.created_at as valid_ingredient_created_at,
	valid_ingredients.last_updated_at as valid_ingredient_last_updated_at,
	valid_ingredients.archived_at as valid_ingredient_archived_at,
	valid_ingredient_state_ingredients.valid_ingredient_state as valid_ingredient_state_ingredient_valid_ingredient_state,
	valid_ingredient_state_ingredients.valid_ingredient as valid_ingredient_state_ingredient_valid_ingredient,
	valid_ingredient_state_ingredients.created_at as valid_ingredient_state_ingredient_created_at,
	valid_ingredient_state_ingredients.last_updated_at as valid_ingredient_state_ingredient_last_updated_at,
	valid_ingredient_state_ingredients.archived_at as valid_ingredient_state_ingredient_archived_at
FROM valid_ingredient_state_ingredients
	JOIN valid_ingredients ON valid_ingredient_state_ingredients.valid_ingredient = valid_ingredients.id
	JOIN valid_ingredient_states ON valid_ingredient_state_ingredients.valid_ingredient_state = valid_ingredient_states.id
WHERE
	valid_ingredient_state_ingredients.archived_at IS NULL
	AND valid_ingredients.archived_at IS NULL
	AND valid_ingredient_states.archived_at IS NULL
	AND valid_ingredient_state_ingredients.id = ANY($1::text[])
`

type GetValidIngredientStateIngredientsWithIDsRow struct {
	ValidIngredientCreatedAt                               time.Time
	ValidIngredientStateIngredientCreatedAt                time.Time
	ValidIngredientStateCreatedAt                          time.Time
	ValidIngredientStateLastUpdatedAt                      sql.NullTime
	ValidIngredientLastIndexedAt                           sql.NullTime
	ValidIngredientLastUpdatedAt                           sql.NullTime
	ValidIngredientArchivedAt                              sql.NullTime
	ValidIngredientStateIngredientLastUpdatedAt            sql.NullTime
	ValidIngredientStateIngredientArchivedAt               sql.NullTime
	ValidIngredientStateArchivedAt                         sql.NullTime
	ValidIngredientStateLastIndexedAt                      sql.NullTime
	ValidIngredientStateAttributeType                      IngredientAttributeType
	ValidIngredientStatePastTense                          string
	ValidIngredientID                                      string
	ValidIngredientName                                    string
	ValidIngredientDescription                             string
	ValidIngredientWarning                                 string
	ValidIngredientStateIconPath                           string
	ValidIngredientStateDescription                        string
	ValidIngredientStateSlug                               string
	ValidIngredientStateIngredientValidIngredient          string
	ValidIngredientStateIngredientValidIngredientState     string
	ValidIngredientPluralName                              string
	ValidIngredientStateName                               string
	ValidIngredientStateID                                 string
	ValidIngredientStateIngredientNotes                    string
	ValidIngredientShoppingSuggestions                     string
	ValidIngredientStateIngredientID                       string
	ValidIngredientSlug                                    string
	ValidIngredientStorageInstructions                     string
	ValidIngredientIconPath                                string
	ValidIngredientMinimumIdealStorageTemperatureInCelsius sql.NullString
	ValidIngredientMaximumIdealStorageTemperatureInCelsius sql.NullString
	ValidIngredientIsLiquid                                sql.NullBool
	ValidIngredientAnimalFlesh                             bool
	ValidIngredientRestrictToPreparations                  bool
	ValidIngredientAnimalDerived                           bool
	ValidIngredientVolumetric                              bool
	ValidIngredientContainsAlcohol                         bool
	ValidIngredientContainsGluten                          bool
	ValidIngredientIsStarch                                bool
	ValidIngredientIsProtein                               bool
	ValidIngredientIsGrain                                 bool
	ValidIngredientIsFruit                                 bool
	ValidIngredientIsSalt                                  bool
	ValidIngredientIsFat                                   bool
	ValidIngredientIsAcid                                  bool
	ValidIngredientIsHeat                                  bool
	ValidIngredientContainsFish                            bool
	ValidIngredientContainsSesame                          bool
	ValidIngredientContainsShellfish                       bool
	ValidIngredientContainsWheat                           bool
	ValidIngredientContainsSoy                             bool
	ValidIngredientContainsTreeNut                         bool
	ValidIngredientContainsPeanut                          bool
	ValidIngredientContainsDairy                           bool
	ValidIngredientContainsEgg                             bool
}

func (q *Queries) GetValidIngredientStateIngredientsWithIDs(ctx context.Context, db DBTX, ids []string) ([]*GetValidIngredientStateIngredientsWithIDsRow, error) {
	rows, err := db.QueryContext(ctx, getValidIngredientStateIngredientsWithIDs, pq.Array(ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidIngredientStateIngredientsWithIDsRow{}
	for rows.Next() {
		var i GetValidIngredientStateIngredientsWithIDsRow
		if err := rows.Scan(
			&i.ValidIngredientStateIngredientID,
			&i.ValidIngredientStateIngredientNotes,
			&i.ValidIngredientStateID,
			&i.ValidIngredientStateName,
			&i.ValidIngredientStatePastTense,
			&i.ValidIngredientStateSlug,
			&i.ValidIngredientStateDescription,
			&i.ValidIngredientStateIconPath,
			&i.ValidIngredientStateAttributeType,
			&i.ValidIngredientStateLastIndexedAt,
			&i.ValidIngredientStateCreatedAt,
			&i.ValidIngredientStateLastUpdatedAt,
			&i.ValidIngredientStateArchivedAt,
			&i.ValidIngredientID,
			&i.ValidIngredientName,
			&i.ValidIngredientDescription,
			&i.ValidIngredientWarning,
			&i.ValidIngredientContainsEgg,
			&i.ValidIngredientContainsDairy,
			&i.ValidIngredientContainsPeanut,
			&i.ValidIngredientContainsTreeNut,
			&i.ValidIngredientContainsSoy,
			&i.ValidIngredientContainsWheat,
			&i.ValidIngredientContainsShellfish,
			&i.ValidIngredientContainsSesame,
			&i.ValidIngredientContainsFish,
			&i.ValidIngredientContainsGluten,
			&i.ValidIngredientAnimalFlesh,
			&i.ValidIngredientVolumetric,
			&i.ValidIngredientIsLiquid,
			&i.ValidIngredientIconPath,
			&i.ValidIngredientAnimalDerived,
			&i.ValidIngredientPluralName,
			&i.ValidIngredientRestrictToPreparations,
			&i.ValidIngredientMinimumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientMaximumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientStorageInstructions,
			&i.ValidIngredientSlug,
			&i.ValidIngredientContainsAlcohol,
			&i.ValidIngredientShoppingSuggestions,
			&i.ValidIngredientIsStarch,
			&i.ValidIngredientIsProtein,
			&i.ValidIngredientIsGrain,
			&i.ValidIngredientIsFruit,
			&i.ValidIngredientIsSalt,
			&i.ValidIngredientIsFat,
			&i.ValidIngredientIsAcid,
			&i.ValidIngredientIsHeat,
			&i.ValidIngredientLastIndexedAt,
			&i.ValidIngredientCreatedAt,
			&i.ValidIngredientLastUpdatedAt,
			&i.ValidIngredientArchivedAt,
			&i.ValidIngredientStateIngredientValidIngredientState,
			&i.ValidIngredientStateIngredientValidIngredient,
			&i.ValidIngredientStateIngredientCreatedAt,
			&i.ValidIngredientStateIngredientLastUpdatedAt,
			&i.ValidIngredientStateIngredientArchivedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateValidIngredientStateIngredient = `-- name: UpdateValidIngredientStateIngredient :execrows

UPDATE valid_ingredient_state_ingredients SET
	notes = $1,
	valid_ingredient_state = $2,
	valid_ingredient = $3,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND id = $4
`

type UpdateValidIngredientStateIngredientParams struct {
	Notes                string
	ValidIngredientState string
	ValidIngredient      string
	ID                   string
}

func (q *Queries) UpdateValidIngredientStateIngredient(ctx context.Context, db DBTX, arg *UpdateValidIngredientStateIngredientParams) (int64, error) {
	result, err := db.ExecContext(ctx, updateValidIngredientStateIngredient,
		arg.Notes,
		arg.ValidIngredientState,
		arg.ValidIngredient,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
