// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user_ingredient_preferences.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const archiveUserIngredientPreference = `-- name: ArchiveUserIngredientPreference :execrows

UPDATE user_ingredient_preferences SET archived_at = NOW() WHERE archived_at IS NULL AND belongs_to_user = $1 AND id = $2
`

type ArchiveUserIngredientPreferenceParams struct {
	BelongsToUser string
	ID            string
}

func (q *Queries) ArchiveUserIngredientPreference(ctx context.Context, db DBTX, arg *ArchiveUserIngredientPreferenceParams) (int64, error) {
	result, err := db.ExecContext(ctx, archiveUserIngredientPreference, arg.BelongsToUser, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const checkUserIngredientPreferenceExistence = `-- name: CheckUserIngredientPreferenceExistence :one

SELECT EXISTS (
	SELECT user_ingredient_preferences.id
	FROM user_ingredient_preferences
	WHERE user_ingredient_preferences.archived_at IS NULL
		AND user_ingredient_preferences.id = $1
		AND user_ingredient_preferences.belongs_to_user = $2
)
`

type CheckUserIngredientPreferenceExistenceParams struct {
	ID            string
	BelongsToUser string
}

func (q *Queries) CheckUserIngredientPreferenceExistence(ctx context.Context, db DBTX, arg *CheckUserIngredientPreferenceExistenceParams) (bool, error) {
	row := db.QueryRowContext(ctx, checkUserIngredientPreferenceExistence, arg.ID, arg.BelongsToUser)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUserIngredientPreference = `-- name: CreateUserIngredientPreference :exec

INSERT INTO user_ingredient_preferences (
	id,
	ingredient,
	rating,
	notes,
	allergy,
	belongs_to_user
) VALUES (
	$1,
	$2,
	$3,
	$4,
	$5,
	$6
)
`

type CreateUserIngredientPreferenceParams struct {
	ID            string
	Ingredient    string
	Notes         string
	BelongsToUser string
	Rating        int16
	Allergy       bool
}

func (q *Queries) CreateUserIngredientPreference(ctx context.Context, db DBTX, arg *CreateUserIngredientPreferenceParams) error {
	_, err := db.ExecContext(ctx, createUserIngredientPreference,
		arg.ID,
		arg.Ingredient,
		arg.Rating,
		arg.Notes,
		arg.Allergy,
		arg.BelongsToUser,
	)
	return err
}

const getUserIngredientPreference = `-- name: GetUserIngredientPreference :one

SELECT
	user_ingredient_preferences.id,
	valid_ingredients.id as valid_ingredient_id,
	valid_ingredients.name as valid_ingredient_name,
	valid_ingredients.description as valid_ingredient_description,
	valid_ingredients.warning as valid_ingredient_warning,
	valid_ingredients.contains_egg as valid_ingredient_contains_egg,
	valid_ingredients.contains_dairy as valid_ingredient_contains_dairy,
	valid_ingredients.contains_peanut as valid_ingredient_contains_peanut,
	valid_ingredients.contains_tree_nut as valid_ingredient_contains_tree_nut,
	valid_ingredients.contains_soy as valid_ingredient_contains_soy,
	valid_ingredients.contains_wheat as valid_ingredient_contains_wheat,
	valid_ingredients.contains_shellfish as valid_ingredient_contains_shellfish,
	valid_ingredients.contains_sesame as valid_ingredient_contains_sesame,
	valid_ingredients.contains_fish as valid_ingredient_contains_fish,
	valid_ingredients.contains_gluten as valid_ingredient_contains_gluten,
	valid_ingredients.animal_flesh as valid_ingredient_animal_flesh,
	valid_ingredients.volumetric as valid_ingredient_volumetric,
	valid_ingredients.is_liquid as valid_ingredient_is_liquid,
	valid_ingredients.icon_path as valid_ingredient_icon_path,
	valid_ingredients.animal_derived as valid_ingredient_animal_derived,
	valid_ingredients.plural_name as valid_ingredient_plural_name,
	valid_ingredients.restrict_to_preparations as valid_ingredient_restrict_to_preparations,
	valid_ingredients.minimum_ideal_storage_temperature_in_celsius as valid_ingredient_minimum_ideal_storage_temperature_in_celsius,
	valid_ingredients.maximum_ideal_storage_temperature_in_celsius as valid_ingredient_maximum_ideal_storage_temperature_in_celsius,
	valid_ingredients.storage_instructions as valid_ingredient_storage_instructions,
	valid_ingredients.slug as valid_ingredient_slug,
	valid_ingredients.contains_alcohol as valid_ingredient_contains_alcohol,
	valid_ingredients.shopping_suggestions as valid_ingredient_shopping_suggestions,
	valid_ingredients.is_starch as valid_ingredient_is_starch,
	valid_ingredients.is_protein as valid_ingredient_is_protein,
	valid_ingredients.is_grain as valid_ingredient_is_grain,
	valid_ingredients.is_fruit as valid_ingredient_is_fruit,
	valid_ingredients.is_salt as valid_ingredient_is_salt,
	valid_ingredients.is_fat as valid_ingredient_is_fat,
	valid_ingredients.is_acid as valid_ingredient_is_acid,
	valid_ingredients.is_heat as valid_ingredient_is_heat,
	valid_ingredients.last_indexed_at as valid_ingredient_last_indexed_at,
	valid_ingredients.created_at as valid_ingredient_created_at,
	valid_ingredients.last_updated_at as valid_ingredient_last_updated_at,
	valid_ingredients.archived_at as valid_ingredient_archived_at,
	user_ingredient_preferences.rating,
	user_ingredient_preferences.notes,
	user_ingredient_preferences.allergy,
	user_ingredient_preferences.belongs_to_user,
	user_ingredient_preferences.created_at,
	user_ingredient_preferences.last_updated_at,
	user_ingredient_preferences.archived_at
FROM user_ingredient_preferences
	JOIN valid_ingredients ON valid_ingredients.id = user_ingredient_preferences.ingredient
WHERE user_ingredient_preferences.archived_at IS NULL
	AND valid_ingredients.archived_at IS NULL
	AND user_ingredient_preferences.id = $1
	AND user_ingredient_preferences.belongs_to_user = $2
`

type GetUserIngredientPreferenceParams struct {
	ID            string
	BelongsToUser string
}

type GetUserIngredientPreferenceRow struct {
	CreatedAt                                              time.Time
	ValidIngredientCreatedAt                               time.Time
	ValidIngredientLastIndexedAt                           sql.NullTime
	ValidIngredientArchivedAt                              sql.NullTime
	ValidIngredientLastUpdatedAt                           sql.NullTime
	ArchivedAt                                             sql.NullTime
	LastUpdatedAt                                          sql.NullTime
	BelongsToUser                                          string
	ValidIngredientID                                      string
	Notes                                                  string
	ValidIngredientStorageInstructions                     string
	ID                                                     string
	ValidIngredientName                                    string
	ValidIngredientWarning                                 string
	ValidIngredientDescription                             string
	ValidIngredientPluralName                              string
	ValidIngredientShoppingSuggestions                     string
	ValidIngredientSlug                                    string
	ValidIngredientIconPath                                string
	ValidIngredientMaximumIdealStorageTemperatureInCelsius sql.NullString
	ValidIngredientMinimumIdealStorageTemperatureInCelsius sql.NullString
	Rating                                                 int16
	ValidIngredientIsLiquid                                sql.NullBool
	ValidIngredientContainsShellfish                       bool
	ValidIngredientIsAcid                                  bool
	ValidIngredientAnimalDerived                           bool
	ValidIngredientContainsAlcohol                         bool
	ValidIngredientVolumetric                              bool
	ValidIngredientIsStarch                                bool
	ValidIngredientIsProtein                               bool
	ValidIngredientIsGrain                                 bool
	ValidIngredientIsFruit                                 bool
	ValidIngredientIsSalt                                  bool
	ValidIngredientIsFat                                   bool
	ValidIngredientRestrictToPreparations                  bool
	ValidIngredientIsHeat                                  bool
	ValidIngredientAnimalFlesh                             bool
	ValidIngredientContainsGluten                          bool
	ValidIngredientContainsFish                            bool
	ValidIngredientContainsSesame                          bool
	ValidIngredientContainsWheat                           bool
	ValidIngredientContainsSoy                             bool
	Allergy                                                bool
	ValidIngredientContainsTreeNut                         bool
	ValidIngredientContainsPeanut                          bool
	ValidIngredientContainsDairy                           bool
	ValidIngredientContainsEgg                             bool
}

func (q *Queries) GetUserIngredientPreference(ctx context.Context, db DBTX, arg *GetUserIngredientPreferenceParams) (*GetUserIngredientPreferenceRow, error) {
	row := db.QueryRowContext(ctx, getUserIngredientPreference, arg.ID, arg.BelongsToUser)
	var i GetUserIngredientPreferenceRow
	err := row.Scan(
		&i.ID,
		&i.ValidIngredientID,
		&i.ValidIngredientName,
		&i.ValidIngredientDescription,
		&i.ValidIngredientWarning,
		&i.ValidIngredientContainsEgg,
		&i.ValidIngredientContainsDairy,
		&i.ValidIngredientContainsPeanut,
		&i.ValidIngredientContainsTreeNut,
		&i.ValidIngredientContainsSoy,
		&i.ValidIngredientContainsWheat,
		&i.ValidIngredientContainsShellfish,
		&i.ValidIngredientContainsSesame,
		&i.ValidIngredientContainsFish,
		&i.ValidIngredientContainsGluten,
		&i.ValidIngredientAnimalFlesh,
		&i.ValidIngredientVolumetric,
		&i.ValidIngredientIsLiquid,
		&i.ValidIngredientIconPath,
		&i.ValidIngredientAnimalDerived,
		&i.ValidIngredientPluralName,
		&i.ValidIngredientRestrictToPreparations,
		&i.ValidIngredientMinimumIdealStorageTemperatureInCelsius,
		&i.ValidIngredientMaximumIdealStorageTemperatureInCelsius,
		&i.ValidIngredientStorageInstructions,
		&i.ValidIngredientSlug,
		&i.ValidIngredientContainsAlcohol,
		&i.ValidIngredientShoppingSuggestions,
		&i.ValidIngredientIsStarch,
		&i.ValidIngredientIsProtein,
		&i.ValidIngredientIsGrain,
		&i.ValidIngredientIsFruit,
		&i.ValidIngredientIsSalt,
		&i.ValidIngredientIsFat,
		&i.ValidIngredientIsAcid,
		&i.ValidIngredientIsHeat,
		&i.ValidIngredientLastIndexedAt,
		&i.ValidIngredientCreatedAt,
		&i.ValidIngredientLastUpdatedAt,
		&i.ValidIngredientArchivedAt,
		&i.Rating,
		&i.Notes,
		&i.Allergy,
		&i.BelongsToUser,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.ArchivedAt,
	)
	return &i, err
}

const getUserIngredientPreferencesForUser = `-- name: GetUserIngredientPreferencesForUser :many

SELECT
	user_ingredient_preferences.id,
	valid_ingredients.id as valid_ingredient_id,
	valid_ingredients.name as valid_ingredient_name,
	valid_ingredients.description as valid_ingredient_description,
	valid_ingredients.warning as valid_ingredient_warning,
	valid_ingredients.contains_egg as valid_ingredient_contains_egg,
	valid_ingredients.contains_dairy as valid_ingredient_contains_dairy,
	valid_ingredients.contains_peanut as valid_ingredient_contains_peanut,
	valid_ingredients.contains_tree_nut as valid_ingredient_contains_tree_nut,
	valid_ingredients.contains_soy as valid_ingredient_contains_soy,
	valid_ingredients.contains_wheat as valid_ingredient_contains_wheat,
	valid_ingredients.contains_shellfish as valid_ingredient_contains_shellfish,
	valid_ingredients.contains_sesame as valid_ingredient_contains_sesame,
	valid_ingredients.contains_fish as valid_ingredient_contains_fish,
	valid_ingredients.contains_gluten as valid_ingredient_contains_gluten,
	valid_ingredients.animal_flesh as valid_ingredient_animal_flesh,
	valid_ingredients.volumetric as valid_ingredient_volumetric,
	valid_ingredients.is_liquid as valid_ingredient_is_liquid,
	valid_ingredients.icon_path as valid_ingredient_icon_path,
	valid_ingredients.animal_derived as valid_ingredient_animal_derived,
	valid_ingredients.plural_name as valid_ingredient_plural_name,
	valid_ingredients.restrict_to_preparations as valid_ingredient_restrict_to_preparations,
	valid_ingredients.minimum_ideal_storage_temperature_in_celsius as valid_ingredient_minimum_ideal_storage_temperature_in_celsius,
	valid_ingredients.maximum_ideal_storage_temperature_in_celsius as valid_ingredient_maximum_ideal_storage_temperature_in_celsius,
	valid_ingredients.storage_instructions as valid_ingredient_storage_instructions,
	valid_ingredients.slug as valid_ingredient_slug,
	valid_ingredients.contains_alcohol as valid_ingredient_contains_alcohol,
	valid_ingredients.shopping_suggestions as valid_ingredient_shopping_suggestions,
	valid_ingredients.is_starch as valid_ingredient_is_starch,
	valid_ingredients.is_protein as valid_ingredient_is_protein,
	valid_ingredients.is_grain as valid_ingredient_is_grain,
	valid_ingredients.is_fruit as valid_ingredient_is_fruit,
	valid_ingredients.is_salt as valid_ingredient_is_salt,
	valid_ingredients.is_fat as valid_ingredient_is_fat,
	valid_ingredients.is_acid as valid_ingredient_is_acid,
	valid_ingredients.is_heat as valid_ingredient_is_heat,
	valid_ingredients.last_indexed_at as valid_ingredient_last_indexed_at,
	valid_ingredients.created_at as valid_ingredient_created_at,
	valid_ingredients.last_updated_at as valid_ingredient_last_updated_at,
	valid_ingredients.archived_at as valid_ingredient_archived_at,
	user_ingredient_preferences.rating,
	user_ingredient_preferences.notes,
	user_ingredient_preferences.allergy,
	user_ingredient_preferences.belongs_to_user,
	user_ingredient_preferences.created_at,
	user_ingredient_preferences.last_updated_at,
	user_ingredient_preferences.archived_at,
	(
		SELECT COUNT(user_ingredient_preferences.id)
		FROM user_ingredient_preferences
		WHERE user_ingredient_preferences.archived_at IS NULL
			AND user_ingredient_preferences.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
			AND user_ingredient_preferences.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
			AND (
				user_ingredient_preferences.last_updated_at IS NULL
				OR user_ingredient_preferences.last_updated_at > COALESCE($3, (SELECT NOW() - '999 years'::INTERVAL))
			)
			AND (
				user_ingredient_preferences.last_updated_at IS NULL
				OR user_ingredient_preferences.last_updated_at < COALESCE($4, (SELECT NOW() + '999 years'::INTERVAL))
			)
	) AS filtered_count,
	(
		SELECT COUNT(user_ingredient_preferences.id)
		FROM user_ingredient_preferences
		WHERE user_ingredient_preferences.archived_at IS NULL
	) AS total_count
FROM user_ingredient_preferences
	JOIN valid_ingredients ON valid_ingredients.id = user_ingredient_preferences.ingredient
WHERE user_ingredient_preferences.archived_at IS NULL
	AND user_ingredient_preferences.belongs_to_user = $5
	AND valid_ingredients.archived_at IS NULL
	AND user_ingredient_preferences.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
	AND user_ingredient_preferences.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
	AND (
		user_ingredient_preferences.last_updated_at IS NULL
		OR user_ingredient_preferences.last_updated_at > COALESCE($4, (SELECT NOW() - '999 years'::INTERVAL))
	)
	AND (
		user_ingredient_preferences.last_updated_at IS NULL
		OR user_ingredient_preferences.last_updated_at < COALESCE($3, (SELECT NOW() + '999 years'::INTERVAL))
	)
LIMIT $7
OFFSET $6
`

type GetUserIngredientPreferencesForUserParams struct {
	CreatedAfter  sql.NullTime
	CreatedBefore sql.NullTime
	UpdatedBefore sql.NullTime
	UpdatedAfter  sql.NullTime
	BelongsToUser string
	QueryOffset   sql.NullInt32
	QueryLimit    sql.NullInt32
}

type GetUserIngredientPreferencesForUserRow struct {
	CreatedAt                                              time.Time
	ValidIngredientCreatedAt                               time.Time
	ValidIngredientLastIndexedAt                           sql.NullTime
	ArchivedAt                                             sql.NullTime
	LastUpdatedAt                                          sql.NullTime
	ValidIngredientArchivedAt                              sql.NullTime
	ValidIngredientLastUpdatedAt                           sql.NullTime
	ValidIngredientStorageInstructions                     string
	ValidIngredientPluralName                              string
	ID                                                     string
	ValidIngredientShoppingSuggestions                     string
	ValidIngredientID                                      string
	ValidIngredientName                                    string
	ValidIngredientDescription                             string
	BelongsToUser                                          string
	Notes                                                  string
	ValidIngredientSlug                                    string
	ValidIngredientWarning                                 string
	ValidIngredientIconPath                                string
	ValidIngredientMinimumIdealStorageTemperatureInCelsius sql.NullString
	ValidIngredientMaximumIdealStorageTemperatureInCelsius sql.NullString
	FilteredCount                                          int64
	TotalCount                                             int64
	Rating                                                 int16
	ValidIngredientIsLiquid                                sql.NullBool
	ValidIngredientIsStarch                                bool
	ValidIngredientContainsPeanut                          bool
	ValidIngredientRestrictToPreparations                  bool
	ValidIngredientContainsTreeNut                         bool
	ValidIngredientIsProtein                               bool
	ValidIngredientIsGrain                                 bool
	ValidIngredientIsFruit                                 bool
	ValidIngredientIsSalt                                  bool
	ValidIngredientIsFat                                   bool
	ValidIngredientIsAcid                                  bool
	ValidIngredientIsHeat                                  bool
	ValidIngredientContainsAlcohol                         bool
	ValidIngredientContainsDairy                           bool
	ValidIngredientContainsEgg                             bool
	ValidIngredientAnimalDerived                           bool
	ValidIngredientVolumetric                              bool
	ValidIngredientAnimalFlesh                             bool
	Allergy                                                bool
	ValidIngredientContainsGluten                          bool
	ValidIngredientContainsFish                            bool
	ValidIngredientContainsSesame                          bool
	ValidIngredientContainsShellfish                       bool
	ValidIngredientContainsWheat                           bool
	ValidIngredientContainsSoy                             bool
}

func (q *Queries) GetUserIngredientPreferencesForUser(ctx context.Context, db DBTX, arg *GetUserIngredientPreferencesForUserParams) ([]*GetUserIngredientPreferencesForUserRow, error) {
	rows, err := db.QueryContext(ctx, getUserIngredientPreferencesForUser,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedBefore,
		arg.UpdatedAfter,
		arg.BelongsToUser,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetUserIngredientPreferencesForUserRow{}
	for rows.Next() {
		var i GetUserIngredientPreferencesForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.ValidIngredientID,
			&i.ValidIngredientName,
			&i.ValidIngredientDescription,
			&i.ValidIngredientWarning,
			&i.ValidIngredientContainsEgg,
			&i.ValidIngredientContainsDairy,
			&i.ValidIngredientContainsPeanut,
			&i.ValidIngredientContainsTreeNut,
			&i.ValidIngredientContainsSoy,
			&i.ValidIngredientContainsWheat,
			&i.ValidIngredientContainsShellfish,
			&i.ValidIngredientContainsSesame,
			&i.ValidIngredientContainsFish,
			&i.ValidIngredientContainsGluten,
			&i.ValidIngredientAnimalFlesh,
			&i.ValidIngredientVolumetric,
			&i.ValidIngredientIsLiquid,
			&i.ValidIngredientIconPath,
			&i.ValidIngredientAnimalDerived,
			&i.ValidIngredientPluralName,
			&i.ValidIngredientRestrictToPreparations,
			&i.ValidIngredientMinimumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientMaximumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientStorageInstructions,
			&i.ValidIngredientSlug,
			&i.ValidIngredientContainsAlcohol,
			&i.ValidIngredientShoppingSuggestions,
			&i.ValidIngredientIsStarch,
			&i.ValidIngredientIsProtein,
			&i.ValidIngredientIsGrain,
			&i.ValidIngredientIsFruit,
			&i.ValidIngredientIsSalt,
			&i.ValidIngredientIsFat,
			&i.ValidIngredientIsAcid,
			&i.ValidIngredientIsHeat,
			&i.ValidIngredientLastIndexedAt,
			&i.ValidIngredientCreatedAt,
			&i.ValidIngredientLastUpdatedAt,
			&i.ValidIngredientArchivedAt,
			&i.Rating,
			&i.Notes,
			&i.Allergy,
			&i.BelongsToUser,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserIngredientPreference = `-- name: UpdateUserIngredientPreference :execrows

UPDATE user_ingredient_preferences SET
	ingredient = $1,
	rating = $2,
	notes = $3,
	allergy = $4,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND belongs_to_user = $5
	AND id = $6
`

type UpdateUserIngredientPreferenceParams struct {
	Ingredient    string
	Notes         string
	BelongsToUser string
	ID            string
	Rating        int16
	Allergy       bool
}

func (q *Queries) UpdateUserIngredientPreference(ctx context.Context, db DBTX, arg *UpdateUserIngredientPreferenceParams) (int64, error) {
	result, err := db.ExecContext(ctx, updateUserIngredientPreference,
		arg.Ingredient,
		arg.Rating,
		arg.Notes,
		arg.Allergy,
		arg.BelongsToUser,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
