// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: valid_ingredient_groups.sql

package generated

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const archiveValidIngredientGroup = `-- name: ArchiveValidIngredientGroup :execrows

UPDATE valid_ingredient_groups SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1
`

func (q *Queries) ArchiveValidIngredientGroup(ctx context.Context, db DBTX, id string) (int64, error) {
	result, err := db.ExecContext(ctx, archiveValidIngredientGroup, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const archiveValidIngredientGroupMember = `-- name: ArchiveValidIngredientGroupMember :execrows

UPDATE valid_ingredient_group_members SET
	archived_at = NOW()
WHERE archived_at IS NULL
	AND id = $1
	AND belongs_to_group = $2
`

type ArchiveValidIngredientGroupMemberParams struct {
	ID             string
	BelongsToGroup string
}

func (q *Queries) ArchiveValidIngredientGroupMember(ctx context.Context, db DBTX, arg *ArchiveValidIngredientGroupMemberParams) (int64, error) {
	result, err := db.ExecContext(ctx, archiveValidIngredientGroupMember, arg.ID, arg.BelongsToGroup)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const checkValidIngredientGroupExistence = `-- name: CheckValidIngredientGroupExistence :one

SELECT EXISTS (
	SELECT valid_ingredient_groups.id
	FROM valid_ingredient_groups
	WHERE valid_ingredient_groups.archived_at IS NULL
		AND valid_ingredient_groups.id = $1
)
`

func (q *Queries) CheckValidIngredientGroupExistence(ctx context.Context, db DBTX, id string) (bool, error) {
	row := db.QueryRowContext(ctx, checkValidIngredientGroupExistence, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createValidIngredientGroup = `-- name: CreateValidIngredientGroup :exec

INSERT INTO valid_ingredient_groups (
	id,
	name,
	description,
	slug
) VALUES (
	$1,
	$2,
	$3,
	$4
)
`

type CreateValidIngredientGroupParams struct {
	ID          string
	Name        string
	Description string
	Slug        string
}

func (q *Queries) CreateValidIngredientGroup(ctx context.Context, db DBTX, arg *CreateValidIngredientGroupParams) error {
	_, err := db.ExecContext(ctx, createValidIngredientGroup,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Slug,
	)
	return err
}

const createValidIngredientGroupMember = `-- name: CreateValidIngredientGroupMember :exec

INSERT INTO valid_ingredient_group_members (
	id,
	belongs_to_group,
	valid_ingredient
) VALUES (
	$1,
	$2,
	$3
)
`

type CreateValidIngredientGroupMemberParams struct {
	ID              string
	BelongsToGroup  string
	ValidIngredient string
}

func (q *Queries) CreateValidIngredientGroupMember(ctx context.Context, db DBTX, arg *CreateValidIngredientGroupMemberParams) error {
	_, err := db.ExecContext(ctx, createValidIngredientGroupMember, arg.ID, arg.BelongsToGroup, arg.ValidIngredient)
	return err
}

const getValidIngredientGroup = `-- name: GetValidIngredientGroup :one

SELECT
	valid_ingredient_groups.id,
	valid_ingredient_groups.name,
	valid_ingredient_groups.description,
	valid_ingredient_groups.slug,
	valid_ingredient_groups.created_at,
	valid_ingredient_groups.last_updated_at,
	valid_ingredient_groups.archived_at
FROM valid_ingredient_groups
WHERE valid_ingredient_groups.archived_at IS NULL
AND valid_ingredient_groups.id = $1
`

type GetValidIngredientGroupRow struct {
	ID            string
	Name          string
	Description   string
	Slug          string
	CreatedAt     time.Time
	LastUpdatedAt sql.NullTime
	ArchivedAt    sql.NullTime
}

func (q *Queries) GetValidIngredientGroup(ctx context.Context, db DBTX, id string) (*GetValidIngredientGroupRow, error) {
	row := db.QueryRowContext(ctx, getValidIngredientGroup, id)
	var i GetValidIngredientGroupRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Slug,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.ArchivedAt,
	)
	return &i, err
}

const getValidIngredientGroupMembers = `-- name: GetValidIngredientGroupMembers :many

SELECT
	valid_ingredient_group_members.id,
	valid_ingredient_group_members.belongs_to_group,
	valid_ingredients.id as valid_ingredient_id,
	valid_ingredients.name as valid_ingredient_name,
	valid_ingredients.description as valid_ingredient_description,
	valid_ingredients.warning as valid_ingredient_warning,
	valid_ingredients.contains_egg as valid_ingredient_contains_egg,
	valid_ingredients.contains_dairy as valid_ingredient_contains_dairy,
	valid_ingredients.contains_peanut as valid_ingredient_contains_peanut,
	valid_ingredients.contains_tree_nut as valid_ingredient_contains_tree_nut,
	valid_ingredients.contains_soy as valid_ingredient_contains_soy,
	valid_ingredients.contains_wheat as valid_ingredient_contains_wheat,
	valid_ingredients.contains_shellfish as valid_ingredient_contains_shellfish,
	valid_ingredients.contains_sesame as valid_ingredient_contains_sesame,
	valid_ingredients.contains_fish as valid_ingredient_contains_fish,
	valid_ingredients.contains_gluten as valid_ingredient_contains_gluten,
	valid_ingredients.animal_flesh as valid_ingredient_animal_flesh,
	valid_ingredients.volumetric as valid_ingredient_volumetric,
	valid_ingredients.is_liquid as valid_ingredient_is_liquid,
	valid_ingredients.icon_path as valid_ingredient_icon_path,
	valid_ingredients.animal_derived as valid_ingredient_animal_derived,
	valid_ingredients.plural_name as valid_ingredient_plural_name,
	valid_ingredients.restrict_to_preparations as valid_ingredient_restrict_to_preparations,
	valid_ingredients.minimum_ideal_storage_temperature_in_celsius as valid_ingredient_minimum_ideal_storage_temperature_in_celsius,
	valid_ingredients.maximum_ideal_storage_temperature_in_celsius as valid_ingredient_maximum_ideal_storage_temperature_in_celsius,
	valid_ingredients.storage_instructions as valid_ingredient_storage_instructions,
	valid_ingredients.slug as valid_ingredient_slug,
	valid_ingredients.contains_alcohol as valid_ingredient_contains_alcohol,
	valid_ingredients.shopping_suggestions as valid_ingredient_shopping_suggestions,
	valid_ingredients.is_starch as valid_ingredient_is_starch,
	valid_ingredients.is_protein as valid_ingredient_is_protein,
	valid_ingredients.is_grain as valid_ingredient_is_grain,
	valid_ingredients.is_fruit as valid_ingredient_is_fruit,
	valid_ingredients.is_salt as valid_ingredient_is_salt,
	valid_ingredients.is_fat as valid_ingredient_is_fat,
	valid_ingredients.is_acid as valid_ingredient_is_acid,
	valid_ingredients.is_heat as valid_ingredient_is_heat,
	valid_ingredients.last_indexed_at as valid_ingredient_last_indexed_at,
	valid_ingredients.created_at as valid_ingredient_created_at,
	valid_ingredients.last_updated_at as valid_ingredient_last_updated_at,
	valid_ingredients.archived_at as valid_ingredient_archived_at,
	valid_ingredient_group_members.created_at,
	valid_ingredient_group_members.archived_at
FROM valid_ingredient_group_members
	JOIN valid_ingredient_groups ON valid_ingredient_groups.id = valid_ingredient_group_members.belongs_to_group
	JOIN valid_ingredients ON valid_ingredients.id = valid_ingredient_group_members.valid_ingredient
WHERE
	valid_ingredient_groups.archived_at IS NULL
	AND valid_ingredient_group_members.archived_at IS NULL
	AND valid_ingredient_group_members.belongs_to_group = $1
`

type GetValidIngredientGroupMembersRow struct {
	ValidIngredientCreatedAt                               time.Time
	CreatedAt                                              time.Time
	ArchivedAt                                             sql.NullTime
	ValidIngredientLastIndexedAt                           sql.NullTime
	ValidIngredientLastUpdatedAt                           sql.NullTime
	ValidIngredientArchivedAt                              sql.NullTime
	ValidIngredientWarning                                 string
	ValidIngredientSlug                                    string
	ValidIngredientDescription                             string
	ValidIngredientName                                    string
	ValidIngredientID                                      string
	BelongsToGroup                                         string
	ValidIngredientShoppingSuggestions                     string
	ID                                                     string
	ValidIngredientStorageInstructions                     string
	ValidIngredientIconPath                                string
	ValidIngredientPluralName                              string
	ValidIngredientMinimumIdealStorageTemperatureInCelsius sql.NullString
	ValidIngredientMaximumIdealStorageTemperatureInCelsius sql.NullString
	ValidIngredientIsLiquid                                sql.NullBool
	ValidIngredientAnimalDerived                           bool
	ValidIngredientIsGrain                                 bool
	ValidIngredientRestrictToPreparations                  bool
	ValidIngredientAnimalFlesh                             bool
	ValidIngredientContainsGluten                          bool
	ValidIngredientContainsFish                            bool
	ValidIngredientContainsSesame                          bool
	ValidIngredientContainsAlcohol                         bool
	ValidIngredientContainsShellfish                       bool
	ValidIngredientIsStarch                                bool
	ValidIngredientIsProtein                               bool
	ValidIngredientVolumetric                              bool
	ValidIngredientIsFruit                                 bool
	ValidIngredientIsSalt                                  bool
	ValidIngredientIsFat                                   bool
	ValidIngredientIsAcid                                  bool
	ValidIngredientIsHeat                                  bool
	ValidIngredientContainsWheat                           bool
	ValidIngredientContainsSoy                             bool
	ValidIngredientContainsTreeNut                         bool
	ValidIngredientContainsPeanut                          bool
	ValidIngredientContainsDairy                           bool
	ValidIngredientContainsEgg                             bool
}

func (q *Queries) GetValidIngredientGroupMembers(ctx context.Context, db DBTX, belongsToGroup string) ([]*GetValidIngredientGroupMembersRow, error) {
	rows, err := db.QueryContext(ctx, getValidIngredientGroupMembers, belongsToGroup)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidIngredientGroupMembersRow{}
	for rows.Next() {
		var i GetValidIngredientGroupMembersRow
		if err := rows.Scan(
			&i.ID,
			&i.BelongsToGroup,
			&i.ValidIngredientID,
			&i.ValidIngredientName,
			&i.ValidIngredientDescription,
			&i.ValidIngredientWarning,
			&i.ValidIngredientContainsEgg,
			&i.ValidIngredientContainsDairy,
			&i.ValidIngredientContainsPeanut,
			&i.ValidIngredientContainsTreeNut,
			&i.ValidIngredientContainsSoy,
			&i.ValidIngredientContainsWheat,
			&i.ValidIngredientContainsShellfish,
			&i.ValidIngredientContainsSesame,
			&i.ValidIngredientContainsFish,
			&i.ValidIngredientContainsGluten,
			&i.ValidIngredientAnimalFlesh,
			&i.ValidIngredientVolumetric,
			&i.ValidIngredientIsLiquid,
			&i.ValidIngredientIconPath,
			&i.ValidIngredientAnimalDerived,
			&i.ValidIngredientPluralName,
			&i.ValidIngredientRestrictToPreparations,
			&i.ValidIngredientMinimumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientMaximumIdealStorageTemperatureInCelsius,
			&i.ValidIngredientStorageInstructions,
			&i.ValidIngredientSlug,
			&i.ValidIngredientContainsAlcohol,
			&i.ValidIngredientShoppingSuggestions,
			&i.ValidIngredientIsStarch,
			&i.ValidIngredientIsProtein,
			&i.ValidIngredientIsGrain,
			&i.ValidIngredientIsFruit,
			&i.ValidIngredientIsSalt,
			&i.ValidIngredientIsFat,
			&i.ValidIngredientIsAcid,
			&i.ValidIngredientIsHeat,
			&i.ValidIngredientLastIndexedAt,
			&i.ValidIngredientCreatedAt,
			&i.ValidIngredientLastUpdatedAt,
			&i.ValidIngredientArchivedAt,
			&i.CreatedAt,
			&i.ArchivedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidIngredientGroups = `-- name: GetValidIngredientGroups :many

SELECT
	valid_ingredient_groups.id,
	valid_ingredient_groups.name,
	valid_ingredient_groups.description,
	valid_ingredient_groups.slug,
	valid_ingredient_groups.created_at,
	valid_ingredient_groups.last_updated_at,
	valid_ingredient_groups.archived_at,
	(
		SELECT COUNT(valid_ingredient_groups.id)
		FROM valid_ingredient_groups
		WHERE valid_ingredient_groups.archived_at IS NULL
			AND valid_ingredient_groups.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
			AND valid_ingredient_groups.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
			AND (
				valid_ingredient_groups.last_updated_at IS NULL
				OR valid_ingredient_groups.last_updated_at > COALESCE($3, (SELECT NOW() - '999 years'::INTERVAL))
			)
			AND (
				valid_ingredient_groups.last_updated_at IS NULL
				OR valid_ingredient_groups.last_updated_at < COALESCE($4, (SELECT NOW() + '999 years'::INTERVAL))
			)
	) AS filtered_count,
	(
		SELECT COUNT(valid_ingredient_groups.id)
		FROM valid_ingredient_groups
		WHERE valid_ingredient_groups.archived_at IS NULL
	) AS total_count
FROM valid_ingredient_groups
WHERE
	valid_ingredient_groups.archived_at IS NULL
	AND valid_ingredient_groups.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
	AND valid_ingredient_groups.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
	AND (
		valid_ingredient_groups.last_updated_at IS NULL
		OR valid_ingredient_groups.last_updated_at > COALESCE($4, (SELECT NOW() - '999 years'::INTERVAL))
	)
	AND (
		valid_ingredient_groups.last_updated_at IS NULL
		OR valid_ingredient_groups.last_updated_at < COALESCE($3, (SELECT NOW() + '999 years'::INTERVAL))
	)
GROUP BY valid_ingredient_groups.id
ORDER BY valid_ingredient_groups.id
LIMIT $6
OFFSET $5
`

type GetValidIngredientGroupsParams struct {
	CreatedAfter  sql.NullTime
	CreatedBefore sql.NullTime
	UpdatedBefore sql.NullTime
	UpdatedAfter  sql.NullTime
	QueryOffset   sql.NullInt32
	QueryLimit    sql.NullInt32
}

type GetValidIngredientGroupsRow struct {
	ID            string
	Name          string
	Description   string
	Slug          string
	CreatedAt     time.Time
	LastUpdatedAt sql.NullTime
	ArchivedAt    sql.NullTime
	FilteredCount int64
	TotalCount    int64
}

func (q *Queries) GetValidIngredientGroups(ctx context.Context, db DBTX, arg *GetValidIngredientGroupsParams) ([]*GetValidIngredientGroupsRow, error) {
	rows, err := db.QueryContext(ctx, getValidIngredientGroups,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedBefore,
		arg.UpdatedAfter,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidIngredientGroupsRow{}
	for rows.Next() {
		var i GetValidIngredientGroupsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Slug,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidIngredientGroupsWithIDs = `-- name: GetValidIngredientGroupsWithIDs :many

SELECT
	valid_ingredient_groups.id,
	valid_ingredient_groups.name,
	valid_ingredient_groups.description,
	valid_ingredient_groups.slug,
	valid_ingredient_groups.created_at,
	valid_ingredient_groups.last_updated_at,
	valid_ingredient_groups.archived_at
FROM valid_ingredient_groups
WHERE valid_ingredient_groups.archived_at IS NULL
	AND valid_ingredient_groups.id = ANY($1::text[])
`

type GetValidIngredientGroupsWithIDsRow struct {
	ID            string
	Name          string
	Description   string
	Slug          string
	CreatedAt     time.Time
	LastUpdatedAt sql.NullTime
	ArchivedAt    sql.NullTime
}

func (q *Queries) GetValidIngredientGroupsWithIDs(ctx context.Context, db DBTX, ids []string) ([]*GetValidIngredientGroupsWithIDsRow, error) {
	rows, err := db.QueryContext(ctx, getValidIngredientGroupsWithIDs, pq.Array(ids))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidIngredientGroupsWithIDsRow{}
	for rows.Next() {
		var i GetValidIngredientGroupsWithIDsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Slug,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchForValidIngredientGroups = `-- name: SearchForValidIngredientGroups :many

SELECT
	valid_ingredient_groups.id,
	valid_ingredient_groups.name,
	valid_ingredient_groups.description,
	valid_ingredient_groups.slug,
	valid_ingredient_groups.created_at,
	valid_ingredient_groups.last_updated_at,
	valid_ingredient_groups.archived_at,
	(
		SELECT COUNT(valid_ingredient_groups.id)
		FROM valid_ingredient_groups
		WHERE valid_ingredient_groups.archived_at IS NULL
			AND valid_ingredient_groups.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
			AND valid_ingredient_groups.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
			AND (
				valid_ingredient_groups.last_updated_at IS NULL
				OR valid_ingredient_groups.last_updated_at > COALESCE($3, (SELECT NOW() - '999 years'::INTERVAL))
			)
			AND (
				valid_ingredient_groups.last_updated_at IS NULL
				OR valid_ingredient_groups.last_updated_at < COALESCE($4, (SELECT NOW() + '999 years'::INTERVAL))
			)
	) AS filtered_count,
	(
		SELECT COUNT(valid_ingredient_groups.id)
		FROM valid_ingredient_groups
		WHERE valid_ingredient_groups.archived_at IS NULL
	) AS total_count
FROM valid_ingredient_groups
WHERE
	valid_ingredient_groups.archived_at IS NULL
	AND valid_ingredient_groups.name ILIKE '%' || $5::text || '%'
	AND valid_ingredient_groups.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
	AND valid_ingredient_groups.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
	AND (
		valid_ingredient_groups.last_updated_at IS NULL
		OR valid_ingredient_groups.last_updated_at > COALESCE($4, (SELECT NOW() - '999 years'::INTERVAL))
	)
	AND (
		valid_ingredient_groups.last_updated_at IS NULL
		OR valid_ingredient_groups.last_updated_at < COALESCE($3, (SELECT NOW() + '999 years'::INTERVAL))
	)
GROUP BY valid_ingredient_groups.id
ORDER BY valid_ingredient_groups.id
LIMIT $7
OFFSET $6
`

type SearchForValidIngredientGroupsParams struct {
	CreatedAfter  sql.NullTime
	CreatedBefore sql.NullTime
	UpdatedBefore sql.NullTime
	UpdatedAfter  sql.NullTime
	Name          string
	QueryOffset   sql.NullInt32
	QueryLimit    sql.NullInt32
}

type SearchForValidIngredientGroupsRow struct {
	ID            string
	Name          string
	Description   string
	Slug          string
	CreatedAt     time.Time
	LastUpdatedAt sql.NullTime
	ArchivedAt    sql.NullTime
	FilteredCount int64
	TotalCount    int64
}

func (q *Queries) SearchForValidIngredientGroups(ctx context.Context, db DBTX, arg *SearchForValidIngredientGroupsParams) ([]*SearchForValidIngredientGroupsRow, error) {
	rows, err := db.QueryContext(ctx, searchForValidIngredientGroups,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedBefore,
		arg.UpdatedAfter,
		arg.Name,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*SearchForValidIngredientGroupsRow{}
	for rows.Next() {
		var i SearchForValidIngredientGroupsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Slug,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateValidIngredientGroup = `-- name: UpdateValidIngredientGroup :execrows

UPDATE valid_ingredient_groups SET
	name = $1,
	description = $2,
	slug = $3,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND id = $4
`

type UpdateValidIngredientGroupParams struct {
	Name        string
	Description string
	Slug        string
	ID          string
}

func (q *Queries) UpdateValidIngredientGroup(ctx context.Context, db DBTX, arg *UpdateValidIngredientGroupParams) (int64, error) {
	result, err := db.ExecContext(ctx, updateValidIngredientGroup,
		arg.Name,
		arg.Description,
		arg.Slug,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
