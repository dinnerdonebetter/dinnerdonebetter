// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: household_invitations.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const attachHouseholdInvitationsToUserID = `-- name: AttachHouseholdInvitationsToUserID :exec

UPDATE household_invitations SET
	to_user = $1,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND to_email = LOWER($2)
`

type AttachHouseholdInvitationsToUserIDParams struct {
	ToEmail string
	ToUser  sql.NullString
}

func (q *Queries) AttachHouseholdInvitationsToUserID(ctx context.Context, db DBTX, arg *AttachHouseholdInvitationsToUserIDParams) error {
	_, err := db.ExecContext(ctx, attachHouseholdInvitationsToUserID, arg.ToUser, arg.ToEmail)
	return err
}

const checkHouseholdInvitationExistence = `-- name: CheckHouseholdInvitationExistence :one

SELECT EXISTS (
	SELECT household_invitations.id
	FROM household_invitations
	WHERE household_invitations.archived_at IS NULL
	AND household_invitations.id = $1
)
`

func (q *Queries) CheckHouseholdInvitationExistence(ctx context.Context, db DBTX, id string) (bool, error) {
	row := db.QueryRowContext(ctx, checkHouseholdInvitationExistence, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createHouseholdInvitation = `-- name: CreateHouseholdInvitation :exec

INSERT INTO household_invitations (
	id,
	from_user,
	to_user,
	to_name,
	note,
	to_email,
	token,
	destination_household,
	expires_at
) VALUES (
	$1,
	$2,
	$3,
	$4,
	$5,
	$6,
	$7,
	$8,
	$9
)
`

type CreateHouseholdInvitationParams struct {
	ExpiresAt            time.Time
	ID                   string
	FromUser             string
	ToName               string
	Note                 string
	ToEmail              string
	Token                string
	DestinationHousehold string
	ToUser               sql.NullString
}

func (q *Queries) CreateHouseholdInvitation(ctx context.Context, db DBTX, arg *CreateHouseholdInvitationParams) error {
	_, err := db.ExecContext(ctx, createHouseholdInvitation,
		arg.ID,
		arg.FromUser,
		arg.ToUser,
		arg.ToName,
		arg.Note,
		arg.ToEmail,
		arg.Token,
		arg.DestinationHousehold,
		arg.ExpiresAt,
	)
	return err
}

const getHouseholdInvitationByEmailAndToken = `-- name: GetHouseholdInvitationByEmailAndToken :one

SELECT
	household_invitations.id,
	households.id as household_id,
	households.name as household_name,
	households.billing_status as household_billing_status,
	households.contact_phone as household_contact_phone,
	households.payment_processor_customer_id as household_payment_processor_customer_id,
	households.subscription_plan_id as household_subscription_plan_id,
	households.belongs_to_user as household_belongs_to_user,
	households.time_zone as household_time_zone,
	households.address_line_1 as household_address_line_1,
	households.address_line_2 as household_address_line_2,
	households.city as household_city,
	households.state as household_state,
	households.zip_code as household_zip_code,
	households.country as household_country,
	households.latitude as household_latitude,
	households.longitude as household_longitude,
	households.last_payment_provider_sync_occurred_at as household_last_payment_provider_sync_occurred_at,
	households.webhook_hmac_secret as household_webhook_hmac_secret,
	households.created_at as household_created_at,
	households.last_updated_at as household_last_updated_at,
	households.archived_at as household_archived_at,
	household_invitations.from_user,
	household_invitations.to_user,
	users.id as user_id,
	users.username as user_username,
	users.avatar_src as user_avatar_src,
	users.email_address as user_email_address,
	users.hashed_password as user_hashed_password,
	users.password_last_changed_at as user_password_last_changed_at,
	users.requires_password_change as user_requires_password_change,
	users.two_factor_secret as user_two_factor_secret,
	users.two_factor_secret_verified_at as user_two_factor_secret_verified_at,
	users.service_role as user_service_role,
	users.user_account_status as user_user_account_status,
	users.user_account_status_explanation as user_user_account_status_explanation,
	users.birthday as user_birthday,
	users.email_address_verification_token as user_email_address_verification_token,
	users.email_address_verified_at as user_email_address_verified_at,
	users.first_name as user_first_name,
	users.last_name as user_last_name,
	users.last_accepted_terms_of_service as user_last_accepted_terms_of_service,
	users.last_accepted_privacy_policy as user_last_accepted_privacy_policy,
	users.last_indexed_at as user_last_indexed_at,
	users.created_at as user_created_at,
	users.last_updated_at as user_last_updated_at,
	users.archived_at as user_archived_at,
	household_invitations.to_name,
	household_invitations.note,
	household_invitations.to_email,
	household_invitations.token,
	household_invitations.destination_household,
	household_invitations.expires_at,
	household_invitations.status,
	household_invitations.status_note,
	household_invitations.created_at,
	household_invitations.last_updated_at,
	household_invitations.archived_at
FROM household_invitations
	JOIN households ON household_invitations.destination_household = households.id
	JOIN users ON household_invitations.from_user = users.id
WHERE household_invitations.archived_at IS NULL
	AND household_invitations.expires_at > NOW()
	AND household_invitations.to_email = LOWER($1)
	AND household_invitations.token = $2
`

type GetHouseholdInvitationByEmailAndTokenParams struct {
	ToEmail string
	Token   string
}

type GetHouseholdInvitationByEmailAndTokenRow struct {
	ExpiresAt                                  time.Time
	HouseholdCreatedAt                         time.Time
	UserCreatedAt                              time.Time
	CreatedAt                                  time.Time
	UserLastIndexedAt                          sql.NullTime
	UserEmailAddressVerifiedAt                 sql.NullTime
	UserLastUpdatedAt                          sql.NullTime
	LastUpdatedAt                              sql.NullTime
	ArchivedAt                                 sql.NullTime
	UserLastAcceptedPrivacyPolicy              sql.NullTime
	UserLastAcceptedTermsOfService             sql.NullTime
	UserArchivedAt                             sql.NullTime
	UserBirthday                               sql.NullTime
	UserTwoFactorSecretVerifiedAt              sql.NullTime
	UserPasswordLastChangedAt                  sql.NullTime
	HouseholdArchivedAt                        sql.NullTime
	HouseholdLastUpdatedAt                     sql.NullTime
	HouseholdLastPaymentProviderSyncOccurredAt sql.NullTime
	HouseholdCountry                           string
	HouseholdPaymentProcessorCustomerID        string
	HouseholdID                                string
	HouseholdName                              string
	FromUser                                   string
	HouseholdBillingStatus                     string
	UserID                                     string
	UserUsername                               string
	StatusNote                                 string
	UserEmailAddress                           string
	UserHashedPassword                         string
	ID                                         string
	Status                                     InvitationState
	UserTwoFactorSecret                        string
	HouseholdZipCode                           string
	UserServiceRole                            string
	UserUserAccountStatus                      string
	UserUserAccountStatusExplanation           string
	HouseholdState                             string
	HouseholdContactPhone                      string
	HouseholdCity                              string
	UserFirstName                              string
	UserLastName                               string
	HouseholdAddressLine2                      string
	HouseholdAddressLine1                      string
	HouseholdTimeZone                          TimeZone
	HouseholdBelongsToUser                     string
	DestinationHousehold                       string
	HouseholdWebhookHmacSecret                 string
	ToName                                     string
	Note                                       string
	ToEmail                                    string
	Token                                      string
	HouseholdSubscriptionPlanID                sql.NullString
	UserEmailAddressVerificationToken          sql.NullString
	UserAvatarSrc                              sql.NullString
	ToUser                                     sql.NullString
	HouseholdLatitude                          sql.NullString
	HouseholdLongitude                         sql.NullString
	UserRequiresPasswordChange                 bool
}

func (q *Queries) GetHouseholdInvitationByEmailAndToken(ctx context.Context, db DBTX, arg *GetHouseholdInvitationByEmailAndTokenParams) (*GetHouseholdInvitationByEmailAndTokenRow, error) {
	row := db.QueryRowContext(ctx, getHouseholdInvitationByEmailAndToken, arg.ToEmail, arg.Token)
	var i GetHouseholdInvitationByEmailAndTokenRow
	err := row.Scan(
		&i.ID,
		&i.HouseholdID,
		&i.HouseholdName,
		&i.HouseholdBillingStatus,
		&i.HouseholdContactPhone,
		&i.HouseholdPaymentProcessorCustomerID,
		&i.HouseholdSubscriptionPlanID,
		&i.HouseholdBelongsToUser,
		&i.HouseholdTimeZone,
		&i.HouseholdAddressLine1,
		&i.HouseholdAddressLine2,
		&i.HouseholdCity,
		&i.HouseholdState,
		&i.HouseholdZipCode,
		&i.HouseholdCountry,
		&i.HouseholdLatitude,
		&i.HouseholdLongitude,
		&i.HouseholdLastPaymentProviderSyncOccurredAt,
		&i.HouseholdWebhookHmacSecret,
		&i.HouseholdCreatedAt,
		&i.HouseholdLastUpdatedAt,
		&i.HouseholdArchivedAt,
		&i.FromUser,
		&i.ToUser,
		&i.UserID,
		&i.UserUsername,
		&i.UserAvatarSrc,
		&i.UserEmailAddress,
		&i.UserHashedPassword,
		&i.UserPasswordLastChangedAt,
		&i.UserRequiresPasswordChange,
		&i.UserTwoFactorSecret,
		&i.UserTwoFactorSecretVerifiedAt,
		&i.UserServiceRole,
		&i.UserUserAccountStatus,
		&i.UserUserAccountStatusExplanation,
		&i.UserBirthday,
		&i.UserEmailAddressVerificationToken,
		&i.UserEmailAddressVerifiedAt,
		&i.UserFirstName,
		&i.UserLastName,
		&i.UserLastAcceptedTermsOfService,
		&i.UserLastAcceptedPrivacyPolicy,
		&i.UserLastIndexedAt,
		&i.UserCreatedAt,
		&i.UserLastUpdatedAt,
		&i.UserArchivedAt,
		&i.ToName,
		&i.Note,
		&i.ToEmail,
		&i.Token,
		&i.DestinationHousehold,
		&i.ExpiresAt,
		&i.Status,
		&i.StatusNote,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.ArchivedAt,
	)
	return &i, err
}

const getHouseholdInvitationByHouseholdAndID = `-- name: GetHouseholdInvitationByHouseholdAndID :one

SELECT
	household_invitations.id,
	households.id as household_id,
	households.name as household_name,
	households.billing_status as household_billing_status,
	households.contact_phone as household_contact_phone,
	households.payment_processor_customer_id as household_payment_processor_customer_id,
	households.subscription_plan_id as household_subscription_plan_id,
	households.belongs_to_user as household_belongs_to_user,
	households.time_zone as household_time_zone,
	households.address_line_1 as household_address_line_1,
	households.address_line_2 as household_address_line_2,
	households.city as household_city,
	households.state as household_state,
	households.zip_code as household_zip_code,
	households.country as household_country,
	households.latitude as household_latitude,
	households.longitude as household_longitude,
	households.last_payment_provider_sync_occurred_at as household_last_payment_provider_sync_occurred_at,
	households.webhook_hmac_secret as household_webhook_hmac_secret,
	households.created_at as household_created_at,
	households.last_updated_at as household_last_updated_at,
	households.archived_at as household_archived_at,
	household_invitations.from_user,
	household_invitations.to_user,
	users.id as user_id,
	users.username as user_username,
	users.avatar_src as user_avatar_src,
	users.email_address as user_email_address,
	users.hashed_password as user_hashed_password,
	users.password_last_changed_at as user_password_last_changed_at,
	users.requires_password_change as user_requires_password_change,
	users.two_factor_secret as user_two_factor_secret,
	users.two_factor_secret_verified_at as user_two_factor_secret_verified_at,
	users.service_role as user_service_role,
	users.user_account_status as user_user_account_status,
	users.user_account_status_explanation as user_user_account_status_explanation,
	users.birthday as user_birthday,
	users.email_address_verification_token as user_email_address_verification_token,
	users.email_address_verified_at as user_email_address_verified_at,
	users.first_name as user_first_name,
	users.last_name as user_last_name,
	users.last_accepted_terms_of_service as user_last_accepted_terms_of_service,
	users.last_accepted_privacy_policy as user_last_accepted_privacy_policy,
	users.last_indexed_at as user_last_indexed_at,
	users.created_at as user_created_at,
	users.last_updated_at as user_last_updated_at,
	users.archived_at as user_archived_at,
	household_invitations.to_name,
	household_invitations.note,
	household_invitations.to_email,
	household_invitations.token,
	household_invitations.destination_household,
	household_invitations.expires_at,
	household_invitations.status,
	household_invitations.status_note,
	household_invitations.created_at,
	household_invitations.last_updated_at,
	household_invitations.archived_at
FROM household_invitations
	JOIN households ON household_invitations.destination_household = households.id
	JOIN users ON household_invitations.from_user = users.id
WHERE household_invitations.archived_at IS NULL
	AND household_invitations.expires_at > NOW()
	AND household_invitations.destination_household = $1
	AND household_invitations.id = $2
`

type GetHouseholdInvitationByHouseholdAndIDParams struct {
	DestinationHousehold string
	ID                   string
}

type GetHouseholdInvitationByHouseholdAndIDRow struct {
	ExpiresAt                                  time.Time
	HouseholdCreatedAt                         time.Time
	UserCreatedAt                              time.Time
	CreatedAt                                  time.Time
	UserLastIndexedAt                          sql.NullTime
	UserEmailAddressVerifiedAt                 sql.NullTime
	UserLastUpdatedAt                          sql.NullTime
	LastUpdatedAt                              sql.NullTime
	ArchivedAt                                 sql.NullTime
	UserLastAcceptedPrivacyPolicy              sql.NullTime
	UserLastAcceptedTermsOfService             sql.NullTime
	UserArchivedAt                             sql.NullTime
	UserBirthday                               sql.NullTime
	UserTwoFactorSecretVerifiedAt              sql.NullTime
	UserPasswordLastChangedAt                  sql.NullTime
	HouseholdArchivedAt                        sql.NullTime
	HouseholdLastUpdatedAt                     sql.NullTime
	HouseholdLastPaymentProviderSyncOccurredAt sql.NullTime
	HouseholdCountry                           string
	HouseholdPaymentProcessorCustomerID        string
	HouseholdID                                string
	HouseholdName                              string
	FromUser                                   string
	HouseholdBillingStatus                     string
	UserID                                     string
	UserUsername                               string
	StatusNote                                 string
	UserEmailAddress                           string
	UserHashedPassword                         string
	ID                                         string
	Status                                     InvitationState
	UserTwoFactorSecret                        string
	HouseholdZipCode                           string
	UserServiceRole                            string
	UserUserAccountStatus                      string
	UserUserAccountStatusExplanation           string
	HouseholdState                             string
	HouseholdContactPhone                      string
	HouseholdCity                              string
	UserFirstName                              string
	UserLastName                               string
	HouseholdAddressLine2                      string
	HouseholdAddressLine1                      string
	HouseholdTimeZone                          TimeZone
	HouseholdBelongsToUser                     string
	DestinationHousehold                       string
	HouseholdWebhookHmacSecret                 string
	ToName                                     string
	Note                                       string
	ToEmail                                    string
	Token                                      string
	HouseholdSubscriptionPlanID                sql.NullString
	UserEmailAddressVerificationToken          sql.NullString
	UserAvatarSrc                              sql.NullString
	ToUser                                     sql.NullString
	HouseholdLatitude                          sql.NullString
	HouseholdLongitude                         sql.NullString
	UserRequiresPasswordChange                 bool
}

func (q *Queries) GetHouseholdInvitationByHouseholdAndID(ctx context.Context, db DBTX, arg *GetHouseholdInvitationByHouseholdAndIDParams) (*GetHouseholdInvitationByHouseholdAndIDRow, error) {
	row := db.QueryRowContext(ctx, getHouseholdInvitationByHouseholdAndID, arg.DestinationHousehold, arg.ID)
	var i GetHouseholdInvitationByHouseholdAndIDRow
	err := row.Scan(
		&i.ID,
		&i.HouseholdID,
		&i.HouseholdName,
		&i.HouseholdBillingStatus,
		&i.HouseholdContactPhone,
		&i.HouseholdPaymentProcessorCustomerID,
		&i.HouseholdSubscriptionPlanID,
		&i.HouseholdBelongsToUser,
		&i.HouseholdTimeZone,
		&i.HouseholdAddressLine1,
		&i.HouseholdAddressLine2,
		&i.HouseholdCity,
		&i.HouseholdState,
		&i.HouseholdZipCode,
		&i.HouseholdCountry,
		&i.HouseholdLatitude,
		&i.HouseholdLongitude,
		&i.HouseholdLastPaymentProviderSyncOccurredAt,
		&i.HouseholdWebhookHmacSecret,
		&i.HouseholdCreatedAt,
		&i.HouseholdLastUpdatedAt,
		&i.HouseholdArchivedAt,
		&i.FromUser,
		&i.ToUser,
		&i.UserID,
		&i.UserUsername,
		&i.UserAvatarSrc,
		&i.UserEmailAddress,
		&i.UserHashedPassword,
		&i.UserPasswordLastChangedAt,
		&i.UserRequiresPasswordChange,
		&i.UserTwoFactorSecret,
		&i.UserTwoFactorSecretVerifiedAt,
		&i.UserServiceRole,
		&i.UserUserAccountStatus,
		&i.UserUserAccountStatusExplanation,
		&i.UserBirthday,
		&i.UserEmailAddressVerificationToken,
		&i.UserEmailAddressVerifiedAt,
		&i.UserFirstName,
		&i.UserLastName,
		&i.UserLastAcceptedTermsOfService,
		&i.UserLastAcceptedPrivacyPolicy,
		&i.UserLastIndexedAt,
		&i.UserCreatedAt,
		&i.UserLastUpdatedAt,
		&i.UserArchivedAt,
		&i.ToName,
		&i.Note,
		&i.ToEmail,
		&i.Token,
		&i.DestinationHousehold,
		&i.ExpiresAt,
		&i.Status,
		&i.StatusNote,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.ArchivedAt,
	)
	return &i, err
}

const getHouseholdInvitationByTokenAndID = `-- name: GetHouseholdInvitationByTokenAndID :one

SELECT
	household_invitations.id,
	households.id as household_id,
	households.name as household_name,
	households.billing_status as household_billing_status,
	households.contact_phone as household_contact_phone,
	households.payment_processor_customer_id as household_payment_processor_customer_id,
	households.subscription_plan_id as household_subscription_plan_id,
	households.belongs_to_user as household_belongs_to_user,
	households.time_zone as household_time_zone,
	households.address_line_1 as household_address_line_1,
	households.address_line_2 as household_address_line_2,
	households.city as household_city,
	households.state as household_state,
	households.zip_code as household_zip_code,
	households.country as household_country,
	households.latitude as household_latitude,
	households.longitude as household_longitude,
	households.last_payment_provider_sync_occurred_at as household_last_payment_provider_sync_occurred_at,
	households.webhook_hmac_secret as household_webhook_hmac_secret,
	households.created_at as household_created_at,
	households.last_updated_at as household_last_updated_at,
	households.archived_at as household_archived_at,
	household_invitations.from_user,
	household_invitations.to_user,
	users.id as user_id,
	users.username as user_username,
	users.avatar_src as user_avatar_src,
	users.email_address as user_email_address,
	users.hashed_password as user_hashed_password,
	users.password_last_changed_at as user_password_last_changed_at,
	users.requires_password_change as user_requires_password_change,
	users.two_factor_secret as user_two_factor_secret,
	users.two_factor_secret_verified_at as user_two_factor_secret_verified_at,
	users.service_role as user_service_role,
	users.user_account_status as user_user_account_status,
	users.user_account_status_explanation as user_user_account_status_explanation,
	users.birthday as user_birthday,
	users.email_address_verification_token as user_email_address_verification_token,
	users.email_address_verified_at as user_email_address_verified_at,
	users.first_name as user_first_name,
	users.last_name as user_last_name,
	users.last_accepted_terms_of_service as user_last_accepted_terms_of_service,
	users.last_accepted_privacy_policy as user_last_accepted_privacy_policy,
	users.last_indexed_at as user_last_indexed_at,
	users.created_at as user_created_at,
	users.last_updated_at as user_last_updated_at,
	users.archived_at as user_archived_at,
	household_invitations.to_name,
	household_invitations.note,
	household_invitations.to_email,
	household_invitations.token,
	household_invitations.destination_household,
	household_invitations.expires_at,
	household_invitations.status,
	household_invitations.status_note,
	household_invitations.created_at,
	household_invitations.last_updated_at,
	household_invitations.archived_at
FROM household_invitations
	JOIN households ON household_invitations.destination_household = households.id
	JOIN users ON household_invitations.from_user = users.id
WHERE household_invitations.archived_at IS NULL
	AND household_invitations.expires_at > NOW()
	AND household_invitations.token = $1
	AND household_invitations.id = $2
`

type GetHouseholdInvitationByTokenAndIDParams struct {
	Token string
	ID    string
}

type GetHouseholdInvitationByTokenAndIDRow struct {
	ExpiresAt                                  time.Time
	HouseholdCreatedAt                         time.Time
	UserCreatedAt                              time.Time
	CreatedAt                                  time.Time
	UserLastIndexedAt                          sql.NullTime
	UserEmailAddressVerifiedAt                 sql.NullTime
	UserLastUpdatedAt                          sql.NullTime
	LastUpdatedAt                              sql.NullTime
	ArchivedAt                                 sql.NullTime
	UserLastAcceptedPrivacyPolicy              sql.NullTime
	UserLastAcceptedTermsOfService             sql.NullTime
	UserArchivedAt                             sql.NullTime
	UserBirthday                               sql.NullTime
	UserTwoFactorSecretVerifiedAt              sql.NullTime
	UserPasswordLastChangedAt                  sql.NullTime
	HouseholdArchivedAt                        sql.NullTime
	HouseholdLastUpdatedAt                     sql.NullTime
	HouseholdLastPaymentProviderSyncOccurredAt sql.NullTime
	HouseholdCountry                           string
	HouseholdPaymentProcessorCustomerID        string
	HouseholdID                                string
	HouseholdName                              string
	FromUser                                   string
	HouseholdBillingStatus                     string
	UserID                                     string
	UserUsername                               string
	StatusNote                                 string
	UserEmailAddress                           string
	UserHashedPassword                         string
	ID                                         string
	Status                                     InvitationState
	UserTwoFactorSecret                        string
	HouseholdZipCode                           string
	UserServiceRole                            string
	UserUserAccountStatus                      string
	UserUserAccountStatusExplanation           string
	HouseholdState                             string
	HouseholdContactPhone                      string
	HouseholdCity                              string
	UserFirstName                              string
	UserLastName                               string
	HouseholdAddressLine2                      string
	HouseholdAddressLine1                      string
	HouseholdTimeZone                          TimeZone
	HouseholdBelongsToUser                     string
	DestinationHousehold                       string
	HouseholdWebhookHmacSecret                 string
	ToName                                     string
	Note                                       string
	ToEmail                                    string
	Token                                      string
	HouseholdSubscriptionPlanID                sql.NullString
	UserEmailAddressVerificationToken          sql.NullString
	UserAvatarSrc                              sql.NullString
	ToUser                                     sql.NullString
	HouseholdLatitude                          sql.NullString
	HouseholdLongitude                         sql.NullString
	UserRequiresPasswordChange                 bool
}

func (q *Queries) GetHouseholdInvitationByTokenAndID(ctx context.Context, db DBTX, arg *GetHouseholdInvitationByTokenAndIDParams) (*GetHouseholdInvitationByTokenAndIDRow, error) {
	row := db.QueryRowContext(ctx, getHouseholdInvitationByTokenAndID, arg.Token, arg.ID)
	var i GetHouseholdInvitationByTokenAndIDRow
	err := row.Scan(
		&i.ID,
		&i.HouseholdID,
		&i.HouseholdName,
		&i.HouseholdBillingStatus,
		&i.HouseholdContactPhone,
		&i.HouseholdPaymentProcessorCustomerID,
		&i.HouseholdSubscriptionPlanID,
		&i.HouseholdBelongsToUser,
		&i.HouseholdTimeZone,
		&i.HouseholdAddressLine1,
		&i.HouseholdAddressLine2,
		&i.HouseholdCity,
		&i.HouseholdState,
		&i.HouseholdZipCode,
		&i.HouseholdCountry,
		&i.HouseholdLatitude,
		&i.HouseholdLongitude,
		&i.HouseholdLastPaymentProviderSyncOccurredAt,
		&i.HouseholdWebhookHmacSecret,
		&i.HouseholdCreatedAt,
		&i.HouseholdLastUpdatedAt,
		&i.HouseholdArchivedAt,
		&i.FromUser,
		&i.ToUser,
		&i.UserID,
		&i.UserUsername,
		&i.UserAvatarSrc,
		&i.UserEmailAddress,
		&i.UserHashedPassword,
		&i.UserPasswordLastChangedAt,
		&i.UserRequiresPasswordChange,
		&i.UserTwoFactorSecret,
		&i.UserTwoFactorSecretVerifiedAt,
		&i.UserServiceRole,
		&i.UserUserAccountStatus,
		&i.UserUserAccountStatusExplanation,
		&i.UserBirthday,
		&i.UserEmailAddressVerificationToken,
		&i.UserEmailAddressVerifiedAt,
		&i.UserFirstName,
		&i.UserLastName,
		&i.UserLastAcceptedTermsOfService,
		&i.UserLastAcceptedPrivacyPolicy,
		&i.UserLastIndexedAt,
		&i.UserCreatedAt,
		&i.UserLastUpdatedAt,
		&i.UserArchivedAt,
		&i.ToName,
		&i.Note,
		&i.ToEmail,
		&i.Token,
		&i.DestinationHousehold,
		&i.ExpiresAt,
		&i.Status,
		&i.StatusNote,
		&i.CreatedAt,
		&i.LastUpdatedAt,
		&i.ArchivedAt,
	)
	return &i, err
}

const getPendingInvitesForUser = `-- name: GetPendingInvitesForUser :many

SELECT
	household_invitations.id,
	households.id as household_id,
	households.name as household_name,
	households.billing_status as household_billing_status,
	households.contact_phone as household_contact_phone,
	households.payment_processor_customer_id as household_payment_processor_customer_id,
	households.subscription_plan_id as household_subscription_plan_id,
	households.belongs_to_user as household_belongs_to_user,
	households.time_zone as household_time_zone,
	households.address_line_1 as household_address_line_1,
	households.address_line_2 as household_address_line_2,
	households.city as household_city,
	households.state as household_state,
	households.zip_code as household_zip_code,
	households.country as household_country,
	households.latitude as household_latitude,
	households.longitude as household_longitude,
	households.last_payment_provider_sync_occurred_at as household_last_payment_provider_sync_occurred_at,
	households.webhook_hmac_secret as household_webhook_hmac_secret,
	households.created_at as household_created_at,
	households.last_updated_at as household_last_updated_at,
	households.archived_at as household_archived_at,
	household_invitations.from_user,
	household_invitations.to_user,
	users.id as user_id,
	users.username as user_username,
	users.avatar_src as user_avatar_src,
	users.email_address as user_email_address,
	users.hashed_password as user_hashed_password,
	users.password_last_changed_at as user_password_last_changed_at,
	users.requires_password_change as user_requires_password_change,
	users.two_factor_secret as user_two_factor_secret,
	users.two_factor_secret_verified_at as user_two_factor_secret_verified_at,
	users.service_role as user_service_role,
	users.user_account_status as user_user_account_status,
	users.user_account_status_explanation as user_user_account_status_explanation,
	users.birthday as user_birthday,
	users.email_address_verification_token as user_email_address_verification_token,
	users.email_address_verified_at as user_email_address_verified_at,
	users.first_name as user_first_name,
	users.last_name as user_last_name,
	users.last_accepted_terms_of_service as user_last_accepted_terms_of_service,
	users.last_accepted_privacy_policy as user_last_accepted_privacy_policy,
	users.last_indexed_at as user_last_indexed_at,
	users.created_at as user_created_at,
	users.last_updated_at as user_last_updated_at,
	users.archived_at as user_archived_at,
	household_invitations.to_name,
	household_invitations.note,
	household_invitations.to_email,
	household_invitations.token,
	household_invitations.destination_household,
	household_invitations.expires_at,
	household_invitations.status,
	household_invitations.status_note,
	household_invitations.created_at,
	household_invitations.last_updated_at,
	household_invitations.archived_at,
	(
		SELECT COUNT(household_invitations.id)
		FROM household_invitations
		WHERE household_invitations.archived_at IS NULL
			AND household_invitations.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
			AND household_invitations.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
			AND (
				household_invitations.last_updated_at IS NULL
				OR household_invitations.last_updated_at > COALESCE($3, (SELECT NOW() - '999 years'::INTERVAL))
			)
			AND (
				household_invitations.last_updated_at IS NULL
				OR household_invitations.last_updated_at < COALESCE($4, (SELECT NOW() + '999 years'::INTERVAL))
			)
	) AS filtered_count,
	(
		SELECT COUNT(household_invitations.id)
		FROM household_invitations
		WHERE household_invitations.archived_at IS NULL
	) AS total_count
FROM household_invitations
	JOIN households ON household_invitations.destination_household = households.id
	JOIN users ON household_invitations.from_user = users.id
WHERE household_invitations.archived_at IS NULL
	AND household_invitations.to_user = $5
	AND household_invitations.status = $6
	AND household_invitations.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
	AND household_invitations.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
	AND (
		household_invitations.last_updated_at IS NULL
		OR household_invitations.last_updated_at > COALESCE($4, (SELECT NOW() - '999 years'::INTERVAL))
	)
	AND (
		household_invitations.last_updated_at IS NULL
		OR household_invitations.last_updated_at < COALESCE($3, (SELECT NOW() + '999 years'::INTERVAL))
	)
LIMIT $8
OFFSET $7
`

type GetPendingInvitesForUserParams struct {
	CreatedAfter  sql.NullTime
	CreatedBefore sql.NullTime
	UpdatedBefore sql.NullTime
	UpdatedAfter  sql.NullTime
	Status        InvitationState
	ToUser        sql.NullString
	QueryOffset   sql.NullInt32
	QueryLimit    sql.NullInt32
}

type GetPendingInvitesForUserRow struct {
	ExpiresAt                                  time.Time
	HouseholdCreatedAt                         time.Time
	UserCreatedAt                              time.Time
	CreatedAt                                  time.Time
	UserLastIndexedAt                          sql.NullTime
	UserEmailAddressVerifiedAt                 sql.NullTime
	UserLastUpdatedAt                          sql.NullTime
	LastUpdatedAt                              sql.NullTime
	ArchivedAt                                 sql.NullTime
	UserLastAcceptedPrivacyPolicy              sql.NullTime
	UserLastAcceptedTermsOfService             sql.NullTime
	UserArchivedAt                             sql.NullTime
	UserBirthday                               sql.NullTime
	UserTwoFactorSecretVerifiedAt              sql.NullTime
	UserPasswordLastChangedAt                  sql.NullTime
	HouseholdArchivedAt                        sql.NullTime
	HouseholdLastUpdatedAt                     sql.NullTime
	HouseholdLastPaymentProviderSyncOccurredAt sql.NullTime
	UserTwoFactorSecret                        string
	UserFirstName                              string
	HouseholdID                                string
	HouseholdName                              string
	FromUser                                   string
	HouseholdBillingStatus                     string
	UserID                                     string
	UserUsername                               string
	StatusNote                                 string
	UserEmailAddress                           string
	UserHashedPassword                         string
	HouseholdCountry                           string
	Status                                     InvitationState
	ID                                         string
	HouseholdZipCode                           string
	UserServiceRole                            string
	UserUserAccountStatus                      string
	UserUserAccountStatusExplanation           string
	HouseholdState                             string
	HouseholdContactPhone                      string
	HouseholdCity                              string
	HouseholdWebhookHmacSecret                 string
	UserLastName                               string
	HouseholdAddressLine2                      string
	HouseholdAddressLine1                      string
	HouseholdTimeZone                          TimeZone
	HouseholdBelongsToUser                     string
	DestinationHousehold                       string
	HouseholdPaymentProcessorCustomerID        string
	ToName                                     string
	Note                                       string
	ToEmail                                    string
	Token                                      string
	HouseholdSubscriptionPlanID                sql.NullString
	UserEmailAddressVerificationToken          sql.NullString
	UserAvatarSrc                              sql.NullString
	ToUser                                     sql.NullString
	HouseholdLatitude                          sql.NullString
	HouseholdLongitude                         sql.NullString
	FilteredCount                              int64
	TotalCount                                 int64
	UserRequiresPasswordChange                 bool
}

func (q *Queries) GetPendingInvitesForUser(ctx context.Context, db DBTX, arg *GetPendingInvitesForUserParams) ([]*GetPendingInvitesForUserRow, error) {
	rows, err := db.QueryContext(ctx, getPendingInvitesForUser,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedBefore,
		arg.UpdatedAfter,
		arg.ToUser,
		arg.Status,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetPendingInvitesForUserRow{}
	for rows.Next() {
		var i GetPendingInvitesForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.HouseholdID,
			&i.HouseholdName,
			&i.HouseholdBillingStatus,
			&i.HouseholdContactPhone,
			&i.HouseholdPaymentProcessorCustomerID,
			&i.HouseholdSubscriptionPlanID,
			&i.HouseholdBelongsToUser,
			&i.HouseholdTimeZone,
			&i.HouseholdAddressLine1,
			&i.HouseholdAddressLine2,
			&i.HouseholdCity,
			&i.HouseholdState,
			&i.HouseholdZipCode,
			&i.HouseholdCountry,
			&i.HouseholdLatitude,
			&i.HouseholdLongitude,
			&i.HouseholdLastPaymentProviderSyncOccurredAt,
			&i.HouseholdWebhookHmacSecret,
			&i.HouseholdCreatedAt,
			&i.HouseholdLastUpdatedAt,
			&i.HouseholdArchivedAt,
			&i.FromUser,
			&i.ToUser,
			&i.UserID,
			&i.UserUsername,
			&i.UserAvatarSrc,
			&i.UserEmailAddress,
			&i.UserHashedPassword,
			&i.UserPasswordLastChangedAt,
			&i.UserRequiresPasswordChange,
			&i.UserTwoFactorSecret,
			&i.UserTwoFactorSecretVerifiedAt,
			&i.UserServiceRole,
			&i.UserUserAccountStatus,
			&i.UserUserAccountStatusExplanation,
			&i.UserBirthday,
			&i.UserEmailAddressVerificationToken,
			&i.UserEmailAddressVerifiedAt,
			&i.UserFirstName,
			&i.UserLastName,
			&i.UserLastAcceptedTermsOfService,
			&i.UserLastAcceptedPrivacyPolicy,
			&i.UserLastIndexedAt,
			&i.UserCreatedAt,
			&i.UserLastUpdatedAt,
			&i.UserArchivedAt,
			&i.ToName,
			&i.Note,
			&i.ToEmail,
			&i.Token,
			&i.DestinationHousehold,
			&i.ExpiresAt,
			&i.Status,
			&i.StatusNote,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPendingInvitesFromUser = `-- name: GetPendingInvitesFromUser :many

SELECT
	household_invitations.id,
	households.id as household_id,
	households.name as household_name,
	households.billing_status as household_billing_status,
	households.contact_phone as household_contact_phone,
	households.payment_processor_customer_id as household_payment_processor_customer_id,
	households.subscription_plan_id as household_subscription_plan_id,
	households.belongs_to_user as household_belongs_to_user,
	households.time_zone as household_time_zone,
	households.address_line_1 as household_address_line_1,
	households.address_line_2 as household_address_line_2,
	households.city as household_city,
	households.state as household_state,
	households.zip_code as household_zip_code,
	households.country as household_country,
	households.latitude as household_latitude,
	households.longitude as household_longitude,
	households.last_payment_provider_sync_occurred_at as household_last_payment_provider_sync_occurred_at,
	households.webhook_hmac_secret as household_webhook_hmac_secret,
	households.created_at as household_created_at,
	households.last_updated_at as household_last_updated_at,
	households.archived_at as household_archived_at,
	household_invitations.from_user,
	household_invitations.to_user,
	users.id as user_id,
	users.username as user_username,
	users.avatar_src as user_avatar_src,
	users.email_address as user_email_address,
	users.hashed_password as user_hashed_password,
	users.password_last_changed_at as user_password_last_changed_at,
	users.requires_password_change as user_requires_password_change,
	users.two_factor_secret as user_two_factor_secret,
	users.two_factor_secret_verified_at as user_two_factor_secret_verified_at,
	users.service_role as user_service_role,
	users.user_account_status as user_user_account_status,
	users.user_account_status_explanation as user_user_account_status_explanation,
	users.birthday as user_birthday,
	users.email_address_verification_token as user_email_address_verification_token,
	users.email_address_verified_at as user_email_address_verified_at,
	users.first_name as user_first_name,
	users.last_name as user_last_name,
	users.last_accepted_terms_of_service as user_last_accepted_terms_of_service,
	users.last_accepted_privacy_policy as user_last_accepted_privacy_policy,
	users.last_indexed_at as user_last_indexed_at,
	users.created_at as user_created_at,
	users.last_updated_at as user_last_updated_at,
	users.archived_at as user_archived_at,
	household_invitations.to_name,
	household_invitations.note,
	household_invitations.to_email,
	household_invitations.token,
	household_invitations.destination_household,
	household_invitations.expires_at,
	household_invitations.status,
	household_invitations.status_note,
	household_invitations.created_at,
	household_invitations.last_updated_at,
	household_invitations.archived_at,
	(
		SELECT COUNT(household_invitations.id)
		FROM household_invitations
		WHERE household_invitations.archived_at IS NULL
			AND household_invitations.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
			AND household_invitations.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
			AND (
				household_invitations.last_updated_at IS NULL
				OR household_invitations.last_updated_at > COALESCE($3, (SELECT NOW() - '999 years'::INTERVAL))
			)
			AND (
				household_invitations.last_updated_at IS NULL
				OR household_invitations.last_updated_at < COALESCE($4, (SELECT NOW() + '999 years'::INTERVAL))
			)
	) AS filtered_count,
	(
		SELECT COUNT(household_invitations.id)
		FROM household_invitations
		WHERE household_invitations.archived_at IS NULL
	) AS total_count
FROM household_invitations
	JOIN households ON household_invitations.destination_household = households.id
	JOIN users ON household_invitations.from_user = users.id
WHERE household_invitations.archived_at IS NULL
	AND household_invitations.from_user = $5
	AND household_invitations.status = $6
	AND household_invitations.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
	AND household_invitations.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
	AND (
		household_invitations.last_updated_at IS NULL
		OR household_invitations.last_updated_at > COALESCE($4, (SELECT NOW() - '999 years'::INTERVAL))
	)
	AND (
		household_invitations.last_updated_at IS NULL
		OR household_invitations.last_updated_at < COALESCE($3, (SELECT NOW() + '999 years'::INTERVAL))
	)
LIMIT $8
OFFSET $7
`

type GetPendingInvitesFromUserParams struct {
	CreatedAfter  sql.NullTime
	CreatedBefore sql.NullTime
	UpdatedBefore sql.NullTime
	UpdatedAfter  sql.NullTime
	FromUser      string
	Status        InvitationState
	QueryOffset   sql.NullInt32
	QueryLimit    sql.NullInt32
}

type GetPendingInvitesFromUserRow struct {
	ExpiresAt                                  time.Time
	HouseholdCreatedAt                         time.Time
	UserCreatedAt                              time.Time
	CreatedAt                                  time.Time
	UserLastIndexedAt                          sql.NullTime
	UserEmailAddressVerifiedAt                 sql.NullTime
	UserLastUpdatedAt                          sql.NullTime
	LastUpdatedAt                              sql.NullTime
	ArchivedAt                                 sql.NullTime
	UserLastAcceptedPrivacyPolicy              sql.NullTime
	UserLastAcceptedTermsOfService             sql.NullTime
	UserArchivedAt                             sql.NullTime
	UserBirthday                               sql.NullTime
	UserTwoFactorSecretVerifiedAt              sql.NullTime
	UserPasswordLastChangedAt                  sql.NullTime
	HouseholdArchivedAt                        sql.NullTime
	HouseholdLastUpdatedAt                     sql.NullTime
	HouseholdLastPaymentProviderSyncOccurredAt sql.NullTime
	UserTwoFactorSecret                        string
	UserFirstName                              string
	HouseholdID                                string
	HouseholdName                              string
	FromUser                                   string
	HouseholdBillingStatus                     string
	UserID                                     string
	UserUsername                               string
	StatusNote                                 string
	UserEmailAddress                           string
	UserHashedPassword                         string
	HouseholdCountry                           string
	Status                                     InvitationState
	ID                                         string
	HouseholdZipCode                           string
	UserServiceRole                            string
	UserUserAccountStatus                      string
	UserUserAccountStatusExplanation           string
	HouseholdState                             string
	HouseholdContactPhone                      string
	HouseholdCity                              string
	HouseholdWebhookHmacSecret                 string
	UserLastName                               string
	HouseholdAddressLine2                      string
	HouseholdAddressLine1                      string
	HouseholdTimeZone                          TimeZone
	HouseholdBelongsToUser                     string
	DestinationHousehold                       string
	HouseholdPaymentProcessorCustomerID        string
	ToName                                     string
	Note                                       string
	ToEmail                                    string
	Token                                      string
	HouseholdSubscriptionPlanID                sql.NullString
	UserEmailAddressVerificationToken          sql.NullString
	UserAvatarSrc                              sql.NullString
	ToUser                                     sql.NullString
	HouseholdLatitude                          sql.NullString
	HouseholdLongitude                         sql.NullString
	FilteredCount                              int64
	TotalCount                                 int64
	UserRequiresPasswordChange                 bool
}

func (q *Queries) GetPendingInvitesFromUser(ctx context.Context, db DBTX, arg *GetPendingInvitesFromUserParams) ([]*GetPendingInvitesFromUserRow, error) {
	rows, err := db.QueryContext(ctx, getPendingInvitesFromUser,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedBefore,
		arg.UpdatedAfter,
		arg.FromUser,
		arg.Status,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetPendingInvitesFromUserRow{}
	for rows.Next() {
		var i GetPendingInvitesFromUserRow
		if err := rows.Scan(
			&i.ID,
			&i.HouseholdID,
			&i.HouseholdName,
			&i.HouseholdBillingStatus,
			&i.HouseholdContactPhone,
			&i.HouseholdPaymentProcessorCustomerID,
			&i.HouseholdSubscriptionPlanID,
			&i.HouseholdBelongsToUser,
			&i.HouseholdTimeZone,
			&i.HouseholdAddressLine1,
			&i.HouseholdAddressLine2,
			&i.HouseholdCity,
			&i.HouseholdState,
			&i.HouseholdZipCode,
			&i.HouseholdCountry,
			&i.HouseholdLatitude,
			&i.HouseholdLongitude,
			&i.HouseholdLastPaymentProviderSyncOccurredAt,
			&i.HouseholdWebhookHmacSecret,
			&i.HouseholdCreatedAt,
			&i.HouseholdLastUpdatedAt,
			&i.HouseholdArchivedAt,
			&i.FromUser,
			&i.ToUser,
			&i.UserID,
			&i.UserUsername,
			&i.UserAvatarSrc,
			&i.UserEmailAddress,
			&i.UserHashedPassword,
			&i.UserPasswordLastChangedAt,
			&i.UserRequiresPasswordChange,
			&i.UserTwoFactorSecret,
			&i.UserTwoFactorSecretVerifiedAt,
			&i.UserServiceRole,
			&i.UserUserAccountStatus,
			&i.UserUserAccountStatusExplanation,
			&i.UserBirthday,
			&i.UserEmailAddressVerificationToken,
			&i.UserEmailAddressVerifiedAt,
			&i.UserFirstName,
			&i.UserLastName,
			&i.UserLastAcceptedTermsOfService,
			&i.UserLastAcceptedPrivacyPolicy,
			&i.UserLastIndexedAt,
			&i.UserCreatedAt,
			&i.UserLastUpdatedAt,
			&i.UserArchivedAt,
			&i.ToName,
			&i.Note,
			&i.ToEmail,
			&i.Token,
			&i.DestinationHousehold,
			&i.ExpiresAt,
			&i.Status,
			&i.StatusNote,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.ArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setHouseholdInvitationStatus = `-- name: SetHouseholdInvitationStatus :exec

UPDATE household_invitations SET
	status = $1,
	status_note = $2,
	last_updated_at = NOW(),
	archived_at = NOW()
WHERE archived_at IS NULL
	AND id = $3
`

type SetHouseholdInvitationStatusParams struct {
	Status     InvitationState
	StatusNote string
	ID         string
}

func (q *Queries) SetHouseholdInvitationStatus(ctx context.Context, db DBTX, arg *SetHouseholdInvitationStatusParams) error {
	_, err := db.ExecContext(ctx, setHouseholdInvitationStatus, arg.Status, arg.StatusNote, arg.ID)
	return err
}
