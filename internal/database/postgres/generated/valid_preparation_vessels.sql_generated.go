// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: valid_preparation_vessels.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const archiveValidPreparationVessel = `-- name: ArchiveValidPreparationVessel :execrows

UPDATE valid_preparation_vessels SET archived_at = NOW() WHERE archived_at IS NULL AND id = $1
`

func (q *Queries) ArchiveValidPreparationVessel(ctx context.Context, db DBTX, id string) (int64, error) {
	result, err := db.ExecContext(ctx, archiveValidPreparationVessel, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const checkValidPreparationVesselExistence = `-- name: CheckValidPreparationVesselExistence :one

SELECT EXISTS (
	SELECT valid_preparation_vessels.id
	FROM valid_preparation_vessels
	WHERE valid_preparation_vessels.archived_at IS NULL
		AND valid_preparation_vessels.id = $1
)
`

func (q *Queries) CheckValidPreparationVesselExistence(ctx context.Context, db DBTX, id string) (bool, error) {
	row := db.QueryRowContext(ctx, checkValidPreparationVesselExistence, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createValidPreparationVessel = `-- name: CreateValidPreparationVessel :exec

INSERT INTO valid_preparation_vessels (
	id,
	notes,
	valid_preparation_id,
	valid_vessel_id
) VALUES (
	$1,
	$2,
	$3,
	$4
)
`

type CreateValidPreparationVesselParams struct {
	ID                 string
	Notes              string
	ValidPreparationID string
	ValidVesselID      string
}

func (q *Queries) CreateValidPreparationVessel(ctx context.Context, db DBTX, arg *CreateValidPreparationVesselParams) error {
	_, err := db.ExecContext(ctx, createValidPreparationVessel,
		arg.ID,
		arg.Notes,
		arg.ValidPreparationID,
		arg.ValidVesselID,
	)
	return err
}

const getValidPreparationVessel = `-- name: GetValidPreparationVessel :one

SELECT
	valid_preparation_vessels.id as valid_preparation_vessel_id,
	valid_preparation_vessels.notes as valid_preparation_vessel_notes,
	valid_preparations.id as valid_preparation_id,
	valid_preparations.name as valid_preparation_name,
	valid_preparations.description as valid_preparation_description,
	valid_preparations.icon_path as valid_preparation_icon_path,
	valid_preparations.yields_nothing as valid_preparation_yields_nothing,
	valid_preparations.restrict_to_ingredients as valid_preparation_restrict_to_ingredients,
	valid_preparations.past_tense as valid_preparation_past_tense,
	valid_preparations.slug as valid_preparation_slug,
	valid_preparations.minimum_ingredient_count as valid_preparation_minimum_ingredient_count,
	valid_preparations.maximum_ingredient_count as valid_preparation_maximum_ingredient_count,
	valid_preparations.minimum_instrument_count as valid_preparation_minimum_instrument_count,
	valid_preparations.maximum_instrument_count as valid_preparation_maximum_instrument_count,
	valid_preparations.temperature_required as valid_preparation_temperature_required,
	valid_preparations.time_estimate_required as valid_preparation_time_estimate_required,
	valid_preparations.condition_expression_required as valid_preparation_condition_expression_required,
	valid_preparations.consumes_vessel as valid_preparation_consumes_vessel,
	valid_preparations.only_for_vessels as valid_preparation_only_for_vessels,
	valid_preparations.minimum_vessel_count as valid_preparation_minimum_vessel_count,
	valid_preparations.maximum_vessel_count as valid_preparation_maximum_vessel_count,
	valid_preparations.last_indexed_at as valid_preparation_last_indexed_at,
	valid_preparations.created_at as valid_preparation_created_at,
	valid_preparations.last_updated_at as valid_preparation_last_updated_at,
	valid_preparations.archived_at as valid_preparation_archived_at,
	valid_preparation_vessels.created_at as valid_preparation_vessel_created_at,
	valid_preparation_vessels.last_updated_at as valid_preparation_vessel_last_updated_at,
	valid_preparation_vessels.archived_at as valid_preparation_vessel_archived_at,
	valid_vessels.id as valid_vessel_id,
	valid_vessels.name as valid_vessel_name,
	valid_vessels.plural_name as valid_vessel_plural_name,
	valid_vessels.description as valid_vessel_description,
	valid_vessels.icon_path as valid_vessel_icon_path,
	valid_vessels.usable_for_storage as valid_vessel_usable_for_storage,
	valid_vessels.slug as valid_vessel_slug,
	valid_vessels.display_in_summary_lists as valid_vessel_display_in_summary_lists,
	valid_vessels.include_in_generated_instructions as valid_vessel_include_in_generated_instructions,
	valid_vessels.capacity as valid_vessel_capacity,
	valid_measurement_units.id as valid_measurement_unit_id,
	valid_measurement_units.name as valid_measurement_unit_name,
	valid_measurement_units.description as valid_measurement_unit_description,
	valid_measurement_units.volumetric as valid_measurement_unit_volumetric,
	valid_measurement_units.icon_path as valid_measurement_unit_icon_path,
	valid_measurement_units.universal as valid_measurement_unit_universal,
	valid_measurement_units.metric as valid_measurement_unit_metric,
	valid_measurement_units.imperial as valid_measurement_unit_imperial,
	valid_measurement_units.slug as valid_measurement_unit_slug,
	valid_measurement_units.plural_name as valid_measurement_unit_plural_name,
	valid_measurement_units.last_indexed_at as valid_measurement_unit_last_indexed_at,
	valid_measurement_units.created_at as valid_measurement_unit_created_at,
	valid_measurement_units.last_updated_at as valid_measurement_unit_last_updated_at,
	valid_measurement_units.archived_at as valid_measurement_unit_archived_at,
	valid_vessels.width_in_millimeters as valid_vessel_width_in_millimeters,
	valid_vessels.length_in_millimeters as valid_vessel_length_in_millimeters,
	valid_vessels.height_in_millimeters as valid_vessel_height_in_millimeters,
	valid_vessels.shape as valid_vessel_shape,
	valid_vessels.last_indexed_at as valid_vessel_last_indexed_at,
	valid_vessels.created_at as valid_vessel_created_at,
	valid_vessels.last_updated_at as valid_vessel_last_updated_at,
	valid_vessels.archived_at as valid_vessel_archived_at
FROM valid_preparation_vessels
	JOIN valid_vessels ON valid_preparation_vessels.valid_vessel_id = valid_vessels.id
	JOIN valid_preparations ON valid_preparation_vessels.valid_preparation_id = valid_preparations.id
	LEFT JOIN valid_measurement_units ON valid_vessels.capacity_unit = valid_measurement_units.id
WHERE
	valid_preparation_vessels.archived_at IS NULL
	AND valid_vessels.archived_at IS NULL
	AND valid_preparations.archived_at IS NULL
	AND valid_measurement_units.archived_at IS NULL
	AND valid_preparation_vessels.id = $1
`

type GetValidPreparationVesselRow struct {
	ValidVesselCreatedAt                        time.Time
	ValidPreparationVesselCreatedAt             time.Time
	ValidPreparationCreatedAt                   time.Time
	ValidVesselLastUpdatedAt                    sql.NullTime
	ValidVesselLastIndexedAt                    sql.NullTime
	ValidPreparationVesselArchivedAt            sql.NullTime
	ValidVesselArchivedAt                       sql.NullTime
	ValidPreparationVesselLastUpdatedAt         sql.NullTime
	ValidPreparationArchivedAt                  sql.NullTime
	ValidPreparationLastUpdatedAt               sql.NullTime
	ValidPreparationLastIndexedAt               sql.NullTime
	ValidMeasurementUnitLastIndexedAt           sql.NullTime
	ValidMeasurementUnitCreatedAt               sql.NullTime
	ValidMeasurementUnitArchivedAt              sql.NullTime
	ValidMeasurementUnitLastUpdatedAt           sql.NullTime
	ValidVesselShape                            VesselShape
	ValidPreparationID                          string
	ValidPreparationName                        string
	ValidVesselCapacity                         string
	ValidVesselSlug                             string
	ValidVesselIconPath                         string
	ValidPreparationVesselID                    string
	ValidPreparationDescription                 string
	ValidPreparationSlug                        string
	ValidPreparationPastTense                   string
	ValidPreparationVesselNotes                 string
	ValidVesselDescription                      string
	ValidPreparationIconPath                    string
	ValidVesselID                               string
	ValidVesselName                             string
	ValidVesselPluralName                       string
	ValidVesselWidthInMillimeters               sql.NullString
	ValidMeasurementUnitID                      sql.NullString
	ValidMeasurementUnitSlug                    sql.NullString
	ValidMeasurementUnitPluralName              sql.NullString
	ValidVesselLengthInMillimeters              sql.NullString
	ValidVesselHeightInMillimeters              sql.NullString
	ValidMeasurementUnitIconPath                sql.NullString
	ValidMeasurementUnitDescription             sql.NullString
	ValidMeasurementUnitName                    sql.NullString
	ValidPreparationMaximumVesselCount          sql.NullInt32
	ValidPreparationMaximumInstrumentCount      sql.NullInt32
	ValidPreparationMaximumIngredientCount      sql.NullInt32
	ValidPreparationMinimumInstrumentCount      int32
	ValidPreparationMinimumIngredientCount      int32
	ValidPreparationMinimumVesselCount          int32
	ValidMeasurementUnitMetric                  sql.NullBool
	ValidMeasurementUnitImperial                sql.NullBool
	ValidMeasurementUnitUniversal               sql.NullBool
	ValidMeasurementUnitVolumetric              sql.NullBool
	ValidVesselIncludeInGeneratedInstructions   bool
	ValidVesselDisplayInSummaryLists            bool
	ValidVesselUsableForStorage                 bool
	ValidPreparationOnlyForVessels              bool
	ValidPreparationConsumesVessel              bool
	ValidPreparationConditionExpressionRequired bool
	ValidPreparationTimeEstimateRequired        bool
	ValidPreparationTemperatureRequired         bool
	ValidPreparationRestrictToIngredients       bool
	ValidPreparationYieldsNothing               bool
}

func (q *Queries) GetValidPreparationVessel(ctx context.Context, db DBTX, id string) (*GetValidPreparationVesselRow, error) {
	row := db.QueryRowContext(ctx, getValidPreparationVessel, id)
	var i GetValidPreparationVesselRow
	err := row.Scan(
		&i.ValidPreparationVesselID,
		&i.ValidPreparationVesselNotes,
		&i.ValidPreparationID,
		&i.ValidPreparationName,
		&i.ValidPreparationDescription,
		&i.ValidPreparationIconPath,
		&i.ValidPreparationYieldsNothing,
		&i.ValidPreparationRestrictToIngredients,
		&i.ValidPreparationPastTense,
		&i.ValidPreparationSlug,
		&i.ValidPreparationMinimumIngredientCount,
		&i.ValidPreparationMaximumIngredientCount,
		&i.ValidPreparationMinimumInstrumentCount,
		&i.ValidPreparationMaximumInstrumentCount,
		&i.ValidPreparationTemperatureRequired,
		&i.ValidPreparationTimeEstimateRequired,
		&i.ValidPreparationConditionExpressionRequired,
		&i.ValidPreparationConsumesVessel,
		&i.ValidPreparationOnlyForVessels,
		&i.ValidPreparationMinimumVesselCount,
		&i.ValidPreparationMaximumVesselCount,
		&i.ValidPreparationLastIndexedAt,
		&i.ValidPreparationCreatedAt,
		&i.ValidPreparationLastUpdatedAt,
		&i.ValidPreparationArchivedAt,
		&i.ValidPreparationVesselCreatedAt,
		&i.ValidPreparationVesselLastUpdatedAt,
		&i.ValidPreparationVesselArchivedAt,
		&i.ValidVesselID,
		&i.ValidVesselName,
		&i.ValidVesselPluralName,
		&i.ValidVesselDescription,
		&i.ValidVesselIconPath,
		&i.ValidVesselUsableForStorage,
		&i.ValidVesselSlug,
		&i.ValidVesselDisplayInSummaryLists,
		&i.ValidVesselIncludeInGeneratedInstructions,
		&i.ValidVesselCapacity,
		&i.ValidMeasurementUnitID,
		&i.ValidMeasurementUnitName,
		&i.ValidMeasurementUnitDescription,
		&i.ValidMeasurementUnitVolumetric,
		&i.ValidMeasurementUnitIconPath,
		&i.ValidMeasurementUnitUniversal,
		&i.ValidMeasurementUnitMetric,
		&i.ValidMeasurementUnitImperial,
		&i.ValidMeasurementUnitSlug,
		&i.ValidMeasurementUnitPluralName,
		&i.ValidMeasurementUnitLastIndexedAt,
		&i.ValidMeasurementUnitCreatedAt,
		&i.ValidMeasurementUnitLastUpdatedAt,
		&i.ValidMeasurementUnitArchivedAt,
		&i.ValidVesselWidthInMillimeters,
		&i.ValidVesselLengthInMillimeters,
		&i.ValidVesselHeightInMillimeters,
		&i.ValidVesselShape,
		&i.ValidVesselLastIndexedAt,
		&i.ValidVesselCreatedAt,
		&i.ValidVesselLastUpdatedAt,
		&i.ValidVesselArchivedAt,
	)
	return &i, err
}

const getValidPreparationVessels = `-- name: GetValidPreparationVessels :many

SELECT
	valid_preparation_vessels.id as valid_preparation_vessel_id,
	valid_preparation_vessels.notes as valid_preparation_vessel_notes,
	valid_preparations.id as valid_preparation_id,
	valid_preparations.name as valid_preparation_name,
	valid_preparations.description as valid_preparation_description,
	valid_preparations.icon_path as valid_preparation_icon_path,
	valid_preparations.yields_nothing as valid_preparation_yields_nothing,
	valid_preparations.restrict_to_ingredients as valid_preparation_restrict_to_ingredients,
	valid_preparations.past_tense as valid_preparation_past_tense,
	valid_preparations.slug as valid_preparation_slug,
	valid_preparations.minimum_ingredient_count as valid_preparation_minimum_ingredient_count,
	valid_preparations.maximum_ingredient_count as valid_preparation_maximum_ingredient_count,
	valid_preparations.minimum_instrument_count as valid_preparation_minimum_instrument_count,
	valid_preparations.maximum_instrument_count as valid_preparation_maximum_instrument_count,
	valid_preparations.temperature_required as valid_preparation_temperature_required,
	valid_preparations.time_estimate_required as valid_preparation_time_estimate_required,
	valid_preparations.condition_expression_required as valid_preparation_condition_expression_required,
	valid_preparations.consumes_vessel as valid_preparation_consumes_vessel,
	valid_preparations.only_for_vessels as valid_preparation_only_for_vessels,
	valid_preparations.minimum_vessel_count as valid_preparation_minimum_vessel_count,
	valid_preparations.maximum_vessel_count as valid_preparation_maximum_vessel_count,
	valid_preparations.last_indexed_at as valid_preparation_last_indexed_at,
	valid_preparations.created_at as valid_preparation_created_at,
	valid_preparations.last_updated_at as valid_preparation_last_updated_at,
	valid_preparations.archived_at as valid_preparation_archived_at,
	valid_preparation_vessels.created_at as valid_preparation_vessel_created_at,
	valid_preparation_vessels.last_updated_at as valid_preparation_vessel_last_updated_at,
	valid_preparation_vessels.archived_at as valid_preparation_vessel_archived_at,
	valid_vessels.id as valid_vessel_id,
	valid_vessels.name as valid_vessel_name,
	valid_vessels.plural_name as valid_vessel_plural_name,
	valid_vessels.description as valid_vessel_description,
	valid_vessels.icon_path as valid_vessel_icon_path,
	valid_vessels.usable_for_storage as valid_vessel_usable_for_storage,
	valid_vessels.slug as valid_vessel_slug,
	valid_vessels.display_in_summary_lists as valid_vessel_display_in_summary_lists,
	valid_vessels.include_in_generated_instructions as valid_vessel_include_in_generated_instructions,
	valid_vessels.capacity as valid_vessel_capacity,
	valid_measurement_units.id as valid_measurement_unit_id,
	valid_measurement_units.name as valid_measurement_unit_name,
	valid_measurement_units.description as valid_measurement_unit_description,
	valid_measurement_units.volumetric as valid_measurement_unit_volumetric,
	valid_measurement_units.icon_path as valid_measurement_unit_icon_path,
	valid_measurement_units.universal as valid_measurement_unit_universal,
	valid_measurement_units.metric as valid_measurement_unit_metric,
	valid_measurement_units.imperial as valid_measurement_unit_imperial,
	valid_measurement_units.slug as valid_measurement_unit_slug,
	valid_measurement_units.plural_name as valid_measurement_unit_plural_name,
	valid_measurement_units.last_indexed_at as valid_measurement_unit_last_indexed_at,
	valid_measurement_units.created_at as valid_measurement_unit_created_at,
	valid_measurement_units.last_updated_at as valid_measurement_unit_last_updated_at,
	valid_measurement_units.archived_at as valid_measurement_unit_archived_at,
	valid_vessels.width_in_millimeters as valid_vessel_width_in_millimeters,
	valid_vessels.length_in_millimeters as valid_vessel_length_in_millimeters,
	valid_vessels.height_in_millimeters as valid_vessel_height_in_millimeters,
	valid_vessels.shape as valid_vessel_shape,
	valid_vessels.last_indexed_at as valid_vessel_last_indexed_at,
	valid_vessels.created_at as valid_vessel_created_at,
	valid_vessels.last_updated_at as valid_vessel_last_updated_at,
	valid_vessels.archived_at as valid_vessel_archived_at,
	(
		SELECT COUNT(valid_preparation_vessels.id)
		FROM valid_preparation_vessels
		WHERE valid_preparation_vessels.archived_at IS NULL
			AND valid_preparation_vessels.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
			AND valid_preparation_vessels.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
			AND (
				valid_preparation_vessels.last_updated_at IS NULL
				OR valid_preparation_vessels.last_updated_at > COALESCE($3, (SELECT NOW() - '999 years'::INTERVAL))
			)
			AND (
				valid_preparation_vessels.last_updated_at IS NULL
				OR valid_preparation_vessels.last_updated_at < COALESCE($4, (SELECT NOW() + '999 years'::INTERVAL))
			)
	) AS filtered_count,
	(
		SELECT COUNT(valid_preparation_vessels.id)
		FROM valid_preparation_vessels
		WHERE valid_preparation_vessels.archived_at IS NULL
	) AS total_count
FROM valid_preparation_vessels
	JOIN valid_vessels ON valid_preparation_vessels.valid_vessel_id = valid_vessels.id
	JOIN valid_preparations ON valid_preparation_vessels.valid_preparation_id = valid_preparations.id
	LEFT JOIN valid_measurement_units ON valid_vessels.capacity_unit = valid_measurement_units.id
WHERE
	valid_preparation_vessels.archived_at IS NULL
	AND valid_vessels.archived_at IS NULL
	AND valid_preparations.archived_at IS NULL
	AND valid_measurement_units.archived_at IS NULL
	AND valid_preparation_vessels.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
	AND valid_preparation_vessels.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
	AND (
		valid_preparation_vessels.last_updated_at IS NULL
		OR valid_preparation_vessels.last_updated_at > COALESCE($4, (SELECT NOW() - '999 years'::INTERVAL))
	)
	AND (
		valid_preparation_vessels.last_updated_at IS NULL
		OR valid_preparation_vessels.last_updated_at < COALESCE($3, (SELECT NOW() + '999 years'::INTERVAL))
	)
LIMIT $6
OFFSET $5
`

type GetValidPreparationVesselsParams struct {
	CreatedAfter  sql.NullTime
	CreatedBefore sql.NullTime
	UpdatedBefore sql.NullTime
	UpdatedAfter  sql.NullTime
	QueryOffset   sql.NullInt32
	QueryLimit    sql.NullInt32
}

type GetValidPreparationVesselsRow struct {
	ValidVesselCreatedAt                        time.Time
	ValidPreparationVesselCreatedAt             time.Time
	ValidPreparationCreatedAt                   time.Time
	ValidPreparationLastIndexedAt               sql.NullTime
	ValidVesselLastUpdatedAt                    sql.NullTime
	ValidPreparationVesselArchivedAt            sql.NullTime
	ValidMeasurementUnitCreatedAt               sql.NullTime
	ValidPreparationVesselLastUpdatedAt         sql.NullTime
	ValidPreparationArchivedAt                  sql.NullTime
	ValidPreparationLastUpdatedAt               sql.NullTime
	ValidMeasurementUnitLastUpdatedAt           sql.NullTime
	ValidMeasurementUnitArchivedAt              sql.NullTime
	ValidVesselLastIndexedAt                    sql.NullTime
	ValidMeasurementUnitLastIndexedAt           sql.NullTime
	ValidVesselArchivedAt                       sql.NullTime
	ValidPreparationName                        string
	ValidPreparationID                          string
	ValidVesselCapacity                         string
	ValidVesselShape                            VesselShape
	ValidVesselSlug                             string
	ValidVesselIconPath                         string
	ValidVesselDescription                      string
	ValidPreparationDescription                 string
	ValidPreparationSlug                        string
	ValidPreparationPastTense                   string
	ValidPreparationVesselNotes                 string
	ValidPreparationVesselID                    string
	ValidPreparationIconPath                    string
	ValidVesselID                               string
	ValidVesselName                             string
	ValidVesselPluralName                       string
	ValidVesselWidthInMillimeters               sql.NullString
	ValidMeasurementUnitDescription             sql.NullString
	ValidVesselHeightInMillimeters              sql.NullString
	ValidMeasurementUnitPluralName              sql.NullString
	ValidVesselLengthInMillimeters              sql.NullString
	ValidMeasurementUnitSlug                    sql.NullString
	ValidMeasurementUnitIconPath                sql.NullString
	ValidMeasurementUnitID                      sql.NullString
	ValidMeasurementUnitName                    sql.NullString
	FilteredCount                               int64
	TotalCount                                  int64
	ValidPreparationMaximumIngredientCount      sql.NullInt32
	ValidPreparationMaximumVesselCount          sql.NullInt32
	ValidPreparationMaximumInstrumentCount      sql.NullInt32
	ValidPreparationMinimumInstrumentCount      int32
	ValidPreparationMinimumIngredientCount      int32
	ValidPreparationMinimumVesselCount          int32
	ValidMeasurementUnitMetric                  sql.NullBool
	ValidMeasurementUnitImperial                sql.NullBool
	ValidMeasurementUnitUniversal               sql.NullBool
	ValidMeasurementUnitVolumetric              sql.NullBool
	ValidVesselIncludeInGeneratedInstructions   bool
	ValidVesselDisplayInSummaryLists            bool
	ValidVesselUsableForStorage                 bool
	ValidPreparationOnlyForVessels              bool
	ValidPreparationConsumesVessel              bool
	ValidPreparationConditionExpressionRequired bool
	ValidPreparationTimeEstimateRequired        bool
	ValidPreparationTemperatureRequired         bool
	ValidPreparationRestrictToIngredients       bool
	ValidPreparationYieldsNothing               bool
}

func (q *Queries) GetValidPreparationVessels(ctx context.Context, db DBTX, arg *GetValidPreparationVesselsParams) ([]*GetValidPreparationVesselsRow, error) {
	rows, err := db.QueryContext(ctx, getValidPreparationVessels,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedBefore,
		arg.UpdatedAfter,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidPreparationVesselsRow{}
	for rows.Next() {
		var i GetValidPreparationVesselsRow
		if err := rows.Scan(
			&i.ValidPreparationVesselID,
			&i.ValidPreparationVesselNotes,
			&i.ValidPreparationID,
			&i.ValidPreparationName,
			&i.ValidPreparationDescription,
			&i.ValidPreparationIconPath,
			&i.ValidPreparationYieldsNothing,
			&i.ValidPreparationRestrictToIngredients,
			&i.ValidPreparationPastTense,
			&i.ValidPreparationSlug,
			&i.ValidPreparationMinimumIngredientCount,
			&i.ValidPreparationMaximumIngredientCount,
			&i.ValidPreparationMinimumInstrumentCount,
			&i.ValidPreparationMaximumInstrumentCount,
			&i.ValidPreparationTemperatureRequired,
			&i.ValidPreparationTimeEstimateRequired,
			&i.ValidPreparationConditionExpressionRequired,
			&i.ValidPreparationConsumesVessel,
			&i.ValidPreparationOnlyForVessels,
			&i.ValidPreparationMinimumVesselCount,
			&i.ValidPreparationMaximumVesselCount,
			&i.ValidPreparationLastIndexedAt,
			&i.ValidPreparationCreatedAt,
			&i.ValidPreparationLastUpdatedAt,
			&i.ValidPreparationArchivedAt,
			&i.ValidPreparationVesselCreatedAt,
			&i.ValidPreparationVesselLastUpdatedAt,
			&i.ValidPreparationVesselArchivedAt,
			&i.ValidVesselID,
			&i.ValidVesselName,
			&i.ValidVesselPluralName,
			&i.ValidVesselDescription,
			&i.ValidVesselIconPath,
			&i.ValidVesselUsableForStorage,
			&i.ValidVesselSlug,
			&i.ValidVesselDisplayInSummaryLists,
			&i.ValidVesselIncludeInGeneratedInstructions,
			&i.ValidVesselCapacity,
			&i.ValidMeasurementUnitID,
			&i.ValidMeasurementUnitName,
			&i.ValidMeasurementUnitDescription,
			&i.ValidMeasurementUnitVolumetric,
			&i.ValidMeasurementUnitIconPath,
			&i.ValidMeasurementUnitUniversal,
			&i.ValidMeasurementUnitMetric,
			&i.ValidMeasurementUnitImperial,
			&i.ValidMeasurementUnitSlug,
			&i.ValidMeasurementUnitPluralName,
			&i.ValidMeasurementUnitLastIndexedAt,
			&i.ValidMeasurementUnitCreatedAt,
			&i.ValidMeasurementUnitLastUpdatedAt,
			&i.ValidMeasurementUnitArchivedAt,
			&i.ValidVesselWidthInMillimeters,
			&i.ValidVesselLengthInMillimeters,
			&i.ValidVesselHeightInMillimeters,
			&i.ValidVesselShape,
			&i.ValidVesselLastIndexedAt,
			&i.ValidVesselCreatedAt,
			&i.ValidVesselLastUpdatedAt,
			&i.ValidVesselArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidPreparationVesselsForPreparation = `-- name: GetValidPreparationVesselsForPreparation :many

SELECT
	valid_preparation_vessels.id as valid_preparation_vessel_id,
	valid_preparation_vessels.notes as valid_preparation_vessel_notes,
	valid_preparations.id as valid_preparation_id,
	valid_preparations.name as valid_preparation_name,
	valid_preparations.description as valid_preparation_description,
	valid_preparations.icon_path as valid_preparation_icon_path,
	valid_preparations.yields_nothing as valid_preparation_yields_nothing,
	valid_preparations.restrict_to_ingredients as valid_preparation_restrict_to_ingredients,
	valid_preparations.past_tense as valid_preparation_past_tense,
	valid_preparations.slug as valid_preparation_slug,
	valid_preparations.minimum_ingredient_count as valid_preparation_minimum_ingredient_count,
	valid_preparations.maximum_ingredient_count as valid_preparation_maximum_ingredient_count,
	valid_preparations.minimum_instrument_count as valid_preparation_minimum_instrument_count,
	valid_preparations.maximum_instrument_count as valid_preparation_maximum_instrument_count,
	valid_preparations.temperature_required as valid_preparation_temperature_required,
	valid_preparations.time_estimate_required as valid_preparation_time_estimate_required,
	valid_preparations.condition_expression_required as valid_preparation_condition_expression_required,
	valid_preparations.consumes_vessel as valid_preparation_consumes_vessel,
	valid_preparations.only_for_vessels as valid_preparation_only_for_vessels,
	valid_preparations.minimum_vessel_count as valid_preparation_minimum_vessel_count,
	valid_preparations.maximum_vessel_count as valid_preparation_maximum_vessel_count,
	valid_preparations.last_indexed_at as valid_preparation_last_indexed_at,
	valid_preparations.created_at as valid_preparation_created_at,
	valid_preparations.last_updated_at as valid_preparation_last_updated_at,
	valid_preparations.archived_at as valid_preparation_archived_at,
	valid_preparation_vessels.created_at as valid_preparation_vessel_created_at,
	valid_preparation_vessels.last_updated_at as valid_preparation_vessel_last_updated_at,
	valid_preparation_vessels.archived_at as valid_preparation_vessel_archived_at,
	valid_vessels.id as valid_vessel_id,
	valid_vessels.name as valid_vessel_name,
	valid_vessels.plural_name as valid_vessel_plural_name,
	valid_vessels.description as valid_vessel_description,
	valid_vessels.icon_path as valid_vessel_icon_path,
	valid_vessels.usable_for_storage as valid_vessel_usable_for_storage,
	valid_vessels.slug as valid_vessel_slug,
	valid_vessels.display_in_summary_lists as valid_vessel_display_in_summary_lists,
	valid_vessels.include_in_generated_instructions as valid_vessel_include_in_generated_instructions,
	valid_vessels.capacity as valid_vessel_capacity,
	valid_measurement_units.id as valid_measurement_unit_id,
	valid_measurement_units.name as valid_measurement_unit_name,
	valid_measurement_units.description as valid_measurement_unit_description,
	valid_measurement_units.volumetric as valid_measurement_unit_volumetric,
	valid_measurement_units.icon_path as valid_measurement_unit_icon_path,
	valid_measurement_units.universal as valid_measurement_unit_universal,
	valid_measurement_units.metric as valid_measurement_unit_metric,
	valid_measurement_units.imperial as valid_measurement_unit_imperial,
	valid_measurement_units.slug as valid_measurement_unit_slug,
	valid_measurement_units.plural_name as valid_measurement_unit_plural_name,
	valid_measurement_units.last_indexed_at as valid_measurement_unit_last_indexed_at,
	valid_measurement_units.created_at as valid_measurement_unit_created_at,
	valid_measurement_units.last_updated_at as valid_measurement_unit_last_updated_at,
	valid_measurement_units.archived_at as valid_measurement_unit_archived_at,
	valid_vessels.width_in_millimeters as valid_vessel_width_in_millimeters,
	valid_vessels.length_in_millimeters as valid_vessel_length_in_millimeters,
	valid_vessels.height_in_millimeters as valid_vessel_height_in_millimeters,
	valid_vessels.shape as valid_vessel_shape,
	valid_vessels.last_indexed_at as valid_vessel_last_indexed_at,
	valid_vessels.created_at as valid_vessel_created_at,
	valid_vessels.last_updated_at as valid_vessel_last_updated_at,
	valid_vessels.archived_at as valid_vessel_archived_at,
	(
		SELECT COUNT(valid_preparation_vessels.id)
		FROM valid_preparation_vessels
		WHERE valid_preparation_vessels.archived_at IS NULL
			AND valid_preparation_vessels.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
			AND valid_preparation_vessels.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
			AND (
				valid_preparation_vessels.last_updated_at IS NULL
				OR valid_preparation_vessels.last_updated_at > COALESCE($3, (SELECT NOW() - '999 years'::INTERVAL))
			)
			AND (
				valid_preparation_vessels.last_updated_at IS NULL
				OR valid_preparation_vessels.last_updated_at < COALESCE($4, (SELECT NOW() + '999 years'::INTERVAL))
			)
	) AS filtered_count,
	(
		SELECT COUNT(valid_preparation_vessels.id)
		FROM valid_preparation_vessels
		WHERE valid_preparation_vessels.archived_at IS NULL
	) AS total_count
FROM valid_preparation_vessels
	JOIN valid_vessels ON valid_preparation_vessels.valid_vessel_id = valid_vessels.id
	JOIN valid_preparations ON valid_preparation_vessels.valid_preparation_id = valid_preparations.id
	LEFT JOIN valid_measurement_units ON valid_vessels.capacity_unit = valid_measurement_units.id
WHERE
	valid_preparation_vessels.archived_at IS NULL
	AND valid_vessels.archived_at IS NULL
	AND valid_preparations.archived_at IS NULL
	AND valid_measurement_units.archived_at IS NULL
	AND valid_preparation_vessels.valid_preparation_id = $5
	AND valid_preparation_vessels.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
	AND valid_preparation_vessels.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
	AND (
		valid_preparation_vessels.last_updated_at IS NULL
		OR valid_preparation_vessels.last_updated_at > COALESCE($4, (SELECT NOW() - '999 years'::INTERVAL))
	)
	AND (
		valid_preparation_vessels.last_updated_at IS NULL
		OR valid_preparation_vessels.last_updated_at < COALESCE($3, (SELECT NOW() + '999 years'::INTERVAL))
	)
LIMIT $7
OFFSET $6
`

type GetValidPreparationVesselsForPreparationParams struct {
	CreatedAfter  sql.NullTime
	CreatedBefore sql.NullTime
	UpdatedBefore sql.NullTime
	UpdatedAfter  sql.NullTime
	ID            string
	QueryOffset   sql.NullInt32
	QueryLimit    sql.NullInt32
}

type GetValidPreparationVesselsForPreparationRow struct {
	ValidVesselCreatedAt                        time.Time
	ValidPreparationVesselCreatedAt             time.Time
	ValidPreparationCreatedAt                   time.Time
	ValidPreparationLastIndexedAt               sql.NullTime
	ValidVesselLastUpdatedAt                    sql.NullTime
	ValidPreparationVesselArchivedAt            sql.NullTime
	ValidMeasurementUnitCreatedAt               sql.NullTime
	ValidPreparationVesselLastUpdatedAt         sql.NullTime
	ValidPreparationArchivedAt                  sql.NullTime
	ValidPreparationLastUpdatedAt               sql.NullTime
	ValidMeasurementUnitLastUpdatedAt           sql.NullTime
	ValidMeasurementUnitArchivedAt              sql.NullTime
	ValidVesselLastIndexedAt                    sql.NullTime
	ValidMeasurementUnitLastIndexedAt           sql.NullTime
	ValidVesselArchivedAt                       sql.NullTime
	ValidPreparationName                        string
	ValidPreparationID                          string
	ValidVesselCapacity                         string
	ValidVesselShape                            VesselShape
	ValidVesselSlug                             string
	ValidVesselIconPath                         string
	ValidVesselDescription                      string
	ValidPreparationDescription                 string
	ValidPreparationSlug                        string
	ValidPreparationPastTense                   string
	ValidPreparationVesselNotes                 string
	ValidPreparationVesselID                    string
	ValidPreparationIconPath                    string
	ValidVesselID                               string
	ValidVesselName                             string
	ValidVesselPluralName                       string
	ValidVesselWidthInMillimeters               sql.NullString
	ValidMeasurementUnitDescription             sql.NullString
	ValidVesselHeightInMillimeters              sql.NullString
	ValidMeasurementUnitPluralName              sql.NullString
	ValidVesselLengthInMillimeters              sql.NullString
	ValidMeasurementUnitSlug                    sql.NullString
	ValidMeasurementUnitIconPath                sql.NullString
	ValidMeasurementUnitID                      sql.NullString
	ValidMeasurementUnitName                    sql.NullString
	FilteredCount                               int64
	TotalCount                                  int64
	ValidPreparationMaximumIngredientCount      sql.NullInt32
	ValidPreparationMaximumVesselCount          sql.NullInt32
	ValidPreparationMaximumInstrumentCount      sql.NullInt32
	ValidPreparationMinimumInstrumentCount      int32
	ValidPreparationMinimumIngredientCount      int32
	ValidPreparationMinimumVesselCount          int32
	ValidMeasurementUnitMetric                  sql.NullBool
	ValidMeasurementUnitImperial                sql.NullBool
	ValidMeasurementUnitUniversal               sql.NullBool
	ValidMeasurementUnitVolumetric              sql.NullBool
	ValidVesselIncludeInGeneratedInstructions   bool
	ValidVesselDisplayInSummaryLists            bool
	ValidVesselUsableForStorage                 bool
	ValidPreparationOnlyForVessels              bool
	ValidPreparationConsumesVessel              bool
	ValidPreparationConditionExpressionRequired bool
	ValidPreparationTimeEstimateRequired        bool
	ValidPreparationTemperatureRequired         bool
	ValidPreparationRestrictToIngredients       bool
	ValidPreparationYieldsNothing               bool
}

func (q *Queries) GetValidPreparationVesselsForPreparation(ctx context.Context, db DBTX, arg *GetValidPreparationVesselsForPreparationParams) ([]*GetValidPreparationVesselsForPreparationRow, error) {
	rows, err := db.QueryContext(ctx, getValidPreparationVesselsForPreparation,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedBefore,
		arg.UpdatedAfter,
		arg.ID,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidPreparationVesselsForPreparationRow{}
	for rows.Next() {
		var i GetValidPreparationVesselsForPreparationRow
		if err := rows.Scan(
			&i.ValidPreparationVesselID,
			&i.ValidPreparationVesselNotes,
			&i.ValidPreparationID,
			&i.ValidPreparationName,
			&i.ValidPreparationDescription,
			&i.ValidPreparationIconPath,
			&i.ValidPreparationYieldsNothing,
			&i.ValidPreparationRestrictToIngredients,
			&i.ValidPreparationPastTense,
			&i.ValidPreparationSlug,
			&i.ValidPreparationMinimumIngredientCount,
			&i.ValidPreparationMaximumIngredientCount,
			&i.ValidPreparationMinimumInstrumentCount,
			&i.ValidPreparationMaximumInstrumentCount,
			&i.ValidPreparationTemperatureRequired,
			&i.ValidPreparationTimeEstimateRequired,
			&i.ValidPreparationConditionExpressionRequired,
			&i.ValidPreparationConsumesVessel,
			&i.ValidPreparationOnlyForVessels,
			&i.ValidPreparationMinimumVesselCount,
			&i.ValidPreparationMaximumVesselCount,
			&i.ValidPreparationLastIndexedAt,
			&i.ValidPreparationCreatedAt,
			&i.ValidPreparationLastUpdatedAt,
			&i.ValidPreparationArchivedAt,
			&i.ValidPreparationVesselCreatedAt,
			&i.ValidPreparationVesselLastUpdatedAt,
			&i.ValidPreparationVesselArchivedAt,
			&i.ValidVesselID,
			&i.ValidVesselName,
			&i.ValidVesselPluralName,
			&i.ValidVesselDescription,
			&i.ValidVesselIconPath,
			&i.ValidVesselUsableForStorage,
			&i.ValidVesselSlug,
			&i.ValidVesselDisplayInSummaryLists,
			&i.ValidVesselIncludeInGeneratedInstructions,
			&i.ValidVesselCapacity,
			&i.ValidMeasurementUnitID,
			&i.ValidMeasurementUnitName,
			&i.ValidMeasurementUnitDescription,
			&i.ValidMeasurementUnitVolumetric,
			&i.ValidMeasurementUnitIconPath,
			&i.ValidMeasurementUnitUniversal,
			&i.ValidMeasurementUnitMetric,
			&i.ValidMeasurementUnitImperial,
			&i.ValidMeasurementUnitSlug,
			&i.ValidMeasurementUnitPluralName,
			&i.ValidMeasurementUnitLastIndexedAt,
			&i.ValidMeasurementUnitCreatedAt,
			&i.ValidMeasurementUnitLastUpdatedAt,
			&i.ValidMeasurementUnitArchivedAt,
			&i.ValidVesselWidthInMillimeters,
			&i.ValidVesselLengthInMillimeters,
			&i.ValidVesselHeightInMillimeters,
			&i.ValidVesselShape,
			&i.ValidVesselLastIndexedAt,
			&i.ValidVesselCreatedAt,
			&i.ValidVesselLastUpdatedAt,
			&i.ValidVesselArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidPreparationVesselsForVessel = `-- name: GetValidPreparationVesselsForVessel :many

SELECT
	valid_preparation_vessels.id as valid_preparation_vessel_id,
	valid_preparation_vessels.notes as valid_preparation_vessel_notes,
	valid_preparations.id as valid_preparation_id,
	valid_preparations.name as valid_preparation_name,
	valid_preparations.description as valid_preparation_description,
	valid_preparations.icon_path as valid_preparation_icon_path,
	valid_preparations.yields_nothing as valid_preparation_yields_nothing,
	valid_preparations.restrict_to_ingredients as valid_preparation_restrict_to_ingredients,
	valid_preparations.past_tense as valid_preparation_past_tense,
	valid_preparations.slug as valid_preparation_slug,
	valid_preparations.minimum_ingredient_count as valid_preparation_minimum_ingredient_count,
	valid_preparations.maximum_ingredient_count as valid_preparation_maximum_ingredient_count,
	valid_preparations.minimum_instrument_count as valid_preparation_minimum_instrument_count,
	valid_preparations.maximum_instrument_count as valid_preparation_maximum_instrument_count,
	valid_preparations.temperature_required as valid_preparation_temperature_required,
	valid_preparations.time_estimate_required as valid_preparation_time_estimate_required,
	valid_preparations.condition_expression_required as valid_preparation_condition_expression_required,
	valid_preparations.consumes_vessel as valid_preparation_consumes_vessel,
	valid_preparations.only_for_vessels as valid_preparation_only_for_vessels,
	valid_preparations.minimum_vessel_count as valid_preparation_minimum_vessel_count,
	valid_preparations.maximum_vessel_count as valid_preparation_maximum_vessel_count,
	valid_preparations.last_indexed_at as valid_preparation_last_indexed_at,
	valid_preparations.created_at as valid_preparation_created_at,
	valid_preparations.last_updated_at as valid_preparation_last_updated_at,
	valid_preparations.archived_at as valid_preparation_archived_at,
	valid_preparation_vessels.created_at as valid_preparation_vessel_created_at,
	valid_preparation_vessels.last_updated_at as valid_preparation_vessel_last_updated_at,
	valid_preparation_vessels.archived_at as valid_preparation_vessel_archived_at,
	valid_vessels.id as valid_vessel_id,
	valid_vessels.name as valid_vessel_name,
	valid_vessels.plural_name as valid_vessel_plural_name,
	valid_vessels.description as valid_vessel_description,
	valid_vessels.icon_path as valid_vessel_icon_path,
	valid_vessels.usable_for_storage as valid_vessel_usable_for_storage,
	valid_vessels.slug as valid_vessel_slug,
	valid_vessels.display_in_summary_lists as valid_vessel_display_in_summary_lists,
	valid_vessels.include_in_generated_instructions as valid_vessel_include_in_generated_instructions,
	valid_vessels.capacity as valid_vessel_capacity,
	valid_measurement_units.id as valid_measurement_unit_id,
	valid_measurement_units.name as valid_measurement_unit_name,
	valid_measurement_units.description as valid_measurement_unit_description,
	valid_measurement_units.volumetric as valid_measurement_unit_volumetric,
	valid_measurement_units.icon_path as valid_measurement_unit_icon_path,
	valid_measurement_units.universal as valid_measurement_unit_universal,
	valid_measurement_units.metric as valid_measurement_unit_metric,
	valid_measurement_units.imperial as valid_measurement_unit_imperial,
	valid_measurement_units.slug as valid_measurement_unit_slug,
	valid_measurement_units.plural_name as valid_measurement_unit_plural_name,
	valid_measurement_units.last_indexed_at as valid_measurement_unit_last_indexed_at,
	valid_measurement_units.created_at as valid_measurement_unit_created_at,
	valid_measurement_units.last_updated_at as valid_measurement_unit_last_updated_at,
	valid_measurement_units.archived_at as valid_measurement_unit_archived_at,
	valid_vessels.width_in_millimeters as valid_vessel_width_in_millimeters,
	valid_vessels.length_in_millimeters as valid_vessel_length_in_millimeters,
	valid_vessels.height_in_millimeters as valid_vessel_height_in_millimeters,
	valid_vessels.shape as valid_vessel_shape,
	valid_vessels.last_indexed_at as valid_vessel_last_indexed_at,
	valid_vessels.created_at as valid_vessel_created_at,
	valid_vessels.last_updated_at as valid_vessel_last_updated_at,
	valid_vessels.archived_at as valid_vessel_archived_at,
	(
		SELECT COUNT(valid_preparation_vessels.id)
		FROM valid_preparation_vessels
		WHERE valid_preparation_vessels.archived_at IS NULL
			AND valid_preparation_vessels.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
			AND valid_preparation_vessels.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
			AND (
				valid_preparation_vessels.last_updated_at IS NULL
				OR valid_preparation_vessels.last_updated_at > COALESCE($3, (SELECT NOW() - '999 years'::INTERVAL))
			)
			AND (
				valid_preparation_vessels.last_updated_at IS NULL
				OR valid_preparation_vessels.last_updated_at < COALESCE($4, (SELECT NOW() + '999 years'::INTERVAL))
			)
	) AS filtered_count,
	(
		SELECT COUNT(valid_preparation_vessels.id)
		FROM valid_preparation_vessels
		WHERE valid_preparation_vessels.archived_at IS NULL
	) AS total_count
FROM valid_preparation_vessels
	JOIN valid_vessels ON valid_preparation_vessels.valid_vessel_id = valid_vessels.id
	JOIN valid_preparations ON valid_preparation_vessels.valid_preparation_id = valid_preparations.id
	LEFT JOIN valid_measurement_units ON valid_vessels.capacity_unit = valid_measurement_units.id
WHERE
	valid_preparation_vessels.archived_at IS NULL
	AND valid_vessels.archived_at IS NULL
	AND valid_preparations.archived_at IS NULL
	AND valid_measurement_units.archived_at IS NULL
	AND valid_preparation_vessels.valid_vessel_id = $5
	AND valid_preparation_vessels.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
	AND valid_preparation_vessels.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
	AND (
		valid_preparation_vessels.last_updated_at IS NULL
		OR valid_preparation_vessels.last_updated_at > COALESCE($4, (SELECT NOW() - '999 years'::INTERVAL))
	)
	AND (
		valid_preparation_vessels.last_updated_at IS NULL
		OR valid_preparation_vessels.last_updated_at < COALESCE($3, (SELECT NOW() + '999 years'::INTERVAL))
	)
LIMIT $7
OFFSET $6
`

type GetValidPreparationVesselsForVesselParams struct {
	CreatedAfter  sql.NullTime
	CreatedBefore sql.NullTime
	UpdatedBefore sql.NullTime
	UpdatedAfter  sql.NullTime
	ID            string
	QueryOffset   sql.NullInt32
	QueryLimit    sql.NullInt32
}

type GetValidPreparationVesselsForVesselRow struct {
	ValidVesselCreatedAt                        time.Time
	ValidPreparationVesselCreatedAt             time.Time
	ValidPreparationCreatedAt                   time.Time
	ValidPreparationLastIndexedAt               sql.NullTime
	ValidVesselLastUpdatedAt                    sql.NullTime
	ValidPreparationVesselArchivedAt            sql.NullTime
	ValidMeasurementUnitCreatedAt               sql.NullTime
	ValidPreparationVesselLastUpdatedAt         sql.NullTime
	ValidPreparationArchivedAt                  sql.NullTime
	ValidPreparationLastUpdatedAt               sql.NullTime
	ValidMeasurementUnitLastUpdatedAt           sql.NullTime
	ValidMeasurementUnitArchivedAt              sql.NullTime
	ValidVesselLastIndexedAt                    sql.NullTime
	ValidMeasurementUnitLastIndexedAt           sql.NullTime
	ValidVesselArchivedAt                       sql.NullTime
	ValidPreparationName                        string
	ValidPreparationID                          string
	ValidVesselCapacity                         string
	ValidVesselShape                            VesselShape
	ValidVesselSlug                             string
	ValidVesselIconPath                         string
	ValidVesselDescription                      string
	ValidPreparationDescription                 string
	ValidPreparationSlug                        string
	ValidPreparationPastTense                   string
	ValidPreparationVesselNotes                 string
	ValidPreparationVesselID                    string
	ValidPreparationIconPath                    string
	ValidVesselID                               string
	ValidVesselName                             string
	ValidVesselPluralName                       string
	ValidVesselWidthInMillimeters               sql.NullString
	ValidMeasurementUnitDescription             sql.NullString
	ValidVesselHeightInMillimeters              sql.NullString
	ValidMeasurementUnitPluralName              sql.NullString
	ValidVesselLengthInMillimeters              sql.NullString
	ValidMeasurementUnitSlug                    sql.NullString
	ValidMeasurementUnitIconPath                sql.NullString
	ValidMeasurementUnitID                      sql.NullString
	ValidMeasurementUnitName                    sql.NullString
	FilteredCount                               int64
	TotalCount                                  int64
	ValidPreparationMaximumIngredientCount      sql.NullInt32
	ValidPreparationMaximumVesselCount          sql.NullInt32
	ValidPreparationMaximumInstrumentCount      sql.NullInt32
	ValidPreparationMinimumInstrumentCount      int32
	ValidPreparationMinimumIngredientCount      int32
	ValidPreparationMinimumVesselCount          int32
	ValidMeasurementUnitMetric                  sql.NullBool
	ValidMeasurementUnitImperial                sql.NullBool
	ValidMeasurementUnitUniversal               sql.NullBool
	ValidMeasurementUnitVolumetric              sql.NullBool
	ValidVesselIncludeInGeneratedInstructions   bool
	ValidVesselDisplayInSummaryLists            bool
	ValidVesselUsableForStorage                 bool
	ValidPreparationOnlyForVessels              bool
	ValidPreparationConsumesVessel              bool
	ValidPreparationConditionExpressionRequired bool
	ValidPreparationTimeEstimateRequired        bool
	ValidPreparationTemperatureRequired         bool
	ValidPreparationRestrictToIngredients       bool
	ValidPreparationYieldsNothing               bool
}

func (q *Queries) GetValidPreparationVesselsForVessel(ctx context.Context, db DBTX, arg *GetValidPreparationVesselsForVesselParams) ([]*GetValidPreparationVesselsForVesselRow, error) {
	rows, err := db.QueryContext(ctx, getValidPreparationVesselsForVessel,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedBefore,
		arg.UpdatedAfter,
		arg.ID,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetValidPreparationVesselsForVesselRow{}
	for rows.Next() {
		var i GetValidPreparationVesselsForVesselRow
		if err := rows.Scan(
			&i.ValidPreparationVesselID,
			&i.ValidPreparationVesselNotes,
			&i.ValidPreparationID,
			&i.ValidPreparationName,
			&i.ValidPreparationDescription,
			&i.ValidPreparationIconPath,
			&i.ValidPreparationYieldsNothing,
			&i.ValidPreparationRestrictToIngredients,
			&i.ValidPreparationPastTense,
			&i.ValidPreparationSlug,
			&i.ValidPreparationMinimumIngredientCount,
			&i.ValidPreparationMaximumIngredientCount,
			&i.ValidPreparationMinimumInstrumentCount,
			&i.ValidPreparationMaximumInstrumentCount,
			&i.ValidPreparationTemperatureRequired,
			&i.ValidPreparationTimeEstimateRequired,
			&i.ValidPreparationConditionExpressionRequired,
			&i.ValidPreparationConsumesVessel,
			&i.ValidPreparationOnlyForVessels,
			&i.ValidPreparationMinimumVesselCount,
			&i.ValidPreparationMaximumVesselCount,
			&i.ValidPreparationLastIndexedAt,
			&i.ValidPreparationCreatedAt,
			&i.ValidPreparationLastUpdatedAt,
			&i.ValidPreparationArchivedAt,
			&i.ValidPreparationVesselCreatedAt,
			&i.ValidPreparationVesselLastUpdatedAt,
			&i.ValidPreparationVesselArchivedAt,
			&i.ValidVesselID,
			&i.ValidVesselName,
			&i.ValidVesselPluralName,
			&i.ValidVesselDescription,
			&i.ValidVesselIconPath,
			&i.ValidVesselUsableForStorage,
			&i.ValidVesselSlug,
			&i.ValidVesselDisplayInSummaryLists,
			&i.ValidVesselIncludeInGeneratedInstructions,
			&i.ValidVesselCapacity,
			&i.ValidMeasurementUnitID,
			&i.ValidMeasurementUnitName,
			&i.ValidMeasurementUnitDescription,
			&i.ValidMeasurementUnitVolumetric,
			&i.ValidMeasurementUnitIconPath,
			&i.ValidMeasurementUnitUniversal,
			&i.ValidMeasurementUnitMetric,
			&i.ValidMeasurementUnitImperial,
			&i.ValidMeasurementUnitSlug,
			&i.ValidMeasurementUnitPluralName,
			&i.ValidMeasurementUnitLastIndexedAt,
			&i.ValidMeasurementUnitCreatedAt,
			&i.ValidMeasurementUnitLastUpdatedAt,
			&i.ValidMeasurementUnitArchivedAt,
			&i.ValidVesselWidthInMillimeters,
			&i.ValidVesselLengthInMillimeters,
			&i.ValidVesselHeightInMillimeters,
			&i.ValidVesselShape,
			&i.ValidVesselLastIndexedAt,
			&i.ValidVesselCreatedAt,
			&i.ValidVesselLastUpdatedAt,
			&i.ValidVesselArchivedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateValidPreparationVessel = `-- name: UpdateValidPreparationVessel :execrows

UPDATE valid_preparation_vessels SET
	notes = $1,
	valid_preparation_id = $2,
	valid_vessel_id = $3,
	last_updated_at = NOW()
WHERE archived_at IS NULL
	AND id = $4
`

type UpdateValidPreparationVesselParams struct {
	Notes              string
	ValidPreparationID string
	ValidVesselID      string
	ID                 string
}

func (q *Queries) UpdateValidPreparationVessel(ctx context.Context, db DBTX, arg *UpdateValidPreparationVesselParams) (int64, error) {
	result, err := db.ExecContext(ctx, updateValidPreparationVessel,
		arg.Notes,
		arg.ValidPreparationID,
		arg.ValidVesselID,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const validPreparationVesselPairIsValid = `-- name: ValidPreparationVesselPairIsValid :one

SELECT EXISTS(
	SELECT id
	FROM valid_preparation_vessels
	WHERE valid_vessel_id = $1
	AND valid_preparation_id = $2
	AND archived_at IS NULL
)
`

type ValidPreparationVesselPairIsValidParams struct {
	ValidVesselID      string
	ValidPreparationID string
}

func (q *Queries) ValidPreparationVesselPairIsValid(ctx context.Context, db DBTX, arg *ValidPreparationVesselPairIsValidParams) (bool, error) {
	row := db.QueryRowContext(ctx, validPreparationVesselPairIsValid, arg.ValidVesselID, arg.ValidPreparationID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
