// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"context"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
	Oauth2Scopes     = "oauth2.Scopes"
)

// Defines values for GetHouseholdsParamsIncludeArchived.
const (
	GetHouseholdsParamsIncludeArchivedFalse GetHouseholdsParamsIncludeArchived = "false"
	GetHouseholdsParamsIncludeArchivedTrue  GetHouseholdsParamsIncludeArchived = "true"
)

// Defines values for GetHouseholdsParamsSortBy.
const (
	GetHouseholdsParamsSortByAsc  GetHouseholdsParamsSortBy = "asc"
	GetHouseholdsParamsSortByDesc GetHouseholdsParamsSortBy = "desc"
)

// Defines values for GetHouseholdInstrumentOwnershipsParamsIncludeArchived.
const (
	GetHouseholdInstrumentOwnershipsParamsIncludeArchivedFalse GetHouseholdInstrumentOwnershipsParamsIncludeArchived = "false"
	GetHouseholdInstrumentOwnershipsParamsIncludeArchivedTrue  GetHouseholdInstrumentOwnershipsParamsIncludeArchived = "true"
)

// Defines values for GetHouseholdInstrumentOwnershipsParamsSortBy.
const (
	GetHouseholdInstrumentOwnershipsParamsSortByAsc  GetHouseholdInstrumentOwnershipsParamsSortBy = "asc"
	GetHouseholdInstrumentOwnershipsParamsSortByDesc GetHouseholdInstrumentOwnershipsParamsSortBy = "desc"
)

// Defines values for GetMealPlansParamsIncludeArchived.
const (
	GetMealPlansParamsIncludeArchivedFalse GetMealPlansParamsIncludeArchived = "false"
	GetMealPlansParamsIncludeArchivedTrue  GetMealPlansParamsIncludeArchived = "true"
)

// Defines values for GetMealPlansParamsSortBy.
const (
	GetMealPlansParamsSortByAsc  GetMealPlansParamsSortBy = "asc"
	GetMealPlansParamsSortByDesc GetMealPlansParamsSortBy = "desc"
)

// Defines values for GetMealPlanEventsParamsIncludeArchived.
const (
	GetMealPlanEventsParamsIncludeArchivedFalse GetMealPlanEventsParamsIncludeArchived = "false"
	GetMealPlanEventsParamsIncludeArchivedTrue  GetMealPlanEventsParamsIncludeArchived = "true"
)

// Defines values for GetMealPlanEventsParamsSortBy.
const (
	GetMealPlanEventsParamsSortByAsc  GetMealPlanEventsParamsSortBy = "asc"
	GetMealPlanEventsParamsSortByDesc GetMealPlanEventsParamsSortBy = "desc"
)

// Defines values for GetMealPlanOptionsParamsIncludeArchived.
const (
	GetMealPlanOptionsParamsIncludeArchivedFalse GetMealPlanOptionsParamsIncludeArchived = "false"
	GetMealPlanOptionsParamsIncludeArchivedTrue  GetMealPlanOptionsParamsIncludeArchived = "true"
)

// Defines values for GetMealPlanOptionsParamsSortBy.
const (
	GetMealPlanOptionsParamsSortByAsc  GetMealPlanOptionsParamsSortBy = "asc"
	GetMealPlanOptionsParamsSortByDesc GetMealPlanOptionsParamsSortBy = "desc"
)

// Defines values for GetMealPlanOptionVotesParamsIncludeArchived.
const (
	GetMealPlanOptionVotesParamsIncludeArchivedFalse GetMealPlanOptionVotesParamsIncludeArchived = "false"
	GetMealPlanOptionVotesParamsIncludeArchivedTrue  GetMealPlanOptionVotesParamsIncludeArchived = "true"
)

// Defines values for GetMealPlanOptionVotesParamsSortBy.
const (
	GetMealPlanOptionVotesParamsSortByAsc  GetMealPlanOptionVotesParamsSortBy = "asc"
	GetMealPlanOptionVotesParamsSortByDesc GetMealPlanOptionVotesParamsSortBy = "desc"
)

// Defines values for GetMealPlanGroceryListItemsParamsIncludeArchived.
const (
	GetMealPlanGroceryListItemsParamsIncludeArchivedFalse GetMealPlanGroceryListItemsParamsIncludeArchived = "false"
	GetMealPlanGroceryListItemsParamsIncludeArchivedTrue  GetMealPlanGroceryListItemsParamsIncludeArchived = "true"
)

// Defines values for GetMealPlanGroceryListItemsParamsSortBy.
const (
	GetMealPlanGroceryListItemsParamsSortByAsc  GetMealPlanGroceryListItemsParamsSortBy = "asc"
	GetMealPlanGroceryListItemsParamsSortByDesc GetMealPlanGroceryListItemsParamsSortBy = "desc"
)

// Defines values for GetMealPlanTasksParamsIncludeArchived.
const (
	GetMealPlanTasksParamsIncludeArchivedFalse GetMealPlanTasksParamsIncludeArchived = "false"
	GetMealPlanTasksParamsIncludeArchivedTrue  GetMealPlanTasksParamsIncludeArchived = "true"
)

// Defines values for GetMealPlanTasksParamsSortBy.
const (
	GetMealPlanTasksParamsSortByAsc  GetMealPlanTasksParamsSortBy = "asc"
	GetMealPlanTasksParamsSortByDesc GetMealPlanTasksParamsSortBy = "desc"
)

// Defines values for GetMealsParamsIncludeArchived.
const (
	GetMealsParamsIncludeArchivedFalse GetMealsParamsIncludeArchived = "false"
	GetMealsParamsIncludeArchivedTrue  GetMealsParamsIncludeArchived = "true"
)

// Defines values for GetMealsParamsSortBy.
const (
	GetMealsParamsSortByAsc  GetMealsParamsSortBy = "asc"
	GetMealsParamsSortByDesc GetMealsParamsSortBy = "desc"
)

// Defines values for GetOAuth2ClientsParamsIncludeArchived.
const (
	GetOAuth2ClientsParamsIncludeArchivedFalse GetOAuth2ClientsParamsIncludeArchived = "false"
	GetOAuth2ClientsParamsIncludeArchivedTrue  GetOAuth2ClientsParamsIncludeArchived = "true"
)

// Defines values for GetOAuth2ClientsParamsSortBy.
const (
	GetOAuth2ClientsParamsSortByAsc  GetOAuth2ClientsParamsSortBy = "asc"
	GetOAuth2ClientsParamsSortByDesc GetOAuth2ClientsParamsSortBy = "desc"
)

// Defines values for GetRecipesParamsIncludeArchived.
const (
	GetRecipesParamsIncludeArchivedFalse GetRecipesParamsIncludeArchived = "false"
	GetRecipesParamsIncludeArchivedTrue  GetRecipesParamsIncludeArchived = "true"
)

// Defines values for GetRecipesParamsSortBy.
const (
	GetRecipesParamsSortByAsc  GetRecipesParamsSortBy = "asc"
	GetRecipesParamsSortByDesc GetRecipesParamsSortBy = "desc"
)

// Defines values for GetRecipePrepTasksParamsIncludeArchived.
const (
	GetRecipePrepTasksParamsIncludeArchivedFalse GetRecipePrepTasksParamsIncludeArchived = "false"
	GetRecipePrepTasksParamsIncludeArchivedTrue  GetRecipePrepTasksParamsIncludeArchived = "true"
)

// Defines values for GetRecipePrepTasksParamsSortBy.
const (
	GetRecipePrepTasksParamsSortByAsc  GetRecipePrepTasksParamsSortBy = "asc"
	GetRecipePrepTasksParamsSortByDesc GetRecipePrepTasksParamsSortBy = "desc"
)

// Defines values for GetRecipeRatingsParamsIncludeArchived.
const (
	GetRecipeRatingsParamsIncludeArchivedFalse GetRecipeRatingsParamsIncludeArchived = "false"
	GetRecipeRatingsParamsIncludeArchivedTrue  GetRecipeRatingsParamsIncludeArchived = "true"
)

// Defines values for GetRecipeRatingsParamsSortBy.
const (
	GetRecipeRatingsParamsSortByAsc  GetRecipeRatingsParamsSortBy = "asc"
	GetRecipeRatingsParamsSortByDesc GetRecipeRatingsParamsSortBy = "desc"
)

// Defines values for GetRecipeStepsParamsIncludeArchived.
const (
	GetRecipeStepsParamsIncludeArchivedFalse GetRecipeStepsParamsIncludeArchived = "false"
	GetRecipeStepsParamsIncludeArchivedTrue  GetRecipeStepsParamsIncludeArchived = "true"
)

// Defines values for GetRecipeStepsParamsSortBy.
const (
	GetRecipeStepsParamsSortByAsc  GetRecipeStepsParamsSortBy = "asc"
	GetRecipeStepsParamsSortByDesc GetRecipeStepsParamsSortBy = "desc"
)

// Defines values for GetRecipeStepCompletionConditionsParamsIncludeArchived.
const (
	GetRecipeStepCompletionConditionsParamsIncludeArchivedFalse GetRecipeStepCompletionConditionsParamsIncludeArchived = "false"
	GetRecipeStepCompletionConditionsParamsIncludeArchivedTrue  GetRecipeStepCompletionConditionsParamsIncludeArchived = "true"
)

// Defines values for GetRecipeStepCompletionConditionsParamsSortBy.
const (
	GetRecipeStepCompletionConditionsParamsSortByAsc  GetRecipeStepCompletionConditionsParamsSortBy = "asc"
	GetRecipeStepCompletionConditionsParamsSortByDesc GetRecipeStepCompletionConditionsParamsSortBy = "desc"
)

// Defines values for GetRecipeStepIngredientsParamsIncludeArchived.
const (
	GetRecipeStepIngredientsParamsIncludeArchivedFalse GetRecipeStepIngredientsParamsIncludeArchived = "false"
	GetRecipeStepIngredientsParamsIncludeArchivedTrue  GetRecipeStepIngredientsParamsIncludeArchived = "true"
)

// Defines values for GetRecipeStepIngredientsParamsSortBy.
const (
	GetRecipeStepIngredientsParamsSortByAsc  GetRecipeStepIngredientsParamsSortBy = "asc"
	GetRecipeStepIngredientsParamsSortByDesc GetRecipeStepIngredientsParamsSortBy = "desc"
)

// Defines values for GetRecipeStepInstrumentsParamsIncludeArchived.
const (
	GetRecipeStepInstrumentsParamsIncludeArchivedFalse GetRecipeStepInstrumentsParamsIncludeArchived = "false"
	GetRecipeStepInstrumentsParamsIncludeArchivedTrue  GetRecipeStepInstrumentsParamsIncludeArchived = "true"
)

// Defines values for GetRecipeStepInstrumentsParamsSortBy.
const (
	GetRecipeStepInstrumentsParamsSortByAsc  GetRecipeStepInstrumentsParamsSortBy = "asc"
	GetRecipeStepInstrumentsParamsSortByDesc GetRecipeStepInstrumentsParamsSortBy = "desc"
)

// Defines values for GetRecipeStepProductsParamsIncludeArchived.
const (
	GetRecipeStepProductsParamsIncludeArchivedFalse GetRecipeStepProductsParamsIncludeArchived = "false"
	GetRecipeStepProductsParamsIncludeArchivedTrue  GetRecipeStepProductsParamsIncludeArchived = "true"
)

// Defines values for GetRecipeStepProductsParamsSortBy.
const (
	GetRecipeStepProductsParamsSortByAsc  GetRecipeStepProductsParamsSortBy = "asc"
	GetRecipeStepProductsParamsSortByDesc GetRecipeStepProductsParamsSortBy = "desc"
)

// Defines values for GetRecipeStepVesselsParamsIncludeArchived.
const (
	GetRecipeStepVesselsParamsIncludeArchivedFalse GetRecipeStepVesselsParamsIncludeArchived = "false"
	GetRecipeStepVesselsParamsIncludeArchivedTrue  GetRecipeStepVesselsParamsIncludeArchived = "true"
)

// Defines values for GetRecipeStepVesselsParamsSortBy.
const (
	GetRecipeStepVesselsParamsSortByAsc  GetRecipeStepVesselsParamsSortBy = "asc"
	GetRecipeStepVesselsParamsSortByDesc GetRecipeStepVesselsParamsSortBy = "desc"
)

// Defines values for GetServiceSettingsParamsIncludeArchived.
const (
	GetServiceSettingsParamsIncludeArchivedFalse GetServiceSettingsParamsIncludeArchived = "false"
	GetServiceSettingsParamsIncludeArchivedTrue  GetServiceSettingsParamsIncludeArchived = "true"
)

// Defines values for GetServiceSettingsParamsSortBy.
const (
	GetServiceSettingsParamsSortByAsc  GetServiceSettingsParamsSortBy = "asc"
	GetServiceSettingsParamsSortByDesc GetServiceSettingsParamsSortBy = "desc"
)

// Defines values for GetUserIngredientPreferencesParamsIncludeArchived.
const (
	GetUserIngredientPreferencesParamsIncludeArchivedFalse GetUserIngredientPreferencesParamsIncludeArchived = "false"
	GetUserIngredientPreferencesParamsIncludeArchivedTrue  GetUserIngredientPreferencesParamsIncludeArchived = "true"
)

// Defines values for GetUserIngredientPreferencesParamsSortBy.
const (
	GetUserIngredientPreferencesParamsSortByAsc  GetUserIngredientPreferencesParamsSortBy = "asc"
	GetUserIngredientPreferencesParamsSortByDesc GetUserIngredientPreferencesParamsSortBy = "desc"
)

// Defines values for GetUserNotificationsParamsIncludeArchived.
const (
	GetUserNotificationsParamsIncludeArchivedFalse GetUserNotificationsParamsIncludeArchived = "false"
	GetUserNotificationsParamsIncludeArchivedTrue  GetUserNotificationsParamsIncludeArchived = "true"
)

// Defines values for GetUserNotificationsParamsSortBy.
const (
	GetUserNotificationsParamsSortByAsc  GetUserNotificationsParamsSortBy = "asc"
	GetUserNotificationsParamsSortByDesc GetUserNotificationsParamsSortBy = "desc"
)

// Defines values for GetUsersParamsIncludeArchived.
const (
	GetUsersParamsIncludeArchivedFalse GetUsersParamsIncludeArchived = "false"
	GetUsersParamsIncludeArchivedTrue  GetUsersParamsIncludeArchived = "true"
)

// Defines values for GetUsersParamsSortBy.
const (
	GetUsersParamsSortByAsc  GetUsersParamsSortBy = "asc"
	GetUsersParamsSortByDesc GetUsersParamsSortBy = "desc"
)

// Defines values for SearchForUsersParamsIncludeArchived.
const (
	SearchForUsersParamsIncludeArchivedFalse SearchForUsersParamsIncludeArchived = "false"
	SearchForUsersParamsIncludeArchivedTrue  SearchForUsersParamsIncludeArchived = "true"
)

// Defines values for SearchForUsersParamsSortBy.
const (
	SearchForUsersParamsSortByAsc  SearchForUsersParamsSortBy = "asc"
	SearchForUsersParamsSortByDesc SearchForUsersParamsSortBy = "desc"
)

// Defines values for GetValidIngredientGroupsParamsIncludeArchived.
const (
	GetValidIngredientGroupsParamsIncludeArchivedFalse GetValidIngredientGroupsParamsIncludeArchived = "false"
	GetValidIngredientGroupsParamsIncludeArchivedTrue  GetValidIngredientGroupsParamsIncludeArchived = "true"
)

// Defines values for GetValidIngredientGroupsParamsSortBy.
const (
	GetValidIngredientGroupsParamsSortByAsc  GetValidIngredientGroupsParamsSortBy = "asc"
	GetValidIngredientGroupsParamsSortByDesc GetValidIngredientGroupsParamsSortBy = "desc"
)

// Defines values for GetValidIngredientMeasurementUnitsParamsIncludeArchived.
const (
	GetValidIngredientMeasurementUnitsParamsIncludeArchivedFalse GetValidIngredientMeasurementUnitsParamsIncludeArchived = "false"
	GetValidIngredientMeasurementUnitsParamsIncludeArchivedTrue  GetValidIngredientMeasurementUnitsParamsIncludeArchived = "true"
)

// Defines values for GetValidIngredientMeasurementUnitsParamsSortBy.
const (
	GetValidIngredientMeasurementUnitsParamsSortByAsc  GetValidIngredientMeasurementUnitsParamsSortBy = "asc"
	GetValidIngredientMeasurementUnitsParamsSortByDesc GetValidIngredientMeasurementUnitsParamsSortBy = "desc"
)

// Defines values for GetValidIngredientPreparationsParamsIncludeArchived.
const (
	GetValidIngredientPreparationsParamsIncludeArchivedFalse GetValidIngredientPreparationsParamsIncludeArchived = "false"
	GetValidIngredientPreparationsParamsIncludeArchivedTrue  GetValidIngredientPreparationsParamsIncludeArchived = "true"
)

// Defines values for GetValidIngredientPreparationsParamsSortBy.
const (
	GetValidIngredientPreparationsParamsSortByAsc  GetValidIngredientPreparationsParamsSortBy = "asc"
	GetValidIngredientPreparationsParamsSortByDesc GetValidIngredientPreparationsParamsSortBy = "desc"
)

// Defines values for GetValidIngredientStateIngredientsParamsIncludeArchived.
const (
	GetValidIngredientStateIngredientsParamsIncludeArchivedFalse GetValidIngredientStateIngredientsParamsIncludeArchived = "false"
	GetValidIngredientStateIngredientsParamsIncludeArchivedTrue  GetValidIngredientStateIngredientsParamsIncludeArchived = "true"
)

// Defines values for GetValidIngredientStateIngredientsParamsSortBy.
const (
	GetValidIngredientStateIngredientsParamsSortByAsc  GetValidIngredientStateIngredientsParamsSortBy = "asc"
	GetValidIngredientStateIngredientsParamsSortByDesc GetValidIngredientStateIngredientsParamsSortBy = "desc"
)

// Defines values for GetValidIngredientStatesParamsIncludeArchived.
const (
	GetValidIngredientStatesParamsIncludeArchivedFalse GetValidIngredientStatesParamsIncludeArchived = "false"
	GetValidIngredientStatesParamsIncludeArchivedTrue  GetValidIngredientStatesParamsIncludeArchived = "true"
)

// Defines values for GetValidIngredientStatesParamsSortBy.
const (
	GetValidIngredientStatesParamsSortByAsc  GetValidIngredientStatesParamsSortBy = "asc"
	GetValidIngredientStatesParamsSortByDesc GetValidIngredientStatesParamsSortBy = "desc"
)

// Defines values for GetValidIngredientsParamsIncludeArchived.
const (
	GetValidIngredientsParamsIncludeArchivedFalse GetValidIngredientsParamsIncludeArchived = "false"
	GetValidIngredientsParamsIncludeArchivedTrue  GetValidIngredientsParamsIncludeArchived = "true"
)

// Defines values for GetValidIngredientsParamsSortBy.
const (
	GetValidIngredientsParamsSortByAsc  GetValidIngredientsParamsSortBy = "asc"
	GetValidIngredientsParamsSortByDesc GetValidIngredientsParamsSortBy = "desc"
)

// Defines values for GetValidInstrumentsParamsIncludeArchived.
const (
	GetValidInstrumentsParamsIncludeArchivedFalse GetValidInstrumentsParamsIncludeArchived = "false"
	GetValidInstrumentsParamsIncludeArchivedTrue  GetValidInstrumentsParamsIncludeArchived = "true"
)

// Defines values for GetValidInstrumentsParamsSortBy.
const (
	GetValidInstrumentsParamsSortByAsc  GetValidInstrumentsParamsSortBy = "asc"
	GetValidInstrumentsParamsSortByDesc GetValidInstrumentsParamsSortBy = "desc"
)

// Defines values for GetValidMeasurementUnitsParamsIncludeArchived.
const (
	GetValidMeasurementUnitsParamsIncludeArchivedFalse GetValidMeasurementUnitsParamsIncludeArchived = "false"
	GetValidMeasurementUnitsParamsIncludeArchivedTrue  GetValidMeasurementUnitsParamsIncludeArchived = "true"
)

// Defines values for GetValidMeasurementUnitsParamsSortBy.
const (
	GetValidMeasurementUnitsParamsSortByAsc  GetValidMeasurementUnitsParamsSortBy = "asc"
	GetValidMeasurementUnitsParamsSortByDesc GetValidMeasurementUnitsParamsSortBy = "desc"
)

// Defines values for GetValidPreparationInstrumentsParamsIncludeArchived.
const (
	GetValidPreparationInstrumentsParamsIncludeArchivedFalse GetValidPreparationInstrumentsParamsIncludeArchived = "false"
	GetValidPreparationInstrumentsParamsIncludeArchivedTrue  GetValidPreparationInstrumentsParamsIncludeArchived = "true"
)

// Defines values for GetValidPreparationInstrumentsParamsSortBy.
const (
	GetValidPreparationInstrumentsParamsSortByAsc  GetValidPreparationInstrumentsParamsSortBy = "asc"
	GetValidPreparationInstrumentsParamsSortByDesc GetValidPreparationInstrumentsParamsSortBy = "desc"
)

// Defines values for GetValidPreparationVesselsParamsIncludeArchived.
const (
	GetValidPreparationVesselsParamsIncludeArchivedFalse GetValidPreparationVesselsParamsIncludeArchived = "false"
	GetValidPreparationVesselsParamsIncludeArchivedTrue  GetValidPreparationVesselsParamsIncludeArchived = "true"
)

// Defines values for GetValidPreparationVesselsParamsSortBy.
const (
	GetValidPreparationVesselsParamsSortByAsc  GetValidPreparationVesselsParamsSortBy = "asc"
	GetValidPreparationVesselsParamsSortByDesc GetValidPreparationVesselsParamsSortBy = "desc"
)

// Defines values for GetValidPreparationsParamsIncludeArchived.
const (
	GetValidPreparationsParamsIncludeArchivedFalse GetValidPreparationsParamsIncludeArchived = "false"
	GetValidPreparationsParamsIncludeArchivedTrue  GetValidPreparationsParamsIncludeArchived = "true"
)

// Defines values for GetValidPreparationsParamsSortBy.
const (
	GetValidPreparationsParamsSortByAsc  GetValidPreparationsParamsSortBy = "asc"
	GetValidPreparationsParamsSortByDesc GetValidPreparationsParamsSortBy = "desc"
)

// Defines values for GetValidVesselsParamsIncludeArchived.
const (
	GetValidVesselsParamsIncludeArchivedFalse GetValidVesselsParamsIncludeArchived = "false"
	GetValidVesselsParamsIncludeArchivedTrue  GetValidVesselsParamsIncludeArchived = "true"
)

// Defines values for GetValidVesselsParamsSortBy.
const (
	GetValidVesselsParamsSortByAsc  GetValidVesselsParamsSortBy = "asc"
	GetValidVesselsParamsSortByDesc GetValidVesselsParamsSortBy = "desc"
)

// Defines values for GetWebhooksParamsIncludeArchived.
const (
	False GetWebhooksParamsIncludeArchived = "false"
	True  GetWebhooksParamsIncludeArchived = "true"
)

// Defines values for GetWebhooksParamsSortBy.
const (
	Asc  GetWebhooksParamsSortBy = "asc"
	Desc GetWebhooksParamsSortBy = "desc"
)

// APIError defines model for APIError.
type APIError struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// APIResponse defines model for APIResponse.
type APIResponse struct {
	Details    *ResponseDetails `json:"details,omitempty"`
	Error      *APIError        `json:"error,omitempty"`
	Pagination *Pagination      `json:"pagination,omitempty"`
}

// APIResponseWithError defines model for APIResponseWithError.
type APIResponseWithError struct {
	Details *ResponseDetails `json:"details,omitempty"`
	Error   *APIError        `json:"error,omitempty"`
}

// AuditLogEntry defines model for AuditLogEntry.
type AuditLogEntry struct {
	BelongsToHousehold *string    `json:"belongsToHousehold,omitempty"`
	BelongsToUser      *string    `json:"belongsToUser,omitempty"`
	Changes            *ChangeLog `json:"changes,omitempty"`
	CreatedAt          *string    `json:"createdAt,omitempty"`
	EventType          *string    `json:"eventType,omitempty"`
	Id                 *string    `json:"id,omitempty"`
	RelevantID         *string    `json:"relevantID,omitempty"`
	ResourceType       *string    `json:"resourceType,omitempty"`
}

// AvatarUpdateInput defines model for AvatarUpdateInput.
type AvatarUpdateInput struct {
	Base64EncodedData *string `json:"base64EncodedData,omitempty"`
}

// ChangeActiveHouseholdInput defines model for ChangeActiveHouseholdInput.
type ChangeActiveHouseholdInput struct {
	HouseholdID *string `json:"householdID,omitempty"`
}

// ChangeLog defines model for ChangeLog.
type ChangeLog struct {
	NewValue *string `json:"newValue,omitempty"`
	OldValue *string `json:"oldValue,omitempty"`
}

// EmailAddressVerificationRequestInput defines model for EmailAddressVerificationRequestInput.
type EmailAddressVerificationRequestInput struct {
	EmailVerificationToken *string `json:"emailVerificationToken,omitempty"`
}

// FinalizeMealPlansRequest defines model for FinalizeMealPlansRequest.
type FinalizeMealPlansRequest struct {
	ReturnCount *bool `json:"returnCount,omitempty"`
}

// FinalizeMealPlansResponse defines model for FinalizeMealPlansResponse.
type FinalizeMealPlansResponse struct {
	Count *int `json:"count,omitempty"`
}

// Household defines model for Household.
type Household struct {
	AddressLine1             *string                            `json:"addressLine1,omitempty"`
	AddressLine2             *string                            `json:"addressLine2,omitempty"`
	ArchivedAt               *string                            `json:"archivedAt,omitempty"`
	BelongsToUser            *string                            `json:"belongsToUser,omitempty"`
	BillingStatus            *string                            `json:"billingStatus,omitempty"`
	City                     *string                            `json:"city,omitempty"`
	ContactPhone             *string                            `json:"contactPhone,omitempty"`
	Country                  *string                            `json:"country,omitempty"`
	CreatedAt                *string                            `json:"createdAt,omitempty"`
	Id                       *string                            `json:"id,omitempty"`
	LastUpdatedAt            *string                            `json:"lastUpdatedAt,omitempty"`
	Latitude                 *float32                           `json:"latitude,omitempty"`
	Longitude                *float32                           `json:"longitude,omitempty"`
	Members                  *[]HouseholdUserMembershipWithUser `json:"members,omitempty"`
	Name                     *string                            `json:"name,omitempty"`
	PaymentProcessorCustomer *string                            `json:"paymentProcessorCustomer,omitempty"`
	State                    *string                            `json:"state,omitempty"`
	SubscriptionPlanID       *string                            `json:"subscriptionPlanID,omitempty"`
	ZipCode                  *string                            `json:"zipCode,omitempty"`
}

// HouseholdCreationRequestInput defines model for HouseholdCreationRequestInput.
type HouseholdCreationRequestInput struct {
	AddressLine1 *string  `json:"addressLine1,omitempty"`
	AddressLine2 *string  `json:"addressLine2,omitempty"`
	City         *string  `json:"city,omitempty"`
	ContactPhone *string  `json:"contactPhone,omitempty"`
	Country      *string  `json:"country,omitempty"`
	Latitude     *float32 `json:"latitude,omitempty"`
	Longitude    *float32 `json:"longitude,omitempty"`
	Name         *string  `json:"name,omitempty"`
	State        *string  `json:"state,omitempty"`
	ZipCode      *string  `json:"zipCode,omitempty"`
}

// HouseholdInstrumentOwnership defines model for HouseholdInstrumentOwnership.
type HouseholdInstrumentOwnership struct {
	ArchivedAt         *string          `json:"archivedAt,omitempty"`
	BelongsToHousehold *string          `json:"belongsToHousehold,omitempty"`
	CreatedAt          *string          `json:"createdAt,omitempty"`
	Id                 *string          `json:"id,omitempty"`
	Instrument         *ValidInstrument `json:"instrument,omitempty"`
	LastUpdatedAt      *string          `json:"lastUpdatedAt,omitempty"`
	Notes              *string          `json:"notes,omitempty"`
	Quantity           *int             `json:"quantity,omitempty"`
}

// HouseholdInstrumentOwnershipCreationRequestInput defines model for HouseholdInstrumentOwnershipCreationRequestInput.
type HouseholdInstrumentOwnershipCreationRequestInput struct {
	BelongsToHousehold *string `json:"belongsToHousehold,omitempty"`
	Notes              *string `json:"notes,omitempty"`
	Quantity           *int    `json:"quantity,omitempty"`
	ValidInstrumentID  *string `json:"validInstrumentID,omitempty"`
}

// HouseholdInstrumentOwnershipUpdateRequestInput defines model for HouseholdInstrumentOwnershipUpdateRequestInput.
type HouseholdInstrumentOwnershipUpdateRequestInput struct {
	Notes             *string `json:"notes,omitempty"`
	Quantity          *int    `json:"quantity,omitempty"`
	ValidInstrumentID *string `json:"validInstrumentID,omitempty"`
}

// HouseholdInvitation defines model for HouseholdInvitation.
type HouseholdInvitation struct {
	ArchivedAt           *string    `json:"archivedAt,omitempty"`
	CreatedAt            *string    `json:"createdAt,omitempty"`
	DestinationHousehold *Household `json:"destinationHousehold,omitempty"`
	ExpiresAt            *string    `json:"expiresAt,omitempty"`
	FromUser             *User      `json:"fromUser,omitempty"`
	Id                   *string    `json:"id,omitempty"`
	LastUpdatedAt        *string    `json:"lastUpdatedAt,omitempty"`
	Note                 *string    `json:"note,omitempty"`
	Status               *string    `json:"status,omitempty"`
	StatusNote           *string    `json:"statusNote,omitempty"`
	ToEmail              *string    `json:"toEmail,omitempty"`
	ToName               *string    `json:"toName,omitempty"`
	ToUser               *string    `json:"toUser,omitempty"`
	Token                *string    `json:"token,omitempty"`
}

// HouseholdInvitationCreationRequestInput defines model for HouseholdInvitationCreationRequestInput.
type HouseholdInvitationCreationRequestInput struct {
	ExpiresAt *string `json:"expiresAt,omitempty"`
	Note      *string `json:"note,omitempty"`
	ToEmail   *string `json:"toEmail,omitempty"`
	ToName    *string `json:"toName,omitempty"`
}

// HouseholdInvitationUpdateRequestInput defines model for HouseholdInvitationUpdateRequestInput.
type HouseholdInvitationUpdateRequestInput struct {
	Note  *string `json:"note,omitempty"`
	Token *string `json:"token,omitempty"`
}

// HouseholdOwnershipTransferInput defines model for HouseholdOwnershipTransferInput.
type HouseholdOwnershipTransferInput struct {
	CurrentOwner *string `json:"currentOwner,omitempty"`
	NewOwner     *string `json:"newOwner,omitempty"`
	Reason       *string `json:"reason,omitempty"`
}

// HouseholdUpdateRequestInput defines model for HouseholdUpdateRequestInput.
type HouseholdUpdateRequestInput struct {
	AddressLine1 *string  `json:"addressLine1,omitempty"`
	AddressLine2 *string  `json:"addressLine2,omitempty"`
	City         *string  `json:"city,omitempty"`
	ContactPhone *string  `json:"contactPhone,omitempty"`
	Country      *string  `json:"country,omitempty"`
	Latitude     *float32 `json:"latitude,omitempty"`
	Longitude    *float32 `json:"longitude,omitempty"`
	Name         *string  `json:"name,omitempty"`
	State        *string  `json:"state,omitempty"`
	ZipCode      *string  `json:"zipCode,omitempty"`
}

// HouseholdUserMembership defines model for HouseholdUserMembership.
type HouseholdUserMembership struct {
	ArchivedAt         *string `json:"archivedAt,omitempty"`
	BelongsToHousehold *string `json:"belongsToHousehold,omitempty"`
	BelongsToUser      *string `json:"belongsToUser,omitempty"`
	CreatedAt          *string `json:"createdAt,omitempty"`
	DefaultHousehold   *bool   `json:"defaultHousehold,omitempty"`
	HouseholdRole      *string `json:"householdRole,omitempty"`
	Id                 *string `json:"id,omitempty"`
	LastUpdatedAt      *string `json:"lastUpdatedAt,omitempty"`
}

// HouseholdUserMembershipWithUser defines model for HouseholdUserMembershipWithUser.
type HouseholdUserMembershipWithUser struct {
	ArchivedAt         *string `json:"archivedAt,omitempty"`
	BelongsToHousehold *string `json:"belongsToHousehold,omitempty"`
	BelongsToUser      *User   `json:"belongsToUser,omitempty"`
	CreatedAt          *string `json:"createdAt,omitempty"`
	DefaultHousehold   *bool   `json:"defaultHousehold,omitempty"`
	HouseholdRole      *string `json:"householdRole,omitempty"`
	Id                 *string `json:"id,omitempty"`
	LastUpdatedAt      *string `json:"lastUpdatedAt,omitempty"`
}

// Meal defines model for Meal.
type Meal struct {
	ArchivedAt               *string          `json:"archivedAt,omitempty"`
	Components               *[]MealComponent `json:"components,omitempty"`
	CreatedAt                *string          `json:"createdAt,omitempty"`
	CreatedByUser            *string          `json:"createdByUser,omitempty"`
	Description              *string          `json:"description,omitempty"`
	EligibleForMealPlans     *bool            `json:"eligibleForMealPlans,omitempty"`
	Id                       *string          `json:"id,omitempty"`
	LastUpdatedAt            *string          `json:"lastUpdatedAt,omitempty"`
	MaximumEstimatedPortions *float32         `json:"maximumEstimatedPortions,omitempty"`
	MinimumEstimatedPortions *float32         `json:"minimumEstimatedPortions,omitempty"`
	Name                     *string          `json:"name,omitempty"`
}

// MealComponent defines model for MealComponent.
type MealComponent struct {
	ComponentType *string  `json:"componentType,omitempty"`
	Recipe        *Recipe  `json:"recipe,omitempty"`
	RecipeScale   *float32 `json:"recipeScale,omitempty"`
}

// MealComponentCreationRequestInput defines model for MealComponentCreationRequestInput.
type MealComponentCreationRequestInput struct {
	ComponentType *string  `json:"componentType,omitempty"`
	RecipeID      *string  `json:"recipeID,omitempty"`
	RecipeScale   *float32 `json:"recipeScale,omitempty"`
}

// MealCreationRequestInput defines model for MealCreationRequestInput.
type MealCreationRequestInput struct {
	Description              *string                              `json:"description,omitempty"`
	EligibleForMealPlans     *bool                                `json:"eligibleForMealPlans,omitempty"`
	MaximumEstimatedPortions *float32                             `json:"maximumEstimatedPortions,omitempty"`
	MinimumEstimatedPortions *float32                             `json:"minimumEstimatedPortions,omitempty"`
	Name                     *string                              `json:"name,omitempty"`
	Recipes                  *[]MealComponentCreationRequestInput `json:"recipes,omitempty"`
}

// MealPlan defines model for MealPlan.
type MealPlan struct {
	ArchivedAt             *string          `json:"archivedAt,omitempty"`
	BelongsToHousehold     *string          `json:"belongsToHousehold,omitempty"`
	CreatedAt              *string          `json:"createdAt,omitempty"`
	CreatedBy              *string          `json:"createdBy,omitempty"`
	ElectionMethod         *string          `json:"electionMethod,omitempty"`
	Events                 *[]MealPlanEvent `json:"events,omitempty"`
	GroceryListInitialized *bool            `json:"groceryListInitialized,omitempty"`
	Id                     *string          `json:"id,omitempty"`
	LastUpdatedAt          *string          `json:"lastUpdatedAt,omitempty"`
	Notes                  *string          `json:"notes,omitempty"`
	Status                 *string          `json:"status,omitempty"`
	TasksCreated           *bool            `json:"tasksCreated,omitempty"`
	VotingDeadline         *string          `json:"votingDeadline,omitempty"`
}

// MealPlanCreationRequestInput defines model for MealPlanCreationRequestInput.
type MealPlanCreationRequestInput struct {
	ElectionMethod *string                              `json:"electionMethod,omitempty"`
	Events         *[]MealPlanEventCreationRequestInput `json:"events,omitempty"`
	Notes          *string                              `json:"notes,omitempty"`
	VotingDeadline *string                              `json:"votingDeadline,omitempty"`
}

// MealPlanEvent defines model for MealPlanEvent.
type MealPlanEvent struct {
	ArchivedAt        *string           `json:"archivedAt,omitempty"`
	BelongsToMealPlan *string           `json:"belongsToMealPlan,omitempty"`
	CreatedAt         *string           `json:"createdAt,omitempty"`
	EndsAt            *string           `json:"endsAt,omitempty"`
	Id                *string           `json:"id,omitempty"`
	LastUpdatedAt     *string           `json:"lastUpdatedAt,omitempty"`
	MealName          *string           `json:"mealName,omitempty"`
	Notes             *string           `json:"notes,omitempty"`
	Options           *[]MealPlanOption `json:"options,omitempty"`
	StartsAt          *string           `json:"startsAt,omitempty"`
}

// MealPlanEventCreationRequestInput defines model for MealPlanEventCreationRequestInput.
type MealPlanEventCreationRequestInput struct {
	EndsAt   *string                               `json:"endsAt,omitempty"`
	MealName *string                               `json:"mealName,omitempty"`
	Notes    *string                               `json:"notes,omitempty"`
	Options  *[]MealPlanOptionCreationRequestInput `json:"options,omitempty"`
	StartsAt *string                               `json:"startsAt,omitempty"`
}

// MealPlanEventUpdateRequestInput defines model for MealPlanEventUpdateRequestInput.
type MealPlanEventUpdateRequestInput struct {
	EndsAt   *string `json:"endsAt,omitempty"`
	MealName *string `json:"mealName,omitempty"`
	Notes    *string `json:"notes,omitempty"`
	StartsAt *string `json:"startsAt,omitempty"`
}

// MealPlanGroceryListItem defines model for MealPlanGroceryListItem.
type MealPlanGroceryListItem struct {
	ArchivedAt               *string               `json:"archivedAt,omitempty"`
	BelongsToMealPlan        *string               `json:"belongsToMealPlan,omitempty"`
	CreatedAt                *string               `json:"createdAt,omitempty"`
	Id                       *string               `json:"id,omitempty"`
	Ingredient               *ValidIngredient      `json:"ingredient,omitempty"`
	LastUpdatedAt            *string               `json:"lastUpdatedAt,omitempty"`
	MaximumQuantityNeeded    *float32              `json:"maximumQuantityNeeded,omitempty"`
	MeasurementUnit          *ValidMeasurementUnit `json:"measurementUnit,omitempty"`
	MinimumQuantityNeeded    *float32              `json:"minimumQuantityNeeded,omitempty"`
	PurchasePrice            *float32              `json:"purchasePrice,omitempty"`
	PurchasedMeasurementUnit *ValidMeasurementUnit `json:"purchasedMeasurementUnit,omitempty"`
	PurchasedUPC             *string               `json:"purchasedUPC,omitempty"`
	QuantityPurchased        *float32              `json:"quantityPurchased,omitempty"`
	Status                   *string               `json:"status,omitempty"`
	StatusExplanation        *string               `json:"statusExplanation,omitempty"`
}

// MealPlanGroceryListItemCreationRequestInput defines model for MealPlanGroceryListItemCreationRequestInput.
type MealPlanGroceryListItemCreationRequestInput struct {
	BelongsToMealPlan          *string  `json:"belongsToMealPlan,omitempty"`
	MaximumQuantityNeeded      *float32 `json:"maximumQuantityNeeded,omitempty"`
	MinimumQuantityNeeded      *float32 `json:"minimumQuantityNeeded,omitempty"`
	PurchasePrice              *float32 `json:"purchasePrice,omitempty"`
	PurchasedMeasurementUnitID *string  `json:"purchasedMeasurementUnitID,omitempty"`
	PurchasedUPC               *string  `json:"purchasedUPC,omitempty"`
	QuantityPurchased          *float32 `json:"quantityPurchased,omitempty"`
	Status                     *string  `json:"status,omitempty"`
	StatusExplanation          *string  `json:"statusExplanation,omitempty"`
	ValidIngredientID          *string  `json:"validIngredientID,omitempty"`
	ValidMeasurementUnitID     *string  `json:"validMeasurementUnitID,omitempty"`
}

// MealPlanGroceryListItemUpdateRequestInput defines model for MealPlanGroceryListItemUpdateRequestInput.
type MealPlanGroceryListItemUpdateRequestInput struct {
	BelongsToMealPlan          *string  `json:"belongsToMealPlan,omitempty"`
	MaximumQuantityNeeded      *float32 `json:"maximumQuantityNeeded,omitempty"`
	MinimumQuantityNeeded      *float32 `json:"minimumQuantityNeeded,omitempty"`
	PurchasePrice              *float32 `json:"purchasePrice,omitempty"`
	PurchasedMeasurementUnitID *string  `json:"purchasedMeasurementUnitID,omitempty"`
	PurchasedUPC               *string  `json:"purchasedUPC,omitempty"`
	QuantityPurchased          *float32 `json:"quantityPurchased,omitempty"`
	Status                     *string  `json:"status,omitempty"`
	StatusExplanation          *string  `json:"statusExplanation,omitempty"`
	ValidIngredientID          *string  `json:"validIngredientID,omitempty"`
	ValidMeasurementUnitID     *string  `json:"validMeasurementUnitID,omitempty"`
}

// MealPlanOption defines model for MealPlanOption.
type MealPlanOption struct {
	ArchivedAt             *string               `json:"archivedAt,omitempty"`
	AssignedCook           *string               `json:"assignedCook,omitempty"`
	AssignedDishwasher     *string               `json:"assignedDishwasher,omitempty"`
	BelongsToMealPlanEvent *string               `json:"belongsToMealPlanEvent,omitempty"`
	Chosen                 *bool                 `json:"chosen,omitempty"`
	CreatedAt              *string               `json:"createdAt,omitempty"`
	Id                     *string               `json:"id,omitempty"`
	LastUpdatedAt          *string               `json:"lastUpdatedAt,omitempty"`
	Meal                   *Meal                 `json:"meal,omitempty"`
	MealScale              *float32              `json:"mealScale,omitempty"`
	Notes                  *string               `json:"notes,omitempty"`
	TieBroken              *bool                 `json:"tieBroken,omitempty"`
	Votes                  *[]MealPlanOptionVote `json:"votes,omitempty"`
}

// MealPlanOptionCreationRequestInput defines model for MealPlanOptionCreationRequestInput.
type MealPlanOptionCreationRequestInput struct {
	AssignedCook       *string  `json:"assignedCook,omitempty"`
	AssignedDishwasher *string  `json:"assignedDishwasher,omitempty"`
	MealID             *string  `json:"mealID,omitempty"`
	MealScale          *float32 `json:"mealScale,omitempty"`
	Notes              *string  `json:"notes,omitempty"`
}

// MealPlanOptionUpdateRequestInput defines model for MealPlanOptionUpdateRequestInput.
type MealPlanOptionUpdateRequestInput struct {
	AssignedCook       *string  `json:"assignedCook,omitempty"`
	AssignedDishwasher *string  `json:"assignedDishwasher,omitempty"`
	MealID             *string  `json:"mealID,omitempty"`
	MealScale          *float32 `json:"mealScale,omitempty"`
	Notes              *string  `json:"notes,omitempty"`
}

// MealPlanOptionVote defines model for MealPlanOptionVote.
type MealPlanOptionVote struct {
	Abstain                 *bool   `json:"abstain,omitempty"`
	ArchivedAt              *string `json:"archivedAt,omitempty"`
	BelongsToMealPlanOption *string `json:"belongsToMealPlanOption,omitempty"`
	ByUser                  *string `json:"byUser,omitempty"`
	CreatedAt               *string `json:"createdAt,omitempty"`
	Id                      *string `json:"id,omitempty"`
	LastUpdatedAt           *string `json:"lastUpdatedAt,omitempty"`
	Notes                   *string `json:"notes,omitempty"`
	Rank                    *int    `json:"rank,omitempty"`
}

// MealPlanOptionVoteCreationInput defines model for MealPlanOptionVoteCreationInput.
type MealPlanOptionVoteCreationInput struct {
	Abstain                 *bool   `json:"abstain,omitempty"`
	BelongsToMealPlanOption *string `json:"belongsToMealPlanOption,omitempty"`
	Notes                   *string `json:"notes,omitempty"`
	Rank                    *int    `json:"rank,omitempty"`
}

// MealPlanOptionVoteCreationRequestInput defines model for MealPlanOptionVoteCreationRequestInput.
type MealPlanOptionVoteCreationRequestInput struct {
	Votes *[]MealPlanOptionVoteCreationInput `json:"votes,omitempty"`
}

// MealPlanOptionVoteUpdateRequestInput defines model for MealPlanOptionVoteUpdateRequestInput.
type MealPlanOptionVoteUpdateRequestInput struct {
	Abstain                 *bool   `json:"abstain,omitempty"`
	BelongsToMealPlanOption *string `json:"belongsToMealPlanOption,omitempty"`
	Notes                   *string `json:"notes,omitempty"`
	Rank                    *int    `json:"rank,omitempty"`
}

// MealPlanTask defines model for MealPlanTask.
type MealPlanTask struct {
	AssignedToUser      *string         `json:"assignedToUser,omitempty"`
	CompletedAt         *string         `json:"completedAt,omitempty"`
	CreatedAt           *string         `json:"createdAt,omitempty"`
	CreationExplanation *string         `json:"creationExplanation,omitempty"`
	Id                  *string         `json:"id,omitempty"`
	LastUpdatedAt       *string         `json:"lastUpdatedAt,omitempty"`
	MealPlanOption      *MealPlanOption `json:"mealPlanOption,omitempty"`
	RecipePrepTask      *RecipePrepTask `json:"recipePrepTask,omitempty"`
	Status              *string         `json:"status,omitempty"`
	StatusExplanation   *string         `json:"statusExplanation,omitempty"`
}

// MealPlanTaskCreationRequestInput defines model for MealPlanTaskCreationRequestInput.
type MealPlanTaskCreationRequestInput struct {
	AssignedToUser      *string `json:"assignedToUser,omitempty"`
	CreationExplanation *string `json:"creationExplanation,omitempty"`
	MealPlanOptionID    *string `json:"mealPlanOptionID,omitempty"`
	RecipePrepTaskID    *string `json:"recipePrepTaskID,omitempty"`
	Status              *string `json:"status,omitempty"`
	StatusExplanation   *string `json:"statusExplanation,omitempty"`
}

// MealPlanTaskStatusChangeRequestInput defines model for MealPlanTaskStatusChangeRequestInput.
type MealPlanTaskStatusChangeRequestInput struct {
	AssignedToUser    *string `json:"assignedToUser,omitempty"`
	Status            *string `json:"status,omitempty"`
	StatusExplanation *string `json:"statusExplanation,omitempty"`
}

// MealPlanUpdateRequestInput defines model for MealPlanUpdateRequestInput.
type MealPlanUpdateRequestInput struct {
	Notes          *string `json:"notes,omitempty"`
	VotingDeadline *string `json:"votingDeadline,omitempty"`
}

// ModifyUserPermissionsInput defines model for ModifyUserPermissionsInput.
type ModifyUserPermissionsInput struct {
	NewRoles *string `json:"newRoles,omitempty"`
	Reason   *string `json:"reason,omitempty"`
}

// OAuth2Client defines model for OAuth2Client.
type OAuth2Client struct {
	ArchivedAt   *string `json:"archivedAt,omitempty"`
	ClientID     *string `json:"clientID,omitempty"`
	ClientSecret *string `json:"clientSecret,omitempty"`
	CreatedAt    *string `json:"createdAt,omitempty"`
	Description  *string `json:"description,omitempty"`
	Id           *string `json:"id,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// OAuth2ClientCreationRequestInput defines model for OAuth2ClientCreationRequestInput.
type OAuth2ClientCreationRequestInput struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// OAuth2ClientCreationResponse defines model for OAuth2ClientCreationResponse.
type OAuth2ClientCreationResponse struct {
	ClientID     *string `json:"clientID,omitempty"`
	ClientSecret *string `json:"clientSecret,omitempty"`
	Description  *string `json:"description,omitempty"`
	Id           *string `json:"id,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	FilteredCount *int `json:"filteredCount,omitempty"`
	Limit         *int `json:"limit,omitempty"`
	Page          *int `json:"page,omitempty"`
	TotalCount    *int `json:"totalCount,omitempty"`
}

// PasswordResetToken defines model for PasswordResetToken.
type PasswordResetToken struct {
	ArchivedAt    *string `json:"archivedAt,omitempty"`
	BelongsToUser *string `json:"belongsToUser,omitempty"`
	CreatedAt     *string `json:"createdAt,omitempty"`
	ExpiresAt     *string `json:"expiresAt,omitempty"`
	Id            *string `json:"id,omitempty"`
	LastUpdatedAt *string `json:"lastUpdatedAt,omitempty"`
	Token         *string `json:"token,omitempty"`
}

// PasswordResetTokenCreationRequestInput defines model for PasswordResetTokenCreationRequestInput.
type PasswordResetTokenCreationRequestInput struct {
	EmailAddress *string `json:"emailAddress,omitempty"`
}

// PasswordResetTokenRedemptionRequestInput defines model for PasswordResetTokenRedemptionRequestInput.
type PasswordResetTokenRedemptionRequestInput struct {
	NewPassword *string `json:"newPassword,omitempty"`
	Token       *string `json:"token,omitempty"`
}

// PasswordUpdateInput defines model for PasswordUpdateInput.
type PasswordUpdateInput struct {
	CurrentPassword *string `json:"currentPassword,omitempty"`
	NewPassword     *string `json:"newPassword,omitempty"`
	TotpToken       *string `json:"totpToken,omitempty"`
}

// Recipe defines model for Recipe.
type Recipe struct {
	ArchivedAt               *string           `json:"archivedAt,omitempty"`
	CreatedAt                *string           `json:"createdAt,omitempty"`
	CreatedByUser            *string           `json:"createdByUser,omitempty"`
	Description              *string           `json:"description,omitempty"`
	EligibleForMeals         *bool             `json:"eligibleForMeals,omitempty"`
	Id                       *string           `json:"id,omitempty"`
	InspiredByRecipeID       *string           `json:"inspiredByRecipeID,omitempty"`
	LastUpdatedAt            *string           `json:"lastUpdatedAt,omitempty"`
	MaximumEstimatedPortions *float32          `json:"maximumEstimatedPortions,omitempty"`
	Media                    *[]RecipeMedia    `json:"media,omitempty"`
	MinimumEstimatedPortions *float32          `json:"minimumEstimatedPortions,omitempty"`
	Name                     *string           `json:"name,omitempty"`
	PluralPortionName        *string           `json:"pluralPortionName,omitempty"`
	PortionName              *string           `json:"portionName,omitempty"`
	PrepTasks                *[]RecipePrepTask `json:"prepTasks,omitempty"`
	SealOfApproval           *bool             `json:"sealOfApproval,omitempty"`
	Slug                     *string           `json:"slug,omitempty"`
	Source                   *string           `json:"source,omitempty"`
	Steps                    *[]RecipeStep     `json:"steps,omitempty"`
	SupportingRecipes        *[]Recipe         `json:"supportingRecipes,omitempty"`
	YieldsComponentType      *string           `json:"yieldsComponentType,omitempty"`
}

// RecipeCreationRequestInput defines model for RecipeCreationRequestInput.
type RecipeCreationRequestInput struct {
	AlsoCreateMeal           *bool                                             `json:"alsoCreateMeal,omitempty"`
	Description              *string                                           `json:"description,omitempty"`
	EligibleForMeals         *bool                                             `json:"eligibleForMeals,omitempty"`
	InspiredByRecipeID       *string                                           `json:"inspiredByRecipeID,omitempty"`
	MaximumEstimatedPortions *float32                                          `json:"maximumEstimatedPortions,omitempty"`
	MinimumEstimatedPortions *float32                                          `json:"minimumEstimatedPortions,omitempty"`
	Name                     *string                                           `json:"name,omitempty"`
	PluralPortionName        *string                                           `json:"pluralPortionName,omitempty"`
	PortionName              *string                                           `json:"portionName,omitempty"`
	PrepTasks                *[]RecipePrepTaskWithinRecipeCreationRequestInput `json:"prepTasks,omitempty"`
	SealOfApproval           *bool                                             `json:"sealOfApproval,omitempty"`
	Slug                     *string                                           `json:"slug,omitempty"`
	Source                   *string                                           `json:"source,omitempty"`
	Steps                    *[]RecipeStepCreationRequestInput                 `json:"steps,omitempty"`
	YieldsComponentType      *string                                           `json:"yieldsComponentType,omitempty"`
}

// RecipeMedia defines model for RecipeMedia.
type RecipeMedia struct {
	ArchivedAt          *string `json:"archivedAt,omitempty"`
	BelongsToRecipe     *string `json:"belongsToRecipe,omitempty"`
	BelongsToRecipeStep *string `json:"belongsToRecipeStep,omitempty"`
	CreatedAt           *string `json:"createdAt,omitempty"`
	ExternalPath        *string `json:"externalPath,omitempty"`
	Id                  *string `json:"id,omitempty"`
	Index               *int    `json:"index,omitempty"`
	InternalPath        *string `json:"internalPath,omitempty"`
	LastUpdatedAt       *string `json:"lastUpdatedAt,omitempty"`
	MimeType            *string `json:"mimeType,omitempty"`
}

// RecipePrepTask defines model for RecipePrepTask.
type RecipePrepTask struct {
	ArchivedAt                             *string               `json:"archivedAt,omitempty"`
	BelongsToRecipe                        *string               `json:"belongsToRecipe,omitempty"`
	CreatedAt                              *string               `json:"createdAt,omitempty"`
	Description                            *string               `json:"description,omitempty"`
	ExplicitStorageInstructions            *string               `json:"explicitStorageInstructions,omitempty"`
	Id                                     *string               `json:"id,omitempty"`
	LastUpdatedAt                          *string               `json:"lastUpdatedAt,omitempty"`
	MaximumStorageTemperatureInCelsius     *float32              `json:"maximumStorageTemperatureInCelsius,omitempty"`
	MaximumTimeBufferBeforeRecipeInSeconds *int                  `json:"maximumTimeBufferBeforeRecipeInSeconds,omitempty"`
	MinimumStorageTemperatureInCelsius     *float32              `json:"minimumStorageTemperatureInCelsius,omitempty"`
	MinimumTimeBufferBeforeRecipeInSeconds *int                  `json:"minimumTimeBufferBeforeRecipeInSeconds,omitempty"`
	Name                                   *string               `json:"name,omitempty"`
	Notes                                  *string               `json:"notes,omitempty"`
	Optional                               *bool                 `json:"optional,omitempty"`
	RecipeSteps                            *[]RecipePrepTaskStep `json:"recipeSteps,omitempty"`
	StorageType                            *string               `json:"storageType,omitempty"`
}

// RecipePrepTaskCreationRequestInput defines model for RecipePrepTaskCreationRequestInput.
type RecipePrepTaskCreationRequestInput struct {
	BelongsToRecipe                        *string                                   `json:"belongsToRecipe,omitempty"`
	Description                            *string                                   `json:"description,omitempty"`
	ExplicitStorageInstructions            *string                                   `json:"explicitStorageInstructions,omitempty"`
	MaximumStorageTemperatureInCelsius     *float32                                  `json:"maximumStorageTemperatureInCelsius,omitempty"`
	MaximumTimeBufferBeforeRecipeInSeconds *int                                      `json:"maximumTimeBufferBeforeRecipeInSeconds,omitempty"`
	MinimumStorageTemperatureInCelsius     *float32                                  `json:"minimumStorageTemperatureInCelsius,omitempty"`
	MinimumTimeBufferBeforeRecipeInSeconds *int                                      `json:"minimumTimeBufferBeforeRecipeInSeconds,omitempty"`
	Name                                   *string                                   `json:"name,omitempty"`
	Notes                                  *string                                   `json:"notes,omitempty"`
	Optional                               *bool                                     `json:"optional,omitempty"`
	RecipeSteps                            *[]RecipePrepTaskStepCreationRequestInput `json:"recipeSteps,omitempty"`
	StorageType                            *string                                   `json:"storageType,omitempty"`
}

// RecipePrepTaskStep defines model for RecipePrepTaskStep.
type RecipePrepTaskStep struct {
	BelongsToRecipeStep     *string `json:"belongsToRecipeStep,omitempty"`
	BelongsToRecipeStepTask *string `json:"belongsToRecipeStepTask,omitempty"`
	Id                      *string `json:"id,omitempty"`
	SatisfiesRecipeStep     *bool   `json:"satisfiesRecipeStep,omitempty"`
}

// RecipePrepTaskStepCreationRequestInput defines model for RecipePrepTaskStepCreationRequestInput.
type RecipePrepTaskStepCreationRequestInput struct {
	BelongsToRecipeStep *string `json:"belongsToRecipeStep,omitempty"`
	SatisfiesRecipeStep *bool   `json:"satisfiesRecipeStep,omitempty"`
}

// RecipePrepTaskStepUpdateRequestInput defines model for RecipePrepTaskStepUpdateRequestInput.
type RecipePrepTaskStepUpdateRequestInput struct {
	BelongsToRecipeStep     *string `json:"belongsToRecipeStep,omitempty"`
	BelongsToRecipeStepTask *string `json:"belongsToRecipeStepTask,omitempty"`
	SatisfiesRecipeStep     *bool   `json:"satisfiesRecipeStep,omitempty"`
}

// RecipePrepTaskStepWithinRecipeCreationRequestInput defines model for RecipePrepTaskStepWithinRecipeCreationRequestInput.
type RecipePrepTaskStepWithinRecipeCreationRequestInput struct {
	BelongsToRecipeStepIndex *int  `json:"belongsToRecipeStepIndex,omitempty"`
	SatisfiesRecipeStep      *bool `json:"satisfiesRecipeStep,omitempty"`
}

// RecipePrepTaskUpdateRequestInput defines model for RecipePrepTaskUpdateRequestInput.
type RecipePrepTaskUpdateRequestInput struct {
	BelongsToRecipe                        *string                                 `json:"belongsToRecipe,omitempty"`
	Description                            *string                                 `json:"description,omitempty"`
	ExplicitStorageInstructions            *string                                 `json:"explicitStorageInstructions,omitempty"`
	MaximumStorageTemperatureInCelsius     *float32                                `json:"maximumStorageTemperatureInCelsius,omitempty"`
	MaximumTimeBufferBeforeRecipeInSeconds *int                                    `json:"maximumTimeBufferBeforeRecipeInSeconds,omitempty"`
	MinimumStorageTemperatureInCelsius     *float32                                `json:"minimumStorageTemperatureInCelsius,omitempty"`
	MinimumTimeBufferBeforeRecipeInSeconds *int                                    `json:"minimumTimeBufferBeforeRecipeInSeconds,omitempty"`
	Name                                   *string                                 `json:"name,omitempty"`
	Notes                                  *string                                 `json:"notes,omitempty"`
	Optional                               *bool                                   `json:"optional,omitempty"`
	RecipeSteps                            *[]RecipePrepTaskStepUpdateRequestInput `json:"recipeSteps,omitempty"`
	StorageType                            *string                                 `json:"storageType,omitempty"`
}

// RecipePrepTaskWithinRecipeCreationRequestInput defines model for RecipePrepTaskWithinRecipeCreationRequestInput.
type RecipePrepTaskWithinRecipeCreationRequestInput struct {
	BelongsToRecipe                        *string                                               `json:"belongsToRecipe,omitempty"`
	Description                            *string                                               `json:"description,omitempty"`
	ExplicitStorageInstructions            *string                                               `json:"explicitStorageInstructions,omitempty"`
	MaximumStorageTemperatureInCelsius     *float32                                              `json:"maximumStorageTemperatureInCelsius,omitempty"`
	MaximumTimeBufferBeforeRecipeInSeconds *int                                                  `json:"maximumTimeBufferBeforeRecipeInSeconds,omitempty"`
	MinimumStorageTemperatureInCelsius     *float32                                              `json:"minimumStorageTemperatureInCelsius,omitempty"`
	MinimumTimeBufferBeforeRecipeInSeconds *int                                                  `json:"minimumTimeBufferBeforeRecipeInSeconds,omitempty"`
	Name                                   *string                                               `json:"name,omitempty"`
	Notes                                  *string                                               `json:"notes,omitempty"`
	Optional                               *bool                                                 `json:"optional,omitempty"`
	RecipeSteps                            *[]RecipePrepTaskStepWithinRecipeCreationRequestInput `json:"recipeSteps,omitempty"`
	StorageType                            *string                                               `json:"storageType,omitempty"`
}

// RecipeRating defines model for RecipeRating.
type RecipeRating struct {
	ArchivedAt    *string  `json:"archivedAt,omitempty"`
	ByUser        *string  `json:"byUser,omitempty"`
	Cleanup       *float32 `json:"cleanup,omitempty"`
	CreatedAt     *string  `json:"createdAt,omitempty"`
	Difficulty    *float32 `json:"difficulty,omitempty"`
	Id            *string  `json:"id,omitempty"`
	Instructions  *float32 `json:"instructions,omitempty"`
	LastUpdatedAt *string  `json:"lastUpdatedAt,omitempty"`
	Notes         *string  `json:"notes,omitempty"`
	Overall       *float32 `json:"overall,omitempty"`
	RecipeID      *string  `json:"recipeID,omitempty"`
	Taste         *float32 `json:"taste,omitempty"`
}

// RecipeRatingCreationRequestInput defines model for RecipeRatingCreationRequestInput.
type RecipeRatingCreationRequestInput struct {
	ByUser       *string  `json:"byUser,omitempty"`
	Cleanup      *float32 `json:"cleanup,omitempty"`
	Difficulty   *float32 `json:"difficulty,omitempty"`
	Instructions *float32 `json:"instructions,omitempty"`
	Notes        *string  `json:"notes,omitempty"`
	Overall      *float32 `json:"overall,omitempty"`
	RecipeID     *string  `json:"recipeID,omitempty"`
	Taste        *float32 `json:"taste,omitempty"`
}

// RecipeRatingUpdateRequestInput defines model for RecipeRatingUpdateRequestInput.
type RecipeRatingUpdateRequestInput struct {
	ByUser       *string  `json:"byUser,omitempty"`
	Cleanup      *float32 `json:"cleanup,omitempty"`
	Difficulty   *float32 `json:"difficulty,omitempty"`
	Instructions *float32 `json:"instructions,omitempty"`
	Notes        *string  `json:"notes,omitempty"`
	Overall      *float32 `json:"overall,omitempty"`
	RecipeID     *string  `json:"recipeID,omitempty"`
	Taste        *float32 `json:"taste,omitempty"`
}

// RecipeStep defines model for RecipeStep.
type RecipeStep struct {
	ArchivedAt                    *string                          `json:"archivedAt,omitempty"`
	BelongsToRecipe               *string                          `json:"belongsToRecipe,omitempty"`
	CompletionConditions          *[]RecipeStepCompletionCondition `json:"completionConditions,omitempty"`
	ConditionExpression           *string                          `json:"conditionExpression,omitempty"`
	CreatedAt                     *string                          `json:"createdAt,omitempty"`
	ExplicitInstructions          *string                          `json:"explicitInstructions,omitempty"`
	Id                            *string                          `json:"id,omitempty"`
	Index                         *int                             `json:"index,omitempty"`
	Ingredients                   *[]RecipeStepIngredient          `json:"ingredients,omitempty"`
	Instruments                   *[]RecipeStepInstrument          `json:"instruments,omitempty"`
	LastUpdatedAt                 *string                          `json:"lastUpdatedAt,omitempty"`
	MaximumEstimatedTimeInSeconds *int                             `json:"maximumEstimatedTimeInSeconds,omitempty"`
	MaximumTemperatureInCelsius   *float32                         `json:"maximumTemperatureInCelsius,omitempty"`
	Media                         *[]RecipeMedia                   `json:"media,omitempty"`
	MinimumEstimatedTimeInSeconds *int                             `json:"minimumEstimatedTimeInSeconds,omitempty"`
	MinimumTemperatureInCelsius   *float32                         `json:"minimumTemperatureInCelsius,omitempty"`
	Notes                         *string                          `json:"notes,omitempty"`
	Optional                      *bool                            `json:"optional,omitempty"`
	Preparation                   *ValidPreparation                `json:"preparation,omitempty"`
	Products                      *[]RecipeStepProduct             `json:"products,omitempty"`
	StartTimerAutomatically       *bool                            `json:"startTimerAutomatically,omitempty"`
	Vessels                       *[]RecipeStepVessel              `json:"vessels,omitempty"`
}

// RecipeStepCompletionCondition defines model for RecipeStepCompletionCondition.
type RecipeStepCompletionCondition struct {
	ArchivedAt          *string                                    `json:"archivedAt,omitempty"`
	BelongsToRecipeStep *string                                    `json:"belongsToRecipeStep,omitempty"`
	CreatedAt           *string                                    `json:"createdAt,omitempty"`
	Id                  *string                                    `json:"id,omitempty"`
	IngredientState     *ValidIngredientState                      `json:"ingredientState,omitempty"`
	Ingredients         *[]RecipeStepCompletionConditionIngredient `json:"ingredients,omitempty"`
	LastUpdatedAt       *string                                    `json:"lastUpdatedAt,omitempty"`
	Notes               *string                                    `json:"notes,omitempty"`
	Optional            *bool                                      `json:"optional,omitempty"`
}

// RecipeStepCompletionConditionCreationRequestInput defines model for RecipeStepCompletionConditionCreationRequestInput.
type RecipeStepCompletionConditionCreationRequestInput struct {
	BelongsToRecipeStep *string `json:"belongsToRecipeStep,omitempty"`
	IngredientState     *string `json:"ingredientState,omitempty"`
	Ingredients         *[]int  `json:"ingredients,omitempty"`
	Notes               *string `json:"notes,omitempty"`
	Optional            *bool   `json:"optional,omitempty"`
}

// RecipeStepCompletionConditionForExistingRecipeCreationRequestInput defines model for RecipeStepCompletionConditionForExistingRecipeCreationRequestInput.
type RecipeStepCompletionConditionForExistingRecipeCreationRequestInput struct {
	BelongsToRecipeStep *string                                                                         `json:"belongsToRecipeStep,omitempty"`
	IngredientState     *string                                                                         `json:"ingredientState,omitempty"`
	Ingredients         *[]RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput `json:"ingredients,omitempty"`
	Notes               *string                                                                         `json:"notes,omitempty"`
	Optional            *bool                                                                           `json:"optional,omitempty"`
}

// RecipeStepCompletionConditionIngredient defines model for RecipeStepCompletionConditionIngredient.
type RecipeStepCompletionConditionIngredient struct {
	ArchivedAt                             *string `json:"archivedAt,omitempty"`
	BelongsToRecipeStepCompletionCondition *string `json:"belongsToRecipeStepCompletionCondition,omitempty"`
	CreatedAt                              *string `json:"createdAt,omitempty"`
	Id                                     *string `json:"id,omitempty"`
	LastUpdatedAt                          *string `json:"lastUpdatedAt,omitempty"`
	RecipeStepIngredient                   *string `json:"recipeStepIngredient,omitempty"`
}

// RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput defines model for RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput.
type RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput struct {
	RecipeStepIngredient *string `json:"recipeStepIngredient,omitempty"`
}

// RecipeStepCompletionConditionUpdateRequestInput defines model for RecipeStepCompletionConditionUpdateRequestInput.
type RecipeStepCompletionConditionUpdateRequestInput struct {
	BelongsToRecipeStep *string `json:"belongsToRecipeStep,omitempty"`
	IngredientState     *string `json:"ingredientState,omitempty"`
	Notes               *string `json:"notes,omitempty"`
	Optional            *bool   `json:"optional,omitempty"`
}

// RecipeStepCreationRequestInput defines model for RecipeStepCreationRequestInput.
type RecipeStepCreationRequestInput struct {
	CompletionConditions          *[]RecipeStepCompletionConditionCreationRequestInput `json:"completionConditions,omitempty"`
	ConditionExpression           *string                                              `json:"conditionExpression,omitempty"`
	ExplicitInstructions          *string                                              `json:"explicitInstructions,omitempty"`
	Index                         *int                                                 `json:"index,omitempty"`
	Ingredients                   *[]RecipeStepIngredientCreationRequestInput          `json:"ingredients,omitempty"`
	Instruments                   *[]RecipeStepInstrumentCreationRequestInput          `json:"instruments,omitempty"`
	MaximumEstimatedTimeInSeconds *int                                                 `json:"maximumEstimatedTimeInSeconds,omitempty"`
	MaximumTemperatureInCelsius   *float32                                             `json:"maximumTemperatureInCelsius,omitempty"`
	MinimumEstimatedTimeInSeconds *int                                                 `json:"minimumEstimatedTimeInSeconds,omitempty"`
	MinimumTemperatureInCelsius   *float32                                             `json:"minimumTemperatureInCelsius,omitempty"`
	Notes                         *string                                              `json:"notes,omitempty"`
	Optional                      *bool                                                `json:"optional,omitempty"`
	PreparationID                 *string                                              `json:"preparationID,omitempty"`
	Products                      *[]RecipeStepProductCreationRequestInput             `json:"products,omitempty"`
	StartTimerAutomatically       *bool                                                `json:"startTimerAutomatically,omitempty"`
	Vessels                       *[]RecipeStepVesselCreationRequestInput              `json:"vessels,omitempty"`
}

// RecipeStepIngredient defines model for RecipeStepIngredient.
type RecipeStepIngredient struct {
	ArchivedAt             *string               `json:"archivedAt,omitempty"`
	BelongsToRecipeStep    *string               `json:"belongsToRecipeStep,omitempty"`
	CreatedAt              *string               `json:"createdAt,omitempty"`
	Id                     *string               `json:"id,omitempty"`
	Ingredient             *ValidIngredient      `json:"ingredient,omitempty"`
	IngredientNotes        *string               `json:"ingredientNotes,omitempty"`
	LastUpdatedAt          *string               `json:"lastUpdatedAt,omitempty"`
	MaximumQuantity        *float32              `json:"maximumQuantity,omitempty"`
	MeasurementUnit        *ValidMeasurementUnit `json:"measurementUnit,omitempty"`
	MinimumQuantity        *float32              `json:"minimumQuantity,omitempty"`
	Name                   *string               `json:"name,omitempty"`
	OptionIndex            *int                  `json:"optionIndex,omitempty"`
	Optional               *bool                 `json:"optional,omitempty"`
	ProductOfRecipeID      *string               `json:"productOfRecipeID,omitempty"`
	ProductPercentageToUse *float32              `json:"productPercentageToUse,omitempty"`
	QuantityNotes          *string               `json:"quantityNotes,omitempty"`
	RecipeStepProductID    *string               `json:"recipeStepProductID,omitempty"`
	ToTaste                *bool                 `json:"toTaste,omitempty"`
	VesselIndex            *int                  `json:"vesselIndex,omitempty"`
}

// RecipeStepIngredientCreationRequestInput defines model for RecipeStepIngredientCreationRequestInput.
type RecipeStepIngredientCreationRequestInput struct {
	IngredientID                    *string  `json:"ingredientID,omitempty"`
	IngredientNotes                 *string  `json:"ingredientNotes,omitempty"`
	MaximumQuantity                 *float32 `json:"maximumQuantity,omitempty"`
	MeasurementUnitID               *string  `json:"measurementUnitID,omitempty"`
	MinimumQuantity                 *float32 `json:"minimumQuantity,omitempty"`
	Name                            *string  `json:"name,omitempty"`
	OptionIndex                     *int     `json:"optionIndex,omitempty"`
	Optional                        *bool    `json:"optional,omitempty"`
	ProductOfRecipeID               *string  `json:"productOfRecipeID,omitempty"`
	ProductOfRecipeStepIndex        *int     `json:"productOfRecipeStepIndex,omitempty"`
	ProductOfRecipeStepProductIndex *int     `json:"productOfRecipeStepProductIndex,omitempty"`
	ProductPercentageToUse          *float32 `json:"productPercentageToUse,omitempty"`
	QuantityNotes                   *string  `json:"quantityNotes,omitempty"`
	ToTaste                         *bool    `json:"toTaste,omitempty"`
	VesselIndex                     *int     `json:"vesselIndex,omitempty"`
}

// RecipeStepIngredientUpdateRequestInput defines model for RecipeStepIngredientUpdateRequestInput.
type RecipeStepIngredientUpdateRequestInput struct {
	BelongsToRecipeStep    *string  `json:"belongsToRecipeStep,omitempty"`
	IngredientID           *string  `json:"ingredientID,omitempty"`
	IngredientNotes        *string  `json:"ingredientNotes,omitempty"`
	MaximumQuantity        *float32 `json:"maximumQuantity,omitempty"`
	MeasurementUnitID      *string  `json:"measurementUnitID,omitempty"`
	MinimumQuantity        *float32 `json:"minimumQuantity,omitempty"`
	Name                   *string  `json:"name,omitempty"`
	OptionIndex            *int     `json:"optionIndex,omitempty"`
	Optional               *bool    `json:"optional,omitempty"`
	ProductOfRecipeID      *string  `json:"productOfRecipeID,omitempty"`
	ProductPercentageToUse *float32 `json:"productPercentageToUse,omitempty"`
	QuantityNotes          *string  `json:"quantityNotes,omitempty"`
	RecipeStepProductID    *string  `json:"recipeStepProductID,omitempty"`
	ToTaste                *bool    `json:"toTaste,omitempty"`
	VesselIndex            *int     `json:"vesselIndex,omitempty"`
}

// RecipeStepInstrument defines model for RecipeStepInstrument.
type RecipeStepInstrument struct {
	ArchivedAt          *string          `json:"archivedAt,omitempty"`
	BelongsToRecipeStep *string          `json:"belongsToRecipeStep,omitempty"`
	CreatedAt           *string          `json:"createdAt,omitempty"`
	Id                  *string          `json:"id,omitempty"`
	Instrument          *ValidInstrument `json:"instrument,omitempty"`
	LastUpdatedAt       *string          `json:"lastUpdatedAt,omitempty"`
	MaximumQuantity     *int             `json:"maximumQuantity,omitempty"`
	MinimumQuantity     *int             `json:"minimumQuantity,omitempty"`
	Name                *string          `json:"name,omitempty"`
	Notes               *string          `json:"notes,omitempty"`
	OptionIndex         *int             `json:"optionIndex,omitempty"`
	Optional            *bool            `json:"optional,omitempty"`
	PreferenceRank      *int             `json:"preferenceRank,omitempty"`
	RecipeStepProductID *string          `json:"recipeStepProductID,omitempty"`
}

// RecipeStepInstrumentCreationRequestInput defines model for RecipeStepInstrumentCreationRequestInput.
type RecipeStepInstrumentCreationRequestInput struct {
	InstrumentID                    *string `json:"instrumentID,omitempty"`
	MaximumQuantity                 *int    `json:"maximumQuantity,omitempty"`
	MinimumQuantity                 *int    `json:"minimumQuantity,omitempty"`
	Name                            *string `json:"name,omitempty"`
	Notes                           *string `json:"notes,omitempty"`
	OptionIndex                     *int    `json:"optionIndex,omitempty"`
	Optional                        *bool   `json:"optional,omitempty"`
	PreferenceRank                  *int    `json:"preferenceRank,omitempty"`
	ProductOfRecipeStepIndex        *int    `json:"productOfRecipeStepIndex,omitempty"`
	ProductOfRecipeStepProductIndex *int    `json:"productOfRecipeStepProductIndex,omitempty"`
	RecipeStepProductID             *string `json:"recipeStepProductID,omitempty"`
}

// RecipeStepInstrumentUpdateRequestInput defines model for RecipeStepInstrumentUpdateRequestInput.
type RecipeStepInstrumentUpdateRequestInput struct {
	BelongsToRecipeStep *string `json:"belongsToRecipeStep,omitempty"`
	InstrumentID        *string `json:"instrumentID,omitempty"`
	MaximumQuantity     *int    `json:"maximumQuantity,omitempty"`
	MinimumQuantity     *int    `json:"minimumQuantity,omitempty"`
	Name                *string `json:"name,omitempty"`
	Notes               *string `json:"notes,omitempty"`
	OptionIndex         *int    `json:"optionIndex,omitempty"`
	Optional            *bool   `json:"optional,omitempty"`
	PreferenceRank      *int    `json:"preferenceRank,omitempty"`
	RecipeStepProductID *string `json:"recipeStepProductID,omitempty"`
}

// RecipeStepProduct defines model for RecipeStepProduct.
type RecipeStepProduct struct {
	ArchivedAt                         *string               `json:"archivedAt,omitempty"`
	BelongsToRecipeStep                *string               `json:"belongsToRecipeStep,omitempty"`
	Compostable                        *bool                 `json:"compostable,omitempty"`
	ContainedInVesselIndex             *int                  `json:"containedInVesselIndex,omitempty"`
	CreatedAt                          *string               `json:"createdAt,omitempty"`
	Id                                 *string               `json:"id,omitempty"`
	Index                              *int                  `json:"index,omitempty"`
	IsLiquid                           *bool                 `json:"isLiquid,omitempty"`
	IsWaste                            *bool                 `json:"isWaste,omitempty"`
	LastUpdatedAt                      *string               `json:"lastUpdatedAt,omitempty"`
	MaximumQuantity                    *float32              `json:"maximumQuantity,omitempty"`
	MaximumStorageDurationInSeconds    *int                  `json:"maximumStorageDurationInSeconds,omitempty"`
	MaximumStorageTemperatureInCelsius *float32              `json:"maximumStorageTemperatureInCelsius,omitempty"`
	MeasurementUnit                    *ValidMeasurementUnit `json:"measurementUnit,omitempty"`
	MinimumQuantity                    *float32              `json:"minimumQuantity,omitempty"`
	MinimumStorageTemperatureInCelsius *float32              `json:"minimumStorageTemperatureInCelsius,omitempty"`
	Name                               *string               `json:"name,omitempty"`
	QuantityNotes                      *string               `json:"quantityNotes,omitempty"`
	StorageInstructions                *string               `json:"storageInstructions,omitempty"`
	Type                               *string               `json:"type,omitempty"`
}

// RecipeStepProductCreationRequestInput defines model for RecipeStepProductCreationRequestInput.
type RecipeStepProductCreationRequestInput struct {
	Compostable                        *bool    `json:"compostable,omitempty"`
	ContainedInVesselIndex             *int     `json:"containedInVesselIndex,omitempty"`
	Index                              *int     `json:"index,omitempty"`
	IsLiquid                           *bool    `json:"isLiquid,omitempty"`
	IsWaste                            *bool    `json:"isWaste,omitempty"`
	MaximumQuantity                    *float32 `json:"maximumQuantity,omitempty"`
	MaximumStorageDurationInSeconds    *int     `json:"maximumStorageDurationInSeconds,omitempty"`
	MaximumStorageTemperatureInCelsius *float32 `json:"maximumStorageTemperatureInCelsius,omitempty"`
	MeasurementUnitID                  *string  `json:"measurementUnitID,omitempty"`
	MinimumQuantity                    *float32 `json:"minimumQuantity,omitempty"`
	MinimumStorageTemperatureInCelsius *float32 `json:"minimumStorageTemperatureInCelsius,omitempty"`
	Name                               *string  `json:"name,omitempty"`
	QuantityNotes                      *string  `json:"quantityNotes,omitempty"`
	StorageInstructions                *string  `json:"storageInstructions,omitempty"`
	Type                               *string  `json:"type,omitempty"`
}

// RecipeStepProductUpdateRequestInput defines model for RecipeStepProductUpdateRequestInput.
type RecipeStepProductUpdateRequestInput struct {
	BelongsToRecipeStep                *string  `json:"belongsToRecipeStep,omitempty"`
	Compostable                        *bool    `json:"compostable,omitempty"`
	ContainedInVesselIndex             *int     `json:"containedInVesselIndex,omitempty"`
	Index                              *int     `json:"index,omitempty"`
	IsLiquid                           *bool    `json:"isLiquid,omitempty"`
	IsWaste                            *bool    `json:"isWaste,omitempty"`
	MaximumQuantity                    *float32 `json:"maximumQuantity,omitempty"`
	MaximumStorageDurationInSeconds    *int     `json:"maximumStorageDurationInSeconds,omitempty"`
	MaximumStorageTemperatureInCelsius *float32 `json:"maximumStorageTemperatureInCelsius,omitempty"`
	MeasurementUnitID                  *string  `json:"measurementUnitID,omitempty"`
	MinimumQuantity                    *float32 `json:"minimumQuantity,omitempty"`
	MinimumStorageTemperatureInCelsius *float32 `json:"minimumStorageTemperatureInCelsius,omitempty"`
	Name                               *string  `json:"name,omitempty"`
	QuantityNotes                      *string  `json:"quantityNotes,omitempty"`
	StorageInstructions                *string  `json:"storageInstructions,omitempty"`
	Type                               *string  `json:"type,omitempty"`
}

// RecipeStepUpdateRequestInput defines model for RecipeStepUpdateRequestInput.
type RecipeStepUpdateRequestInput struct {
	BelongsToRecipe               *string           `json:"belongsToRecipe,omitempty"`
	ConditionExpression           *string           `json:"conditionExpression,omitempty"`
	ExplicitInstructions          *string           `json:"explicitInstructions,omitempty"`
	Index                         *int              `json:"index,omitempty"`
	MaximumEstimatedTimeInSeconds *int              `json:"maximumEstimatedTimeInSeconds,omitempty"`
	MaximumTemperatureInCelsius   *float32          `json:"maximumTemperatureInCelsius,omitempty"`
	MinimumEstimatedTimeInSeconds *int              `json:"minimumEstimatedTimeInSeconds,omitempty"`
	MinimumTemperatureInCelsius   *float32          `json:"minimumTemperatureInCelsius,omitempty"`
	Notes                         *string           `json:"notes,omitempty"`
	Optional                      *bool             `json:"optional,omitempty"`
	Preparation                   *ValidPreparation `json:"preparation,omitempty"`
	StartTimerAutomatically       *bool             `json:"startTimerAutomatically,omitempty"`
}

// RecipeStepVessel defines model for RecipeStepVessel.
type RecipeStepVessel struct {
	ArchivedAt           *string      `json:"archivedAt,omitempty"`
	BelongsToRecipeStep  *string      `json:"belongsToRecipeStep,omitempty"`
	CreatedAt            *string      `json:"createdAt,omitempty"`
	Id                   *string      `json:"id,omitempty"`
	LastUpdatedAt        *string      `json:"lastUpdatedAt,omitempty"`
	MaximumQuantity      *int         `json:"maximumQuantity,omitempty"`
	MinimumQuantity      *int         `json:"minimumQuantity,omitempty"`
	Name                 *string      `json:"name,omitempty"`
	Notes                *string      `json:"notes,omitempty"`
	RecipeStepProductID  *string      `json:"recipeStepProductID,omitempty"`
	UnavailableAfterStep *bool        `json:"unavailableAfterStep,omitempty"`
	Vessel               *ValidVessel `json:"vessel,omitempty"`
	VesselPreposition    *string      `json:"vesselPreposition,omitempty"`
}

// RecipeStepVesselCreationRequestInput defines model for RecipeStepVesselCreationRequestInput.
type RecipeStepVesselCreationRequestInput struct {
	MaximumQuantity                 *int    `json:"maximumQuantity,omitempty"`
	MinimumQuantity                 *int    `json:"minimumQuantity,omitempty"`
	Name                            *string `json:"name,omitempty"`
	Notes                           *string `json:"notes,omitempty"`
	ProductOfRecipeStepIndex        *int    `json:"productOfRecipeStepIndex,omitempty"`
	ProductOfRecipeStepProductIndex *int    `json:"productOfRecipeStepProductIndex,omitempty"`
	RecipeStepProductID             *string `json:"recipeStepProductID,omitempty"`
	UnavailableAfterStep            *bool   `json:"unavailableAfterStep,omitempty"`
	VesselID                        *string `json:"vesselID,omitempty"`
	VesselPreposition               *string `json:"vesselPreposition,omitempty"`
}

// RecipeStepVesselUpdateRequestInput defines model for RecipeStepVesselUpdateRequestInput.
type RecipeStepVesselUpdateRequestInput struct {
	BelongsToRecipeStep  *string `json:"belongsToRecipeStep,omitempty"`
	MaximumQuantity      *int    `json:"maximumQuantity,omitempty"`
	MinimumQuantity      *int    `json:"minimumQuantity,omitempty"`
	Name                 *string `json:"name,omitempty"`
	Notes                *string `json:"notes,omitempty"`
	RecipeStepProductID  *string `json:"recipeStepProductID,omitempty"`
	UnavailableAfterStep *bool   `json:"unavailableAfterStep,omitempty"`
	VesselID             *string `json:"vesselID,omitempty"`
	VesselPreposition    *string `json:"vesselPreposition,omitempty"`
}

// RecipeUpdateRequestInput defines model for RecipeUpdateRequestInput.
type RecipeUpdateRequestInput struct {
	Description              *string  `json:"description,omitempty"`
	EligibleForMeals         *bool    `json:"eligibleForMeals,omitempty"`
	InspiredByRecipeID       *string  `json:"inspiredByRecipeID,omitempty"`
	MaximumEstimatedPortions *float32 `json:"maximumEstimatedPortions,omitempty"`
	MinimumEstimatedPortions *float32 `json:"minimumEstimatedPortions,omitempty"`
	Name                     *string  `json:"name,omitempty"`
	PluralPortionName        *string  `json:"pluralPortionName,omitempty"`
	PortionName              *string  `json:"portionName,omitempty"`
	SealOfApproval           *bool    `json:"sealOfApproval,omitempty"`
	Slug                     *string  `json:"slug,omitempty"`
	Source                   *string  `json:"source,omitempty"`
	YieldsComponentType      *string  `json:"yieldsComponentType,omitempty"`
}

// ResponseDetails defines model for ResponseDetails.
type ResponseDetails struct {
	CurrentHouseholdID *string `json:"currentHouseholdID,omitempty"`
	TraceID            *string `json:"traceID,omitempty"`
}

// ServiceSetting defines model for ServiceSetting.
type ServiceSetting struct {
	AdminsOnly    *bool     `json:"adminsOnly,omitempty"`
	ArchivedAt    *string   `json:"archivedAt,omitempty"`
	CreatedAt     *string   `json:"createdAt,omitempty"`
	DefaultValue  *string   `json:"defaultValue,omitempty"`
	Description   *string   `json:"description,omitempty"`
	Enumeration   *[]string `json:"enumeration,omitempty"`
	Id            *string   `json:"id,omitempty"`
	LastUpdatedAt *string   `json:"lastUpdatedAt,omitempty"`
	Name          *string   `json:"name,omitempty"`
	Type          *string   `json:"type,omitempty"`
}

// ServiceSettingConfiguration defines model for ServiceSettingConfiguration.
type ServiceSettingConfiguration struct {
	ArchivedAt         *string         `json:"archivedAt,omitempty"`
	BelongsToHousehold *string         `json:"belongsToHousehold,omitempty"`
	BelongsToUser      *string         `json:"belongsToUser,omitempty"`
	CreatedAt          *string         `json:"createdAt,omitempty"`
	Id                 *string         `json:"id,omitempty"`
	LastUpdatedAt      *string         `json:"lastUpdatedAt,omitempty"`
	Notes              *string         `json:"notes,omitempty"`
	ServiceSetting     *ServiceSetting `json:"serviceSetting,omitempty"`
	Value              *string         `json:"value,omitempty"`
}

// ServiceSettingConfigurationCreationRequestInput defines model for ServiceSettingConfigurationCreationRequestInput.
type ServiceSettingConfigurationCreationRequestInput struct {
	BelongsToHousehold *string `json:"belongsToHousehold,omitempty"`
	BelongsToUser      *string `json:"belongsToUser,omitempty"`
	Notes              *string `json:"notes,omitempty"`
	ServiceSettingID   *string `json:"serviceSettingID,omitempty"`
	Value              *string `json:"value,omitempty"`
}

// ServiceSettingConfigurationUpdateRequestInput defines model for ServiceSettingConfigurationUpdateRequestInput.
type ServiceSettingConfigurationUpdateRequestInput struct {
	BelongsToHousehold *string `json:"belongsToHousehold,omitempty"`
	BelongsToUser      *string `json:"belongsToUser,omitempty"`
	Notes              *string `json:"notes,omitempty"`
	ServiceSettingID   *string `json:"serviceSettingID,omitempty"`
	Value              *string `json:"value,omitempty"`
}

// ServiceSettingCreationRequestInput defines model for ServiceSettingCreationRequestInput.
type ServiceSettingCreationRequestInput struct {
	AdminsOnly   *bool     `json:"adminsOnly,omitempty"`
	DefaultValue *string   `json:"defaultValue,omitempty"`
	Description  *string   `json:"description,omitempty"`
	Enumeration  *[]string `json:"enumeration,omitempty"`
	Name         *string   `json:"name,omitempty"`
	Type         *string   `json:"type,omitempty"`
}

// TOTPSecretRefreshInput defines model for TOTPSecretRefreshInput.
type TOTPSecretRefreshInput struct {
	CurrentPassword *string `json:"currentPassword,omitempty"`
	TotpToken       *string `json:"totpToken,omitempty"`
}

// TOTPSecretRefreshResponse defines model for TOTPSecretRefreshResponse.
type TOTPSecretRefreshResponse struct {
	QrCode          *string `json:"qrCode,omitempty"`
	TwoFactorSecret *string `json:"twoFactorSecret,omitempty"`
}

// TOTPSecretVerificationInput defines model for TOTPSecretVerificationInput.
type TOTPSecretVerificationInput struct {
	TotpToken *string `json:"totpToken,omitempty"`
	UserID    *string `json:"userID,omitempty"`
}

// User defines model for User.
type User struct {
	AccountStatus             *string `json:"accountStatus,omitempty"`
	AccountStatusExplanation  *string `json:"accountStatusExplanation,omitempty"`
	ArchivedAt                *string `json:"archivedAt,omitempty"`
	Avatar                    *string `json:"avatar,omitempty"`
	Birthday                  *string `json:"birthday,omitempty"`
	CreatedAt                 *string `json:"createdAt,omitempty"`
	EmailAddress              *string `json:"emailAddress,omitempty"`
	EmailAddressVerifiedAt    *string `json:"emailAddressVerifiedAt,omitempty"`
	FirstName                 *string `json:"firstName,omitempty"`
	Id                        *string `json:"id,omitempty"`
	LastAcceptedPrivacyPolicy *string `json:"lastAcceptedPrivacyPolicy,omitempty"`
	LastAcceptedTOS           *string `json:"lastAcceptedTOS,omitempty"`
	LastName                  *string `json:"lastName,omitempty"`
	LastUpdatedAt             *string `json:"lastUpdatedAt,omitempty"`
	PasswordLastChangedAt     *string `json:"passwordLastChangedAt,omitempty"`
	RequiresPasswordChange    *bool   `json:"requiresPasswordChange,omitempty"`
	ServiceRoles              *string `json:"serviceRoles,omitempty"`
	TwoFactorSecretVerifiedAt *string `json:"twoFactorSecretVerifiedAt,omitempty"`
	Username                  *string `json:"username,omitempty"`
}

// UserAccountStatusUpdateInput defines model for UserAccountStatusUpdateInput.
type UserAccountStatusUpdateInput struct {
	NewStatus    *string `json:"newStatus,omitempty"`
	Reason       *string `json:"reason,omitempty"`
	TargetUserID *string `json:"targetUserID,omitempty"`
}

// UserCreationResponse defines model for UserCreationResponse.
type UserCreationResponse struct {
	AccountStatus   *string `json:"accountStatus,omitempty"`
	Avatar          *string `json:"avatar,omitempty"`
	Birthday        *string `json:"birthday,omitempty"`
	CreatedAt       *string `json:"createdAt,omitempty"`
	CreatedUserID   *string `json:"createdUserID,omitempty"`
	EmailAddress    *string `json:"emailAddress,omitempty"`
	FirstName       *string `json:"firstName,omitempty"`
	IsAdmin         *bool   `json:"isAdmin,omitempty"`
	LastName        *string `json:"lastName,omitempty"`
	QrCode          *string `json:"qrCode,omitempty"`
	TwoFactorSecret *string `json:"twoFactorSecret,omitempty"`
	Username        *string `json:"username,omitempty"`
}

// UserDetailsUpdateRequestInput defines model for UserDetailsUpdateRequestInput.
type UserDetailsUpdateRequestInput struct {
	Birthday        *string `json:"birthday,omitempty"`
	CurrentPassword *string `json:"currentPassword,omitempty"`
	FirstName       *string `json:"firstName,omitempty"`
	LastName        *string `json:"lastName,omitempty"`
	TotpToken       *string `json:"totpToken,omitempty"`
}

// UserEmailAddressUpdateInput defines model for UserEmailAddressUpdateInput.
type UserEmailAddressUpdateInput struct {
	CurrentPassword *string `json:"currentPassword,omitempty"`
	NewEmailAddress *string `json:"newEmailAddress,omitempty"`
	TotpToken       *string `json:"totpToken,omitempty"`
}

// UserIngredientPreference defines model for UserIngredientPreference.
type UserIngredientPreference struct {
	Allergy       *bool            `json:"allergy,omitempty"`
	ArchivedAt    *string          `json:"archivedAt,omitempty"`
	BelongsToUser *string          `json:"belongsToUser,omitempty"`
	CreatedAt     *string          `json:"createdAt,omitempty"`
	Id            *string          `json:"id,omitempty"`
	Ingredient    *ValidIngredient `json:"ingredient,omitempty"`
	LastUpdatedAt *string          `json:"lastUpdatedAt,omitempty"`
	Notes         *string          `json:"notes,omitempty"`
	Rating        *int             `json:"rating,omitempty"`
}

// UserIngredientPreferenceCreationRequestInput defines model for UserIngredientPreferenceCreationRequestInput.
type UserIngredientPreferenceCreationRequestInput struct {
	Allergy                *bool   `json:"allergy,omitempty"`
	Notes                  *string `json:"notes,omitempty"`
	Rating                 *int    `json:"rating,omitempty"`
	ValidIngredientGroupID *string `json:"validIngredientGroupID,omitempty"`
	ValidIngredientID      *string `json:"validIngredientID,omitempty"`
}

// UserIngredientPreferenceUpdateRequestInput defines model for UserIngredientPreferenceUpdateRequestInput.
type UserIngredientPreferenceUpdateRequestInput struct {
	Allergy      *bool   `json:"allergy,omitempty"`
	IngredientID *string `json:"ingredientID,omitempty"`
	Notes        *string `json:"notes,omitempty"`
	Rating       *int    `json:"rating,omitempty"`
}

// UserLoginInput defines model for UserLoginInput.
type UserLoginInput struct {
	Password  *string `json:"password,omitempty"`
	TotpToken *string `json:"totpToken,omitempty"`
	Username  *string `json:"username,omitempty"`
}

// UserNotification defines model for UserNotification.
type UserNotification struct {
	BelongsToUser *string `json:"belongsToUser,omitempty"`
	Content       *string `json:"content,omitempty"`
	CreatedAt     *string `json:"createdAt,omitempty"`
	Id            *string `json:"id,omitempty"`
	LastUpdatedAt *string `json:"lastUpdatedAt,omitempty"`
	Status        *string `json:"status,omitempty"`
}

// UserNotificationCreationRequestInput defines model for UserNotificationCreationRequestInput.
type UserNotificationCreationRequestInput struct {
	BelongsToUser *string `json:"belongsToUser,omitempty"`
	Content       *string `json:"content,omitempty"`
	Status        *string `json:"status,omitempty"`
}

// UserNotificationUpdateRequestInput defines model for UserNotificationUpdateRequestInput.
type UserNotificationUpdateRequestInput struct {
	Status *string `json:"status,omitempty"`
}

// UserPermissionsRequestInput defines model for UserPermissionsRequestInput.
type UserPermissionsRequestInput struct {
	Permissions *[]string `json:"permissions,omitempty"`
}

// UserPermissionsResponse defines model for UserPermissionsResponse.
type UserPermissionsResponse struct {
	Permissions *map[string]interface{} `json:"permissions,omitempty"`
}

// UserRegistrationInput defines model for UserRegistrationInput.
type UserRegistrationInput struct {
	AcceptedPrivacyPolicy *bool   `json:"acceptedPrivacyPolicy,omitempty"`
	AcceptedTOS           *bool   `json:"acceptedTOS,omitempty"`
	Birthday              *string `json:"birthday,omitempty"`
	EmailAddress          *string `json:"emailAddress,omitempty"`
	FirstName             *string `json:"firstName,omitempty"`
	HouseholdName         *string `json:"householdName,omitempty"`
	InvitationID          *string `json:"invitationID,omitempty"`
	InvitationToken       *string `json:"invitationToken,omitempty"`
	LastName              *string `json:"lastName,omitempty"`
	Password              *string `json:"password,omitempty"`
	Username              *string `json:"username,omitempty"`
}

// UserStatusResponse defines model for UserStatusResponse.
type UserStatusResponse struct {
	AccountStatus            *string `json:"accountStatus,omitempty"`
	AccountStatusExplanation *string `json:"accountStatusExplanation,omitempty"`
	ActiveHousehold          *string `json:"activeHousehold,omitempty"`
	IsAuthenticated          *bool   `json:"isAuthenticated,omitempty"`
	UserID                   *string `json:"userID,omitempty"`
}

// UsernameReminderRequestInput defines model for UsernameReminderRequestInput.
type UsernameReminderRequestInput struct {
	EmailAddress *string `json:"emailAddress,omitempty"`
}

// UsernameUpdateInput defines model for UsernameUpdateInput.
type UsernameUpdateInput struct {
	CurrentPassword *string `json:"currentPassword,omitempty"`
	NewUsername     *string `json:"newUsername,omitempty"`
	TotpToken       *string `json:"totpToken,omitempty"`
}

// ValidIngredient defines model for ValidIngredient.
type ValidIngredient struct {
	AnimalDerived                           *bool    `json:"animalDerived,omitempty"`
	AnimalFlesh                             *bool    `json:"animalFlesh,omitempty"`
	ArchivedAt                              *string  `json:"archivedAt,omitempty"`
	ContainsAlcohol                         *bool    `json:"containsAlcohol,omitempty"`
	ContainsDairy                           *bool    `json:"containsDairy,omitempty"`
	ContainsEgg                             *bool    `json:"containsEgg,omitempty"`
	ContainsFish                            *bool    `json:"containsFish,omitempty"`
	ContainsGluten                          *bool    `json:"containsGluten,omitempty"`
	ContainsPeanut                          *bool    `json:"containsPeanut,omitempty"`
	ContainsSesame                          *bool    `json:"containsSesame,omitempty"`
	ContainsShellfish                       *bool    `json:"containsShellfish,omitempty"`
	ContainsSoy                             *bool    `json:"containsSoy,omitempty"`
	ContainsTreeNut                         *bool    `json:"containsTreeNut,omitempty"`
	ContainsWheat                           *bool    `json:"containsWheat,omitempty"`
	CreatedAt                               *string  `json:"createdAt,omitempty"`
	Description                             *string  `json:"description,omitempty"`
	IconPath                                *string  `json:"iconPath,omitempty"`
	Id                                      *string  `json:"id,omitempty"`
	IsAcid                                  *bool    `json:"isAcid,omitempty"`
	IsFat                                   *bool    `json:"isFat,omitempty"`
	IsFruit                                 *bool    `json:"isFruit,omitempty"`
	IsGrain                                 *bool    `json:"isGrain,omitempty"`
	IsHeat                                  *bool    `json:"isHeat,omitempty"`
	IsLiquid                                *bool    `json:"isLiquid,omitempty"`
	IsMeasuredVolumetrically                *bool    `json:"isMeasuredVolumetrically,omitempty"`
	IsProtein                               *bool    `json:"isProtein,omitempty"`
	IsSalt                                  *bool    `json:"isSalt,omitempty"`
	IsStarch                                *bool    `json:"isStarch,omitempty"`
	LastUpdatedAt                           *string  `json:"lastUpdatedAt,omitempty"`
	MaximumIdealStorageTemperatureInCelsius *float32 `json:"maximumIdealStorageTemperatureInCelsius,omitempty"`
	MinimumIdealStorageTemperatureInCelsius *float32 `json:"minimumIdealStorageTemperatureInCelsius,omitempty"`
	Name                                    *string  `json:"name,omitempty"`
	PluralName                              *string  `json:"pluralName,omitempty"`
	RestrictToPreparations                  *bool    `json:"restrictToPreparations,omitempty"`
	ShoppingSuggestions                     *string  `json:"shoppingSuggestions,omitempty"`
	Slug                                    *string  `json:"slug,omitempty"`
	StorageInstructions                     *string  `json:"storageInstructions,omitempty"`
	Warning                                 *string  `json:"warning,omitempty"`
}

// ValidIngredientCreationRequestInput defines model for ValidIngredientCreationRequestInput.
type ValidIngredientCreationRequestInput struct {
	AnimalDerived                           *bool    `json:"animalDerived,omitempty"`
	AnimalFlesh                             *bool    `json:"animalFlesh,omitempty"`
	ContainsAlcohol                         *bool    `json:"containsAlcohol,omitempty"`
	ContainsDairy                           *bool    `json:"containsDairy,omitempty"`
	ContainsEgg                             *bool    `json:"containsEgg,omitempty"`
	ContainsFish                            *bool    `json:"containsFish,omitempty"`
	ContainsGluten                          *bool    `json:"containsGluten,omitempty"`
	ContainsPeanut                          *bool    `json:"containsPeanut,omitempty"`
	ContainsSesame                          *bool    `json:"containsSesame,omitempty"`
	ContainsShellfish                       *bool    `json:"containsShellfish,omitempty"`
	ContainsSoy                             *bool    `json:"containsSoy,omitempty"`
	ContainsTreeNut                         *bool    `json:"containsTreeNut,omitempty"`
	ContainsWheat                           *bool    `json:"containsWheat,omitempty"`
	Description                             *string  `json:"description,omitempty"`
	IconPath                                *string  `json:"iconPath,omitempty"`
	IsAcid                                  *bool    `json:"isAcid,omitempty"`
	IsFat                                   *bool    `json:"isFat,omitempty"`
	IsFruit                                 *bool    `json:"isFruit,omitempty"`
	IsGrain                                 *bool    `json:"isGrain,omitempty"`
	IsHeat                                  *bool    `json:"isHeat,omitempty"`
	IsLiquid                                *bool    `json:"isLiquid,omitempty"`
	IsMeasuredVolumetrically                *bool    `json:"isMeasuredVolumetrically,omitempty"`
	IsProtein                               *bool    `json:"isProtein,omitempty"`
	IsSalt                                  *bool    `json:"isSalt,omitempty"`
	IsStarch                                *bool    `json:"isStarch,omitempty"`
	MaximumIdealStorageTemperatureInCelsius *float32 `json:"maximumIdealStorageTemperatureInCelsius,omitempty"`
	MinimumIdealStorageTemperatureInCelsius *float32 `json:"minimumIdealStorageTemperatureInCelsius,omitempty"`
	Name                                    *string  `json:"name,omitempty"`
	PluralName                              *string  `json:"pluralName,omitempty"`
	RestrictToPreparations                  *bool    `json:"restrictToPreparations,omitempty"`
	ShoppingSuggestions                     *string  `json:"shoppingSuggestions,omitempty"`
	Slug                                    *string  `json:"slug,omitempty"`
	StorageInstructions                     *string  `json:"storageInstructions,omitempty"`
	Warning                                 *string  `json:"warning,omitempty"`
}

// ValidIngredientGroup defines model for ValidIngredientGroup.
type ValidIngredientGroup struct {
	ArchivedAt    *string                       `json:"archivedAt,omitempty"`
	CreatedAt     *string                       `json:"createdAt,omitempty"`
	Description   *string                       `json:"description,omitempty"`
	Id            *string                       `json:"id,omitempty"`
	LastUpdatedAt *string                       `json:"lastUpdatedAt,omitempty"`
	Members       *[]ValidIngredientGroupMember `json:"members,omitempty"`
	Name          *string                       `json:"name,omitempty"`
	Slug          *string                       `json:"slug,omitempty"`
}

// ValidIngredientGroupCreationRequestInput defines model for ValidIngredientGroupCreationRequestInput.
type ValidIngredientGroupCreationRequestInput struct {
	Description *string                                           `json:"description,omitempty"`
	Members     *[]ValidIngredientGroupMemberCreationRequestInput `json:"members,omitempty"`
	Name        *string                                           `json:"name,omitempty"`
	Slug        *string                                           `json:"slug,omitempty"`
}

// ValidIngredientGroupMember defines model for ValidIngredientGroupMember.
type ValidIngredientGroupMember struct {
	ArchivedAt      *string          `json:"archivedAt,omitempty"`
	BelongsToGroup  *string          `json:"belongsToGroup,omitempty"`
	CreatedAt       *string          `json:"createdAt,omitempty"`
	Id              *string          `json:"id,omitempty"`
	ValidIngredient *ValidIngredient `json:"validIngredient,omitempty"`
}

// ValidIngredientGroupMemberCreationRequestInput defines model for ValidIngredientGroupMemberCreationRequestInput.
type ValidIngredientGroupMemberCreationRequestInput struct {
	ValidIngredientID *string `json:"validIngredientID,omitempty"`
}

// ValidIngredientGroupUpdateRequestInput defines model for ValidIngredientGroupUpdateRequestInput.
type ValidIngredientGroupUpdateRequestInput struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	Slug        *string `json:"slug,omitempty"`
}

// ValidIngredientMeasurementUnit defines model for ValidIngredientMeasurementUnit.
type ValidIngredientMeasurementUnit struct {
	ArchivedAt               *string               `json:"archivedAt,omitempty"`
	CreatedAt                *string               `json:"createdAt,omitempty"`
	Id                       *string               `json:"id,omitempty"`
	Ingredient               *ValidIngredient      `json:"ingredient,omitempty"`
	LastUpdatedAt            *string               `json:"lastUpdatedAt,omitempty"`
	MaximumAllowableQuantity *float32              `json:"maximumAllowableQuantity,omitempty"`
	MeasurementUnit          *ValidMeasurementUnit `json:"measurementUnit,omitempty"`
	MinimumAllowableQuantity *float32              `json:"minimumAllowableQuantity,omitempty"`
	Notes                    *string               `json:"notes,omitempty"`
}

// ValidIngredientMeasurementUnitCreationRequestInput defines model for ValidIngredientMeasurementUnitCreationRequestInput.
type ValidIngredientMeasurementUnitCreationRequestInput struct {
	MaximumAllowableQuantity *float32 `json:"maximumAllowableQuantity,omitempty"`
	MinimumAllowableQuantity *float32 `json:"minimumAllowableQuantity,omitempty"`
	Notes                    *string  `json:"notes,omitempty"`
	ValidIngredientID        *string  `json:"validIngredientID,omitempty"`
	ValidMeasurementUnitID   *string  `json:"validMeasurementUnitID,omitempty"`
}

// ValidIngredientMeasurementUnitUpdateRequestInput defines model for ValidIngredientMeasurementUnitUpdateRequestInput.
type ValidIngredientMeasurementUnitUpdateRequestInput struct {
	MaximumAllowableQuantity *float32 `json:"maximumAllowableQuantity,omitempty"`
	MinimumAllowableQuantity *float32 `json:"minimumAllowableQuantity,omitempty"`
	Notes                    *string  `json:"notes,omitempty"`
	ValidIngredientID        *string  `json:"validIngredientID,omitempty"`
	ValidMeasurementUnitID   *string  `json:"validMeasurementUnitID,omitempty"`
}

// ValidIngredientPreparation defines model for ValidIngredientPreparation.
type ValidIngredientPreparation struct {
	ArchivedAt    *string           `json:"archivedAt,omitempty"`
	CreatedAt     *string           `json:"createdAt,omitempty"`
	Id            *string           `json:"id,omitempty"`
	Ingredient    *ValidIngredient  `json:"ingredient,omitempty"`
	LastUpdatedAt *string           `json:"lastUpdatedAt,omitempty"`
	Notes         *string           `json:"notes,omitempty"`
	Preparation   *ValidPreparation `json:"preparation,omitempty"`
}

// ValidIngredientPreparationCreationRequestInput defines model for ValidIngredientPreparationCreationRequestInput.
type ValidIngredientPreparationCreationRequestInput struct {
	Notes              *string `json:"notes,omitempty"`
	ValidIngredientID  *string `json:"validIngredientID,omitempty"`
	ValidPreparationID *string `json:"validPreparationID,omitempty"`
}

// ValidIngredientPreparationUpdateRequestInput defines model for ValidIngredientPreparationUpdateRequestInput.
type ValidIngredientPreparationUpdateRequestInput struct {
	Notes              *string `json:"notes,omitempty"`
	ValidIngredientID  *string `json:"validIngredientID,omitempty"`
	ValidPreparationID *string `json:"validPreparationID,omitempty"`
}

// ValidIngredientState defines model for ValidIngredientState.
type ValidIngredientState struct {
	ArchivedAt    *string `json:"archivedAt,omitempty"`
	AttributeType *string `json:"attributeType,omitempty"`
	CreatedAt     *string `json:"createdAt,omitempty"`
	Description   *string `json:"description,omitempty"`
	IconPath      *string `json:"iconPath,omitempty"`
	Id            *string `json:"id,omitempty"`
	LastUpdatedAt *string `json:"lastUpdatedAt,omitempty"`
	Name          *string `json:"name,omitempty"`
	PastTense     *string `json:"pastTense,omitempty"`
	Slug          *string `json:"slug,omitempty"`
}

// ValidIngredientStateCreationRequestInput defines model for ValidIngredientStateCreationRequestInput.
type ValidIngredientStateCreationRequestInput struct {
	AttributeType *string `json:"attributeType,omitempty"`
	Description   *string `json:"description,omitempty"`
	IconPath      *string `json:"iconPath,omitempty"`
	Name          *string `json:"name,omitempty"`
	PastTense     *string `json:"pastTense,omitempty"`
	Slug          *string `json:"slug,omitempty"`
}

// ValidIngredientStateIngredient defines model for ValidIngredientStateIngredient.
type ValidIngredientStateIngredient struct {
	ArchivedAt      *string               `json:"archivedAt,omitempty"`
	CreatedAt       *string               `json:"createdAt,omitempty"`
	Id              *string               `json:"id,omitempty"`
	Ingredient      *ValidIngredient      `json:"ingredient,omitempty"`
	IngredientState *ValidIngredientState `json:"ingredientState,omitempty"`
	LastUpdatedAt   *string               `json:"lastUpdatedAt,omitempty"`
	Notes           *string               `json:"notes,omitempty"`
}

// ValidIngredientStateIngredientCreationRequestInput defines model for ValidIngredientStateIngredientCreationRequestInput.
type ValidIngredientStateIngredientCreationRequestInput struct {
	Notes                  *string `json:"notes,omitempty"`
	ValidIngredientID      *string `json:"validIngredientID,omitempty"`
	ValidIngredientStateID *string `json:"validIngredientStateID,omitempty"`
}

// ValidIngredientStateIngredientUpdateRequestInput defines model for ValidIngredientStateIngredientUpdateRequestInput.
type ValidIngredientStateIngredientUpdateRequestInput struct {
	Notes                  *string `json:"notes,omitempty"`
	ValidIngredientID      *string `json:"validIngredientID,omitempty"`
	ValidIngredientStateID *string `json:"validIngredientStateID,omitempty"`
}

// ValidIngredientStateUpdateRequestInput defines model for ValidIngredientStateUpdateRequestInput.
type ValidIngredientStateUpdateRequestInput struct {
	AttributeType *string `json:"attributeType,omitempty"`
	Description   *string `json:"description,omitempty"`
	IconPath      *string `json:"iconPath,omitempty"`
	Name          *string `json:"name,omitempty"`
	PastTense     *string `json:"pastTense,omitempty"`
	Slug          *string `json:"slug,omitempty"`
}

// ValidIngredientUpdateRequestInput defines model for ValidIngredientUpdateRequestInput.
type ValidIngredientUpdateRequestInput struct {
	AnimalDerived                           *bool    `json:"animalDerived,omitempty"`
	AnimalFlesh                             *bool    `json:"animalFlesh,omitempty"`
	ContainsAlcohol                         *bool    `json:"containsAlcohol,omitempty"`
	ContainsDairy                           *bool    `json:"containsDairy,omitempty"`
	ContainsEgg                             *bool    `json:"containsEgg,omitempty"`
	ContainsFish                            *bool    `json:"containsFish,omitempty"`
	ContainsGluten                          *bool    `json:"containsGluten,omitempty"`
	ContainsPeanut                          *bool    `json:"containsPeanut,omitempty"`
	ContainsSesame                          *bool    `json:"containsSesame,omitempty"`
	ContainsShellfish                       *bool    `json:"containsShellfish,omitempty"`
	ContainsSoy                             *bool    `json:"containsSoy,omitempty"`
	ContainsTreeNut                         *bool    `json:"containsTreeNut,omitempty"`
	ContainsWheat                           *bool    `json:"containsWheat,omitempty"`
	Description                             *string  `json:"description,omitempty"`
	IconPath                                *string  `json:"iconPath,omitempty"`
	IsAcid                                  *bool    `json:"isAcid,omitempty"`
	IsFat                                   *bool    `json:"isFat,omitempty"`
	IsFruit                                 *bool    `json:"isFruit,omitempty"`
	IsGrain                                 *bool    `json:"isGrain,omitempty"`
	IsHeat                                  *bool    `json:"isHeat,omitempty"`
	IsLiquid                                *bool    `json:"isLiquid,omitempty"`
	IsMeasuredVolumetrically                *bool    `json:"isMeasuredVolumetrically,omitempty"`
	IsProtein                               *bool    `json:"isProtein,omitempty"`
	IsSalt                                  *bool    `json:"isSalt,omitempty"`
	IsStarch                                *bool    `json:"isStarch,omitempty"`
	MaximumIdealStorageTemperatureInCelsius *float32 `json:"maximumIdealStorageTemperatureInCelsius,omitempty"`
	MinimumIdealStorageTemperatureInCelsius *float32 `json:"minimumIdealStorageTemperatureInCelsius,omitempty"`
	Name                                    *string  `json:"name,omitempty"`
	PluralName                              *string  `json:"pluralName,omitempty"`
	RestrictToPreparations                  *bool    `json:"restrictToPreparations,omitempty"`
	ShoppingSuggestions                     *string  `json:"shoppingSuggestions,omitempty"`
	Slug                                    *string  `json:"slug,omitempty"`
	StorageInstructions                     *string  `json:"storageInstructions,omitempty"`
	Warning                                 *string  `json:"warning,omitempty"`
}

// ValidInstrument defines model for ValidInstrument.
type ValidInstrument struct {
	ArchivedAt                     *string `json:"archivedAt,omitempty"`
	CreatedAt                      *string `json:"createdAt,omitempty"`
	Description                    *string `json:"description,omitempty"`
	DisplayInSummaryLists          *bool   `json:"displayInSummaryLists,omitempty"`
	IconPath                       *string `json:"iconPath,omitempty"`
	Id                             *string `json:"id,omitempty"`
	IncludeInGeneratedInstructions *bool   `json:"includeInGeneratedInstructions,omitempty"`
	LastUpdatedAt                  *string `json:"lastUpdatedAt,omitempty"`
	Name                           *string `json:"name,omitempty"`
	PluralName                     *string `json:"pluralName,omitempty"`
	Slug                           *string `json:"slug,omitempty"`
	UsableForStorage               *bool   `json:"usableForStorage,omitempty"`
}

// ValidInstrumentCreationRequestInput defines model for ValidInstrumentCreationRequestInput.
type ValidInstrumentCreationRequestInput struct {
	Description                    *string `json:"description,omitempty"`
	DisplayInSummaryLists          *bool   `json:"displayInSummaryLists,omitempty"`
	IconPath                       *string `json:"iconPath,omitempty"`
	IncludeInGeneratedInstructions *bool   `json:"includeInGeneratedInstructions,omitempty"`
	Name                           *string `json:"name,omitempty"`
	PluralName                     *string `json:"pluralName,omitempty"`
	Slug                           *string `json:"slug,omitempty"`
	UsableForStorage               *bool   `json:"usableForStorage,omitempty"`
}

// ValidInstrumentUpdateRequestInput defines model for ValidInstrumentUpdateRequestInput.
type ValidInstrumentUpdateRequestInput struct {
	Description                    *string `json:"description,omitempty"`
	DisplayInSummaryLists          *bool   `json:"displayInSummaryLists,omitempty"`
	IconPath                       *string `json:"iconPath,omitempty"`
	IncludeInGeneratedInstructions *bool   `json:"includeInGeneratedInstructions,omitempty"`
	Name                           *string `json:"name,omitempty"`
	PluralName                     *string `json:"pluralName,omitempty"`
	Slug                           *string `json:"slug,omitempty"`
	UsableForStorage               *bool   `json:"usableForStorage,omitempty"`
}

// ValidMeasurementUnit defines model for ValidMeasurementUnit.
type ValidMeasurementUnit struct {
	ArchivedAt    *string `json:"archivedAt,omitempty"`
	CreatedAt     *string `json:"createdAt,omitempty"`
	Description   *string `json:"description,omitempty"`
	IconPath      *string `json:"iconPath,omitempty"`
	Id            *string `json:"id,omitempty"`
	Imperial      *bool   `json:"imperial,omitempty"`
	LastUpdatedAt *string `json:"lastUpdatedAt,omitempty"`
	Metric        *bool   `json:"metric,omitempty"`
	Name          *string `json:"name,omitempty"`
	PluralName    *string `json:"pluralName,omitempty"`
	Slug          *string `json:"slug,omitempty"`
	Universal     *bool   `json:"universal,omitempty"`
	Volumetric    *bool   `json:"volumetric,omitempty"`
}

// ValidMeasurementUnitConversion defines model for ValidMeasurementUnitConversion.
type ValidMeasurementUnitConversion struct {
	ArchivedAt        *string               `json:"archivedAt,omitempty"`
	CreatedAt         *string               `json:"createdAt,omitempty"`
	From              *ValidMeasurementUnit `json:"from,omitempty"`
	Id                *string               `json:"id,omitempty"`
	LastUpdatedAt     *string               `json:"lastUpdatedAt,omitempty"`
	Modifier          *float32              `json:"modifier,omitempty"`
	Notes             *string               `json:"notes,omitempty"`
	OnlyForIngredient *ValidIngredient      `json:"onlyForIngredient,omitempty"`
	To                *ValidMeasurementUnit `json:"to,omitempty"`
}

// ValidMeasurementUnitConversionCreationRequestInput defines model for ValidMeasurementUnitConversionCreationRequestInput.
type ValidMeasurementUnitConversionCreationRequestInput struct {
	From              *string  `json:"from,omitempty"`
	Modifier          *float32 `json:"modifier,omitempty"`
	Notes             *string  `json:"notes,omitempty"`
	OnlyForIngredient *string  `json:"onlyForIngredient,omitempty"`
	To                *string  `json:"to,omitempty"`
}

// ValidMeasurementUnitConversionUpdateRequestInput defines model for ValidMeasurementUnitConversionUpdateRequestInput.
type ValidMeasurementUnitConversionUpdateRequestInput struct {
	From              *string  `json:"from,omitempty"`
	Modifier          *float32 `json:"modifier,omitempty"`
	Notes             *string  `json:"notes,omitempty"`
	OnlyForIngredient *string  `json:"onlyForIngredient,omitempty"`
	To                *string  `json:"to,omitempty"`
}

// ValidMeasurementUnitCreationRequestInput defines model for ValidMeasurementUnitCreationRequestInput.
type ValidMeasurementUnitCreationRequestInput struct {
	Description *string `json:"description,omitempty"`
	IconPath    *string `json:"iconPath,omitempty"`
	Imperial    *bool   `json:"imperial,omitempty"`
	Metric      *bool   `json:"metric,omitempty"`
	Name        *string `json:"name,omitempty"`
	PluralName  *string `json:"pluralName,omitempty"`
	Slug        *string `json:"slug,omitempty"`
	Universal   *bool   `json:"universal,omitempty"`
	Volumetric  *bool   `json:"volumetric,omitempty"`
}

// ValidMeasurementUnitUpdateRequestInput defines model for ValidMeasurementUnitUpdateRequestInput.
type ValidMeasurementUnitUpdateRequestInput struct {
	Description *string `json:"description,omitempty"`
	IconPath    *string `json:"iconPath,omitempty"`
	Imperial    *bool   `json:"imperial,omitempty"`
	Metric      *bool   `json:"metric,omitempty"`
	Name        *string `json:"name,omitempty"`
	PluralName  *string `json:"pluralName,omitempty"`
	Slug        *string `json:"slug,omitempty"`
	Universal   *bool   `json:"universal,omitempty"`
	Volumetric  *bool   `json:"volumetric,omitempty"`
}

// ValidPreparation defines model for ValidPreparation.
type ValidPreparation struct {
	ArchivedAt                  *string `json:"archivedAt,omitempty"`
	ConditionExpressionRequired *bool   `json:"conditionExpressionRequired,omitempty"`
	ConsumesVessel              *bool   `json:"consumesVessel,omitempty"`
	CreatedAt                   *string `json:"createdAt,omitempty"`
	Description                 *string `json:"description,omitempty"`
	IconPath                    *string `json:"iconPath,omitempty"`
	Id                          *string `json:"id,omitempty"`
	LastUpdatedAt               *string `json:"lastUpdatedAt,omitempty"`
	MaximumIngredientCount      *int    `json:"maximumIngredientCount,omitempty"`
	MaximumInstrumentCount      *int    `json:"maximumInstrumentCount,omitempty"`
	MaximumVesselCount          *int    `json:"maximumVesselCount,omitempty"`
	MinimumIngredientCount      *int    `json:"minimumIngredientCount,omitempty"`
	MinimumInstrumentCount      *int    `json:"minimumInstrumentCount,omitempty"`
	MinimumVesselCount          *int    `json:"minimumVesselCount,omitempty"`
	Name                        *string `json:"name,omitempty"`
	OnlyForVessels              *bool   `json:"onlyForVessels,omitempty"`
	PastTense                   *string `json:"pastTense,omitempty"`
	RestrictToIngredients       *bool   `json:"restrictToIngredients,omitempty"`
	Slug                        *string `json:"slug,omitempty"`
	TemperatureRequired         *bool   `json:"temperatureRequired,omitempty"`
	TimeEstimateRequired        *bool   `json:"timeEstimateRequired,omitempty"`
	YieldsNothing               *bool   `json:"yieldsNothing,omitempty"`
}

// ValidPreparationCreationRequestInput defines model for ValidPreparationCreationRequestInput.
type ValidPreparationCreationRequestInput struct {
	ConditionExpressionRequired *bool   `json:"conditionExpressionRequired,omitempty"`
	ConsumesVessel              *bool   `json:"consumesVessel,omitempty"`
	Description                 *string `json:"description,omitempty"`
	IconPath                    *string `json:"iconPath,omitempty"`
	MaximumIngredientCount      *int    `json:"maximumIngredientCount,omitempty"`
	MaximumInstrumentCount      *int    `json:"maximumInstrumentCount,omitempty"`
	MaximumVesselCount          *int    `json:"maximumVesselCount,omitempty"`
	MinimumIngredientCount      *int    `json:"minimumIngredientCount,omitempty"`
	MinimumInstrumentCount      *int    `json:"minimumInstrumentCount,omitempty"`
	MinimumVesselCount          *int    `json:"minimumVesselCount,omitempty"`
	Name                        *string `json:"name,omitempty"`
	OnlyForVessels              *bool   `json:"onlyForVessels,omitempty"`
	PastTense                   *string `json:"pastTense,omitempty"`
	RestrictToIngredients       *bool   `json:"restrictToIngredients,omitempty"`
	Slug                        *string `json:"slug,omitempty"`
	TemperatureRequired         *bool   `json:"temperatureRequired,omitempty"`
	TimeEstimateRequired        *bool   `json:"timeEstimateRequired,omitempty"`
	YieldsNothing               *bool   `json:"yieldsNothing,omitempty"`
}

// ValidPreparationInstrument defines model for ValidPreparationInstrument.
type ValidPreparationInstrument struct {
	ArchivedAt    *string           `json:"archivedAt,omitempty"`
	CreatedAt     *string           `json:"createdAt,omitempty"`
	Id            *string           `json:"id,omitempty"`
	Instrument    *ValidInstrument  `json:"instrument,omitempty"`
	LastUpdatedAt *string           `json:"lastUpdatedAt,omitempty"`
	Notes         *string           `json:"notes,omitempty"`
	Preparation   *ValidPreparation `json:"preparation,omitempty"`
}

// ValidPreparationInstrumentCreationRequestInput defines model for ValidPreparationInstrumentCreationRequestInput.
type ValidPreparationInstrumentCreationRequestInput struct {
	Notes              *string `json:"notes,omitempty"`
	ValidInstrumentID  *string `json:"validInstrumentID,omitempty"`
	ValidPreparationID *string `json:"validPreparationID,omitempty"`
}

// ValidPreparationInstrumentUpdateRequestInput defines model for ValidPreparationInstrumentUpdateRequestInput.
type ValidPreparationInstrumentUpdateRequestInput struct {
	Notes              *string `json:"notes,omitempty"`
	ValidInstrumentID  *string `json:"validInstrumentID,omitempty"`
	ValidPreparationID *string `json:"validPreparationID,omitempty"`
}

// ValidPreparationUpdateRequestInput defines model for ValidPreparationUpdateRequestInput.
type ValidPreparationUpdateRequestInput struct {
	ConditionExpressionRequired *bool   `json:"conditionExpressionRequired,omitempty"`
	ConsumesVessel              *bool   `json:"consumesVessel,omitempty"`
	Description                 *string `json:"description,omitempty"`
	IconPath                    *string `json:"iconPath,omitempty"`
	MaximumIngredientCount      *int    `json:"maximumIngredientCount,omitempty"`
	MaximumInstrumentCount      *int    `json:"maximumInstrumentCount,omitempty"`
	MaximumVesselCount          *int    `json:"maximumVesselCount,omitempty"`
	MinimumIngredientCount      *int    `json:"minimumIngredientCount,omitempty"`
	MinimumInstrumentCount      *int    `json:"minimumInstrumentCount,omitempty"`
	MinimumVesselCount          *int    `json:"minimumVesselCount,omitempty"`
	Name                        *string `json:"name,omitempty"`
	OnlyForVessels              *bool   `json:"onlyForVessels,omitempty"`
	PastTense                   *string `json:"pastTense,omitempty"`
	RestrictToIngredients       *bool   `json:"restrictToIngredients,omitempty"`
	Slug                        *string `json:"slug,omitempty"`
	TemperatureRequired         *bool   `json:"temperatureRequired,omitempty"`
	TimeEstimateRequired        *bool   `json:"timeEstimateRequired,omitempty"`
	YieldsNothing               *bool   `json:"yieldsNothing,omitempty"`
}

// ValidPreparationVessel defines model for ValidPreparationVessel.
type ValidPreparationVessel struct {
	ArchivedAt    *string           `json:"archivedAt,omitempty"`
	CreatedAt     *string           `json:"createdAt,omitempty"`
	Id            *string           `json:"id,omitempty"`
	Instrument    *ValidVessel      `json:"instrument,omitempty"`
	LastUpdatedAt *string           `json:"lastUpdatedAt,omitempty"`
	Notes         *string           `json:"notes,omitempty"`
	Preparation   *ValidPreparation `json:"preparation,omitempty"`
}

// ValidPreparationVesselCreationRequestInput defines model for ValidPreparationVesselCreationRequestInput.
type ValidPreparationVesselCreationRequestInput struct {
	Notes              *string `json:"notes,omitempty"`
	ValidPreparationID *string `json:"validPreparationID,omitempty"`
	ValidVesselID      *string `json:"validVesselID,omitempty"`
}

// ValidPreparationVesselUpdateRequestInput defines model for ValidPreparationVesselUpdateRequestInput.
type ValidPreparationVesselUpdateRequestInput struct {
	Notes              *string `json:"notes,omitempty"`
	ValidPreparationID *string `json:"validPreparationID,omitempty"`
	ValidVesselID      *string `json:"validVesselID,omitempty"`
}

// ValidVessel defines model for ValidVessel.
type ValidVessel struct {
	ArchivedAt                     *string               `json:"archivedAt,omitempty"`
	Capacity                       *float32              `json:"capacity,omitempty"`
	CapacityUnit                   *ValidMeasurementUnit `json:"capacityUnit,omitempty"`
	CreatedAt                      *string               `json:"createdAt,omitempty"`
	Description                    *string               `json:"description,omitempty"`
	DisplayInSummaryLists          *bool                 `json:"displayInSummaryLists,omitempty"`
	HeightInMillimeters            *float32              `json:"heightInMillimeters,omitempty"`
	IconPath                       *string               `json:"iconPath,omitempty"`
	Id                             *string               `json:"id,omitempty"`
	IncludeInGeneratedInstructions *bool                 `json:"includeInGeneratedInstructions,omitempty"`
	LastUpdatedAt                  *string               `json:"lastUpdatedAt,omitempty"`
	LengthInMillimeters            *float32              `json:"lengthInMillimeters,omitempty"`
	Name                           *string               `json:"name,omitempty"`
	PluralName                     *string               `json:"pluralName,omitempty"`
	Shape                          *string               `json:"shape,omitempty"`
	Slug                           *string               `json:"slug,omitempty"`
	UsableForStorage               *bool                 `json:"usableForStorage,omitempty"`
	WidthInMillimeters             *float32              `json:"widthInMillimeters,omitempty"`
}

// ValidVesselCreationRequestInput defines model for ValidVesselCreationRequestInput.
type ValidVesselCreationRequestInput struct {
	Capacity                       *float32 `json:"capacity,omitempty"`
	CapacityUnitID                 *string  `json:"capacityUnitID,omitempty"`
	Description                    *string  `json:"description,omitempty"`
	DisplayInSummaryLists          *bool    `json:"displayInSummaryLists,omitempty"`
	HeightInMillimeters            *float32 `json:"heightInMillimeters,omitempty"`
	IconPath                       *string  `json:"iconPath,omitempty"`
	IncludeInGeneratedInstructions *bool    `json:"includeInGeneratedInstructions,omitempty"`
	LengthInMillimeters            *float32 `json:"lengthInMillimeters,omitempty"`
	Name                           *string  `json:"name,omitempty"`
	PluralName                     *string  `json:"pluralName,omitempty"`
	Shape                          *string  `json:"shape,omitempty"`
	Slug                           *string  `json:"slug,omitempty"`
	UsableForStorage               *bool    `json:"usableForStorage,omitempty"`
	WidthInMillimeters             *float32 `json:"widthInMillimeters,omitempty"`
}

// ValidVesselUpdateRequestInput defines model for ValidVesselUpdateRequestInput.
type ValidVesselUpdateRequestInput struct {
	Capacity                       *float32 `json:"capacity,omitempty"`
	CapacityUnitID                 *string  `json:"capacityUnitID,omitempty"`
	Description                    *string  `json:"description,omitempty"`
	DisplayInSummaryLists          *bool    `json:"displayInSummaryLists,omitempty"`
	HeightInMillimeters            *float32 `json:"heightInMillimeters,omitempty"`
	IconPath                       *string  `json:"iconPath,omitempty"`
	IncludeInGeneratedInstructions *bool    `json:"includeInGeneratedInstructions,omitempty"`
	LengthInMillimeters            *float32 `json:"lengthInMillimeters,omitempty"`
	Name                           *string  `json:"name,omitempty"`
	PluralName                     *string  `json:"pluralName,omitempty"`
	Shape                          *string  `json:"shape,omitempty"`
	Slug                           *string  `json:"slug,omitempty"`
	UsableForStorage               *bool    `json:"usableForStorage,omitempty"`
	WidthInMillimeters             *float32 `json:"widthInMillimeters,omitempty"`
}

// Webhook defines model for Webhook.
type Webhook struct {
	ArchivedAt         *string                `json:"archivedAt,omitempty"`
	BelongsToHousehold *string                `json:"belongsToHousehold,omitempty"`
	ContentType        *string                `json:"contentType,omitempty"`
	CreatedAt          *string                `json:"createdAt,omitempty"`
	Events             *[]WebhookTriggerEvent `json:"events,omitempty"`
	Id                 *string                `json:"id,omitempty"`
	LastUpdatedAt      *string                `json:"lastUpdatedAt,omitempty"`
	Method             *string                `json:"method,omitempty"`
	Name               *string                `json:"name,omitempty"`
	Url                *string                `json:"url,omitempty"`
}

// WebhookCreationRequestInput defines model for WebhookCreationRequestInput.
type WebhookCreationRequestInput struct {
	ContentType *string   `json:"contentType,omitempty"`
	Events      *[]string `json:"events,omitempty"`
	Method      *string   `json:"method,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// WebhookTriggerEvent defines model for WebhookTriggerEvent.
type WebhookTriggerEvent struct {
	ArchivedAt       *string `json:"archivedAt,omitempty"`
	BelongsToWebhook *string `json:"belongsToWebhook,omitempty"`
	CreatedAt        *string `json:"createdAt,omitempty"`
	Id               *string `json:"id,omitempty"`
	TriggerEvent     *string `json:"triggerEvent,omitempty"`
}

// WebhookTriggerEventCreationRequestInput defines model for WebhookTriggerEventCreationRequestInput.
type WebhookTriggerEventCreationRequestInput struct {
	BelongsToWebhook *string `json:"belongsToWebhook,omitempty"`
	TriggerEvent     *string `json:"triggerEvent,omitempty"`
}

// GetHouseholdsParams defines parameters for GetHouseholds.
type GetHouseholdsParams struct {
	Page            int                                `form:"page" json:"page"`
	CreatedBefore   string                             `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                             `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                             `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                             `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetHouseholdsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetHouseholdsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetHouseholdsParamsIncludeArchived defines parameters for GetHouseholds.
type GetHouseholdsParamsIncludeArchived string

// GetHouseholdsParamsSortBy defines parameters for GetHouseholds.
type GetHouseholdsParamsSortBy string

// GetHouseholdInstrumentOwnershipsParams defines parameters for GetHouseholdInstrumentOwnerships.
type GetHouseholdInstrumentOwnershipsParams struct {
	Page            int                                                   `form:"page" json:"page"`
	CreatedBefore   string                                                `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                                `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                                `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                                `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetHouseholdInstrumentOwnershipsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetHouseholdInstrumentOwnershipsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetHouseholdInstrumentOwnershipsParamsIncludeArchived defines parameters for GetHouseholdInstrumentOwnerships.
type GetHouseholdInstrumentOwnershipsParamsIncludeArchived string

// GetHouseholdInstrumentOwnershipsParamsSortBy defines parameters for GetHouseholdInstrumentOwnerships.
type GetHouseholdInstrumentOwnershipsParamsSortBy string

// GetMealPlansParams defines parameters for GetMealPlans.
type GetMealPlansParams struct {
	Page            int                               `form:"page" json:"page"`
	CreatedBefore   string                            `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                            `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                            `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                            `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetMealPlansParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetMealPlansParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetMealPlansParamsIncludeArchived defines parameters for GetMealPlans.
type GetMealPlansParamsIncludeArchived string

// GetMealPlansParamsSortBy defines parameters for GetMealPlans.
type GetMealPlansParamsSortBy string

// GetMealPlanEventsParams defines parameters for GetMealPlanEvents.
type GetMealPlanEventsParams struct {
	Page            int                                    `form:"page" json:"page"`
	CreatedBefore   string                                 `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                 `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                 `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                 `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetMealPlanEventsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetMealPlanEventsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetMealPlanEventsParamsIncludeArchived defines parameters for GetMealPlanEvents.
type GetMealPlanEventsParamsIncludeArchived string

// GetMealPlanEventsParamsSortBy defines parameters for GetMealPlanEvents.
type GetMealPlanEventsParamsSortBy string

// GetMealPlanOptionsParams defines parameters for GetMealPlanOptions.
type GetMealPlanOptionsParams struct {
	Page            int                                     `form:"page" json:"page"`
	CreatedBefore   string                                  `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                  `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                  `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                  `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetMealPlanOptionsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetMealPlanOptionsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetMealPlanOptionsParamsIncludeArchived defines parameters for GetMealPlanOptions.
type GetMealPlanOptionsParamsIncludeArchived string

// GetMealPlanOptionsParamsSortBy defines parameters for GetMealPlanOptions.
type GetMealPlanOptionsParamsSortBy string

// GetMealPlanOptionVotesParams defines parameters for GetMealPlanOptionVotes.
type GetMealPlanOptionVotesParams struct {
	Page            int                                         `form:"page" json:"page"`
	CreatedBefore   string                                      `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                      `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                      `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                      `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetMealPlanOptionVotesParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetMealPlanOptionVotesParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetMealPlanOptionVotesParamsIncludeArchived defines parameters for GetMealPlanOptionVotes.
type GetMealPlanOptionVotesParamsIncludeArchived string

// GetMealPlanOptionVotesParamsSortBy defines parameters for GetMealPlanOptionVotes.
type GetMealPlanOptionVotesParamsSortBy string

// GetMealPlanGroceryListItemsParams defines parameters for GetMealPlanGroceryListItems.
type GetMealPlanGroceryListItemsParams struct {
	Page            int                                              `form:"page" json:"page"`
	CreatedBefore   string                                           `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                           `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                           `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                           `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetMealPlanGroceryListItemsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetMealPlanGroceryListItemsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetMealPlanGroceryListItemsParamsIncludeArchived defines parameters for GetMealPlanGroceryListItems.
type GetMealPlanGroceryListItemsParamsIncludeArchived string

// GetMealPlanGroceryListItemsParamsSortBy defines parameters for GetMealPlanGroceryListItems.
type GetMealPlanGroceryListItemsParamsSortBy string

// GetMealPlanTasksParams defines parameters for GetMealPlanTasks.
type GetMealPlanTasksParams struct {
	Page            int                                   `form:"page" json:"page"`
	CreatedBefore   string                                `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetMealPlanTasksParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetMealPlanTasksParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetMealPlanTasksParamsIncludeArchived defines parameters for GetMealPlanTasks.
type GetMealPlanTasksParamsIncludeArchived string

// GetMealPlanTasksParamsSortBy defines parameters for GetMealPlanTasks.
type GetMealPlanTasksParamsSortBy string

// GetMealsParams defines parameters for GetMeals.
type GetMealsParams struct {
	Page            int                           `form:"page" json:"page"`
	CreatedBefore   string                        `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                        `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                        `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                        `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetMealsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetMealsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetMealsParamsIncludeArchived defines parameters for GetMeals.
type GetMealsParamsIncludeArchived string

// GetMealsParamsSortBy defines parameters for GetMeals.
type GetMealsParamsSortBy string

// GetOAuth2ClientsParams defines parameters for GetOAuth2Clients.
type GetOAuth2ClientsParams struct {
	Page            int                                   `form:"page" json:"page"`
	CreatedBefore   string                                `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetOAuth2ClientsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetOAuth2ClientsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetOAuth2ClientsParamsIncludeArchived defines parameters for GetOAuth2Clients.
type GetOAuth2ClientsParamsIncludeArchived string

// GetOAuth2ClientsParamsSortBy defines parameters for GetOAuth2Clients.
type GetOAuth2ClientsParamsSortBy string

// GetRecipesParams defines parameters for GetRecipes.
type GetRecipesParams struct {
	Page            int                             `form:"page" json:"page"`
	CreatedBefore   string                          `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                          `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                          `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                          `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetRecipesParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetRecipesParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetRecipesParamsIncludeArchived defines parameters for GetRecipes.
type GetRecipesParamsIncludeArchived string

// GetRecipesParamsSortBy defines parameters for GetRecipes.
type GetRecipesParamsSortBy string

// GetRecipePrepTasksParams defines parameters for GetRecipePrepTasks.
type GetRecipePrepTasksParams struct {
	Page            int                                     `form:"page" json:"page"`
	CreatedBefore   string                                  `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                  `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                  `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                  `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetRecipePrepTasksParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetRecipePrepTasksParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetRecipePrepTasksParamsIncludeArchived defines parameters for GetRecipePrepTasks.
type GetRecipePrepTasksParamsIncludeArchived string

// GetRecipePrepTasksParamsSortBy defines parameters for GetRecipePrepTasks.
type GetRecipePrepTasksParamsSortBy string

// GetRecipeRatingsParams defines parameters for GetRecipeRatings.
type GetRecipeRatingsParams struct {
	Page            int                                   `form:"page" json:"page"`
	CreatedBefore   string                                `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetRecipeRatingsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetRecipeRatingsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetRecipeRatingsParamsIncludeArchived defines parameters for GetRecipeRatings.
type GetRecipeRatingsParamsIncludeArchived string

// GetRecipeRatingsParamsSortBy defines parameters for GetRecipeRatings.
type GetRecipeRatingsParamsSortBy string

// GetRecipeStepsParams defines parameters for GetRecipeSteps.
type GetRecipeStepsParams struct {
	Page            int                                 `form:"page" json:"page"`
	CreatedBefore   string                              `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                              `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                              `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                              `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetRecipeStepsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetRecipeStepsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetRecipeStepsParamsIncludeArchived defines parameters for GetRecipeSteps.
type GetRecipeStepsParamsIncludeArchived string

// GetRecipeStepsParamsSortBy defines parameters for GetRecipeSteps.
type GetRecipeStepsParamsSortBy string

// GetRecipeStepCompletionConditionsParams defines parameters for GetRecipeStepCompletionConditions.
type GetRecipeStepCompletionConditionsParams struct {
	Page            int                                                    `form:"page" json:"page"`
	CreatedBefore   string                                                 `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                                 `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                                 `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                                 `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetRecipeStepCompletionConditionsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetRecipeStepCompletionConditionsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetRecipeStepCompletionConditionsParamsIncludeArchived defines parameters for GetRecipeStepCompletionConditions.
type GetRecipeStepCompletionConditionsParamsIncludeArchived string

// GetRecipeStepCompletionConditionsParamsSortBy defines parameters for GetRecipeStepCompletionConditions.
type GetRecipeStepCompletionConditionsParamsSortBy string

// GetRecipeStepIngredientsParams defines parameters for GetRecipeStepIngredients.
type GetRecipeStepIngredientsParams struct {
	Page            int                                           `form:"page" json:"page"`
	CreatedBefore   string                                        `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                        `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                        `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                        `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetRecipeStepIngredientsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetRecipeStepIngredientsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetRecipeStepIngredientsParamsIncludeArchived defines parameters for GetRecipeStepIngredients.
type GetRecipeStepIngredientsParamsIncludeArchived string

// GetRecipeStepIngredientsParamsSortBy defines parameters for GetRecipeStepIngredients.
type GetRecipeStepIngredientsParamsSortBy string

// GetRecipeStepInstrumentsParams defines parameters for GetRecipeStepInstruments.
type GetRecipeStepInstrumentsParams struct {
	Page            int                                           `form:"page" json:"page"`
	CreatedBefore   string                                        `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                        `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                        `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                        `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetRecipeStepInstrumentsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetRecipeStepInstrumentsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetRecipeStepInstrumentsParamsIncludeArchived defines parameters for GetRecipeStepInstruments.
type GetRecipeStepInstrumentsParamsIncludeArchived string

// GetRecipeStepInstrumentsParamsSortBy defines parameters for GetRecipeStepInstruments.
type GetRecipeStepInstrumentsParamsSortBy string

// GetRecipeStepProductsParams defines parameters for GetRecipeStepProducts.
type GetRecipeStepProductsParams struct {
	Page            int                                        `form:"page" json:"page"`
	CreatedBefore   string                                     `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                     `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                     `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                     `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetRecipeStepProductsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetRecipeStepProductsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetRecipeStepProductsParamsIncludeArchived defines parameters for GetRecipeStepProducts.
type GetRecipeStepProductsParamsIncludeArchived string

// GetRecipeStepProductsParamsSortBy defines parameters for GetRecipeStepProducts.
type GetRecipeStepProductsParamsSortBy string

// GetRecipeStepVesselsParams defines parameters for GetRecipeStepVessels.
type GetRecipeStepVesselsParams struct {
	Page            int                                       `form:"page" json:"page"`
	CreatedBefore   string                                    `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                    `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                    `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                    `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetRecipeStepVesselsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetRecipeStepVesselsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetRecipeStepVesselsParamsIncludeArchived defines parameters for GetRecipeStepVessels.
type GetRecipeStepVesselsParamsIncludeArchived string

// GetRecipeStepVesselsParamsSortBy defines parameters for GetRecipeStepVessels.
type GetRecipeStepVesselsParamsSortBy string

// GetServiceSettingsParams defines parameters for GetServiceSettings.
type GetServiceSettingsParams struct {
	Page            int                                     `form:"page" json:"page"`
	CreatedBefore   string                                  `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                  `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                  `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                  `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetServiceSettingsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetServiceSettingsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetServiceSettingsParamsIncludeArchived defines parameters for GetServiceSettings.
type GetServiceSettingsParamsIncludeArchived string

// GetServiceSettingsParamsSortBy defines parameters for GetServiceSettings.
type GetServiceSettingsParamsSortBy string

// GetUserIngredientPreferencesParams defines parameters for GetUserIngredientPreferences.
type GetUserIngredientPreferencesParams struct {
	Page            int                                               `form:"page" json:"page"`
	CreatedBefore   string                                            `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                            `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                            `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                            `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetUserIngredientPreferencesParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetUserIngredientPreferencesParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetUserIngredientPreferencesParamsIncludeArchived defines parameters for GetUserIngredientPreferences.
type GetUserIngredientPreferencesParamsIncludeArchived string

// GetUserIngredientPreferencesParamsSortBy defines parameters for GetUserIngredientPreferences.
type GetUserIngredientPreferencesParamsSortBy string

// GetUserNotificationsParams defines parameters for GetUserNotifications.
type GetUserNotificationsParams struct {
	Page            int                                       `form:"page" json:"page"`
	CreatedBefore   string                                    `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                    `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                    `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                    `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetUserNotificationsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetUserNotificationsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetUserNotificationsParamsIncludeArchived defines parameters for GetUserNotifications.
type GetUserNotificationsParamsIncludeArchived string

// GetUserNotificationsParamsSortBy defines parameters for GetUserNotifications.
type GetUserNotificationsParamsSortBy string

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	Page            int                           `form:"page" json:"page"`
	CreatedBefore   string                        `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                        `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                        `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                        `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetUsersParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetUsersParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetUsersParamsIncludeArchived defines parameters for GetUsers.
type GetUsersParamsIncludeArchived string

// GetUsersParamsSortBy defines parameters for GetUsers.
type GetUsersParamsSortBy string

// SearchForUsersParams defines parameters for SearchForUsers.
type SearchForUsersParams struct {
	Page            int                                 `form:"page" json:"page"`
	CreatedBefore   string                              `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                              `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                              `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                              `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived SearchForUsersParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          SearchForUsersParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// SearchForUsersParamsIncludeArchived defines parameters for SearchForUsers.
type SearchForUsersParamsIncludeArchived string

// SearchForUsersParamsSortBy defines parameters for SearchForUsers.
type SearchForUsersParamsSortBy string

// GetValidIngredientGroupsParams defines parameters for GetValidIngredientGroups.
type GetValidIngredientGroupsParams struct {
	Page            int                                           `form:"page" json:"page"`
	CreatedBefore   string                                        `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                        `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                        `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                        `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetValidIngredientGroupsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetValidIngredientGroupsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetValidIngredientGroupsParamsIncludeArchived defines parameters for GetValidIngredientGroups.
type GetValidIngredientGroupsParamsIncludeArchived string

// GetValidIngredientGroupsParamsSortBy defines parameters for GetValidIngredientGroups.
type GetValidIngredientGroupsParamsSortBy string

// GetValidIngredientMeasurementUnitsParams defines parameters for GetValidIngredientMeasurementUnits.
type GetValidIngredientMeasurementUnitsParams struct {
	Page            int                                                     `form:"page" json:"page"`
	CreatedBefore   string                                                  `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                                  `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                                  `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                                  `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetValidIngredientMeasurementUnitsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetValidIngredientMeasurementUnitsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetValidIngredientMeasurementUnitsParamsIncludeArchived defines parameters for GetValidIngredientMeasurementUnits.
type GetValidIngredientMeasurementUnitsParamsIncludeArchived string

// GetValidIngredientMeasurementUnitsParamsSortBy defines parameters for GetValidIngredientMeasurementUnits.
type GetValidIngredientMeasurementUnitsParamsSortBy string

// GetValidIngredientPreparationsParams defines parameters for GetValidIngredientPreparations.
type GetValidIngredientPreparationsParams struct {
	Page            int                                                 `form:"page" json:"page"`
	CreatedBefore   string                                              `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                              `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                              `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                              `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetValidIngredientPreparationsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetValidIngredientPreparationsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetValidIngredientPreparationsParamsIncludeArchived defines parameters for GetValidIngredientPreparations.
type GetValidIngredientPreparationsParamsIncludeArchived string

// GetValidIngredientPreparationsParamsSortBy defines parameters for GetValidIngredientPreparations.
type GetValidIngredientPreparationsParamsSortBy string

// GetValidIngredientStateIngredientsParams defines parameters for GetValidIngredientStateIngredients.
type GetValidIngredientStateIngredientsParams struct {
	Page            int                                                     `form:"page" json:"page"`
	CreatedBefore   string                                                  `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                                  `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                                  `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                                  `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetValidIngredientStateIngredientsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetValidIngredientStateIngredientsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetValidIngredientStateIngredientsParamsIncludeArchived defines parameters for GetValidIngredientStateIngredients.
type GetValidIngredientStateIngredientsParamsIncludeArchived string

// GetValidIngredientStateIngredientsParamsSortBy defines parameters for GetValidIngredientStateIngredients.
type GetValidIngredientStateIngredientsParamsSortBy string

// GetValidIngredientStatesParams defines parameters for GetValidIngredientStates.
type GetValidIngredientStatesParams struct {
	Page            int                                           `form:"page" json:"page"`
	CreatedBefore   string                                        `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                        `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                        `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                        `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetValidIngredientStatesParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetValidIngredientStatesParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetValidIngredientStatesParamsIncludeArchived defines parameters for GetValidIngredientStates.
type GetValidIngredientStatesParamsIncludeArchived string

// GetValidIngredientStatesParamsSortBy defines parameters for GetValidIngredientStates.
type GetValidIngredientStatesParamsSortBy string

// GetValidIngredientsParams defines parameters for GetValidIngredients.
type GetValidIngredientsParams struct {
	Page            int                                      `form:"page" json:"page"`
	CreatedBefore   string                                   `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                   `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                   `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                   `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetValidIngredientsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetValidIngredientsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetValidIngredientsParamsIncludeArchived defines parameters for GetValidIngredients.
type GetValidIngredientsParamsIncludeArchived string

// GetValidIngredientsParamsSortBy defines parameters for GetValidIngredients.
type GetValidIngredientsParamsSortBy string

// GetValidInstrumentsParams defines parameters for GetValidInstruments.
type GetValidInstrumentsParams struct {
	Page            int                                      `form:"page" json:"page"`
	CreatedBefore   string                                   `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                   `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                   `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                   `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetValidInstrumentsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetValidInstrumentsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetValidInstrumentsParamsIncludeArchived defines parameters for GetValidInstruments.
type GetValidInstrumentsParamsIncludeArchived string

// GetValidInstrumentsParamsSortBy defines parameters for GetValidInstruments.
type GetValidInstrumentsParamsSortBy string

// GetValidMeasurementUnitsParams defines parameters for GetValidMeasurementUnits.
type GetValidMeasurementUnitsParams struct {
	Page            int                                           `form:"page" json:"page"`
	CreatedBefore   string                                        `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                        `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                        `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                        `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetValidMeasurementUnitsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetValidMeasurementUnitsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetValidMeasurementUnitsParamsIncludeArchived defines parameters for GetValidMeasurementUnits.
type GetValidMeasurementUnitsParamsIncludeArchived string

// GetValidMeasurementUnitsParamsSortBy defines parameters for GetValidMeasurementUnits.
type GetValidMeasurementUnitsParamsSortBy string

// GetValidPreparationInstrumentsParams defines parameters for GetValidPreparationInstruments.
type GetValidPreparationInstrumentsParams struct {
	Page            int                                                 `form:"page" json:"page"`
	CreatedBefore   string                                              `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                              `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                              `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                              `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetValidPreparationInstrumentsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetValidPreparationInstrumentsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetValidPreparationInstrumentsParamsIncludeArchived defines parameters for GetValidPreparationInstruments.
type GetValidPreparationInstrumentsParamsIncludeArchived string

// GetValidPreparationInstrumentsParamsSortBy defines parameters for GetValidPreparationInstruments.
type GetValidPreparationInstrumentsParamsSortBy string

// GetValidPreparationVesselsParams defines parameters for GetValidPreparationVessels.
type GetValidPreparationVesselsParams struct {
	Page            int                                             `form:"page" json:"page"`
	CreatedBefore   string                                          `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                          `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                          `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                          `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetValidPreparationVesselsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetValidPreparationVesselsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetValidPreparationVesselsParamsIncludeArchived defines parameters for GetValidPreparationVessels.
type GetValidPreparationVesselsParamsIncludeArchived string

// GetValidPreparationVesselsParamsSortBy defines parameters for GetValidPreparationVessels.
type GetValidPreparationVesselsParamsSortBy string

// GetValidPreparationsParams defines parameters for GetValidPreparations.
type GetValidPreparationsParams struct {
	Page            int                                       `form:"page" json:"page"`
	CreatedBefore   string                                    `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                                    `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                                    `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                                    `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetValidPreparationsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetValidPreparationsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetValidPreparationsParamsIncludeArchived defines parameters for GetValidPreparations.
type GetValidPreparationsParamsIncludeArchived string

// GetValidPreparationsParamsSortBy defines parameters for GetValidPreparations.
type GetValidPreparationsParamsSortBy string

// GetValidVesselsParams defines parameters for GetValidVessels.
type GetValidVesselsParams struct {
	Page            int                                  `form:"page" json:"page"`
	CreatedBefore   string                               `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                               `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                               `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                               `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetValidVesselsParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetValidVesselsParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetValidVesselsParamsIncludeArchived defines parameters for GetValidVessels.
type GetValidVesselsParamsIncludeArchived string

// GetValidVesselsParamsSortBy defines parameters for GetValidVessels.
type GetValidVesselsParamsSortBy string

// GetWebhooksParams defines parameters for GetWebhooks.
type GetWebhooksParams struct {
	Page            int                              `form:"page" json:"page"`
	CreatedBefore   string                           `form:"createdBefore" json:"createdBefore"`
	CreatedAfter    string                           `form:"createdAfter" json:"createdAfter"`
	UpdatedBefore   string                           `form:"updatedBefore" json:"updatedBefore"`
	UpdatedAfter    string                           `form:"updatedAfter" json:"updatedAfter"`
	IncludeArchived GetWebhooksParamsIncludeArchived `form:"includeArchived" json:"includeArchived"`
	SortBy          GetWebhooksParamsSortBy          `form:"sortBy" json:"sortBy"`
}

// GetWebhooksParamsIncludeArchived defines parameters for GetWebhooks.
type GetWebhooksParamsIncludeArchived string

// GetWebhooksParamsSortBy defines parameters for GetWebhooks.
type GetWebhooksParamsSortBy string

// AdminUpdateUserStatusJSONRequestBody defines body for AdminUpdateUserStatus for application/json ContentType.
type AdminUpdateUserStatusJSONRequestBody = UserAccountStatusUpdateInput

// AcceptHouseholdInvitationJSONRequestBody defines body for AcceptHouseholdInvitation for application/json ContentType.
type AcceptHouseholdInvitationJSONRequestBody = HouseholdInvitationUpdateRequestInput

// CancelHouseholdInvitationJSONRequestBody defines body for CancelHouseholdInvitation for application/json ContentType.
type CancelHouseholdInvitationJSONRequestBody = HouseholdInvitationUpdateRequestInput

// RejectHouseholdInvitationJSONRequestBody defines body for RejectHouseholdInvitation for application/json ContentType.
type RejectHouseholdInvitationJSONRequestBody = HouseholdInvitationUpdateRequestInput

// CreateHouseholdJSONRequestBody defines body for CreateHousehold for application/json ContentType.
type CreateHouseholdJSONRequestBody = HouseholdCreationRequestInput

// CreateHouseholdInstrumentOwnershipJSONRequestBody defines body for CreateHouseholdInstrumentOwnership for application/json ContentType.
type CreateHouseholdInstrumentOwnershipJSONRequestBody = HouseholdInstrumentOwnershipCreationRequestInput

// UpdateHouseholdInstrumentOwnershipJSONRequestBody defines body for UpdateHouseholdInstrumentOwnership for application/json ContentType.
type UpdateHouseholdInstrumentOwnershipJSONRequestBody = HouseholdInstrumentOwnershipUpdateRequestInput

// UpdateHouseholdJSONRequestBody defines body for UpdateHousehold for application/json ContentType.
type UpdateHouseholdJSONRequestBody = HouseholdUpdateRequestInput

// CreateHouseholdInvitationJSONRequestBody defines body for CreateHouseholdInvitation for application/json ContentType.
type CreateHouseholdInvitationJSONRequestBody = HouseholdInvitationCreationRequestInput

// POSTHouseholdsHouseholdIDInviteJSONRequestBody defines body for POSTHouseholdsHouseholdIDInvite for application/json ContentType.
type POSTHouseholdsHouseholdIDInviteJSONRequestBody = HouseholdInvitationCreationRequestInput

// UpdateHouseholdMemberPermissionsJSONRequestBody defines body for UpdateHouseholdMemberPermissions for application/json ContentType.
type UpdateHouseholdMemberPermissionsJSONRequestBody = ModifyUserPermissionsInput

// TransferHouseholdOwnershipJSONRequestBody defines body for TransferHouseholdOwnership for application/json ContentType.
type TransferHouseholdOwnershipJSONRequestBody = HouseholdOwnershipTransferInput

// CreateMealPlanJSONRequestBody defines body for CreateMealPlan for application/json ContentType.
type CreateMealPlanJSONRequestBody = MealPlanCreationRequestInput

// UpdateMealPlanJSONRequestBody defines body for UpdateMealPlan for application/json ContentType.
type UpdateMealPlanJSONRequestBody = MealPlanUpdateRequestInput

// CreateMealPlanEventJSONRequestBody defines body for CreateMealPlanEvent for application/json ContentType.
type CreateMealPlanEventJSONRequestBody = MealPlanEventCreationRequestInput

// UpdateMealPlanEventJSONRequestBody defines body for UpdateMealPlanEvent for application/json ContentType.
type UpdateMealPlanEventJSONRequestBody = MealPlanEventUpdateRequestInput

// CreateMealPlanOptionJSONRequestBody defines body for CreateMealPlanOption for application/json ContentType.
type CreateMealPlanOptionJSONRequestBody = MealPlanOptionCreationRequestInput

// UpdateMealPlanOptionJSONRequestBody defines body for UpdateMealPlanOption for application/json ContentType.
type UpdateMealPlanOptionJSONRequestBody = MealPlanOptionUpdateRequestInput

// UpdateMealPlanOptionVoteJSONRequestBody defines body for UpdateMealPlanOptionVote for application/json ContentType.
type UpdateMealPlanOptionVoteJSONRequestBody = MealPlanOptionVoteUpdateRequestInput

// CreateMealPlanVoteJSONRequestBody defines body for CreateMealPlanVote for application/json ContentType.
type CreateMealPlanVoteJSONRequestBody = MealPlanOptionVoteCreationRequestInput

// CreateMealPlanGroceryListItemJSONRequestBody defines body for CreateMealPlanGroceryListItem for application/json ContentType.
type CreateMealPlanGroceryListItemJSONRequestBody = MealPlanGroceryListItemCreationRequestInput

// UpdateMealPlanGroceryListItemJSONRequestBody defines body for UpdateMealPlanGroceryListItem for application/json ContentType.
type UpdateMealPlanGroceryListItemJSONRequestBody = MealPlanGroceryListItemUpdateRequestInput

// CreateMealPlanTaskJSONRequestBody defines body for CreateMealPlanTask for application/json ContentType.
type CreateMealPlanTaskJSONRequestBody = MealPlanTaskCreationRequestInput

// UpdateMealPlanTaskJSONRequestBody defines body for UpdateMealPlanTask for application/json ContentType.
type UpdateMealPlanTaskJSONRequestBody = MealPlanTaskStatusChangeRequestInput

// CreateMealJSONRequestBody defines body for CreateMeal for application/json ContentType.
type CreateMealJSONRequestBody = MealCreationRequestInput

// CreateOAuth2ClientJSONRequestBody defines body for CreateOAuth2Client for application/json ContentType.
type CreateOAuth2ClientJSONRequestBody = OAuth2ClientCreationRequestInput

// CreateRecipeJSONRequestBody defines body for CreateRecipe for application/json ContentType.
type CreateRecipeJSONRequestBody = RecipeCreationRequestInput

// UpdateRecipeJSONRequestBody defines body for UpdateRecipe for application/json ContentType.
type UpdateRecipeJSONRequestBody = RecipeUpdateRequestInput

// CreateRecipePrepTaskJSONRequestBody defines body for CreateRecipePrepTask for application/json ContentType.
type CreateRecipePrepTaskJSONRequestBody = RecipePrepTaskCreationRequestInput

// UpdateRecipePrepTaskJSONRequestBody defines body for UpdateRecipePrepTask for application/json ContentType.
type UpdateRecipePrepTaskJSONRequestBody = RecipePrepTaskUpdateRequestInput

// CreateRecipeRatingJSONRequestBody defines body for CreateRecipeRating for application/json ContentType.
type CreateRecipeRatingJSONRequestBody = RecipeRatingCreationRequestInput

// UpdateRecipeRatingJSONRequestBody defines body for UpdateRecipeRating for application/json ContentType.
type UpdateRecipeRatingJSONRequestBody = RecipeRatingUpdateRequestInput

// CreateRecipeStepJSONRequestBody defines body for CreateRecipeStep for application/json ContentType.
type CreateRecipeStepJSONRequestBody = RecipeStepCreationRequestInput

// UpdateRecipeStepJSONRequestBody defines body for UpdateRecipeStep for application/json ContentType.
type UpdateRecipeStepJSONRequestBody = RecipeStepUpdateRequestInput

// CreateRecipeStepCompletionConditionJSONRequestBody defines body for CreateRecipeStepCompletionCondition for application/json ContentType.
type CreateRecipeStepCompletionConditionJSONRequestBody = RecipeStepCompletionConditionForExistingRecipeCreationRequestInput

// UpdateRecipeStepCompletionConditionJSONRequestBody defines body for UpdateRecipeStepCompletionCondition for application/json ContentType.
type UpdateRecipeStepCompletionConditionJSONRequestBody = RecipeStepCompletionConditionUpdateRequestInput

// CreateRecipeStepIngredientJSONRequestBody defines body for CreateRecipeStepIngredient for application/json ContentType.
type CreateRecipeStepIngredientJSONRequestBody = RecipeStepIngredientCreationRequestInput

// UpdateRecipeStepIngredientJSONRequestBody defines body for UpdateRecipeStepIngredient for application/json ContentType.
type UpdateRecipeStepIngredientJSONRequestBody = RecipeStepIngredientUpdateRequestInput

// CreateRecipeStepInstrumentJSONRequestBody defines body for CreateRecipeStepInstrument for application/json ContentType.
type CreateRecipeStepInstrumentJSONRequestBody = RecipeStepInstrumentCreationRequestInput

// UpdateRecipeStepInstrumentJSONRequestBody defines body for UpdateRecipeStepInstrument for application/json ContentType.
type UpdateRecipeStepInstrumentJSONRequestBody = RecipeStepInstrumentUpdateRequestInput

// CreateRecipeStepProductJSONRequestBody defines body for CreateRecipeStepProduct for application/json ContentType.
type CreateRecipeStepProductJSONRequestBody = RecipeStepProductCreationRequestInput

// UpdateRecipeStepProductJSONRequestBody defines body for UpdateRecipeStepProduct for application/json ContentType.
type UpdateRecipeStepProductJSONRequestBody = RecipeStepProductUpdateRequestInput

// CreateRecipeStepVesselJSONRequestBody defines body for CreateRecipeStepVessel for application/json ContentType.
type CreateRecipeStepVesselJSONRequestBody = RecipeStepVesselCreationRequestInput

// UpdateRecipeStepVesselJSONRequestBody defines body for UpdateRecipeStepVessel for application/json ContentType.
type UpdateRecipeStepVesselJSONRequestBody = RecipeStepVesselUpdateRequestInput

// CreateServiceSettingJSONRequestBody defines body for CreateServiceSetting for application/json ContentType.
type CreateServiceSettingJSONRequestBody = ServiceSettingCreationRequestInput

// CreateServiceSettingConfigurationJSONRequestBody defines body for CreateServiceSettingConfiguration for application/json ContentType.
type CreateServiceSettingConfigurationJSONRequestBody = ServiceSettingConfigurationCreationRequestInput

// UpdateServiceSettingConfigurationJSONRequestBody defines body for UpdateServiceSettingConfiguration for application/json ContentType.
type UpdateServiceSettingConfigurationJSONRequestBody = ServiceSettingConfigurationUpdateRequestInput

// CreateUserIngredientPreferenceJSONRequestBody defines body for CreateUserIngredientPreference for application/json ContentType.
type CreateUserIngredientPreferenceJSONRequestBody = UserIngredientPreferenceCreationRequestInput

// UpdateUserIngredientPreferenceJSONRequestBody defines body for UpdateUserIngredientPreference for application/json ContentType.
type UpdateUserIngredientPreferenceJSONRequestBody = UserIngredientPreferenceUpdateRequestInput

// CreateUserNotificationJSONRequestBody defines body for CreateUserNotification for application/json ContentType.
type CreateUserNotificationJSONRequestBody = UserNotificationCreationRequestInput

// UpdateUserNotificationJSONRequestBody defines body for UpdateUserNotification for application/json ContentType.
type UpdateUserNotificationJSONRequestBody = UserNotificationUpdateRequestInput

// UploadUserAvatarJSONRequestBody defines body for UploadUserAvatar for application/json ContentType.
type UploadUserAvatarJSONRequestBody = AvatarUpdateInput

// UpdateUserDetailsJSONRequestBody defines body for UpdateUserDetails for application/json ContentType.
type UpdateUserDetailsJSONRequestBody = UserDetailsUpdateRequestInput

// UpdateUserEmailAddressJSONRequestBody defines body for UpdateUserEmailAddress for application/json ContentType.
type UpdateUserEmailAddressJSONRequestBody = UserEmailAddressUpdateInput

// VerifyUserEmailAddressJSONRequestBody defines body for VerifyUserEmailAddress for application/json ContentType.
type VerifyUserEmailAddressJSONRequestBody = EmailAddressVerificationRequestInput

// UpdateDefaultHouseholdJSONRequestBody defines body for UpdateDefaultHousehold for application/json ContentType.
type UpdateDefaultHouseholdJSONRequestBody = ChangeActiveHouseholdInput

// UpdatePasswordJSONRequestBody defines body for UpdatePassword for application/json ContentType.
type UpdatePasswordJSONRequestBody = PasswordUpdateInput

// CheckPermissionsJSONRequestBody defines body for CheckPermissions for application/json ContentType.
type CheckPermissionsJSONRequestBody = UserPermissionsRequestInput

// RefreshTOTPSecretJSONRequestBody defines body for RefreshTOTPSecret for application/json ContentType.
type RefreshTOTPSecretJSONRequestBody = TOTPSecretRefreshInput

// UpdateUserUsernameJSONRequestBody defines body for UpdateUserUsername for application/json ContentType.
type UpdateUserUsernameJSONRequestBody = UsernameUpdateInput

// CreateValidIngredientGroupJSONRequestBody defines body for CreateValidIngredientGroup for application/json ContentType.
type CreateValidIngredientGroupJSONRequestBody = ValidIngredientGroupCreationRequestInput

// UpdateValidIngredientGroupJSONRequestBody defines body for UpdateValidIngredientGroup for application/json ContentType.
type UpdateValidIngredientGroupJSONRequestBody = ValidIngredientGroupUpdateRequestInput

// CreateValidIngredientMeasurementUnitJSONRequestBody defines body for CreateValidIngredientMeasurementUnit for application/json ContentType.
type CreateValidIngredientMeasurementUnitJSONRequestBody = ValidIngredientMeasurementUnitCreationRequestInput

// UpdateValidIngredientMeasurementUnitJSONRequestBody defines body for UpdateValidIngredientMeasurementUnit for application/json ContentType.
type UpdateValidIngredientMeasurementUnitJSONRequestBody = ValidIngredientMeasurementUnitUpdateRequestInput

// CreateValidIngredientPreparationJSONRequestBody defines body for CreateValidIngredientPreparation for application/json ContentType.
type CreateValidIngredientPreparationJSONRequestBody = ValidIngredientPreparationCreationRequestInput

// UpdateValidIngredientPreparationJSONRequestBody defines body for UpdateValidIngredientPreparation for application/json ContentType.
type UpdateValidIngredientPreparationJSONRequestBody = ValidIngredientPreparationUpdateRequestInput

// CreateValidIngredientStateIngredientJSONRequestBody defines body for CreateValidIngredientStateIngredient for application/json ContentType.
type CreateValidIngredientStateIngredientJSONRequestBody = ValidIngredientStateIngredientCreationRequestInput

// UpdateValidIngredientStateIngredientJSONRequestBody defines body for UpdateValidIngredientStateIngredient for application/json ContentType.
type UpdateValidIngredientStateIngredientJSONRequestBody = ValidIngredientStateIngredientUpdateRequestInput

// CreateValidIngredientStateJSONRequestBody defines body for CreateValidIngredientState for application/json ContentType.
type CreateValidIngredientStateJSONRequestBody = ValidIngredientStateCreationRequestInput

// UpdateValidIngredientStateJSONRequestBody defines body for UpdateValidIngredientState for application/json ContentType.
type UpdateValidIngredientStateJSONRequestBody = ValidIngredientStateUpdateRequestInput

// CreateValidIngredientJSONRequestBody defines body for CreateValidIngredient for application/json ContentType.
type CreateValidIngredientJSONRequestBody = ValidIngredientCreationRequestInput

// UpdateValidIngredientJSONRequestBody defines body for UpdateValidIngredient for application/json ContentType.
type UpdateValidIngredientJSONRequestBody = ValidIngredientUpdateRequestInput

// CreateValidInstrumentJSONRequestBody defines body for CreateValidInstrument for application/json ContentType.
type CreateValidInstrumentJSONRequestBody = ValidInstrumentCreationRequestInput

// UpdateValidInstrumentJSONRequestBody defines body for UpdateValidInstrument for application/json ContentType.
type UpdateValidInstrumentJSONRequestBody = ValidInstrumentUpdateRequestInput

// CreateValidMeasurementUnitConversionJSONRequestBody defines body for CreateValidMeasurementUnitConversion for application/json ContentType.
type CreateValidMeasurementUnitConversionJSONRequestBody = ValidMeasurementUnitConversionCreationRequestInput

// UpdateValidMeasurementUnitConversionJSONRequestBody defines body for UpdateValidMeasurementUnitConversion for application/json ContentType.
type UpdateValidMeasurementUnitConversionJSONRequestBody = ValidMeasurementUnitConversionUpdateRequestInput

// CreateValidMeasurementUnitJSONRequestBody defines body for CreateValidMeasurementUnit for application/json ContentType.
type CreateValidMeasurementUnitJSONRequestBody = ValidMeasurementUnitCreationRequestInput

// UpdateValidMeasurementUnitJSONRequestBody defines body for UpdateValidMeasurementUnit for application/json ContentType.
type UpdateValidMeasurementUnitJSONRequestBody = ValidMeasurementUnitUpdateRequestInput

// CreateValidPreparationInstrumentJSONRequestBody defines body for CreateValidPreparationInstrument for application/json ContentType.
type CreateValidPreparationInstrumentJSONRequestBody = ValidPreparationInstrumentCreationRequestInput

// UpdateValidPreparationInstrumentJSONRequestBody defines body for UpdateValidPreparationInstrument for application/json ContentType.
type UpdateValidPreparationInstrumentJSONRequestBody = ValidPreparationInstrumentUpdateRequestInput

// CreateValidPreparationVesselJSONRequestBody defines body for CreateValidPreparationVessel for application/json ContentType.
type CreateValidPreparationVesselJSONRequestBody = ValidPreparationVesselCreationRequestInput

// UpdateValidPreparationVesselJSONRequestBody defines body for UpdateValidPreparationVessel for application/json ContentType.
type UpdateValidPreparationVesselJSONRequestBody = ValidPreparationVesselUpdateRequestInput

// CreateValidPreparationJSONRequestBody defines body for CreateValidPreparation for application/json ContentType.
type CreateValidPreparationJSONRequestBody = ValidPreparationCreationRequestInput

// UpdateValidPreparationJSONRequestBody defines body for UpdateValidPreparation for application/json ContentType.
type UpdateValidPreparationJSONRequestBody = ValidPreparationUpdateRequestInput

// CreateValidVesselJSONRequestBody defines body for CreateValidVessel for application/json ContentType.
type CreateValidVesselJSONRequestBody = ValidVesselCreationRequestInput

// UpdateValidVesselJSONRequestBody defines body for UpdateValidVessel for application/json ContentType.
type UpdateValidVesselJSONRequestBody = ValidVesselUpdateRequestInput

// CreateWebhookJSONRequestBody defines body for CreateWebhook for application/json ContentType.
type CreateWebhookJSONRequestBody = WebhookCreationRequestInput

// CreateWebhookTriggerEventJSONRequestBody defines body for CreateWebhookTriggerEvent for application/json ContentType.
type CreateWebhookTriggerEventJSONRequestBody = WebhookTriggerEventCreationRequestInput

// RunFinalizeMealPlanWorkerJSONRequestBody defines body for RunFinalizeMealPlanWorker for application/json ContentType.
type RunFinalizeMealPlanWorkerJSONRequestBody = FinalizeMealPlansRequest

// POSTUsersJSONRequestBody defines body for POSTUsers for application/json ContentType.
type POSTUsersJSONRequestBody = UserRegistrationInput

// VerifyEmailAddressJSONRequestBody defines body for VerifyEmailAddress for application/json ContentType.
type VerifyEmailAddressJSONRequestBody = EmailAddressVerificationRequestInput

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = UserLoginInput

// AdminLoginJSONRequestBody defines body for AdminLogin for application/json ContentType.
type AdminLoginJSONRequestBody = UserLoginInput

// RequestPasswordResetTokenJSONRequestBody defines body for RequestPasswordResetToken for application/json ContentType.
type RequestPasswordResetTokenJSONRequestBody = PasswordResetTokenCreationRequestInput

// RedeemPasswordResetTokenJSONRequestBody defines body for RedeemPasswordResetToken for application/json ContentType.
type RedeemPasswordResetTokenJSONRequestBody = PasswordResetTokenRedemptionRequestInput

// VerifyTOTPSecretJSONRequestBody defines body for VerifyTOTPSecret for application/json ContentType.
type VerifyTOTPSecretJSONRequestBody = TOTPSecretVerificationInput

// RequestUsernameReminderJSONRequestBody defines body for RequestUsernameReminder for application/json ContentType.
type RequestUsernameReminderJSONRequestBody = UsernameReminderRequestInput

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AdminCycleCookieSecret request
	AdminCycleCookieSecret(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminUpdateUserStatusWithBody request with any body
	AdminUpdateUserStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminUpdateUserStatus(ctx context.Context, body AdminUpdateUserStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuditLogEntriesForHousehold request
	GetAuditLogEntriesForHousehold(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuditLogEntriesForUser request
	GetAuditLogEntriesForUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuditLogEntryByID request
	GetAuditLogEntryByID(ctx context.Context, auditLogEntryID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReceivedHouseholdInvitations request
	GetReceivedHouseholdInvitations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSentHouseholdInvitations request
	GetSentHouseholdInvitations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHouseholdInvitations request
	GetHouseholdInvitations(ctx context.Context, householdInvitationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AcceptHouseholdInvitationWithBody request with any body
	AcceptHouseholdInvitationWithBody(ctx context.Context, householdInvitationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AcceptHouseholdInvitation(ctx context.Context, householdInvitationID string, body AcceptHouseholdInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelHouseholdInvitationWithBody request with any body
	CancelHouseholdInvitationWithBody(ctx context.Context, householdInvitationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CancelHouseholdInvitation(ctx context.Context, householdInvitationID string, body CancelHouseholdInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RejectHouseholdInvitationWithBody request with any body
	RejectHouseholdInvitationWithBody(ctx context.Context, householdInvitationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RejectHouseholdInvitation(ctx context.Context, householdInvitationID string, body RejectHouseholdInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHouseholds request
	GetHouseholds(ctx context.Context, params *GetHouseholdsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHouseholdWithBody request with any body
	CreateHouseholdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHousehold(ctx context.Context, body CreateHouseholdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetActiveHousehold request
	GetActiveHousehold(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHouseholdInstrumentOwnerships request
	GetHouseholdInstrumentOwnerships(ctx context.Context, params *GetHouseholdInstrumentOwnershipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHouseholdInstrumentOwnershipWithBody request with any body
	CreateHouseholdInstrumentOwnershipWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHouseholdInstrumentOwnership(ctx context.Context, body CreateHouseholdInstrumentOwnershipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveHouseholdInstrumentOwnership request
	ArchiveHouseholdInstrumentOwnership(ctx context.Context, householdInstrumentOwnershipID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHouseholdInstrumentOwnership request
	GetHouseholdInstrumentOwnership(ctx context.Context, householdInstrumentOwnershipID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateHouseholdInstrumentOwnershipWithBody request with any body
	UpdateHouseholdInstrumentOwnershipWithBody(ctx context.Context, householdInstrumentOwnershipID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateHouseholdInstrumentOwnership(ctx context.Context, householdInstrumentOwnershipID string, body UpdateHouseholdInstrumentOwnershipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveHousehold request
	ArchiveHousehold(ctx context.Context, householdID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHousehold request
	GetHousehold(ctx context.Context, householdID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateHouseholdWithBody request with any body
	UpdateHouseholdWithBody(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateHousehold(ctx context.Context, householdID string, body UpdateHouseholdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetDefaultHousehold request
	SetDefaultHousehold(ctx context.Context, householdID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateHouseholdInvitationWithBody request with any body
	CreateHouseholdInvitationWithBody(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateHouseholdInvitation(ctx context.Context, householdID string, body CreateHouseholdInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHouseholdInvitationByID request
	GetHouseholdInvitationByID(ctx context.Context, householdID string, householdInvitationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTHouseholdsHouseholdIDInviteWithBody request with any body
	POSTHouseholdsHouseholdIDInviteWithBody(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTHouseholdsHouseholdIDInvite(ctx context.Context, householdID string, body POSTHouseholdsHouseholdIDInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveUserMembership request
	ArchiveUserMembership(ctx context.Context, householdID string, userID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateHouseholdMemberPermissionsWithBody request with any body
	UpdateHouseholdMemberPermissionsWithBody(ctx context.Context, householdID string, userID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateHouseholdMemberPermissions(ctx context.Context, householdID string, userID string, body UpdateHouseholdMemberPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TransferHouseholdOwnershipWithBody request with any body
	TransferHouseholdOwnershipWithBody(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TransferHouseholdOwnership(ctx context.Context, householdID string, body TransferHouseholdOwnershipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMealPlans request
	GetMealPlans(ctx context.Context, params *GetMealPlansParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMealPlanWithBody request with any body
	CreateMealPlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMealPlan(ctx context.Context, body CreateMealPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveMealPlan request
	ArchiveMealPlan(ctx context.Context, mealPlanID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMealPlan request
	GetMealPlan(ctx context.Context, mealPlanID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMealPlanWithBody request with any body
	UpdateMealPlanWithBody(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateMealPlan(ctx context.Context, mealPlanID string, body UpdateMealPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMealPlanEvents request
	GetMealPlanEvents(ctx context.Context, mealPlanID string, params *GetMealPlanEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMealPlanEventWithBody request with any body
	CreateMealPlanEventWithBody(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMealPlanEvent(ctx context.Context, mealPlanID string, body CreateMealPlanEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveMealPlanEvent request
	ArchiveMealPlanEvent(ctx context.Context, mealPlanID string, mealPlanEventID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMealPlanEvent request
	GetMealPlanEvent(ctx context.Context, mealPlanID string, mealPlanEventID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMealPlanEventWithBody request with any body
	UpdateMealPlanEventWithBody(ctx context.Context, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateMealPlanEvent(ctx context.Context, mealPlanID string, mealPlanEventID string, body UpdateMealPlanEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMealPlanOptions request
	GetMealPlanOptions(ctx context.Context, mealPlanID string, mealPlanEventID string, params *GetMealPlanOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMealPlanOptionWithBody request with any body
	CreateMealPlanOptionWithBody(ctx context.Context, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMealPlanOption(ctx context.Context, mealPlanID string, mealPlanEventID string, body CreateMealPlanOptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveMealPlanOption request
	ArchiveMealPlanOption(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMealPlanOption request
	GetMealPlanOption(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMealPlanOptionWithBody request with any body
	UpdateMealPlanOptionWithBody(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateMealPlanOption(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, body UpdateMealPlanOptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMealPlanOptionVotes request
	GetMealPlanOptionVotes(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, params *GetMealPlanOptionVotesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveMealPlanOptionVote request
	ArchiveMealPlanOptionVote(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMealPlanOptionVote request
	GetMealPlanOptionVote(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMealPlanOptionVoteWithBody request with any body
	UpdateMealPlanOptionVoteWithBody(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateMealPlanOptionVote(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, body UpdateMealPlanOptionVoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMealPlanVoteWithBody request with any body
	CreateMealPlanVoteWithBody(ctx context.Context, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMealPlanVote(ctx context.Context, mealPlanID string, mealPlanEventID string, body CreateMealPlanVoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FinalizeMealPlan request
	FinalizeMealPlan(ctx context.Context, mealPlanID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMealPlanGroceryListItems request
	GetMealPlanGroceryListItems(ctx context.Context, mealPlanID string, params *GetMealPlanGroceryListItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMealPlanGroceryListItemWithBody request with any body
	CreateMealPlanGroceryListItemWithBody(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMealPlanGroceryListItem(ctx context.Context, mealPlanID string, body CreateMealPlanGroceryListItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveMealPlanGroceryListItem request
	ArchiveMealPlanGroceryListItem(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMealPlanGroceryListItem request
	GetMealPlanGroceryListItem(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMealPlanGroceryListItemWithBody request with any body
	UpdateMealPlanGroceryListItemWithBody(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateMealPlanGroceryListItem(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, body UpdateMealPlanGroceryListItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMealPlanTasks request
	GetMealPlanTasks(ctx context.Context, mealPlanID string, params *GetMealPlanTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMealPlanTaskWithBody request with any body
	CreateMealPlanTaskWithBody(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMealPlanTask(ctx context.Context, mealPlanID string, body CreateMealPlanTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMealPlanTask request
	GetMealPlanTask(ctx context.Context, mealPlanID string, mealPlanTaskID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMealPlanTaskWithBody request with any body
	UpdateMealPlanTaskWithBody(ctx context.Context, mealPlanID string, mealPlanTaskID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateMealPlanTask(ctx context.Context, mealPlanID string, mealPlanTaskID string, body UpdateMealPlanTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMeals request
	GetMeals(ctx context.Context, params *GetMealsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMealWithBody request with any body
	CreateMealWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMeal(ctx context.Context, body CreateMealJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchForMeals request
	SearchForMeals(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveMeal request
	ArchiveMeal(ctx context.Context, mealID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMeal request
	GetMeal(ctx context.Context, mealID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOAuth2Clients request
	GetOAuth2Clients(ctx context.Context, params *GetOAuth2ClientsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOAuth2ClientWithBody request with any body
	CreateOAuth2ClientWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOAuth2Client(ctx context.Context, body CreateOAuth2ClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveOAuth2Client request
	ArchiveOAuth2Client(ctx context.Context, oauth2ClientID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOAuth2Client request
	GetOAuth2Client(ctx context.Context, oauth2ClientID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipes request
	GetRecipes(ctx context.Context, params *GetRecipesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRecipeWithBody request with any body
	CreateRecipeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRecipe(ctx context.Context, body CreateRecipeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchForRecipes request
	SearchForRecipes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveRecipe request
	ArchiveRecipe(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipe request
	GetRecipe(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRecipeWithBody request with any body
	UpdateRecipeWithBody(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRecipe(ctx context.Context, recipeID string, body UpdateRecipeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CloneRecipe request
	CloneRecipe(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipeDAG request
	GetRecipeDAG(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTRecipesRecipeIDImages request
	POSTRecipesRecipeIDImages(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETRecipesRecipeIDMermaid request
	GETRecipesRecipeIDMermaid(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipePrepTaskStep request
	GetRecipePrepTaskStep(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipePrepTasks request
	GetRecipePrepTasks(ctx context.Context, recipeID string, params *GetRecipePrepTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRecipePrepTaskWithBody request with any body
	CreateRecipePrepTaskWithBody(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRecipePrepTask(ctx context.Context, recipeID string, body CreateRecipePrepTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveRecipePrepTask request
	ArchiveRecipePrepTask(ctx context.Context, recipeID string, recipePrepTaskID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipePrepTask request
	GetRecipePrepTask(ctx context.Context, recipeID string, recipePrepTaskID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRecipePrepTaskWithBody request with any body
	UpdateRecipePrepTaskWithBody(ctx context.Context, recipeID string, recipePrepTaskID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRecipePrepTask(ctx context.Context, recipeID string, recipePrepTaskID string, body UpdateRecipePrepTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipeRatings request
	GetRecipeRatings(ctx context.Context, recipeID string, params *GetRecipeRatingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRecipeRatingWithBody request with any body
	CreateRecipeRatingWithBody(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRecipeRating(ctx context.Context, recipeID string, body CreateRecipeRatingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveRecipeRating request
	ArchiveRecipeRating(ctx context.Context, recipeID string, recipeRatingID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipeRating request
	GetRecipeRating(ctx context.Context, recipeID string, recipeRatingID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRecipeRatingWithBody request with any body
	UpdateRecipeRatingWithBody(ctx context.Context, recipeID string, recipeRatingID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRecipeRating(ctx context.Context, recipeID string, recipeRatingID string, body UpdateRecipeRatingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipeSteps request
	GetRecipeSteps(ctx context.Context, recipeID string, params *GetRecipeStepsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRecipeStepWithBody request with any body
	CreateRecipeStepWithBody(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRecipeStep(ctx context.Context, recipeID string, body CreateRecipeStepJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveRecipeStep request
	ArchiveRecipeStep(ctx context.Context, recipeID string, recipeStepID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipeStep request
	GetRecipeStep(ctx context.Context, recipeID string, recipeStepID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRecipeStepWithBody request with any body
	UpdateRecipeStepWithBody(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRecipeStep(ctx context.Context, recipeID string, recipeStepID string, body UpdateRecipeStepJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipeStepCompletionConditions request
	GetRecipeStepCompletionConditions(ctx context.Context, recipeID string, recipeStepID string, params *GetRecipeStepCompletionConditionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRecipeStepCompletionConditionWithBody request with any body
	CreateRecipeStepCompletionConditionWithBody(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRecipeStepCompletionCondition(ctx context.Context, recipeID string, recipeStepID string, body CreateRecipeStepCompletionConditionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveRecipeStepCompletionCondition request
	ArchiveRecipeStepCompletionCondition(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipeStepCompletionCondition request
	GetRecipeStepCompletionCondition(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRecipeStepCompletionConditionWithBody request with any body
	UpdateRecipeStepCompletionConditionWithBody(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRecipeStepCompletionCondition(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, body UpdateRecipeStepCompletionConditionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTRecipesRecipeIDStepsRecipeStepIDImages request
	POSTRecipesRecipeIDStepsRecipeStepIDImages(ctx context.Context, recipeID string, recipeStepID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipeStepIngredients request
	GetRecipeStepIngredients(ctx context.Context, recipeID string, recipeStepID string, params *GetRecipeStepIngredientsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRecipeStepIngredientWithBody request with any body
	CreateRecipeStepIngredientWithBody(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRecipeStepIngredient(ctx context.Context, recipeID string, recipeStepID string, body CreateRecipeStepIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveRecipeStepIngredient request
	ArchiveRecipeStepIngredient(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipeStepIngredient request
	GetRecipeStepIngredient(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRecipeStepIngredientWithBody request with any body
	UpdateRecipeStepIngredientWithBody(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRecipeStepIngredient(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, body UpdateRecipeStepIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipeStepInstruments request
	GetRecipeStepInstruments(ctx context.Context, recipeID string, recipeStepID string, params *GetRecipeStepInstrumentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRecipeStepInstrumentWithBody request with any body
	CreateRecipeStepInstrumentWithBody(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRecipeStepInstrument(ctx context.Context, recipeID string, recipeStepID string, body CreateRecipeStepInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveRecipeStepInstrument request
	ArchiveRecipeStepInstrument(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipeStepInstrument request
	GetRecipeStepInstrument(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRecipeStepInstrumentWithBody request with any body
	UpdateRecipeStepInstrumentWithBody(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRecipeStepInstrument(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, body UpdateRecipeStepInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipeStepProducts request
	GetRecipeStepProducts(ctx context.Context, recipeID string, recipeStepID string, params *GetRecipeStepProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRecipeStepProductWithBody request with any body
	CreateRecipeStepProductWithBody(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRecipeStepProduct(ctx context.Context, recipeID string, recipeStepID string, body CreateRecipeStepProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveRecipeStepProduct request
	ArchiveRecipeStepProduct(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipeStepProduct request
	GetRecipeStepProduct(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRecipeStepProductWithBody request with any body
	UpdateRecipeStepProductWithBody(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRecipeStepProduct(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, body UpdateRecipeStepProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipeStepVessels request
	GetRecipeStepVessels(ctx context.Context, recipeID string, recipeStepID string, params *GetRecipeStepVesselsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateRecipeStepVesselWithBody request with any body
	CreateRecipeStepVesselWithBody(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRecipeStepVessel(ctx context.Context, recipeID string, recipeStepID string, body CreateRecipeStepVesselJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveRecipeStepVessel request
	ArchiveRecipeStepVessel(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecipeStepVessel request
	GetRecipeStepVessel(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateRecipeStepVesselWithBody request with any body
	UpdateRecipeStepVesselWithBody(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRecipeStepVessel(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, body UpdateRecipeStepVesselJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceSettings request
	GetServiceSettings(ctx context.Context, params *GetServiceSettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateServiceSettingWithBody request with any body
	CreateServiceSettingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateServiceSetting(ctx context.Context, body CreateServiceSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateServiceSettingConfigurationWithBody request with any body
	CreateServiceSettingConfigurationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateServiceSettingConfiguration(ctx context.Context, body CreateServiceSettingConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceSettingConfigurationsForHousehold request
	GetServiceSettingConfigurationsForHousehold(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceSettingConfigurationsForUser request
	GetServiceSettingConfigurationsForUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceSettingConfiguration request
	GetServiceSettingConfiguration(ctx context.Context, serviceSettingConfigurationName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveServiceSettingConfiguration request
	ArchiveServiceSettingConfiguration(ctx context.Context, serviceSettingConfigurationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateServiceSettingConfigurationWithBody request with any body
	UpdateServiceSettingConfigurationWithBody(ctx context.Context, serviceSettingConfigurationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateServiceSettingConfiguration(ctx context.Context, serviceSettingConfigurationID string, body UpdateServiceSettingConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchForServiceSettings request
	SearchForServiceSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveServiceSetting request
	ArchiveServiceSetting(ctx context.Context, serviceSettingID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetServiceSetting request
	GetServiceSetting(ctx context.Context, serviceSettingID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserIngredientPreferences request
	GetUserIngredientPreferences(ctx context.Context, params *GetUserIngredientPreferencesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserIngredientPreferenceWithBody request with any body
	CreateUserIngredientPreferenceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUserIngredientPreference(ctx context.Context, body CreateUserIngredientPreferenceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveUserIngredientPreference request
	ArchiveUserIngredientPreference(ctx context.Context, userIngredientPreferenceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserIngredientPreferenceWithBody request with any body
	UpdateUserIngredientPreferenceWithBody(ctx context.Context, userIngredientPreferenceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserIngredientPreference(ctx context.Context, userIngredientPreferenceID string, body UpdateUserIngredientPreferenceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserNotifications request
	GetUserNotifications(ctx context.Context, params *GetUserNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUserNotificationWithBody request with any body
	CreateUserNotificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUserNotification(ctx context.Context, body CreateUserNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserNotification request
	GetUserNotification(ctx context.Context, userNotificationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserNotificationWithBody request with any body
	UpdateUserNotificationWithBody(ctx context.Context, userNotificationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserNotification(ctx context.Context, userNotificationID string, body UpdateUserNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsers request
	GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadUserAvatarWithBody request with any body
	UploadUserAvatarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UploadUserAvatar(ctx context.Context, body UploadUserAvatarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserDetailsWithBody request with any body
	UpdateUserDetailsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserDetails(ctx context.Context, body UpdateUserDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserEmailAddressWithBody request with any body
	UpdateUserEmailAddressWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserEmailAddress(ctx context.Context, body UpdateUserEmailAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyUserEmailAddressWithBody request with any body
	VerifyUserEmailAddressWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VerifyUserEmailAddress(ctx context.Context, body VerifyUserEmailAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDefaultHouseholdWithBody request with any body
	UpdateDefaultHouseholdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDefaultHousehold(ctx context.Context, body UpdateDefaultHouseholdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePasswordWithBody request with any body
	UpdatePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePassword(ctx context.Context, body UpdatePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckPermissionsWithBody request with any body
	CheckPermissionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CheckPermissions(ctx context.Context, body CheckPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchForUsers request
	SearchForUsers(ctx context.Context, params *SearchForUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSelf request
	GetSelf(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RefreshTOTPSecretWithBody request with any body
	RefreshTOTPSecretWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RefreshTOTPSecret(ctx context.Context, body RefreshTOTPSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserUsernameWithBody request with any body
	UpdateUserUsernameWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserUsername(ctx context.Context, body UpdateUserUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveUser request
	ArchiveUser(ctx context.Context, userID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, userID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidIngredientGroups request
	GetValidIngredientGroups(ctx context.Context, params *GetValidIngredientGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateValidIngredientGroupWithBody request with any body
	CreateValidIngredientGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateValidIngredientGroup(ctx context.Context, body CreateValidIngredientGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchForValidIngredientGroups request
	SearchForValidIngredientGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveValidIngredientGroup request
	ArchiveValidIngredientGroup(ctx context.Context, validIngredientGroupID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidIngredientGroup request
	GetValidIngredientGroup(ctx context.Context, validIngredientGroupID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateValidIngredientGroupWithBody request with any body
	UpdateValidIngredientGroupWithBody(ctx context.Context, validIngredientGroupID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateValidIngredientGroup(ctx context.Context, validIngredientGroupID string, body UpdateValidIngredientGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidIngredientMeasurementUnits request
	GetValidIngredientMeasurementUnits(ctx context.Context, params *GetValidIngredientMeasurementUnitsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateValidIngredientMeasurementUnitWithBody request with any body
	CreateValidIngredientMeasurementUnitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateValidIngredientMeasurementUnit(ctx context.Context, body CreateValidIngredientMeasurementUnitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidIngredientMeasurementUnitsByIngredient request
	GetValidIngredientMeasurementUnitsByIngredient(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidIngredientMeasurementUnitsByMeasurementUnit request
	GetValidIngredientMeasurementUnitsByMeasurementUnit(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveValidIngredientMeasurementUnit request
	ArchiveValidIngredientMeasurementUnit(ctx context.Context, validIngredientMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidIngredientMeasurementUnit request
	GetValidIngredientMeasurementUnit(ctx context.Context, validIngredientMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateValidIngredientMeasurementUnitWithBody request with any body
	UpdateValidIngredientMeasurementUnitWithBody(ctx context.Context, validIngredientMeasurementUnitID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateValidIngredientMeasurementUnit(ctx context.Context, validIngredientMeasurementUnitID string, body UpdateValidIngredientMeasurementUnitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidIngredientPreparations request
	GetValidIngredientPreparations(ctx context.Context, params *GetValidIngredientPreparationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateValidIngredientPreparationWithBody request with any body
	CreateValidIngredientPreparationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateValidIngredientPreparation(ctx context.Context, body CreateValidIngredientPreparationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidIngredientPreparationsByIngredient request
	GetValidIngredientPreparationsByIngredient(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidIngredientPreparationsByPreparation request
	GetValidIngredientPreparationsByPreparation(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveValidIngredientPreparation request
	ArchiveValidIngredientPreparation(ctx context.Context, validIngredientPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidIngredientPreparation request
	GetValidIngredientPreparation(ctx context.Context, validIngredientPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateValidIngredientPreparationWithBody request with any body
	UpdateValidIngredientPreparationWithBody(ctx context.Context, validIngredientPreparationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateValidIngredientPreparation(ctx context.Context, validIngredientPreparationID string, body UpdateValidIngredientPreparationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidIngredientStateIngredients request
	GetValidIngredientStateIngredients(ctx context.Context, params *GetValidIngredientStateIngredientsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateValidIngredientStateIngredientWithBody request with any body
	CreateValidIngredientStateIngredientWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateValidIngredientStateIngredient(ctx context.Context, body CreateValidIngredientStateIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidIngredientStateIngredientsByIngredient request
	GetValidIngredientStateIngredientsByIngredient(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidIngredientStateIngredientsByIngredientState request
	GetValidIngredientStateIngredientsByIngredientState(ctx context.Context, validIngredientStateID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveValidIngredientStateIngredient request
	ArchiveValidIngredientStateIngredient(ctx context.Context, validIngredientStateIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidIngredientStateIngredient request
	GetValidIngredientStateIngredient(ctx context.Context, validIngredientStateIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateValidIngredientStateIngredientWithBody request with any body
	UpdateValidIngredientStateIngredientWithBody(ctx context.Context, validIngredientStateIngredientID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateValidIngredientStateIngredient(ctx context.Context, validIngredientStateIngredientID string, body UpdateValidIngredientStateIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidIngredientStates request
	GetValidIngredientStates(ctx context.Context, params *GetValidIngredientStatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateValidIngredientStateWithBody request with any body
	CreateValidIngredientStateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateValidIngredientState(ctx context.Context, body CreateValidIngredientStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchForValidIngredientStates request
	SearchForValidIngredientStates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveValidIngredientState request
	ArchiveValidIngredientState(ctx context.Context, validIngredientStateID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidIngredientState request
	GetValidIngredientState(ctx context.Context, validIngredientStateID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateValidIngredientStateWithBody request with any body
	UpdateValidIngredientStateWithBody(ctx context.Context, validIngredientStateID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateValidIngredientState(ctx context.Context, validIngredientStateID string, body UpdateValidIngredientStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidIngredients request
	GetValidIngredients(ctx context.Context, params *GetValidIngredientsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateValidIngredientWithBody request with any body
	CreateValidIngredientWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateValidIngredient(ctx context.Context, body CreateValidIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidIngredientsByPreparation request
	GetValidIngredientsByPreparation(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRandomValidIngredient request
	GetRandomValidIngredient(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchForValidIngredients request
	SearchForValidIngredients(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveValidIngredient request
	ArchiveValidIngredient(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidIngredient request
	GetValidIngredient(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateValidIngredientWithBody request with any body
	UpdateValidIngredientWithBody(ctx context.Context, validIngredientID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateValidIngredient(ctx context.Context, validIngredientID string, body UpdateValidIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidInstruments request
	GetValidInstruments(ctx context.Context, params *GetValidInstrumentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateValidInstrumentWithBody request with any body
	CreateValidInstrumentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateValidInstrument(ctx context.Context, body CreateValidInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRandomValidInstrument request
	GetRandomValidInstrument(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchForValidInstruments request
	SearchForValidInstruments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveValidInstrument request
	ArchiveValidInstrument(ctx context.Context, validInstrumentID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidInstrument request
	GetValidInstrument(ctx context.Context, validInstrumentID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateValidInstrumentWithBody request with any body
	UpdateValidInstrumentWithBody(ctx context.Context, validInstrumentID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateValidInstrument(ctx context.Context, validInstrumentID string, body UpdateValidInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateValidMeasurementUnitConversionWithBody request with any body
	CreateValidMeasurementUnitConversionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateValidMeasurementUnitConversion(ctx context.Context, body CreateValidMeasurementUnitConversionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidMeasurementUnitConversionsFromUnit request
	GetValidMeasurementUnitConversionsFromUnit(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidMeasurementUnitConversionsToUnit request
	ValidMeasurementUnitConversionsToUnit(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveValidMeasurementUnitConversion request
	ArchiveValidMeasurementUnitConversion(ctx context.Context, validMeasurementUnitConversionID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidMeasurementUnitConversion request
	GetValidMeasurementUnitConversion(ctx context.Context, validMeasurementUnitConversionID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateValidMeasurementUnitConversionWithBody request with any body
	UpdateValidMeasurementUnitConversionWithBody(ctx context.Context, validMeasurementUnitConversionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateValidMeasurementUnitConversion(ctx context.Context, validMeasurementUnitConversionID string, body UpdateValidMeasurementUnitConversionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidMeasurementUnits request
	GetValidMeasurementUnits(ctx context.Context, params *GetValidMeasurementUnitsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateValidMeasurementUnitWithBody request with any body
	CreateValidMeasurementUnitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateValidMeasurementUnit(ctx context.Context, body CreateValidMeasurementUnitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidMeasurementUnitsByIngredient request
	GetValidMeasurementUnitsByIngredient(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchForValidMeasurementUnits request
	SearchForValidMeasurementUnits(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveValidMeasurementUnit request
	ArchiveValidMeasurementUnit(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidMeasurementUnit request
	GetValidMeasurementUnit(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateValidMeasurementUnitWithBody request with any body
	UpdateValidMeasurementUnitWithBody(ctx context.Context, validMeasurementUnitID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateValidMeasurementUnit(ctx context.Context, validMeasurementUnitID string, body UpdateValidMeasurementUnitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidPreparationInstruments request
	GetValidPreparationInstruments(ctx context.Context, params *GetValidPreparationInstrumentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateValidPreparationInstrumentWithBody request with any body
	CreateValidPreparationInstrumentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateValidPreparationInstrument(ctx context.Context, body CreateValidPreparationInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidPreparationInstrumentsByInstrument request
	GetValidPreparationInstrumentsByInstrument(ctx context.Context, validInstrumentID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidPreparationInstrumentsByPreparation request
	GetValidPreparationInstrumentsByPreparation(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveValidPreparationInstrument request
	ArchiveValidPreparationInstrument(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidPreparationInstrument request
	GetValidPreparationInstrument(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateValidPreparationInstrumentWithBody request with any body
	UpdateValidPreparationInstrumentWithBody(ctx context.Context, validPreparationVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateValidPreparationInstrument(ctx context.Context, validPreparationVesselID string, body UpdateValidPreparationInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidPreparationVessels request
	GetValidPreparationVessels(ctx context.Context, params *GetValidPreparationVesselsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateValidPreparationVesselWithBody request with any body
	CreateValidPreparationVesselWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateValidPreparationVessel(ctx context.Context, body CreateValidPreparationVesselJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidPreparationVesselsByPreparation request
	GetValidPreparationVesselsByPreparation(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidPreparationVesselsByVessel request
	GetValidPreparationVesselsByVessel(ctx context.Context, validVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveValidPreparationVessel request
	ArchiveValidPreparationVessel(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidPreparationVessel request
	GetValidPreparationVessel(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateValidPreparationVesselWithBody request with any body
	UpdateValidPreparationVesselWithBody(ctx context.Context, validPreparationVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateValidPreparationVessel(ctx context.Context, validPreparationVesselID string, body UpdateValidPreparationVesselJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidPreparations request
	GetValidPreparations(ctx context.Context, params *GetValidPreparationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateValidPreparationWithBody request with any body
	CreateValidPreparationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateValidPreparation(ctx context.Context, body CreateValidPreparationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRandomValidPreparation request
	GetRandomValidPreparation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchForValidPreparations request
	SearchForValidPreparations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveValidPreparation request
	ArchiveValidPreparation(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidPreparation request
	GetValidPreparation(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateValidPreparationWithBody request with any body
	UpdateValidPreparationWithBody(ctx context.Context, validPreparationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateValidPreparation(ctx context.Context, validPreparationID string, body UpdateValidPreparationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidVessels request
	GetValidVessels(ctx context.Context, params *GetValidVesselsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateValidVesselWithBody request with any body
	CreateValidVesselWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateValidVessel(ctx context.Context, body CreateValidVesselJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRandomValidVessel request
	GetRandomValidVessel(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchForValidVessels request
	SearchForValidVessels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveValidVessel request
	ArchiveValidVessel(ctx context.Context, validVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValidVessel request
	GetValidVessel(ctx context.Context, validVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateValidVesselWithBody request with any body
	UpdateValidVesselWithBody(ctx context.Context, validVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateValidVessel(ctx context.Context, validVesselID string, body UpdateValidVesselJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWebhooks request
	GetWebhooks(ctx context.Context, params *GetWebhooksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWebhookWithBody request with any body
	CreateWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWebhook(ctx context.Context, body CreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveWebhook request
	ArchiveWebhook(ctx context.Context, webhookID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWebhook request
	GetWebhook(ctx context.Context, webhookID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWebhookTriggerEventWithBody request with any body
	CreateWebhookTriggerEventWithBody(ctx context.Context, webhookID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWebhookTriggerEvent(ctx context.Context, webhookID string, body CreateWebhookTriggerEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ArchiveWebhookTriggerEvent request
	ArchiveWebhookTriggerEvent(ctx context.Context, webhookID string, webhookTriggerEventID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RunFinalizeMealPlanWorkerWithBody request with any body
	RunFinalizeMealPlanWorkerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RunFinalizeMealPlanWorker(ctx context.Context, body RunFinalizeMealPlanWorkerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RunMealPlanGroceryListInitializerWorker request
	RunMealPlanGroceryListInitializerWorker(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RunMealPlanTaskCreatorWorker request
	RunMealPlanTaskCreatorWorker(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthStatus request
	GetAuthStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETOauth2Authorize request
	GETOauth2Authorize(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTOauth2Token request
	POSTOauth2Token(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTUsersWithBody request with any body
	POSTUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTUsers(ctx context.Context, body POSTUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyEmailAddressWithBody request with any body
	VerifyEmailAddressWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VerifyEmailAddress(ctx context.Context, body VerifyEmailAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginWithBody request with any body
	LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminLoginWithBody request with any body
	AdminLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminLogin(ctx context.Context, body AdminLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Logout request
	Logout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RequestPasswordResetTokenWithBody request with any body
	RequestPasswordResetTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RequestPasswordResetToken(ctx context.Context, body RequestPasswordResetTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RedeemPasswordResetTokenWithBody request with any body
	RedeemPasswordResetTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RedeemPasswordResetToken(ctx context.Context, body RedeemPasswordResetTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// VerifyTOTPSecretWithBody request with any body
	VerifyTOTPSecretWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	VerifyTOTPSecret(ctx context.Context, body VerifyTOTPSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RequestUsernameReminderWithBody request with any body
	RequestUsernameReminderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RequestUsernameReminder(ctx context.Context, body RequestUsernameReminderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AdminCycleCookieSecret(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminCycleCookieSecretRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUpdateUserStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUpdateUserStatusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUpdateUserStatus(ctx context.Context, body AdminUpdateUserStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUpdateUserStatusRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuditLogEntriesForHousehold(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuditLogEntriesForHouseholdRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuditLogEntriesForUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuditLogEntriesForUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuditLogEntryByID(ctx context.Context, auditLogEntryID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuditLogEntryByIDRequest(c.Server, auditLogEntryID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReceivedHouseholdInvitations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReceivedHouseholdInvitationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSentHouseholdInvitations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSentHouseholdInvitationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHouseholdInvitations(ctx context.Context, householdInvitationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHouseholdInvitationsRequest(c.Server, householdInvitationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcceptHouseholdInvitationWithBody(ctx context.Context, householdInvitationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcceptHouseholdInvitationRequestWithBody(c.Server, householdInvitationID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AcceptHouseholdInvitation(ctx context.Context, householdInvitationID string, body AcceptHouseholdInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAcceptHouseholdInvitationRequest(c.Server, householdInvitationID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelHouseholdInvitationWithBody(ctx context.Context, householdInvitationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelHouseholdInvitationRequestWithBody(c.Server, householdInvitationID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelHouseholdInvitation(ctx context.Context, householdInvitationID string, body CancelHouseholdInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelHouseholdInvitationRequest(c.Server, householdInvitationID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RejectHouseholdInvitationWithBody(ctx context.Context, householdInvitationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRejectHouseholdInvitationRequestWithBody(c.Server, householdInvitationID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RejectHouseholdInvitation(ctx context.Context, householdInvitationID string, body RejectHouseholdInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRejectHouseholdInvitationRequest(c.Server, householdInvitationID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHouseholds(ctx context.Context, params *GetHouseholdsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHouseholdsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHouseholdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHouseholdRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHousehold(ctx context.Context, body CreateHouseholdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHouseholdRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetActiveHousehold(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetActiveHouseholdRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHouseholdInstrumentOwnerships(ctx context.Context, params *GetHouseholdInstrumentOwnershipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHouseholdInstrumentOwnershipsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHouseholdInstrumentOwnershipWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHouseholdInstrumentOwnershipRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHouseholdInstrumentOwnership(ctx context.Context, body CreateHouseholdInstrumentOwnershipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHouseholdInstrumentOwnershipRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveHouseholdInstrumentOwnership(ctx context.Context, householdInstrumentOwnershipID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveHouseholdInstrumentOwnershipRequest(c.Server, householdInstrumentOwnershipID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHouseholdInstrumentOwnership(ctx context.Context, householdInstrumentOwnershipID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHouseholdInstrumentOwnershipRequest(c.Server, householdInstrumentOwnershipID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateHouseholdInstrumentOwnershipWithBody(ctx context.Context, householdInstrumentOwnershipID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateHouseholdInstrumentOwnershipRequestWithBody(c.Server, householdInstrumentOwnershipID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateHouseholdInstrumentOwnership(ctx context.Context, householdInstrumentOwnershipID string, body UpdateHouseholdInstrumentOwnershipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateHouseholdInstrumentOwnershipRequest(c.Server, householdInstrumentOwnershipID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveHousehold(ctx context.Context, householdID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveHouseholdRequest(c.Server, householdID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHousehold(ctx context.Context, householdID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHouseholdRequest(c.Server, householdID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateHouseholdWithBody(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateHouseholdRequestWithBody(c.Server, householdID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateHousehold(ctx context.Context, householdID string, body UpdateHouseholdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateHouseholdRequest(c.Server, householdID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetDefaultHousehold(ctx context.Context, householdID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetDefaultHouseholdRequest(c.Server, householdID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHouseholdInvitationWithBody(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHouseholdInvitationRequestWithBody(c.Server, householdID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateHouseholdInvitation(ctx context.Context, householdID string, body CreateHouseholdInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateHouseholdInvitationRequest(c.Server, householdID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHouseholdInvitationByID(ctx context.Context, householdID string, householdInvitationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHouseholdInvitationByIDRequest(c.Server, householdID, householdInvitationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTHouseholdsHouseholdIDInviteWithBody(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTHouseholdsHouseholdIDInviteRequestWithBody(c.Server, householdID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTHouseholdsHouseholdIDInvite(ctx context.Context, householdID string, body POSTHouseholdsHouseholdIDInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTHouseholdsHouseholdIDInviteRequest(c.Server, householdID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveUserMembership(ctx context.Context, householdID string, userID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveUserMembershipRequest(c.Server, householdID, userID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateHouseholdMemberPermissionsWithBody(ctx context.Context, householdID string, userID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateHouseholdMemberPermissionsRequestWithBody(c.Server, householdID, userID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateHouseholdMemberPermissions(ctx context.Context, householdID string, userID string, body UpdateHouseholdMemberPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateHouseholdMemberPermissionsRequest(c.Server, householdID, userID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TransferHouseholdOwnershipWithBody(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTransferHouseholdOwnershipRequestWithBody(c.Server, householdID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TransferHouseholdOwnership(ctx context.Context, householdID string, body TransferHouseholdOwnershipJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTransferHouseholdOwnershipRequest(c.Server, householdID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMealPlans(ctx context.Context, params *GetMealPlansParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMealPlansRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMealPlanWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMealPlanRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMealPlan(ctx context.Context, body CreateMealPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMealPlanRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveMealPlan(ctx context.Context, mealPlanID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveMealPlanRequest(c.Server, mealPlanID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMealPlan(ctx context.Context, mealPlanID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMealPlanRequest(c.Server, mealPlanID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMealPlanWithBody(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMealPlanRequestWithBody(c.Server, mealPlanID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMealPlan(ctx context.Context, mealPlanID string, body UpdateMealPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMealPlanRequest(c.Server, mealPlanID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMealPlanEvents(ctx context.Context, mealPlanID string, params *GetMealPlanEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMealPlanEventsRequest(c.Server, mealPlanID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMealPlanEventWithBody(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMealPlanEventRequestWithBody(c.Server, mealPlanID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMealPlanEvent(ctx context.Context, mealPlanID string, body CreateMealPlanEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMealPlanEventRequest(c.Server, mealPlanID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveMealPlanEvent(ctx context.Context, mealPlanID string, mealPlanEventID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveMealPlanEventRequest(c.Server, mealPlanID, mealPlanEventID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMealPlanEvent(ctx context.Context, mealPlanID string, mealPlanEventID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMealPlanEventRequest(c.Server, mealPlanID, mealPlanEventID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMealPlanEventWithBody(ctx context.Context, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMealPlanEventRequestWithBody(c.Server, mealPlanID, mealPlanEventID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMealPlanEvent(ctx context.Context, mealPlanID string, mealPlanEventID string, body UpdateMealPlanEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMealPlanEventRequest(c.Server, mealPlanID, mealPlanEventID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMealPlanOptions(ctx context.Context, mealPlanID string, mealPlanEventID string, params *GetMealPlanOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMealPlanOptionsRequest(c.Server, mealPlanID, mealPlanEventID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMealPlanOptionWithBody(ctx context.Context, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMealPlanOptionRequestWithBody(c.Server, mealPlanID, mealPlanEventID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMealPlanOption(ctx context.Context, mealPlanID string, mealPlanEventID string, body CreateMealPlanOptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMealPlanOptionRequest(c.Server, mealPlanID, mealPlanEventID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveMealPlanOption(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveMealPlanOptionRequest(c.Server, mealPlanID, mealPlanEventID, mealPlanOptionID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMealPlanOption(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMealPlanOptionRequest(c.Server, mealPlanID, mealPlanEventID, mealPlanOptionID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMealPlanOptionWithBody(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMealPlanOptionRequestWithBody(c.Server, mealPlanID, mealPlanEventID, mealPlanOptionID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMealPlanOption(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, body UpdateMealPlanOptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMealPlanOptionRequest(c.Server, mealPlanID, mealPlanEventID, mealPlanOptionID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMealPlanOptionVotes(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, params *GetMealPlanOptionVotesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMealPlanOptionVotesRequest(c.Server, mealPlanID, mealPlanEventID, mealPlanOptionID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveMealPlanOptionVote(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveMealPlanOptionVoteRequest(c.Server, mealPlanID, mealPlanEventID, mealPlanOptionID, mealPlanOptionVoteID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMealPlanOptionVote(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMealPlanOptionVoteRequest(c.Server, mealPlanID, mealPlanEventID, mealPlanOptionID, mealPlanOptionVoteID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMealPlanOptionVoteWithBody(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMealPlanOptionVoteRequestWithBody(c.Server, mealPlanID, mealPlanEventID, mealPlanOptionID, mealPlanOptionVoteID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMealPlanOptionVote(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, body UpdateMealPlanOptionVoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMealPlanOptionVoteRequest(c.Server, mealPlanID, mealPlanEventID, mealPlanOptionID, mealPlanOptionVoteID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMealPlanVoteWithBody(ctx context.Context, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMealPlanVoteRequestWithBody(c.Server, mealPlanID, mealPlanEventID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMealPlanVote(ctx context.Context, mealPlanID string, mealPlanEventID string, body CreateMealPlanVoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMealPlanVoteRequest(c.Server, mealPlanID, mealPlanEventID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FinalizeMealPlan(ctx context.Context, mealPlanID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFinalizeMealPlanRequest(c.Server, mealPlanID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMealPlanGroceryListItems(ctx context.Context, mealPlanID string, params *GetMealPlanGroceryListItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMealPlanGroceryListItemsRequest(c.Server, mealPlanID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMealPlanGroceryListItemWithBody(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMealPlanGroceryListItemRequestWithBody(c.Server, mealPlanID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMealPlanGroceryListItem(ctx context.Context, mealPlanID string, body CreateMealPlanGroceryListItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMealPlanGroceryListItemRequest(c.Server, mealPlanID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveMealPlanGroceryListItem(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveMealPlanGroceryListItemRequest(c.Server, mealPlanID, mealPlanGroceryListItemID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMealPlanGroceryListItem(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMealPlanGroceryListItemRequest(c.Server, mealPlanID, mealPlanGroceryListItemID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMealPlanGroceryListItemWithBody(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMealPlanGroceryListItemRequestWithBody(c.Server, mealPlanID, mealPlanGroceryListItemID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMealPlanGroceryListItem(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, body UpdateMealPlanGroceryListItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMealPlanGroceryListItemRequest(c.Server, mealPlanID, mealPlanGroceryListItemID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMealPlanTasks(ctx context.Context, mealPlanID string, params *GetMealPlanTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMealPlanTasksRequest(c.Server, mealPlanID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMealPlanTaskWithBody(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMealPlanTaskRequestWithBody(c.Server, mealPlanID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMealPlanTask(ctx context.Context, mealPlanID string, body CreateMealPlanTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMealPlanTaskRequest(c.Server, mealPlanID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMealPlanTask(ctx context.Context, mealPlanID string, mealPlanTaskID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMealPlanTaskRequest(c.Server, mealPlanID, mealPlanTaskID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMealPlanTaskWithBody(ctx context.Context, mealPlanID string, mealPlanTaskID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMealPlanTaskRequestWithBody(c.Server, mealPlanID, mealPlanTaskID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMealPlanTask(ctx context.Context, mealPlanID string, mealPlanTaskID string, body UpdateMealPlanTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMealPlanTaskRequest(c.Server, mealPlanID, mealPlanTaskID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMeals(ctx context.Context, params *GetMealsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMealsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMealWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMealRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMeal(ctx context.Context, body CreateMealJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMealRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchForMeals(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchForMealsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveMeal(ctx context.Context, mealID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveMealRequest(c.Server, mealID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMeal(ctx context.Context, mealID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMealRequest(c.Server, mealID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOAuth2Clients(ctx context.Context, params *GetOAuth2ClientsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOAuth2ClientsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOAuth2ClientWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOAuth2ClientRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOAuth2Client(ctx context.Context, body CreateOAuth2ClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOAuth2ClientRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveOAuth2Client(ctx context.Context, oauth2ClientID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveOAuth2ClientRequest(c.Server, oauth2ClientID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOAuth2Client(ctx context.Context, oauth2ClientID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOAuth2ClientRequest(c.Server, oauth2ClientID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipes(ctx context.Context, params *GetRecipesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRecipeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRecipeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRecipe(ctx context.Context, body CreateRecipeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRecipeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchForRecipes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchForRecipesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveRecipe(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveRecipeRequest(c.Server, recipeID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipe(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipeRequest(c.Server, recipeID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRecipeWithBody(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRecipeRequestWithBody(c.Server, recipeID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRecipe(ctx context.Context, recipeID string, body UpdateRecipeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRecipeRequest(c.Server, recipeID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CloneRecipe(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloneRecipeRequest(c.Server, recipeID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipeDAG(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipeDAGRequest(c.Server, recipeID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTRecipesRecipeIDImages(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTRecipesRecipeIDImagesRequest(c.Server, recipeID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETRecipesRecipeIDMermaid(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETRecipesRecipeIDMermaidRequest(c.Server, recipeID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipePrepTaskStep(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipePrepTaskStepRequest(c.Server, recipeID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipePrepTasks(ctx context.Context, recipeID string, params *GetRecipePrepTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipePrepTasksRequest(c.Server, recipeID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRecipePrepTaskWithBody(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRecipePrepTaskRequestWithBody(c.Server, recipeID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRecipePrepTask(ctx context.Context, recipeID string, body CreateRecipePrepTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRecipePrepTaskRequest(c.Server, recipeID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveRecipePrepTask(ctx context.Context, recipeID string, recipePrepTaskID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveRecipePrepTaskRequest(c.Server, recipeID, recipePrepTaskID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipePrepTask(ctx context.Context, recipeID string, recipePrepTaskID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipePrepTaskRequest(c.Server, recipeID, recipePrepTaskID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRecipePrepTaskWithBody(ctx context.Context, recipeID string, recipePrepTaskID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRecipePrepTaskRequestWithBody(c.Server, recipeID, recipePrepTaskID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRecipePrepTask(ctx context.Context, recipeID string, recipePrepTaskID string, body UpdateRecipePrepTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRecipePrepTaskRequest(c.Server, recipeID, recipePrepTaskID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipeRatings(ctx context.Context, recipeID string, params *GetRecipeRatingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipeRatingsRequest(c.Server, recipeID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRecipeRatingWithBody(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRecipeRatingRequestWithBody(c.Server, recipeID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRecipeRating(ctx context.Context, recipeID string, body CreateRecipeRatingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRecipeRatingRequest(c.Server, recipeID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveRecipeRating(ctx context.Context, recipeID string, recipeRatingID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveRecipeRatingRequest(c.Server, recipeID, recipeRatingID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipeRating(ctx context.Context, recipeID string, recipeRatingID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipeRatingRequest(c.Server, recipeID, recipeRatingID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRecipeRatingWithBody(ctx context.Context, recipeID string, recipeRatingID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRecipeRatingRequestWithBody(c.Server, recipeID, recipeRatingID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRecipeRating(ctx context.Context, recipeID string, recipeRatingID string, body UpdateRecipeRatingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRecipeRatingRequest(c.Server, recipeID, recipeRatingID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipeSteps(ctx context.Context, recipeID string, params *GetRecipeStepsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipeStepsRequest(c.Server, recipeID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRecipeStepWithBody(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRecipeStepRequestWithBody(c.Server, recipeID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRecipeStep(ctx context.Context, recipeID string, body CreateRecipeStepJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRecipeStepRequest(c.Server, recipeID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveRecipeStep(ctx context.Context, recipeID string, recipeStepID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveRecipeStepRequest(c.Server, recipeID, recipeStepID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipeStep(ctx context.Context, recipeID string, recipeStepID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipeStepRequest(c.Server, recipeID, recipeStepID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRecipeStepWithBody(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRecipeStepRequestWithBody(c.Server, recipeID, recipeStepID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRecipeStep(ctx context.Context, recipeID string, recipeStepID string, body UpdateRecipeStepJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRecipeStepRequest(c.Server, recipeID, recipeStepID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipeStepCompletionConditions(ctx context.Context, recipeID string, recipeStepID string, params *GetRecipeStepCompletionConditionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipeStepCompletionConditionsRequest(c.Server, recipeID, recipeStepID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRecipeStepCompletionConditionWithBody(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRecipeStepCompletionConditionRequestWithBody(c.Server, recipeID, recipeStepID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRecipeStepCompletionCondition(ctx context.Context, recipeID string, recipeStepID string, body CreateRecipeStepCompletionConditionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRecipeStepCompletionConditionRequest(c.Server, recipeID, recipeStepID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveRecipeStepCompletionCondition(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveRecipeStepCompletionConditionRequest(c.Server, recipeID, recipeStepID, recipeStepCompletionConditionID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipeStepCompletionCondition(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipeStepCompletionConditionRequest(c.Server, recipeID, recipeStepID, recipeStepCompletionConditionID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRecipeStepCompletionConditionWithBody(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRecipeStepCompletionConditionRequestWithBody(c.Server, recipeID, recipeStepID, recipeStepCompletionConditionID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRecipeStepCompletionCondition(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, body UpdateRecipeStepCompletionConditionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRecipeStepCompletionConditionRequest(c.Server, recipeID, recipeStepID, recipeStepCompletionConditionID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTRecipesRecipeIDStepsRecipeStepIDImages(ctx context.Context, recipeID string, recipeStepID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTRecipesRecipeIDStepsRecipeStepIDImagesRequest(c.Server, recipeID, recipeStepID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipeStepIngredients(ctx context.Context, recipeID string, recipeStepID string, params *GetRecipeStepIngredientsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipeStepIngredientsRequest(c.Server, recipeID, recipeStepID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRecipeStepIngredientWithBody(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRecipeStepIngredientRequestWithBody(c.Server, recipeID, recipeStepID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRecipeStepIngredient(ctx context.Context, recipeID string, recipeStepID string, body CreateRecipeStepIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRecipeStepIngredientRequest(c.Server, recipeID, recipeStepID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveRecipeStepIngredient(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveRecipeStepIngredientRequest(c.Server, recipeID, recipeStepID, recipeStepIngredientID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipeStepIngredient(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipeStepIngredientRequest(c.Server, recipeID, recipeStepID, recipeStepIngredientID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRecipeStepIngredientWithBody(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRecipeStepIngredientRequestWithBody(c.Server, recipeID, recipeStepID, recipeStepIngredientID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRecipeStepIngredient(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, body UpdateRecipeStepIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRecipeStepIngredientRequest(c.Server, recipeID, recipeStepID, recipeStepIngredientID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipeStepInstruments(ctx context.Context, recipeID string, recipeStepID string, params *GetRecipeStepInstrumentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipeStepInstrumentsRequest(c.Server, recipeID, recipeStepID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRecipeStepInstrumentWithBody(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRecipeStepInstrumentRequestWithBody(c.Server, recipeID, recipeStepID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRecipeStepInstrument(ctx context.Context, recipeID string, recipeStepID string, body CreateRecipeStepInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRecipeStepInstrumentRequest(c.Server, recipeID, recipeStepID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveRecipeStepInstrument(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveRecipeStepInstrumentRequest(c.Server, recipeID, recipeStepID, recipeStepInstrumentID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipeStepInstrument(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipeStepInstrumentRequest(c.Server, recipeID, recipeStepID, recipeStepInstrumentID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRecipeStepInstrumentWithBody(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRecipeStepInstrumentRequestWithBody(c.Server, recipeID, recipeStepID, recipeStepInstrumentID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRecipeStepInstrument(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, body UpdateRecipeStepInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRecipeStepInstrumentRequest(c.Server, recipeID, recipeStepID, recipeStepInstrumentID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipeStepProducts(ctx context.Context, recipeID string, recipeStepID string, params *GetRecipeStepProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipeStepProductsRequest(c.Server, recipeID, recipeStepID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRecipeStepProductWithBody(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRecipeStepProductRequestWithBody(c.Server, recipeID, recipeStepID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRecipeStepProduct(ctx context.Context, recipeID string, recipeStepID string, body CreateRecipeStepProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRecipeStepProductRequest(c.Server, recipeID, recipeStepID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveRecipeStepProduct(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveRecipeStepProductRequest(c.Server, recipeID, recipeStepID, recipeStepProductID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipeStepProduct(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipeStepProductRequest(c.Server, recipeID, recipeStepID, recipeStepProductID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRecipeStepProductWithBody(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRecipeStepProductRequestWithBody(c.Server, recipeID, recipeStepID, recipeStepProductID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRecipeStepProduct(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, body UpdateRecipeStepProductJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRecipeStepProductRequest(c.Server, recipeID, recipeStepID, recipeStepProductID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipeStepVessels(ctx context.Context, recipeID string, recipeStepID string, params *GetRecipeStepVesselsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipeStepVesselsRequest(c.Server, recipeID, recipeStepID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRecipeStepVesselWithBody(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRecipeStepVesselRequestWithBody(c.Server, recipeID, recipeStepID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRecipeStepVessel(ctx context.Context, recipeID string, recipeStepID string, body CreateRecipeStepVesselJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRecipeStepVesselRequest(c.Server, recipeID, recipeStepID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveRecipeStepVessel(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveRecipeStepVesselRequest(c.Server, recipeID, recipeStepID, recipeStepVesselID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecipeStepVessel(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecipeStepVesselRequest(c.Server, recipeID, recipeStepID, recipeStepVesselID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRecipeStepVesselWithBody(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRecipeStepVesselRequestWithBody(c.Server, recipeID, recipeStepID, recipeStepVesselID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRecipeStepVessel(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, body UpdateRecipeStepVesselJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRecipeStepVesselRequest(c.Server, recipeID, recipeStepID, recipeStepVesselID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceSettings(ctx context.Context, params *GetServiceSettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceSettingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceSettingWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceSettingRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceSetting(ctx context.Context, body CreateServiceSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceSettingRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceSettingConfigurationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceSettingConfigurationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateServiceSettingConfiguration(ctx context.Context, body CreateServiceSettingConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateServiceSettingConfigurationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceSettingConfigurationsForHousehold(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceSettingConfigurationsForHouseholdRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceSettingConfigurationsForUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceSettingConfigurationsForUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceSettingConfiguration(ctx context.Context, serviceSettingConfigurationName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceSettingConfigurationRequest(c.Server, serviceSettingConfigurationName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveServiceSettingConfiguration(ctx context.Context, serviceSettingConfigurationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveServiceSettingConfigurationRequest(c.Server, serviceSettingConfigurationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateServiceSettingConfigurationWithBody(ctx context.Context, serviceSettingConfigurationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateServiceSettingConfigurationRequestWithBody(c.Server, serviceSettingConfigurationID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateServiceSettingConfiguration(ctx context.Context, serviceSettingConfigurationID string, body UpdateServiceSettingConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateServiceSettingConfigurationRequest(c.Server, serviceSettingConfigurationID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchForServiceSettings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchForServiceSettingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveServiceSetting(ctx context.Context, serviceSettingID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveServiceSettingRequest(c.Server, serviceSettingID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetServiceSetting(ctx context.Context, serviceSettingID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServiceSettingRequest(c.Server, serviceSettingID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserIngredientPreferences(ctx context.Context, params *GetUserIngredientPreferencesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserIngredientPreferencesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserIngredientPreferenceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserIngredientPreferenceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserIngredientPreference(ctx context.Context, body CreateUserIngredientPreferenceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserIngredientPreferenceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveUserIngredientPreference(ctx context.Context, userIngredientPreferenceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveUserIngredientPreferenceRequest(c.Server, userIngredientPreferenceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserIngredientPreferenceWithBody(ctx context.Context, userIngredientPreferenceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserIngredientPreferenceRequestWithBody(c.Server, userIngredientPreferenceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserIngredientPreference(ctx context.Context, userIngredientPreferenceID string, body UpdateUserIngredientPreferenceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserIngredientPreferenceRequest(c.Server, userIngredientPreferenceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserNotifications(ctx context.Context, params *GetUserNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserNotificationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserNotificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserNotificationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserNotification(ctx context.Context, body CreateUserNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserNotificationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserNotification(ctx context.Context, userNotificationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserNotificationRequest(c.Server, userNotificationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserNotificationWithBody(ctx context.Context, userNotificationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserNotificationRequestWithBody(c.Server, userNotificationID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserNotification(ctx context.Context, userNotificationID string, body UpdateUserNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserNotificationRequest(c.Server, userNotificationID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadUserAvatarWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadUserAvatarRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadUserAvatar(ctx context.Context, body UploadUserAvatarJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadUserAvatarRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserDetailsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserDetailsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserDetails(ctx context.Context, body UpdateUserDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserDetailsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserEmailAddressWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserEmailAddressRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserEmailAddress(ctx context.Context, body UpdateUserEmailAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserEmailAddressRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyUserEmailAddressWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyUserEmailAddressRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyUserEmailAddress(ctx context.Context, body VerifyUserEmailAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyUserEmailAddressRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDefaultHouseholdWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDefaultHouseholdRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDefaultHousehold(ctx context.Context, body UpdateDefaultHouseholdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDefaultHouseholdRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePasswordWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePasswordRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePassword(ctx context.Context, body UpdatePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePasswordRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckPermissionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckPermissionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckPermissions(ctx context.Context, body CheckPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckPermissionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchForUsers(ctx context.Context, params *SearchForUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchForUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSelf(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSelfRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshTOTPSecretWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefreshTOTPSecretRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshTOTPSecret(ctx context.Context, body RefreshTOTPSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefreshTOTPSecretRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserUsernameWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserUsernameRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserUsername(ctx context.Context, body UpdateUserUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserUsernameRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveUser(ctx context.Context, userID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveUserRequest(c.Server, userID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, userID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, userID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidIngredientGroups(ctx context.Context, params *GetValidIngredientGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidIngredientGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidIngredientGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidIngredientGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidIngredientGroup(ctx context.Context, body CreateValidIngredientGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidIngredientGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchForValidIngredientGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchForValidIngredientGroupsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveValidIngredientGroup(ctx context.Context, validIngredientGroupID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveValidIngredientGroupRequest(c.Server, validIngredientGroupID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidIngredientGroup(ctx context.Context, validIngredientGroupID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidIngredientGroupRequest(c.Server, validIngredientGroupID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateValidIngredientGroupWithBody(ctx context.Context, validIngredientGroupID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateValidIngredientGroupRequestWithBody(c.Server, validIngredientGroupID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateValidIngredientGroup(ctx context.Context, validIngredientGroupID string, body UpdateValidIngredientGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateValidIngredientGroupRequest(c.Server, validIngredientGroupID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidIngredientMeasurementUnits(ctx context.Context, params *GetValidIngredientMeasurementUnitsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidIngredientMeasurementUnitsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidIngredientMeasurementUnitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidIngredientMeasurementUnitRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidIngredientMeasurementUnit(ctx context.Context, body CreateValidIngredientMeasurementUnitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidIngredientMeasurementUnitRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidIngredientMeasurementUnitsByIngredient(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidIngredientMeasurementUnitsByIngredientRequest(c.Server, validIngredientID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidIngredientMeasurementUnitsByMeasurementUnit(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidIngredientMeasurementUnitsByMeasurementUnitRequest(c.Server, validMeasurementUnitID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveValidIngredientMeasurementUnit(ctx context.Context, validIngredientMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveValidIngredientMeasurementUnitRequest(c.Server, validIngredientMeasurementUnitID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidIngredientMeasurementUnit(ctx context.Context, validIngredientMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidIngredientMeasurementUnitRequest(c.Server, validIngredientMeasurementUnitID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateValidIngredientMeasurementUnitWithBody(ctx context.Context, validIngredientMeasurementUnitID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateValidIngredientMeasurementUnitRequestWithBody(c.Server, validIngredientMeasurementUnitID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateValidIngredientMeasurementUnit(ctx context.Context, validIngredientMeasurementUnitID string, body UpdateValidIngredientMeasurementUnitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateValidIngredientMeasurementUnitRequest(c.Server, validIngredientMeasurementUnitID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidIngredientPreparations(ctx context.Context, params *GetValidIngredientPreparationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidIngredientPreparationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidIngredientPreparationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidIngredientPreparationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidIngredientPreparation(ctx context.Context, body CreateValidIngredientPreparationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidIngredientPreparationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidIngredientPreparationsByIngredient(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidIngredientPreparationsByIngredientRequest(c.Server, validIngredientID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidIngredientPreparationsByPreparation(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidIngredientPreparationsByPreparationRequest(c.Server, validPreparationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveValidIngredientPreparation(ctx context.Context, validIngredientPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveValidIngredientPreparationRequest(c.Server, validIngredientPreparationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidIngredientPreparation(ctx context.Context, validIngredientPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidIngredientPreparationRequest(c.Server, validIngredientPreparationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateValidIngredientPreparationWithBody(ctx context.Context, validIngredientPreparationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateValidIngredientPreparationRequestWithBody(c.Server, validIngredientPreparationID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateValidIngredientPreparation(ctx context.Context, validIngredientPreparationID string, body UpdateValidIngredientPreparationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateValidIngredientPreparationRequest(c.Server, validIngredientPreparationID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidIngredientStateIngredients(ctx context.Context, params *GetValidIngredientStateIngredientsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidIngredientStateIngredientsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidIngredientStateIngredientWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidIngredientStateIngredientRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidIngredientStateIngredient(ctx context.Context, body CreateValidIngredientStateIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidIngredientStateIngredientRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidIngredientStateIngredientsByIngredient(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidIngredientStateIngredientsByIngredientRequest(c.Server, validIngredientID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidIngredientStateIngredientsByIngredientState(ctx context.Context, validIngredientStateID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidIngredientStateIngredientsByIngredientStateRequest(c.Server, validIngredientStateID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveValidIngredientStateIngredient(ctx context.Context, validIngredientStateIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveValidIngredientStateIngredientRequest(c.Server, validIngredientStateIngredientID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidIngredientStateIngredient(ctx context.Context, validIngredientStateIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidIngredientStateIngredientRequest(c.Server, validIngredientStateIngredientID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateValidIngredientStateIngredientWithBody(ctx context.Context, validIngredientStateIngredientID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateValidIngredientStateIngredientRequestWithBody(c.Server, validIngredientStateIngredientID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateValidIngredientStateIngredient(ctx context.Context, validIngredientStateIngredientID string, body UpdateValidIngredientStateIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateValidIngredientStateIngredientRequest(c.Server, validIngredientStateIngredientID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidIngredientStates(ctx context.Context, params *GetValidIngredientStatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidIngredientStatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidIngredientStateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidIngredientStateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidIngredientState(ctx context.Context, body CreateValidIngredientStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidIngredientStateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchForValidIngredientStates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchForValidIngredientStatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveValidIngredientState(ctx context.Context, validIngredientStateID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveValidIngredientStateRequest(c.Server, validIngredientStateID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidIngredientState(ctx context.Context, validIngredientStateID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidIngredientStateRequest(c.Server, validIngredientStateID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateValidIngredientStateWithBody(ctx context.Context, validIngredientStateID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateValidIngredientStateRequestWithBody(c.Server, validIngredientStateID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateValidIngredientState(ctx context.Context, validIngredientStateID string, body UpdateValidIngredientStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateValidIngredientStateRequest(c.Server, validIngredientStateID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidIngredients(ctx context.Context, params *GetValidIngredientsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidIngredientsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidIngredientWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidIngredientRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidIngredient(ctx context.Context, body CreateValidIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidIngredientRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidIngredientsByPreparation(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidIngredientsByPreparationRequest(c.Server, validPreparationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRandomValidIngredient(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRandomValidIngredientRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchForValidIngredients(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchForValidIngredientsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveValidIngredient(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveValidIngredientRequest(c.Server, validIngredientID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidIngredient(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidIngredientRequest(c.Server, validIngredientID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateValidIngredientWithBody(ctx context.Context, validIngredientID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateValidIngredientRequestWithBody(c.Server, validIngredientID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateValidIngredient(ctx context.Context, validIngredientID string, body UpdateValidIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateValidIngredientRequest(c.Server, validIngredientID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidInstruments(ctx context.Context, params *GetValidInstrumentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidInstrumentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidInstrumentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidInstrumentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidInstrument(ctx context.Context, body CreateValidInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidInstrumentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRandomValidInstrument(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRandomValidInstrumentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchForValidInstruments(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchForValidInstrumentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveValidInstrument(ctx context.Context, validInstrumentID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveValidInstrumentRequest(c.Server, validInstrumentID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidInstrument(ctx context.Context, validInstrumentID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidInstrumentRequest(c.Server, validInstrumentID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateValidInstrumentWithBody(ctx context.Context, validInstrumentID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateValidInstrumentRequestWithBody(c.Server, validInstrumentID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateValidInstrument(ctx context.Context, validInstrumentID string, body UpdateValidInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateValidInstrumentRequest(c.Server, validInstrumentID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidMeasurementUnitConversionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidMeasurementUnitConversionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidMeasurementUnitConversion(ctx context.Context, body CreateValidMeasurementUnitConversionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidMeasurementUnitConversionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidMeasurementUnitConversionsFromUnit(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidMeasurementUnitConversionsFromUnitRequest(c.Server, validMeasurementUnitID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidMeasurementUnitConversionsToUnit(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidMeasurementUnitConversionsToUnitRequest(c.Server, validMeasurementUnitID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveValidMeasurementUnitConversion(ctx context.Context, validMeasurementUnitConversionID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveValidMeasurementUnitConversionRequest(c.Server, validMeasurementUnitConversionID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidMeasurementUnitConversion(ctx context.Context, validMeasurementUnitConversionID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidMeasurementUnitConversionRequest(c.Server, validMeasurementUnitConversionID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateValidMeasurementUnitConversionWithBody(ctx context.Context, validMeasurementUnitConversionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateValidMeasurementUnitConversionRequestWithBody(c.Server, validMeasurementUnitConversionID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateValidMeasurementUnitConversion(ctx context.Context, validMeasurementUnitConversionID string, body UpdateValidMeasurementUnitConversionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateValidMeasurementUnitConversionRequest(c.Server, validMeasurementUnitConversionID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidMeasurementUnits(ctx context.Context, params *GetValidMeasurementUnitsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidMeasurementUnitsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidMeasurementUnitWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidMeasurementUnitRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidMeasurementUnit(ctx context.Context, body CreateValidMeasurementUnitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidMeasurementUnitRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidMeasurementUnitsByIngredient(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidMeasurementUnitsByIngredientRequest(c.Server, validIngredientID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchForValidMeasurementUnits(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchForValidMeasurementUnitsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveValidMeasurementUnit(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveValidMeasurementUnitRequest(c.Server, validMeasurementUnitID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidMeasurementUnit(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidMeasurementUnitRequest(c.Server, validMeasurementUnitID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateValidMeasurementUnitWithBody(ctx context.Context, validMeasurementUnitID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateValidMeasurementUnitRequestWithBody(c.Server, validMeasurementUnitID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateValidMeasurementUnit(ctx context.Context, validMeasurementUnitID string, body UpdateValidMeasurementUnitJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateValidMeasurementUnitRequest(c.Server, validMeasurementUnitID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidPreparationInstruments(ctx context.Context, params *GetValidPreparationInstrumentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidPreparationInstrumentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidPreparationInstrumentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidPreparationInstrumentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidPreparationInstrument(ctx context.Context, body CreateValidPreparationInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidPreparationInstrumentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidPreparationInstrumentsByInstrument(ctx context.Context, validInstrumentID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidPreparationInstrumentsByInstrumentRequest(c.Server, validInstrumentID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidPreparationInstrumentsByPreparation(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidPreparationInstrumentsByPreparationRequest(c.Server, validPreparationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveValidPreparationInstrument(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveValidPreparationInstrumentRequest(c.Server, validPreparationVesselID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidPreparationInstrument(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidPreparationInstrumentRequest(c.Server, validPreparationVesselID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateValidPreparationInstrumentWithBody(ctx context.Context, validPreparationVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateValidPreparationInstrumentRequestWithBody(c.Server, validPreparationVesselID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateValidPreparationInstrument(ctx context.Context, validPreparationVesselID string, body UpdateValidPreparationInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateValidPreparationInstrumentRequest(c.Server, validPreparationVesselID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidPreparationVessels(ctx context.Context, params *GetValidPreparationVesselsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidPreparationVesselsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidPreparationVesselWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidPreparationVesselRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidPreparationVessel(ctx context.Context, body CreateValidPreparationVesselJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidPreparationVesselRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidPreparationVesselsByPreparation(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidPreparationVesselsByPreparationRequest(c.Server, validPreparationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidPreparationVesselsByVessel(ctx context.Context, validVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidPreparationVesselsByVesselRequest(c.Server, validVesselID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveValidPreparationVessel(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveValidPreparationVesselRequest(c.Server, validPreparationVesselID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidPreparationVessel(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidPreparationVesselRequest(c.Server, validPreparationVesselID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateValidPreparationVesselWithBody(ctx context.Context, validPreparationVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateValidPreparationVesselRequestWithBody(c.Server, validPreparationVesselID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateValidPreparationVessel(ctx context.Context, validPreparationVesselID string, body UpdateValidPreparationVesselJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateValidPreparationVesselRequest(c.Server, validPreparationVesselID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidPreparations(ctx context.Context, params *GetValidPreparationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidPreparationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidPreparationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidPreparationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidPreparation(ctx context.Context, body CreateValidPreparationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidPreparationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRandomValidPreparation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRandomValidPreparationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchForValidPreparations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchForValidPreparationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveValidPreparation(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveValidPreparationRequest(c.Server, validPreparationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidPreparation(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidPreparationRequest(c.Server, validPreparationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateValidPreparationWithBody(ctx context.Context, validPreparationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateValidPreparationRequestWithBody(c.Server, validPreparationID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateValidPreparation(ctx context.Context, validPreparationID string, body UpdateValidPreparationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateValidPreparationRequest(c.Server, validPreparationID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidVessels(ctx context.Context, params *GetValidVesselsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidVesselsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidVesselWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidVesselRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidVessel(ctx context.Context, body CreateValidVesselJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidVesselRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRandomValidVessel(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRandomValidVesselRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchForValidVessels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchForValidVesselsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveValidVessel(ctx context.Context, validVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveValidVesselRequest(c.Server, validVesselID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValidVessel(ctx context.Context, validVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValidVesselRequest(c.Server, validVesselID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateValidVesselWithBody(ctx context.Context, validVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateValidVesselRequestWithBody(c.Server, validVesselID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateValidVessel(ctx context.Context, validVesselID string, body UpdateValidVesselJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateValidVesselRequest(c.Server, validVesselID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebhooks(ctx context.Context, params *GetWebhooksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWebhooksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWebhookWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWebhookRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWebhook(ctx context.Context, body CreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWebhookRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveWebhook(ctx context.Context, webhookID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveWebhookRequest(c.Server, webhookID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWebhook(ctx context.Context, webhookID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWebhookRequest(c.Server, webhookID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWebhookTriggerEventWithBody(ctx context.Context, webhookID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWebhookTriggerEventRequestWithBody(c.Server, webhookID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWebhookTriggerEvent(ctx context.Context, webhookID string, body CreateWebhookTriggerEventJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWebhookTriggerEventRequest(c.Server, webhookID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ArchiveWebhookTriggerEvent(ctx context.Context, webhookID string, webhookTriggerEventID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewArchiveWebhookTriggerEventRequest(c.Server, webhookID, webhookTriggerEventID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RunFinalizeMealPlanWorkerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRunFinalizeMealPlanWorkerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RunFinalizeMealPlanWorker(ctx context.Context, body RunFinalizeMealPlanWorkerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRunFinalizeMealPlanWorkerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RunMealPlanGroceryListInitializerWorker(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRunMealPlanGroceryListInitializerWorkerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RunMealPlanTaskCreatorWorker(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRunMealPlanTaskCreatorWorkerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETOauth2Authorize(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETOauth2AuthorizeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTOauth2Token(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTOauth2TokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsers(ctx context.Context, body POSTUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyEmailAddressWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyEmailAddressRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyEmailAddress(ctx context.Context, body VerifyEmailAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyEmailAddressRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminLogin(ctx context.Context, body AdminLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Logout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogoutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RequestPasswordResetTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestPasswordResetTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RequestPasswordResetToken(ctx context.Context, body RequestPasswordResetTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestPasswordResetTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RedeemPasswordResetTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRedeemPasswordResetTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RedeemPasswordResetToken(ctx context.Context, body RedeemPasswordResetTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRedeemPasswordResetTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyTOTPSecretWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyTOTPSecretRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyTOTPSecret(ctx context.Context, body VerifyTOTPSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyTOTPSecretRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RequestUsernameReminderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestUsernameReminderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RequestUsernameReminder(ctx context.Context, body RequestUsernameReminderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestUsernameReminderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAdminCycleCookieSecretRequest generates requests for AdminCycleCookieSecret
func NewAdminCycleCookieSecretRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/cycle_cookie_secret")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminUpdateUserStatusRequest calls the generic AdminUpdateUserStatus builder with application/json body
func NewAdminUpdateUserStatusRequest(server string, body AdminUpdateUserStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminUpdateUserStatusRequestWithBody(server, "application/json", bodyReader)
}

// NewAdminUpdateUserStatusRequestWithBody generates requests for AdminUpdateUserStatus with any type of body
func NewAdminUpdateUserStatusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/users/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAuditLogEntriesForHouseholdRequest generates requests for GetAuditLogEntriesForHousehold
func NewGetAuditLogEntriesForHouseholdRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/audit_log_entries/for_household")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuditLogEntriesForUserRequest generates requests for GetAuditLogEntriesForUser
func NewGetAuditLogEntriesForUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/audit_log_entries/for_user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuditLogEntryByIDRequest generates requests for GetAuditLogEntryByID
func NewGetAuditLogEntryByIDRequest(server string, auditLogEntryID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "auditLogEntryID", runtime.ParamLocationPath, auditLogEntryID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/audit_log_entries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReceivedHouseholdInvitationsRequest generates requests for GetReceivedHouseholdInvitations
func NewGetReceivedHouseholdInvitationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/household_invitations/received")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSentHouseholdInvitationsRequest generates requests for GetSentHouseholdInvitations
func NewGetSentHouseholdInvitationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/household_invitations/sent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHouseholdInvitationsRequest generates requests for GetHouseholdInvitations
func NewGetHouseholdInvitationsRequest(server string, householdInvitationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdInvitationID", runtime.ParamLocationPath, householdInvitationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/household_invitations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAcceptHouseholdInvitationRequest calls the generic AcceptHouseholdInvitation builder with application/json body
func NewAcceptHouseholdInvitationRequest(server string, householdInvitationID string, body AcceptHouseholdInvitationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAcceptHouseholdInvitationRequestWithBody(server, householdInvitationID, "application/json", bodyReader)
}

// NewAcceptHouseholdInvitationRequestWithBody generates requests for AcceptHouseholdInvitation with any type of body
func NewAcceptHouseholdInvitationRequestWithBody(server string, householdInvitationID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdInvitationID", runtime.ParamLocationPath, householdInvitationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/household_invitations/%s/accept", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelHouseholdInvitationRequest calls the generic CancelHouseholdInvitation builder with application/json body
func NewCancelHouseholdInvitationRequest(server string, householdInvitationID string, body CancelHouseholdInvitationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCancelHouseholdInvitationRequestWithBody(server, householdInvitationID, "application/json", bodyReader)
}

// NewCancelHouseholdInvitationRequestWithBody generates requests for CancelHouseholdInvitation with any type of body
func NewCancelHouseholdInvitationRequestWithBody(server string, householdInvitationID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdInvitationID", runtime.ParamLocationPath, householdInvitationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/household_invitations/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRejectHouseholdInvitationRequest calls the generic RejectHouseholdInvitation builder with application/json body
func NewRejectHouseholdInvitationRequest(server string, householdInvitationID string, body RejectHouseholdInvitationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRejectHouseholdInvitationRequestWithBody(server, householdInvitationID, "application/json", bodyReader)
}

// NewRejectHouseholdInvitationRequestWithBody generates requests for RejectHouseholdInvitation with any type of body
func NewRejectHouseholdInvitationRequestWithBody(server string, householdInvitationID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdInvitationID", runtime.ParamLocationPath, householdInvitationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/household_invitations/%s/reject", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHouseholdsRequest generates requests for GetHouseholds
func NewGetHouseholdsRequest(server string, params *GetHouseholdsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateHouseholdRequest calls the generic CreateHousehold builder with application/json body
func NewCreateHouseholdRequest(server string, body CreateHouseholdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHouseholdRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateHouseholdRequestWithBody generates requests for CreateHousehold with any type of body
func NewCreateHouseholdRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetActiveHouseholdRequest generates requests for GetActiveHousehold
func NewGetActiveHouseholdRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/current")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHouseholdInstrumentOwnershipsRequest generates requests for GetHouseholdInstrumentOwnerships
func NewGetHouseholdInstrumentOwnershipsRequest(server string, params *GetHouseholdInstrumentOwnershipsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/instruments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateHouseholdInstrumentOwnershipRequest calls the generic CreateHouseholdInstrumentOwnership builder with application/json body
func NewCreateHouseholdInstrumentOwnershipRequest(server string, body CreateHouseholdInstrumentOwnershipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHouseholdInstrumentOwnershipRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateHouseholdInstrumentOwnershipRequestWithBody generates requests for CreateHouseholdInstrumentOwnership with any type of body
func NewCreateHouseholdInstrumentOwnershipRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/instruments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveHouseholdInstrumentOwnershipRequest generates requests for ArchiveHouseholdInstrumentOwnership
func NewArchiveHouseholdInstrumentOwnershipRequest(server string, householdInstrumentOwnershipID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdInstrumentOwnershipID", runtime.ParamLocationPath, householdInstrumentOwnershipID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/instruments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHouseholdInstrumentOwnershipRequest generates requests for GetHouseholdInstrumentOwnership
func NewGetHouseholdInstrumentOwnershipRequest(server string, householdInstrumentOwnershipID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdInstrumentOwnershipID", runtime.ParamLocationPath, householdInstrumentOwnershipID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/instruments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateHouseholdInstrumentOwnershipRequest calls the generic UpdateHouseholdInstrumentOwnership builder with application/json body
func NewUpdateHouseholdInstrumentOwnershipRequest(server string, householdInstrumentOwnershipID string, body UpdateHouseholdInstrumentOwnershipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateHouseholdInstrumentOwnershipRequestWithBody(server, householdInstrumentOwnershipID, "application/json", bodyReader)
}

// NewUpdateHouseholdInstrumentOwnershipRequestWithBody generates requests for UpdateHouseholdInstrumentOwnership with any type of body
func NewUpdateHouseholdInstrumentOwnershipRequestWithBody(server string, householdInstrumentOwnershipID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdInstrumentOwnershipID", runtime.ParamLocationPath, householdInstrumentOwnershipID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/instruments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveHouseholdRequest generates requests for ArchiveHousehold
func NewArchiveHouseholdRequest(server string, householdID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdID", runtime.ParamLocationPath, householdID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHouseholdRequest generates requests for GetHousehold
func NewGetHouseholdRequest(server string, householdID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdID", runtime.ParamLocationPath, householdID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateHouseholdRequest calls the generic UpdateHousehold builder with application/json body
func NewUpdateHouseholdRequest(server string, householdID string, body UpdateHouseholdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateHouseholdRequestWithBody(server, householdID, "application/json", bodyReader)
}

// NewUpdateHouseholdRequestWithBody generates requests for UpdateHousehold with any type of body
func NewUpdateHouseholdRequestWithBody(server string, householdID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdID", runtime.ParamLocationPath, householdID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetDefaultHouseholdRequest generates requests for SetDefaultHousehold
func NewSetDefaultHouseholdRequest(server string, householdID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdID", runtime.ParamLocationPath, householdID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/%s/default", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateHouseholdInvitationRequest calls the generic CreateHouseholdInvitation builder with application/json body
func NewCreateHouseholdInvitationRequest(server string, householdID string, body CreateHouseholdInvitationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateHouseholdInvitationRequestWithBody(server, householdID, "application/json", bodyReader)
}

// NewCreateHouseholdInvitationRequestWithBody generates requests for CreateHouseholdInvitation with any type of body
func NewCreateHouseholdInvitationRequestWithBody(server string, householdID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdID", runtime.ParamLocationPath, householdID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/%s/invitations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHouseholdInvitationByIDRequest generates requests for GetHouseholdInvitationByID
func NewGetHouseholdInvitationByIDRequest(server string, householdID string, householdInvitationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdID", runtime.ParamLocationPath, householdID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "householdInvitationID", runtime.ParamLocationPath, householdInvitationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/%s/invitations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTHouseholdsHouseholdIDInviteRequest calls the generic POSTHouseholdsHouseholdIDInvite builder with application/json body
func NewPOSTHouseholdsHouseholdIDInviteRequest(server string, householdID string, body POSTHouseholdsHouseholdIDInviteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTHouseholdsHouseholdIDInviteRequestWithBody(server, householdID, "application/json", bodyReader)
}

// NewPOSTHouseholdsHouseholdIDInviteRequestWithBody generates requests for POSTHouseholdsHouseholdIDInvite with any type of body
func NewPOSTHouseholdsHouseholdIDInviteRequestWithBody(server string, householdID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdID", runtime.ParamLocationPath, householdID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/%s/invite", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveUserMembershipRequest generates requests for ArchiveUserMembership
func NewArchiveUserMembershipRequest(server string, householdID string, userID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdID", runtime.ParamLocationPath, householdID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userID", runtime.ParamLocationPath, userID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/%s/members/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateHouseholdMemberPermissionsRequest calls the generic UpdateHouseholdMemberPermissions builder with application/json body
func NewUpdateHouseholdMemberPermissionsRequest(server string, householdID string, userID string, body UpdateHouseholdMemberPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateHouseholdMemberPermissionsRequestWithBody(server, householdID, userID, "application/json", bodyReader)
}

// NewUpdateHouseholdMemberPermissionsRequestWithBody generates requests for UpdateHouseholdMemberPermissions with any type of body
func NewUpdateHouseholdMemberPermissionsRequestWithBody(server string, householdID string, userID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdID", runtime.ParamLocationPath, householdID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userID", runtime.ParamLocationPath, userID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/%s/members/%s/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTransferHouseholdOwnershipRequest calls the generic TransferHouseholdOwnership builder with application/json body
func NewTransferHouseholdOwnershipRequest(server string, householdID string, body TransferHouseholdOwnershipJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTransferHouseholdOwnershipRequestWithBody(server, householdID, "application/json", bodyReader)
}

// NewTransferHouseholdOwnershipRequestWithBody generates requests for TransferHouseholdOwnership with any type of body
func NewTransferHouseholdOwnershipRequestWithBody(server string, householdID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdID", runtime.ParamLocationPath, householdID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/%s/transfer", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMealPlansRequest generates requests for GetMealPlans
func NewGetMealPlansRequest(server string, params *GetMealPlansParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMealPlanRequest calls the generic CreateMealPlan builder with application/json body
func NewCreateMealPlanRequest(server string, body CreateMealPlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMealPlanRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateMealPlanRequestWithBody generates requests for CreateMealPlan with any type of body
func NewCreateMealPlanRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveMealPlanRequest generates requests for ArchiveMealPlan
func NewArchiveMealPlanRequest(server string, mealPlanID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMealPlanRequest generates requests for GetMealPlan
func NewGetMealPlanRequest(server string, mealPlanID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateMealPlanRequest calls the generic UpdateMealPlan builder with application/json body
func NewUpdateMealPlanRequest(server string, mealPlanID string, body UpdateMealPlanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMealPlanRequestWithBody(server, mealPlanID, "application/json", bodyReader)
}

// NewUpdateMealPlanRequestWithBody generates requests for UpdateMealPlan with any type of body
func NewUpdateMealPlanRequestWithBody(server string, mealPlanID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMealPlanEventsRequest generates requests for GetMealPlanEvents
func NewGetMealPlanEventsRequest(server string, mealPlanID string, params *GetMealPlanEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMealPlanEventRequest calls the generic CreateMealPlanEvent builder with application/json body
func NewCreateMealPlanEventRequest(server string, mealPlanID string, body CreateMealPlanEventJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMealPlanEventRequestWithBody(server, mealPlanID, "application/json", bodyReader)
}

// NewCreateMealPlanEventRequestWithBody generates requests for CreateMealPlanEvent with any type of body
func NewCreateMealPlanEventRequestWithBody(server string, mealPlanID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveMealPlanEventRequest generates requests for ArchiveMealPlanEvent
func NewArchiveMealPlanEventRequest(server string, mealPlanID string, mealPlanEventID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanEventID", runtime.ParamLocationPath, mealPlanEventID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMealPlanEventRequest generates requests for GetMealPlanEvent
func NewGetMealPlanEventRequest(server string, mealPlanID string, mealPlanEventID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanEventID", runtime.ParamLocationPath, mealPlanEventID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateMealPlanEventRequest calls the generic UpdateMealPlanEvent builder with application/json body
func NewUpdateMealPlanEventRequest(server string, mealPlanID string, mealPlanEventID string, body UpdateMealPlanEventJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMealPlanEventRequestWithBody(server, mealPlanID, mealPlanEventID, "application/json", bodyReader)
}

// NewUpdateMealPlanEventRequestWithBody generates requests for UpdateMealPlanEvent with any type of body
func NewUpdateMealPlanEventRequestWithBody(server string, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanEventID", runtime.ParamLocationPath, mealPlanEventID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMealPlanOptionsRequest generates requests for GetMealPlanOptions
func NewGetMealPlanOptionsRequest(server string, mealPlanID string, mealPlanEventID string, params *GetMealPlanOptionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanEventID", runtime.ParamLocationPath, mealPlanEventID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events/%s/options", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMealPlanOptionRequest calls the generic CreateMealPlanOption builder with application/json body
func NewCreateMealPlanOptionRequest(server string, mealPlanID string, mealPlanEventID string, body CreateMealPlanOptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMealPlanOptionRequestWithBody(server, mealPlanID, mealPlanEventID, "application/json", bodyReader)
}

// NewCreateMealPlanOptionRequestWithBody generates requests for CreateMealPlanOption with any type of body
func NewCreateMealPlanOptionRequestWithBody(server string, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanEventID", runtime.ParamLocationPath, mealPlanEventID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events/%s/options", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveMealPlanOptionRequest generates requests for ArchiveMealPlanOption
func NewArchiveMealPlanOptionRequest(server string, mealPlanID string, mealPlanEventID string, mealPlanOptionID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanEventID", runtime.ParamLocationPath, mealPlanEventID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "mealPlanOptionID", runtime.ParamLocationPath, mealPlanOptionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events/%s/options/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMealPlanOptionRequest generates requests for GetMealPlanOption
func NewGetMealPlanOptionRequest(server string, mealPlanID string, mealPlanEventID string, mealPlanOptionID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanEventID", runtime.ParamLocationPath, mealPlanEventID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "mealPlanOptionID", runtime.ParamLocationPath, mealPlanOptionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events/%s/options/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateMealPlanOptionRequest calls the generic UpdateMealPlanOption builder with application/json body
func NewUpdateMealPlanOptionRequest(server string, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, body UpdateMealPlanOptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMealPlanOptionRequestWithBody(server, mealPlanID, mealPlanEventID, mealPlanOptionID, "application/json", bodyReader)
}

// NewUpdateMealPlanOptionRequestWithBody generates requests for UpdateMealPlanOption with any type of body
func NewUpdateMealPlanOptionRequestWithBody(server string, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanEventID", runtime.ParamLocationPath, mealPlanEventID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "mealPlanOptionID", runtime.ParamLocationPath, mealPlanOptionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events/%s/options/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMealPlanOptionVotesRequest generates requests for GetMealPlanOptionVotes
func NewGetMealPlanOptionVotesRequest(server string, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, params *GetMealPlanOptionVotesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanEventID", runtime.ParamLocationPath, mealPlanEventID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "mealPlanOptionID", runtime.ParamLocationPath, mealPlanOptionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events/%s/options/%s/votes", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArchiveMealPlanOptionVoteRequest generates requests for ArchiveMealPlanOptionVote
func NewArchiveMealPlanOptionVoteRequest(server string, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanEventID", runtime.ParamLocationPath, mealPlanEventID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "mealPlanOptionID", runtime.ParamLocationPath, mealPlanOptionID)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "mealPlanOptionVoteID", runtime.ParamLocationPath, mealPlanOptionVoteID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events/%s/options/%s/votes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMealPlanOptionVoteRequest generates requests for GetMealPlanOptionVote
func NewGetMealPlanOptionVoteRequest(server string, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanEventID", runtime.ParamLocationPath, mealPlanEventID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "mealPlanOptionID", runtime.ParamLocationPath, mealPlanOptionID)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "mealPlanOptionVoteID", runtime.ParamLocationPath, mealPlanOptionVoteID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events/%s/options/%s/votes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateMealPlanOptionVoteRequest calls the generic UpdateMealPlanOptionVote builder with application/json body
func NewUpdateMealPlanOptionVoteRequest(server string, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, body UpdateMealPlanOptionVoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMealPlanOptionVoteRequestWithBody(server, mealPlanID, mealPlanEventID, mealPlanOptionID, mealPlanOptionVoteID, "application/json", bodyReader)
}

// NewUpdateMealPlanOptionVoteRequestWithBody generates requests for UpdateMealPlanOptionVote with any type of body
func NewUpdateMealPlanOptionVoteRequestWithBody(server string, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanEventID", runtime.ParamLocationPath, mealPlanEventID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "mealPlanOptionID", runtime.ParamLocationPath, mealPlanOptionID)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "mealPlanOptionVoteID", runtime.ParamLocationPath, mealPlanOptionVoteID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events/%s/options/%s/votes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateMealPlanVoteRequest calls the generic CreateMealPlanVote builder with application/json body
func NewCreateMealPlanVoteRequest(server string, mealPlanID string, mealPlanEventID string, body CreateMealPlanVoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMealPlanVoteRequestWithBody(server, mealPlanID, mealPlanEventID, "application/json", bodyReader)
}

// NewCreateMealPlanVoteRequestWithBody generates requests for CreateMealPlanVote with any type of body
func NewCreateMealPlanVoteRequestWithBody(server string, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanEventID", runtime.ParamLocationPath, mealPlanEventID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events/%s/vote", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFinalizeMealPlanRequest generates requests for FinalizeMealPlan
func NewFinalizeMealPlanRequest(server string, mealPlanID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/finalize", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMealPlanGroceryListItemsRequest generates requests for GetMealPlanGroceryListItems
func NewGetMealPlanGroceryListItemsRequest(server string, mealPlanID string, params *GetMealPlanGroceryListItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/grocery_list_items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMealPlanGroceryListItemRequest calls the generic CreateMealPlanGroceryListItem builder with application/json body
func NewCreateMealPlanGroceryListItemRequest(server string, mealPlanID string, body CreateMealPlanGroceryListItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMealPlanGroceryListItemRequestWithBody(server, mealPlanID, "application/json", bodyReader)
}

// NewCreateMealPlanGroceryListItemRequestWithBody generates requests for CreateMealPlanGroceryListItem with any type of body
func NewCreateMealPlanGroceryListItemRequestWithBody(server string, mealPlanID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/grocery_list_items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveMealPlanGroceryListItemRequest generates requests for ArchiveMealPlanGroceryListItem
func NewArchiveMealPlanGroceryListItemRequest(server string, mealPlanID string, mealPlanGroceryListItemID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanGroceryListItemID", runtime.ParamLocationPath, mealPlanGroceryListItemID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/grocery_list_items/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMealPlanGroceryListItemRequest generates requests for GetMealPlanGroceryListItem
func NewGetMealPlanGroceryListItemRequest(server string, mealPlanID string, mealPlanGroceryListItemID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanGroceryListItemID", runtime.ParamLocationPath, mealPlanGroceryListItemID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/grocery_list_items/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateMealPlanGroceryListItemRequest calls the generic UpdateMealPlanGroceryListItem builder with application/json body
func NewUpdateMealPlanGroceryListItemRequest(server string, mealPlanID string, mealPlanGroceryListItemID string, body UpdateMealPlanGroceryListItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMealPlanGroceryListItemRequestWithBody(server, mealPlanID, mealPlanGroceryListItemID, "application/json", bodyReader)
}

// NewUpdateMealPlanGroceryListItemRequestWithBody generates requests for UpdateMealPlanGroceryListItem with any type of body
func NewUpdateMealPlanGroceryListItemRequestWithBody(server string, mealPlanID string, mealPlanGroceryListItemID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanGroceryListItemID", runtime.ParamLocationPath, mealPlanGroceryListItemID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/grocery_list_items/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMealPlanTasksRequest generates requests for GetMealPlanTasks
func NewGetMealPlanTasksRequest(server string, mealPlanID string, params *GetMealPlanTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMealPlanTaskRequest calls the generic CreateMealPlanTask builder with application/json body
func NewCreateMealPlanTaskRequest(server string, mealPlanID string, body CreateMealPlanTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMealPlanTaskRequestWithBody(server, mealPlanID, "application/json", bodyReader)
}

// NewCreateMealPlanTaskRequestWithBody generates requests for CreateMealPlanTask with any type of body
func NewCreateMealPlanTaskRequestWithBody(server string, mealPlanID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMealPlanTaskRequest generates requests for GetMealPlanTask
func NewGetMealPlanTaskRequest(server string, mealPlanID string, mealPlanTaskID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanTaskID", runtime.ParamLocationPath, mealPlanTaskID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/tasks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateMealPlanTaskRequest calls the generic UpdateMealPlanTask builder with application/json body
func NewUpdateMealPlanTaskRequest(server string, mealPlanID string, mealPlanTaskID string, body UpdateMealPlanTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMealPlanTaskRequestWithBody(server, mealPlanID, mealPlanTaskID, "application/json", bodyReader)
}

// NewUpdateMealPlanTaskRequestWithBody generates requests for UpdateMealPlanTask with any type of body
func NewUpdateMealPlanTaskRequestWithBody(server string, mealPlanID string, mealPlanTaskID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanTaskID", runtime.ParamLocationPath, mealPlanTaskID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/tasks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMealsRequest generates requests for GetMeals
func NewGetMealsRequest(server string, params *GetMealsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meals")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMealRequest calls the generic CreateMeal builder with application/json body
func NewCreateMealRequest(server string, body CreateMealJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMealRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateMealRequestWithBody generates requests for CreateMeal with any type of body
func NewCreateMealRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meals")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchForMealsRequest generates requests for SearchForMeals
func NewSearchForMealsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meals/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArchiveMealRequest generates requests for ArchiveMeal
func NewArchiveMealRequest(server string, mealID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealID", runtime.ParamLocationPath, mealID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meals/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMealRequest generates requests for GetMeal
func NewGetMealRequest(server string, mealID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealID", runtime.ParamLocationPath, mealID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meals/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOAuth2ClientsRequest generates requests for GetOAuth2Clients
func NewGetOAuth2ClientsRequest(server string, params *GetOAuth2ClientsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/oauth2_clients")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOAuth2ClientRequest calls the generic CreateOAuth2Client builder with application/json body
func NewCreateOAuth2ClientRequest(server string, body CreateOAuth2ClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOAuth2ClientRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOAuth2ClientRequestWithBody generates requests for CreateOAuth2Client with any type of body
func NewCreateOAuth2ClientRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/oauth2_clients")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveOAuth2ClientRequest generates requests for ArchiveOAuth2Client
func NewArchiveOAuth2ClientRequest(server string, oauth2ClientID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "oauth2ClientID", runtime.ParamLocationPath, oauth2ClientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/oauth2_clients/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOAuth2ClientRequest generates requests for GetOAuth2Client
func NewGetOAuth2ClientRequest(server string, oauth2ClientID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "oauth2ClientID", runtime.ParamLocationPath, oauth2ClientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/oauth2_clients/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecipesRequest generates requests for GetRecipes
func NewGetRecipesRequest(server string, params *GetRecipesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRecipeRequest calls the generic CreateRecipe builder with application/json body
func NewCreateRecipeRequest(server string, body CreateRecipeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRecipeRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateRecipeRequestWithBody generates requests for CreateRecipe with any type of body
func NewCreateRecipeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchForRecipesRequest generates requests for SearchForRecipes
func NewSearchForRecipesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArchiveRecipeRequest generates requests for ArchiveRecipe
func NewArchiveRecipeRequest(server string, recipeID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecipeRequest generates requests for GetRecipe
func NewGetRecipeRequest(server string, recipeID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRecipeRequest calls the generic UpdateRecipe builder with application/json body
func NewUpdateRecipeRequest(server string, recipeID string, body UpdateRecipeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRecipeRequestWithBody(server, recipeID, "application/json", bodyReader)
}

// NewUpdateRecipeRequestWithBody generates requests for UpdateRecipe with any type of body
func NewUpdateRecipeRequestWithBody(server string, recipeID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCloneRecipeRequest generates requests for CloneRecipe
func NewCloneRecipeRequest(server string, recipeID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/clone", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecipeDAGRequest generates requests for GetRecipeDAG
func NewGetRecipeDAGRequest(server string, recipeID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/dag", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTRecipesRecipeIDImagesRequest generates requests for POSTRecipesRecipeIDImages
func NewPOSTRecipesRecipeIDImagesRequest(server string, recipeID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/images", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETRecipesRecipeIDMermaidRequest generates requests for GETRecipesRecipeIDMermaid
func NewGETRecipesRecipeIDMermaidRequest(server string, recipeID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/mermaid", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecipePrepTaskStepRequest generates requests for GetRecipePrepTaskStep
func NewGetRecipePrepTaskStepRequest(server string, recipeID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/prep_steps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecipePrepTasksRequest generates requests for GetRecipePrepTasks
func NewGetRecipePrepTasksRequest(server string, recipeID string, params *GetRecipePrepTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/prep_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRecipePrepTaskRequest calls the generic CreateRecipePrepTask builder with application/json body
func NewCreateRecipePrepTaskRequest(server string, recipeID string, body CreateRecipePrepTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRecipePrepTaskRequestWithBody(server, recipeID, "application/json", bodyReader)
}

// NewCreateRecipePrepTaskRequestWithBody generates requests for CreateRecipePrepTask with any type of body
func NewCreateRecipePrepTaskRequestWithBody(server string, recipeID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/prep_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveRecipePrepTaskRequest generates requests for ArchiveRecipePrepTask
func NewArchiveRecipePrepTaskRequest(server string, recipeID string, recipePrepTaskID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipePrepTaskID", runtime.ParamLocationPath, recipePrepTaskID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/prep_tasks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecipePrepTaskRequest generates requests for GetRecipePrepTask
func NewGetRecipePrepTaskRequest(server string, recipeID string, recipePrepTaskID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipePrepTaskID", runtime.ParamLocationPath, recipePrepTaskID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/prep_tasks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRecipePrepTaskRequest calls the generic UpdateRecipePrepTask builder with application/json body
func NewUpdateRecipePrepTaskRequest(server string, recipeID string, recipePrepTaskID string, body UpdateRecipePrepTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRecipePrepTaskRequestWithBody(server, recipeID, recipePrepTaskID, "application/json", bodyReader)
}

// NewUpdateRecipePrepTaskRequestWithBody generates requests for UpdateRecipePrepTask with any type of body
func NewUpdateRecipePrepTaskRequestWithBody(server string, recipeID string, recipePrepTaskID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipePrepTaskID", runtime.ParamLocationPath, recipePrepTaskID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/prep_tasks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRecipeRatingsRequest generates requests for GetRecipeRatings
func NewGetRecipeRatingsRequest(server string, recipeID string, params *GetRecipeRatingsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/ratings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRecipeRatingRequest calls the generic CreateRecipeRating builder with application/json body
func NewCreateRecipeRatingRequest(server string, recipeID string, body CreateRecipeRatingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRecipeRatingRequestWithBody(server, recipeID, "application/json", bodyReader)
}

// NewCreateRecipeRatingRequestWithBody generates requests for CreateRecipeRating with any type of body
func NewCreateRecipeRatingRequestWithBody(server string, recipeID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/ratings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveRecipeRatingRequest generates requests for ArchiveRecipeRating
func NewArchiveRecipeRatingRequest(server string, recipeID string, recipeRatingID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeRatingID", runtime.ParamLocationPath, recipeRatingID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/ratings/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecipeRatingRequest generates requests for GetRecipeRating
func NewGetRecipeRatingRequest(server string, recipeID string, recipeRatingID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeRatingID", runtime.ParamLocationPath, recipeRatingID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/ratings/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRecipeRatingRequest calls the generic UpdateRecipeRating builder with application/json body
func NewUpdateRecipeRatingRequest(server string, recipeID string, recipeRatingID string, body UpdateRecipeRatingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRecipeRatingRequestWithBody(server, recipeID, recipeRatingID, "application/json", bodyReader)
}

// NewUpdateRecipeRatingRequestWithBody generates requests for UpdateRecipeRating with any type of body
func NewUpdateRecipeRatingRequestWithBody(server string, recipeID string, recipeRatingID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeRatingID", runtime.ParamLocationPath, recipeRatingID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/ratings/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRecipeStepsRequest generates requests for GetRecipeSteps
func NewGetRecipeStepsRequest(server string, recipeID string, params *GetRecipeStepsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRecipeStepRequest calls the generic CreateRecipeStep builder with application/json body
func NewCreateRecipeStepRequest(server string, recipeID string, body CreateRecipeStepJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRecipeStepRequestWithBody(server, recipeID, "application/json", bodyReader)
}

// NewCreateRecipeStepRequestWithBody generates requests for CreateRecipeStep with any type of body
func NewCreateRecipeStepRequestWithBody(server string, recipeID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveRecipeStepRequest generates requests for ArchiveRecipeStep
func NewArchiveRecipeStepRequest(server string, recipeID string, recipeStepID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecipeStepRequest generates requests for GetRecipeStep
func NewGetRecipeStepRequest(server string, recipeID string, recipeStepID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRecipeStepRequest calls the generic UpdateRecipeStep builder with application/json body
func NewUpdateRecipeStepRequest(server string, recipeID string, recipeStepID string, body UpdateRecipeStepJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRecipeStepRequestWithBody(server, recipeID, recipeStepID, "application/json", bodyReader)
}

// NewUpdateRecipeStepRequestWithBody generates requests for UpdateRecipeStep with any type of body
func NewUpdateRecipeStepRequestWithBody(server string, recipeID string, recipeStepID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRecipeStepCompletionConditionsRequest generates requests for GetRecipeStepCompletionConditions
func NewGetRecipeStepCompletionConditionsRequest(server string, recipeID string, recipeStepID string, params *GetRecipeStepCompletionConditionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/completion_conditions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRecipeStepCompletionConditionRequest calls the generic CreateRecipeStepCompletionCondition builder with application/json body
func NewCreateRecipeStepCompletionConditionRequest(server string, recipeID string, recipeStepID string, body CreateRecipeStepCompletionConditionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRecipeStepCompletionConditionRequestWithBody(server, recipeID, recipeStepID, "application/json", bodyReader)
}

// NewCreateRecipeStepCompletionConditionRequestWithBody generates requests for CreateRecipeStepCompletionCondition with any type of body
func NewCreateRecipeStepCompletionConditionRequestWithBody(server string, recipeID string, recipeStepID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/completion_conditions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveRecipeStepCompletionConditionRequest generates requests for ArchiveRecipeStepCompletionCondition
func NewArchiveRecipeStepCompletionConditionRequest(server string, recipeID string, recipeStepID string, recipeStepCompletionConditionID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepCompletionConditionID", runtime.ParamLocationPath, recipeStepCompletionConditionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/completion_conditions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecipeStepCompletionConditionRequest generates requests for GetRecipeStepCompletionCondition
func NewGetRecipeStepCompletionConditionRequest(server string, recipeID string, recipeStepID string, recipeStepCompletionConditionID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepCompletionConditionID", runtime.ParamLocationPath, recipeStepCompletionConditionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/completion_conditions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRecipeStepCompletionConditionRequest calls the generic UpdateRecipeStepCompletionCondition builder with application/json body
func NewUpdateRecipeStepCompletionConditionRequest(server string, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, body UpdateRecipeStepCompletionConditionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRecipeStepCompletionConditionRequestWithBody(server, recipeID, recipeStepID, recipeStepCompletionConditionID, "application/json", bodyReader)
}

// NewUpdateRecipeStepCompletionConditionRequestWithBody generates requests for UpdateRecipeStepCompletionCondition with any type of body
func NewUpdateRecipeStepCompletionConditionRequestWithBody(server string, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepCompletionConditionID", runtime.ParamLocationPath, recipeStepCompletionConditionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/completion_conditions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPOSTRecipesRecipeIDStepsRecipeStepIDImagesRequest generates requests for POSTRecipesRecipeIDStepsRecipeStepIDImages
func NewPOSTRecipesRecipeIDStepsRecipeStepIDImagesRequest(server string, recipeID string, recipeStepID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/images", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecipeStepIngredientsRequest generates requests for GetRecipeStepIngredients
func NewGetRecipeStepIngredientsRequest(server string, recipeID string, recipeStepID string, params *GetRecipeStepIngredientsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/ingredients", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRecipeStepIngredientRequest calls the generic CreateRecipeStepIngredient builder with application/json body
func NewCreateRecipeStepIngredientRequest(server string, recipeID string, recipeStepID string, body CreateRecipeStepIngredientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRecipeStepIngredientRequestWithBody(server, recipeID, recipeStepID, "application/json", bodyReader)
}

// NewCreateRecipeStepIngredientRequestWithBody generates requests for CreateRecipeStepIngredient with any type of body
func NewCreateRecipeStepIngredientRequestWithBody(server string, recipeID string, recipeStepID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/ingredients", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveRecipeStepIngredientRequest generates requests for ArchiveRecipeStepIngredient
func NewArchiveRecipeStepIngredientRequest(server string, recipeID string, recipeStepID string, recipeStepIngredientID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepIngredientID", runtime.ParamLocationPath, recipeStepIngredientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/ingredients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecipeStepIngredientRequest generates requests for GetRecipeStepIngredient
func NewGetRecipeStepIngredientRequest(server string, recipeID string, recipeStepID string, recipeStepIngredientID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepIngredientID", runtime.ParamLocationPath, recipeStepIngredientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/ingredients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRecipeStepIngredientRequest calls the generic UpdateRecipeStepIngredient builder with application/json body
func NewUpdateRecipeStepIngredientRequest(server string, recipeID string, recipeStepID string, recipeStepIngredientID string, body UpdateRecipeStepIngredientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRecipeStepIngredientRequestWithBody(server, recipeID, recipeStepID, recipeStepIngredientID, "application/json", bodyReader)
}

// NewUpdateRecipeStepIngredientRequestWithBody generates requests for UpdateRecipeStepIngredient with any type of body
func NewUpdateRecipeStepIngredientRequestWithBody(server string, recipeID string, recipeStepID string, recipeStepIngredientID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepIngredientID", runtime.ParamLocationPath, recipeStepIngredientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/ingredients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRecipeStepInstrumentsRequest generates requests for GetRecipeStepInstruments
func NewGetRecipeStepInstrumentsRequest(server string, recipeID string, recipeStepID string, params *GetRecipeStepInstrumentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/instruments", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRecipeStepInstrumentRequest calls the generic CreateRecipeStepInstrument builder with application/json body
func NewCreateRecipeStepInstrumentRequest(server string, recipeID string, recipeStepID string, body CreateRecipeStepInstrumentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRecipeStepInstrumentRequestWithBody(server, recipeID, recipeStepID, "application/json", bodyReader)
}

// NewCreateRecipeStepInstrumentRequestWithBody generates requests for CreateRecipeStepInstrument with any type of body
func NewCreateRecipeStepInstrumentRequestWithBody(server string, recipeID string, recipeStepID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/instruments", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveRecipeStepInstrumentRequest generates requests for ArchiveRecipeStepInstrument
func NewArchiveRecipeStepInstrumentRequest(server string, recipeID string, recipeStepID string, recipeStepInstrumentID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepInstrumentID", runtime.ParamLocationPath, recipeStepInstrumentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/instruments/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecipeStepInstrumentRequest generates requests for GetRecipeStepInstrument
func NewGetRecipeStepInstrumentRequest(server string, recipeID string, recipeStepID string, recipeStepInstrumentID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepInstrumentID", runtime.ParamLocationPath, recipeStepInstrumentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/instruments/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRecipeStepInstrumentRequest calls the generic UpdateRecipeStepInstrument builder with application/json body
func NewUpdateRecipeStepInstrumentRequest(server string, recipeID string, recipeStepID string, recipeStepInstrumentID string, body UpdateRecipeStepInstrumentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRecipeStepInstrumentRequestWithBody(server, recipeID, recipeStepID, recipeStepInstrumentID, "application/json", bodyReader)
}

// NewUpdateRecipeStepInstrumentRequestWithBody generates requests for UpdateRecipeStepInstrument with any type of body
func NewUpdateRecipeStepInstrumentRequestWithBody(server string, recipeID string, recipeStepID string, recipeStepInstrumentID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepInstrumentID", runtime.ParamLocationPath, recipeStepInstrumentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/instruments/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRecipeStepProductsRequest generates requests for GetRecipeStepProducts
func NewGetRecipeStepProductsRequest(server string, recipeID string, recipeStepID string, params *GetRecipeStepProductsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/products", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRecipeStepProductRequest calls the generic CreateRecipeStepProduct builder with application/json body
func NewCreateRecipeStepProductRequest(server string, recipeID string, recipeStepID string, body CreateRecipeStepProductJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRecipeStepProductRequestWithBody(server, recipeID, recipeStepID, "application/json", bodyReader)
}

// NewCreateRecipeStepProductRequestWithBody generates requests for CreateRecipeStepProduct with any type of body
func NewCreateRecipeStepProductRequestWithBody(server string, recipeID string, recipeStepID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/products", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveRecipeStepProductRequest generates requests for ArchiveRecipeStepProduct
func NewArchiveRecipeStepProductRequest(server string, recipeID string, recipeStepID string, recipeStepProductID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepProductID", runtime.ParamLocationPath, recipeStepProductID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/products/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecipeStepProductRequest generates requests for GetRecipeStepProduct
func NewGetRecipeStepProductRequest(server string, recipeID string, recipeStepID string, recipeStepProductID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepProductID", runtime.ParamLocationPath, recipeStepProductID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/products/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRecipeStepProductRequest calls the generic UpdateRecipeStepProduct builder with application/json body
func NewUpdateRecipeStepProductRequest(server string, recipeID string, recipeStepID string, recipeStepProductID string, body UpdateRecipeStepProductJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRecipeStepProductRequestWithBody(server, recipeID, recipeStepID, recipeStepProductID, "application/json", bodyReader)
}

// NewUpdateRecipeStepProductRequestWithBody generates requests for UpdateRecipeStepProduct with any type of body
func NewUpdateRecipeStepProductRequestWithBody(server string, recipeID string, recipeStepID string, recipeStepProductID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepProductID", runtime.ParamLocationPath, recipeStepProductID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/products/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRecipeStepVesselsRequest generates requests for GetRecipeStepVessels
func NewGetRecipeStepVesselsRequest(server string, recipeID string, recipeStepID string, params *GetRecipeStepVesselsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/vessels", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRecipeStepVesselRequest calls the generic CreateRecipeStepVessel builder with application/json body
func NewCreateRecipeStepVesselRequest(server string, recipeID string, recipeStepID string, body CreateRecipeStepVesselJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRecipeStepVesselRequestWithBody(server, recipeID, recipeStepID, "application/json", bodyReader)
}

// NewCreateRecipeStepVesselRequestWithBody generates requests for CreateRecipeStepVessel with any type of body
func NewCreateRecipeStepVesselRequestWithBody(server string, recipeID string, recipeStepID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/vessels", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveRecipeStepVesselRequest generates requests for ArchiveRecipeStepVessel
func NewArchiveRecipeStepVesselRequest(server string, recipeID string, recipeStepID string, recipeStepVesselID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepVesselID", runtime.ParamLocationPath, recipeStepVesselID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/vessels/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecipeStepVesselRequest generates requests for GetRecipeStepVessel
func NewGetRecipeStepVesselRequest(server string, recipeID string, recipeStepID string, recipeStepVesselID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepVesselID", runtime.ParamLocationPath, recipeStepVesselID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/vessels/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRecipeStepVesselRequest calls the generic UpdateRecipeStepVessel builder with application/json body
func NewUpdateRecipeStepVesselRequest(server string, recipeID string, recipeStepID string, recipeStepVesselID string, body UpdateRecipeStepVesselJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRecipeStepVesselRequestWithBody(server, recipeID, recipeStepID, recipeStepVesselID, "application/json", bodyReader)
}

// NewUpdateRecipeStepVesselRequestWithBody generates requests for UpdateRecipeStepVessel with any type of body
func NewUpdateRecipeStepVesselRequestWithBody(server string, recipeID string, recipeStepID string, recipeStepVesselID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepVesselID", runtime.ParamLocationPath, recipeStepVesselID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/vessels/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServiceSettingsRequest generates requests for GetServiceSettings
func NewGetServiceSettingsRequest(server string, params *GetServiceSettingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateServiceSettingRequest calls the generic CreateServiceSetting builder with application/json body
func NewCreateServiceSettingRequest(server string, body CreateServiceSettingJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateServiceSettingRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateServiceSettingRequestWithBody generates requests for CreateServiceSetting with any type of body
func NewCreateServiceSettingRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateServiceSettingConfigurationRequest calls the generic CreateServiceSettingConfiguration builder with application/json body
func NewCreateServiceSettingConfigurationRequest(server string, body CreateServiceSettingConfigurationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateServiceSettingConfigurationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateServiceSettingConfigurationRequestWithBody generates requests for CreateServiceSettingConfiguration with any type of body
func NewCreateServiceSettingConfigurationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings/configurations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetServiceSettingConfigurationsForHouseholdRequest generates requests for GetServiceSettingConfigurationsForHousehold
func NewGetServiceSettingConfigurationsForHouseholdRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings/configurations/household")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceSettingConfigurationsForUserRequest generates requests for GetServiceSettingConfigurationsForUser
func NewGetServiceSettingConfigurationsForUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings/configurations/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceSettingConfigurationRequest generates requests for GetServiceSettingConfiguration
func NewGetServiceSettingConfigurationRequest(server string, serviceSettingConfigurationName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceSettingConfigurationName", runtime.ParamLocationPath, serviceSettingConfigurationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings/configurations/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArchiveServiceSettingConfigurationRequest generates requests for ArchiveServiceSettingConfiguration
func NewArchiveServiceSettingConfigurationRequest(server string, serviceSettingConfigurationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceSettingConfigurationID", runtime.ParamLocationPath, serviceSettingConfigurationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings/configurations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateServiceSettingConfigurationRequest calls the generic UpdateServiceSettingConfiguration builder with application/json body
func NewUpdateServiceSettingConfigurationRequest(server string, serviceSettingConfigurationID string, body UpdateServiceSettingConfigurationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateServiceSettingConfigurationRequestWithBody(server, serviceSettingConfigurationID, "application/json", bodyReader)
}

// NewUpdateServiceSettingConfigurationRequestWithBody generates requests for UpdateServiceSettingConfiguration with any type of body
func NewUpdateServiceSettingConfigurationRequestWithBody(server string, serviceSettingConfigurationID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceSettingConfigurationID", runtime.ParamLocationPath, serviceSettingConfigurationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings/configurations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchForServiceSettingsRequest generates requests for SearchForServiceSettings
func NewSearchForServiceSettingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArchiveServiceSettingRequest generates requests for ArchiveServiceSetting
func NewArchiveServiceSettingRequest(server string, serviceSettingID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceSettingID", runtime.ParamLocationPath, serviceSettingID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetServiceSettingRequest generates requests for GetServiceSetting
func NewGetServiceSettingRequest(server string, serviceSettingID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceSettingID", runtime.ParamLocationPath, serviceSettingID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserIngredientPreferencesRequest generates requests for GetUserIngredientPreferences
func NewGetUserIngredientPreferencesRequest(server string, params *GetUserIngredientPreferencesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user_ingredient_preferences")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserIngredientPreferenceRequest calls the generic CreateUserIngredientPreference builder with application/json body
func NewCreateUserIngredientPreferenceRequest(server string, body CreateUserIngredientPreferenceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserIngredientPreferenceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUserIngredientPreferenceRequestWithBody generates requests for CreateUserIngredientPreference with any type of body
func NewCreateUserIngredientPreferenceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user_ingredient_preferences")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveUserIngredientPreferenceRequest generates requests for ArchiveUserIngredientPreference
func NewArchiveUserIngredientPreferenceRequest(server string, userIngredientPreferenceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userIngredientPreferenceID", runtime.ParamLocationPath, userIngredientPreferenceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user_ingredient_preferences/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserIngredientPreferenceRequest calls the generic UpdateUserIngredientPreference builder with application/json body
func NewUpdateUserIngredientPreferenceRequest(server string, userIngredientPreferenceID string, body UpdateUserIngredientPreferenceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserIngredientPreferenceRequestWithBody(server, userIngredientPreferenceID, "application/json", bodyReader)
}

// NewUpdateUserIngredientPreferenceRequestWithBody generates requests for UpdateUserIngredientPreference with any type of body
func NewUpdateUserIngredientPreferenceRequestWithBody(server string, userIngredientPreferenceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userIngredientPreferenceID", runtime.ParamLocationPath, userIngredientPreferenceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user_ingredient_preferences/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserNotificationsRequest generates requests for GetUserNotifications
func NewGetUserNotificationsRequest(server string, params *GetUserNotificationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user_notifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserNotificationRequest calls the generic CreateUserNotification builder with application/json body
func NewCreateUserNotificationRequest(server string, body CreateUserNotificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserNotificationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUserNotificationRequestWithBody generates requests for CreateUserNotification with any type of body
func NewCreateUserNotificationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user_notifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserNotificationRequest generates requests for GetUserNotification
func NewGetUserNotificationRequest(server string, userNotificationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userNotificationID", runtime.ParamLocationPath, userNotificationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user_notifications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserNotificationRequest calls the generic UpdateUserNotification builder with application/json body
func NewUpdateUserNotificationRequest(server string, userNotificationID string, body UpdateUserNotificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserNotificationRequestWithBody(server, userNotificationID, "application/json", bodyReader)
}

// NewUpdateUserNotificationRequestWithBody generates requests for UpdateUserNotification with any type of body
func NewUpdateUserNotificationRequestWithBody(server string, userNotificationID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userNotificationID", runtime.ParamLocationPath, userNotificationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user_notifications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string, params *GetUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUploadUserAvatarRequest calls the generic UploadUserAvatar builder with application/json body
func NewUploadUserAvatarRequest(server string, body UploadUserAvatarJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUploadUserAvatarRequestWithBody(server, "application/json", bodyReader)
}

// NewUploadUserAvatarRequestWithBody generates requests for UploadUserAvatar with any type of body
func NewUploadUserAvatarRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/avatar/upload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateUserDetailsRequest calls the generic UpdateUserDetails builder with application/json body
func NewUpdateUserDetailsRequest(server string, body UpdateUserDetailsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserDetailsRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateUserDetailsRequestWithBody generates requests for UpdateUserDetails with any type of body
func NewUpdateUserDetailsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/details")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateUserEmailAddressRequest calls the generic UpdateUserEmailAddress builder with application/json body
func NewUpdateUserEmailAddressRequest(server string, body UpdateUserEmailAddressJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserEmailAddressRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateUserEmailAddressRequestWithBody generates requests for UpdateUserEmailAddress with any type of body
func NewUpdateUserEmailAddressRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/email_address")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVerifyUserEmailAddressRequest calls the generic VerifyUserEmailAddress builder with application/json body
func NewVerifyUserEmailAddressRequest(server string, body VerifyUserEmailAddressJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifyUserEmailAddressRequestWithBody(server, "application/json", bodyReader)
}

// NewVerifyUserEmailAddressRequestWithBody generates requests for VerifyUserEmailAddress with any type of body
func NewVerifyUserEmailAddressRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/email_address_verification")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateDefaultHouseholdRequest calls the generic UpdateDefaultHousehold builder with application/json body
func NewUpdateDefaultHouseholdRequest(server string, body UpdateDefaultHouseholdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDefaultHouseholdRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateDefaultHouseholdRequestWithBody generates requests for UpdateDefaultHousehold with any type of body
func NewUpdateDefaultHouseholdRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/household/select")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdatePasswordRequest calls the generic UpdatePassword builder with application/json body
func NewUpdatePasswordRequest(server string, body UpdatePasswordJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePasswordRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdatePasswordRequestWithBody generates requests for UpdatePassword with any type of body
func NewUpdatePasswordRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/password/new")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCheckPermissionsRequest calls the generic CheckPermissions builder with application/json body
func NewCheckPermissionsRequest(server string, body CheckPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckPermissionsRequestWithBody(server, "application/json", bodyReader)
}

// NewCheckPermissionsRequestWithBody generates requests for CheckPermissions with any type of body
func NewCheckPermissionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/permissions/check")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchForUsersRequest generates requests for SearchForUsers
func NewSearchForUsersRequest(server string, params *SearchForUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSelfRequest generates requests for GetSelf
func NewGetSelfRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/self")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRefreshTOTPSecretRequest calls the generic RefreshTOTPSecret builder with application/json body
func NewRefreshTOTPSecretRequest(server string, body RefreshTOTPSecretJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRefreshTOTPSecretRequestWithBody(server, "application/json", bodyReader)
}

// NewRefreshTOTPSecretRequestWithBody generates requests for RefreshTOTPSecret with any type of body
func NewRefreshTOTPSecretRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/totp_secret/new")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateUserUsernameRequest calls the generic UpdateUserUsername builder with application/json body
func NewUpdateUserUsernameRequest(server string, body UpdateUserUsernameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserUsernameRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateUserUsernameRequestWithBody generates requests for UpdateUserUsername with any type of body
func NewUpdateUserUsernameRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/username")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveUserRequest generates requests for ArchiveUser
func NewArchiveUserRequest(server string, userID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userID", runtime.ParamLocationPath, userID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, userID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userID", runtime.ParamLocationPath, userID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetValidIngredientGroupsRequest generates requests for GetValidIngredientGroups
func NewGetValidIngredientGroupsRequest(server string, params *GetValidIngredientGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateValidIngredientGroupRequest calls the generic CreateValidIngredientGroup builder with application/json body
func NewCreateValidIngredientGroupRequest(server string, body CreateValidIngredientGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateValidIngredientGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateValidIngredientGroupRequestWithBody generates requests for CreateValidIngredientGroup with any type of body
func NewCreateValidIngredientGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchForValidIngredientGroupsRequest generates requests for SearchForValidIngredientGroups
func NewSearchForValidIngredientGroupsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_groups/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArchiveValidIngredientGroupRequest generates requests for ArchiveValidIngredientGroup
func NewArchiveValidIngredientGroupRequest(server string, validIngredientGroupID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientGroupID", runtime.ParamLocationPath, validIngredientGroupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetValidIngredientGroupRequest generates requests for GetValidIngredientGroup
func NewGetValidIngredientGroupRequest(server string, validIngredientGroupID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientGroupID", runtime.ParamLocationPath, validIngredientGroupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateValidIngredientGroupRequest calls the generic UpdateValidIngredientGroup builder with application/json body
func NewUpdateValidIngredientGroupRequest(server string, validIngredientGroupID string, body UpdateValidIngredientGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateValidIngredientGroupRequestWithBody(server, validIngredientGroupID, "application/json", bodyReader)
}

// NewUpdateValidIngredientGroupRequestWithBody generates requests for UpdateValidIngredientGroup with any type of body
func NewUpdateValidIngredientGroupRequestWithBody(server string, validIngredientGroupID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientGroupID", runtime.ParamLocationPath, validIngredientGroupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetValidIngredientMeasurementUnitsRequest generates requests for GetValidIngredientMeasurementUnits
func NewGetValidIngredientMeasurementUnitsRequest(server string, params *GetValidIngredientMeasurementUnitsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_measurement_units")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateValidIngredientMeasurementUnitRequest calls the generic CreateValidIngredientMeasurementUnit builder with application/json body
func NewCreateValidIngredientMeasurementUnitRequest(server string, body CreateValidIngredientMeasurementUnitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateValidIngredientMeasurementUnitRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateValidIngredientMeasurementUnitRequestWithBody generates requests for CreateValidIngredientMeasurementUnit with any type of body
func NewCreateValidIngredientMeasurementUnitRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_measurement_units")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetValidIngredientMeasurementUnitsByIngredientRequest generates requests for GetValidIngredientMeasurementUnitsByIngredient
func NewGetValidIngredientMeasurementUnitsByIngredientRequest(server string, validIngredientID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientID", runtime.ParamLocationPath, validIngredientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_measurement_units/by_ingredient/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetValidIngredientMeasurementUnitsByMeasurementUnitRequest generates requests for GetValidIngredientMeasurementUnitsByMeasurementUnit
func NewGetValidIngredientMeasurementUnitsByMeasurementUnitRequest(server string, validMeasurementUnitID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validMeasurementUnitID", runtime.ParamLocationPath, validMeasurementUnitID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_measurement_units/by_measurement_unit/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArchiveValidIngredientMeasurementUnitRequest generates requests for ArchiveValidIngredientMeasurementUnit
func NewArchiveValidIngredientMeasurementUnitRequest(server string, validIngredientMeasurementUnitID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientMeasurementUnitID", runtime.ParamLocationPath, validIngredientMeasurementUnitID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_measurement_units/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetValidIngredientMeasurementUnitRequest generates requests for GetValidIngredientMeasurementUnit
func NewGetValidIngredientMeasurementUnitRequest(server string, validIngredientMeasurementUnitID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientMeasurementUnitID", runtime.ParamLocationPath, validIngredientMeasurementUnitID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_measurement_units/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateValidIngredientMeasurementUnitRequest calls the generic UpdateValidIngredientMeasurementUnit builder with application/json body
func NewUpdateValidIngredientMeasurementUnitRequest(server string, validIngredientMeasurementUnitID string, body UpdateValidIngredientMeasurementUnitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateValidIngredientMeasurementUnitRequestWithBody(server, validIngredientMeasurementUnitID, "application/json", bodyReader)
}

// NewUpdateValidIngredientMeasurementUnitRequestWithBody generates requests for UpdateValidIngredientMeasurementUnit with any type of body
func NewUpdateValidIngredientMeasurementUnitRequestWithBody(server string, validIngredientMeasurementUnitID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientMeasurementUnitID", runtime.ParamLocationPath, validIngredientMeasurementUnitID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_measurement_units/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetValidIngredientPreparationsRequest generates requests for GetValidIngredientPreparations
func NewGetValidIngredientPreparationsRequest(server string, params *GetValidIngredientPreparationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_preparations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateValidIngredientPreparationRequest calls the generic CreateValidIngredientPreparation builder with application/json body
func NewCreateValidIngredientPreparationRequest(server string, body CreateValidIngredientPreparationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateValidIngredientPreparationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateValidIngredientPreparationRequestWithBody generates requests for CreateValidIngredientPreparation with any type of body
func NewCreateValidIngredientPreparationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_preparations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetValidIngredientPreparationsByIngredientRequest generates requests for GetValidIngredientPreparationsByIngredient
func NewGetValidIngredientPreparationsByIngredientRequest(server string, validIngredientID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientID", runtime.ParamLocationPath, validIngredientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_preparations/by_ingredient/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetValidIngredientPreparationsByPreparationRequest generates requests for GetValidIngredientPreparationsByPreparation
func NewGetValidIngredientPreparationsByPreparationRequest(server string, validPreparationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validPreparationID", runtime.ParamLocationPath, validPreparationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_preparations/by_preparation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArchiveValidIngredientPreparationRequest generates requests for ArchiveValidIngredientPreparation
func NewArchiveValidIngredientPreparationRequest(server string, validIngredientPreparationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientPreparationID", runtime.ParamLocationPath, validIngredientPreparationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_preparations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetValidIngredientPreparationRequest generates requests for GetValidIngredientPreparation
func NewGetValidIngredientPreparationRequest(server string, validIngredientPreparationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientPreparationID", runtime.ParamLocationPath, validIngredientPreparationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_preparations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateValidIngredientPreparationRequest calls the generic UpdateValidIngredientPreparation builder with application/json body
func NewUpdateValidIngredientPreparationRequest(server string, validIngredientPreparationID string, body UpdateValidIngredientPreparationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateValidIngredientPreparationRequestWithBody(server, validIngredientPreparationID, "application/json", bodyReader)
}

// NewUpdateValidIngredientPreparationRequestWithBody generates requests for UpdateValidIngredientPreparation with any type of body
func NewUpdateValidIngredientPreparationRequestWithBody(server string, validIngredientPreparationID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientPreparationID", runtime.ParamLocationPath, validIngredientPreparationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_preparations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetValidIngredientStateIngredientsRequest generates requests for GetValidIngredientStateIngredients
func NewGetValidIngredientStateIngredientsRequest(server string, params *GetValidIngredientStateIngredientsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_state_ingredients")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateValidIngredientStateIngredientRequest calls the generic CreateValidIngredientStateIngredient builder with application/json body
func NewCreateValidIngredientStateIngredientRequest(server string, body CreateValidIngredientStateIngredientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateValidIngredientStateIngredientRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateValidIngredientStateIngredientRequestWithBody generates requests for CreateValidIngredientStateIngredient with any type of body
func NewCreateValidIngredientStateIngredientRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_state_ingredients")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetValidIngredientStateIngredientsByIngredientRequest generates requests for GetValidIngredientStateIngredientsByIngredient
func NewGetValidIngredientStateIngredientsByIngredientRequest(server string, validIngredientID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientID", runtime.ParamLocationPath, validIngredientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_state_ingredients/by_ingredient/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetValidIngredientStateIngredientsByIngredientStateRequest generates requests for GetValidIngredientStateIngredientsByIngredientState
func NewGetValidIngredientStateIngredientsByIngredientStateRequest(server string, validIngredientStateID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientStateID", runtime.ParamLocationPath, validIngredientStateID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_state_ingredients/by_ingredient_state/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArchiveValidIngredientStateIngredientRequest generates requests for ArchiveValidIngredientStateIngredient
func NewArchiveValidIngredientStateIngredientRequest(server string, validIngredientStateIngredientID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientStateIngredientID", runtime.ParamLocationPath, validIngredientStateIngredientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_state_ingredients/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetValidIngredientStateIngredientRequest generates requests for GetValidIngredientStateIngredient
func NewGetValidIngredientStateIngredientRequest(server string, validIngredientStateIngredientID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientStateIngredientID", runtime.ParamLocationPath, validIngredientStateIngredientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_state_ingredients/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateValidIngredientStateIngredientRequest calls the generic UpdateValidIngredientStateIngredient builder with application/json body
func NewUpdateValidIngredientStateIngredientRequest(server string, validIngredientStateIngredientID string, body UpdateValidIngredientStateIngredientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateValidIngredientStateIngredientRequestWithBody(server, validIngredientStateIngredientID, "application/json", bodyReader)
}

// NewUpdateValidIngredientStateIngredientRequestWithBody generates requests for UpdateValidIngredientStateIngredient with any type of body
func NewUpdateValidIngredientStateIngredientRequestWithBody(server string, validIngredientStateIngredientID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientStateIngredientID", runtime.ParamLocationPath, validIngredientStateIngredientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_state_ingredients/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetValidIngredientStatesRequest generates requests for GetValidIngredientStates
func NewGetValidIngredientStatesRequest(server string, params *GetValidIngredientStatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_states")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateValidIngredientStateRequest calls the generic CreateValidIngredientState builder with application/json body
func NewCreateValidIngredientStateRequest(server string, body CreateValidIngredientStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateValidIngredientStateRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateValidIngredientStateRequestWithBody generates requests for CreateValidIngredientState with any type of body
func NewCreateValidIngredientStateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_states")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchForValidIngredientStatesRequest generates requests for SearchForValidIngredientStates
func NewSearchForValidIngredientStatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_states/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArchiveValidIngredientStateRequest generates requests for ArchiveValidIngredientState
func NewArchiveValidIngredientStateRequest(server string, validIngredientStateID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientStateID", runtime.ParamLocationPath, validIngredientStateID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_states/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetValidIngredientStateRequest generates requests for GetValidIngredientState
func NewGetValidIngredientStateRequest(server string, validIngredientStateID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientStateID", runtime.ParamLocationPath, validIngredientStateID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_states/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateValidIngredientStateRequest calls the generic UpdateValidIngredientState builder with application/json body
func NewUpdateValidIngredientStateRequest(server string, validIngredientStateID string, body UpdateValidIngredientStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateValidIngredientStateRequestWithBody(server, validIngredientStateID, "application/json", bodyReader)
}

// NewUpdateValidIngredientStateRequestWithBody generates requests for UpdateValidIngredientState with any type of body
func NewUpdateValidIngredientStateRequestWithBody(server string, validIngredientStateID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientStateID", runtime.ParamLocationPath, validIngredientStateID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_states/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetValidIngredientsRequest generates requests for GetValidIngredients
func NewGetValidIngredientsRequest(server string, params *GetValidIngredientsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredients")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateValidIngredientRequest calls the generic CreateValidIngredient builder with application/json body
func NewCreateValidIngredientRequest(server string, body CreateValidIngredientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateValidIngredientRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateValidIngredientRequestWithBody generates requests for CreateValidIngredient with any type of body
func NewCreateValidIngredientRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredients")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetValidIngredientsByPreparationRequest generates requests for GetValidIngredientsByPreparation
func NewGetValidIngredientsByPreparationRequest(server string, validPreparationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validPreparationID", runtime.ParamLocationPath, validPreparationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredients/by_preparation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRandomValidIngredientRequest generates requests for GetRandomValidIngredient
func NewGetRandomValidIngredientRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredients/random")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchForValidIngredientsRequest generates requests for SearchForValidIngredients
func NewSearchForValidIngredientsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredients/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArchiveValidIngredientRequest generates requests for ArchiveValidIngredient
func NewArchiveValidIngredientRequest(server string, validIngredientID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientID", runtime.ParamLocationPath, validIngredientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredients/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetValidIngredientRequest generates requests for GetValidIngredient
func NewGetValidIngredientRequest(server string, validIngredientID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientID", runtime.ParamLocationPath, validIngredientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredients/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateValidIngredientRequest calls the generic UpdateValidIngredient builder with application/json body
func NewUpdateValidIngredientRequest(server string, validIngredientID string, body UpdateValidIngredientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateValidIngredientRequestWithBody(server, validIngredientID, "application/json", bodyReader)
}

// NewUpdateValidIngredientRequestWithBody generates requests for UpdateValidIngredient with any type of body
func NewUpdateValidIngredientRequestWithBody(server string, validIngredientID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientID", runtime.ParamLocationPath, validIngredientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredients/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetValidInstrumentsRequest generates requests for GetValidInstruments
func NewGetValidInstrumentsRequest(server string, params *GetValidInstrumentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_instruments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateValidInstrumentRequest calls the generic CreateValidInstrument builder with application/json body
func NewCreateValidInstrumentRequest(server string, body CreateValidInstrumentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateValidInstrumentRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateValidInstrumentRequestWithBody generates requests for CreateValidInstrument with any type of body
func NewCreateValidInstrumentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_instruments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRandomValidInstrumentRequest generates requests for GetRandomValidInstrument
func NewGetRandomValidInstrumentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_instruments/random")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchForValidInstrumentsRequest generates requests for SearchForValidInstruments
func NewSearchForValidInstrumentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_instruments/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArchiveValidInstrumentRequest generates requests for ArchiveValidInstrument
func NewArchiveValidInstrumentRequest(server string, validInstrumentID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validInstrumentID", runtime.ParamLocationPath, validInstrumentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_instruments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetValidInstrumentRequest generates requests for GetValidInstrument
func NewGetValidInstrumentRequest(server string, validInstrumentID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validInstrumentID", runtime.ParamLocationPath, validInstrumentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_instruments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateValidInstrumentRequest calls the generic UpdateValidInstrument builder with application/json body
func NewUpdateValidInstrumentRequest(server string, validInstrumentID string, body UpdateValidInstrumentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateValidInstrumentRequestWithBody(server, validInstrumentID, "application/json", bodyReader)
}

// NewUpdateValidInstrumentRequestWithBody generates requests for UpdateValidInstrument with any type of body
func NewUpdateValidInstrumentRequestWithBody(server string, validInstrumentID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validInstrumentID", runtime.ParamLocationPath, validInstrumentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_instruments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateValidMeasurementUnitConversionRequest calls the generic CreateValidMeasurementUnitConversion builder with application/json body
func NewCreateValidMeasurementUnitConversionRequest(server string, body CreateValidMeasurementUnitConversionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateValidMeasurementUnitConversionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateValidMeasurementUnitConversionRequestWithBody generates requests for CreateValidMeasurementUnitConversion with any type of body
func NewCreateValidMeasurementUnitConversionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_measurement_conversions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetValidMeasurementUnitConversionsFromUnitRequest generates requests for GetValidMeasurementUnitConversionsFromUnit
func NewGetValidMeasurementUnitConversionsFromUnitRequest(server string, validMeasurementUnitID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validMeasurementUnitID", runtime.ParamLocationPath, validMeasurementUnitID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_measurement_conversions/from_unit/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewValidMeasurementUnitConversionsToUnitRequest generates requests for ValidMeasurementUnitConversionsToUnit
func NewValidMeasurementUnitConversionsToUnitRequest(server string, validMeasurementUnitID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validMeasurementUnitID", runtime.ParamLocationPath, validMeasurementUnitID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_measurement_conversions/to_unit/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArchiveValidMeasurementUnitConversionRequest generates requests for ArchiveValidMeasurementUnitConversion
func NewArchiveValidMeasurementUnitConversionRequest(server string, validMeasurementUnitConversionID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validMeasurementUnitConversionID", runtime.ParamLocationPath, validMeasurementUnitConversionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_measurement_conversions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetValidMeasurementUnitConversionRequest generates requests for GetValidMeasurementUnitConversion
func NewGetValidMeasurementUnitConversionRequest(server string, validMeasurementUnitConversionID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validMeasurementUnitConversionID", runtime.ParamLocationPath, validMeasurementUnitConversionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_measurement_conversions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateValidMeasurementUnitConversionRequest calls the generic UpdateValidMeasurementUnitConversion builder with application/json body
func NewUpdateValidMeasurementUnitConversionRequest(server string, validMeasurementUnitConversionID string, body UpdateValidMeasurementUnitConversionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateValidMeasurementUnitConversionRequestWithBody(server, validMeasurementUnitConversionID, "application/json", bodyReader)
}

// NewUpdateValidMeasurementUnitConversionRequestWithBody generates requests for UpdateValidMeasurementUnitConversion with any type of body
func NewUpdateValidMeasurementUnitConversionRequestWithBody(server string, validMeasurementUnitConversionID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validMeasurementUnitConversionID", runtime.ParamLocationPath, validMeasurementUnitConversionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_measurement_conversions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetValidMeasurementUnitsRequest generates requests for GetValidMeasurementUnits
func NewGetValidMeasurementUnitsRequest(server string, params *GetValidMeasurementUnitsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_measurement_units")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateValidMeasurementUnitRequest calls the generic CreateValidMeasurementUnit builder with application/json body
func NewCreateValidMeasurementUnitRequest(server string, body CreateValidMeasurementUnitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateValidMeasurementUnitRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateValidMeasurementUnitRequestWithBody generates requests for CreateValidMeasurementUnit with any type of body
func NewCreateValidMeasurementUnitRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_measurement_units")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetValidMeasurementUnitsByIngredientRequest generates requests for GetValidMeasurementUnitsByIngredient
func NewGetValidMeasurementUnitsByIngredientRequest(server string, validIngredientID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientID", runtime.ParamLocationPath, validIngredientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_measurement_units/by_ingredient/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchForValidMeasurementUnitsRequest generates requests for SearchForValidMeasurementUnits
func NewSearchForValidMeasurementUnitsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_measurement_units/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArchiveValidMeasurementUnitRequest generates requests for ArchiveValidMeasurementUnit
func NewArchiveValidMeasurementUnitRequest(server string, validMeasurementUnitID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validMeasurementUnitID", runtime.ParamLocationPath, validMeasurementUnitID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_measurement_units/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetValidMeasurementUnitRequest generates requests for GetValidMeasurementUnit
func NewGetValidMeasurementUnitRequest(server string, validMeasurementUnitID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validMeasurementUnitID", runtime.ParamLocationPath, validMeasurementUnitID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_measurement_units/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateValidMeasurementUnitRequest calls the generic UpdateValidMeasurementUnit builder with application/json body
func NewUpdateValidMeasurementUnitRequest(server string, validMeasurementUnitID string, body UpdateValidMeasurementUnitJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateValidMeasurementUnitRequestWithBody(server, validMeasurementUnitID, "application/json", bodyReader)
}

// NewUpdateValidMeasurementUnitRequestWithBody generates requests for UpdateValidMeasurementUnit with any type of body
func NewUpdateValidMeasurementUnitRequestWithBody(server string, validMeasurementUnitID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validMeasurementUnitID", runtime.ParamLocationPath, validMeasurementUnitID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_measurement_units/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetValidPreparationInstrumentsRequest generates requests for GetValidPreparationInstruments
func NewGetValidPreparationInstrumentsRequest(server string, params *GetValidPreparationInstrumentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_instruments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateValidPreparationInstrumentRequest calls the generic CreateValidPreparationInstrument builder with application/json body
func NewCreateValidPreparationInstrumentRequest(server string, body CreateValidPreparationInstrumentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateValidPreparationInstrumentRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateValidPreparationInstrumentRequestWithBody generates requests for CreateValidPreparationInstrument with any type of body
func NewCreateValidPreparationInstrumentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_instruments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetValidPreparationInstrumentsByInstrumentRequest generates requests for GetValidPreparationInstrumentsByInstrument
func NewGetValidPreparationInstrumentsByInstrumentRequest(server string, validInstrumentID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validInstrumentID", runtime.ParamLocationPath, validInstrumentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_instruments/by_instrument/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetValidPreparationInstrumentsByPreparationRequest generates requests for GetValidPreparationInstrumentsByPreparation
func NewGetValidPreparationInstrumentsByPreparationRequest(server string, validPreparationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validPreparationID", runtime.ParamLocationPath, validPreparationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_instruments/by_preparation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArchiveValidPreparationInstrumentRequest generates requests for ArchiveValidPreparationInstrument
func NewArchiveValidPreparationInstrumentRequest(server string, validPreparationVesselID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validPreparationVesselID", runtime.ParamLocationPath, validPreparationVesselID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_instruments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetValidPreparationInstrumentRequest generates requests for GetValidPreparationInstrument
func NewGetValidPreparationInstrumentRequest(server string, validPreparationVesselID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validPreparationVesselID", runtime.ParamLocationPath, validPreparationVesselID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_instruments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateValidPreparationInstrumentRequest calls the generic UpdateValidPreparationInstrument builder with application/json body
func NewUpdateValidPreparationInstrumentRequest(server string, validPreparationVesselID string, body UpdateValidPreparationInstrumentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateValidPreparationInstrumentRequestWithBody(server, validPreparationVesselID, "application/json", bodyReader)
}

// NewUpdateValidPreparationInstrumentRequestWithBody generates requests for UpdateValidPreparationInstrument with any type of body
func NewUpdateValidPreparationInstrumentRequestWithBody(server string, validPreparationVesselID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validPreparationVesselID", runtime.ParamLocationPath, validPreparationVesselID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_instruments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetValidPreparationVesselsRequest generates requests for GetValidPreparationVessels
func NewGetValidPreparationVesselsRequest(server string, params *GetValidPreparationVesselsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_vessels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateValidPreparationVesselRequest calls the generic CreateValidPreparationVessel builder with application/json body
func NewCreateValidPreparationVesselRequest(server string, body CreateValidPreparationVesselJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateValidPreparationVesselRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateValidPreparationVesselRequestWithBody generates requests for CreateValidPreparationVessel with any type of body
func NewCreateValidPreparationVesselRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_vessels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetValidPreparationVesselsByPreparationRequest generates requests for GetValidPreparationVesselsByPreparation
func NewGetValidPreparationVesselsByPreparationRequest(server string, validPreparationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validPreparationID", runtime.ParamLocationPath, validPreparationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_vessels/by_preparation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetValidPreparationVesselsByVesselRequest generates requests for GetValidPreparationVesselsByVessel
func NewGetValidPreparationVesselsByVesselRequest(server string, validVesselID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ValidVesselID", runtime.ParamLocationPath, validVesselID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_vessels/by_vessel/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArchiveValidPreparationVesselRequest generates requests for ArchiveValidPreparationVessel
func NewArchiveValidPreparationVesselRequest(server string, validPreparationVesselID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validPreparationVesselID", runtime.ParamLocationPath, validPreparationVesselID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_vessels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetValidPreparationVesselRequest generates requests for GetValidPreparationVessel
func NewGetValidPreparationVesselRequest(server string, validPreparationVesselID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validPreparationVesselID", runtime.ParamLocationPath, validPreparationVesselID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_vessels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateValidPreparationVesselRequest calls the generic UpdateValidPreparationVessel builder with application/json body
func NewUpdateValidPreparationVesselRequest(server string, validPreparationVesselID string, body UpdateValidPreparationVesselJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateValidPreparationVesselRequestWithBody(server, validPreparationVesselID, "application/json", bodyReader)
}

// NewUpdateValidPreparationVesselRequestWithBody generates requests for UpdateValidPreparationVessel with any type of body
func NewUpdateValidPreparationVesselRequestWithBody(server string, validPreparationVesselID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validPreparationVesselID", runtime.ParamLocationPath, validPreparationVesselID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_vessels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetValidPreparationsRequest generates requests for GetValidPreparations
func NewGetValidPreparationsRequest(server string, params *GetValidPreparationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateValidPreparationRequest calls the generic CreateValidPreparation builder with application/json body
func NewCreateValidPreparationRequest(server string, body CreateValidPreparationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateValidPreparationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateValidPreparationRequestWithBody generates requests for CreateValidPreparation with any type of body
func NewCreateValidPreparationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRandomValidPreparationRequest generates requests for GetRandomValidPreparation
func NewGetRandomValidPreparationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparations/random")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchForValidPreparationsRequest generates requests for SearchForValidPreparations
func NewSearchForValidPreparationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparations/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArchiveValidPreparationRequest generates requests for ArchiveValidPreparation
func NewArchiveValidPreparationRequest(server string, validPreparationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validPreparationID", runtime.ParamLocationPath, validPreparationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetValidPreparationRequest generates requests for GetValidPreparation
func NewGetValidPreparationRequest(server string, validPreparationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validPreparationID", runtime.ParamLocationPath, validPreparationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateValidPreparationRequest calls the generic UpdateValidPreparation builder with application/json body
func NewUpdateValidPreparationRequest(server string, validPreparationID string, body UpdateValidPreparationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateValidPreparationRequestWithBody(server, validPreparationID, "application/json", bodyReader)
}

// NewUpdateValidPreparationRequestWithBody generates requests for UpdateValidPreparation with any type of body
func NewUpdateValidPreparationRequestWithBody(server string, validPreparationID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validPreparationID", runtime.ParamLocationPath, validPreparationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetValidVesselsRequest generates requests for GetValidVessels
func NewGetValidVesselsRequest(server string, params *GetValidVesselsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_vessels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateValidVesselRequest calls the generic CreateValidVessel builder with application/json body
func NewCreateValidVesselRequest(server string, body CreateValidVesselJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateValidVesselRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateValidVesselRequestWithBody generates requests for CreateValidVessel with any type of body
func NewCreateValidVesselRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_vessels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRandomValidVesselRequest generates requests for GetRandomValidVessel
func NewGetRandomValidVesselRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_vessels/random")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchForValidVesselsRequest generates requests for SearchForValidVessels
func NewSearchForValidVesselsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_vessels/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewArchiveValidVesselRequest generates requests for ArchiveValidVessel
func NewArchiveValidVesselRequest(server string, validVesselID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validVesselID", runtime.ParamLocationPath, validVesselID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_vessels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetValidVesselRequest generates requests for GetValidVessel
func NewGetValidVesselRequest(server string, validVesselID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validVesselID", runtime.ParamLocationPath, validVesselID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_vessels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateValidVesselRequest calls the generic UpdateValidVessel builder with application/json body
func NewUpdateValidVesselRequest(server string, validVesselID string, body UpdateValidVesselJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateValidVesselRequestWithBody(server, validVesselID, "application/json", bodyReader)
}

// NewUpdateValidVesselRequestWithBody generates requests for UpdateValidVessel with any type of body
func NewUpdateValidVesselRequestWithBody(server string, validVesselID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validVesselID", runtime.ParamLocationPath, validVesselID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_vessels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWebhooksRequest generates requests for GetWebhooks
func NewGetWebhooksRequest(server string, params *GetWebhooksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/webhooks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWebhookRequest calls the generic CreateWebhook builder with application/json body
func NewCreateWebhookRequest(server string, body CreateWebhookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWebhookRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateWebhookRequestWithBody generates requests for CreateWebhook with any type of body
func NewCreateWebhookRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/webhooks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveWebhookRequest generates requests for ArchiveWebhook
func NewArchiveWebhookRequest(server string, webhookID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "webhookID", runtime.ParamLocationPath, webhookID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/webhooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWebhookRequest generates requests for GetWebhook
func NewGetWebhookRequest(server string, webhookID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "webhookID", runtime.ParamLocationPath, webhookID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/webhooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateWebhookTriggerEventRequest calls the generic CreateWebhookTriggerEvent builder with application/json body
func NewCreateWebhookTriggerEventRequest(server string, webhookID string, body CreateWebhookTriggerEventJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWebhookTriggerEventRequestWithBody(server, webhookID, "application/json", bodyReader)
}

// NewCreateWebhookTriggerEventRequestWithBody generates requests for CreateWebhookTriggerEvent with any type of body
func NewCreateWebhookTriggerEventRequestWithBody(server string, webhookID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "webhookID", runtime.ParamLocationPath, webhookID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/webhooks/%s/trigger_events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewArchiveWebhookTriggerEventRequest generates requests for ArchiveWebhookTriggerEvent
func NewArchiveWebhookTriggerEventRequest(server string, webhookID string, webhookTriggerEventID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "webhookID", runtime.ParamLocationPath, webhookID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "webhookTriggerEventID", runtime.ParamLocationPath, webhookTriggerEventID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/webhooks/%s/trigger_events/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRunFinalizeMealPlanWorkerRequest calls the generic RunFinalizeMealPlanWorker builder with application/json body
func NewRunFinalizeMealPlanWorkerRequest(server string, body RunFinalizeMealPlanWorkerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRunFinalizeMealPlanWorkerRequestWithBody(server, "application/json", bodyReader)
}

// NewRunFinalizeMealPlanWorkerRequestWithBody generates requests for RunFinalizeMealPlanWorker with any type of body
func NewRunFinalizeMealPlanWorkerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/workers/finalize_meal_plans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRunMealPlanGroceryListInitializerWorkerRequest generates requests for RunMealPlanGroceryListInitializerWorker
func NewRunMealPlanGroceryListInitializerWorkerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/workers/meal_plan_grocery_list_init")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRunMealPlanTaskCreatorWorkerRequest generates requests for RunMealPlanTaskCreatorWorker
func NewRunMealPlanTaskCreatorWorkerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/workers/meal_plan_tasks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthStatusRequest generates requests for GetAuthStatus
func NewGetAuthStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETOauth2AuthorizeRequest generates requests for GETOauth2Authorize
func NewGETOauth2AuthorizeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth2/authorize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTOauth2TokenRequest generates requests for POSTOauth2Token
func NewPOSTOauth2TokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth2/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTUsersRequest calls the generic POSTUsers builder with application/json body
func NewPOSTUsersRequest(server string, body POSTUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTUsersRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTUsersRequestWithBody generates requests for POSTUsers with any type of body
func NewPOSTUsersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVerifyEmailAddressRequest calls the generic VerifyEmailAddress builder with application/json body
func NewVerifyEmailAddressRequest(server string, body VerifyEmailAddressJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifyEmailAddressRequestWithBody(server, "application/json", bodyReader)
}

// NewVerifyEmailAddressRequestWithBody generates requests for VerifyEmailAddress with any type of body
func NewVerifyEmailAddressRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/email_address/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLoginRequest calls the generic Login builder with application/json body
func NewLoginRequest(server string, body LoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewLoginRequestWithBody generates requests for Login with any type of body
func NewLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminLoginRequest calls the generic AdminLogin builder with application/json body
func NewAdminLoginRequest(server string, body AdminLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewAdminLoginRequestWithBody generates requests for AdminLogin with any type of body
func NewAdminLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/login/admin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLogoutRequest generates requests for Logout
func NewLogoutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRequestPasswordResetTokenRequest calls the generic RequestPasswordResetToken builder with application/json body
func NewRequestPasswordResetTokenRequest(server string, body RequestPasswordResetTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRequestPasswordResetTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewRequestPasswordResetTokenRequestWithBody generates requests for RequestPasswordResetToken with any type of body
func NewRequestPasswordResetTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/password/reset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRedeemPasswordResetTokenRequest calls the generic RedeemPasswordResetToken builder with application/json body
func NewRedeemPasswordResetTokenRequest(server string, body RedeemPasswordResetTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRedeemPasswordResetTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewRedeemPasswordResetTokenRequestWithBody generates requests for RedeemPasswordResetToken with any type of body
func NewRedeemPasswordResetTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/password/reset/redeem")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewVerifyTOTPSecretRequest calls the generic VerifyTOTPSecret builder with application/json body
func NewVerifyTOTPSecretRequest(server string, body VerifyTOTPSecretJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifyTOTPSecretRequestWithBody(server, "application/json", bodyReader)
}

// NewVerifyTOTPSecretRequestWithBody generates requests for VerifyTOTPSecret with any type of body
func NewVerifyTOTPSecretRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/totp_secret/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRequestUsernameReminderRequest calls the generic RequestUsernameReminder builder with application/json body
func NewRequestUsernameReminderRequest(server string, body RequestUsernameReminderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRequestUsernameReminderRequestWithBody(server, "application/json", bodyReader)
}

// NewRequestUsernameReminderRequestWithBody generates requests for RequestUsernameReminder with any type of body
func NewRequestUsernameReminderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/username/reminder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AdminCycleCookieSecretWithResponse request
	AdminCycleCookieSecretWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminCycleCookieSecretResponse, error)

	// AdminUpdateUserStatusWithBodyWithResponse request with any body
	AdminUpdateUserStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUpdateUserStatusResponse, error)

	AdminUpdateUserStatusWithResponse(ctx context.Context, body AdminUpdateUserStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUpdateUserStatusResponse, error)

	// GetAuditLogEntriesForHouseholdWithResponse request
	GetAuditLogEntriesForHouseholdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuditLogEntriesForHouseholdResponse, error)

	// GetAuditLogEntriesForUserWithResponse request
	GetAuditLogEntriesForUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuditLogEntriesForUserResponse, error)

	// GetAuditLogEntryByIDWithResponse request
	GetAuditLogEntryByIDWithResponse(ctx context.Context, auditLogEntryID string, reqEditors ...RequestEditorFn) (*GetAuditLogEntryByIDResponse, error)

	// GetReceivedHouseholdInvitationsWithResponse request
	GetReceivedHouseholdInvitationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetReceivedHouseholdInvitationsResponse, error)

	// GetSentHouseholdInvitationsWithResponse request
	GetSentHouseholdInvitationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSentHouseholdInvitationsResponse, error)

	// GetHouseholdInvitationsWithResponse request
	GetHouseholdInvitationsWithResponse(ctx context.Context, householdInvitationID string, reqEditors ...RequestEditorFn) (*GetHouseholdInvitationsResponse, error)

	// AcceptHouseholdInvitationWithBodyWithResponse request with any body
	AcceptHouseholdInvitationWithBodyWithResponse(ctx context.Context, householdInvitationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AcceptHouseholdInvitationResponse, error)

	AcceptHouseholdInvitationWithResponse(ctx context.Context, householdInvitationID string, body AcceptHouseholdInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*AcceptHouseholdInvitationResponse, error)

	// CancelHouseholdInvitationWithBodyWithResponse request with any body
	CancelHouseholdInvitationWithBodyWithResponse(ctx context.Context, householdInvitationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelHouseholdInvitationResponse, error)

	CancelHouseholdInvitationWithResponse(ctx context.Context, householdInvitationID string, body CancelHouseholdInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelHouseholdInvitationResponse, error)

	// RejectHouseholdInvitationWithBodyWithResponse request with any body
	RejectHouseholdInvitationWithBodyWithResponse(ctx context.Context, householdInvitationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RejectHouseholdInvitationResponse, error)

	RejectHouseholdInvitationWithResponse(ctx context.Context, householdInvitationID string, body RejectHouseholdInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*RejectHouseholdInvitationResponse, error)

	// GetHouseholdsWithResponse request
	GetHouseholdsWithResponse(ctx context.Context, params *GetHouseholdsParams, reqEditors ...RequestEditorFn) (*GetHouseholdsResponse, error)

	// CreateHouseholdWithBodyWithResponse request with any body
	CreateHouseholdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHouseholdResponse, error)

	CreateHouseholdWithResponse(ctx context.Context, body CreateHouseholdJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHouseholdResponse, error)

	// GetActiveHouseholdWithResponse request
	GetActiveHouseholdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActiveHouseholdResponse, error)

	// GetHouseholdInstrumentOwnershipsWithResponse request
	GetHouseholdInstrumentOwnershipsWithResponse(ctx context.Context, params *GetHouseholdInstrumentOwnershipsParams, reqEditors ...RequestEditorFn) (*GetHouseholdInstrumentOwnershipsResponse, error)

	// CreateHouseholdInstrumentOwnershipWithBodyWithResponse request with any body
	CreateHouseholdInstrumentOwnershipWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHouseholdInstrumentOwnershipResponse, error)

	CreateHouseholdInstrumentOwnershipWithResponse(ctx context.Context, body CreateHouseholdInstrumentOwnershipJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHouseholdInstrumentOwnershipResponse, error)

	// ArchiveHouseholdInstrumentOwnershipWithResponse request
	ArchiveHouseholdInstrumentOwnershipWithResponse(ctx context.Context, householdInstrumentOwnershipID string, reqEditors ...RequestEditorFn) (*ArchiveHouseholdInstrumentOwnershipResponse, error)

	// GetHouseholdInstrumentOwnershipWithResponse request
	GetHouseholdInstrumentOwnershipWithResponse(ctx context.Context, householdInstrumentOwnershipID string, reqEditors ...RequestEditorFn) (*GetHouseholdInstrumentOwnershipResponse, error)

	// UpdateHouseholdInstrumentOwnershipWithBodyWithResponse request with any body
	UpdateHouseholdInstrumentOwnershipWithBodyWithResponse(ctx context.Context, householdInstrumentOwnershipID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateHouseholdInstrumentOwnershipResponse, error)

	UpdateHouseholdInstrumentOwnershipWithResponse(ctx context.Context, householdInstrumentOwnershipID string, body UpdateHouseholdInstrumentOwnershipJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateHouseholdInstrumentOwnershipResponse, error)

	// ArchiveHouseholdWithResponse request
	ArchiveHouseholdWithResponse(ctx context.Context, householdID string, reqEditors ...RequestEditorFn) (*ArchiveHouseholdResponse, error)

	// GetHouseholdWithResponse request
	GetHouseholdWithResponse(ctx context.Context, householdID string, reqEditors ...RequestEditorFn) (*GetHouseholdResponse, error)

	// UpdateHouseholdWithBodyWithResponse request with any body
	UpdateHouseholdWithBodyWithResponse(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateHouseholdResponse, error)

	UpdateHouseholdWithResponse(ctx context.Context, householdID string, body UpdateHouseholdJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateHouseholdResponse, error)

	// SetDefaultHouseholdWithResponse request
	SetDefaultHouseholdWithResponse(ctx context.Context, householdID string, reqEditors ...RequestEditorFn) (*SetDefaultHouseholdResponse, error)

	// CreateHouseholdInvitationWithBodyWithResponse request with any body
	CreateHouseholdInvitationWithBodyWithResponse(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHouseholdInvitationResponse, error)

	CreateHouseholdInvitationWithResponse(ctx context.Context, householdID string, body CreateHouseholdInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHouseholdInvitationResponse, error)

	// GetHouseholdInvitationByIDWithResponse request
	GetHouseholdInvitationByIDWithResponse(ctx context.Context, householdID string, householdInvitationID string, reqEditors ...RequestEditorFn) (*GetHouseholdInvitationByIDResponse, error)

	// POSTHouseholdsHouseholdIDInviteWithBodyWithResponse request with any body
	POSTHouseholdsHouseholdIDInviteWithBodyWithResponse(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTHouseholdsHouseholdIDInviteResponse, error)

	POSTHouseholdsHouseholdIDInviteWithResponse(ctx context.Context, householdID string, body POSTHouseholdsHouseholdIDInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTHouseholdsHouseholdIDInviteResponse, error)

	// ArchiveUserMembershipWithResponse request
	ArchiveUserMembershipWithResponse(ctx context.Context, householdID string, userID string, reqEditors ...RequestEditorFn) (*ArchiveUserMembershipResponse, error)

	// UpdateHouseholdMemberPermissionsWithBodyWithResponse request with any body
	UpdateHouseholdMemberPermissionsWithBodyWithResponse(ctx context.Context, householdID string, userID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateHouseholdMemberPermissionsResponse, error)

	UpdateHouseholdMemberPermissionsWithResponse(ctx context.Context, householdID string, userID string, body UpdateHouseholdMemberPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateHouseholdMemberPermissionsResponse, error)

	// TransferHouseholdOwnershipWithBodyWithResponse request with any body
	TransferHouseholdOwnershipWithBodyWithResponse(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TransferHouseholdOwnershipResponse, error)

	TransferHouseholdOwnershipWithResponse(ctx context.Context, householdID string, body TransferHouseholdOwnershipJSONRequestBody, reqEditors ...RequestEditorFn) (*TransferHouseholdOwnershipResponse, error)

	// GetMealPlansWithResponse request
	GetMealPlansWithResponse(ctx context.Context, params *GetMealPlansParams, reqEditors ...RequestEditorFn) (*GetMealPlansResponse, error)

	// CreateMealPlanWithBodyWithResponse request with any body
	CreateMealPlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMealPlanResponse, error)

	CreateMealPlanWithResponse(ctx context.Context, body CreateMealPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMealPlanResponse, error)

	// ArchiveMealPlanWithResponse request
	ArchiveMealPlanWithResponse(ctx context.Context, mealPlanID string, reqEditors ...RequestEditorFn) (*ArchiveMealPlanResponse, error)

	// GetMealPlanWithResponse request
	GetMealPlanWithResponse(ctx context.Context, mealPlanID string, reqEditors ...RequestEditorFn) (*GetMealPlanResponse, error)

	// UpdateMealPlanWithBodyWithResponse request with any body
	UpdateMealPlanWithBodyWithResponse(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMealPlanResponse, error)

	UpdateMealPlanWithResponse(ctx context.Context, mealPlanID string, body UpdateMealPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMealPlanResponse, error)

	// GetMealPlanEventsWithResponse request
	GetMealPlanEventsWithResponse(ctx context.Context, mealPlanID string, params *GetMealPlanEventsParams, reqEditors ...RequestEditorFn) (*GetMealPlanEventsResponse, error)

	// CreateMealPlanEventWithBodyWithResponse request with any body
	CreateMealPlanEventWithBodyWithResponse(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMealPlanEventResponse, error)

	CreateMealPlanEventWithResponse(ctx context.Context, mealPlanID string, body CreateMealPlanEventJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMealPlanEventResponse, error)

	// ArchiveMealPlanEventWithResponse request
	ArchiveMealPlanEventWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, reqEditors ...RequestEditorFn) (*ArchiveMealPlanEventResponse, error)

	// GetMealPlanEventWithResponse request
	GetMealPlanEventWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, reqEditors ...RequestEditorFn) (*GetMealPlanEventResponse, error)

	// UpdateMealPlanEventWithBodyWithResponse request with any body
	UpdateMealPlanEventWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMealPlanEventResponse, error)

	UpdateMealPlanEventWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, body UpdateMealPlanEventJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMealPlanEventResponse, error)

	// GetMealPlanOptionsWithResponse request
	GetMealPlanOptionsWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, params *GetMealPlanOptionsParams, reqEditors ...RequestEditorFn) (*GetMealPlanOptionsResponse, error)

	// CreateMealPlanOptionWithBodyWithResponse request with any body
	CreateMealPlanOptionWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMealPlanOptionResponse, error)

	CreateMealPlanOptionWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, body CreateMealPlanOptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMealPlanOptionResponse, error)

	// ArchiveMealPlanOptionWithResponse request
	ArchiveMealPlanOptionWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, reqEditors ...RequestEditorFn) (*ArchiveMealPlanOptionResponse, error)

	// GetMealPlanOptionWithResponse request
	GetMealPlanOptionWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, reqEditors ...RequestEditorFn) (*GetMealPlanOptionResponse, error)

	// UpdateMealPlanOptionWithBodyWithResponse request with any body
	UpdateMealPlanOptionWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMealPlanOptionResponse, error)

	UpdateMealPlanOptionWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, body UpdateMealPlanOptionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMealPlanOptionResponse, error)

	// GetMealPlanOptionVotesWithResponse request
	GetMealPlanOptionVotesWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, params *GetMealPlanOptionVotesParams, reqEditors ...RequestEditorFn) (*GetMealPlanOptionVotesResponse, error)

	// ArchiveMealPlanOptionVoteWithResponse request
	ArchiveMealPlanOptionVoteWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, reqEditors ...RequestEditorFn) (*ArchiveMealPlanOptionVoteResponse, error)

	// GetMealPlanOptionVoteWithResponse request
	GetMealPlanOptionVoteWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, reqEditors ...RequestEditorFn) (*GetMealPlanOptionVoteResponse, error)

	// UpdateMealPlanOptionVoteWithBodyWithResponse request with any body
	UpdateMealPlanOptionVoteWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMealPlanOptionVoteResponse, error)

	UpdateMealPlanOptionVoteWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, body UpdateMealPlanOptionVoteJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMealPlanOptionVoteResponse, error)

	// CreateMealPlanVoteWithBodyWithResponse request with any body
	CreateMealPlanVoteWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMealPlanVoteResponse, error)

	CreateMealPlanVoteWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, body CreateMealPlanVoteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMealPlanVoteResponse, error)

	// FinalizeMealPlanWithResponse request
	FinalizeMealPlanWithResponse(ctx context.Context, mealPlanID string, reqEditors ...RequestEditorFn) (*FinalizeMealPlanResponse, error)

	// GetMealPlanGroceryListItemsWithResponse request
	GetMealPlanGroceryListItemsWithResponse(ctx context.Context, mealPlanID string, params *GetMealPlanGroceryListItemsParams, reqEditors ...RequestEditorFn) (*GetMealPlanGroceryListItemsResponse, error)

	// CreateMealPlanGroceryListItemWithBodyWithResponse request with any body
	CreateMealPlanGroceryListItemWithBodyWithResponse(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMealPlanGroceryListItemResponse, error)

	CreateMealPlanGroceryListItemWithResponse(ctx context.Context, mealPlanID string, body CreateMealPlanGroceryListItemJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMealPlanGroceryListItemResponse, error)

	// ArchiveMealPlanGroceryListItemWithResponse request
	ArchiveMealPlanGroceryListItemWithResponse(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, reqEditors ...RequestEditorFn) (*ArchiveMealPlanGroceryListItemResponse, error)

	// GetMealPlanGroceryListItemWithResponse request
	GetMealPlanGroceryListItemWithResponse(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, reqEditors ...RequestEditorFn) (*GetMealPlanGroceryListItemResponse, error)

	// UpdateMealPlanGroceryListItemWithBodyWithResponse request with any body
	UpdateMealPlanGroceryListItemWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMealPlanGroceryListItemResponse, error)

	UpdateMealPlanGroceryListItemWithResponse(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, body UpdateMealPlanGroceryListItemJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMealPlanGroceryListItemResponse, error)

	// GetMealPlanTasksWithResponse request
	GetMealPlanTasksWithResponse(ctx context.Context, mealPlanID string, params *GetMealPlanTasksParams, reqEditors ...RequestEditorFn) (*GetMealPlanTasksResponse, error)

	// CreateMealPlanTaskWithBodyWithResponse request with any body
	CreateMealPlanTaskWithBodyWithResponse(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMealPlanTaskResponse, error)

	CreateMealPlanTaskWithResponse(ctx context.Context, mealPlanID string, body CreateMealPlanTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMealPlanTaskResponse, error)

	// GetMealPlanTaskWithResponse request
	GetMealPlanTaskWithResponse(ctx context.Context, mealPlanID string, mealPlanTaskID string, reqEditors ...RequestEditorFn) (*GetMealPlanTaskResponse, error)

	// UpdateMealPlanTaskWithBodyWithResponse request with any body
	UpdateMealPlanTaskWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanTaskID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMealPlanTaskResponse, error)

	UpdateMealPlanTaskWithResponse(ctx context.Context, mealPlanID string, mealPlanTaskID string, body UpdateMealPlanTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMealPlanTaskResponse, error)

	// GetMealsWithResponse request
	GetMealsWithResponse(ctx context.Context, params *GetMealsParams, reqEditors ...RequestEditorFn) (*GetMealsResponse, error)

	// CreateMealWithBodyWithResponse request with any body
	CreateMealWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMealResponse, error)

	CreateMealWithResponse(ctx context.Context, body CreateMealJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMealResponse, error)

	// SearchForMealsWithResponse request
	SearchForMealsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SearchForMealsResponse, error)

	// ArchiveMealWithResponse request
	ArchiveMealWithResponse(ctx context.Context, mealID string, reqEditors ...RequestEditorFn) (*ArchiveMealResponse, error)

	// GetMealWithResponse request
	GetMealWithResponse(ctx context.Context, mealID string, reqEditors ...RequestEditorFn) (*GetMealResponse, error)

	// GetOAuth2ClientsWithResponse request
	GetOAuth2ClientsWithResponse(ctx context.Context, params *GetOAuth2ClientsParams, reqEditors ...RequestEditorFn) (*GetOAuth2ClientsResponse, error)

	// CreateOAuth2ClientWithBodyWithResponse request with any body
	CreateOAuth2ClientWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOAuth2ClientResponse, error)

	CreateOAuth2ClientWithResponse(ctx context.Context, body CreateOAuth2ClientJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOAuth2ClientResponse, error)

	// ArchiveOAuth2ClientWithResponse request
	ArchiveOAuth2ClientWithResponse(ctx context.Context, oauth2ClientID string, reqEditors ...RequestEditorFn) (*ArchiveOAuth2ClientResponse, error)

	// GetOAuth2ClientWithResponse request
	GetOAuth2ClientWithResponse(ctx context.Context, oauth2ClientID string, reqEditors ...RequestEditorFn) (*GetOAuth2ClientResponse, error)

	// GetRecipesWithResponse request
	GetRecipesWithResponse(ctx context.Context, params *GetRecipesParams, reqEditors ...RequestEditorFn) (*GetRecipesResponse, error)

	// CreateRecipeWithBodyWithResponse request with any body
	CreateRecipeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRecipeResponse, error)

	CreateRecipeWithResponse(ctx context.Context, body CreateRecipeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRecipeResponse, error)

	// SearchForRecipesWithResponse request
	SearchForRecipesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SearchForRecipesResponse, error)

	// ArchiveRecipeWithResponse request
	ArchiveRecipeWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*ArchiveRecipeResponse, error)

	// GetRecipeWithResponse request
	GetRecipeWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*GetRecipeResponse, error)

	// UpdateRecipeWithBodyWithResponse request with any body
	UpdateRecipeWithBodyWithResponse(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRecipeResponse, error)

	UpdateRecipeWithResponse(ctx context.Context, recipeID string, body UpdateRecipeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRecipeResponse, error)

	// CloneRecipeWithResponse request
	CloneRecipeWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*CloneRecipeResponse, error)

	// GetRecipeDAGWithResponse request
	GetRecipeDAGWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*GetRecipeDAGResponse, error)

	// POSTRecipesRecipeIDImagesWithResponse request
	POSTRecipesRecipeIDImagesWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDImagesResponse, error)

	// GETRecipesRecipeIDMermaidWithResponse request
	GETRecipesRecipeIDMermaidWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDMermaidResponse, error)

	// GetRecipePrepTaskStepWithResponse request
	GetRecipePrepTaskStepWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*GetRecipePrepTaskStepResponse, error)

	// GetRecipePrepTasksWithResponse request
	GetRecipePrepTasksWithResponse(ctx context.Context, recipeID string, params *GetRecipePrepTasksParams, reqEditors ...RequestEditorFn) (*GetRecipePrepTasksResponse, error)

	// CreateRecipePrepTaskWithBodyWithResponse request with any body
	CreateRecipePrepTaskWithBodyWithResponse(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRecipePrepTaskResponse, error)

	CreateRecipePrepTaskWithResponse(ctx context.Context, recipeID string, body CreateRecipePrepTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRecipePrepTaskResponse, error)

	// ArchiveRecipePrepTaskWithResponse request
	ArchiveRecipePrepTaskWithResponse(ctx context.Context, recipeID string, recipePrepTaskID string, reqEditors ...RequestEditorFn) (*ArchiveRecipePrepTaskResponse, error)

	// GetRecipePrepTaskWithResponse request
	GetRecipePrepTaskWithResponse(ctx context.Context, recipeID string, recipePrepTaskID string, reqEditors ...RequestEditorFn) (*GetRecipePrepTaskResponse, error)

	// UpdateRecipePrepTaskWithBodyWithResponse request with any body
	UpdateRecipePrepTaskWithBodyWithResponse(ctx context.Context, recipeID string, recipePrepTaskID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRecipePrepTaskResponse, error)

	UpdateRecipePrepTaskWithResponse(ctx context.Context, recipeID string, recipePrepTaskID string, body UpdateRecipePrepTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRecipePrepTaskResponse, error)

	// GetRecipeRatingsWithResponse request
	GetRecipeRatingsWithResponse(ctx context.Context, recipeID string, params *GetRecipeRatingsParams, reqEditors ...RequestEditorFn) (*GetRecipeRatingsResponse, error)

	// CreateRecipeRatingWithBodyWithResponse request with any body
	CreateRecipeRatingWithBodyWithResponse(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRecipeRatingResponse, error)

	CreateRecipeRatingWithResponse(ctx context.Context, recipeID string, body CreateRecipeRatingJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRecipeRatingResponse, error)

	// ArchiveRecipeRatingWithResponse request
	ArchiveRecipeRatingWithResponse(ctx context.Context, recipeID string, recipeRatingID string, reqEditors ...RequestEditorFn) (*ArchiveRecipeRatingResponse, error)

	// GetRecipeRatingWithResponse request
	GetRecipeRatingWithResponse(ctx context.Context, recipeID string, recipeRatingID string, reqEditors ...RequestEditorFn) (*GetRecipeRatingResponse, error)

	// UpdateRecipeRatingWithBodyWithResponse request with any body
	UpdateRecipeRatingWithBodyWithResponse(ctx context.Context, recipeID string, recipeRatingID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRecipeRatingResponse, error)

	UpdateRecipeRatingWithResponse(ctx context.Context, recipeID string, recipeRatingID string, body UpdateRecipeRatingJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRecipeRatingResponse, error)

	// GetRecipeStepsWithResponse request
	GetRecipeStepsWithResponse(ctx context.Context, recipeID string, params *GetRecipeStepsParams, reqEditors ...RequestEditorFn) (*GetRecipeStepsResponse, error)

	// CreateRecipeStepWithBodyWithResponse request with any body
	CreateRecipeStepWithBodyWithResponse(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRecipeStepResponse, error)

	CreateRecipeStepWithResponse(ctx context.Context, recipeID string, body CreateRecipeStepJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRecipeStepResponse, error)

	// ArchiveRecipeStepWithResponse request
	ArchiveRecipeStepWithResponse(ctx context.Context, recipeID string, recipeStepID string, reqEditors ...RequestEditorFn) (*ArchiveRecipeStepResponse, error)

	// GetRecipeStepWithResponse request
	GetRecipeStepWithResponse(ctx context.Context, recipeID string, recipeStepID string, reqEditors ...RequestEditorFn) (*GetRecipeStepResponse, error)

	// UpdateRecipeStepWithBodyWithResponse request with any body
	UpdateRecipeStepWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRecipeStepResponse, error)

	UpdateRecipeStepWithResponse(ctx context.Context, recipeID string, recipeStepID string, body UpdateRecipeStepJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRecipeStepResponse, error)

	// GetRecipeStepCompletionConditionsWithResponse request
	GetRecipeStepCompletionConditionsWithResponse(ctx context.Context, recipeID string, recipeStepID string, params *GetRecipeStepCompletionConditionsParams, reqEditors ...RequestEditorFn) (*GetRecipeStepCompletionConditionsResponse, error)

	// CreateRecipeStepCompletionConditionWithBodyWithResponse request with any body
	CreateRecipeStepCompletionConditionWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRecipeStepCompletionConditionResponse, error)

	CreateRecipeStepCompletionConditionWithResponse(ctx context.Context, recipeID string, recipeStepID string, body CreateRecipeStepCompletionConditionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRecipeStepCompletionConditionResponse, error)

	// ArchiveRecipeStepCompletionConditionWithResponse request
	ArchiveRecipeStepCompletionConditionWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, reqEditors ...RequestEditorFn) (*ArchiveRecipeStepCompletionConditionResponse, error)

	// GetRecipeStepCompletionConditionWithResponse request
	GetRecipeStepCompletionConditionWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, reqEditors ...RequestEditorFn) (*GetRecipeStepCompletionConditionResponse, error)

	// UpdateRecipeStepCompletionConditionWithBodyWithResponse request with any body
	UpdateRecipeStepCompletionConditionWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRecipeStepCompletionConditionResponse, error)

	UpdateRecipeStepCompletionConditionWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, body UpdateRecipeStepCompletionConditionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRecipeStepCompletionConditionResponse, error)

	// POSTRecipesRecipeIDStepsRecipeStepIDImagesWithResponse request
	POSTRecipesRecipeIDStepsRecipeStepIDImagesWithResponse(ctx context.Context, recipeID string, recipeStepID string, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsRecipeStepIDImagesResponse, error)

	// GetRecipeStepIngredientsWithResponse request
	GetRecipeStepIngredientsWithResponse(ctx context.Context, recipeID string, recipeStepID string, params *GetRecipeStepIngredientsParams, reqEditors ...RequestEditorFn) (*GetRecipeStepIngredientsResponse, error)

	// CreateRecipeStepIngredientWithBodyWithResponse request with any body
	CreateRecipeStepIngredientWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRecipeStepIngredientResponse, error)

	CreateRecipeStepIngredientWithResponse(ctx context.Context, recipeID string, recipeStepID string, body CreateRecipeStepIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRecipeStepIngredientResponse, error)

	// ArchiveRecipeStepIngredientWithResponse request
	ArchiveRecipeStepIngredientWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, reqEditors ...RequestEditorFn) (*ArchiveRecipeStepIngredientResponse, error)

	// GetRecipeStepIngredientWithResponse request
	GetRecipeStepIngredientWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, reqEditors ...RequestEditorFn) (*GetRecipeStepIngredientResponse, error)

	// UpdateRecipeStepIngredientWithBodyWithResponse request with any body
	UpdateRecipeStepIngredientWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRecipeStepIngredientResponse, error)

	UpdateRecipeStepIngredientWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, body UpdateRecipeStepIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRecipeStepIngredientResponse, error)

	// GetRecipeStepInstrumentsWithResponse request
	GetRecipeStepInstrumentsWithResponse(ctx context.Context, recipeID string, recipeStepID string, params *GetRecipeStepInstrumentsParams, reqEditors ...RequestEditorFn) (*GetRecipeStepInstrumentsResponse, error)

	// CreateRecipeStepInstrumentWithBodyWithResponse request with any body
	CreateRecipeStepInstrumentWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRecipeStepInstrumentResponse, error)

	CreateRecipeStepInstrumentWithResponse(ctx context.Context, recipeID string, recipeStepID string, body CreateRecipeStepInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRecipeStepInstrumentResponse, error)

	// ArchiveRecipeStepInstrumentWithResponse request
	ArchiveRecipeStepInstrumentWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, reqEditors ...RequestEditorFn) (*ArchiveRecipeStepInstrumentResponse, error)

	// GetRecipeStepInstrumentWithResponse request
	GetRecipeStepInstrumentWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, reqEditors ...RequestEditorFn) (*GetRecipeStepInstrumentResponse, error)

	// UpdateRecipeStepInstrumentWithBodyWithResponse request with any body
	UpdateRecipeStepInstrumentWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRecipeStepInstrumentResponse, error)

	UpdateRecipeStepInstrumentWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, body UpdateRecipeStepInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRecipeStepInstrumentResponse, error)

	// GetRecipeStepProductsWithResponse request
	GetRecipeStepProductsWithResponse(ctx context.Context, recipeID string, recipeStepID string, params *GetRecipeStepProductsParams, reqEditors ...RequestEditorFn) (*GetRecipeStepProductsResponse, error)

	// CreateRecipeStepProductWithBodyWithResponse request with any body
	CreateRecipeStepProductWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRecipeStepProductResponse, error)

	CreateRecipeStepProductWithResponse(ctx context.Context, recipeID string, recipeStepID string, body CreateRecipeStepProductJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRecipeStepProductResponse, error)

	// ArchiveRecipeStepProductWithResponse request
	ArchiveRecipeStepProductWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, reqEditors ...RequestEditorFn) (*ArchiveRecipeStepProductResponse, error)

	// GetRecipeStepProductWithResponse request
	GetRecipeStepProductWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, reqEditors ...RequestEditorFn) (*GetRecipeStepProductResponse, error)

	// UpdateRecipeStepProductWithBodyWithResponse request with any body
	UpdateRecipeStepProductWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRecipeStepProductResponse, error)

	UpdateRecipeStepProductWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, body UpdateRecipeStepProductJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRecipeStepProductResponse, error)

	// GetRecipeStepVesselsWithResponse request
	GetRecipeStepVesselsWithResponse(ctx context.Context, recipeID string, recipeStepID string, params *GetRecipeStepVesselsParams, reqEditors ...RequestEditorFn) (*GetRecipeStepVesselsResponse, error)

	// CreateRecipeStepVesselWithBodyWithResponse request with any body
	CreateRecipeStepVesselWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRecipeStepVesselResponse, error)

	CreateRecipeStepVesselWithResponse(ctx context.Context, recipeID string, recipeStepID string, body CreateRecipeStepVesselJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRecipeStepVesselResponse, error)

	// ArchiveRecipeStepVesselWithResponse request
	ArchiveRecipeStepVesselWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, reqEditors ...RequestEditorFn) (*ArchiveRecipeStepVesselResponse, error)

	// GetRecipeStepVesselWithResponse request
	GetRecipeStepVesselWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, reqEditors ...RequestEditorFn) (*GetRecipeStepVesselResponse, error)

	// UpdateRecipeStepVesselWithBodyWithResponse request with any body
	UpdateRecipeStepVesselWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRecipeStepVesselResponse, error)

	UpdateRecipeStepVesselWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, body UpdateRecipeStepVesselJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRecipeStepVesselResponse, error)

	// GetServiceSettingsWithResponse request
	GetServiceSettingsWithResponse(ctx context.Context, params *GetServiceSettingsParams, reqEditors ...RequestEditorFn) (*GetServiceSettingsResponse, error)

	// CreateServiceSettingWithBodyWithResponse request with any body
	CreateServiceSettingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceSettingResponse, error)

	CreateServiceSettingWithResponse(ctx context.Context, body CreateServiceSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServiceSettingResponse, error)

	// CreateServiceSettingConfigurationWithBodyWithResponse request with any body
	CreateServiceSettingConfigurationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceSettingConfigurationResponse, error)

	CreateServiceSettingConfigurationWithResponse(ctx context.Context, body CreateServiceSettingConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServiceSettingConfigurationResponse, error)

	// GetServiceSettingConfigurationsForHouseholdWithResponse request
	GetServiceSettingConfigurationsForHouseholdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceSettingConfigurationsForHouseholdResponse, error)

	// GetServiceSettingConfigurationsForUserWithResponse request
	GetServiceSettingConfigurationsForUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceSettingConfigurationsForUserResponse, error)

	// GetServiceSettingConfigurationWithResponse request
	GetServiceSettingConfigurationWithResponse(ctx context.Context, serviceSettingConfigurationName string, reqEditors ...RequestEditorFn) (*GetServiceSettingConfigurationResponse, error)

	// ArchiveServiceSettingConfigurationWithResponse request
	ArchiveServiceSettingConfigurationWithResponse(ctx context.Context, serviceSettingConfigurationID string, reqEditors ...RequestEditorFn) (*ArchiveServiceSettingConfigurationResponse, error)

	// UpdateServiceSettingConfigurationWithBodyWithResponse request with any body
	UpdateServiceSettingConfigurationWithBodyWithResponse(ctx context.Context, serviceSettingConfigurationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceSettingConfigurationResponse, error)

	UpdateServiceSettingConfigurationWithResponse(ctx context.Context, serviceSettingConfigurationID string, body UpdateServiceSettingConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateServiceSettingConfigurationResponse, error)

	// SearchForServiceSettingsWithResponse request
	SearchForServiceSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SearchForServiceSettingsResponse, error)

	// ArchiveServiceSettingWithResponse request
	ArchiveServiceSettingWithResponse(ctx context.Context, serviceSettingID string, reqEditors ...RequestEditorFn) (*ArchiveServiceSettingResponse, error)

	// GetServiceSettingWithResponse request
	GetServiceSettingWithResponse(ctx context.Context, serviceSettingID string, reqEditors ...RequestEditorFn) (*GetServiceSettingResponse, error)

	// GetUserIngredientPreferencesWithResponse request
	GetUserIngredientPreferencesWithResponse(ctx context.Context, params *GetUserIngredientPreferencesParams, reqEditors ...RequestEditorFn) (*GetUserIngredientPreferencesResponse, error)

	// CreateUserIngredientPreferenceWithBodyWithResponse request with any body
	CreateUserIngredientPreferenceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserIngredientPreferenceResponse, error)

	CreateUserIngredientPreferenceWithResponse(ctx context.Context, body CreateUserIngredientPreferenceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserIngredientPreferenceResponse, error)

	// ArchiveUserIngredientPreferenceWithResponse request
	ArchiveUserIngredientPreferenceWithResponse(ctx context.Context, userIngredientPreferenceID string, reqEditors ...RequestEditorFn) (*ArchiveUserIngredientPreferenceResponse, error)

	// UpdateUserIngredientPreferenceWithBodyWithResponse request with any body
	UpdateUserIngredientPreferenceWithBodyWithResponse(ctx context.Context, userIngredientPreferenceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserIngredientPreferenceResponse, error)

	UpdateUserIngredientPreferenceWithResponse(ctx context.Context, userIngredientPreferenceID string, body UpdateUserIngredientPreferenceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserIngredientPreferenceResponse, error)

	// GetUserNotificationsWithResponse request
	GetUserNotificationsWithResponse(ctx context.Context, params *GetUserNotificationsParams, reqEditors ...RequestEditorFn) (*GetUserNotificationsResponse, error)

	// CreateUserNotificationWithBodyWithResponse request with any body
	CreateUserNotificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserNotificationResponse, error)

	CreateUserNotificationWithResponse(ctx context.Context, body CreateUserNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserNotificationResponse, error)

	// GetUserNotificationWithResponse request
	GetUserNotificationWithResponse(ctx context.Context, userNotificationID string, reqEditors ...RequestEditorFn) (*GetUserNotificationResponse, error)

	// UpdateUserNotificationWithBodyWithResponse request with any body
	UpdateUserNotificationWithBodyWithResponse(ctx context.Context, userNotificationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserNotificationResponse, error)

	UpdateUserNotificationWithResponse(ctx context.Context, userNotificationID string, body UpdateUserNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserNotificationResponse, error)

	// GetUsersWithResponse request
	GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// UploadUserAvatarWithBodyWithResponse request with any body
	UploadUserAvatarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadUserAvatarResponse, error)

	UploadUserAvatarWithResponse(ctx context.Context, body UploadUserAvatarJSONRequestBody, reqEditors ...RequestEditorFn) (*UploadUserAvatarResponse, error)

	// UpdateUserDetailsWithBodyWithResponse request with any body
	UpdateUserDetailsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserDetailsResponse, error)

	UpdateUserDetailsWithResponse(ctx context.Context, body UpdateUserDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserDetailsResponse, error)

	// UpdateUserEmailAddressWithBodyWithResponse request with any body
	UpdateUserEmailAddressWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserEmailAddressResponse, error)

	UpdateUserEmailAddressWithResponse(ctx context.Context, body UpdateUserEmailAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserEmailAddressResponse, error)

	// VerifyUserEmailAddressWithBodyWithResponse request with any body
	VerifyUserEmailAddressWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyUserEmailAddressResponse, error)

	VerifyUserEmailAddressWithResponse(ctx context.Context, body VerifyUserEmailAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyUserEmailAddressResponse, error)

	// UpdateDefaultHouseholdWithBodyWithResponse request with any body
	UpdateDefaultHouseholdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDefaultHouseholdResponse, error)

	UpdateDefaultHouseholdWithResponse(ctx context.Context, body UpdateDefaultHouseholdJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDefaultHouseholdResponse, error)

	// UpdatePasswordWithBodyWithResponse request with any body
	UpdatePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePasswordResponse, error)

	UpdatePasswordWithResponse(ctx context.Context, body UpdatePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePasswordResponse, error)

	// CheckPermissionsWithBodyWithResponse request with any body
	CheckPermissionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckPermissionsResponse, error)

	CheckPermissionsWithResponse(ctx context.Context, body CheckPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckPermissionsResponse, error)

	// SearchForUsersWithResponse request
	SearchForUsersWithResponse(ctx context.Context, params *SearchForUsersParams, reqEditors ...RequestEditorFn) (*SearchForUsersResponse, error)

	// GetSelfWithResponse request
	GetSelfWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSelfResponse, error)

	// RefreshTOTPSecretWithBodyWithResponse request with any body
	RefreshTOTPSecretWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RefreshTOTPSecretResponse, error)

	RefreshTOTPSecretWithResponse(ctx context.Context, body RefreshTOTPSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*RefreshTOTPSecretResponse, error)

	// UpdateUserUsernameWithBodyWithResponse request with any body
	UpdateUserUsernameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserUsernameResponse, error)

	UpdateUserUsernameWithResponse(ctx context.Context, body UpdateUserUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserUsernameResponse, error)

	// ArchiveUserWithResponse request
	ArchiveUserWithResponse(ctx context.Context, userID string, reqEditors ...RequestEditorFn) (*ArchiveUserResponse, error)

	// GetUserWithResponse request
	GetUserWithResponse(ctx context.Context, userID string, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// GetValidIngredientGroupsWithResponse request
	GetValidIngredientGroupsWithResponse(ctx context.Context, params *GetValidIngredientGroupsParams, reqEditors ...RequestEditorFn) (*GetValidIngredientGroupsResponse, error)

	// CreateValidIngredientGroupWithBodyWithResponse request with any body
	CreateValidIngredientGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidIngredientGroupResponse, error)

	CreateValidIngredientGroupWithResponse(ctx context.Context, body CreateValidIngredientGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateValidIngredientGroupResponse, error)

	// SearchForValidIngredientGroupsWithResponse request
	SearchForValidIngredientGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SearchForValidIngredientGroupsResponse, error)

	// ArchiveValidIngredientGroupWithResponse request
	ArchiveValidIngredientGroupWithResponse(ctx context.Context, validIngredientGroupID string, reqEditors ...RequestEditorFn) (*ArchiveValidIngredientGroupResponse, error)

	// GetValidIngredientGroupWithResponse request
	GetValidIngredientGroupWithResponse(ctx context.Context, validIngredientGroupID string, reqEditors ...RequestEditorFn) (*GetValidIngredientGroupResponse, error)

	// UpdateValidIngredientGroupWithBodyWithResponse request with any body
	UpdateValidIngredientGroupWithBodyWithResponse(ctx context.Context, validIngredientGroupID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateValidIngredientGroupResponse, error)

	UpdateValidIngredientGroupWithResponse(ctx context.Context, validIngredientGroupID string, body UpdateValidIngredientGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateValidIngredientGroupResponse, error)

	// GetValidIngredientMeasurementUnitsWithResponse request
	GetValidIngredientMeasurementUnitsWithResponse(ctx context.Context, params *GetValidIngredientMeasurementUnitsParams, reqEditors ...RequestEditorFn) (*GetValidIngredientMeasurementUnitsResponse, error)

	// CreateValidIngredientMeasurementUnitWithBodyWithResponse request with any body
	CreateValidIngredientMeasurementUnitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidIngredientMeasurementUnitResponse, error)

	CreateValidIngredientMeasurementUnitWithResponse(ctx context.Context, body CreateValidIngredientMeasurementUnitJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateValidIngredientMeasurementUnitResponse, error)

	// GetValidIngredientMeasurementUnitsByIngredientWithResponse request
	GetValidIngredientMeasurementUnitsByIngredientWithResponse(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*GetValidIngredientMeasurementUnitsByIngredientResponse, error)

	// GetValidIngredientMeasurementUnitsByMeasurementUnitWithResponse request
	GetValidIngredientMeasurementUnitsByMeasurementUnitWithResponse(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*GetValidIngredientMeasurementUnitsByMeasurementUnitResponse, error)

	// ArchiveValidIngredientMeasurementUnitWithResponse request
	ArchiveValidIngredientMeasurementUnitWithResponse(ctx context.Context, validIngredientMeasurementUnitID string, reqEditors ...RequestEditorFn) (*ArchiveValidIngredientMeasurementUnitResponse, error)

	// GetValidIngredientMeasurementUnitWithResponse request
	GetValidIngredientMeasurementUnitWithResponse(ctx context.Context, validIngredientMeasurementUnitID string, reqEditors ...RequestEditorFn) (*GetValidIngredientMeasurementUnitResponse, error)

	// UpdateValidIngredientMeasurementUnitWithBodyWithResponse request with any body
	UpdateValidIngredientMeasurementUnitWithBodyWithResponse(ctx context.Context, validIngredientMeasurementUnitID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateValidIngredientMeasurementUnitResponse, error)

	UpdateValidIngredientMeasurementUnitWithResponse(ctx context.Context, validIngredientMeasurementUnitID string, body UpdateValidIngredientMeasurementUnitJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateValidIngredientMeasurementUnitResponse, error)

	// GetValidIngredientPreparationsWithResponse request
	GetValidIngredientPreparationsWithResponse(ctx context.Context, params *GetValidIngredientPreparationsParams, reqEditors ...RequestEditorFn) (*GetValidIngredientPreparationsResponse, error)

	// CreateValidIngredientPreparationWithBodyWithResponse request with any body
	CreateValidIngredientPreparationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidIngredientPreparationResponse, error)

	CreateValidIngredientPreparationWithResponse(ctx context.Context, body CreateValidIngredientPreparationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateValidIngredientPreparationResponse, error)

	// GetValidIngredientPreparationsByIngredientWithResponse request
	GetValidIngredientPreparationsByIngredientWithResponse(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*GetValidIngredientPreparationsByIngredientResponse, error)

	// GetValidIngredientPreparationsByPreparationWithResponse request
	GetValidIngredientPreparationsByPreparationWithResponse(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*GetValidIngredientPreparationsByPreparationResponse, error)

	// ArchiveValidIngredientPreparationWithResponse request
	ArchiveValidIngredientPreparationWithResponse(ctx context.Context, validIngredientPreparationID string, reqEditors ...RequestEditorFn) (*ArchiveValidIngredientPreparationResponse, error)

	// GetValidIngredientPreparationWithResponse request
	GetValidIngredientPreparationWithResponse(ctx context.Context, validIngredientPreparationID string, reqEditors ...RequestEditorFn) (*GetValidIngredientPreparationResponse, error)

	// UpdateValidIngredientPreparationWithBodyWithResponse request with any body
	UpdateValidIngredientPreparationWithBodyWithResponse(ctx context.Context, validIngredientPreparationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateValidIngredientPreparationResponse, error)

	UpdateValidIngredientPreparationWithResponse(ctx context.Context, validIngredientPreparationID string, body UpdateValidIngredientPreparationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateValidIngredientPreparationResponse, error)

	// GetValidIngredientStateIngredientsWithResponse request
	GetValidIngredientStateIngredientsWithResponse(ctx context.Context, params *GetValidIngredientStateIngredientsParams, reqEditors ...RequestEditorFn) (*GetValidIngredientStateIngredientsResponse, error)

	// CreateValidIngredientStateIngredientWithBodyWithResponse request with any body
	CreateValidIngredientStateIngredientWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidIngredientStateIngredientResponse, error)

	CreateValidIngredientStateIngredientWithResponse(ctx context.Context, body CreateValidIngredientStateIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateValidIngredientStateIngredientResponse, error)

	// GetValidIngredientStateIngredientsByIngredientWithResponse request
	GetValidIngredientStateIngredientsByIngredientWithResponse(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*GetValidIngredientStateIngredientsByIngredientResponse, error)

	// GetValidIngredientStateIngredientsByIngredientStateWithResponse request
	GetValidIngredientStateIngredientsByIngredientStateWithResponse(ctx context.Context, validIngredientStateID string, reqEditors ...RequestEditorFn) (*GetValidIngredientStateIngredientsByIngredientStateResponse, error)

	// ArchiveValidIngredientStateIngredientWithResponse request
	ArchiveValidIngredientStateIngredientWithResponse(ctx context.Context, validIngredientStateIngredientID string, reqEditors ...RequestEditorFn) (*ArchiveValidIngredientStateIngredientResponse, error)

	// GetValidIngredientStateIngredientWithResponse request
	GetValidIngredientStateIngredientWithResponse(ctx context.Context, validIngredientStateIngredientID string, reqEditors ...RequestEditorFn) (*GetValidIngredientStateIngredientResponse, error)

	// UpdateValidIngredientStateIngredientWithBodyWithResponse request with any body
	UpdateValidIngredientStateIngredientWithBodyWithResponse(ctx context.Context, validIngredientStateIngredientID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateValidIngredientStateIngredientResponse, error)

	UpdateValidIngredientStateIngredientWithResponse(ctx context.Context, validIngredientStateIngredientID string, body UpdateValidIngredientStateIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateValidIngredientStateIngredientResponse, error)

	// GetValidIngredientStatesWithResponse request
	GetValidIngredientStatesWithResponse(ctx context.Context, params *GetValidIngredientStatesParams, reqEditors ...RequestEditorFn) (*GetValidIngredientStatesResponse, error)

	// CreateValidIngredientStateWithBodyWithResponse request with any body
	CreateValidIngredientStateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidIngredientStateResponse, error)

	CreateValidIngredientStateWithResponse(ctx context.Context, body CreateValidIngredientStateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateValidIngredientStateResponse, error)

	// SearchForValidIngredientStatesWithResponse request
	SearchForValidIngredientStatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SearchForValidIngredientStatesResponse, error)

	// ArchiveValidIngredientStateWithResponse request
	ArchiveValidIngredientStateWithResponse(ctx context.Context, validIngredientStateID string, reqEditors ...RequestEditorFn) (*ArchiveValidIngredientStateResponse, error)

	// GetValidIngredientStateWithResponse request
	GetValidIngredientStateWithResponse(ctx context.Context, validIngredientStateID string, reqEditors ...RequestEditorFn) (*GetValidIngredientStateResponse, error)

	// UpdateValidIngredientStateWithBodyWithResponse request with any body
	UpdateValidIngredientStateWithBodyWithResponse(ctx context.Context, validIngredientStateID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateValidIngredientStateResponse, error)

	UpdateValidIngredientStateWithResponse(ctx context.Context, validIngredientStateID string, body UpdateValidIngredientStateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateValidIngredientStateResponse, error)

	// GetValidIngredientsWithResponse request
	GetValidIngredientsWithResponse(ctx context.Context, params *GetValidIngredientsParams, reqEditors ...RequestEditorFn) (*GetValidIngredientsResponse, error)

	// CreateValidIngredientWithBodyWithResponse request with any body
	CreateValidIngredientWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidIngredientResponse, error)

	CreateValidIngredientWithResponse(ctx context.Context, body CreateValidIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateValidIngredientResponse, error)

	// GetValidIngredientsByPreparationWithResponse request
	GetValidIngredientsByPreparationWithResponse(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*GetValidIngredientsByPreparationResponse, error)

	// GetRandomValidIngredientWithResponse request
	GetRandomValidIngredientWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRandomValidIngredientResponse, error)

	// SearchForValidIngredientsWithResponse request
	SearchForValidIngredientsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SearchForValidIngredientsResponse, error)

	// ArchiveValidIngredientWithResponse request
	ArchiveValidIngredientWithResponse(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*ArchiveValidIngredientResponse, error)

	// GetValidIngredientWithResponse request
	GetValidIngredientWithResponse(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*GetValidIngredientResponse, error)

	// UpdateValidIngredientWithBodyWithResponse request with any body
	UpdateValidIngredientWithBodyWithResponse(ctx context.Context, validIngredientID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateValidIngredientResponse, error)

	UpdateValidIngredientWithResponse(ctx context.Context, validIngredientID string, body UpdateValidIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateValidIngredientResponse, error)

	// GetValidInstrumentsWithResponse request
	GetValidInstrumentsWithResponse(ctx context.Context, params *GetValidInstrumentsParams, reqEditors ...RequestEditorFn) (*GetValidInstrumentsResponse, error)

	// CreateValidInstrumentWithBodyWithResponse request with any body
	CreateValidInstrumentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidInstrumentResponse, error)

	CreateValidInstrumentWithResponse(ctx context.Context, body CreateValidInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateValidInstrumentResponse, error)

	// GetRandomValidInstrumentWithResponse request
	GetRandomValidInstrumentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRandomValidInstrumentResponse, error)

	// SearchForValidInstrumentsWithResponse request
	SearchForValidInstrumentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SearchForValidInstrumentsResponse, error)

	// ArchiveValidInstrumentWithResponse request
	ArchiveValidInstrumentWithResponse(ctx context.Context, validInstrumentID string, reqEditors ...RequestEditorFn) (*ArchiveValidInstrumentResponse, error)

	// GetValidInstrumentWithResponse request
	GetValidInstrumentWithResponse(ctx context.Context, validInstrumentID string, reqEditors ...RequestEditorFn) (*GetValidInstrumentResponse, error)

	// UpdateValidInstrumentWithBodyWithResponse request with any body
	UpdateValidInstrumentWithBodyWithResponse(ctx context.Context, validInstrumentID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateValidInstrumentResponse, error)

	UpdateValidInstrumentWithResponse(ctx context.Context, validInstrumentID string, body UpdateValidInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateValidInstrumentResponse, error)

	// CreateValidMeasurementUnitConversionWithBodyWithResponse request with any body
	CreateValidMeasurementUnitConversionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidMeasurementUnitConversionResponse, error)

	CreateValidMeasurementUnitConversionWithResponse(ctx context.Context, body CreateValidMeasurementUnitConversionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateValidMeasurementUnitConversionResponse, error)

	// GetValidMeasurementUnitConversionsFromUnitWithResponse request
	GetValidMeasurementUnitConversionsFromUnitWithResponse(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*GetValidMeasurementUnitConversionsFromUnitResponse, error)

	// ValidMeasurementUnitConversionsToUnitWithResponse request
	ValidMeasurementUnitConversionsToUnitWithResponse(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*ValidMeasurementUnitConversionsToUnitResponse, error)

	// ArchiveValidMeasurementUnitConversionWithResponse request
	ArchiveValidMeasurementUnitConversionWithResponse(ctx context.Context, validMeasurementUnitConversionID string, reqEditors ...RequestEditorFn) (*ArchiveValidMeasurementUnitConversionResponse, error)

	// GetValidMeasurementUnitConversionWithResponse request
	GetValidMeasurementUnitConversionWithResponse(ctx context.Context, validMeasurementUnitConversionID string, reqEditors ...RequestEditorFn) (*GetValidMeasurementUnitConversionResponse, error)

	// UpdateValidMeasurementUnitConversionWithBodyWithResponse request with any body
	UpdateValidMeasurementUnitConversionWithBodyWithResponse(ctx context.Context, validMeasurementUnitConversionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateValidMeasurementUnitConversionResponse, error)

	UpdateValidMeasurementUnitConversionWithResponse(ctx context.Context, validMeasurementUnitConversionID string, body UpdateValidMeasurementUnitConversionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateValidMeasurementUnitConversionResponse, error)

	// GetValidMeasurementUnitsWithResponse request
	GetValidMeasurementUnitsWithResponse(ctx context.Context, params *GetValidMeasurementUnitsParams, reqEditors ...RequestEditorFn) (*GetValidMeasurementUnitsResponse, error)

	// CreateValidMeasurementUnitWithBodyWithResponse request with any body
	CreateValidMeasurementUnitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidMeasurementUnitResponse, error)

	CreateValidMeasurementUnitWithResponse(ctx context.Context, body CreateValidMeasurementUnitJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateValidMeasurementUnitResponse, error)

	// GetValidMeasurementUnitsByIngredientWithResponse request
	GetValidMeasurementUnitsByIngredientWithResponse(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*GetValidMeasurementUnitsByIngredientResponse, error)

	// SearchForValidMeasurementUnitsWithResponse request
	SearchForValidMeasurementUnitsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SearchForValidMeasurementUnitsResponse, error)

	// ArchiveValidMeasurementUnitWithResponse request
	ArchiveValidMeasurementUnitWithResponse(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*ArchiveValidMeasurementUnitResponse, error)

	// GetValidMeasurementUnitWithResponse request
	GetValidMeasurementUnitWithResponse(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*GetValidMeasurementUnitResponse, error)

	// UpdateValidMeasurementUnitWithBodyWithResponse request with any body
	UpdateValidMeasurementUnitWithBodyWithResponse(ctx context.Context, validMeasurementUnitID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateValidMeasurementUnitResponse, error)

	UpdateValidMeasurementUnitWithResponse(ctx context.Context, validMeasurementUnitID string, body UpdateValidMeasurementUnitJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateValidMeasurementUnitResponse, error)

	// GetValidPreparationInstrumentsWithResponse request
	GetValidPreparationInstrumentsWithResponse(ctx context.Context, params *GetValidPreparationInstrumentsParams, reqEditors ...RequestEditorFn) (*GetValidPreparationInstrumentsResponse, error)

	// CreateValidPreparationInstrumentWithBodyWithResponse request with any body
	CreateValidPreparationInstrumentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidPreparationInstrumentResponse, error)

	CreateValidPreparationInstrumentWithResponse(ctx context.Context, body CreateValidPreparationInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateValidPreparationInstrumentResponse, error)

	// GetValidPreparationInstrumentsByInstrumentWithResponse request
	GetValidPreparationInstrumentsByInstrumentWithResponse(ctx context.Context, validInstrumentID string, reqEditors ...RequestEditorFn) (*GetValidPreparationInstrumentsByInstrumentResponse, error)

	// GetValidPreparationInstrumentsByPreparationWithResponse request
	GetValidPreparationInstrumentsByPreparationWithResponse(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*GetValidPreparationInstrumentsByPreparationResponse, error)

	// ArchiveValidPreparationInstrumentWithResponse request
	ArchiveValidPreparationInstrumentWithResponse(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*ArchiveValidPreparationInstrumentResponse, error)

	// GetValidPreparationInstrumentWithResponse request
	GetValidPreparationInstrumentWithResponse(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*GetValidPreparationInstrumentResponse, error)

	// UpdateValidPreparationInstrumentWithBodyWithResponse request with any body
	UpdateValidPreparationInstrumentWithBodyWithResponse(ctx context.Context, validPreparationVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateValidPreparationInstrumentResponse, error)

	UpdateValidPreparationInstrumentWithResponse(ctx context.Context, validPreparationVesselID string, body UpdateValidPreparationInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateValidPreparationInstrumentResponse, error)

	// GetValidPreparationVesselsWithResponse request
	GetValidPreparationVesselsWithResponse(ctx context.Context, params *GetValidPreparationVesselsParams, reqEditors ...RequestEditorFn) (*GetValidPreparationVesselsResponse, error)

	// CreateValidPreparationVesselWithBodyWithResponse request with any body
	CreateValidPreparationVesselWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidPreparationVesselResponse, error)

	CreateValidPreparationVesselWithResponse(ctx context.Context, body CreateValidPreparationVesselJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateValidPreparationVesselResponse, error)

	// GetValidPreparationVesselsByPreparationWithResponse request
	GetValidPreparationVesselsByPreparationWithResponse(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*GetValidPreparationVesselsByPreparationResponse, error)

	// GetValidPreparationVesselsByVesselWithResponse request
	GetValidPreparationVesselsByVesselWithResponse(ctx context.Context, validVesselID string, reqEditors ...RequestEditorFn) (*GetValidPreparationVesselsByVesselResponse, error)

	// ArchiveValidPreparationVesselWithResponse request
	ArchiveValidPreparationVesselWithResponse(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*ArchiveValidPreparationVesselResponse, error)

	// GetValidPreparationVesselWithResponse request
	GetValidPreparationVesselWithResponse(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*GetValidPreparationVesselResponse, error)

	// UpdateValidPreparationVesselWithBodyWithResponse request with any body
	UpdateValidPreparationVesselWithBodyWithResponse(ctx context.Context, validPreparationVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateValidPreparationVesselResponse, error)

	UpdateValidPreparationVesselWithResponse(ctx context.Context, validPreparationVesselID string, body UpdateValidPreparationVesselJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateValidPreparationVesselResponse, error)

	// GetValidPreparationsWithResponse request
	GetValidPreparationsWithResponse(ctx context.Context, params *GetValidPreparationsParams, reqEditors ...RequestEditorFn) (*GetValidPreparationsResponse, error)

	// CreateValidPreparationWithBodyWithResponse request with any body
	CreateValidPreparationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidPreparationResponse, error)

	CreateValidPreparationWithResponse(ctx context.Context, body CreateValidPreparationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateValidPreparationResponse, error)

	// GetRandomValidPreparationWithResponse request
	GetRandomValidPreparationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRandomValidPreparationResponse, error)

	// SearchForValidPreparationsWithResponse request
	SearchForValidPreparationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SearchForValidPreparationsResponse, error)

	// ArchiveValidPreparationWithResponse request
	ArchiveValidPreparationWithResponse(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*ArchiveValidPreparationResponse, error)

	// GetValidPreparationWithResponse request
	GetValidPreparationWithResponse(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*GetValidPreparationResponse, error)

	// UpdateValidPreparationWithBodyWithResponse request with any body
	UpdateValidPreparationWithBodyWithResponse(ctx context.Context, validPreparationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateValidPreparationResponse, error)

	UpdateValidPreparationWithResponse(ctx context.Context, validPreparationID string, body UpdateValidPreparationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateValidPreparationResponse, error)

	// GetValidVesselsWithResponse request
	GetValidVesselsWithResponse(ctx context.Context, params *GetValidVesselsParams, reqEditors ...RequestEditorFn) (*GetValidVesselsResponse, error)

	// CreateValidVesselWithBodyWithResponse request with any body
	CreateValidVesselWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidVesselResponse, error)

	CreateValidVesselWithResponse(ctx context.Context, body CreateValidVesselJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateValidVesselResponse, error)

	// GetRandomValidVesselWithResponse request
	GetRandomValidVesselWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRandomValidVesselResponse, error)

	// SearchForValidVesselsWithResponse request
	SearchForValidVesselsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SearchForValidVesselsResponse, error)

	// ArchiveValidVesselWithResponse request
	ArchiveValidVesselWithResponse(ctx context.Context, validVesselID string, reqEditors ...RequestEditorFn) (*ArchiveValidVesselResponse, error)

	// GetValidVesselWithResponse request
	GetValidVesselWithResponse(ctx context.Context, validVesselID string, reqEditors ...RequestEditorFn) (*GetValidVesselResponse, error)

	// UpdateValidVesselWithBodyWithResponse request with any body
	UpdateValidVesselWithBodyWithResponse(ctx context.Context, validVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateValidVesselResponse, error)

	UpdateValidVesselWithResponse(ctx context.Context, validVesselID string, body UpdateValidVesselJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateValidVesselResponse, error)

	// GetWebhooksWithResponse request
	GetWebhooksWithResponse(ctx context.Context, params *GetWebhooksParams, reqEditors ...RequestEditorFn) (*GetWebhooksResponse, error)

	// CreateWebhookWithBodyWithResponse request with any body
	CreateWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWebhookResponse, error)

	CreateWebhookWithResponse(ctx context.Context, body CreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWebhookResponse, error)

	// ArchiveWebhookWithResponse request
	ArchiveWebhookWithResponse(ctx context.Context, webhookID string, reqEditors ...RequestEditorFn) (*ArchiveWebhookResponse, error)

	// GetWebhookWithResponse request
	GetWebhookWithResponse(ctx context.Context, webhookID string, reqEditors ...RequestEditorFn) (*GetWebhookResponse, error)

	// CreateWebhookTriggerEventWithBodyWithResponse request with any body
	CreateWebhookTriggerEventWithBodyWithResponse(ctx context.Context, webhookID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWebhookTriggerEventResponse, error)

	CreateWebhookTriggerEventWithResponse(ctx context.Context, webhookID string, body CreateWebhookTriggerEventJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWebhookTriggerEventResponse, error)

	// ArchiveWebhookTriggerEventWithResponse request
	ArchiveWebhookTriggerEventWithResponse(ctx context.Context, webhookID string, webhookTriggerEventID string, reqEditors ...RequestEditorFn) (*ArchiveWebhookTriggerEventResponse, error)

	// RunFinalizeMealPlanWorkerWithBodyWithResponse request with any body
	RunFinalizeMealPlanWorkerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RunFinalizeMealPlanWorkerResponse, error)

	RunFinalizeMealPlanWorkerWithResponse(ctx context.Context, body RunFinalizeMealPlanWorkerJSONRequestBody, reqEditors ...RequestEditorFn) (*RunFinalizeMealPlanWorkerResponse, error)

	// RunMealPlanGroceryListInitializerWorkerWithResponse request
	RunMealPlanGroceryListInitializerWorkerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RunMealPlanGroceryListInitializerWorkerResponse, error)

	// RunMealPlanTaskCreatorWorkerWithResponse request
	RunMealPlanTaskCreatorWorkerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RunMealPlanTaskCreatorWorkerResponse, error)

	// GetAuthStatusWithResponse request
	GetAuthStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthStatusResponse, error)

	// GETOauth2AuthorizeWithResponse request
	GETOauth2AuthorizeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETOauth2AuthorizeResponse, error)

	// POSTOauth2TokenWithResponse request
	POSTOauth2TokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*POSTOauth2TokenResponse, error)

	// POSTUsersWithBodyWithResponse request with any body
	POSTUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersResponse, error)

	POSTUsersWithResponse(ctx context.Context, body POSTUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersResponse, error)

	// VerifyEmailAddressWithBodyWithResponse request with any body
	VerifyEmailAddressWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyEmailAddressResponse, error)

	VerifyEmailAddressWithResponse(ctx context.Context, body VerifyEmailAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyEmailAddressResponse, error)

	// LoginWithBodyWithResponse request with any body
	LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	// AdminLoginWithBodyWithResponse request with any body
	AdminLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminLoginResponse, error)

	AdminLoginWithResponse(ctx context.Context, body AdminLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminLoginResponse, error)

	// LogoutWithResponse request
	LogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogoutResponse, error)

	// RequestPasswordResetTokenWithBodyWithResponse request with any body
	RequestPasswordResetTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestPasswordResetTokenResponse, error)

	RequestPasswordResetTokenWithResponse(ctx context.Context, body RequestPasswordResetTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*RequestPasswordResetTokenResponse, error)

	// RedeemPasswordResetTokenWithBodyWithResponse request with any body
	RedeemPasswordResetTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RedeemPasswordResetTokenResponse, error)

	RedeemPasswordResetTokenWithResponse(ctx context.Context, body RedeemPasswordResetTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*RedeemPasswordResetTokenResponse, error)

	// VerifyTOTPSecretWithBodyWithResponse request with any body
	VerifyTOTPSecretWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyTOTPSecretResponse, error)

	VerifyTOTPSecretWithResponse(ctx context.Context, body VerifyTOTPSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyTOTPSecretResponse, error)

	// RequestUsernameReminderWithBodyWithResponse request with any body
	RequestUsernameReminderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestUsernameReminderResponse, error)

	RequestUsernameReminderWithResponse(ctx context.Context, body RequestUsernameReminderJSONRequestBody, reqEditors ...RequestEditorFn) (*RequestUsernameReminderResponse, error)
}

type AdminCycleCookieSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AdminCycleCookieSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminCycleCookieSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminUpdateUserStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *UserStatusResponse `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *UserStatusResponse `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r AdminUpdateUserStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminUpdateUserStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuditLogEntriesForHouseholdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *AuditLogEntry   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *AuditLogEntry   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetAuditLogEntriesForHouseholdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuditLogEntriesForHouseholdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuditLogEntriesForUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *AuditLogEntry   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *AuditLogEntry   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetAuditLogEntriesForUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuditLogEntriesForUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuditLogEntryByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *AuditLogEntry   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *AuditLogEntry   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetAuditLogEntryByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuditLogEntryByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReceivedHouseholdInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetReceivedHouseholdInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReceivedHouseholdInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSentHouseholdInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetSentHouseholdInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSentHouseholdInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHouseholdInvitationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetHouseholdInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHouseholdInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AcceptHouseholdInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r AcceptHouseholdInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AcceptHouseholdInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelHouseholdInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CancelHouseholdInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelHouseholdInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RejectHouseholdInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r RejectHouseholdInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RejectHouseholdInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHouseholdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]Household     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]Household     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetHouseholdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHouseholdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHouseholdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateHouseholdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHouseholdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetActiveHouseholdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetActiveHouseholdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetActiveHouseholdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHouseholdInstrumentOwnershipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]HouseholdInstrumentOwnership `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]HouseholdInstrumentOwnership `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetHouseholdInstrumentOwnershipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHouseholdInstrumentOwnershipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHouseholdInstrumentOwnershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateHouseholdInstrumentOwnershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHouseholdInstrumentOwnershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveHouseholdInstrumentOwnershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveHouseholdInstrumentOwnershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveHouseholdInstrumentOwnershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHouseholdInstrumentOwnershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetHouseholdInstrumentOwnershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHouseholdInstrumentOwnershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateHouseholdInstrumentOwnershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateHouseholdInstrumentOwnershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateHouseholdInstrumentOwnershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveHouseholdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveHouseholdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveHouseholdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHouseholdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetHouseholdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHouseholdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateHouseholdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateHouseholdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateHouseholdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetDefaultHouseholdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r SetDefaultHouseholdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetDefaultHouseholdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateHouseholdInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateHouseholdInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateHouseholdInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHouseholdInvitationByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetHouseholdInvitationByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHouseholdInvitationByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTHouseholdsHouseholdIDInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r POSTHouseholdsHouseholdIDInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTHouseholdsHouseholdIDInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveUserMembershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *HouseholdUserMembership `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *HouseholdUserMembership `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveUserMembershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveUserMembershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateHouseholdMemberPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *UserPermissionsResponse `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *UserPermissionsResponse `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateHouseholdMemberPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateHouseholdMemberPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TransferHouseholdOwnershipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r TransferHouseholdOwnershipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TransferHouseholdOwnershipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMealPlansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]MealPlan      `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]MealPlan      `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetMealPlansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMealPlansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMealPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *MealPlan        `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *MealPlan        `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateMealPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMealPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveMealPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *MealPlan        `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *MealPlan        `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveMealPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveMealPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMealPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *MealPlan        `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *MealPlan        `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetMealPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMealPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMealPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *MealPlan        `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *MealPlan        `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateMealPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMealPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMealPlanEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]MealPlanEvent `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]MealPlanEvent `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetMealPlanEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMealPlanEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMealPlanEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *MealPlanEvent   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *MealPlanEvent   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateMealPlanEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMealPlanEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveMealPlanEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *MealPlanEvent   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *MealPlanEvent   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveMealPlanEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveMealPlanEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMealPlanEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *MealPlanEvent   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *MealPlanEvent   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetMealPlanEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMealPlanEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMealPlanEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *MealPlanEvent   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *MealPlanEvent   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateMealPlanEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMealPlanEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMealPlanOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]MealPlanOption `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]MealPlanOption `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetMealPlanOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMealPlanOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMealPlanOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *MealPlanOption  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *MealPlanOption  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateMealPlanOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMealPlanOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveMealPlanOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *MealPlanOption  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *MealPlanOption  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveMealPlanOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveMealPlanOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMealPlanOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *MealPlanOption  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *MealPlanOption  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetMealPlanOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMealPlanOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMealPlanOptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *MealPlanOption  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *MealPlanOption  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateMealPlanOptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMealPlanOptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMealPlanOptionVotesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]MealPlanOptionVote `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]MealPlanOptionVote `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetMealPlanOptionVotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMealPlanOptionVotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveMealPlanOptionVoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *MealPlanOptionVote `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *MealPlanOptionVote `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveMealPlanOptionVoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveMealPlanOptionVoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMealPlanOptionVoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *MealPlanOptionVote `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *MealPlanOptionVote `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetMealPlanOptionVoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMealPlanOptionVoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMealPlanOptionVoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *MealPlanOptionVote `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *MealPlanOptionVote `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateMealPlanOptionVoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMealPlanOptionVoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMealPlanVoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *MealPlanOptionVote `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *MealPlanOptionVote `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateMealPlanVoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMealPlanVoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FinalizeMealPlanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *FinalizeMealPlansResponse `json:"data,omitempty"`
		Details    *ResponseDetails           `json:"details,omitempty"`
		Error      *APIError                  `json:"error,omitempty"`
		Pagination *Pagination                `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *FinalizeMealPlansResponse `json:"data,omitempty"`
		Details    *ResponseDetails           `json:"details,omitempty"`
		Error      *APIError                  `json:"error,omitempty"`
		Pagination *Pagination                `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r FinalizeMealPlanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FinalizeMealPlanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMealPlanGroceryListItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]MealPlanGroceryListItem `json:"data,omitempty"`
		Details    *ResponseDetails           `json:"details,omitempty"`
		Error      *APIError                  `json:"error,omitempty"`
		Pagination *Pagination                `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]MealPlanGroceryListItem `json:"data,omitempty"`
		Details    *ResponseDetails           `json:"details,omitempty"`
		Error      *APIError                  `json:"error,omitempty"`
		Pagination *Pagination                `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetMealPlanGroceryListItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMealPlanGroceryListItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMealPlanGroceryListItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *MealPlanGroceryListItem `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *MealPlanGroceryListItem `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateMealPlanGroceryListItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMealPlanGroceryListItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveMealPlanGroceryListItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *MealPlanGroceryListItem `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *MealPlanGroceryListItem `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveMealPlanGroceryListItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveMealPlanGroceryListItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMealPlanGroceryListItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *MealPlanGroceryListItem `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *MealPlanGroceryListItem `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetMealPlanGroceryListItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMealPlanGroceryListItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMealPlanGroceryListItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *MealPlanGroceryListItem `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *MealPlanGroceryListItem `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateMealPlanGroceryListItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMealPlanGroceryListItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMealPlanTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]MealPlanTask  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]MealPlanTask  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetMealPlanTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMealPlanTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMealPlanTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *MealPlanTask    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *MealPlanTask    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateMealPlanTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMealPlanTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMealPlanTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *MealPlanTask    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *MealPlanTask    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetMealPlanTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMealPlanTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMealPlanTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *MealPlanTask    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *MealPlanTask    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateMealPlanTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMealPlanTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMealsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]Meal          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]Meal          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetMealsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMealsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMealResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *Meal            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *Meal            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateMealResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMealResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchForMealsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *Meal            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *Meal            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r SearchForMealsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchForMealsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveMealResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *Meal            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *Meal            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveMealResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveMealResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMealResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *Meal            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *Meal            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetMealResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMealResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOAuth2ClientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]OAuth2Client  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]OAuth2Client  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetOAuth2ClientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOAuth2ClientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOAuth2ClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *OAuth2ClientCreationResponse `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *OAuth2ClientCreationResponse `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateOAuth2ClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOAuth2ClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveOAuth2ClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *OAuth2Client    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *OAuth2Client    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveOAuth2ClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveOAuth2ClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOAuth2ClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *OAuth2Client    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *OAuth2Client    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetOAuth2ClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOAuth2ClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]Recipe        `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]Recipe        `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetRecipesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRecipeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *Recipe          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *Recipe          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateRecipeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRecipeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchForRecipesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *Recipe          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *Recipe          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r SearchForRecipesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchForRecipesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveRecipeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *Recipe          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *Recipe          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveRecipeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveRecipeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *Recipe          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *Recipe          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetRecipeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRecipeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *Recipe          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *Recipe          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateRecipeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRecipeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CloneRecipeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *Recipe          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *Recipe          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CloneRecipeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CloneRecipeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipeDAGResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *APIError        `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *APIError        `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetRecipeDAGResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipeDAGResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTRecipesRecipeIDImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r POSTRecipesRecipeIDImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTRecipesRecipeIDImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETRecipesRecipeIDMermaidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GETRecipesRecipeIDMermaidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETRecipesRecipeIDMermaidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipePrepTaskStepResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipePrepTaskStep `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipePrepTaskStep `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetRecipePrepTaskStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipePrepTaskStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipePrepTasksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]RecipePrepTask `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]RecipePrepTask `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetRecipePrepTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipePrepTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRecipePrepTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *RecipePrepTask  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *RecipePrepTask  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateRecipePrepTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRecipePrepTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveRecipePrepTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *RecipePrepTask  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *RecipePrepTask  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveRecipePrepTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveRecipePrepTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipePrepTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipePrepTask  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipePrepTask  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetRecipePrepTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipePrepTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRecipePrepTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipePrepTask  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipePrepTask  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateRecipePrepTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRecipePrepTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipeRatingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]RecipeRating  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]RecipeRating  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetRecipeRatingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipeRatingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRecipeRatingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *RecipeRating    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *RecipeRating    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateRecipeRatingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRecipeRatingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveRecipeRatingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *RecipeRating    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *RecipeRating    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveRecipeRatingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveRecipeRatingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipeRatingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeRating    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeRating    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetRecipeRatingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipeRatingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRecipeRatingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeRating    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeRating    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateRecipeRatingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRecipeRatingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipeStepsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]RecipeStep    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]RecipeStep    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetRecipeStepsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipeStepsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRecipeStepResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *RecipeStep      `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *RecipeStep      `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateRecipeStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRecipeStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveRecipeStepResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *RecipeStep      `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *RecipeStep      `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveRecipeStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveRecipeStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipeStepResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeStep      `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeStep      `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetRecipeStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipeStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRecipeStepResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeStep      `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeStep      `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateRecipeStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRecipeStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipeStepCompletionConditionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]RecipeStepCompletionCondition `json:"data,omitempty"`
		Details    *ResponseDetails                 `json:"details,omitempty"`
		Error      *APIError                        `json:"error,omitempty"`
		Pagination *Pagination                      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]RecipeStepCompletionCondition `json:"data,omitempty"`
		Details    *ResponseDetails                 `json:"details,omitempty"`
		Error      *APIError                        `json:"error,omitempty"`
		Pagination *Pagination                      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetRecipeStepCompletionConditionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipeStepCompletionConditionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRecipeStepCompletionConditionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
		Details    *ResponseDetails               `json:"details,omitempty"`
		Error      *APIError                      `json:"error,omitempty"`
		Pagination *Pagination                    `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
		Details    *ResponseDetails               `json:"details,omitempty"`
		Error      *APIError                      `json:"error,omitempty"`
		Pagination *Pagination                    `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateRecipeStepCompletionConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRecipeStepCompletionConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveRecipeStepCompletionConditionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
		Details    *ResponseDetails               `json:"details,omitempty"`
		Error      *APIError                      `json:"error,omitempty"`
		Pagination *Pagination                    `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
		Details    *ResponseDetails               `json:"details,omitempty"`
		Error      *APIError                      `json:"error,omitempty"`
		Pagination *Pagination                    `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveRecipeStepCompletionConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveRecipeStepCompletionConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipeStepCompletionConditionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
		Details    *ResponseDetails               `json:"details,omitempty"`
		Error      *APIError                      `json:"error,omitempty"`
		Pagination *Pagination                    `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
		Details    *ResponseDetails               `json:"details,omitempty"`
		Error      *APIError                      `json:"error,omitempty"`
		Pagination *Pagination                    `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetRecipeStepCompletionConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipeStepCompletionConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRecipeStepCompletionConditionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
		Details    *ResponseDetails               `json:"details,omitempty"`
		Error      *APIError                      `json:"error,omitempty"`
		Pagination *Pagination                    `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
		Details    *ResponseDetails               `json:"details,omitempty"`
		Error      *APIError                      `json:"error,omitempty"`
		Pagination *Pagination                    `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateRecipeStepCompletionConditionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRecipeStepCompletionConditionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTRecipesRecipeIDStepsRecipeStepIDImagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r POSTRecipesRecipeIDStepsRecipeStepIDImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTRecipesRecipeIDStepsRecipeStepIDImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipeStepIngredientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]RecipeStepIngredient `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]RecipeStepIngredient `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetRecipeStepIngredientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipeStepIngredientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRecipeStepIngredientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *RecipeStepIngredient `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *RecipeStepIngredient `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateRecipeStepIngredientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRecipeStepIngredientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveRecipeStepIngredientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *RecipeStepIngredient `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *RecipeStepIngredient `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveRecipeStepIngredientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveRecipeStepIngredientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipeStepIngredientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeStepIngredient `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeStepIngredient `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetRecipeStepIngredientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipeStepIngredientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRecipeStepIngredientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeStepIngredient `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeStepIngredient `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateRecipeStepIngredientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRecipeStepIngredientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipeStepInstrumentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]RecipeStepInstrument `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]RecipeStepInstrument `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetRecipeStepInstrumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipeStepInstrumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRecipeStepInstrumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *RecipeStepInstrument `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *RecipeStepInstrument `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateRecipeStepInstrumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRecipeStepInstrumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveRecipeStepInstrumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *RecipeStepInstrument `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *RecipeStepInstrument `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveRecipeStepInstrumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveRecipeStepInstrumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipeStepInstrumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeStepInstrument `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeStepInstrument `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetRecipeStepInstrumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipeStepInstrumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRecipeStepInstrumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeStepInstrument `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeStepInstrument `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateRecipeStepInstrumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRecipeStepInstrumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipeStepProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]RecipeStepProduct `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]RecipeStepProduct `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetRecipeStepProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipeStepProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRecipeStepProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *RecipeStepProduct `json:"data,omitempty"`
		Details    *ResponseDetails   `json:"details,omitempty"`
		Error      *APIError          `json:"error,omitempty"`
		Pagination *Pagination        `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *RecipeStepProduct `json:"data,omitempty"`
		Details    *ResponseDetails   `json:"details,omitempty"`
		Error      *APIError          `json:"error,omitempty"`
		Pagination *Pagination        `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateRecipeStepProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRecipeStepProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveRecipeStepProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *RecipeStepProduct `json:"data,omitempty"`
		Details    *ResponseDetails   `json:"details,omitempty"`
		Error      *APIError          `json:"error,omitempty"`
		Pagination *Pagination        `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *RecipeStepProduct `json:"data,omitempty"`
		Details    *ResponseDetails   `json:"details,omitempty"`
		Error      *APIError          `json:"error,omitempty"`
		Pagination *Pagination        `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveRecipeStepProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveRecipeStepProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipeStepProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeStepProduct `json:"data,omitempty"`
		Details    *ResponseDetails   `json:"details,omitempty"`
		Error      *APIError          `json:"error,omitempty"`
		Pagination *Pagination        `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeStepProduct `json:"data,omitempty"`
		Details    *ResponseDetails   `json:"details,omitempty"`
		Error      *APIError          `json:"error,omitempty"`
		Pagination *Pagination        `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetRecipeStepProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipeStepProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRecipeStepProductResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeStepProduct `json:"data,omitempty"`
		Details    *ResponseDetails   `json:"details,omitempty"`
		Error      *APIError          `json:"error,omitempty"`
		Pagination *Pagination        `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeStepProduct `json:"data,omitempty"`
		Details    *ResponseDetails   `json:"details,omitempty"`
		Error      *APIError          `json:"error,omitempty"`
		Pagination *Pagination        `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateRecipeStepProductResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRecipeStepProductResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipeStepVesselsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]RecipeStepVessel `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]RecipeStepVessel `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetRecipeStepVesselsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipeStepVesselsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateRecipeStepVesselResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *RecipeStepVessel `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *RecipeStepVessel `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateRecipeStepVesselResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateRecipeStepVesselResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveRecipeStepVesselResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *RecipeStepVessel `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *RecipeStepVessel `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveRecipeStepVesselResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveRecipeStepVesselResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecipeStepVesselResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeStepVessel `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeStepVessel `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetRecipeStepVesselResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecipeStepVesselResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateRecipeStepVesselResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeStepVessel `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeStepVessel `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateRecipeStepVesselResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateRecipeStepVesselResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ServiceSetting `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]ServiceSetting `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetServiceSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServiceSettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ServiceSetting  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ServiceSetting  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateServiceSettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServiceSettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateServiceSettingConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ServiceSettingConfiguration `json:"data,omitempty"`
		Details    *ResponseDetails             `json:"details,omitempty"`
		Error      *APIError                    `json:"error,omitempty"`
		Pagination *Pagination                  `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ServiceSettingConfiguration `json:"data,omitempty"`
		Details    *ResponseDetails             `json:"details,omitempty"`
		Error      *APIError                    `json:"error,omitempty"`
		Pagination *Pagination                  `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateServiceSettingConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateServiceSettingConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceSettingConfigurationsForHouseholdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ServiceSettingConfiguration `json:"data,omitempty"`
		Details    *ResponseDetails             `json:"details,omitempty"`
		Error      *APIError                    `json:"error,omitempty"`
		Pagination *Pagination                  `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ServiceSettingConfiguration `json:"data,omitempty"`
		Details    *ResponseDetails             `json:"details,omitempty"`
		Error      *APIError                    `json:"error,omitempty"`
		Pagination *Pagination                  `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetServiceSettingConfigurationsForHouseholdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceSettingConfigurationsForHouseholdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceSettingConfigurationsForUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ServiceSettingConfiguration `json:"data,omitempty"`
		Details    *ResponseDetails             `json:"details,omitempty"`
		Error      *APIError                    `json:"error,omitempty"`
		Pagination *Pagination                  `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ServiceSettingConfiguration `json:"data,omitempty"`
		Details    *ResponseDetails             `json:"details,omitempty"`
		Error      *APIError                    `json:"error,omitempty"`
		Pagination *Pagination                  `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetServiceSettingConfigurationsForUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceSettingConfigurationsForUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceSettingConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ServiceSettingConfiguration `json:"data,omitempty"`
		Details    *ResponseDetails             `json:"details,omitempty"`
		Error      *APIError                    `json:"error,omitempty"`
		Pagination *Pagination                  `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ServiceSettingConfiguration `json:"data,omitempty"`
		Details    *ResponseDetails             `json:"details,omitempty"`
		Error      *APIError                    `json:"error,omitempty"`
		Pagination *Pagination                  `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetServiceSettingConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceSettingConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveServiceSettingConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ServiceSettingConfiguration `json:"data,omitempty"`
		Details    *ResponseDetails             `json:"details,omitempty"`
		Error      *APIError                    `json:"error,omitempty"`
		Pagination *Pagination                  `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ServiceSettingConfiguration `json:"data,omitempty"`
		Details    *ResponseDetails             `json:"details,omitempty"`
		Error      *APIError                    `json:"error,omitempty"`
		Pagination *Pagination                  `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveServiceSettingConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveServiceSettingConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateServiceSettingConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ServiceSettingConfiguration `json:"data,omitempty"`
		Details    *ResponseDetails             `json:"details,omitempty"`
		Error      *APIError                    `json:"error,omitempty"`
		Pagination *Pagination                  `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ServiceSettingConfiguration `json:"data,omitempty"`
		Details    *ResponseDetails             `json:"details,omitempty"`
		Error      *APIError                    `json:"error,omitempty"`
		Pagination *Pagination                  `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateServiceSettingConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateServiceSettingConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchForServiceSettingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ServiceSetting  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ServiceSetting  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r SearchForServiceSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchForServiceSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveServiceSettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ServiceSetting  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ServiceSetting  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveServiceSettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveServiceSettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetServiceSettingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ServiceSetting  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ServiceSetting  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetServiceSettingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServiceSettingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserIngredientPreferencesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]UserIngredientPreference `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]UserIngredientPreference `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetUserIngredientPreferencesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserIngredientPreferencesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserIngredientPreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *UserIngredientPreference `json:"data,omitempty"`
		Details    *ResponseDetails          `json:"details,omitempty"`
		Error      *APIError                 `json:"error,omitempty"`
		Pagination *Pagination               `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *UserIngredientPreference `json:"data,omitempty"`
		Details    *ResponseDetails          `json:"details,omitempty"`
		Error      *APIError                 `json:"error,omitempty"`
		Pagination *Pagination               `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateUserIngredientPreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserIngredientPreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveUserIngredientPreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *UserIngredientPreference `json:"data,omitempty"`
		Details    *ResponseDetails          `json:"details,omitempty"`
		Error      *APIError                 `json:"error,omitempty"`
		Pagination *Pagination               `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *UserIngredientPreference `json:"data,omitempty"`
		Details    *ResponseDetails          `json:"details,omitempty"`
		Error      *APIError                 `json:"error,omitempty"`
		Pagination *Pagination               `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveUserIngredientPreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveUserIngredientPreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserIngredientPreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *UserIngredientPreference `json:"data,omitempty"`
		Details    *ResponseDetails          `json:"details,omitempty"`
		Error      *APIError                 `json:"error,omitempty"`
		Pagination *Pagination               `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *UserIngredientPreference `json:"data,omitempty"`
		Details    *ResponseDetails          `json:"details,omitempty"`
		Error      *APIError                 `json:"error,omitempty"`
		Pagination *Pagination               `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateUserIngredientPreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserIngredientPreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserNotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]UserNotification `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]UserNotification `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetUserNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserNotificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *UserNotification `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *UserNotification `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateUserNotificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserNotificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserNotificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *UserNotification `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *UserNotification `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetUserNotificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserNotificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserNotificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *UserNotification `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *UserNotification `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateUserNotificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserNotificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]User          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]User          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadUserAvatarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UploadUserAvatarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadUserAvatarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateUserDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserEmailAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateUserEmailAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserEmailAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyUserEmailAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r VerifyUserEmailAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyUserEmailAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDefaultHouseholdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateDefaultHouseholdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDefaultHouseholdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePasswordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpdatePasswordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePasswordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *UserPermissionsResponse `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *UserPermissionsResponse `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CheckPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchForUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]User          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]User          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r SearchForUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchForUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSelfResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetSelfResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSelfResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RefreshTOTPSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *TOTPSecretRefreshResponse `json:"data,omitempty"`
		Details    *ResponseDetails           `json:"details,omitempty"`
		Error      *APIError                  `json:"error,omitempty"`
		Pagination *Pagination                `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *TOTPSecretRefreshResponse `json:"data,omitempty"`
		Details    *ResponseDetails           `json:"details,omitempty"`
		Error      *APIError                  `json:"error,omitempty"`
		Pagination *Pagination                `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r RefreshTOTPSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RefreshTOTPSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateUserUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidIngredientGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ValidIngredientGroup `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]ValidIngredientGroup `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidIngredientGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidIngredientGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateValidIngredientGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ValidIngredientGroup `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ValidIngredientGroup `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateValidIngredientGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateValidIngredientGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchForValidIngredientGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientGroup `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientGroup `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r SearchForValidIngredientGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchForValidIngredientGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveValidIngredientGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ValidIngredientGroup `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ValidIngredientGroup `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveValidIngredientGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveValidIngredientGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidIngredientGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientGroup `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientGroup `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidIngredientGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidIngredientGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateValidIngredientGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientGroup `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientGroup `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateValidIngredientGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateValidIngredientGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidIngredientMeasurementUnitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                  `json:"details,omitempty"`
		Error      *APIError                         `json:"error,omitempty"`
		Pagination *Pagination                       `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                  `json:"details,omitempty"`
		Error      *APIError                         `json:"error,omitempty"`
		Pagination *Pagination                       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidIngredientMeasurementUnitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidIngredientMeasurementUnitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateValidIngredientMeasurementUnitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateValidIngredientMeasurementUnitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateValidIngredientMeasurementUnitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidIngredientMeasurementUnitsByIngredientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidIngredientMeasurementUnitsByIngredientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidIngredientMeasurementUnitsByIngredientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidIngredientMeasurementUnitsByMeasurementUnitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidIngredientMeasurementUnitsByMeasurementUnitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidIngredientMeasurementUnitsByMeasurementUnitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveValidIngredientMeasurementUnitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveValidIngredientMeasurementUnitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveValidIngredientMeasurementUnitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidIngredientMeasurementUnitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidIngredientMeasurementUnitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidIngredientMeasurementUnitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateValidIngredientMeasurementUnitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateValidIngredientMeasurementUnitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateValidIngredientMeasurementUnitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidIngredientPreparationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidIngredientPreparationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidIngredientPreparationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateValidIngredientPreparationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateValidIngredientPreparationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateValidIngredientPreparationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidIngredientPreparationsByIngredientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidIngredientPreparationsByIngredientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidIngredientPreparationsByIngredientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidIngredientPreparationsByPreparationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidIngredientPreparationsByPreparationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidIngredientPreparationsByPreparationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveValidIngredientPreparationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveValidIngredientPreparationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveValidIngredientPreparationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidIngredientPreparationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidIngredientPreparationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidIngredientPreparationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateValidIngredientPreparationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateValidIngredientPreparationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateValidIngredientPreparationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidIngredientStateIngredientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                  `json:"details,omitempty"`
		Error      *APIError                         `json:"error,omitempty"`
		Pagination *Pagination                       `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                  `json:"details,omitempty"`
		Error      *APIError                         `json:"error,omitempty"`
		Pagination *Pagination                       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidIngredientStateIngredientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidIngredientStateIngredientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateValidIngredientStateIngredientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateValidIngredientStateIngredientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateValidIngredientStateIngredientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidIngredientStateIngredientsByIngredientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidIngredientStateIngredientsByIngredientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidIngredientStateIngredientsByIngredientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidIngredientStateIngredientsByIngredientStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidIngredientStateIngredientsByIngredientStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidIngredientStateIngredientsByIngredientStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveValidIngredientStateIngredientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveValidIngredientStateIngredientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveValidIngredientStateIngredientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidIngredientStateIngredientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidIngredientStateIngredientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidIngredientStateIngredientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateValidIngredientStateIngredientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateValidIngredientStateIngredientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateValidIngredientStateIngredientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidIngredientStatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ValidIngredientState `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]ValidIngredientState `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidIngredientStatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidIngredientStatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateValidIngredientStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ValidIngredientState `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ValidIngredientState `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateValidIngredientStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateValidIngredientStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchForValidIngredientStatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientState `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientState `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r SearchForValidIngredientStatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchForValidIngredientStatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveValidIngredientStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ValidIngredientState `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ValidIngredientState `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveValidIngredientStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveValidIngredientStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidIngredientStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientState `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientState `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidIngredientStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidIngredientStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateValidIngredientStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientState `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientState `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateValidIngredientStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateValidIngredientStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidIngredientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails   `json:"details,omitempty"`
		Error      *APIError          `json:"error,omitempty"`
		Pagination *Pagination        `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails   `json:"details,omitempty"`
		Error      *APIError          `json:"error,omitempty"`
		Pagination *Pagination        `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidIngredientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidIngredientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateValidIngredientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateValidIngredientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateValidIngredientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidIngredientsByPreparationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidIngredientsByPreparationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidIngredientsByPreparationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRandomValidIngredientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetRandomValidIngredientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRandomValidIngredientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchForValidIngredientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r SearchForValidIngredientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchForValidIngredientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveValidIngredientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveValidIngredientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveValidIngredientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidIngredientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidIngredientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidIngredientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateValidIngredientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateValidIngredientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateValidIngredientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidInstrumentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails   `json:"details,omitempty"`
		Error      *APIError          `json:"error,omitempty"`
		Pagination *Pagination        `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails   `json:"details,omitempty"`
		Error      *APIError          `json:"error,omitempty"`
		Pagination *Pagination        `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidInstrumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidInstrumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateValidInstrumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateValidInstrumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateValidInstrumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRandomValidInstrumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetRandomValidInstrumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRandomValidInstrumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchForValidInstrumentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r SearchForValidInstrumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchForValidInstrumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveValidInstrumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveValidInstrumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveValidInstrumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidInstrumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidInstrumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidInstrumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateValidInstrumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateValidInstrumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateValidInstrumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateValidMeasurementUnitConversionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateValidMeasurementUnitConversionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateValidMeasurementUnitConversionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidMeasurementUnitConversionsFromUnitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidMeasurementUnitConversionsFromUnitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidMeasurementUnitConversionsFromUnitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidMeasurementUnitConversionsToUnitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ValidMeasurementUnitConversionsToUnitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidMeasurementUnitConversionsToUnitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveValidMeasurementUnitConversionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveValidMeasurementUnitConversionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveValidMeasurementUnitConversionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidMeasurementUnitConversionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidMeasurementUnitConversionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidMeasurementUnitConversionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateValidMeasurementUnitConversionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateValidMeasurementUnitConversionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateValidMeasurementUnitConversionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidMeasurementUnitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidMeasurementUnitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidMeasurementUnitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateValidMeasurementUnitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateValidMeasurementUnitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateValidMeasurementUnitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidMeasurementUnitsByIngredientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidMeasurementUnitsByIngredientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidMeasurementUnitsByIngredientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchForValidMeasurementUnitsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r SearchForValidMeasurementUnitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchForValidMeasurementUnitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveValidMeasurementUnitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveValidMeasurementUnitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveValidMeasurementUnitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidMeasurementUnitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidMeasurementUnitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidMeasurementUnitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateValidMeasurementUnitResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateValidMeasurementUnitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateValidMeasurementUnitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidPreparationInstrumentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidPreparationInstrumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidPreparationInstrumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateValidPreparationInstrumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateValidPreparationInstrumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateValidPreparationInstrumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidPreparationInstrumentsByInstrumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidPreparationInstrumentsByInstrumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidPreparationInstrumentsByInstrumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidPreparationInstrumentsByPreparationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidPreparationInstrumentsByPreparationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidPreparationInstrumentsByPreparationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveValidPreparationInstrumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveValidPreparationInstrumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveValidPreparationInstrumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidPreparationInstrumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidPreparationInstrumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidPreparationInstrumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateValidPreparationInstrumentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateValidPreparationInstrumentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateValidPreparationInstrumentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidPreparationVesselsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails          `json:"details,omitempty"`
		Error      *APIError                 `json:"error,omitempty"`
		Pagination *Pagination               `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails          `json:"details,omitempty"`
		Error      *APIError                 `json:"error,omitempty"`
		Pagination *Pagination               `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidPreparationVesselsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidPreparationVesselsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateValidPreparationVesselResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateValidPreparationVesselResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateValidPreparationVesselResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidPreparationVesselsByPreparationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidPreparationVesselsByPreparationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidPreparationVesselsByPreparationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidPreparationVesselsByVesselResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidPreparationVesselsByVesselResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidPreparationVesselsByVesselResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveValidPreparationVesselResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveValidPreparationVesselResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveValidPreparationVesselResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidPreparationVesselResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidPreparationVesselResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidPreparationVesselResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateValidPreparationVesselResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateValidPreparationVesselResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateValidPreparationVesselResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidPreparationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidPreparationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidPreparationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateValidPreparationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateValidPreparationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateValidPreparationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRandomValidPreparationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetRandomValidPreparationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRandomValidPreparationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchForValidPreparationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r SearchForValidPreparationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchForValidPreparationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveValidPreparationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveValidPreparationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveValidPreparationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidPreparationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidPreparationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidPreparationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateValidPreparationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateValidPreparationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateValidPreparationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidVesselsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ValidVessel   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]ValidVessel   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidVesselsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidVesselsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateValidVesselResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ValidVessel     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ValidVessel     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateValidVesselResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateValidVesselResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRandomValidVesselResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidVessel     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidVessel     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetRandomValidVesselResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRandomValidVesselResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchForValidVesselsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidVessel     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidVessel     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r SearchForValidVesselsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchForValidVesselsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveValidVesselResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ValidVessel     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ValidVessel     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveValidVesselResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveValidVesselResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValidVesselResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidVessel     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidVessel     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetValidVesselResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValidVesselResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateValidVesselResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidVessel     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidVessel     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r UpdateValidVesselResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateValidVesselResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebhooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]Webhook       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]Webhook       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetWebhooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebhooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *Webhook         `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *Webhook         `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *Webhook         `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *Webhook         `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWebhookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *Webhook         `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *Webhook         `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetWebhookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWebhookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWebhookTriggerEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *WebhookTriggerEvent `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *WebhookTriggerEvent `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r CreateWebhookTriggerEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWebhookTriggerEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ArchiveWebhookTriggerEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *WebhookTriggerEvent `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *WebhookTriggerEvent `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r ArchiveWebhookTriggerEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ArchiveWebhookTriggerEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RunFinalizeMealPlanWorkerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *FinalizeMealPlansRequest `json:"data,omitempty"`
		Details    *ResponseDetails          `json:"details,omitempty"`
		Error      *APIError                 `json:"error,omitempty"`
		Pagination *Pagination               `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *FinalizeMealPlansRequest `json:"data,omitempty"`
		Details    *ResponseDetails          `json:"details,omitempty"`
		Error      *APIError                 `json:"error,omitempty"`
		Pagination *Pagination               `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r RunFinalizeMealPlanWorkerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RunFinalizeMealPlanWorkerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RunMealPlanGroceryListInitializerWorkerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RunMealPlanGroceryListInitializerWorkerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RunMealPlanGroceryListInitializerWorkerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RunMealPlanTaskCreatorWorkerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RunMealPlanTaskCreatorWorkerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RunMealPlanTaskCreatorWorkerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *UserStatusResponse `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *UserStatusResponse `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r GetAuthStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETOauth2AuthorizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GETOauth2AuthorizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETOauth2AuthorizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTOauth2TokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r POSTOauth2TokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTOauth2TokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *UserCreationResponse `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *UserCreationResponse `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r POSTUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyEmailAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r VerifyEmailAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyEmailAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *UserStatusResponse `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *UserStatusResponse `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *UserStatusResponse `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *UserStatusResponse `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r AdminLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *UserStatusResponse `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *UserStatusResponse `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r LogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RequestPasswordResetTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *PasswordResetToken `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *PasswordResetToken `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r RequestPasswordResetTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RequestPasswordResetTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RedeemPasswordResetTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r RedeemPasswordResetTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RedeemPasswordResetTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyTOTPSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r VerifyTOTPSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyTOTPSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RequestUsernameReminderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
}

// Status returns HTTPResponse.Status
func (r RequestUsernameReminderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RequestUsernameReminderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AdminCycleCookieSecretWithResponse request returning *AdminCycleCookieSecretResponse
func (c *ClientWithResponses) AdminCycleCookieSecretWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminCycleCookieSecretResponse, error) {
	rsp, err := c.AdminCycleCookieSecret(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminCycleCookieSecretResponse(rsp)
}

// AdminUpdateUserStatusWithBodyWithResponse request with arbitrary body returning *AdminUpdateUserStatusResponse
func (c *ClientWithResponses) AdminUpdateUserStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUpdateUserStatusResponse, error) {
	rsp, err := c.AdminUpdateUserStatusWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUpdateUserStatusResponse(rsp)
}

func (c *ClientWithResponses) AdminUpdateUserStatusWithResponse(ctx context.Context, body AdminUpdateUserStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUpdateUserStatusResponse, error) {
	rsp, err := c.AdminUpdateUserStatus(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUpdateUserStatusResponse(rsp)
}

// GetAuditLogEntriesForHouseholdWithResponse request returning *GetAuditLogEntriesForHouseholdResponse
func (c *ClientWithResponses) GetAuditLogEntriesForHouseholdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuditLogEntriesForHouseholdResponse, error) {
	rsp, err := c.GetAuditLogEntriesForHousehold(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuditLogEntriesForHouseholdResponse(rsp)
}

// GetAuditLogEntriesForUserWithResponse request returning *GetAuditLogEntriesForUserResponse
func (c *ClientWithResponses) GetAuditLogEntriesForUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuditLogEntriesForUserResponse, error) {
	rsp, err := c.GetAuditLogEntriesForUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuditLogEntriesForUserResponse(rsp)
}

// GetAuditLogEntryByIDWithResponse request returning *GetAuditLogEntryByIDResponse
func (c *ClientWithResponses) GetAuditLogEntryByIDWithResponse(ctx context.Context, auditLogEntryID string, reqEditors ...RequestEditorFn) (*GetAuditLogEntryByIDResponse, error) {
	rsp, err := c.GetAuditLogEntryByID(ctx, auditLogEntryID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuditLogEntryByIDResponse(rsp)
}

// GetReceivedHouseholdInvitationsWithResponse request returning *GetReceivedHouseholdInvitationsResponse
func (c *ClientWithResponses) GetReceivedHouseholdInvitationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetReceivedHouseholdInvitationsResponse, error) {
	rsp, err := c.GetReceivedHouseholdInvitations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReceivedHouseholdInvitationsResponse(rsp)
}

// GetSentHouseholdInvitationsWithResponse request returning *GetSentHouseholdInvitationsResponse
func (c *ClientWithResponses) GetSentHouseholdInvitationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSentHouseholdInvitationsResponse, error) {
	rsp, err := c.GetSentHouseholdInvitations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSentHouseholdInvitationsResponse(rsp)
}

// GetHouseholdInvitationsWithResponse request returning *GetHouseholdInvitationsResponse
func (c *ClientWithResponses) GetHouseholdInvitationsWithResponse(ctx context.Context, householdInvitationID string, reqEditors ...RequestEditorFn) (*GetHouseholdInvitationsResponse, error) {
	rsp, err := c.GetHouseholdInvitations(ctx, householdInvitationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHouseholdInvitationsResponse(rsp)
}

// AcceptHouseholdInvitationWithBodyWithResponse request with arbitrary body returning *AcceptHouseholdInvitationResponse
func (c *ClientWithResponses) AcceptHouseholdInvitationWithBodyWithResponse(ctx context.Context, householdInvitationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AcceptHouseholdInvitationResponse, error) {
	rsp, err := c.AcceptHouseholdInvitationWithBody(ctx, householdInvitationID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcceptHouseholdInvitationResponse(rsp)
}

func (c *ClientWithResponses) AcceptHouseholdInvitationWithResponse(ctx context.Context, householdInvitationID string, body AcceptHouseholdInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*AcceptHouseholdInvitationResponse, error) {
	rsp, err := c.AcceptHouseholdInvitation(ctx, householdInvitationID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAcceptHouseholdInvitationResponse(rsp)
}

// CancelHouseholdInvitationWithBodyWithResponse request with arbitrary body returning *CancelHouseholdInvitationResponse
func (c *ClientWithResponses) CancelHouseholdInvitationWithBodyWithResponse(ctx context.Context, householdInvitationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelHouseholdInvitationResponse, error) {
	rsp, err := c.CancelHouseholdInvitationWithBody(ctx, householdInvitationID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelHouseholdInvitationResponse(rsp)
}

func (c *ClientWithResponses) CancelHouseholdInvitationWithResponse(ctx context.Context, householdInvitationID string, body CancelHouseholdInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelHouseholdInvitationResponse, error) {
	rsp, err := c.CancelHouseholdInvitation(ctx, householdInvitationID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelHouseholdInvitationResponse(rsp)
}

// RejectHouseholdInvitationWithBodyWithResponse request with arbitrary body returning *RejectHouseholdInvitationResponse
func (c *ClientWithResponses) RejectHouseholdInvitationWithBodyWithResponse(ctx context.Context, householdInvitationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RejectHouseholdInvitationResponse, error) {
	rsp, err := c.RejectHouseholdInvitationWithBody(ctx, householdInvitationID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRejectHouseholdInvitationResponse(rsp)
}

func (c *ClientWithResponses) RejectHouseholdInvitationWithResponse(ctx context.Context, householdInvitationID string, body RejectHouseholdInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*RejectHouseholdInvitationResponse, error) {
	rsp, err := c.RejectHouseholdInvitation(ctx, householdInvitationID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRejectHouseholdInvitationResponse(rsp)
}

// GetHouseholdsWithResponse request returning *GetHouseholdsResponse
func (c *ClientWithResponses) GetHouseholdsWithResponse(ctx context.Context, params *GetHouseholdsParams, reqEditors ...RequestEditorFn) (*GetHouseholdsResponse, error) {
	rsp, err := c.GetHouseholds(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHouseholdsResponse(rsp)
}

// CreateHouseholdWithBodyWithResponse request with arbitrary body returning *CreateHouseholdResponse
func (c *ClientWithResponses) CreateHouseholdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHouseholdResponse, error) {
	rsp, err := c.CreateHouseholdWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHouseholdResponse(rsp)
}

func (c *ClientWithResponses) CreateHouseholdWithResponse(ctx context.Context, body CreateHouseholdJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHouseholdResponse, error) {
	rsp, err := c.CreateHousehold(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHouseholdResponse(rsp)
}

// GetActiveHouseholdWithResponse request returning *GetActiveHouseholdResponse
func (c *ClientWithResponses) GetActiveHouseholdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetActiveHouseholdResponse, error) {
	rsp, err := c.GetActiveHousehold(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetActiveHouseholdResponse(rsp)
}

// GetHouseholdInstrumentOwnershipsWithResponse request returning *GetHouseholdInstrumentOwnershipsResponse
func (c *ClientWithResponses) GetHouseholdInstrumentOwnershipsWithResponse(ctx context.Context, params *GetHouseholdInstrumentOwnershipsParams, reqEditors ...RequestEditorFn) (*GetHouseholdInstrumentOwnershipsResponse, error) {
	rsp, err := c.GetHouseholdInstrumentOwnerships(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHouseholdInstrumentOwnershipsResponse(rsp)
}

// CreateHouseholdInstrumentOwnershipWithBodyWithResponse request with arbitrary body returning *CreateHouseholdInstrumentOwnershipResponse
func (c *ClientWithResponses) CreateHouseholdInstrumentOwnershipWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHouseholdInstrumentOwnershipResponse, error) {
	rsp, err := c.CreateHouseholdInstrumentOwnershipWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHouseholdInstrumentOwnershipResponse(rsp)
}

func (c *ClientWithResponses) CreateHouseholdInstrumentOwnershipWithResponse(ctx context.Context, body CreateHouseholdInstrumentOwnershipJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHouseholdInstrumentOwnershipResponse, error) {
	rsp, err := c.CreateHouseholdInstrumentOwnership(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHouseholdInstrumentOwnershipResponse(rsp)
}

// ArchiveHouseholdInstrumentOwnershipWithResponse request returning *ArchiveHouseholdInstrumentOwnershipResponse
func (c *ClientWithResponses) ArchiveHouseholdInstrumentOwnershipWithResponse(ctx context.Context, householdInstrumentOwnershipID string, reqEditors ...RequestEditorFn) (*ArchiveHouseholdInstrumentOwnershipResponse, error) {
	rsp, err := c.ArchiveHouseholdInstrumentOwnership(ctx, householdInstrumentOwnershipID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveHouseholdInstrumentOwnershipResponse(rsp)
}

// GetHouseholdInstrumentOwnershipWithResponse request returning *GetHouseholdInstrumentOwnershipResponse
func (c *ClientWithResponses) GetHouseholdInstrumentOwnershipWithResponse(ctx context.Context, householdInstrumentOwnershipID string, reqEditors ...RequestEditorFn) (*GetHouseholdInstrumentOwnershipResponse, error) {
	rsp, err := c.GetHouseholdInstrumentOwnership(ctx, householdInstrumentOwnershipID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHouseholdInstrumentOwnershipResponse(rsp)
}

// UpdateHouseholdInstrumentOwnershipWithBodyWithResponse request with arbitrary body returning *UpdateHouseholdInstrumentOwnershipResponse
func (c *ClientWithResponses) UpdateHouseholdInstrumentOwnershipWithBodyWithResponse(ctx context.Context, householdInstrumentOwnershipID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateHouseholdInstrumentOwnershipResponse, error) {
	rsp, err := c.UpdateHouseholdInstrumentOwnershipWithBody(ctx, householdInstrumentOwnershipID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateHouseholdInstrumentOwnershipResponse(rsp)
}

func (c *ClientWithResponses) UpdateHouseholdInstrumentOwnershipWithResponse(ctx context.Context, householdInstrumentOwnershipID string, body UpdateHouseholdInstrumentOwnershipJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateHouseholdInstrumentOwnershipResponse, error) {
	rsp, err := c.UpdateHouseholdInstrumentOwnership(ctx, householdInstrumentOwnershipID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateHouseholdInstrumentOwnershipResponse(rsp)
}

// ArchiveHouseholdWithResponse request returning *ArchiveHouseholdResponse
func (c *ClientWithResponses) ArchiveHouseholdWithResponse(ctx context.Context, householdID string, reqEditors ...RequestEditorFn) (*ArchiveHouseholdResponse, error) {
	rsp, err := c.ArchiveHousehold(ctx, householdID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveHouseholdResponse(rsp)
}

// GetHouseholdWithResponse request returning *GetHouseholdResponse
func (c *ClientWithResponses) GetHouseholdWithResponse(ctx context.Context, householdID string, reqEditors ...RequestEditorFn) (*GetHouseholdResponse, error) {
	rsp, err := c.GetHousehold(ctx, householdID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHouseholdResponse(rsp)
}

// UpdateHouseholdWithBodyWithResponse request with arbitrary body returning *UpdateHouseholdResponse
func (c *ClientWithResponses) UpdateHouseholdWithBodyWithResponse(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateHouseholdResponse, error) {
	rsp, err := c.UpdateHouseholdWithBody(ctx, householdID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateHouseholdResponse(rsp)
}

func (c *ClientWithResponses) UpdateHouseholdWithResponse(ctx context.Context, householdID string, body UpdateHouseholdJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateHouseholdResponse, error) {
	rsp, err := c.UpdateHousehold(ctx, householdID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateHouseholdResponse(rsp)
}

// SetDefaultHouseholdWithResponse request returning *SetDefaultHouseholdResponse
func (c *ClientWithResponses) SetDefaultHouseholdWithResponse(ctx context.Context, householdID string, reqEditors ...RequestEditorFn) (*SetDefaultHouseholdResponse, error) {
	rsp, err := c.SetDefaultHousehold(ctx, householdID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetDefaultHouseholdResponse(rsp)
}

// CreateHouseholdInvitationWithBodyWithResponse request with arbitrary body returning *CreateHouseholdInvitationResponse
func (c *ClientWithResponses) CreateHouseholdInvitationWithBodyWithResponse(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateHouseholdInvitationResponse, error) {
	rsp, err := c.CreateHouseholdInvitationWithBody(ctx, householdID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHouseholdInvitationResponse(rsp)
}

func (c *ClientWithResponses) CreateHouseholdInvitationWithResponse(ctx context.Context, householdID string, body CreateHouseholdInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateHouseholdInvitationResponse, error) {
	rsp, err := c.CreateHouseholdInvitation(ctx, householdID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateHouseholdInvitationResponse(rsp)
}

// GetHouseholdInvitationByIDWithResponse request returning *GetHouseholdInvitationByIDResponse
func (c *ClientWithResponses) GetHouseholdInvitationByIDWithResponse(ctx context.Context, householdID string, householdInvitationID string, reqEditors ...RequestEditorFn) (*GetHouseholdInvitationByIDResponse, error) {
	rsp, err := c.GetHouseholdInvitationByID(ctx, householdID, householdInvitationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHouseholdInvitationByIDResponse(rsp)
}

// POSTHouseholdsHouseholdIDInviteWithBodyWithResponse request with arbitrary body returning *POSTHouseholdsHouseholdIDInviteResponse
func (c *ClientWithResponses) POSTHouseholdsHouseholdIDInviteWithBodyWithResponse(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTHouseholdsHouseholdIDInviteResponse, error) {
	rsp, err := c.POSTHouseholdsHouseholdIDInviteWithBody(ctx, householdID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTHouseholdsHouseholdIDInviteResponse(rsp)
}

func (c *ClientWithResponses) POSTHouseholdsHouseholdIDInviteWithResponse(ctx context.Context, householdID string, body POSTHouseholdsHouseholdIDInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTHouseholdsHouseholdIDInviteResponse, error) {
	rsp, err := c.POSTHouseholdsHouseholdIDInvite(ctx, householdID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTHouseholdsHouseholdIDInviteResponse(rsp)
}

// ArchiveUserMembershipWithResponse request returning *ArchiveUserMembershipResponse
func (c *ClientWithResponses) ArchiveUserMembershipWithResponse(ctx context.Context, householdID string, userID string, reqEditors ...RequestEditorFn) (*ArchiveUserMembershipResponse, error) {
	rsp, err := c.ArchiveUserMembership(ctx, householdID, userID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveUserMembershipResponse(rsp)
}

// UpdateHouseholdMemberPermissionsWithBodyWithResponse request with arbitrary body returning *UpdateHouseholdMemberPermissionsResponse
func (c *ClientWithResponses) UpdateHouseholdMemberPermissionsWithBodyWithResponse(ctx context.Context, householdID string, userID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateHouseholdMemberPermissionsResponse, error) {
	rsp, err := c.UpdateHouseholdMemberPermissionsWithBody(ctx, householdID, userID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateHouseholdMemberPermissionsResponse(rsp)
}

func (c *ClientWithResponses) UpdateHouseholdMemberPermissionsWithResponse(ctx context.Context, householdID string, userID string, body UpdateHouseholdMemberPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateHouseholdMemberPermissionsResponse, error) {
	rsp, err := c.UpdateHouseholdMemberPermissions(ctx, householdID, userID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateHouseholdMemberPermissionsResponse(rsp)
}

// TransferHouseholdOwnershipWithBodyWithResponse request with arbitrary body returning *TransferHouseholdOwnershipResponse
func (c *ClientWithResponses) TransferHouseholdOwnershipWithBodyWithResponse(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TransferHouseholdOwnershipResponse, error) {
	rsp, err := c.TransferHouseholdOwnershipWithBody(ctx, householdID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTransferHouseholdOwnershipResponse(rsp)
}

func (c *ClientWithResponses) TransferHouseholdOwnershipWithResponse(ctx context.Context, householdID string, body TransferHouseholdOwnershipJSONRequestBody, reqEditors ...RequestEditorFn) (*TransferHouseholdOwnershipResponse, error) {
	rsp, err := c.TransferHouseholdOwnership(ctx, householdID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTransferHouseholdOwnershipResponse(rsp)
}

// GetMealPlansWithResponse request returning *GetMealPlansResponse
func (c *ClientWithResponses) GetMealPlansWithResponse(ctx context.Context, params *GetMealPlansParams, reqEditors ...RequestEditorFn) (*GetMealPlansResponse, error) {
	rsp, err := c.GetMealPlans(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMealPlansResponse(rsp)
}

// CreateMealPlanWithBodyWithResponse request with arbitrary body returning *CreateMealPlanResponse
func (c *ClientWithResponses) CreateMealPlanWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMealPlanResponse, error) {
	rsp, err := c.CreateMealPlanWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMealPlanResponse(rsp)
}

func (c *ClientWithResponses) CreateMealPlanWithResponse(ctx context.Context, body CreateMealPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMealPlanResponse, error) {
	rsp, err := c.CreateMealPlan(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMealPlanResponse(rsp)
}

// ArchiveMealPlanWithResponse request returning *ArchiveMealPlanResponse
func (c *ClientWithResponses) ArchiveMealPlanWithResponse(ctx context.Context, mealPlanID string, reqEditors ...RequestEditorFn) (*ArchiveMealPlanResponse, error) {
	rsp, err := c.ArchiveMealPlan(ctx, mealPlanID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveMealPlanResponse(rsp)
}

// GetMealPlanWithResponse request returning *GetMealPlanResponse
func (c *ClientWithResponses) GetMealPlanWithResponse(ctx context.Context, mealPlanID string, reqEditors ...RequestEditorFn) (*GetMealPlanResponse, error) {
	rsp, err := c.GetMealPlan(ctx, mealPlanID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMealPlanResponse(rsp)
}

// UpdateMealPlanWithBodyWithResponse request with arbitrary body returning *UpdateMealPlanResponse
func (c *ClientWithResponses) UpdateMealPlanWithBodyWithResponse(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMealPlanResponse, error) {
	rsp, err := c.UpdateMealPlanWithBody(ctx, mealPlanID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMealPlanResponse(rsp)
}

func (c *ClientWithResponses) UpdateMealPlanWithResponse(ctx context.Context, mealPlanID string, body UpdateMealPlanJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMealPlanResponse, error) {
	rsp, err := c.UpdateMealPlan(ctx, mealPlanID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMealPlanResponse(rsp)
}

// GetMealPlanEventsWithResponse request returning *GetMealPlanEventsResponse
func (c *ClientWithResponses) GetMealPlanEventsWithResponse(ctx context.Context, mealPlanID string, params *GetMealPlanEventsParams, reqEditors ...RequestEditorFn) (*GetMealPlanEventsResponse, error) {
	rsp, err := c.GetMealPlanEvents(ctx, mealPlanID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMealPlanEventsResponse(rsp)
}

// CreateMealPlanEventWithBodyWithResponse request with arbitrary body returning *CreateMealPlanEventResponse
func (c *ClientWithResponses) CreateMealPlanEventWithBodyWithResponse(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMealPlanEventResponse, error) {
	rsp, err := c.CreateMealPlanEventWithBody(ctx, mealPlanID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMealPlanEventResponse(rsp)
}

func (c *ClientWithResponses) CreateMealPlanEventWithResponse(ctx context.Context, mealPlanID string, body CreateMealPlanEventJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMealPlanEventResponse, error) {
	rsp, err := c.CreateMealPlanEvent(ctx, mealPlanID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMealPlanEventResponse(rsp)
}

// ArchiveMealPlanEventWithResponse request returning *ArchiveMealPlanEventResponse
func (c *ClientWithResponses) ArchiveMealPlanEventWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, reqEditors ...RequestEditorFn) (*ArchiveMealPlanEventResponse, error) {
	rsp, err := c.ArchiveMealPlanEvent(ctx, mealPlanID, mealPlanEventID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveMealPlanEventResponse(rsp)
}

// GetMealPlanEventWithResponse request returning *GetMealPlanEventResponse
func (c *ClientWithResponses) GetMealPlanEventWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, reqEditors ...RequestEditorFn) (*GetMealPlanEventResponse, error) {
	rsp, err := c.GetMealPlanEvent(ctx, mealPlanID, mealPlanEventID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMealPlanEventResponse(rsp)
}

// UpdateMealPlanEventWithBodyWithResponse request with arbitrary body returning *UpdateMealPlanEventResponse
func (c *ClientWithResponses) UpdateMealPlanEventWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMealPlanEventResponse, error) {
	rsp, err := c.UpdateMealPlanEventWithBody(ctx, mealPlanID, mealPlanEventID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMealPlanEventResponse(rsp)
}

func (c *ClientWithResponses) UpdateMealPlanEventWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, body UpdateMealPlanEventJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMealPlanEventResponse, error) {
	rsp, err := c.UpdateMealPlanEvent(ctx, mealPlanID, mealPlanEventID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMealPlanEventResponse(rsp)
}

// GetMealPlanOptionsWithResponse request returning *GetMealPlanOptionsResponse
func (c *ClientWithResponses) GetMealPlanOptionsWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, params *GetMealPlanOptionsParams, reqEditors ...RequestEditorFn) (*GetMealPlanOptionsResponse, error) {
	rsp, err := c.GetMealPlanOptions(ctx, mealPlanID, mealPlanEventID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMealPlanOptionsResponse(rsp)
}

// CreateMealPlanOptionWithBodyWithResponse request with arbitrary body returning *CreateMealPlanOptionResponse
func (c *ClientWithResponses) CreateMealPlanOptionWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMealPlanOptionResponse, error) {
	rsp, err := c.CreateMealPlanOptionWithBody(ctx, mealPlanID, mealPlanEventID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMealPlanOptionResponse(rsp)
}

func (c *ClientWithResponses) CreateMealPlanOptionWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, body CreateMealPlanOptionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMealPlanOptionResponse, error) {
	rsp, err := c.CreateMealPlanOption(ctx, mealPlanID, mealPlanEventID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMealPlanOptionResponse(rsp)
}

// ArchiveMealPlanOptionWithResponse request returning *ArchiveMealPlanOptionResponse
func (c *ClientWithResponses) ArchiveMealPlanOptionWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, reqEditors ...RequestEditorFn) (*ArchiveMealPlanOptionResponse, error) {
	rsp, err := c.ArchiveMealPlanOption(ctx, mealPlanID, mealPlanEventID, mealPlanOptionID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveMealPlanOptionResponse(rsp)
}

// GetMealPlanOptionWithResponse request returning *GetMealPlanOptionResponse
func (c *ClientWithResponses) GetMealPlanOptionWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, reqEditors ...RequestEditorFn) (*GetMealPlanOptionResponse, error) {
	rsp, err := c.GetMealPlanOption(ctx, mealPlanID, mealPlanEventID, mealPlanOptionID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMealPlanOptionResponse(rsp)
}

// UpdateMealPlanOptionWithBodyWithResponse request with arbitrary body returning *UpdateMealPlanOptionResponse
func (c *ClientWithResponses) UpdateMealPlanOptionWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMealPlanOptionResponse, error) {
	rsp, err := c.UpdateMealPlanOptionWithBody(ctx, mealPlanID, mealPlanEventID, mealPlanOptionID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMealPlanOptionResponse(rsp)
}

func (c *ClientWithResponses) UpdateMealPlanOptionWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, body UpdateMealPlanOptionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMealPlanOptionResponse, error) {
	rsp, err := c.UpdateMealPlanOption(ctx, mealPlanID, mealPlanEventID, mealPlanOptionID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMealPlanOptionResponse(rsp)
}

// GetMealPlanOptionVotesWithResponse request returning *GetMealPlanOptionVotesResponse
func (c *ClientWithResponses) GetMealPlanOptionVotesWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, params *GetMealPlanOptionVotesParams, reqEditors ...RequestEditorFn) (*GetMealPlanOptionVotesResponse, error) {
	rsp, err := c.GetMealPlanOptionVotes(ctx, mealPlanID, mealPlanEventID, mealPlanOptionID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMealPlanOptionVotesResponse(rsp)
}

// ArchiveMealPlanOptionVoteWithResponse request returning *ArchiveMealPlanOptionVoteResponse
func (c *ClientWithResponses) ArchiveMealPlanOptionVoteWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, reqEditors ...RequestEditorFn) (*ArchiveMealPlanOptionVoteResponse, error) {
	rsp, err := c.ArchiveMealPlanOptionVote(ctx, mealPlanID, mealPlanEventID, mealPlanOptionID, mealPlanOptionVoteID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveMealPlanOptionVoteResponse(rsp)
}

// GetMealPlanOptionVoteWithResponse request returning *GetMealPlanOptionVoteResponse
func (c *ClientWithResponses) GetMealPlanOptionVoteWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, reqEditors ...RequestEditorFn) (*GetMealPlanOptionVoteResponse, error) {
	rsp, err := c.GetMealPlanOptionVote(ctx, mealPlanID, mealPlanEventID, mealPlanOptionID, mealPlanOptionVoteID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMealPlanOptionVoteResponse(rsp)
}

// UpdateMealPlanOptionVoteWithBodyWithResponse request with arbitrary body returning *UpdateMealPlanOptionVoteResponse
func (c *ClientWithResponses) UpdateMealPlanOptionVoteWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMealPlanOptionVoteResponse, error) {
	rsp, err := c.UpdateMealPlanOptionVoteWithBody(ctx, mealPlanID, mealPlanEventID, mealPlanOptionID, mealPlanOptionVoteID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMealPlanOptionVoteResponse(rsp)
}

func (c *ClientWithResponses) UpdateMealPlanOptionVoteWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, body UpdateMealPlanOptionVoteJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMealPlanOptionVoteResponse, error) {
	rsp, err := c.UpdateMealPlanOptionVote(ctx, mealPlanID, mealPlanEventID, mealPlanOptionID, mealPlanOptionVoteID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMealPlanOptionVoteResponse(rsp)
}

// CreateMealPlanVoteWithBodyWithResponse request with arbitrary body returning *CreateMealPlanVoteResponse
func (c *ClientWithResponses) CreateMealPlanVoteWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMealPlanVoteResponse, error) {
	rsp, err := c.CreateMealPlanVoteWithBody(ctx, mealPlanID, mealPlanEventID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMealPlanVoteResponse(rsp)
}

func (c *ClientWithResponses) CreateMealPlanVoteWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, body CreateMealPlanVoteJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMealPlanVoteResponse, error) {
	rsp, err := c.CreateMealPlanVote(ctx, mealPlanID, mealPlanEventID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMealPlanVoteResponse(rsp)
}

// FinalizeMealPlanWithResponse request returning *FinalizeMealPlanResponse
func (c *ClientWithResponses) FinalizeMealPlanWithResponse(ctx context.Context, mealPlanID string, reqEditors ...RequestEditorFn) (*FinalizeMealPlanResponse, error) {
	rsp, err := c.FinalizeMealPlan(ctx, mealPlanID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFinalizeMealPlanResponse(rsp)
}

// GetMealPlanGroceryListItemsWithResponse request returning *GetMealPlanGroceryListItemsResponse
func (c *ClientWithResponses) GetMealPlanGroceryListItemsWithResponse(ctx context.Context, mealPlanID string, params *GetMealPlanGroceryListItemsParams, reqEditors ...RequestEditorFn) (*GetMealPlanGroceryListItemsResponse, error) {
	rsp, err := c.GetMealPlanGroceryListItems(ctx, mealPlanID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMealPlanGroceryListItemsResponse(rsp)
}

// CreateMealPlanGroceryListItemWithBodyWithResponse request with arbitrary body returning *CreateMealPlanGroceryListItemResponse
func (c *ClientWithResponses) CreateMealPlanGroceryListItemWithBodyWithResponse(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMealPlanGroceryListItemResponse, error) {
	rsp, err := c.CreateMealPlanGroceryListItemWithBody(ctx, mealPlanID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMealPlanGroceryListItemResponse(rsp)
}

func (c *ClientWithResponses) CreateMealPlanGroceryListItemWithResponse(ctx context.Context, mealPlanID string, body CreateMealPlanGroceryListItemJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMealPlanGroceryListItemResponse, error) {
	rsp, err := c.CreateMealPlanGroceryListItem(ctx, mealPlanID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMealPlanGroceryListItemResponse(rsp)
}

// ArchiveMealPlanGroceryListItemWithResponse request returning *ArchiveMealPlanGroceryListItemResponse
func (c *ClientWithResponses) ArchiveMealPlanGroceryListItemWithResponse(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, reqEditors ...RequestEditorFn) (*ArchiveMealPlanGroceryListItemResponse, error) {
	rsp, err := c.ArchiveMealPlanGroceryListItem(ctx, mealPlanID, mealPlanGroceryListItemID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveMealPlanGroceryListItemResponse(rsp)
}

// GetMealPlanGroceryListItemWithResponse request returning *GetMealPlanGroceryListItemResponse
func (c *ClientWithResponses) GetMealPlanGroceryListItemWithResponse(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, reqEditors ...RequestEditorFn) (*GetMealPlanGroceryListItemResponse, error) {
	rsp, err := c.GetMealPlanGroceryListItem(ctx, mealPlanID, mealPlanGroceryListItemID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMealPlanGroceryListItemResponse(rsp)
}

// UpdateMealPlanGroceryListItemWithBodyWithResponse request with arbitrary body returning *UpdateMealPlanGroceryListItemResponse
func (c *ClientWithResponses) UpdateMealPlanGroceryListItemWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMealPlanGroceryListItemResponse, error) {
	rsp, err := c.UpdateMealPlanGroceryListItemWithBody(ctx, mealPlanID, mealPlanGroceryListItemID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMealPlanGroceryListItemResponse(rsp)
}

func (c *ClientWithResponses) UpdateMealPlanGroceryListItemWithResponse(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, body UpdateMealPlanGroceryListItemJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMealPlanGroceryListItemResponse, error) {
	rsp, err := c.UpdateMealPlanGroceryListItem(ctx, mealPlanID, mealPlanGroceryListItemID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMealPlanGroceryListItemResponse(rsp)
}

// GetMealPlanTasksWithResponse request returning *GetMealPlanTasksResponse
func (c *ClientWithResponses) GetMealPlanTasksWithResponse(ctx context.Context, mealPlanID string, params *GetMealPlanTasksParams, reqEditors ...RequestEditorFn) (*GetMealPlanTasksResponse, error) {
	rsp, err := c.GetMealPlanTasks(ctx, mealPlanID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMealPlanTasksResponse(rsp)
}

// CreateMealPlanTaskWithBodyWithResponse request with arbitrary body returning *CreateMealPlanTaskResponse
func (c *ClientWithResponses) CreateMealPlanTaskWithBodyWithResponse(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMealPlanTaskResponse, error) {
	rsp, err := c.CreateMealPlanTaskWithBody(ctx, mealPlanID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMealPlanTaskResponse(rsp)
}

func (c *ClientWithResponses) CreateMealPlanTaskWithResponse(ctx context.Context, mealPlanID string, body CreateMealPlanTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMealPlanTaskResponse, error) {
	rsp, err := c.CreateMealPlanTask(ctx, mealPlanID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMealPlanTaskResponse(rsp)
}

// GetMealPlanTaskWithResponse request returning *GetMealPlanTaskResponse
func (c *ClientWithResponses) GetMealPlanTaskWithResponse(ctx context.Context, mealPlanID string, mealPlanTaskID string, reqEditors ...RequestEditorFn) (*GetMealPlanTaskResponse, error) {
	rsp, err := c.GetMealPlanTask(ctx, mealPlanID, mealPlanTaskID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMealPlanTaskResponse(rsp)
}

// UpdateMealPlanTaskWithBodyWithResponse request with arbitrary body returning *UpdateMealPlanTaskResponse
func (c *ClientWithResponses) UpdateMealPlanTaskWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanTaskID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMealPlanTaskResponse, error) {
	rsp, err := c.UpdateMealPlanTaskWithBody(ctx, mealPlanID, mealPlanTaskID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMealPlanTaskResponse(rsp)
}

func (c *ClientWithResponses) UpdateMealPlanTaskWithResponse(ctx context.Context, mealPlanID string, mealPlanTaskID string, body UpdateMealPlanTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMealPlanTaskResponse, error) {
	rsp, err := c.UpdateMealPlanTask(ctx, mealPlanID, mealPlanTaskID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMealPlanTaskResponse(rsp)
}

// GetMealsWithResponse request returning *GetMealsResponse
func (c *ClientWithResponses) GetMealsWithResponse(ctx context.Context, params *GetMealsParams, reqEditors ...RequestEditorFn) (*GetMealsResponse, error) {
	rsp, err := c.GetMeals(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMealsResponse(rsp)
}

// CreateMealWithBodyWithResponse request with arbitrary body returning *CreateMealResponse
func (c *ClientWithResponses) CreateMealWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMealResponse, error) {
	rsp, err := c.CreateMealWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMealResponse(rsp)
}

func (c *ClientWithResponses) CreateMealWithResponse(ctx context.Context, body CreateMealJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMealResponse, error) {
	rsp, err := c.CreateMeal(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMealResponse(rsp)
}

// SearchForMealsWithResponse request returning *SearchForMealsResponse
func (c *ClientWithResponses) SearchForMealsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SearchForMealsResponse, error) {
	rsp, err := c.SearchForMeals(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchForMealsResponse(rsp)
}

// ArchiveMealWithResponse request returning *ArchiveMealResponse
func (c *ClientWithResponses) ArchiveMealWithResponse(ctx context.Context, mealID string, reqEditors ...RequestEditorFn) (*ArchiveMealResponse, error) {
	rsp, err := c.ArchiveMeal(ctx, mealID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveMealResponse(rsp)
}

// GetMealWithResponse request returning *GetMealResponse
func (c *ClientWithResponses) GetMealWithResponse(ctx context.Context, mealID string, reqEditors ...RequestEditorFn) (*GetMealResponse, error) {
	rsp, err := c.GetMeal(ctx, mealID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMealResponse(rsp)
}

// GetOAuth2ClientsWithResponse request returning *GetOAuth2ClientsResponse
func (c *ClientWithResponses) GetOAuth2ClientsWithResponse(ctx context.Context, params *GetOAuth2ClientsParams, reqEditors ...RequestEditorFn) (*GetOAuth2ClientsResponse, error) {
	rsp, err := c.GetOAuth2Clients(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOAuth2ClientsResponse(rsp)
}

// CreateOAuth2ClientWithBodyWithResponse request with arbitrary body returning *CreateOAuth2ClientResponse
func (c *ClientWithResponses) CreateOAuth2ClientWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOAuth2ClientResponse, error) {
	rsp, err := c.CreateOAuth2ClientWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOAuth2ClientResponse(rsp)
}

func (c *ClientWithResponses) CreateOAuth2ClientWithResponse(ctx context.Context, body CreateOAuth2ClientJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOAuth2ClientResponse, error) {
	rsp, err := c.CreateOAuth2Client(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOAuth2ClientResponse(rsp)
}

// ArchiveOAuth2ClientWithResponse request returning *ArchiveOAuth2ClientResponse
func (c *ClientWithResponses) ArchiveOAuth2ClientWithResponse(ctx context.Context, oauth2ClientID string, reqEditors ...RequestEditorFn) (*ArchiveOAuth2ClientResponse, error) {
	rsp, err := c.ArchiveOAuth2Client(ctx, oauth2ClientID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveOAuth2ClientResponse(rsp)
}

// GetOAuth2ClientWithResponse request returning *GetOAuth2ClientResponse
func (c *ClientWithResponses) GetOAuth2ClientWithResponse(ctx context.Context, oauth2ClientID string, reqEditors ...RequestEditorFn) (*GetOAuth2ClientResponse, error) {
	rsp, err := c.GetOAuth2Client(ctx, oauth2ClientID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOAuth2ClientResponse(rsp)
}

// GetRecipesWithResponse request returning *GetRecipesResponse
func (c *ClientWithResponses) GetRecipesWithResponse(ctx context.Context, params *GetRecipesParams, reqEditors ...RequestEditorFn) (*GetRecipesResponse, error) {
	rsp, err := c.GetRecipes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipesResponse(rsp)
}

// CreateRecipeWithBodyWithResponse request with arbitrary body returning *CreateRecipeResponse
func (c *ClientWithResponses) CreateRecipeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRecipeResponse, error) {
	rsp, err := c.CreateRecipeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRecipeResponse(rsp)
}

func (c *ClientWithResponses) CreateRecipeWithResponse(ctx context.Context, body CreateRecipeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRecipeResponse, error) {
	rsp, err := c.CreateRecipe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRecipeResponse(rsp)
}

// SearchForRecipesWithResponse request returning *SearchForRecipesResponse
func (c *ClientWithResponses) SearchForRecipesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SearchForRecipesResponse, error) {
	rsp, err := c.SearchForRecipes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchForRecipesResponse(rsp)
}

// ArchiveRecipeWithResponse request returning *ArchiveRecipeResponse
func (c *ClientWithResponses) ArchiveRecipeWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*ArchiveRecipeResponse, error) {
	rsp, err := c.ArchiveRecipe(ctx, recipeID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveRecipeResponse(rsp)
}

// GetRecipeWithResponse request returning *GetRecipeResponse
func (c *ClientWithResponses) GetRecipeWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*GetRecipeResponse, error) {
	rsp, err := c.GetRecipe(ctx, recipeID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipeResponse(rsp)
}

// UpdateRecipeWithBodyWithResponse request with arbitrary body returning *UpdateRecipeResponse
func (c *ClientWithResponses) UpdateRecipeWithBodyWithResponse(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRecipeResponse, error) {
	rsp, err := c.UpdateRecipeWithBody(ctx, recipeID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRecipeResponse(rsp)
}

func (c *ClientWithResponses) UpdateRecipeWithResponse(ctx context.Context, recipeID string, body UpdateRecipeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRecipeResponse, error) {
	rsp, err := c.UpdateRecipe(ctx, recipeID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRecipeResponse(rsp)
}

// CloneRecipeWithResponse request returning *CloneRecipeResponse
func (c *ClientWithResponses) CloneRecipeWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*CloneRecipeResponse, error) {
	rsp, err := c.CloneRecipe(ctx, recipeID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloneRecipeResponse(rsp)
}

// GetRecipeDAGWithResponse request returning *GetRecipeDAGResponse
func (c *ClientWithResponses) GetRecipeDAGWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*GetRecipeDAGResponse, error) {
	rsp, err := c.GetRecipeDAG(ctx, recipeID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipeDAGResponse(rsp)
}

// POSTRecipesRecipeIDImagesWithResponse request returning *POSTRecipesRecipeIDImagesResponse
func (c *ClientWithResponses) POSTRecipesRecipeIDImagesWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDImagesResponse, error) {
	rsp, err := c.POSTRecipesRecipeIDImages(ctx, recipeID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTRecipesRecipeIDImagesResponse(rsp)
}

// GETRecipesRecipeIDMermaidWithResponse request returning *GETRecipesRecipeIDMermaidResponse
func (c *ClientWithResponses) GETRecipesRecipeIDMermaidWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDMermaidResponse, error) {
	rsp, err := c.GETRecipesRecipeIDMermaid(ctx, recipeID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETRecipesRecipeIDMermaidResponse(rsp)
}

// GetRecipePrepTaskStepWithResponse request returning *GetRecipePrepTaskStepResponse
func (c *ClientWithResponses) GetRecipePrepTaskStepWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*GetRecipePrepTaskStepResponse, error) {
	rsp, err := c.GetRecipePrepTaskStep(ctx, recipeID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipePrepTaskStepResponse(rsp)
}

// GetRecipePrepTasksWithResponse request returning *GetRecipePrepTasksResponse
func (c *ClientWithResponses) GetRecipePrepTasksWithResponse(ctx context.Context, recipeID string, params *GetRecipePrepTasksParams, reqEditors ...RequestEditorFn) (*GetRecipePrepTasksResponse, error) {
	rsp, err := c.GetRecipePrepTasks(ctx, recipeID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipePrepTasksResponse(rsp)
}

// CreateRecipePrepTaskWithBodyWithResponse request with arbitrary body returning *CreateRecipePrepTaskResponse
func (c *ClientWithResponses) CreateRecipePrepTaskWithBodyWithResponse(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRecipePrepTaskResponse, error) {
	rsp, err := c.CreateRecipePrepTaskWithBody(ctx, recipeID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRecipePrepTaskResponse(rsp)
}

func (c *ClientWithResponses) CreateRecipePrepTaskWithResponse(ctx context.Context, recipeID string, body CreateRecipePrepTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRecipePrepTaskResponse, error) {
	rsp, err := c.CreateRecipePrepTask(ctx, recipeID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRecipePrepTaskResponse(rsp)
}

// ArchiveRecipePrepTaskWithResponse request returning *ArchiveRecipePrepTaskResponse
func (c *ClientWithResponses) ArchiveRecipePrepTaskWithResponse(ctx context.Context, recipeID string, recipePrepTaskID string, reqEditors ...RequestEditorFn) (*ArchiveRecipePrepTaskResponse, error) {
	rsp, err := c.ArchiveRecipePrepTask(ctx, recipeID, recipePrepTaskID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveRecipePrepTaskResponse(rsp)
}

// GetRecipePrepTaskWithResponse request returning *GetRecipePrepTaskResponse
func (c *ClientWithResponses) GetRecipePrepTaskWithResponse(ctx context.Context, recipeID string, recipePrepTaskID string, reqEditors ...RequestEditorFn) (*GetRecipePrepTaskResponse, error) {
	rsp, err := c.GetRecipePrepTask(ctx, recipeID, recipePrepTaskID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipePrepTaskResponse(rsp)
}

// UpdateRecipePrepTaskWithBodyWithResponse request with arbitrary body returning *UpdateRecipePrepTaskResponse
func (c *ClientWithResponses) UpdateRecipePrepTaskWithBodyWithResponse(ctx context.Context, recipeID string, recipePrepTaskID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRecipePrepTaskResponse, error) {
	rsp, err := c.UpdateRecipePrepTaskWithBody(ctx, recipeID, recipePrepTaskID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRecipePrepTaskResponse(rsp)
}

func (c *ClientWithResponses) UpdateRecipePrepTaskWithResponse(ctx context.Context, recipeID string, recipePrepTaskID string, body UpdateRecipePrepTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRecipePrepTaskResponse, error) {
	rsp, err := c.UpdateRecipePrepTask(ctx, recipeID, recipePrepTaskID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRecipePrepTaskResponse(rsp)
}

// GetRecipeRatingsWithResponse request returning *GetRecipeRatingsResponse
func (c *ClientWithResponses) GetRecipeRatingsWithResponse(ctx context.Context, recipeID string, params *GetRecipeRatingsParams, reqEditors ...RequestEditorFn) (*GetRecipeRatingsResponse, error) {
	rsp, err := c.GetRecipeRatings(ctx, recipeID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipeRatingsResponse(rsp)
}

// CreateRecipeRatingWithBodyWithResponse request with arbitrary body returning *CreateRecipeRatingResponse
func (c *ClientWithResponses) CreateRecipeRatingWithBodyWithResponse(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRecipeRatingResponse, error) {
	rsp, err := c.CreateRecipeRatingWithBody(ctx, recipeID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRecipeRatingResponse(rsp)
}

func (c *ClientWithResponses) CreateRecipeRatingWithResponse(ctx context.Context, recipeID string, body CreateRecipeRatingJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRecipeRatingResponse, error) {
	rsp, err := c.CreateRecipeRating(ctx, recipeID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRecipeRatingResponse(rsp)
}

// ArchiveRecipeRatingWithResponse request returning *ArchiveRecipeRatingResponse
func (c *ClientWithResponses) ArchiveRecipeRatingWithResponse(ctx context.Context, recipeID string, recipeRatingID string, reqEditors ...RequestEditorFn) (*ArchiveRecipeRatingResponse, error) {
	rsp, err := c.ArchiveRecipeRating(ctx, recipeID, recipeRatingID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveRecipeRatingResponse(rsp)
}

// GetRecipeRatingWithResponse request returning *GetRecipeRatingResponse
func (c *ClientWithResponses) GetRecipeRatingWithResponse(ctx context.Context, recipeID string, recipeRatingID string, reqEditors ...RequestEditorFn) (*GetRecipeRatingResponse, error) {
	rsp, err := c.GetRecipeRating(ctx, recipeID, recipeRatingID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipeRatingResponse(rsp)
}

// UpdateRecipeRatingWithBodyWithResponse request with arbitrary body returning *UpdateRecipeRatingResponse
func (c *ClientWithResponses) UpdateRecipeRatingWithBodyWithResponse(ctx context.Context, recipeID string, recipeRatingID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRecipeRatingResponse, error) {
	rsp, err := c.UpdateRecipeRatingWithBody(ctx, recipeID, recipeRatingID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRecipeRatingResponse(rsp)
}

func (c *ClientWithResponses) UpdateRecipeRatingWithResponse(ctx context.Context, recipeID string, recipeRatingID string, body UpdateRecipeRatingJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRecipeRatingResponse, error) {
	rsp, err := c.UpdateRecipeRating(ctx, recipeID, recipeRatingID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRecipeRatingResponse(rsp)
}

// GetRecipeStepsWithResponse request returning *GetRecipeStepsResponse
func (c *ClientWithResponses) GetRecipeStepsWithResponse(ctx context.Context, recipeID string, params *GetRecipeStepsParams, reqEditors ...RequestEditorFn) (*GetRecipeStepsResponse, error) {
	rsp, err := c.GetRecipeSteps(ctx, recipeID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipeStepsResponse(rsp)
}

// CreateRecipeStepWithBodyWithResponse request with arbitrary body returning *CreateRecipeStepResponse
func (c *ClientWithResponses) CreateRecipeStepWithBodyWithResponse(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRecipeStepResponse, error) {
	rsp, err := c.CreateRecipeStepWithBody(ctx, recipeID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRecipeStepResponse(rsp)
}

func (c *ClientWithResponses) CreateRecipeStepWithResponse(ctx context.Context, recipeID string, body CreateRecipeStepJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRecipeStepResponse, error) {
	rsp, err := c.CreateRecipeStep(ctx, recipeID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRecipeStepResponse(rsp)
}

// ArchiveRecipeStepWithResponse request returning *ArchiveRecipeStepResponse
func (c *ClientWithResponses) ArchiveRecipeStepWithResponse(ctx context.Context, recipeID string, recipeStepID string, reqEditors ...RequestEditorFn) (*ArchiveRecipeStepResponse, error) {
	rsp, err := c.ArchiveRecipeStep(ctx, recipeID, recipeStepID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveRecipeStepResponse(rsp)
}

// GetRecipeStepWithResponse request returning *GetRecipeStepResponse
func (c *ClientWithResponses) GetRecipeStepWithResponse(ctx context.Context, recipeID string, recipeStepID string, reqEditors ...RequestEditorFn) (*GetRecipeStepResponse, error) {
	rsp, err := c.GetRecipeStep(ctx, recipeID, recipeStepID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipeStepResponse(rsp)
}

// UpdateRecipeStepWithBodyWithResponse request with arbitrary body returning *UpdateRecipeStepResponse
func (c *ClientWithResponses) UpdateRecipeStepWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRecipeStepResponse, error) {
	rsp, err := c.UpdateRecipeStepWithBody(ctx, recipeID, recipeStepID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRecipeStepResponse(rsp)
}

func (c *ClientWithResponses) UpdateRecipeStepWithResponse(ctx context.Context, recipeID string, recipeStepID string, body UpdateRecipeStepJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRecipeStepResponse, error) {
	rsp, err := c.UpdateRecipeStep(ctx, recipeID, recipeStepID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRecipeStepResponse(rsp)
}

// GetRecipeStepCompletionConditionsWithResponse request returning *GetRecipeStepCompletionConditionsResponse
func (c *ClientWithResponses) GetRecipeStepCompletionConditionsWithResponse(ctx context.Context, recipeID string, recipeStepID string, params *GetRecipeStepCompletionConditionsParams, reqEditors ...RequestEditorFn) (*GetRecipeStepCompletionConditionsResponse, error) {
	rsp, err := c.GetRecipeStepCompletionConditions(ctx, recipeID, recipeStepID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipeStepCompletionConditionsResponse(rsp)
}

// CreateRecipeStepCompletionConditionWithBodyWithResponse request with arbitrary body returning *CreateRecipeStepCompletionConditionResponse
func (c *ClientWithResponses) CreateRecipeStepCompletionConditionWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRecipeStepCompletionConditionResponse, error) {
	rsp, err := c.CreateRecipeStepCompletionConditionWithBody(ctx, recipeID, recipeStepID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRecipeStepCompletionConditionResponse(rsp)
}

func (c *ClientWithResponses) CreateRecipeStepCompletionConditionWithResponse(ctx context.Context, recipeID string, recipeStepID string, body CreateRecipeStepCompletionConditionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRecipeStepCompletionConditionResponse, error) {
	rsp, err := c.CreateRecipeStepCompletionCondition(ctx, recipeID, recipeStepID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRecipeStepCompletionConditionResponse(rsp)
}

// ArchiveRecipeStepCompletionConditionWithResponse request returning *ArchiveRecipeStepCompletionConditionResponse
func (c *ClientWithResponses) ArchiveRecipeStepCompletionConditionWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, reqEditors ...RequestEditorFn) (*ArchiveRecipeStepCompletionConditionResponse, error) {
	rsp, err := c.ArchiveRecipeStepCompletionCondition(ctx, recipeID, recipeStepID, recipeStepCompletionConditionID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveRecipeStepCompletionConditionResponse(rsp)
}

// GetRecipeStepCompletionConditionWithResponse request returning *GetRecipeStepCompletionConditionResponse
func (c *ClientWithResponses) GetRecipeStepCompletionConditionWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, reqEditors ...RequestEditorFn) (*GetRecipeStepCompletionConditionResponse, error) {
	rsp, err := c.GetRecipeStepCompletionCondition(ctx, recipeID, recipeStepID, recipeStepCompletionConditionID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipeStepCompletionConditionResponse(rsp)
}

// UpdateRecipeStepCompletionConditionWithBodyWithResponse request with arbitrary body returning *UpdateRecipeStepCompletionConditionResponse
func (c *ClientWithResponses) UpdateRecipeStepCompletionConditionWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRecipeStepCompletionConditionResponse, error) {
	rsp, err := c.UpdateRecipeStepCompletionConditionWithBody(ctx, recipeID, recipeStepID, recipeStepCompletionConditionID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRecipeStepCompletionConditionResponse(rsp)
}

func (c *ClientWithResponses) UpdateRecipeStepCompletionConditionWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, body UpdateRecipeStepCompletionConditionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRecipeStepCompletionConditionResponse, error) {
	rsp, err := c.UpdateRecipeStepCompletionCondition(ctx, recipeID, recipeStepID, recipeStepCompletionConditionID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRecipeStepCompletionConditionResponse(rsp)
}

// POSTRecipesRecipeIDStepsRecipeStepIDImagesWithResponse request returning *POSTRecipesRecipeIDStepsRecipeStepIDImagesResponse
func (c *ClientWithResponses) POSTRecipesRecipeIDStepsRecipeStepIDImagesWithResponse(ctx context.Context, recipeID string, recipeStepID string, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsRecipeStepIDImagesResponse, error) {
	rsp, err := c.POSTRecipesRecipeIDStepsRecipeStepIDImages(ctx, recipeID, recipeStepID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTRecipesRecipeIDStepsRecipeStepIDImagesResponse(rsp)
}

// GetRecipeStepIngredientsWithResponse request returning *GetRecipeStepIngredientsResponse
func (c *ClientWithResponses) GetRecipeStepIngredientsWithResponse(ctx context.Context, recipeID string, recipeStepID string, params *GetRecipeStepIngredientsParams, reqEditors ...RequestEditorFn) (*GetRecipeStepIngredientsResponse, error) {
	rsp, err := c.GetRecipeStepIngredients(ctx, recipeID, recipeStepID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipeStepIngredientsResponse(rsp)
}

// CreateRecipeStepIngredientWithBodyWithResponse request with arbitrary body returning *CreateRecipeStepIngredientResponse
func (c *ClientWithResponses) CreateRecipeStepIngredientWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRecipeStepIngredientResponse, error) {
	rsp, err := c.CreateRecipeStepIngredientWithBody(ctx, recipeID, recipeStepID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRecipeStepIngredientResponse(rsp)
}

func (c *ClientWithResponses) CreateRecipeStepIngredientWithResponse(ctx context.Context, recipeID string, recipeStepID string, body CreateRecipeStepIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRecipeStepIngredientResponse, error) {
	rsp, err := c.CreateRecipeStepIngredient(ctx, recipeID, recipeStepID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRecipeStepIngredientResponse(rsp)
}

// ArchiveRecipeStepIngredientWithResponse request returning *ArchiveRecipeStepIngredientResponse
func (c *ClientWithResponses) ArchiveRecipeStepIngredientWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, reqEditors ...RequestEditorFn) (*ArchiveRecipeStepIngredientResponse, error) {
	rsp, err := c.ArchiveRecipeStepIngredient(ctx, recipeID, recipeStepID, recipeStepIngredientID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveRecipeStepIngredientResponse(rsp)
}

// GetRecipeStepIngredientWithResponse request returning *GetRecipeStepIngredientResponse
func (c *ClientWithResponses) GetRecipeStepIngredientWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, reqEditors ...RequestEditorFn) (*GetRecipeStepIngredientResponse, error) {
	rsp, err := c.GetRecipeStepIngredient(ctx, recipeID, recipeStepID, recipeStepIngredientID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipeStepIngredientResponse(rsp)
}

// UpdateRecipeStepIngredientWithBodyWithResponse request with arbitrary body returning *UpdateRecipeStepIngredientResponse
func (c *ClientWithResponses) UpdateRecipeStepIngredientWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRecipeStepIngredientResponse, error) {
	rsp, err := c.UpdateRecipeStepIngredientWithBody(ctx, recipeID, recipeStepID, recipeStepIngredientID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRecipeStepIngredientResponse(rsp)
}

func (c *ClientWithResponses) UpdateRecipeStepIngredientWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, body UpdateRecipeStepIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRecipeStepIngredientResponse, error) {
	rsp, err := c.UpdateRecipeStepIngredient(ctx, recipeID, recipeStepID, recipeStepIngredientID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRecipeStepIngredientResponse(rsp)
}

// GetRecipeStepInstrumentsWithResponse request returning *GetRecipeStepInstrumentsResponse
func (c *ClientWithResponses) GetRecipeStepInstrumentsWithResponse(ctx context.Context, recipeID string, recipeStepID string, params *GetRecipeStepInstrumentsParams, reqEditors ...RequestEditorFn) (*GetRecipeStepInstrumentsResponse, error) {
	rsp, err := c.GetRecipeStepInstruments(ctx, recipeID, recipeStepID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipeStepInstrumentsResponse(rsp)
}

// CreateRecipeStepInstrumentWithBodyWithResponse request with arbitrary body returning *CreateRecipeStepInstrumentResponse
func (c *ClientWithResponses) CreateRecipeStepInstrumentWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRecipeStepInstrumentResponse, error) {
	rsp, err := c.CreateRecipeStepInstrumentWithBody(ctx, recipeID, recipeStepID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRecipeStepInstrumentResponse(rsp)
}

func (c *ClientWithResponses) CreateRecipeStepInstrumentWithResponse(ctx context.Context, recipeID string, recipeStepID string, body CreateRecipeStepInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRecipeStepInstrumentResponse, error) {
	rsp, err := c.CreateRecipeStepInstrument(ctx, recipeID, recipeStepID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRecipeStepInstrumentResponse(rsp)
}

// ArchiveRecipeStepInstrumentWithResponse request returning *ArchiveRecipeStepInstrumentResponse
func (c *ClientWithResponses) ArchiveRecipeStepInstrumentWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, reqEditors ...RequestEditorFn) (*ArchiveRecipeStepInstrumentResponse, error) {
	rsp, err := c.ArchiveRecipeStepInstrument(ctx, recipeID, recipeStepID, recipeStepInstrumentID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveRecipeStepInstrumentResponse(rsp)
}

// GetRecipeStepInstrumentWithResponse request returning *GetRecipeStepInstrumentResponse
func (c *ClientWithResponses) GetRecipeStepInstrumentWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, reqEditors ...RequestEditorFn) (*GetRecipeStepInstrumentResponse, error) {
	rsp, err := c.GetRecipeStepInstrument(ctx, recipeID, recipeStepID, recipeStepInstrumentID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipeStepInstrumentResponse(rsp)
}

// UpdateRecipeStepInstrumentWithBodyWithResponse request with arbitrary body returning *UpdateRecipeStepInstrumentResponse
func (c *ClientWithResponses) UpdateRecipeStepInstrumentWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRecipeStepInstrumentResponse, error) {
	rsp, err := c.UpdateRecipeStepInstrumentWithBody(ctx, recipeID, recipeStepID, recipeStepInstrumentID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRecipeStepInstrumentResponse(rsp)
}

func (c *ClientWithResponses) UpdateRecipeStepInstrumentWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, body UpdateRecipeStepInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRecipeStepInstrumentResponse, error) {
	rsp, err := c.UpdateRecipeStepInstrument(ctx, recipeID, recipeStepID, recipeStepInstrumentID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRecipeStepInstrumentResponse(rsp)
}

// GetRecipeStepProductsWithResponse request returning *GetRecipeStepProductsResponse
func (c *ClientWithResponses) GetRecipeStepProductsWithResponse(ctx context.Context, recipeID string, recipeStepID string, params *GetRecipeStepProductsParams, reqEditors ...RequestEditorFn) (*GetRecipeStepProductsResponse, error) {
	rsp, err := c.GetRecipeStepProducts(ctx, recipeID, recipeStepID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipeStepProductsResponse(rsp)
}

// CreateRecipeStepProductWithBodyWithResponse request with arbitrary body returning *CreateRecipeStepProductResponse
func (c *ClientWithResponses) CreateRecipeStepProductWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRecipeStepProductResponse, error) {
	rsp, err := c.CreateRecipeStepProductWithBody(ctx, recipeID, recipeStepID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRecipeStepProductResponse(rsp)
}

func (c *ClientWithResponses) CreateRecipeStepProductWithResponse(ctx context.Context, recipeID string, recipeStepID string, body CreateRecipeStepProductJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRecipeStepProductResponse, error) {
	rsp, err := c.CreateRecipeStepProduct(ctx, recipeID, recipeStepID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRecipeStepProductResponse(rsp)
}

// ArchiveRecipeStepProductWithResponse request returning *ArchiveRecipeStepProductResponse
func (c *ClientWithResponses) ArchiveRecipeStepProductWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, reqEditors ...RequestEditorFn) (*ArchiveRecipeStepProductResponse, error) {
	rsp, err := c.ArchiveRecipeStepProduct(ctx, recipeID, recipeStepID, recipeStepProductID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveRecipeStepProductResponse(rsp)
}

// GetRecipeStepProductWithResponse request returning *GetRecipeStepProductResponse
func (c *ClientWithResponses) GetRecipeStepProductWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, reqEditors ...RequestEditorFn) (*GetRecipeStepProductResponse, error) {
	rsp, err := c.GetRecipeStepProduct(ctx, recipeID, recipeStepID, recipeStepProductID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipeStepProductResponse(rsp)
}

// UpdateRecipeStepProductWithBodyWithResponse request with arbitrary body returning *UpdateRecipeStepProductResponse
func (c *ClientWithResponses) UpdateRecipeStepProductWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRecipeStepProductResponse, error) {
	rsp, err := c.UpdateRecipeStepProductWithBody(ctx, recipeID, recipeStepID, recipeStepProductID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRecipeStepProductResponse(rsp)
}

func (c *ClientWithResponses) UpdateRecipeStepProductWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, body UpdateRecipeStepProductJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRecipeStepProductResponse, error) {
	rsp, err := c.UpdateRecipeStepProduct(ctx, recipeID, recipeStepID, recipeStepProductID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRecipeStepProductResponse(rsp)
}

// GetRecipeStepVesselsWithResponse request returning *GetRecipeStepVesselsResponse
func (c *ClientWithResponses) GetRecipeStepVesselsWithResponse(ctx context.Context, recipeID string, recipeStepID string, params *GetRecipeStepVesselsParams, reqEditors ...RequestEditorFn) (*GetRecipeStepVesselsResponse, error) {
	rsp, err := c.GetRecipeStepVessels(ctx, recipeID, recipeStepID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipeStepVesselsResponse(rsp)
}

// CreateRecipeStepVesselWithBodyWithResponse request with arbitrary body returning *CreateRecipeStepVesselResponse
func (c *ClientWithResponses) CreateRecipeStepVesselWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateRecipeStepVesselResponse, error) {
	rsp, err := c.CreateRecipeStepVesselWithBody(ctx, recipeID, recipeStepID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRecipeStepVesselResponse(rsp)
}

func (c *ClientWithResponses) CreateRecipeStepVesselWithResponse(ctx context.Context, recipeID string, recipeStepID string, body CreateRecipeStepVesselJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateRecipeStepVesselResponse, error) {
	rsp, err := c.CreateRecipeStepVessel(ctx, recipeID, recipeStepID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateRecipeStepVesselResponse(rsp)
}

// ArchiveRecipeStepVesselWithResponse request returning *ArchiveRecipeStepVesselResponse
func (c *ClientWithResponses) ArchiveRecipeStepVesselWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, reqEditors ...RequestEditorFn) (*ArchiveRecipeStepVesselResponse, error) {
	rsp, err := c.ArchiveRecipeStepVessel(ctx, recipeID, recipeStepID, recipeStepVesselID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveRecipeStepVesselResponse(rsp)
}

// GetRecipeStepVesselWithResponse request returning *GetRecipeStepVesselResponse
func (c *ClientWithResponses) GetRecipeStepVesselWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, reqEditors ...RequestEditorFn) (*GetRecipeStepVesselResponse, error) {
	rsp, err := c.GetRecipeStepVessel(ctx, recipeID, recipeStepID, recipeStepVesselID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecipeStepVesselResponse(rsp)
}

// UpdateRecipeStepVesselWithBodyWithResponse request with arbitrary body returning *UpdateRecipeStepVesselResponse
func (c *ClientWithResponses) UpdateRecipeStepVesselWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateRecipeStepVesselResponse, error) {
	rsp, err := c.UpdateRecipeStepVesselWithBody(ctx, recipeID, recipeStepID, recipeStepVesselID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRecipeStepVesselResponse(rsp)
}

func (c *ClientWithResponses) UpdateRecipeStepVesselWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, body UpdateRecipeStepVesselJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateRecipeStepVesselResponse, error) {
	rsp, err := c.UpdateRecipeStepVessel(ctx, recipeID, recipeStepID, recipeStepVesselID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateRecipeStepVesselResponse(rsp)
}

// GetServiceSettingsWithResponse request returning *GetServiceSettingsResponse
func (c *ClientWithResponses) GetServiceSettingsWithResponse(ctx context.Context, params *GetServiceSettingsParams, reqEditors ...RequestEditorFn) (*GetServiceSettingsResponse, error) {
	rsp, err := c.GetServiceSettings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceSettingsResponse(rsp)
}

// CreateServiceSettingWithBodyWithResponse request with arbitrary body returning *CreateServiceSettingResponse
func (c *ClientWithResponses) CreateServiceSettingWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceSettingResponse, error) {
	rsp, err := c.CreateServiceSettingWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceSettingResponse(rsp)
}

func (c *ClientWithResponses) CreateServiceSettingWithResponse(ctx context.Context, body CreateServiceSettingJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServiceSettingResponse, error) {
	rsp, err := c.CreateServiceSetting(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceSettingResponse(rsp)
}

// CreateServiceSettingConfigurationWithBodyWithResponse request with arbitrary body returning *CreateServiceSettingConfigurationResponse
func (c *ClientWithResponses) CreateServiceSettingConfigurationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateServiceSettingConfigurationResponse, error) {
	rsp, err := c.CreateServiceSettingConfigurationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceSettingConfigurationResponse(rsp)
}

func (c *ClientWithResponses) CreateServiceSettingConfigurationWithResponse(ctx context.Context, body CreateServiceSettingConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateServiceSettingConfigurationResponse, error) {
	rsp, err := c.CreateServiceSettingConfiguration(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateServiceSettingConfigurationResponse(rsp)
}

// GetServiceSettingConfigurationsForHouseholdWithResponse request returning *GetServiceSettingConfigurationsForHouseholdResponse
func (c *ClientWithResponses) GetServiceSettingConfigurationsForHouseholdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceSettingConfigurationsForHouseholdResponse, error) {
	rsp, err := c.GetServiceSettingConfigurationsForHousehold(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceSettingConfigurationsForHouseholdResponse(rsp)
}

// GetServiceSettingConfigurationsForUserWithResponse request returning *GetServiceSettingConfigurationsForUserResponse
func (c *ClientWithResponses) GetServiceSettingConfigurationsForUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetServiceSettingConfigurationsForUserResponse, error) {
	rsp, err := c.GetServiceSettingConfigurationsForUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceSettingConfigurationsForUserResponse(rsp)
}

// GetServiceSettingConfigurationWithResponse request returning *GetServiceSettingConfigurationResponse
func (c *ClientWithResponses) GetServiceSettingConfigurationWithResponse(ctx context.Context, serviceSettingConfigurationName string, reqEditors ...RequestEditorFn) (*GetServiceSettingConfigurationResponse, error) {
	rsp, err := c.GetServiceSettingConfiguration(ctx, serviceSettingConfigurationName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceSettingConfigurationResponse(rsp)
}

// ArchiveServiceSettingConfigurationWithResponse request returning *ArchiveServiceSettingConfigurationResponse
func (c *ClientWithResponses) ArchiveServiceSettingConfigurationWithResponse(ctx context.Context, serviceSettingConfigurationID string, reqEditors ...RequestEditorFn) (*ArchiveServiceSettingConfigurationResponse, error) {
	rsp, err := c.ArchiveServiceSettingConfiguration(ctx, serviceSettingConfigurationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveServiceSettingConfigurationResponse(rsp)
}

// UpdateServiceSettingConfigurationWithBodyWithResponse request with arbitrary body returning *UpdateServiceSettingConfigurationResponse
func (c *ClientWithResponses) UpdateServiceSettingConfigurationWithBodyWithResponse(ctx context.Context, serviceSettingConfigurationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateServiceSettingConfigurationResponse, error) {
	rsp, err := c.UpdateServiceSettingConfigurationWithBody(ctx, serviceSettingConfigurationID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServiceSettingConfigurationResponse(rsp)
}

func (c *ClientWithResponses) UpdateServiceSettingConfigurationWithResponse(ctx context.Context, serviceSettingConfigurationID string, body UpdateServiceSettingConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateServiceSettingConfigurationResponse, error) {
	rsp, err := c.UpdateServiceSettingConfiguration(ctx, serviceSettingConfigurationID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateServiceSettingConfigurationResponse(rsp)
}

// SearchForServiceSettingsWithResponse request returning *SearchForServiceSettingsResponse
func (c *ClientWithResponses) SearchForServiceSettingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SearchForServiceSettingsResponse, error) {
	rsp, err := c.SearchForServiceSettings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchForServiceSettingsResponse(rsp)
}

// ArchiveServiceSettingWithResponse request returning *ArchiveServiceSettingResponse
func (c *ClientWithResponses) ArchiveServiceSettingWithResponse(ctx context.Context, serviceSettingID string, reqEditors ...RequestEditorFn) (*ArchiveServiceSettingResponse, error) {
	rsp, err := c.ArchiveServiceSetting(ctx, serviceSettingID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveServiceSettingResponse(rsp)
}

// GetServiceSettingWithResponse request returning *GetServiceSettingResponse
func (c *ClientWithResponses) GetServiceSettingWithResponse(ctx context.Context, serviceSettingID string, reqEditors ...RequestEditorFn) (*GetServiceSettingResponse, error) {
	rsp, err := c.GetServiceSetting(ctx, serviceSettingID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServiceSettingResponse(rsp)
}

// GetUserIngredientPreferencesWithResponse request returning *GetUserIngredientPreferencesResponse
func (c *ClientWithResponses) GetUserIngredientPreferencesWithResponse(ctx context.Context, params *GetUserIngredientPreferencesParams, reqEditors ...RequestEditorFn) (*GetUserIngredientPreferencesResponse, error) {
	rsp, err := c.GetUserIngredientPreferences(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserIngredientPreferencesResponse(rsp)
}

// CreateUserIngredientPreferenceWithBodyWithResponse request with arbitrary body returning *CreateUserIngredientPreferenceResponse
func (c *ClientWithResponses) CreateUserIngredientPreferenceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserIngredientPreferenceResponse, error) {
	rsp, err := c.CreateUserIngredientPreferenceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserIngredientPreferenceResponse(rsp)
}

func (c *ClientWithResponses) CreateUserIngredientPreferenceWithResponse(ctx context.Context, body CreateUserIngredientPreferenceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserIngredientPreferenceResponse, error) {
	rsp, err := c.CreateUserIngredientPreference(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserIngredientPreferenceResponse(rsp)
}

// ArchiveUserIngredientPreferenceWithResponse request returning *ArchiveUserIngredientPreferenceResponse
func (c *ClientWithResponses) ArchiveUserIngredientPreferenceWithResponse(ctx context.Context, userIngredientPreferenceID string, reqEditors ...RequestEditorFn) (*ArchiveUserIngredientPreferenceResponse, error) {
	rsp, err := c.ArchiveUserIngredientPreference(ctx, userIngredientPreferenceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveUserIngredientPreferenceResponse(rsp)
}

// UpdateUserIngredientPreferenceWithBodyWithResponse request with arbitrary body returning *UpdateUserIngredientPreferenceResponse
func (c *ClientWithResponses) UpdateUserIngredientPreferenceWithBodyWithResponse(ctx context.Context, userIngredientPreferenceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserIngredientPreferenceResponse, error) {
	rsp, err := c.UpdateUserIngredientPreferenceWithBody(ctx, userIngredientPreferenceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserIngredientPreferenceResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserIngredientPreferenceWithResponse(ctx context.Context, userIngredientPreferenceID string, body UpdateUserIngredientPreferenceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserIngredientPreferenceResponse, error) {
	rsp, err := c.UpdateUserIngredientPreference(ctx, userIngredientPreferenceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserIngredientPreferenceResponse(rsp)
}

// GetUserNotificationsWithResponse request returning *GetUserNotificationsResponse
func (c *ClientWithResponses) GetUserNotificationsWithResponse(ctx context.Context, params *GetUserNotificationsParams, reqEditors ...RequestEditorFn) (*GetUserNotificationsResponse, error) {
	rsp, err := c.GetUserNotifications(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserNotificationsResponse(rsp)
}

// CreateUserNotificationWithBodyWithResponse request with arbitrary body returning *CreateUserNotificationResponse
func (c *ClientWithResponses) CreateUserNotificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserNotificationResponse, error) {
	rsp, err := c.CreateUserNotificationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserNotificationResponse(rsp)
}

func (c *ClientWithResponses) CreateUserNotificationWithResponse(ctx context.Context, body CreateUserNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserNotificationResponse, error) {
	rsp, err := c.CreateUserNotification(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserNotificationResponse(rsp)
}

// GetUserNotificationWithResponse request returning *GetUserNotificationResponse
func (c *ClientWithResponses) GetUserNotificationWithResponse(ctx context.Context, userNotificationID string, reqEditors ...RequestEditorFn) (*GetUserNotificationResponse, error) {
	rsp, err := c.GetUserNotification(ctx, userNotificationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserNotificationResponse(rsp)
}

// UpdateUserNotificationWithBodyWithResponse request with arbitrary body returning *UpdateUserNotificationResponse
func (c *ClientWithResponses) UpdateUserNotificationWithBodyWithResponse(ctx context.Context, userNotificationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserNotificationResponse, error) {
	rsp, err := c.UpdateUserNotificationWithBody(ctx, userNotificationID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserNotificationResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserNotificationWithResponse(ctx context.Context, userNotificationID string, body UpdateUserNotificationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserNotificationResponse, error) {
	rsp, err := c.UpdateUserNotification(ctx, userNotificationID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserNotificationResponse(rsp)
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// UploadUserAvatarWithBodyWithResponse request with arbitrary body returning *UploadUserAvatarResponse
func (c *ClientWithResponses) UploadUserAvatarWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadUserAvatarResponse, error) {
	rsp, err := c.UploadUserAvatarWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadUserAvatarResponse(rsp)
}

func (c *ClientWithResponses) UploadUserAvatarWithResponse(ctx context.Context, body UploadUserAvatarJSONRequestBody, reqEditors ...RequestEditorFn) (*UploadUserAvatarResponse, error) {
	rsp, err := c.UploadUserAvatar(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadUserAvatarResponse(rsp)
}

// UpdateUserDetailsWithBodyWithResponse request with arbitrary body returning *UpdateUserDetailsResponse
func (c *ClientWithResponses) UpdateUserDetailsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserDetailsResponse, error) {
	rsp, err := c.UpdateUserDetailsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserDetailsResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserDetailsWithResponse(ctx context.Context, body UpdateUserDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserDetailsResponse, error) {
	rsp, err := c.UpdateUserDetails(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserDetailsResponse(rsp)
}

// UpdateUserEmailAddressWithBodyWithResponse request with arbitrary body returning *UpdateUserEmailAddressResponse
func (c *ClientWithResponses) UpdateUserEmailAddressWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserEmailAddressResponse, error) {
	rsp, err := c.UpdateUserEmailAddressWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserEmailAddressResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserEmailAddressWithResponse(ctx context.Context, body UpdateUserEmailAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserEmailAddressResponse, error) {
	rsp, err := c.UpdateUserEmailAddress(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserEmailAddressResponse(rsp)
}

// VerifyUserEmailAddressWithBodyWithResponse request with arbitrary body returning *VerifyUserEmailAddressResponse
func (c *ClientWithResponses) VerifyUserEmailAddressWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyUserEmailAddressResponse, error) {
	rsp, err := c.VerifyUserEmailAddressWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyUserEmailAddressResponse(rsp)
}

func (c *ClientWithResponses) VerifyUserEmailAddressWithResponse(ctx context.Context, body VerifyUserEmailAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyUserEmailAddressResponse, error) {
	rsp, err := c.VerifyUserEmailAddress(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyUserEmailAddressResponse(rsp)
}

// UpdateDefaultHouseholdWithBodyWithResponse request with arbitrary body returning *UpdateDefaultHouseholdResponse
func (c *ClientWithResponses) UpdateDefaultHouseholdWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDefaultHouseholdResponse, error) {
	rsp, err := c.UpdateDefaultHouseholdWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDefaultHouseholdResponse(rsp)
}

func (c *ClientWithResponses) UpdateDefaultHouseholdWithResponse(ctx context.Context, body UpdateDefaultHouseholdJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDefaultHouseholdResponse, error) {
	rsp, err := c.UpdateDefaultHousehold(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDefaultHouseholdResponse(rsp)
}

// UpdatePasswordWithBodyWithResponse request with arbitrary body returning *UpdatePasswordResponse
func (c *ClientWithResponses) UpdatePasswordWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePasswordResponse, error) {
	rsp, err := c.UpdatePasswordWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePasswordResponse(rsp)
}

func (c *ClientWithResponses) UpdatePasswordWithResponse(ctx context.Context, body UpdatePasswordJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePasswordResponse, error) {
	rsp, err := c.UpdatePassword(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePasswordResponse(rsp)
}

// CheckPermissionsWithBodyWithResponse request with arbitrary body returning *CheckPermissionsResponse
func (c *ClientWithResponses) CheckPermissionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckPermissionsResponse, error) {
	rsp, err := c.CheckPermissionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckPermissionsResponse(rsp)
}

func (c *ClientWithResponses) CheckPermissionsWithResponse(ctx context.Context, body CheckPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckPermissionsResponse, error) {
	rsp, err := c.CheckPermissions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckPermissionsResponse(rsp)
}

// SearchForUsersWithResponse request returning *SearchForUsersResponse
func (c *ClientWithResponses) SearchForUsersWithResponse(ctx context.Context, params *SearchForUsersParams, reqEditors ...RequestEditorFn) (*SearchForUsersResponse, error) {
	rsp, err := c.SearchForUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchForUsersResponse(rsp)
}

// GetSelfWithResponse request returning *GetSelfResponse
func (c *ClientWithResponses) GetSelfWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSelfResponse, error) {
	rsp, err := c.GetSelf(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSelfResponse(rsp)
}

// RefreshTOTPSecretWithBodyWithResponse request with arbitrary body returning *RefreshTOTPSecretResponse
func (c *ClientWithResponses) RefreshTOTPSecretWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RefreshTOTPSecretResponse, error) {
	rsp, err := c.RefreshTOTPSecretWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefreshTOTPSecretResponse(rsp)
}

func (c *ClientWithResponses) RefreshTOTPSecretWithResponse(ctx context.Context, body RefreshTOTPSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*RefreshTOTPSecretResponse, error) {
	rsp, err := c.RefreshTOTPSecret(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefreshTOTPSecretResponse(rsp)
}

// UpdateUserUsernameWithBodyWithResponse request with arbitrary body returning *UpdateUserUsernameResponse
func (c *ClientWithResponses) UpdateUserUsernameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserUsernameResponse, error) {
	rsp, err := c.UpdateUserUsernameWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserUsernameResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserUsernameWithResponse(ctx context.Context, body UpdateUserUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserUsernameResponse, error) {
	rsp, err := c.UpdateUserUsername(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserUsernameResponse(rsp)
}

// ArchiveUserWithResponse request returning *ArchiveUserResponse
func (c *ClientWithResponses) ArchiveUserWithResponse(ctx context.Context, userID string, reqEditors ...RequestEditorFn) (*ArchiveUserResponse, error) {
	rsp, err := c.ArchiveUser(ctx, userID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveUserResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, userID string, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, userID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// GetValidIngredientGroupsWithResponse request returning *GetValidIngredientGroupsResponse
func (c *ClientWithResponses) GetValidIngredientGroupsWithResponse(ctx context.Context, params *GetValidIngredientGroupsParams, reqEditors ...RequestEditorFn) (*GetValidIngredientGroupsResponse, error) {
	rsp, err := c.GetValidIngredientGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidIngredientGroupsResponse(rsp)
}

// CreateValidIngredientGroupWithBodyWithResponse request with arbitrary body returning *CreateValidIngredientGroupResponse
func (c *ClientWithResponses) CreateValidIngredientGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidIngredientGroupResponse, error) {
	rsp, err := c.CreateValidIngredientGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidIngredientGroupResponse(rsp)
}

func (c *ClientWithResponses) CreateValidIngredientGroupWithResponse(ctx context.Context, body CreateValidIngredientGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateValidIngredientGroupResponse, error) {
	rsp, err := c.CreateValidIngredientGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidIngredientGroupResponse(rsp)
}

// SearchForValidIngredientGroupsWithResponse request returning *SearchForValidIngredientGroupsResponse
func (c *ClientWithResponses) SearchForValidIngredientGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SearchForValidIngredientGroupsResponse, error) {
	rsp, err := c.SearchForValidIngredientGroups(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchForValidIngredientGroupsResponse(rsp)
}

// ArchiveValidIngredientGroupWithResponse request returning *ArchiveValidIngredientGroupResponse
func (c *ClientWithResponses) ArchiveValidIngredientGroupWithResponse(ctx context.Context, validIngredientGroupID string, reqEditors ...RequestEditorFn) (*ArchiveValidIngredientGroupResponse, error) {
	rsp, err := c.ArchiveValidIngredientGroup(ctx, validIngredientGroupID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveValidIngredientGroupResponse(rsp)
}

// GetValidIngredientGroupWithResponse request returning *GetValidIngredientGroupResponse
func (c *ClientWithResponses) GetValidIngredientGroupWithResponse(ctx context.Context, validIngredientGroupID string, reqEditors ...RequestEditorFn) (*GetValidIngredientGroupResponse, error) {
	rsp, err := c.GetValidIngredientGroup(ctx, validIngredientGroupID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidIngredientGroupResponse(rsp)
}

// UpdateValidIngredientGroupWithBodyWithResponse request with arbitrary body returning *UpdateValidIngredientGroupResponse
func (c *ClientWithResponses) UpdateValidIngredientGroupWithBodyWithResponse(ctx context.Context, validIngredientGroupID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateValidIngredientGroupResponse, error) {
	rsp, err := c.UpdateValidIngredientGroupWithBody(ctx, validIngredientGroupID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateValidIngredientGroupResponse(rsp)
}

func (c *ClientWithResponses) UpdateValidIngredientGroupWithResponse(ctx context.Context, validIngredientGroupID string, body UpdateValidIngredientGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateValidIngredientGroupResponse, error) {
	rsp, err := c.UpdateValidIngredientGroup(ctx, validIngredientGroupID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateValidIngredientGroupResponse(rsp)
}

// GetValidIngredientMeasurementUnitsWithResponse request returning *GetValidIngredientMeasurementUnitsResponse
func (c *ClientWithResponses) GetValidIngredientMeasurementUnitsWithResponse(ctx context.Context, params *GetValidIngredientMeasurementUnitsParams, reqEditors ...RequestEditorFn) (*GetValidIngredientMeasurementUnitsResponse, error) {
	rsp, err := c.GetValidIngredientMeasurementUnits(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidIngredientMeasurementUnitsResponse(rsp)
}

// CreateValidIngredientMeasurementUnitWithBodyWithResponse request with arbitrary body returning *CreateValidIngredientMeasurementUnitResponse
func (c *ClientWithResponses) CreateValidIngredientMeasurementUnitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidIngredientMeasurementUnitResponse, error) {
	rsp, err := c.CreateValidIngredientMeasurementUnitWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidIngredientMeasurementUnitResponse(rsp)
}

func (c *ClientWithResponses) CreateValidIngredientMeasurementUnitWithResponse(ctx context.Context, body CreateValidIngredientMeasurementUnitJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateValidIngredientMeasurementUnitResponse, error) {
	rsp, err := c.CreateValidIngredientMeasurementUnit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidIngredientMeasurementUnitResponse(rsp)
}

// GetValidIngredientMeasurementUnitsByIngredientWithResponse request returning *GetValidIngredientMeasurementUnitsByIngredientResponse
func (c *ClientWithResponses) GetValidIngredientMeasurementUnitsByIngredientWithResponse(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*GetValidIngredientMeasurementUnitsByIngredientResponse, error) {
	rsp, err := c.GetValidIngredientMeasurementUnitsByIngredient(ctx, validIngredientID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidIngredientMeasurementUnitsByIngredientResponse(rsp)
}

// GetValidIngredientMeasurementUnitsByMeasurementUnitWithResponse request returning *GetValidIngredientMeasurementUnitsByMeasurementUnitResponse
func (c *ClientWithResponses) GetValidIngredientMeasurementUnitsByMeasurementUnitWithResponse(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*GetValidIngredientMeasurementUnitsByMeasurementUnitResponse, error) {
	rsp, err := c.GetValidIngredientMeasurementUnitsByMeasurementUnit(ctx, validMeasurementUnitID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidIngredientMeasurementUnitsByMeasurementUnitResponse(rsp)
}

// ArchiveValidIngredientMeasurementUnitWithResponse request returning *ArchiveValidIngredientMeasurementUnitResponse
func (c *ClientWithResponses) ArchiveValidIngredientMeasurementUnitWithResponse(ctx context.Context, validIngredientMeasurementUnitID string, reqEditors ...RequestEditorFn) (*ArchiveValidIngredientMeasurementUnitResponse, error) {
	rsp, err := c.ArchiveValidIngredientMeasurementUnit(ctx, validIngredientMeasurementUnitID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveValidIngredientMeasurementUnitResponse(rsp)
}

// GetValidIngredientMeasurementUnitWithResponse request returning *GetValidIngredientMeasurementUnitResponse
func (c *ClientWithResponses) GetValidIngredientMeasurementUnitWithResponse(ctx context.Context, validIngredientMeasurementUnitID string, reqEditors ...RequestEditorFn) (*GetValidIngredientMeasurementUnitResponse, error) {
	rsp, err := c.GetValidIngredientMeasurementUnit(ctx, validIngredientMeasurementUnitID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidIngredientMeasurementUnitResponse(rsp)
}

// UpdateValidIngredientMeasurementUnitWithBodyWithResponse request with arbitrary body returning *UpdateValidIngredientMeasurementUnitResponse
func (c *ClientWithResponses) UpdateValidIngredientMeasurementUnitWithBodyWithResponse(ctx context.Context, validIngredientMeasurementUnitID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateValidIngredientMeasurementUnitResponse, error) {
	rsp, err := c.UpdateValidIngredientMeasurementUnitWithBody(ctx, validIngredientMeasurementUnitID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateValidIngredientMeasurementUnitResponse(rsp)
}

func (c *ClientWithResponses) UpdateValidIngredientMeasurementUnitWithResponse(ctx context.Context, validIngredientMeasurementUnitID string, body UpdateValidIngredientMeasurementUnitJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateValidIngredientMeasurementUnitResponse, error) {
	rsp, err := c.UpdateValidIngredientMeasurementUnit(ctx, validIngredientMeasurementUnitID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateValidIngredientMeasurementUnitResponse(rsp)
}

// GetValidIngredientPreparationsWithResponse request returning *GetValidIngredientPreparationsResponse
func (c *ClientWithResponses) GetValidIngredientPreparationsWithResponse(ctx context.Context, params *GetValidIngredientPreparationsParams, reqEditors ...RequestEditorFn) (*GetValidIngredientPreparationsResponse, error) {
	rsp, err := c.GetValidIngredientPreparations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidIngredientPreparationsResponse(rsp)
}

// CreateValidIngredientPreparationWithBodyWithResponse request with arbitrary body returning *CreateValidIngredientPreparationResponse
func (c *ClientWithResponses) CreateValidIngredientPreparationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidIngredientPreparationResponse, error) {
	rsp, err := c.CreateValidIngredientPreparationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidIngredientPreparationResponse(rsp)
}

func (c *ClientWithResponses) CreateValidIngredientPreparationWithResponse(ctx context.Context, body CreateValidIngredientPreparationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateValidIngredientPreparationResponse, error) {
	rsp, err := c.CreateValidIngredientPreparation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidIngredientPreparationResponse(rsp)
}

// GetValidIngredientPreparationsByIngredientWithResponse request returning *GetValidIngredientPreparationsByIngredientResponse
func (c *ClientWithResponses) GetValidIngredientPreparationsByIngredientWithResponse(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*GetValidIngredientPreparationsByIngredientResponse, error) {
	rsp, err := c.GetValidIngredientPreparationsByIngredient(ctx, validIngredientID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidIngredientPreparationsByIngredientResponse(rsp)
}

// GetValidIngredientPreparationsByPreparationWithResponse request returning *GetValidIngredientPreparationsByPreparationResponse
func (c *ClientWithResponses) GetValidIngredientPreparationsByPreparationWithResponse(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*GetValidIngredientPreparationsByPreparationResponse, error) {
	rsp, err := c.GetValidIngredientPreparationsByPreparation(ctx, validPreparationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidIngredientPreparationsByPreparationResponse(rsp)
}

// ArchiveValidIngredientPreparationWithResponse request returning *ArchiveValidIngredientPreparationResponse
func (c *ClientWithResponses) ArchiveValidIngredientPreparationWithResponse(ctx context.Context, validIngredientPreparationID string, reqEditors ...RequestEditorFn) (*ArchiveValidIngredientPreparationResponse, error) {
	rsp, err := c.ArchiveValidIngredientPreparation(ctx, validIngredientPreparationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveValidIngredientPreparationResponse(rsp)
}

// GetValidIngredientPreparationWithResponse request returning *GetValidIngredientPreparationResponse
func (c *ClientWithResponses) GetValidIngredientPreparationWithResponse(ctx context.Context, validIngredientPreparationID string, reqEditors ...RequestEditorFn) (*GetValidIngredientPreparationResponse, error) {
	rsp, err := c.GetValidIngredientPreparation(ctx, validIngredientPreparationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidIngredientPreparationResponse(rsp)
}

// UpdateValidIngredientPreparationWithBodyWithResponse request with arbitrary body returning *UpdateValidIngredientPreparationResponse
func (c *ClientWithResponses) UpdateValidIngredientPreparationWithBodyWithResponse(ctx context.Context, validIngredientPreparationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateValidIngredientPreparationResponse, error) {
	rsp, err := c.UpdateValidIngredientPreparationWithBody(ctx, validIngredientPreparationID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateValidIngredientPreparationResponse(rsp)
}

func (c *ClientWithResponses) UpdateValidIngredientPreparationWithResponse(ctx context.Context, validIngredientPreparationID string, body UpdateValidIngredientPreparationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateValidIngredientPreparationResponse, error) {
	rsp, err := c.UpdateValidIngredientPreparation(ctx, validIngredientPreparationID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateValidIngredientPreparationResponse(rsp)
}

// GetValidIngredientStateIngredientsWithResponse request returning *GetValidIngredientStateIngredientsResponse
func (c *ClientWithResponses) GetValidIngredientStateIngredientsWithResponse(ctx context.Context, params *GetValidIngredientStateIngredientsParams, reqEditors ...RequestEditorFn) (*GetValidIngredientStateIngredientsResponse, error) {
	rsp, err := c.GetValidIngredientStateIngredients(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidIngredientStateIngredientsResponse(rsp)
}

// CreateValidIngredientStateIngredientWithBodyWithResponse request with arbitrary body returning *CreateValidIngredientStateIngredientResponse
func (c *ClientWithResponses) CreateValidIngredientStateIngredientWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidIngredientStateIngredientResponse, error) {
	rsp, err := c.CreateValidIngredientStateIngredientWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidIngredientStateIngredientResponse(rsp)
}

func (c *ClientWithResponses) CreateValidIngredientStateIngredientWithResponse(ctx context.Context, body CreateValidIngredientStateIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateValidIngredientStateIngredientResponse, error) {
	rsp, err := c.CreateValidIngredientStateIngredient(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidIngredientStateIngredientResponse(rsp)
}

// GetValidIngredientStateIngredientsByIngredientWithResponse request returning *GetValidIngredientStateIngredientsByIngredientResponse
func (c *ClientWithResponses) GetValidIngredientStateIngredientsByIngredientWithResponse(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*GetValidIngredientStateIngredientsByIngredientResponse, error) {
	rsp, err := c.GetValidIngredientStateIngredientsByIngredient(ctx, validIngredientID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidIngredientStateIngredientsByIngredientResponse(rsp)
}

// GetValidIngredientStateIngredientsByIngredientStateWithResponse request returning *GetValidIngredientStateIngredientsByIngredientStateResponse
func (c *ClientWithResponses) GetValidIngredientStateIngredientsByIngredientStateWithResponse(ctx context.Context, validIngredientStateID string, reqEditors ...RequestEditorFn) (*GetValidIngredientStateIngredientsByIngredientStateResponse, error) {
	rsp, err := c.GetValidIngredientStateIngredientsByIngredientState(ctx, validIngredientStateID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidIngredientStateIngredientsByIngredientStateResponse(rsp)
}

// ArchiveValidIngredientStateIngredientWithResponse request returning *ArchiveValidIngredientStateIngredientResponse
func (c *ClientWithResponses) ArchiveValidIngredientStateIngredientWithResponse(ctx context.Context, validIngredientStateIngredientID string, reqEditors ...RequestEditorFn) (*ArchiveValidIngredientStateIngredientResponse, error) {
	rsp, err := c.ArchiveValidIngredientStateIngredient(ctx, validIngredientStateIngredientID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveValidIngredientStateIngredientResponse(rsp)
}

// GetValidIngredientStateIngredientWithResponse request returning *GetValidIngredientStateIngredientResponse
func (c *ClientWithResponses) GetValidIngredientStateIngredientWithResponse(ctx context.Context, validIngredientStateIngredientID string, reqEditors ...RequestEditorFn) (*GetValidIngredientStateIngredientResponse, error) {
	rsp, err := c.GetValidIngredientStateIngredient(ctx, validIngredientStateIngredientID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidIngredientStateIngredientResponse(rsp)
}

// UpdateValidIngredientStateIngredientWithBodyWithResponse request with arbitrary body returning *UpdateValidIngredientStateIngredientResponse
func (c *ClientWithResponses) UpdateValidIngredientStateIngredientWithBodyWithResponse(ctx context.Context, validIngredientStateIngredientID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateValidIngredientStateIngredientResponse, error) {
	rsp, err := c.UpdateValidIngredientStateIngredientWithBody(ctx, validIngredientStateIngredientID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateValidIngredientStateIngredientResponse(rsp)
}

func (c *ClientWithResponses) UpdateValidIngredientStateIngredientWithResponse(ctx context.Context, validIngredientStateIngredientID string, body UpdateValidIngredientStateIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateValidIngredientStateIngredientResponse, error) {
	rsp, err := c.UpdateValidIngredientStateIngredient(ctx, validIngredientStateIngredientID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateValidIngredientStateIngredientResponse(rsp)
}

// GetValidIngredientStatesWithResponse request returning *GetValidIngredientStatesResponse
func (c *ClientWithResponses) GetValidIngredientStatesWithResponse(ctx context.Context, params *GetValidIngredientStatesParams, reqEditors ...RequestEditorFn) (*GetValidIngredientStatesResponse, error) {
	rsp, err := c.GetValidIngredientStates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidIngredientStatesResponse(rsp)
}

// CreateValidIngredientStateWithBodyWithResponse request with arbitrary body returning *CreateValidIngredientStateResponse
func (c *ClientWithResponses) CreateValidIngredientStateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidIngredientStateResponse, error) {
	rsp, err := c.CreateValidIngredientStateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidIngredientStateResponse(rsp)
}

func (c *ClientWithResponses) CreateValidIngredientStateWithResponse(ctx context.Context, body CreateValidIngredientStateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateValidIngredientStateResponse, error) {
	rsp, err := c.CreateValidIngredientState(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidIngredientStateResponse(rsp)
}

// SearchForValidIngredientStatesWithResponse request returning *SearchForValidIngredientStatesResponse
func (c *ClientWithResponses) SearchForValidIngredientStatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SearchForValidIngredientStatesResponse, error) {
	rsp, err := c.SearchForValidIngredientStates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchForValidIngredientStatesResponse(rsp)
}

// ArchiveValidIngredientStateWithResponse request returning *ArchiveValidIngredientStateResponse
func (c *ClientWithResponses) ArchiveValidIngredientStateWithResponse(ctx context.Context, validIngredientStateID string, reqEditors ...RequestEditorFn) (*ArchiveValidIngredientStateResponse, error) {
	rsp, err := c.ArchiveValidIngredientState(ctx, validIngredientStateID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveValidIngredientStateResponse(rsp)
}

// GetValidIngredientStateWithResponse request returning *GetValidIngredientStateResponse
func (c *ClientWithResponses) GetValidIngredientStateWithResponse(ctx context.Context, validIngredientStateID string, reqEditors ...RequestEditorFn) (*GetValidIngredientStateResponse, error) {
	rsp, err := c.GetValidIngredientState(ctx, validIngredientStateID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidIngredientStateResponse(rsp)
}

// UpdateValidIngredientStateWithBodyWithResponse request with arbitrary body returning *UpdateValidIngredientStateResponse
func (c *ClientWithResponses) UpdateValidIngredientStateWithBodyWithResponse(ctx context.Context, validIngredientStateID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateValidIngredientStateResponse, error) {
	rsp, err := c.UpdateValidIngredientStateWithBody(ctx, validIngredientStateID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateValidIngredientStateResponse(rsp)
}

func (c *ClientWithResponses) UpdateValidIngredientStateWithResponse(ctx context.Context, validIngredientStateID string, body UpdateValidIngredientStateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateValidIngredientStateResponse, error) {
	rsp, err := c.UpdateValidIngredientState(ctx, validIngredientStateID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateValidIngredientStateResponse(rsp)
}

// GetValidIngredientsWithResponse request returning *GetValidIngredientsResponse
func (c *ClientWithResponses) GetValidIngredientsWithResponse(ctx context.Context, params *GetValidIngredientsParams, reqEditors ...RequestEditorFn) (*GetValidIngredientsResponse, error) {
	rsp, err := c.GetValidIngredients(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidIngredientsResponse(rsp)
}

// CreateValidIngredientWithBodyWithResponse request with arbitrary body returning *CreateValidIngredientResponse
func (c *ClientWithResponses) CreateValidIngredientWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidIngredientResponse, error) {
	rsp, err := c.CreateValidIngredientWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidIngredientResponse(rsp)
}

func (c *ClientWithResponses) CreateValidIngredientWithResponse(ctx context.Context, body CreateValidIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateValidIngredientResponse, error) {
	rsp, err := c.CreateValidIngredient(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidIngredientResponse(rsp)
}

// GetValidIngredientsByPreparationWithResponse request returning *GetValidIngredientsByPreparationResponse
func (c *ClientWithResponses) GetValidIngredientsByPreparationWithResponse(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*GetValidIngredientsByPreparationResponse, error) {
	rsp, err := c.GetValidIngredientsByPreparation(ctx, validPreparationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidIngredientsByPreparationResponse(rsp)
}

// GetRandomValidIngredientWithResponse request returning *GetRandomValidIngredientResponse
func (c *ClientWithResponses) GetRandomValidIngredientWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRandomValidIngredientResponse, error) {
	rsp, err := c.GetRandomValidIngredient(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRandomValidIngredientResponse(rsp)
}

// SearchForValidIngredientsWithResponse request returning *SearchForValidIngredientsResponse
func (c *ClientWithResponses) SearchForValidIngredientsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SearchForValidIngredientsResponse, error) {
	rsp, err := c.SearchForValidIngredients(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchForValidIngredientsResponse(rsp)
}

// ArchiveValidIngredientWithResponse request returning *ArchiveValidIngredientResponse
func (c *ClientWithResponses) ArchiveValidIngredientWithResponse(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*ArchiveValidIngredientResponse, error) {
	rsp, err := c.ArchiveValidIngredient(ctx, validIngredientID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveValidIngredientResponse(rsp)
}

// GetValidIngredientWithResponse request returning *GetValidIngredientResponse
func (c *ClientWithResponses) GetValidIngredientWithResponse(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*GetValidIngredientResponse, error) {
	rsp, err := c.GetValidIngredient(ctx, validIngredientID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidIngredientResponse(rsp)
}

// UpdateValidIngredientWithBodyWithResponse request with arbitrary body returning *UpdateValidIngredientResponse
func (c *ClientWithResponses) UpdateValidIngredientWithBodyWithResponse(ctx context.Context, validIngredientID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateValidIngredientResponse, error) {
	rsp, err := c.UpdateValidIngredientWithBody(ctx, validIngredientID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateValidIngredientResponse(rsp)
}

func (c *ClientWithResponses) UpdateValidIngredientWithResponse(ctx context.Context, validIngredientID string, body UpdateValidIngredientJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateValidIngredientResponse, error) {
	rsp, err := c.UpdateValidIngredient(ctx, validIngredientID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateValidIngredientResponse(rsp)
}

// GetValidInstrumentsWithResponse request returning *GetValidInstrumentsResponse
func (c *ClientWithResponses) GetValidInstrumentsWithResponse(ctx context.Context, params *GetValidInstrumentsParams, reqEditors ...RequestEditorFn) (*GetValidInstrumentsResponse, error) {
	rsp, err := c.GetValidInstruments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidInstrumentsResponse(rsp)
}

// CreateValidInstrumentWithBodyWithResponse request with arbitrary body returning *CreateValidInstrumentResponse
func (c *ClientWithResponses) CreateValidInstrumentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidInstrumentResponse, error) {
	rsp, err := c.CreateValidInstrumentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidInstrumentResponse(rsp)
}

func (c *ClientWithResponses) CreateValidInstrumentWithResponse(ctx context.Context, body CreateValidInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateValidInstrumentResponse, error) {
	rsp, err := c.CreateValidInstrument(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidInstrumentResponse(rsp)
}

// GetRandomValidInstrumentWithResponse request returning *GetRandomValidInstrumentResponse
func (c *ClientWithResponses) GetRandomValidInstrumentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRandomValidInstrumentResponse, error) {
	rsp, err := c.GetRandomValidInstrument(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRandomValidInstrumentResponse(rsp)
}

// SearchForValidInstrumentsWithResponse request returning *SearchForValidInstrumentsResponse
func (c *ClientWithResponses) SearchForValidInstrumentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SearchForValidInstrumentsResponse, error) {
	rsp, err := c.SearchForValidInstruments(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchForValidInstrumentsResponse(rsp)
}

// ArchiveValidInstrumentWithResponse request returning *ArchiveValidInstrumentResponse
func (c *ClientWithResponses) ArchiveValidInstrumentWithResponse(ctx context.Context, validInstrumentID string, reqEditors ...RequestEditorFn) (*ArchiveValidInstrumentResponse, error) {
	rsp, err := c.ArchiveValidInstrument(ctx, validInstrumentID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveValidInstrumentResponse(rsp)
}

// GetValidInstrumentWithResponse request returning *GetValidInstrumentResponse
func (c *ClientWithResponses) GetValidInstrumentWithResponse(ctx context.Context, validInstrumentID string, reqEditors ...RequestEditorFn) (*GetValidInstrumentResponse, error) {
	rsp, err := c.GetValidInstrument(ctx, validInstrumentID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidInstrumentResponse(rsp)
}

// UpdateValidInstrumentWithBodyWithResponse request with arbitrary body returning *UpdateValidInstrumentResponse
func (c *ClientWithResponses) UpdateValidInstrumentWithBodyWithResponse(ctx context.Context, validInstrumentID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateValidInstrumentResponse, error) {
	rsp, err := c.UpdateValidInstrumentWithBody(ctx, validInstrumentID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateValidInstrumentResponse(rsp)
}

func (c *ClientWithResponses) UpdateValidInstrumentWithResponse(ctx context.Context, validInstrumentID string, body UpdateValidInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateValidInstrumentResponse, error) {
	rsp, err := c.UpdateValidInstrument(ctx, validInstrumentID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateValidInstrumentResponse(rsp)
}

// CreateValidMeasurementUnitConversionWithBodyWithResponse request with arbitrary body returning *CreateValidMeasurementUnitConversionResponse
func (c *ClientWithResponses) CreateValidMeasurementUnitConversionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidMeasurementUnitConversionResponse, error) {
	rsp, err := c.CreateValidMeasurementUnitConversionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidMeasurementUnitConversionResponse(rsp)
}

func (c *ClientWithResponses) CreateValidMeasurementUnitConversionWithResponse(ctx context.Context, body CreateValidMeasurementUnitConversionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateValidMeasurementUnitConversionResponse, error) {
	rsp, err := c.CreateValidMeasurementUnitConversion(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidMeasurementUnitConversionResponse(rsp)
}

// GetValidMeasurementUnitConversionsFromUnitWithResponse request returning *GetValidMeasurementUnitConversionsFromUnitResponse
func (c *ClientWithResponses) GetValidMeasurementUnitConversionsFromUnitWithResponse(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*GetValidMeasurementUnitConversionsFromUnitResponse, error) {
	rsp, err := c.GetValidMeasurementUnitConversionsFromUnit(ctx, validMeasurementUnitID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidMeasurementUnitConversionsFromUnitResponse(rsp)
}

// ValidMeasurementUnitConversionsToUnitWithResponse request returning *ValidMeasurementUnitConversionsToUnitResponse
func (c *ClientWithResponses) ValidMeasurementUnitConversionsToUnitWithResponse(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*ValidMeasurementUnitConversionsToUnitResponse, error) {
	rsp, err := c.ValidMeasurementUnitConversionsToUnit(ctx, validMeasurementUnitID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseValidMeasurementUnitConversionsToUnitResponse(rsp)
}

// ArchiveValidMeasurementUnitConversionWithResponse request returning *ArchiveValidMeasurementUnitConversionResponse
func (c *ClientWithResponses) ArchiveValidMeasurementUnitConversionWithResponse(ctx context.Context, validMeasurementUnitConversionID string, reqEditors ...RequestEditorFn) (*ArchiveValidMeasurementUnitConversionResponse, error) {
	rsp, err := c.ArchiveValidMeasurementUnitConversion(ctx, validMeasurementUnitConversionID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveValidMeasurementUnitConversionResponse(rsp)
}

// GetValidMeasurementUnitConversionWithResponse request returning *GetValidMeasurementUnitConversionResponse
func (c *ClientWithResponses) GetValidMeasurementUnitConversionWithResponse(ctx context.Context, validMeasurementUnitConversionID string, reqEditors ...RequestEditorFn) (*GetValidMeasurementUnitConversionResponse, error) {
	rsp, err := c.GetValidMeasurementUnitConversion(ctx, validMeasurementUnitConversionID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidMeasurementUnitConversionResponse(rsp)
}

// UpdateValidMeasurementUnitConversionWithBodyWithResponse request with arbitrary body returning *UpdateValidMeasurementUnitConversionResponse
func (c *ClientWithResponses) UpdateValidMeasurementUnitConversionWithBodyWithResponse(ctx context.Context, validMeasurementUnitConversionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateValidMeasurementUnitConversionResponse, error) {
	rsp, err := c.UpdateValidMeasurementUnitConversionWithBody(ctx, validMeasurementUnitConversionID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateValidMeasurementUnitConversionResponse(rsp)
}

func (c *ClientWithResponses) UpdateValidMeasurementUnitConversionWithResponse(ctx context.Context, validMeasurementUnitConversionID string, body UpdateValidMeasurementUnitConversionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateValidMeasurementUnitConversionResponse, error) {
	rsp, err := c.UpdateValidMeasurementUnitConversion(ctx, validMeasurementUnitConversionID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateValidMeasurementUnitConversionResponse(rsp)
}

// GetValidMeasurementUnitsWithResponse request returning *GetValidMeasurementUnitsResponse
func (c *ClientWithResponses) GetValidMeasurementUnitsWithResponse(ctx context.Context, params *GetValidMeasurementUnitsParams, reqEditors ...RequestEditorFn) (*GetValidMeasurementUnitsResponse, error) {
	rsp, err := c.GetValidMeasurementUnits(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidMeasurementUnitsResponse(rsp)
}

// CreateValidMeasurementUnitWithBodyWithResponse request with arbitrary body returning *CreateValidMeasurementUnitResponse
func (c *ClientWithResponses) CreateValidMeasurementUnitWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidMeasurementUnitResponse, error) {
	rsp, err := c.CreateValidMeasurementUnitWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidMeasurementUnitResponse(rsp)
}

func (c *ClientWithResponses) CreateValidMeasurementUnitWithResponse(ctx context.Context, body CreateValidMeasurementUnitJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateValidMeasurementUnitResponse, error) {
	rsp, err := c.CreateValidMeasurementUnit(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidMeasurementUnitResponse(rsp)
}

// GetValidMeasurementUnitsByIngredientWithResponse request returning *GetValidMeasurementUnitsByIngredientResponse
func (c *ClientWithResponses) GetValidMeasurementUnitsByIngredientWithResponse(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*GetValidMeasurementUnitsByIngredientResponse, error) {
	rsp, err := c.GetValidMeasurementUnitsByIngredient(ctx, validIngredientID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidMeasurementUnitsByIngredientResponse(rsp)
}

// SearchForValidMeasurementUnitsWithResponse request returning *SearchForValidMeasurementUnitsResponse
func (c *ClientWithResponses) SearchForValidMeasurementUnitsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SearchForValidMeasurementUnitsResponse, error) {
	rsp, err := c.SearchForValidMeasurementUnits(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchForValidMeasurementUnitsResponse(rsp)
}

// ArchiveValidMeasurementUnitWithResponse request returning *ArchiveValidMeasurementUnitResponse
func (c *ClientWithResponses) ArchiveValidMeasurementUnitWithResponse(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*ArchiveValidMeasurementUnitResponse, error) {
	rsp, err := c.ArchiveValidMeasurementUnit(ctx, validMeasurementUnitID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveValidMeasurementUnitResponse(rsp)
}

// GetValidMeasurementUnitWithResponse request returning *GetValidMeasurementUnitResponse
func (c *ClientWithResponses) GetValidMeasurementUnitWithResponse(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*GetValidMeasurementUnitResponse, error) {
	rsp, err := c.GetValidMeasurementUnit(ctx, validMeasurementUnitID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidMeasurementUnitResponse(rsp)
}

// UpdateValidMeasurementUnitWithBodyWithResponse request with arbitrary body returning *UpdateValidMeasurementUnitResponse
func (c *ClientWithResponses) UpdateValidMeasurementUnitWithBodyWithResponse(ctx context.Context, validMeasurementUnitID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateValidMeasurementUnitResponse, error) {
	rsp, err := c.UpdateValidMeasurementUnitWithBody(ctx, validMeasurementUnitID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateValidMeasurementUnitResponse(rsp)
}

func (c *ClientWithResponses) UpdateValidMeasurementUnitWithResponse(ctx context.Context, validMeasurementUnitID string, body UpdateValidMeasurementUnitJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateValidMeasurementUnitResponse, error) {
	rsp, err := c.UpdateValidMeasurementUnit(ctx, validMeasurementUnitID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateValidMeasurementUnitResponse(rsp)
}

// GetValidPreparationInstrumentsWithResponse request returning *GetValidPreparationInstrumentsResponse
func (c *ClientWithResponses) GetValidPreparationInstrumentsWithResponse(ctx context.Context, params *GetValidPreparationInstrumentsParams, reqEditors ...RequestEditorFn) (*GetValidPreparationInstrumentsResponse, error) {
	rsp, err := c.GetValidPreparationInstruments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidPreparationInstrumentsResponse(rsp)
}

// CreateValidPreparationInstrumentWithBodyWithResponse request with arbitrary body returning *CreateValidPreparationInstrumentResponse
func (c *ClientWithResponses) CreateValidPreparationInstrumentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidPreparationInstrumentResponse, error) {
	rsp, err := c.CreateValidPreparationInstrumentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidPreparationInstrumentResponse(rsp)
}

func (c *ClientWithResponses) CreateValidPreparationInstrumentWithResponse(ctx context.Context, body CreateValidPreparationInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateValidPreparationInstrumentResponse, error) {
	rsp, err := c.CreateValidPreparationInstrument(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidPreparationInstrumentResponse(rsp)
}

// GetValidPreparationInstrumentsByInstrumentWithResponse request returning *GetValidPreparationInstrumentsByInstrumentResponse
func (c *ClientWithResponses) GetValidPreparationInstrumentsByInstrumentWithResponse(ctx context.Context, validInstrumentID string, reqEditors ...RequestEditorFn) (*GetValidPreparationInstrumentsByInstrumentResponse, error) {
	rsp, err := c.GetValidPreparationInstrumentsByInstrument(ctx, validInstrumentID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidPreparationInstrumentsByInstrumentResponse(rsp)
}

// GetValidPreparationInstrumentsByPreparationWithResponse request returning *GetValidPreparationInstrumentsByPreparationResponse
func (c *ClientWithResponses) GetValidPreparationInstrumentsByPreparationWithResponse(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*GetValidPreparationInstrumentsByPreparationResponse, error) {
	rsp, err := c.GetValidPreparationInstrumentsByPreparation(ctx, validPreparationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidPreparationInstrumentsByPreparationResponse(rsp)
}

// ArchiveValidPreparationInstrumentWithResponse request returning *ArchiveValidPreparationInstrumentResponse
func (c *ClientWithResponses) ArchiveValidPreparationInstrumentWithResponse(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*ArchiveValidPreparationInstrumentResponse, error) {
	rsp, err := c.ArchiveValidPreparationInstrument(ctx, validPreparationVesselID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveValidPreparationInstrumentResponse(rsp)
}

// GetValidPreparationInstrumentWithResponse request returning *GetValidPreparationInstrumentResponse
func (c *ClientWithResponses) GetValidPreparationInstrumentWithResponse(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*GetValidPreparationInstrumentResponse, error) {
	rsp, err := c.GetValidPreparationInstrument(ctx, validPreparationVesselID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidPreparationInstrumentResponse(rsp)
}

// UpdateValidPreparationInstrumentWithBodyWithResponse request with arbitrary body returning *UpdateValidPreparationInstrumentResponse
func (c *ClientWithResponses) UpdateValidPreparationInstrumentWithBodyWithResponse(ctx context.Context, validPreparationVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateValidPreparationInstrumentResponse, error) {
	rsp, err := c.UpdateValidPreparationInstrumentWithBody(ctx, validPreparationVesselID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateValidPreparationInstrumentResponse(rsp)
}

func (c *ClientWithResponses) UpdateValidPreparationInstrumentWithResponse(ctx context.Context, validPreparationVesselID string, body UpdateValidPreparationInstrumentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateValidPreparationInstrumentResponse, error) {
	rsp, err := c.UpdateValidPreparationInstrument(ctx, validPreparationVesselID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateValidPreparationInstrumentResponse(rsp)
}

// GetValidPreparationVesselsWithResponse request returning *GetValidPreparationVesselsResponse
func (c *ClientWithResponses) GetValidPreparationVesselsWithResponse(ctx context.Context, params *GetValidPreparationVesselsParams, reqEditors ...RequestEditorFn) (*GetValidPreparationVesselsResponse, error) {
	rsp, err := c.GetValidPreparationVessels(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidPreparationVesselsResponse(rsp)
}

// CreateValidPreparationVesselWithBodyWithResponse request with arbitrary body returning *CreateValidPreparationVesselResponse
func (c *ClientWithResponses) CreateValidPreparationVesselWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidPreparationVesselResponse, error) {
	rsp, err := c.CreateValidPreparationVesselWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidPreparationVesselResponse(rsp)
}

func (c *ClientWithResponses) CreateValidPreparationVesselWithResponse(ctx context.Context, body CreateValidPreparationVesselJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateValidPreparationVesselResponse, error) {
	rsp, err := c.CreateValidPreparationVessel(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidPreparationVesselResponse(rsp)
}

// GetValidPreparationVesselsByPreparationWithResponse request returning *GetValidPreparationVesselsByPreparationResponse
func (c *ClientWithResponses) GetValidPreparationVesselsByPreparationWithResponse(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*GetValidPreparationVesselsByPreparationResponse, error) {
	rsp, err := c.GetValidPreparationVesselsByPreparation(ctx, validPreparationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidPreparationVesselsByPreparationResponse(rsp)
}

// GetValidPreparationVesselsByVesselWithResponse request returning *GetValidPreparationVesselsByVesselResponse
func (c *ClientWithResponses) GetValidPreparationVesselsByVesselWithResponse(ctx context.Context, validVesselID string, reqEditors ...RequestEditorFn) (*GetValidPreparationVesselsByVesselResponse, error) {
	rsp, err := c.GetValidPreparationVesselsByVessel(ctx, validVesselID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidPreparationVesselsByVesselResponse(rsp)
}

// ArchiveValidPreparationVesselWithResponse request returning *ArchiveValidPreparationVesselResponse
func (c *ClientWithResponses) ArchiveValidPreparationVesselWithResponse(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*ArchiveValidPreparationVesselResponse, error) {
	rsp, err := c.ArchiveValidPreparationVessel(ctx, validPreparationVesselID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveValidPreparationVesselResponse(rsp)
}

// GetValidPreparationVesselWithResponse request returning *GetValidPreparationVesselResponse
func (c *ClientWithResponses) GetValidPreparationVesselWithResponse(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*GetValidPreparationVesselResponse, error) {
	rsp, err := c.GetValidPreparationVessel(ctx, validPreparationVesselID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidPreparationVesselResponse(rsp)
}

// UpdateValidPreparationVesselWithBodyWithResponse request with arbitrary body returning *UpdateValidPreparationVesselResponse
func (c *ClientWithResponses) UpdateValidPreparationVesselWithBodyWithResponse(ctx context.Context, validPreparationVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateValidPreparationVesselResponse, error) {
	rsp, err := c.UpdateValidPreparationVesselWithBody(ctx, validPreparationVesselID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateValidPreparationVesselResponse(rsp)
}

func (c *ClientWithResponses) UpdateValidPreparationVesselWithResponse(ctx context.Context, validPreparationVesselID string, body UpdateValidPreparationVesselJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateValidPreparationVesselResponse, error) {
	rsp, err := c.UpdateValidPreparationVessel(ctx, validPreparationVesselID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateValidPreparationVesselResponse(rsp)
}

// GetValidPreparationsWithResponse request returning *GetValidPreparationsResponse
func (c *ClientWithResponses) GetValidPreparationsWithResponse(ctx context.Context, params *GetValidPreparationsParams, reqEditors ...RequestEditorFn) (*GetValidPreparationsResponse, error) {
	rsp, err := c.GetValidPreparations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidPreparationsResponse(rsp)
}

// CreateValidPreparationWithBodyWithResponse request with arbitrary body returning *CreateValidPreparationResponse
func (c *ClientWithResponses) CreateValidPreparationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidPreparationResponse, error) {
	rsp, err := c.CreateValidPreparationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidPreparationResponse(rsp)
}

func (c *ClientWithResponses) CreateValidPreparationWithResponse(ctx context.Context, body CreateValidPreparationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateValidPreparationResponse, error) {
	rsp, err := c.CreateValidPreparation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidPreparationResponse(rsp)
}

// GetRandomValidPreparationWithResponse request returning *GetRandomValidPreparationResponse
func (c *ClientWithResponses) GetRandomValidPreparationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRandomValidPreparationResponse, error) {
	rsp, err := c.GetRandomValidPreparation(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRandomValidPreparationResponse(rsp)
}

// SearchForValidPreparationsWithResponse request returning *SearchForValidPreparationsResponse
func (c *ClientWithResponses) SearchForValidPreparationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SearchForValidPreparationsResponse, error) {
	rsp, err := c.SearchForValidPreparations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchForValidPreparationsResponse(rsp)
}

// ArchiveValidPreparationWithResponse request returning *ArchiveValidPreparationResponse
func (c *ClientWithResponses) ArchiveValidPreparationWithResponse(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*ArchiveValidPreparationResponse, error) {
	rsp, err := c.ArchiveValidPreparation(ctx, validPreparationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveValidPreparationResponse(rsp)
}

// GetValidPreparationWithResponse request returning *GetValidPreparationResponse
func (c *ClientWithResponses) GetValidPreparationWithResponse(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*GetValidPreparationResponse, error) {
	rsp, err := c.GetValidPreparation(ctx, validPreparationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidPreparationResponse(rsp)
}

// UpdateValidPreparationWithBodyWithResponse request with arbitrary body returning *UpdateValidPreparationResponse
func (c *ClientWithResponses) UpdateValidPreparationWithBodyWithResponse(ctx context.Context, validPreparationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateValidPreparationResponse, error) {
	rsp, err := c.UpdateValidPreparationWithBody(ctx, validPreparationID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateValidPreparationResponse(rsp)
}

func (c *ClientWithResponses) UpdateValidPreparationWithResponse(ctx context.Context, validPreparationID string, body UpdateValidPreparationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateValidPreparationResponse, error) {
	rsp, err := c.UpdateValidPreparation(ctx, validPreparationID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateValidPreparationResponse(rsp)
}

// GetValidVesselsWithResponse request returning *GetValidVesselsResponse
func (c *ClientWithResponses) GetValidVesselsWithResponse(ctx context.Context, params *GetValidVesselsParams, reqEditors ...RequestEditorFn) (*GetValidVesselsResponse, error) {
	rsp, err := c.GetValidVessels(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidVesselsResponse(rsp)
}

// CreateValidVesselWithBodyWithResponse request with arbitrary body returning *CreateValidVesselResponse
func (c *ClientWithResponses) CreateValidVesselWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidVesselResponse, error) {
	rsp, err := c.CreateValidVesselWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidVesselResponse(rsp)
}

func (c *ClientWithResponses) CreateValidVesselWithResponse(ctx context.Context, body CreateValidVesselJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateValidVesselResponse, error) {
	rsp, err := c.CreateValidVessel(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidVesselResponse(rsp)
}

// GetRandomValidVesselWithResponse request returning *GetRandomValidVesselResponse
func (c *ClientWithResponses) GetRandomValidVesselWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRandomValidVesselResponse, error) {
	rsp, err := c.GetRandomValidVessel(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRandomValidVesselResponse(rsp)
}

// SearchForValidVesselsWithResponse request returning *SearchForValidVesselsResponse
func (c *ClientWithResponses) SearchForValidVesselsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*SearchForValidVesselsResponse, error) {
	rsp, err := c.SearchForValidVessels(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchForValidVesselsResponse(rsp)
}

// ArchiveValidVesselWithResponse request returning *ArchiveValidVesselResponse
func (c *ClientWithResponses) ArchiveValidVesselWithResponse(ctx context.Context, validVesselID string, reqEditors ...RequestEditorFn) (*ArchiveValidVesselResponse, error) {
	rsp, err := c.ArchiveValidVessel(ctx, validVesselID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveValidVesselResponse(rsp)
}

// GetValidVesselWithResponse request returning *GetValidVesselResponse
func (c *ClientWithResponses) GetValidVesselWithResponse(ctx context.Context, validVesselID string, reqEditors ...RequestEditorFn) (*GetValidVesselResponse, error) {
	rsp, err := c.GetValidVessel(ctx, validVesselID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValidVesselResponse(rsp)
}

// UpdateValidVesselWithBodyWithResponse request with arbitrary body returning *UpdateValidVesselResponse
func (c *ClientWithResponses) UpdateValidVesselWithBodyWithResponse(ctx context.Context, validVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateValidVesselResponse, error) {
	rsp, err := c.UpdateValidVesselWithBody(ctx, validVesselID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateValidVesselResponse(rsp)
}

func (c *ClientWithResponses) UpdateValidVesselWithResponse(ctx context.Context, validVesselID string, body UpdateValidVesselJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateValidVesselResponse, error) {
	rsp, err := c.UpdateValidVessel(ctx, validVesselID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateValidVesselResponse(rsp)
}

// GetWebhooksWithResponse request returning *GetWebhooksResponse
func (c *ClientWithResponses) GetWebhooksWithResponse(ctx context.Context, params *GetWebhooksParams, reqEditors ...RequestEditorFn) (*GetWebhooksResponse, error) {
	rsp, err := c.GetWebhooks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWebhooksResponse(rsp)
}

// CreateWebhookWithBodyWithResponse request with arbitrary body returning *CreateWebhookResponse
func (c *ClientWithResponses) CreateWebhookWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWebhookResponse, error) {
	rsp, err := c.CreateWebhookWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWebhookResponse(rsp)
}

func (c *ClientWithResponses) CreateWebhookWithResponse(ctx context.Context, body CreateWebhookJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWebhookResponse, error) {
	rsp, err := c.CreateWebhook(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWebhookResponse(rsp)
}

// ArchiveWebhookWithResponse request returning *ArchiveWebhookResponse
func (c *ClientWithResponses) ArchiveWebhookWithResponse(ctx context.Context, webhookID string, reqEditors ...RequestEditorFn) (*ArchiveWebhookResponse, error) {
	rsp, err := c.ArchiveWebhook(ctx, webhookID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveWebhookResponse(rsp)
}

// GetWebhookWithResponse request returning *GetWebhookResponse
func (c *ClientWithResponses) GetWebhookWithResponse(ctx context.Context, webhookID string, reqEditors ...RequestEditorFn) (*GetWebhookResponse, error) {
	rsp, err := c.GetWebhook(ctx, webhookID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWebhookResponse(rsp)
}

// CreateWebhookTriggerEventWithBodyWithResponse request with arbitrary body returning *CreateWebhookTriggerEventResponse
func (c *ClientWithResponses) CreateWebhookTriggerEventWithBodyWithResponse(ctx context.Context, webhookID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWebhookTriggerEventResponse, error) {
	rsp, err := c.CreateWebhookTriggerEventWithBody(ctx, webhookID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWebhookTriggerEventResponse(rsp)
}

func (c *ClientWithResponses) CreateWebhookTriggerEventWithResponse(ctx context.Context, webhookID string, body CreateWebhookTriggerEventJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWebhookTriggerEventResponse, error) {
	rsp, err := c.CreateWebhookTriggerEvent(ctx, webhookID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWebhookTriggerEventResponse(rsp)
}

// ArchiveWebhookTriggerEventWithResponse request returning *ArchiveWebhookTriggerEventResponse
func (c *ClientWithResponses) ArchiveWebhookTriggerEventWithResponse(ctx context.Context, webhookID string, webhookTriggerEventID string, reqEditors ...RequestEditorFn) (*ArchiveWebhookTriggerEventResponse, error) {
	rsp, err := c.ArchiveWebhookTriggerEvent(ctx, webhookID, webhookTriggerEventID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseArchiveWebhookTriggerEventResponse(rsp)
}

// RunFinalizeMealPlanWorkerWithBodyWithResponse request with arbitrary body returning *RunFinalizeMealPlanWorkerResponse
func (c *ClientWithResponses) RunFinalizeMealPlanWorkerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RunFinalizeMealPlanWorkerResponse, error) {
	rsp, err := c.RunFinalizeMealPlanWorkerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRunFinalizeMealPlanWorkerResponse(rsp)
}

func (c *ClientWithResponses) RunFinalizeMealPlanWorkerWithResponse(ctx context.Context, body RunFinalizeMealPlanWorkerJSONRequestBody, reqEditors ...RequestEditorFn) (*RunFinalizeMealPlanWorkerResponse, error) {
	rsp, err := c.RunFinalizeMealPlanWorker(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRunFinalizeMealPlanWorkerResponse(rsp)
}

// RunMealPlanGroceryListInitializerWorkerWithResponse request returning *RunMealPlanGroceryListInitializerWorkerResponse
func (c *ClientWithResponses) RunMealPlanGroceryListInitializerWorkerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RunMealPlanGroceryListInitializerWorkerResponse, error) {
	rsp, err := c.RunMealPlanGroceryListInitializerWorker(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRunMealPlanGroceryListInitializerWorkerResponse(rsp)
}

// RunMealPlanTaskCreatorWorkerWithResponse request returning *RunMealPlanTaskCreatorWorkerResponse
func (c *ClientWithResponses) RunMealPlanTaskCreatorWorkerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RunMealPlanTaskCreatorWorkerResponse, error) {
	rsp, err := c.RunMealPlanTaskCreatorWorker(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRunMealPlanTaskCreatorWorkerResponse(rsp)
}

// GetAuthStatusWithResponse request returning *GetAuthStatusResponse
func (c *ClientWithResponses) GetAuthStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthStatusResponse, error) {
	rsp, err := c.GetAuthStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthStatusResponse(rsp)
}

// GETOauth2AuthorizeWithResponse request returning *GETOauth2AuthorizeResponse
func (c *ClientWithResponses) GETOauth2AuthorizeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETOauth2AuthorizeResponse, error) {
	rsp, err := c.GETOauth2Authorize(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETOauth2AuthorizeResponse(rsp)
}

// POSTOauth2TokenWithResponse request returning *POSTOauth2TokenResponse
func (c *ClientWithResponses) POSTOauth2TokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*POSTOauth2TokenResponse, error) {
	rsp, err := c.POSTOauth2Token(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTOauth2TokenResponse(rsp)
}

// POSTUsersWithBodyWithResponse request with arbitrary body returning *POSTUsersResponse
func (c *ClientWithResponses) POSTUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersResponse, error) {
	rsp, err := c.POSTUsersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersResponse(rsp)
}

func (c *ClientWithResponses) POSTUsersWithResponse(ctx context.Context, body POSTUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersResponse, error) {
	rsp, err := c.POSTUsers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersResponse(rsp)
}

// VerifyEmailAddressWithBodyWithResponse request with arbitrary body returning *VerifyEmailAddressResponse
func (c *ClientWithResponses) VerifyEmailAddressWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyEmailAddressResponse, error) {
	rsp, err := c.VerifyEmailAddressWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyEmailAddressResponse(rsp)
}

func (c *ClientWithResponses) VerifyEmailAddressWithResponse(ctx context.Context, body VerifyEmailAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyEmailAddressResponse, error) {
	rsp, err := c.VerifyEmailAddress(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyEmailAddressResponse(rsp)
}

// LoginWithBodyWithResponse request with arbitrary body returning *LoginResponse
func (c *ClientWithResponses) LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.LoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

func (c *ClientWithResponses) LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.Login(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

// AdminLoginWithBodyWithResponse request with arbitrary body returning *AdminLoginResponse
func (c *ClientWithResponses) AdminLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminLoginResponse, error) {
	rsp, err := c.AdminLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminLoginResponse(rsp)
}

func (c *ClientWithResponses) AdminLoginWithResponse(ctx context.Context, body AdminLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminLoginResponse, error) {
	rsp, err := c.AdminLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminLoginResponse(rsp)
}

// LogoutWithResponse request returning *LogoutResponse
func (c *ClientWithResponses) LogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogoutResponse, error) {
	rsp, err := c.Logout(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogoutResponse(rsp)
}

// RequestPasswordResetTokenWithBodyWithResponse request with arbitrary body returning *RequestPasswordResetTokenResponse
func (c *ClientWithResponses) RequestPasswordResetTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestPasswordResetTokenResponse, error) {
	rsp, err := c.RequestPasswordResetTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestPasswordResetTokenResponse(rsp)
}

func (c *ClientWithResponses) RequestPasswordResetTokenWithResponse(ctx context.Context, body RequestPasswordResetTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*RequestPasswordResetTokenResponse, error) {
	rsp, err := c.RequestPasswordResetToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestPasswordResetTokenResponse(rsp)
}

// RedeemPasswordResetTokenWithBodyWithResponse request with arbitrary body returning *RedeemPasswordResetTokenResponse
func (c *ClientWithResponses) RedeemPasswordResetTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RedeemPasswordResetTokenResponse, error) {
	rsp, err := c.RedeemPasswordResetTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRedeemPasswordResetTokenResponse(rsp)
}

func (c *ClientWithResponses) RedeemPasswordResetTokenWithResponse(ctx context.Context, body RedeemPasswordResetTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*RedeemPasswordResetTokenResponse, error) {
	rsp, err := c.RedeemPasswordResetToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRedeemPasswordResetTokenResponse(rsp)
}

// VerifyTOTPSecretWithBodyWithResponse request with arbitrary body returning *VerifyTOTPSecretResponse
func (c *ClientWithResponses) VerifyTOTPSecretWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyTOTPSecretResponse, error) {
	rsp, err := c.VerifyTOTPSecretWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyTOTPSecretResponse(rsp)
}

func (c *ClientWithResponses) VerifyTOTPSecretWithResponse(ctx context.Context, body VerifyTOTPSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyTOTPSecretResponse, error) {
	rsp, err := c.VerifyTOTPSecret(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyTOTPSecretResponse(rsp)
}

// RequestUsernameReminderWithBodyWithResponse request with arbitrary body returning *RequestUsernameReminderResponse
func (c *ClientWithResponses) RequestUsernameReminderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestUsernameReminderResponse, error) {
	rsp, err := c.RequestUsernameReminderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestUsernameReminderResponse(rsp)
}

func (c *ClientWithResponses) RequestUsernameReminderWithResponse(ctx context.Context, body RequestUsernameReminderJSONRequestBody, reqEditors ...RequestEditorFn) (*RequestUsernameReminderResponse, error) {
	rsp, err := c.RequestUsernameReminder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestUsernameReminderResponse(rsp)
}

// ParseAdminCycleCookieSecretResponse parses an HTTP response from a AdminCycleCookieSecretWithResponse call
func ParseAdminCycleCookieSecretResponse(rsp *http.Response) (*AdminCycleCookieSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminCycleCookieSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAdminUpdateUserStatusResponse parses an HTTP response from a AdminUpdateUserStatusWithResponse call
func ParseAdminUpdateUserStatusResponse(rsp *http.Response) (*AdminUpdateUserStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminUpdateUserStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserStatusResponse `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserStatusResponse `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetAuditLogEntriesForHouseholdResponse parses an HTTP response from a GetAuditLogEntriesForHouseholdWithResponse call
func ParseGetAuditLogEntriesForHouseholdResponse(rsp *http.Response) (*GetAuditLogEntriesForHouseholdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuditLogEntriesForHouseholdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *AuditLogEntry   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *AuditLogEntry   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetAuditLogEntriesForUserResponse parses an HTTP response from a GetAuditLogEntriesForUserWithResponse call
func ParseGetAuditLogEntriesForUserResponse(rsp *http.Response) (*GetAuditLogEntriesForUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuditLogEntriesForUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *AuditLogEntry   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *AuditLogEntry   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetAuditLogEntryByIDResponse parses an HTTP response from a GetAuditLogEntryByIDWithResponse call
func ParseGetAuditLogEntryByIDResponse(rsp *http.Response) (*GetAuditLogEntryByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuditLogEntryByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *AuditLogEntry   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *AuditLogEntry   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetReceivedHouseholdInvitationsResponse parses an HTTP response from a GetReceivedHouseholdInvitationsWithResponse call
func ParseGetReceivedHouseholdInvitationsResponse(rsp *http.Response) (*GetReceivedHouseholdInvitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReceivedHouseholdInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetSentHouseholdInvitationsResponse parses an HTTP response from a GetSentHouseholdInvitationsWithResponse call
func ParseGetSentHouseholdInvitationsResponse(rsp *http.Response) (*GetSentHouseholdInvitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSentHouseholdInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetHouseholdInvitationsResponse parses an HTTP response from a GetHouseholdInvitationsWithResponse call
func ParseGetHouseholdInvitationsResponse(rsp *http.Response) (*GetHouseholdInvitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHouseholdInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseAcceptHouseholdInvitationResponse parses an HTTP response from a AcceptHouseholdInvitationWithResponse call
func ParseAcceptHouseholdInvitationResponse(rsp *http.Response) (*AcceptHouseholdInvitationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AcceptHouseholdInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCancelHouseholdInvitationResponse parses an HTTP response from a CancelHouseholdInvitationWithResponse call
func ParseCancelHouseholdInvitationResponse(rsp *http.Response) (*CancelHouseholdInvitationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelHouseholdInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseRejectHouseholdInvitationResponse parses an HTTP response from a RejectHouseholdInvitationWithResponse call
func ParseRejectHouseholdInvitationResponse(rsp *http.Response) (*RejectHouseholdInvitationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RejectHouseholdInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetHouseholdsResponse parses an HTTP response from a GetHouseholdsWithResponse call
func ParseGetHouseholdsResponse(rsp *http.Response) (*GetHouseholdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHouseholdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Household     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Household     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateHouseholdResponse parses an HTTP response from a CreateHouseholdWithResponse call
func ParseCreateHouseholdResponse(rsp *http.Response) (*CreateHouseholdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHouseholdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetActiveHouseholdResponse parses an HTTP response from a GetActiveHouseholdWithResponse call
func ParseGetActiveHouseholdResponse(rsp *http.Response) (*GetActiveHouseholdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetActiveHouseholdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetHouseholdInstrumentOwnershipsResponse parses an HTTP response from a GetHouseholdInstrumentOwnershipsWithResponse call
func ParseGetHouseholdInstrumentOwnershipsResponse(rsp *http.Response) (*GetHouseholdInstrumentOwnershipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHouseholdInstrumentOwnershipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]HouseholdInstrumentOwnership `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]HouseholdInstrumentOwnership `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateHouseholdInstrumentOwnershipResponse parses an HTTP response from a CreateHouseholdInstrumentOwnershipWithResponse call
func ParseCreateHouseholdInstrumentOwnershipResponse(rsp *http.Response) (*CreateHouseholdInstrumentOwnershipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHouseholdInstrumentOwnershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveHouseholdInstrumentOwnershipResponse parses an HTTP response from a ArchiveHouseholdInstrumentOwnershipWithResponse call
func ParseArchiveHouseholdInstrumentOwnershipResponse(rsp *http.Response) (*ArchiveHouseholdInstrumentOwnershipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveHouseholdInstrumentOwnershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetHouseholdInstrumentOwnershipResponse parses an HTTP response from a GetHouseholdInstrumentOwnershipWithResponse call
func ParseGetHouseholdInstrumentOwnershipResponse(rsp *http.Response) (*GetHouseholdInstrumentOwnershipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHouseholdInstrumentOwnershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateHouseholdInstrumentOwnershipResponse parses an HTTP response from a UpdateHouseholdInstrumentOwnershipWithResponse call
func ParseUpdateHouseholdInstrumentOwnershipResponse(rsp *http.Response) (*UpdateHouseholdInstrumentOwnershipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateHouseholdInstrumentOwnershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveHouseholdResponse parses an HTTP response from a ArchiveHouseholdWithResponse call
func ParseArchiveHouseholdResponse(rsp *http.Response) (*ArchiveHouseholdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveHouseholdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetHouseholdResponse parses an HTTP response from a GetHouseholdWithResponse call
func ParseGetHouseholdResponse(rsp *http.Response) (*GetHouseholdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHouseholdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateHouseholdResponse parses an HTTP response from a UpdateHouseholdWithResponse call
func ParseUpdateHouseholdResponse(rsp *http.Response) (*UpdateHouseholdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateHouseholdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseSetDefaultHouseholdResponse parses an HTTP response from a SetDefaultHouseholdWithResponse call
func ParseSetDefaultHouseholdResponse(rsp *http.Response) (*SetDefaultHouseholdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetDefaultHouseholdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateHouseholdInvitationResponse parses an HTTP response from a CreateHouseholdInvitationWithResponse call
func ParseCreateHouseholdInvitationResponse(rsp *http.Response) (*CreateHouseholdInvitationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateHouseholdInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetHouseholdInvitationByIDResponse parses an HTTP response from a GetHouseholdInvitationByIDWithResponse call
func ParseGetHouseholdInvitationByIDResponse(rsp *http.Response) (*GetHouseholdInvitationByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHouseholdInvitationByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTHouseholdsHouseholdIDInviteResponse parses an HTTP response from a POSTHouseholdsHouseholdIDInviteWithResponse call
func ParsePOSTHouseholdsHouseholdIDInviteResponse(rsp *http.Response) (*POSTHouseholdsHouseholdIDInviteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTHouseholdsHouseholdIDInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveUserMembershipResponse parses an HTTP response from a ArchiveUserMembershipWithResponse call
func ParseArchiveUserMembershipResponse(rsp *http.Response) (*ArchiveUserMembershipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveUserMembershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *HouseholdUserMembership `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *HouseholdUserMembership `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateHouseholdMemberPermissionsResponse parses an HTTP response from a UpdateHouseholdMemberPermissionsWithResponse call
func ParseUpdateHouseholdMemberPermissionsResponse(rsp *http.Response) (*UpdateHouseholdMemberPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateHouseholdMemberPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *UserPermissionsResponse `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *UserPermissionsResponse `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseTransferHouseholdOwnershipResponse parses an HTTP response from a TransferHouseholdOwnershipWithResponse call
func ParseTransferHouseholdOwnershipResponse(rsp *http.Response) (*TransferHouseholdOwnershipResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TransferHouseholdOwnershipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetMealPlansResponse parses an HTTP response from a GetMealPlansWithResponse call
func ParseGetMealPlansResponse(rsp *http.Response) (*GetMealPlansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMealPlansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]MealPlan      `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]MealPlan      `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateMealPlanResponse parses an HTTP response from a CreateMealPlanWithResponse call
func ParseCreateMealPlanResponse(rsp *http.Response) (*CreateMealPlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMealPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *MealPlan        `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *MealPlan        `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveMealPlanResponse parses an HTTP response from a ArchiveMealPlanWithResponse call
func ParseArchiveMealPlanResponse(rsp *http.Response) (*ArchiveMealPlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveMealPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *MealPlan        `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *MealPlan        `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetMealPlanResponse parses an HTTP response from a GetMealPlanWithResponse call
func ParseGetMealPlanResponse(rsp *http.Response) (*GetMealPlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMealPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlan        `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlan        `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateMealPlanResponse parses an HTTP response from a UpdateMealPlanWithResponse call
func ParseUpdateMealPlanResponse(rsp *http.Response) (*UpdateMealPlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMealPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlan        `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlan        `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetMealPlanEventsResponse parses an HTTP response from a GetMealPlanEventsWithResponse call
func ParseGetMealPlanEventsResponse(rsp *http.Response) (*GetMealPlanEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMealPlanEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]MealPlanEvent `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]MealPlanEvent `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateMealPlanEventResponse parses an HTTP response from a CreateMealPlanEventWithResponse call
func ParseCreateMealPlanEventResponse(rsp *http.Response) (*CreateMealPlanEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMealPlanEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *MealPlanEvent   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *MealPlanEvent   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveMealPlanEventResponse parses an HTTP response from a ArchiveMealPlanEventWithResponse call
func ParseArchiveMealPlanEventResponse(rsp *http.Response) (*ArchiveMealPlanEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveMealPlanEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *MealPlanEvent   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *MealPlanEvent   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetMealPlanEventResponse parses an HTTP response from a GetMealPlanEventWithResponse call
func ParseGetMealPlanEventResponse(rsp *http.Response) (*GetMealPlanEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMealPlanEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanEvent   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanEvent   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateMealPlanEventResponse parses an HTTP response from a UpdateMealPlanEventWithResponse call
func ParseUpdateMealPlanEventResponse(rsp *http.Response) (*UpdateMealPlanEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMealPlanEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanEvent   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanEvent   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetMealPlanOptionsResponse parses an HTTP response from a GetMealPlanOptionsWithResponse call
func ParseGetMealPlanOptionsResponse(rsp *http.Response) (*GetMealPlanOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMealPlanOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]MealPlanOption `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]MealPlanOption `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateMealPlanOptionResponse parses an HTTP response from a CreateMealPlanOptionWithResponse call
func ParseCreateMealPlanOptionResponse(rsp *http.Response) (*CreateMealPlanOptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMealPlanOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *MealPlanOption  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *MealPlanOption  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveMealPlanOptionResponse parses an HTTP response from a ArchiveMealPlanOptionWithResponse call
func ParseArchiveMealPlanOptionResponse(rsp *http.Response) (*ArchiveMealPlanOptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveMealPlanOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *MealPlanOption  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *MealPlanOption  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetMealPlanOptionResponse parses an HTTP response from a GetMealPlanOptionWithResponse call
func ParseGetMealPlanOptionResponse(rsp *http.Response) (*GetMealPlanOptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMealPlanOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanOption  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanOption  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateMealPlanOptionResponse parses an HTTP response from a UpdateMealPlanOptionWithResponse call
func ParseUpdateMealPlanOptionResponse(rsp *http.Response) (*UpdateMealPlanOptionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMealPlanOptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanOption  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanOption  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetMealPlanOptionVotesResponse parses an HTTP response from a GetMealPlanOptionVotesWithResponse call
func ParseGetMealPlanOptionVotesResponse(rsp *http.Response) (*GetMealPlanOptionVotesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMealPlanOptionVotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]MealPlanOptionVote `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]MealPlanOptionVote `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveMealPlanOptionVoteResponse parses an HTTP response from a ArchiveMealPlanOptionVoteWithResponse call
func ParseArchiveMealPlanOptionVoteResponse(rsp *http.Response) (*ArchiveMealPlanOptionVoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveMealPlanOptionVoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *MealPlanOptionVote `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *MealPlanOptionVote `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetMealPlanOptionVoteResponse parses an HTTP response from a GetMealPlanOptionVoteWithResponse call
func ParseGetMealPlanOptionVoteResponse(rsp *http.Response) (*GetMealPlanOptionVoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMealPlanOptionVoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanOptionVote `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanOptionVote `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateMealPlanOptionVoteResponse parses an HTTP response from a UpdateMealPlanOptionVoteWithResponse call
func ParseUpdateMealPlanOptionVoteResponse(rsp *http.Response) (*UpdateMealPlanOptionVoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMealPlanOptionVoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanOptionVote `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanOptionVote `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateMealPlanVoteResponse parses an HTTP response from a CreateMealPlanVoteWithResponse call
func ParseCreateMealPlanVoteResponse(rsp *http.Response) (*CreateMealPlanVoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMealPlanVoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *MealPlanOptionVote `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *MealPlanOptionVote `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseFinalizeMealPlanResponse parses an HTTP response from a FinalizeMealPlanWithResponse call
func ParseFinalizeMealPlanResponse(rsp *http.Response) (*FinalizeMealPlanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FinalizeMealPlanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *FinalizeMealPlansResponse `json:"data,omitempty"`
			Details    *ResponseDetails           `json:"details,omitempty"`
			Error      *APIError                  `json:"error,omitempty"`
			Pagination *Pagination                `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *FinalizeMealPlansResponse `json:"data,omitempty"`
			Details    *ResponseDetails           `json:"details,omitempty"`
			Error      *APIError                  `json:"error,omitempty"`
			Pagination *Pagination                `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetMealPlanGroceryListItemsResponse parses an HTTP response from a GetMealPlanGroceryListItemsWithResponse call
func ParseGetMealPlanGroceryListItemsResponse(rsp *http.Response) (*GetMealPlanGroceryListItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMealPlanGroceryListItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]MealPlanGroceryListItem `json:"data,omitempty"`
			Details    *ResponseDetails           `json:"details,omitempty"`
			Error      *APIError                  `json:"error,omitempty"`
			Pagination *Pagination                `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]MealPlanGroceryListItem `json:"data,omitempty"`
			Details    *ResponseDetails           `json:"details,omitempty"`
			Error      *APIError                  `json:"error,omitempty"`
			Pagination *Pagination                `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateMealPlanGroceryListItemResponse parses an HTTP response from a CreateMealPlanGroceryListItemWithResponse call
func ParseCreateMealPlanGroceryListItemResponse(rsp *http.Response) (*CreateMealPlanGroceryListItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMealPlanGroceryListItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *MealPlanGroceryListItem `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *MealPlanGroceryListItem `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveMealPlanGroceryListItemResponse parses an HTTP response from a ArchiveMealPlanGroceryListItemWithResponse call
func ParseArchiveMealPlanGroceryListItemResponse(rsp *http.Response) (*ArchiveMealPlanGroceryListItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveMealPlanGroceryListItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *MealPlanGroceryListItem `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *MealPlanGroceryListItem `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetMealPlanGroceryListItemResponse parses an HTTP response from a GetMealPlanGroceryListItemWithResponse call
func ParseGetMealPlanGroceryListItemResponse(rsp *http.Response) (*GetMealPlanGroceryListItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMealPlanGroceryListItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanGroceryListItem `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanGroceryListItem `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateMealPlanGroceryListItemResponse parses an HTTP response from a UpdateMealPlanGroceryListItemWithResponse call
func ParseUpdateMealPlanGroceryListItemResponse(rsp *http.Response) (*UpdateMealPlanGroceryListItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMealPlanGroceryListItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanGroceryListItem `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanGroceryListItem `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetMealPlanTasksResponse parses an HTTP response from a GetMealPlanTasksWithResponse call
func ParseGetMealPlanTasksResponse(rsp *http.Response) (*GetMealPlanTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMealPlanTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]MealPlanTask  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]MealPlanTask  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateMealPlanTaskResponse parses an HTTP response from a CreateMealPlanTaskWithResponse call
func ParseCreateMealPlanTaskResponse(rsp *http.Response) (*CreateMealPlanTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMealPlanTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *MealPlanTask    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *MealPlanTask    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetMealPlanTaskResponse parses an HTTP response from a GetMealPlanTaskWithResponse call
func ParseGetMealPlanTaskResponse(rsp *http.Response) (*GetMealPlanTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMealPlanTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanTask    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanTask    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateMealPlanTaskResponse parses an HTTP response from a UpdateMealPlanTaskWithResponse call
func ParseUpdateMealPlanTaskResponse(rsp *http.Response) (*UpdateMealPlanTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMealPlanTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanTask    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanTask    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetMealsResponse parses an HTTP response from a GetMealsWithResponse call
func ParseGetMealsResponse(rsp *http.Response) (*GetMealsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMealsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Meal          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Meal          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateMealResponse parses an HTTP response from a CreateMealWithResponse call
func ParseCreateMealResponse(rsp *http.Response) (*CreateMealResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMealResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Meal            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Meal            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseSearchForMealsResponse parses an HTTP response from a SearchForMealsWithResponse call
func ParseSearchForMealsResponse(rsp *http.Response) (*SearchForMealsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchForMealsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Meal            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Meal            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveMealResponse parses an HTTP response from a ArchiveMealWithResponse call
func ParseArchiveMealResponse(rsp *http.Response) (*ArchiveMealResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveMealResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *Meal            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *Meal            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetMealResponse parses an HTTP response from a GetMealWithResponse call
func ParseGetMealResponse(rsp *http.Response) (*GetMealResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMealResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Meal            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Meal            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetOAuth2ClientsResponse parses an HTTP response from a GetOAuth2ClientsWithResponse call
func ParseGetOAuth2ClientsResponse(rsp *http.Response) (*GetOAuth2ClientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOAuth2ClientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]OAuth2Client  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]OAuth2Client  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateOAuth2ClientResponse parses an HTTP response from a CreateOAuth2ClientWithResponse call
func ParseCreateOAuth2ClientResponse(rsp *http.Response) (*CreateOAuth2ClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOAuth2ClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *OAuth2ClientCreationResponse `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *OAuth2ClientCreationResponse `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveOAuth2ClientResponse parses an HTTP response from a ArchiveOAuth2ClientWithResponse call
func ParseArchiveOAuth2ClientResponse(rsp *http.Response) (*ArchiveOAuth2ClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveOAuth2ClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *OAuth2Client    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *OAuth2Client    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetOAuth2ClientResponse parses an HTTP response from a GetOAuth2ClientWithResponse call
func ParseGetOAuth2ClientResponse(rsp *http.Response) (*GetOAuth2ClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOAuth2ClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *OAuth2Client    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *OAuth2Client    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetRecipesResponse parses an HTTP response from a GetRecipesWithResponse call
func ParseGetRecipesResponse(rsp *http.Response) (*GetRecipesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Recipe        `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Recipe        `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateRecipeResponse parses an HTTP response from a CreateRecipeWithResponse call
func ParseCreateRecipeResponse(rsp *http.Response) (*CreateRecipeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRecipeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Recipe          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Recipe          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseSearchForRecipesResponse parses an HTTP response from a SearchForRecipesWithResponse call
func ParseSearchForRecipesResponse(rsp *http.Response) (*SearchForRecipesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchForRecipesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Recipe          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Recipe          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveRecipeResponse parses an HTTP response from a ArchiveRecipeWithResponse call
func ParseArchiveRecipeResponse(rsp *http.Response) (*ArchiveRecipeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveRecipeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *Recipe          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *Recipe          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetRecipeResponse parses an HTTP response from a GetRecipeWithResponse call
func ParseGetRecipeResponse(rsp *http.Response) (*GetRecipeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Recipe          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Recipe          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateRecipeResponse parses an HTTP response from a UpdateRecipeWithResponse call
func ParseUpdateRecipeResponse(rsp *http.Response) (*UpdateRecipeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRecipeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Recipe          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Recipe          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCloneRecipeResponse parses an HTTP response from a CloneRecipeWithResponse call
func ParseCloneRecipeResponse(rsp *http.Response) (*CloneRecipeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CloneRecipeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Recipe          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Recipe          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetRecipeDAGResponse parses an HTTP response from a GetRecipeDAGWithResponse call
func ParseGetRecipeDAGResponse(rsp *http.Response) (*GetRecipeDAGResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipeDAGResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *APIError        `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *APIError        `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTRecipesRecipeIDImagesResponse parses an HTTP response from a POSTRecipesRecipeIDImagesWithResponse call
func ParsePOSTRecipesRecipeIDImagesResponse(rsp *http.Response) (*POSTRecipesRecipeIDImagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTRecipesRecipeIDImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGETRecipesRecipeIDMermaidResponse parses an HTTP response from a GETRecipesRecipeIDMermaidWithResponse call
func ParseGETRecipesRecipeIDMermaidResponse(rsp *http.Response) (*GETRecipesRecipeIDMermaidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETRecipesRecipeIDMermaidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRecipePrepTaskStepResponse parses an HTTP response from a GetRecipePrepTaskStepWithResponse call
func ParseGetRecipePrepTaskStepResponse(rsp *http.Response) (*GetRecipePrepTaskStepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipePrepTaskStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipePrepTaskStep `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipePrepTaskStep `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetRecipePrepTasksResponse parses an HTTP response from a GetRecipePrepTasksWithResponse call
func ParseGetRecipePrepTasksResponse(rsp *http.Response) (*GetRecipePrepTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipePrepTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipePrepTask `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipePrepTask `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateRecipePrepTaskResponse parses an HTTP response from a CreateRecipePrepTaskWithResponse call
func ParseCreateRecipePrepTaskResponse(rsp *http.Response) (*CreateRecipePrepTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRecipePrepTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipePrepTask  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipePrepTask  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveRecipePrepTaskResponse parses an HTTP response from a ArchiveRecipePrepTaskWithResponse call
func ParseArchiveRecipePrepTaskResponse(rsp *http.Response) (*ArchiveRecipePrepTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveRecipePrepTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipePrepTask  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipePrepTask  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetRecipePrepTaskResponse parses an HTTP response from a GetRecipePrepTaskWithResponse call
func ParseGetRecipePrepTaskResponse(rsp *http.Response) (*GetRecipePrepTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipePrepTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipePrepTask  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipePrepTask  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateRecipePrepTaskResponse parses an HTTP response from a UpdateRecipePrepTaskWithResponse call
func ParseUpdateRecipePrepTaskResponse(rsp *http.Response) (*UpdateRecipePrepTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRecipePrepTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipePrepTask  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipePrepTask  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetRecipeRatingsResponse parses an HTTP response from a GetRecipeRatingsWithResponse call
func ParseGetRecipeRatingsResponse(rsp *http.Response) (*GetRecipeRatingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipeRatingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeRating  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeRating  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateRecipeRatingResponse parses an HTTP response from a CreateRecipeRatingWithResponse call
func ParseCreateRecipeRatingResponse(rsp *http.Response) (*CreateRecipeRatingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRecipeRatingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeRating    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeRating    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveRecipeRatingResponse parses an HTTP response from a ArchiveRecipeRatingWithResponse call
func ParseArchiveRecipeRatingResponse(rsp *http.Response) (*ArchiveRecipeRatingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveRecipeRatingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeRating    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeRating    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetRecipeRatingResponse parses an HTTP response from a GetRecipeRatingWithResponse call
func ParseGetRecipeRatingResponse(rsp *http.Response) (*GetRecipeRatingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipeRatingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeRating    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeRating    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateRecipeRatingResponse parses an HTTP response from a UpdateRecipeRatingWithResponse call
func ParseUpdateRecipeRatingResponse(rsp *http.Response) (*UpdateRecipeRatingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRecipeRatingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeRating    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeRating    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetRecipeStepsResponse parses an HTTP response from a GetRecipeStepsWithResponse call
func ParseGetRecipeStepsResponse(rsp *http.Response) (*GetRecipeStepsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipeStepsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeStep    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeStep    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateRecipeStepResponse parses an HTTP response from a CreateRecipeStepWithResponse call
func ParseCreateRecipeStepResponse(rsp *http.Response) (*CreateRecipeStepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRecipeStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeStep      `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeStep      `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveRecipeStepResponse parses an HTTP response from a ArchiveRecipeStepWithResponse call
func ParseArchiveRecipeStepResponse(rsp *http.Response) (*ArchiveRecipeStepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveRecipeStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeStep      `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeStep      `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetRecipeStepResponse parses an HTTP response from a GetRecipeStepWithResponse call
func ParseGetRecipeStepResponse(rsp *http.Response) (*GetRecipeStepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipeStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStep      `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStep      `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateRecipeStepResponse parses an HTTP response from a UpdateRecipeStepWithResponse call
func ParseUpdateRecipeStepResponse(rsp *http.Response) (*UpdateRecipeStepResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRecipeStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStep      `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStep      `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetRecipeStepCompletionConditionsResponse parses an HTTP response from a GetRecipeStepCompletionConditionsWithResponse call
func ParseGetRecipeStepCompletionConditionsResponse(rsp *http.Response) (*GetRecipeStepCompletionConditionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipeStepCompletionConditionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeStepCompletionCondition `json:"data,omitempty"`
			Details    *ResponseDetails                 `json:"details,omitempty"`
			Error      *APIError                        `json:"error,omitempty"`
			Pagination *Pagination                      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeStepCompletionCondition `json:"data,omitempty"`
			Details    *ResponseDetails                 `json:"details,omitempty"`
			Error      *APIError                        `json:"error,omitempty"`
			Pagination *Pagination                      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateRecipeStepCompletionConditionResponse parses an HTTP response from a CreateRecipeStepCompletionConditionWithResponse call
func ParseCreateRecipeStepCompletionConditionResponse(rsp *http.Response) (*CreateRecipeStepCompletionConditionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRecipeStepCompletionConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
			Details    *ResponseDetails               `json:"details,omitempty"`
			Error      *APIError                      `json:"error,omitempty"`
			Pagination *Pagination                    `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
			Details    *ResponseDetails               `json:"details,omitempty"`
			Error      *APIError                      `json:"error,omitempty"`
			Pagination *Pagination                    `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveRecipeStepCompletionConditionResponse parses an HTTP response from a ArchiveRecipeStepCompletionConditionWithResponse call
func ParseArchiveRecipeStepCompletionConditionResponse(rsp *http.Response) (*ArchiveRecipeStepCompletionConditionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveRecipeStepCompletionConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
			Details    *ResponseDetails               `json:"details,omitempty"`
			Error      *APIError                      `json:"error,omitempty"`
			Pagination *Pagination                    `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
			Details    *ResponseDetails               `json:"details,omitempty"`
			Error      *APIError                      `json:"error,omitempty"`
			Pagination *Pagination                    `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetRecipeStepCompletionConditionResponse parses an HTTP response from a GetRecipeStepCompletionConditionWithResponse call
func ParseGetRecipeStepCompletionConditionResponse(rsp *http.Response) (*GetRecipeStepCompletionConditionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipeStepCompletionConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
			Details    *ResponseDetails               `json:"details,omitempty"`
			Error      *APIError                      `json:"error,omitempty"`
			Pagination *Pagination                    `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
			Details    *ResponseDetails               `json:"details,omitempty"`
			Error      *APIError                      `json:"error,omitempty"`
			Pagination *Pagination                    `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateRecipeStepCompletionConditionResponse parses an HTTP response from a UpdateRecipeStepCompletionConditionWithResponse call
func ParseUpdateRecipeStepCompletionConditionResponse(rsp *http.Response) (*UpdateRecipeStepCompletionConditionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRecipeStepCompletionConditionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
			Details    *ResponseDetails               `json:"details,omitempty"`
			Error      *APIError                      `json:"error,omitempty"`
			Pagination *Pagination                    `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
			Details    *ResponseDetails               `json:"details,omitempty"`
			Error      *APIError                      `json:"error,omitempty"`
			Pagination *Pagination                    `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTRecipesRecipeIDStepsRecipeStepIDImagesResponse parses an HTTP response from a POSTRecipesRecipeIDStepsRecipeStepIDImagesWithResponse call
func ParsePOSTRecipesRecipeIDStepsRecipeStepIDImagesResponse(rsp *http.Response) (*POSTRecipesRecipeIDStepsRecipeStepIDImagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTRecipesRecipeIDStepsRecipeStepIDImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetRecipeStepIngredientsResponse parses an HTTP response from a GetRecipeStepIngredientsWithResponse call
func ParseGetRecipeStepIngredientsResponse(rsp *http.Response) (*GetRecipeStepIngredientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipeStepIngredientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeStepIngredient `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeStepIngredient `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateRecipeStepIngredientResponse parses an HTTP response from a CreateRecipeStepIngredientWithResponse call
func ParseCreateRecipeStepIngredientResponse(rsp *http.Response) (*CreateRecipeStepIngredientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRecipeStepIngredientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeStepIngredient `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeStepIngredient `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveRecipeStepIngredientResponse parses an HTTP response from a ArchiveRecipeStepIngredientWithResponse call
func ParseArchiveRecipeStepIngredientResponse(rsp *http.Response) (*ArchiveRecipeStepIngredientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveRecipeStepIngredientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeStepIngredient `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeStepIngredient `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetRecipeStepIngredientResponse parses an HTTP response from a GetRecipeStepIngredientWithResponse call
func ParseGetRecipeStepIngredientResponse(rsp *http.Response) (*GetRecipeStepIngredientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipeStepIngredientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepIngredient `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepIngredient `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateRecipeStepIngredientResponse parses an HTTP response from a UpdateRecipeStepIngredientWithResponse call
func ParseUpdateRecipeStepIngredientResponse(rsp *http.Response) (*UpdateRecipeStepIngredientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRecipeStepIngredientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepIngredient `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepIngredient `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetRecipeStepInstrumentsResponse parses an HTTP response from a GetRecipeStepInstrumentsWithResponse call
func ParseGetRecipeStepInstrumentsResponse(rsp *http.Response) (*GetRecipeStepInstrumentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipeStepInstrumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeStepInstrument `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeStepInstrument `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateRecipeStepInstrumentResponse parses an HTTP response from a CreateRecipeStepInstrumentWithResponse call
func ParseCreateRecipeStepInstrumentResponse(rsp *http.Response) (*CreateRecipeStepInstrumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRecipeStepInstrumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeStepInstrument `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeStepInstrument `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveRecipeStepInstrumentResponse parses an HTTP response from a ArchiveRecipeStepInstrumentWithResponse call
func ParseArchiveRecipeStepInstrumentResponse(rsp *http.Response) (*ArchiveRecipeStepInstrumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveRecipeStepInstrumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeStepInstrument `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeStepInstrument `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetRecipeStepInstrumentResponse parses an HTTP response from a GetRecipeStepInstrumentWithResponse call
func ParseGetRecipeStepInstrumentResponse(rsp *http.Response) (*GetRecipeStepInstrumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipeStepInstrumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepInstrument `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepInstrument `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateRecipeStepInstrumentResponse parses an HTTP response from a UpdateRecipeStepInstrumentWithResponse call
func ParseUpdateRecipeStepInstrumentResponse(rsp *http.Response) (*UpdateRecipeStepInstrumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRecipeStepInstrumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepInstrument `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepInstrument `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetRecipeStepProductsResponse parses an HTTP response from a GetRecipeStepProductsWithResponse call
func ParseGetRecipeStepProductsResponse(rsp *http.Response) (*GetRecipeStepProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipeStepProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeStepProduct `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeStepProduct `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateRecipeStepProductResponse parses an HTTP response from a CreateRecipeStepProductWithResponse call
func ParseCreateRecipeStepProductResponse(rsp *http.Response) (*CreateRecipeStepProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRecipeStepProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeStepProduct `json:"data,omitempty"`
			Details    *ResponseDetails   `json:"details,omitempty"`
			Error      *APIError          `json:"error,omitempty"`
			Pagination *Pagination        `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeStepProduct `json:"data,omitempty"`
			Details    *ResponseDetails   `json:"details,omitempty"`
			Error      *APIError          `json:"error,omitempty"`
			Pagination *Pagination        `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveRecipeStepProductResponse parses an HTTP response from a ArchiveRecipeStepProductWithResponse call
func ParseArchiveRecipeStepProductResponse(rsp *http.Response) (*ArchiveRecipeStepProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveRecipeStepProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeStepProduct `json:"data,omitempty"`
			Details    *ResponseDetails   `json:"details,omitempty"`
			Error      *APIError          `json:"error,omitempty"`
			Pagination *Pagination        `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeStepProduct `json:"data,omitempty"`
			Details    *ResponseDetails   `json:"details,omitempty"`
			Error      *APIError          `json:"error,omitempty"`
			Pagination *Pagination        `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetRecipeStepProductResponse parses an HTTP response from a GetRecipeStepProductWithResponse call
func ParseGetRecipeStepProductResponse(rsp *http.Response) (*GetRecipeStepProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipeStepProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepProduct `json:"data,omitempty"`
			Details    *ResponseDetails   `json:"details,omitempty"`
			Error      *APIError          `json:"error,omitempty"`
			Pagination *Pagination        `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepProduct `json:"data,omitempty"`
			Details    *ResponseDetails   `json:"details,omitempty"`
			Error      *APIError          `json:"error,omitempty"`
			Pagination *Pagination        `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateRecipeStepProductResponse parses an HTTP response from a UpdateRecipeStepProductWithResponse call
func ParseUpdateRecipeStepProductResponse(rsp *http.Response) (*UpdateRecipeStepProductResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRecipeStepProductResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepProduct `json:"data,omitempty"`
			Details    *ResponseDetails   `json:"details,omitempty"`
			Error      *APIError          `json:"error,omitempty"`
			Pagination *Pagination        `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepProduct `json:"data,omitempty"`
			Details    *ResponseDetails   `json:"details,omitempty"`
			Error      *APIError          `json:"error,omitempty"`
			Pagination *Pagination        `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetRecipeStepVesselsResponse parses an HTTP response from a GetRecipeStepVesselsWithResponse call
func ParseGetRecipeStepVesselsResponse(rsp *http.Response) (*GetRecipeStepVesselsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipeStepVesselsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeStepVessel `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeStepVessel `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateRecipeStepVesselResponse parses an HTTP response from a CreateRecipeStepVesselWithResponse call
func ParseCreateRecipeStepVesselResponse(rsp *http.Response) (*CreateRecipeStepVesselResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateRecipeStepVesselResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeStepVessel `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeStepVessel `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveRecipeStepVesselResponse parses an HTTP response from a ArchiveRecipeStepVesselWithResponse call
func ParseArchiveRecipeStepVesselResponse(rsp *http.Response) (*ArchiveRecipeStepVesselResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveRecipeStepVesselResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeStepVessel `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeStepVessel `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetRecipeStepVesselResponse parses an HTTP response from a GetRecipeStepVesselWithResponse call
func ParseGetRecipeStepVesselResponse(rsp *http.Response) (*GetRecipeStepVesselResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecipeStepVesselResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepVessel `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepVessel `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateRecipeStepVesselResponse parses an HTTP response from a UpdateRecipeStepVesselWithResponse call
func ParseUpdateRecipeStepVesselResponse(rsp *http.Response) (*UpdateRecipeStepVesselResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateRecipeStepVesselResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepVessel `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepVessel `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetServiceSettingsResponse parses an HTTP response from a GetServiceSettingsWithResponse call
func ParseGetServiceSettingsResponse(rsp *http.Response) (*GetServiceSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ServiceSetting `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ServiceSetting `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateServiceSettingResponse parses an HTTP response from a CreateServiceSettingWithResponse call
func ParseCreateServiceSettingResponse(rsp *http.Response) (*CreateServiceSettingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateServiceSettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ServiceSetting  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ServiceSetting  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateServiceSettingConfigurationResponse parses an HTTP response from a CreateServiceSettingConfigurationWithResponse call
func ParseCreateServiceSettingConfigurationResponse(rsp *http.Response) (*CreateServiceSettingConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateServiceSettingConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ServiceSettingConfiguration `json:"data,omitempty"`
			Details    *ResponseDetails             `json:"details,omitempty"`
			Error      *APIError                    `json:"error,omitempty"`
			Pagination *Pagination                  `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ServiceSettingConfiguration `json:"data,omitempty"`
			Details    *ResponseDetails             `json:"details,omitempty"`
			Error      *APIError                    `json:"error,omitempty"`
			Pagination *Pagination                  `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetServiceSettingConfigurationsForHouseholdResponse parses an HTTP response from a GetServiceSettingConfigurationsForHouseholdWithResponse call
func ParseGetServiceSettingConfigurationsForHouseholdResponse(rsp *http.Response) (*GetServiceSettingConfigurationsForHouseholdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceSettingConfigurationsForHouseholdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ServiceSettingConfiguration `json:"data,omitempty"`
			Details    *ResponseDetails             `json:"details,omitempty"`
			Error      *APIError                    `json:"error,omitempty"`
			Pagination *Pagination                  `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ServiceSettingConfiguration `json:"data,omitempty"`
			Details    *ResponseDetails             `json:"details,omitempty"`
			Error      *APIError                    `json:"error,omitempty"`
			Pagination *Pagination                  `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetServiceSettingConfigurationsForUserResponse parses an HTTP response from a GetServiceSettingConfigurationsForUserWithResponse call
func ParseGetServiceSettingConfigurationsForUserResponse(rsp *http.Response) (*GetServiceSettingConfigurationsForUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceSettingConfigurationsForUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ServiceSettingConfiguration `json:"data,omitempty"`
			Details    *ResponseDetails             `json:"details,omitempty"`
			Error      *APIError                    `json:"error,omitempty"`
			Pagination *Pagination                  `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ServiceSettingConfiguration `json:"data,omitempty"`
			Details    *ResponseDetails             `json:"details,omitempty"`
			Error      *APIError                    `json:"error,omitempty"`
			Pagination *Pagination                  `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetServiceSettingConfigurationResponse parses an HTTP response from a GetServiceSettingConfigurationWithResponse call
func ParseGetServiceSettingConfigurationResponse(rsp *http.Response) (*GetServiceSettingConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceSettingConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ServiceSettingConfiguration `json:"data,omitempty"`
			Details    *ResponseDetails             `json:"details,omitempty"`
			Error      *APIError                    `json:"error,omitempty"`
			Pagination *Pagination                  `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ServiceSettingConfiguration `json:"data,omitempty"`
			Details    *ResponseDetails             `json:"details,omitempty"`
			Error      *APIError                    `json:"error,omitempty"`
			Pagination *Pagination                  `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveServiceSettingConfigurationResponse parses an HTTP response from a ArchiveServiceSettingConfigurationWithResponse call
func ParseArchiveServiceSettingConfigurationResponse(rsp *http.Response) (*ArchiveServiceSettingConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveServiceSettingConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ServiceSettingConfiguration `json:"data,omitempty"`
			Details    *ResponseDetails             `json:"details,omitempty"`
			Error      *APIError                    `json:"error,omitempty"`
			Pagination *Pagination                  `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ServiceSettingConfiguration `json:"data,omitempty"`
			Details    *ResponseDetails             `json:"details,omitempty"`
			Error      *APIError                    `json:"error,omitempty"`
			Pagination *Pagination                  `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateServiceSettingConfigurationResponse parses an HTTP response from a UpdateServiceSettingConfigurationWithResponse call
func ParseUpdateServiceSettingConfigurationResponse(rsp *http.Response) (*UpdateServiceSettingConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateServiceSettingConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ServiceSettingConfiguration `json:"data,omitempty"`
			Details    *ResponseDetails             `json:"details,omitempty"`
			Error      *APIError                    `json:"error,omitempty"`
			Pagination *Pagination                  `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ServiceSettingConfiguration `json:"data,omitempty"`
			Details    *ResponseDetails             `json:"details,omitempty"`
			Error      *APIError                    `json:"error,omitempty"`
			Pagination *Pagination                  `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseSearchForServiceSettingsResponse parses an HTTP response from a SearchForServiceSettingsWithResponse call
func ParseSearchForServiceSettingsResponse(rsp *http.Response) (*SearchForServiceSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchForServiceSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ServiceSetting  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ServiceSetting  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveServiceSettingResponse parses an HTTP response from a ArchiveServiceSettingWithResponse call
func ParseArchiveServiceSettingResponse(rsp *http.Response) (*ArchiveServiceSettingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveServiceSettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ServiceSetting  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ServiceSetting  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetServiceSettingResponse parses an HTTP response from a GetServiceSettingWithResponse call
func ParseGetServiceSettingResponse(rsp *http.Response) (*GetServiceSettingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServiceSettingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ServiceSetting  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ServiceSetting  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetUserIngredientPreferencesResponse parses an HTTP response from a GetUserIngredientPreferencesWithResponse call
func ParseGetUserIngredientPreferencesResponse(rsp *http.Response) (*GetUserIngredientPreferencesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserIngredientPreferencesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]UserIngredientPreference `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]UserIngredientPreference `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateUserIngredientPreferenceResponse parses an HTTP response from a CreateUserIngredientPreferenceWithResponse call
func ParseCreateUserIngredientPreferenceResponse(rsp *http.Response) (*CreateUserIngredientPreferenceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserIngredientPreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserIngredientPreference `json:"data,omitempty"`
			Details    *ResponseDetails          `json:"details,omitempty"`
			Error      *APIError                 `json:"error,omitempty"`
			Pagination *Pagination               `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserIngredientPreference `json:"data,omitempty"`
			Details    *ResponseDetails          `json:"details,omitempty"`
			Error      *APIError                 `json:"error,omitempty"`
			Pagination *Pagination               `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveUserIngredientPreferenceResponse parses an HTTP response from a ArchiveUserIngredientPreferenceWithResponse call
func ParseArchiveUserIngredientPreferenceResponse(rsp *http.Response) (*ArchiveUserIngredientPreferenceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveUserIngredientPreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *UserIngredientPreference `json:"data,omitempty"`
			Details    *ResponseDetails          `json:"details,omitempty"`
			Error      *APIError                 `json:"error,omitempty"`
			Pagination *Pagination               `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *UserIngredientPreference `json:"data,omitempty"`
			Details    *ResponseDetails          `json:"details,omitempty"`
			Error      *APIError                 `json:"error,omitempty"`
			Pagination *Pagination               `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateUserIngredientPreferenceResponse parses an HTTP response from a UpdateUserIngredientPreferenceWithResponse call
func ParseUpdateUserIngredientPreferenceResponse(rsp *http.Response) (*UpdateUserIngredientPreferenceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserIngredientPreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *UserIngredientPreference `json:"data,omitempty"`
			Details    *ResponseDetails          `json:"details,omitempty"`
			Error      *APIError                 `json:"error,omitempty"`
			Pagination *Pagination               `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *UserIngredientPreference `json:"data,omitempty"`
			Details    *ResponseDetails          `json:"details,omitempty"`
			Error      *APIError                 `json:"error,omitempty"`
			Pagination *Pagination               `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetUserNotificationsResponse parses an HTTP response from a GetUserNotificationsWithResponse call
func ParseGetUserNotificationsResponse(rsp *http.Response) (*GetUserNotificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]UserNotification `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]UserNotification `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateUserNotificationResponse parses an HTTP response from a CreateUserNotificationWithResponse call
func ParseCreateUserNotificationResponse(rsp *http.Response) (*CreateUserNotificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserNotificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserNotification `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserNotification `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetUserNotificationResponse parses an HTTP response from a GetUserNotificationWithResponse call
func ParseGetUserNotificationResponse(rsp *http.Response) (*GetUserNotificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserNotificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *UserNotification `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *UserNotification `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateUserNotificationResponse parses an HTTP response from a UpdateUserNotificationWithResponse call
func ParseUpdateUserNotificationResponse(rsp *http.Response) (*UpdateUserNotificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserNotificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *UserNotification `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *UserNotification `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]User          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]User          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUploadUserAvatarResponse parses an HTTP response from a UploadUserAvatarWithResponse call
func ParseUploadUserAvatarResponse(rsp *http.Response) (*UploadUserAvatarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadUserAvatarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateUserDetailsResponse parses an HTTP response from a UpdateUserDetailsWithResponse call
func ParseUpdateUserDetailsResponse(rsp *http.Response) (*UpdateUserDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateUserEmailAddressResponse parses an HTTP response from a UpdateUserEmailAddressWithResponse call
func ParseUpdateUserEmailAddressResponse(rsp *http.Response) (*UpdateUserEmailAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserEmailAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseVerifyUserEmailAddressResponse parses an HTTP response from a VerifyUserEmailAddressWithResponse call
func ParseVerifyUserEmailAddressResponse(rsp *http.Response) (*VerifyUserEmailAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyUserEmailAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateDefaultHouseholdResponse parses an HTTP response from a UpdateDefaultHouseholdWithResponse call
func ParseUpdateDefaultHouseholdResponse(rsp *http.Response) (*UpdateDefaultHouseholdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDefaultHouseholdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdatePasswordResponse parses an HTTP response from a UpdatePasswordWithResponse call
func ParseUpdatePasswordResponse(rsp *http.Response) (*UpdatePasswordResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePasswordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCheckPermissionsResponse parses an HTTP response from a CheckPermissionsWithResponse call
func ParseCheckPermissionsResponse(rsp *http.Response) (*CheckPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserPermissionsResponse `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserPermissionsResponse `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseSearchForUsersResponse parses an HTTP response from a SearchForUsersWithResponse call
func ParseSearchForUsersResponse(rsp *http.Response) (*SearchForUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchForUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]User          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]User          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetSelfResponse parses an HTTP response from a GetSelfWithResponse call
func ParseGetSelfResponse(rsp *http.Response) (*GetSelfResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSelfResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseRefreshTOTPSecretResponse parses an HTTP response from a RefreshTOTPSecretWithResponse call
func ParseRefreshTOTPSecretResponse(rsp *http.Response) (*RefreshTOTPSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RefreshTOTPSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *TOTPSecretRefreshResponse `json:"data,omitempty"`
			Details    *ResponseDetails           `json:"details,omitempty"`
			Error      *APIError                  `json:"error,omitempty"`
			Pagination *Pagination                `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *TOTPSecretRefreshResponse `json:"data,omitempty"`
			Details    *ResponseDetails           `json:"details,omitempty"`
			Error      *APIError                  `json:"error,omitempty"`
			Pagination *Pagination                `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateUserUsernameResponse parses an HTTP response from a UpdateUserUsernameWithResponse call
func ParseUpdateUserUsernameResponse(rsp *http.Response) (*UpdateUserUsernameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveUserResponse parses an HTTP response from a ArchiveUserWithResponse call
func ParseArchiveUserResponse(rsp *http.Response) (*ArchiveUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidIngredientGroupsResponse parses an HTTP response from a GetValidIngredientGroupsWithResponse call
func ParseGetValidIngredientGroupsResponse(rsp *http.Response) (*GetValidIngredientGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidIngredientGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidIngredientGroup `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidIngredientGroup `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateValidIngredientGroupResponse parses an HTTP response from a CreateValidIngredientGroupWithResponse call
func ParseCreateValidIngredientGroupResponse(rsp *http.Response) (*CreateValidIngredientGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateValidIngredientGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidIngredientGroup `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidIngredientGroup `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseSearchForValidIngredientGroupsResponse parses an HTTP response from a SearchForValidIngredientGroupsWithResponse call
func ParseSearchForValidIngredientGroupsResponse(rsp *http.Response) (*SearchForValidIngredientGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchForValidIngredientGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientGroup `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientGroup `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveValidIngredientGroupResponse parses an HTTP response from a ArchiveValidIngredientGroupWithResponse call
func ParseArchiveValidIngredientGroupResponse(rsp *http.Response) (*ArchiveValidIngredientGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveValidIngredientGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidIngredientGroup `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidIngredientGroup `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidIngredientGroupResponse parses an HTTP response from a GetValidIngredientGroupWithResponse call
func ParseGetValidIngredientGroupResponse(rsp *http.Response) (*GetValidIngredientGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidIngredientGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientGroup `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientGroup `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateValidIngredientGroupResponse parses an HTTP response from a UpdateValidIngredientGroupWithResponse call
func ParseUpdateValidIngredientGroupResponse(rsp *http.Response) (*UpdateValidIngredientGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateValidIngredientGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientGroup `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientGroup `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidIngredientMeasurementUnitsResponse parses an HTTP response from a GetValidIngredientMeasurementUnitsWithResponse call
func ParseGetValidIngredientMeasurementUnitsResponse(rsp *http.Response) (*GetValidIngredientMeasurementUnitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidIngredientMeasurementUnitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                  `json:"details,omitempty"`
			Error      *APIError                         `json:"error,omitempty"`
			Pagination *Pagination                       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                  `json:"details,omitempty"`
			Error      *APIError                         `json:"error,omitempty"`
			Pagination *Pagination                       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateValidIngredientMeasurementUnitResponse parses an HTTP response from a CreateValidIngredientMeasurementUnitWithResponse call
func ParseCreateValidIngredientMeasurementUnitResponse(rsp *http.Response) (*CreateValidIngredientMeasurementUnitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateValidIngredientMeasurementUnitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidIngredientMeasurementUnitsByIngredientResponse parses an HTTP response from a GetValidIngredientMeasurementUnitsByIngredientWithResponse call
func ParseGetValidIngredientMeasurementUnitsByIngredientResponse(rsp *http.Response) (*GetValidIngredientMeasurementUnitsByIngredientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidIngredientMeasurementUnitsByIngredientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidIngredientMeasurementUnitsByMeasurementUnitResponse parses an HTTP response from a GetValidIngredientMeasurementUnitsByMeasurementUnitWithResponse call
func ParseGetValidIngredientMeasurementUnitsByMeasurementUnitResponse(rsp *http.Response) (*GetValidIngredientMeasurementUnitsByMeasurementUnitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidIngredientMeasurementUnitsByMeasurementUnitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveValidIngredientMeasurementUnitResponse parses an HTTP response from a ArchiveValidIngredientMeasurementUnitWithResponse call
func ParseArchiveValidIngredientMeasurementUnitResponse(rsp *http.Response) (*ArchiveValidIngredientMeasurementUnitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveValidIngredientMeasurementUnitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidIngredientMeasurementUnitResponse parses an HTTP response from a GetValidIngredientMeasurementUnitWithResponse call
func ParseGetValidIngredientMeasurementUnitResponse(rsp *http.Response) (*GetValidIngredientMeasurementUnitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidIngredientMeasurementUnitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateValidIngredientMeasurementUnitResponse parses an HTTP response from a UpdateValidIngredientMeasurementUnitWithResponse call
func ParseUpdateValidIngredientMeasurementUnitResponse(rsp *http.Response) (*UpdateValidIngredientMeasurementUnitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateValidIngredientMeasurementUnitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidIngredientPreparationsResponse parses an HTTP response from a GetValidIngredientPreparationsWithResponse call
func ParseGetValidIngredientPreparationsResponse(rsp *http.Response) (*GetValidIngredientPreparationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidIngredientPreparationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateValidIngredientPreparationResponse parses an HTTP response from a CreateValidIngredientPreparationWithResponse call
func ParseCreateValidIngredientPreparationResponse(rsp *http.Response) (*CreateValidIngredientPreparationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateValidIngredientPreparationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidIngredientPreparationsByIngredientResponse parses an HTTP response from a GetValidIngredientPreparationsByIngredientWithResponse call
func ParseGetValidIngredientPreparationsByIngredientResponse(rsp *http.Response) (*GetValidIngredientPreparationsByIngredientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidIngredientPreparationsByIngredientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidIngredientPreparationsByPreparationResponse parses an HTTP response from a GetValidIngredientPreparationsByPreparationWithResponse call
func ParseGetValidIngredientPreparationsByPreparationResponse(rsp *http.Response) (*GetValidIngredientPreparationsByPreparationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidIngredientPreparationsByPreparationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveValidIngredientPreparationResponse parses an HTTP response from a ArchiveValidIngredientPreparationWithResponse call
func ParseArchiveValidIngredientPreparationResponse(rsp *http.Response) (*ArchiveValidIngredientPreparationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveValidIngredientPreparationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidIngredientPreparationResponse parses an HTTP response from a GetValidIngredientPreparationWithResponse call
func ParseGetValidIngredientPreparationResponse(rsp *http.Response) (*GetValidIngredientPreparationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidIngredientPreparationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateValidIngredientPreparationResponse parses an HTTP response from a UpdateValidIngredientPreparationWithResponse call
func ParseUpdateValidIngredientPreparationResponse(rsp *http.Response) (*UpdateValidIngredientPreparationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateValidIngredientPreparationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidIngredientStateIngredientsResponse parses an HTTP response from a GetValidIngredientStateIngredientsWithResponse call
func ParseGetValidIngredientStateIngredientsResponse(rsp *http.Response) (*GetValidIngredientStateIngredientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidIngredientStateIngredientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                  `json:"details,omitempty"`
			Error      *APIError                         `json:"error,omitempty"`
			Pagination *Pagination                       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                  `json:"details,omitempty"`
			Error      *APIError                         `json:"error,omitempty"`
			Pagination *Pagination                       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateValidIngredientStateIngredientResponse parses an HTTP response from a CreateValidIngredientStateIngredientWithResponse call
func ParseCreateValidIngredientStateIngredientResponse(rsp *http.Response) (*CreateValidIngredientStateIngredientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateValidIngredientStateIngredientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidIngredientStateIngredientsByIngredientResponse parses an HTTP response from a GetValidIngredientStateIngredientsByIngredientWithResponse call
func ParseGetValidIngredientStateIngredientsByIngredientResponse(rsp *http.Response) (*GetValidIngredientStateIngredientsByIngredientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidIngredientStateIngredientsByIngredientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidIngredientStateIngredientsByIngredientStateResponse parses an HTTP response from a GetValidIngredientStateIngredientsByIngredientStateWithResponse call
func ParseGetValidIngredientStateIngredientsByIngredientStateResponse(rsp *http.Response) (*GetValidIngredientStateIngredientsByIngredientStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidIngredientStateIngredientsByIngredientStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveValidIngredientStateIngredientResponse parses an HTTP response from a ArchiveValidIngredientStateIngredientWithResponse call
func ParseArchiveValidIngredientStateIngredientResponse(rsp *http.Response) (*ArchiveValidIngredientStateIngredientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveValidIngredientStateIngredientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidIngredientStateIngredientResponse parses an HTTP response from a GetValidIngredientStateIngredientWithResponse call
func ParseGetValidIngredientStateIngredientResponse(rsp *http.Response) (*GetValidIngredientStateIngredientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidIngredientStateIngredientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateValidIngredientStateIngredientResponse parses an HTTP response from a UpdateValidIngredientStateIngredientWithResponse call
func ParseUpdateValidIngredientStateIngredientResponse(rsp *http.Response) (*UpdateValidIngredientStateIngredientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateValidIngredientStateIngredientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidIngredientStatesResponse parses an HTTP response from a GetValidIngredientStatesWithResponse call
func ParseGetValidIngredientStatesResponse(rsp *http.Response) (*GetValidIngredientStatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidIngredientStatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidIngredientState `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidIngredientState `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateValidIngredientStateResponse parses an HTTP response from a CreateValidIngredientStateWithResponse call
func ParseCreateValidIngredientStateResponse(rsp *http.Response) (*CreateValidIngredientStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateValidIngredientStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidIngredientState `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidIngredientState `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseSearchForValidIngredientStatesResponse parses an HTTP response from a SearchForValidIngredientStatesWithResponse call
func ParseSearchForValidIngredientStatesResponse(rsp *http.Response) (*SearchForValidIngredientStatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchForValidIngredientStatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientState `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientState `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveValidIngredientStateResponse parses an HTTP response from a ArchiveValidIngredientStateWithResponse call
func ParseArchiveValidIngredientStateResponse(rsp *http.Response) (*ArchiveValidIngredientStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveValidIngredientStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidIngredientState `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidIngredientState `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidIngredientStateResponse parses an HTTP response from a GetValidIngredientStateWithResponse call
func ParseGetValidIngredientStateResponse(rsp *http.Response) (*GetValidIngredientStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidIngredientStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientState `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientState `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateValidIngredientStateResponse parses an HTTP response from a UpdateValidIngredientStateWithResponse call
func ParseUpdateValidIngredientStateResponse(rsp *http.Response) (*UpdateValidIngredientStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateValidIngredientStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientState `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientState `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidIngredientsResponse parses an HTTP response from a GetValidIngredientsWithResponse call
func ParseGetValidIngredientsResponse(rsp *http.Response) (*GetValidIngredientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidIngredientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails   `json:"details,omitempty"`
			Error      *APIError          `json:"error,omitempty"`
			Pagination *Pagination        `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails   `json:"details,omitempty"`
			Error      *APIError          `json:"error,omitempty"`
			Pagination *Pagination        `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateValidIngredientResponse parses an HTTP response from a CreateValidIngredientWithResponse call
func ParseCreateValidIngredientResponse(rsp *http.Response) (*CreateValidIngredientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateValidIngredientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidIngredientsByPreparationResponse parses an HTTP response from a GetValidIngredientsByPreparationWithResponse call
func ParseGetValidIngredientsByPreparationResponse(rsp *http.Response) (*GetValidIngredientsByPreparationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidIngredientsByPreparationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetRandomValidIngredientResponse parses an HTTP response from a GetRandomValidIngredientWithResponse call
func ParseGetRandomValidIngredientResponse(rsp *http.Response) (*GetRandomValidIngredientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRandomValidIngredientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseSearchForValidIngredientsResponse parses an HTTP response from a SearchForValidIngredientsWithResponse call
func ParseSearchForValidIngredientsResponse(rsp *http.Response) (*SearchForValidIngredientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchForValidIngredientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveValidIngredientResponse parses an HTTP response from a ArchiveValidIngredientWithResponse call
func ParseArchiveValidIngredientResponse(rsp *http.Response) (*ArchiveValidIngredientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveValidIngredientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidIngredientResponse parses an HTTP response from a GetValidIngredientWithResponse call
func ParseGetValidIngredientResponse(rsp *http.Response) (*GetValidIngredientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidIngredientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateValidIngredientResponse parses an HTTP response from a UpdateValidIngredientWithResponse call
func ParseUpdateValidIngredientResponse(rsp *http.Response) (*UpdateValidIngredientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateValidIngredientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidInstrumentsResponse parses an HTTP response from a GetValidInstrumentsWithResponse call
func ParseGetValidInstrumentsResponse(rsp *http.Response) (*GetValidInstrumentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidInstrumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails   `json:"details,omitempty"`
			Error      *APIError          `json:"error,omitempty"`
			Pagination *Pagination        `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails   `json:"details,omitempty"`
			Error      *APIError          `json:"error,omitempty"`
			Pagination *Pagination        `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateValidInstrumentResponse parses an HTTP response from a CreateValidInstrumentWithResponse call
func ParseCreateValidInstrumentResponse(rsp *http.Response) (*CreateValidInstrumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateValidInstrumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetRandomValidInstrumentResponse parses an HTTP response from a GetRandomValidInstrumentWithResponse call
func ParseGetRandomValidInstrumentResponse(rsp *http.Response) (*GetRandomValidInstrumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRandomValidInstrumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseSearchForValidInstrumentsResponse parses an HTTP response from a SearchForValidInstrumentsWithResponse call
func ParseSearchForValidInstrumentsResponse(rsp *http.Response) (*SearchForValidInstrumentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchForValidInstrumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveValidInstrumentResponse parses an HTTP response from a ArchiveValidInstrumentWithResponse call
func ParseArchiveValidInstrumentResponse(rsp *http.Response) (*ArchiveValidInstrumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveValidInstrumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidInstrumentResponse parses an HTTP response from a GetValidInstrumentWithResponse call
func ParseGetValidInstrumentResponse(rsp *http.Response) (*GetValidInstrumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidInstrumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateValidInstrumentResponse parses an HTTP response from a UpdateValidInstrumentWithResponse call
func ParseUpdateValidInstrumentResponse(rsp *http.Response) (*UpdateValidInstrumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateValidInstrumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateValidMeasurementUnitConversionResponse parses an HTTP response from a CreateValidMeasurementUnitConversionWithResponse call
func ParseCreateValidMeasurementUnitConversionResponse(rsp *http.Response) (*CreateValidMeasurementUnitConversionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateValidMeasurementUnitConversionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidMeasurementUnitConversionsFromUnitResponse parses an HTTP response from a GetValidMeasurementUnitConversionsFromUnitWithResponse call
func ParseGetValidMeasurementUnitConversionsFromUnitResponse(rsp *http.Response) (*GetValidMeasurementUnitConversionsFromUnitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidMeasurementUnitConversionsFromUnitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseValidMeasurementUnitConversionsToUnitResponse parses an HTTP response from a ValidMeasurementUnitConversionsToUnitWithResponse call
func ParseValidMeasurementUnitConversionsToUnitResponse(rsp *http.Response) (*ValidMeasurementUnitConversionsToUnitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidMeasurementUnitConversionsToUnitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveValidMeasurementUnitConversionResponse parses an HTTP response from a ArchiveValidMeasurementUnitConversionWithResponse call
func ParseArchiveValidMeasurementUnitConversionResponse(rsp *http.Response) (*ArchiveValidMeasurementUnitConversionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveValidMeasurementUnitConversionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidMeasurementUnitConversionResponse parses an HTTP response from a GetValidMeasurementUnitConversionWithResponse call
func ParseGetValidMeasurementUnitConversionResponse(rsp *http.Response) (*GetValidMeasurementUnitConversionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidMeasurementUnitConversionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateValidMeasurementUnitConversionResponse parses an HTTP response from a UpdateValidMeasurementUnitConversionWithResponse call
func ParseUpdateValidMeasurementUnitConversionResponse(rsp *http.Response) (*UpdateValidMeasurementUnitConversionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateValidMeasurementUnitConversionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidMeasurementUnitsResponse parses an HTTP response from a GetValidMeasurementUnitsWithResponse call
func ParseGetValidMeasurementUnitsResponse(rsp *http.Response) (*GetValidMeasurementUnitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidMeasurementUnitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateValidMeasurementUnitResponse parses an HTTP response from a CreateValidMeasurementUnitWithResponse call
func ParseCreateValidMeasurementUnitResponse(rsp *http.Response) (*CreateValidMeasurementUnitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateValidMeasurementUnitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidMeasurementUnitsByIngredientResponse parses an HTTP response from a GetValidMeasurementUnitsByIngredientWithResponse call
func ParseGetValidMeasurementUnitsByIngredientResponse(rsp *http.Response) (*GetValidMeasurementUnitsByIngredientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidMeasurementUnitsByIngredientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseSearchForValidMeasurementUnitsResponse parses an HTTP response from a SearchForValidMeasurementUnitsWithResponse call
func ParseSearchForValidMeasurementUnitsResponse(rsp *http.Response) (*SearchForValidMeasurementUnitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchForValidMeasurementUnitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveValidMeasurementUnitResponse parses an HTTP response from a ArchiveValidMeasurementUnitWithResponse call
func ParseArchiveValidMeasurementUnitResponse(rsp *http.Response) (*ArchiveValidMeasurementUnitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveValidMeasurementUnitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidMeasurementUnitResponse parses an HTTP response from a GetValidMeasurementUnitWithResponse call
func ParseGetValidMeasurementUnitResponse(rsp *http.Response) (*GetValidMeasurementUnitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidMeasurementUnitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateValidMeasurementUnitResponse parses an HTTP response from a UpdateValidMeasurementUnitWithResponse call
func ParseUpdateValidMeasurementUnitResponse(rsp *http.Response) (*UpdateValidMeasurementUnitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateValidMeasurementUnitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidPreparationInstrumentsResponse parses an HTTP response from a GetValidPreparationInstrumentsWithResponse call
func ParseGetValidPreparationInstrumentsResponse(rsp *http.Response) (*GetValidPreparationInstrumentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidPreparationInstrumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateValidPreparationInstrumentResponse parses an HTTP response from a CreateValidPreparationInstrumentWithResponse call
func ParseCreateValidPreparationInstrumentResponse(rsp *http.Response) (*CreateValidPreparationInstrumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateValidPreparationInstrumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidPreparationInstrumentsByInstrumentResponse parses an HTTP response from a GetValidPreparationInstrumentsByInstrumentWithResponse call
func ParseGetValidPreparationInstrumentsByInstrumentResponse(rsp *http.Response) (*GetValidPreparationInstrumentsByInstrumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidPreparationInstrumentsByInstrumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidPreparationInstrumentsByPreparationResponse parses an HTTP response from a GetValidPreparationInstrumentsByPreparationWithResponse call
func ParseGetValidPreparationInstrumentsByPreparationResponse(rsp *http.Response) (*GetValidPreparationInstrumentsByPreparationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidPreparationInstrumentsByPreparationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveValidPreparationInstrumentResponse parses an HTTP response from a ArchiveValidPreparationInstrumentWithResponse call
func ParseArchiveValidPreparationInstrumentResponse(rsp *http.Response) (*ArchiveValidPreparationInstrumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveValidPreparationInstrumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidPreparationInstrumentResponse parses an HTTP response from a GetValidPreparationInstrumentWithResponse call
func ParseGetValidPreparationInstrumentResponse(rsp *http.Response) (*GetValidPreparationInstrumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidPreparationInstrumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateValidPreparationInstrumentResponse parses an HTTP response from a UpdateValidPreparationInstrumentWithResponse call
func ParseUpdateValidPreparationInstrumentResponse(rsp *http.Response) (*UpdateValidPreparationInstrumentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateValidPreparationInstrumentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidPreparationVesselsResponse parses an HTTP response from a GetValidPreparationVesselsWithResponse call
func ParseGetValidPreparationVesselsResponse(rsp *http.Response) (*GetValidPreparationVesselsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidPreparationVesselsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails          `json:"details,omitempty"`
			Error      *APIError                 `json:"error,omitempty"`
			Pagination *Pagination               `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails          `json:"details,omitempty"`
			Error      *APIError                 `json:"error,omitempty"`
			Pagination *Pagination               `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateValidPreparationVesselResponse parses an HTTP response from a CreateValidPreparationVesselWithResponse call
func ParseCreateValidPreparationVesselResponse(rsp *http.Response) (*CreateValidPreparationVesselResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateValidPreparationVesselResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidPreparationVesselsByPreparationResponse parses an HTTP response from a GetValidPreparationVesselsByPreparationWithResponse call
func ParseGetValidPreparationVesselsByPreparationResponse(rsp *http.Response) (*GetValidPreparationVesselsByPreparationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidPreparationVesselsByPreparationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidPreparationVesselsByVesselResponse parses an HTTP response from a GetValidPreparationVesselsByVesselWithResponse call
func ParseGetValidPreparationVesselsByVesselResponse(rsp *http.Response) (*GetValidPreparationVesselsByVesselResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidPreparationVesselsByVesselResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveValidPreparationVesselResponse parses an HTTP response from a ArchiveValidPreparationVesselWithResponse call
func ParseArchiveValidPreparationVesselResponse(rsp *http.Response) (*ArchiveValidPreparationVesselResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveValidPreparationVesselResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidPreparationVesselResponse parses an HTTP response from a GetValidPreparationVesselWithResponse call
func ParseGetValidPreparationVesselResponse(rsp *http.Response) (*GetValidPreparationVesselResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidPreparationVesselResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateValidPreparationVesselResponse parses an HTTP response from a UpdateValidPreparationVesselWithResponse call
func ParseUpdateValidPreparationVesselResponse(rsp *http.Response) (*UpdateValidPreparationVesselResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateValidPreparationVesselResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidPreparationsResponse parses an HTTP response from a GetValidPreparationsWithResponse call
func ParseGetValidPreparationsResponse(rsp *http.Response) (*GetValidPreparationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidPreparationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateValidPreparationResponse parses an HTTP response from a CreateValidPreparationWithResponse call
func ParseCreateValidPreparationResponse(rsp *http.Response) (*CreateValidPreparationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateValidPreparationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetRandomValidPreparationResponse parses an HTTP response from a GetRandomValidPreparationWithResponse call
func ParseGetRandomValidPreparationResponse(rsp *http.Response) (*GetRandomValidPreparationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRandomValidPreparationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseSearchForValidPreparationsResponse parses an HTTP response from a SearchForValidPreparationsWithResponse call
func ParseSearchForValidPreparationsResponse(rsp *http.Response) (*SearchForValidPreparationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchForValidPreparationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveValidPreparationResponse parses an HTTP response from a ArchiveValidPreparationWithResponse call
func ParseArchiveValidPreparationResponse(rsp *http.Response) (*ArchiveValidPreparationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveValidPreparationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidPreparationResponse parses an HTTP response from a GetValidPreparationWithResponse call
func ParseGetValidPreparationResponse(rsp *http.Response) (*GetValidPreparationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidPreparationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateValidPreparationResponse parses an HTTP response from a UpdateValidPreparationWithResponse call
func ParseUpdateValidPreparationResponse(rsp *http.Response) (*UpdateValidPreparationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateValidPreparationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidVesselsResponse parses an HTTP response from a GetValidVesselsWithResponse call
func ParseGetValidVesselsResponse(rsp *http.Response) (*GetValidVesselsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidVesselsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidVessel   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidVessel   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateValidVesselResponse parses an HTTP response from a CreateValidVesselWithResponse call
func ParseCreateValidVesselResponse(rsp *http.Response) (*CreateValidVesselResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateValidVesselResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidVessel     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidVessel     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetRandomValidVesselResponse parses an HTTP response from a GetRandomValidVesselWithResponse call
func ParseGetRandomValidVesselResponse(rsp *http.Response) (*GetRandomValidVesselResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRandomValidVesselResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidVessel     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidVessel     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseSearchForValidVesselsResponse parses an HTTP response from a SearchForValidVesselsWithResponse call
func ParseSearchForValidVesselsResponse(rsp *http.Response) (*SearchForValidVesselsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchForValidVesselsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidVessel     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidVessel     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveValidVesselResponse parses an HTTP response from a ArchiveValidVesselWithResponse call
func ParseArchiveValidVesselResponse(rsp *http.Response) (*ArchiveValidVesselResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveValidVesselResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidVessel     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidVessel     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetValidVesselResponse parses an HTTP response from a GetValidVesselWithResponse call
func ParseGetValidVesselResponse(rsp *http.Response) (*GetValidVesselResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValidVesselResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidVessel     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidVessel     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseUpdateValidVesselResponse parses an HTTP response from a UpdateValidVesselWithResponse call
func ParseUpdateValidVesselResponse(rsp *http.Response) (*UpdateValidVesselResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateValidVesselResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidVessel     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidVessel     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetWebhooksResponse parses an HTTP response from a GetWebhooksWithResponse call
func ParseGetWebhooksResponse(rsp *http.Response) (*GetWebhooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWebhooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Webhook       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Webhook       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateWebhookResponse parses an HTTP response from a CreateWebhookWithResponse call
func ParseCreateWebhookResponse(rsp *http.Response) (*CreateWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Webhook         `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Webhook         `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveWebhookResponse parses an HTTP response from a ArchiveWebhookWithResponse call
func ParseArchiveWebhookResponse(rsp *http.Response) (*ArchiveWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *Webhook         `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *Webhook         `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGetWebhookResponse parses an HTTP response from a GetWebhookWithResponse call
func ParseGetWebhookResponse(rsp *http.Response) (*GetWebhookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWebhookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Webhook         `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Webhook         `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseCreateWebhookTriggerEventResponse parses an HTTP response from a CreateWebhookTriggerEventWithResponse call
func ParseCreateWebhookTriggerEventResponse(rsp *http.Response) (*CreateWebhookTriggerEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWebhookTriggerEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *WebhookTriggerEvent `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *WebhookTriggerEvent `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseArchiveWebhookTriggerEventResponse parses an HTTP response from a ArchiveWebhookTriggerEventWithResponse call
func ParseArchiveWebhookTriggerEventResponse(rsp *http.Response) (*ArchiveWebhookTriggerEventResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ArchiveWebhookTriggerEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *WebhookTriggerEvent `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *WebhookTriggerEvent `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseRunFinalizeMealPlanWorkerResponse parses an HTTP response from a RunFinalizeMealPlanWorkerWithResponse call
func ParseRunFinalizeMealPlanWorkerResponse(rsp *http.Response) (*RunFinalizeMealPlanWorkerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RunFinalizeMealPlanWorkerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *FinalizeMealPlansRequest `json:"data,omitempty"`
			Details    *ResponseDetails          `json:"details,omitempty"`
			Error      *APIError                 `json:"error,omitempty"`
			Pagination *Pagination               `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *FinalizeMealPlansRequest `json:"data,omitempty"`
			Details    *ResponseDetails          `json:"details,omitempty"`
			Error      *APIError                 `json:"error,omitempty"`
			Pagination *Pagination               `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseRunMealPlanGroceryListInitializerWorkerResponse parses an HTTP response from a RunMealPlanGroceryListInitializerWorkerWithResponse call
func ParseRunMealPlanGroceryListInitializerWorkerResponse(rsp *http.Response) (*RunMealPlanGroceryListInitializerWorkerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RunMealPlanGroceryListInitializerWorkerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseRunMealPlanTaskCreatorWorkerResponse parses an HTTP response from a RunMealPlanTaskCreatorWorkerWithResponse call
func ParseRunMealPlanTaskCreatorWorkerResponse(rsp *http.Response) (*RunMealPlanTaskCreatorWorkerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RunMealPlanTaskCreatorWorkerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAuthStatusResponse parses an HTTP response from a GetAuthStatusWithResponse call
func ParseGetAuthStatusResponse(rsp *http.Response) (*GetAuthStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *UserStatusResponse `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *UserStatusResponse `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETOauth2AuthorizeResponse parses an HTTP response from a GETOauth2AuthorizeWithResponse call
func ParseGETOauth2AuthorizeResponse(rsp *http.Response) (*GETOauth2AuthorizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETOauth2AuthorizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePOSTOauth2TokenResponse parses an HTTP response from a POSTOauth2TokenWithResponse call
func ParsePOSTOauth2TokenResponse(rsp *http.Response) (*POSTOauth2TokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTOauth2TokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePOSTUsersResponse parses an HTTP response from a POSTUsersWithResponse call
func ParsePOSTUsersResponse(rsp *http.Response) (*POSTUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserCreationResponse `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserCreationResponse `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseVerifyEmailAddressResponse parses an HTTP response from a VerifyEmailAddressWithResponse call
func ParseVerifyEmailAddressResponse(rsp *http.Response) (*VerifyEmailAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyEmailAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserStatusResponse `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserStatusResponse `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseAdminLoginResponse parses an HTTP response from a AdminLoginWithResponse call
func ParseAdminLoginResponse(rsp *http.Response) (*AdminLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserStatusResponse `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserStatusResponse `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseLogoutResponse parses an HTTP response from a LogoutWithResponse call
func ParseLogoutResponse(rsp *http.Response) (*LogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserStatusResponse `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserStatusResponse `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseRequestPasswordResetTokenResponse parses an HTTP response from a RequestPasswordResetTokenWithResponse call
func ParseRequestPasswordResetTokenResponse(rsp *http.Response) (*RequestPasswordResetTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RequestPasswordResetTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *PasswordResetToken `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *PasswordResetToken `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseRedeemPasswordResetTokenResponse parses an HTTP response from a RedeemPasswordResetTokenWithResponse call
func ParseRedeemPasswordResetTokenResponse(rsp *http.Response) (*RedeemPasswordResetTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RedeemPasswordResetTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseVerifyTOTPSecretResponse parses an HTTP response from a VerifyTOTPSecretWithResponse call
func ParseVerifyTOTPSecretResponse(rsp *http.Response) (*VerifyTOTPSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyTOTPSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseRequestUsernameReminderResponse parses an HTTP response from a RequestUsernameReminderWithResponse call
func ParseRequestUsernameReminderResponse(rsp *http.Response) (*RequestUsernameReminderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RequestUsernameReminderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}
