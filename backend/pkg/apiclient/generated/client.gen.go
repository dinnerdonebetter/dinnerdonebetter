// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"context"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
	Oauth2Scopes     = "oauth2.Scopes"
)

// Defines values for GETHouseholdsParamsIncludeArchived.
const (
	GETHouseholdsParamsIncludeArchivedFalse GETHouseholdsParamsIncludeArchived = "false"
	GETHouseholdsParamsIncludeArchivedTrue  GETHouseholdsParamsIncludeArchived = "true"
)

// Defines values for GETHouseholdsParamsSortBy.
const (
	GETHouseholdsParamsSortByAsc  GETHouseholdsParamsSortBy = "asc"
	GETHouseholdsParamsSortByDesc GETHouseholdsParamsSortBy = "desc"
)

// Defines values for GETHouseholdsInstrumentsParamsIncludeArchived.
const (
	GETHouseholdsInstrumentsParamsIncludeArchivedFalse GETHouseholdsInstrumentsParamsIncludeArchived = "false"
	GETHouseholdsInstrumentsParamsIncludeArchivedTrue  GETHouseholdsInstrumentsParamsIncludeArchived = "true"
)

// Defines values for GETHouseholdsInstrumentsParamsSortBy.
const (
	GETHouseholdsInstrumentsParamsSortByAsc  GETHouseholdsInstrumentsParamsSortBy = "asc"
	GETHouseholdsInstrumentsParamsSortByDesc GETHouseholdsInstrumentsParamsSortBy = "desc"
)

// Defines values for GETMealPlansParamsIncludeArchived.
const (
	GETMealPlansParamsIncludeArchivedFalse GETMealPlansParamsIncludeArchived = "false"
	GETMealPlansParamsIncludeArchivedTrue  GETMealPlansParamsIncludeArchived = "true"
)

// Defines values for GETMealPlansParamsSortBy.
const (
	GETMealPlansParamsSortByAsc  GETMealPlansParamsSortBy = "asc"
	GETMealPlansParamsSortByDesc GETMealPlansParamsSortBy = "desc"
)

// Defines values for GETMealPlansMealPlanIDEventsParamsIncludeArchived.
const (
	GETMealPlansMealPlanIDEventsParamsIncludeArchivedFalse GETMealPlansMealPlanIDEventsParamsIncludeArchived = "false"
	GETMealPlansMealPlanIDEventsParamsIncludeArchivedTrue  GETMealPlansMealPlanIDEventsParamsIncludeArchived = "true"
)

// Defines values for GETMealPlansMealPlanIDEventsParamsSortBy.
const (
	GETMealPlansMealPlanIDEventsParamsSortByAsc  GETMealPlansMealPlanIDEventsParamsSortBy = "asc"
	GETMealPlansMealPlanIDEventsParamsSortByDesc GETMealPlansMealPlanIDEventsParamsSortBy = "desc"
)

// Defines values for GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsParamsIncludeArchived.
const (
	GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsParamsIncludeArchivedFalse GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsParamsIncludeArchived = "false"
	GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsParamsIncludeArchivedTrue  GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsParamsIncludeArchived = "true"
)

// Defines values for GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsParamsSortBy.
const (
	GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsParamsSortByAsc  GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsParamsSortBy = "asc"
	GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsParamsSortByDesc GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsParamsSortBy = "desc"
)

// Defines values for GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesParamsIncludeArchived.
const (
	GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesParamsIncludeArchivedFalse GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesParamsIncludeArchived = "false"
	GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesParamsIncludeArchivedTrue  GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesParamsIncludeArchived = "true"
)

// Defines values for GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesParamsSortBy.
const (
	GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesParamsSortByAsc  GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesParamsSortBy = "asc"
	GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesParamsSortByDesc GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesParamsSortBy = "desc"
)

// Defines values for GETMealPlansMealPlanIDGroceryListItemsParamsIncludeArchived.
const (
	GETMealPlansMealPlanIDGroceryListItemsParamsIncludeArchivedFalse GETMealPlansMealPlanIDGroceryListItemsParamsIncludeArchived = "false"
	GETMealPlansMealPlanIDGroceryListItemsParamsIncludeArchivedTrue  GETMealPlansMealPlanIDGroceryListItemsParamsIncludeArchived = "true"
)

// Defines values for GETMealPlansMealPlanIDGroceryListItemsParamsSortBy.
const (
	GETMealPlansMealPlanIDGroceryListItemsParamsSortByAsc  GETMealPlansMealPlanIDGroceryListItemsParamsSortBy = "asc"
	GETMealPlansMealPlanIDGroceryListItemsParamsSortByDesc GETMealPlansMealPlanIDGroceryListItemsParamsSortBy = "desc"
)

// Defines values for GETMealPlansMealPlanIDTasksParamsIncludeArchived.
const (
	GETMealPlansMealPlanIDTasksParamsIncludeArchivedFalse GETMealPlansMealPlanIDTasksParamsIncludeArchived = "false"
	GETMealPlansMealPlanIDTasksParamsIncludeArchivedTrue  GETMealPlansMealPlanIDTasksParamsIncludeArchived = "true"
)

// Defines values for GETMealPlansMealPlanIDTasksParamsSortBy.
const (
	GETMealPlansMealPlanIDTasksParamsSortByAsc  GETMealPlansMealPlanIDTasksParamsSortBy = "asc"
	GETMealPlansMealPlanIDTasksParamsSortByDesc GETMealPlansMealPlanIDTasksParamsSortBy = "desc"
)

// Defines values for GETMealsParamsIncludeArchived.
const (
	GETMealsParamsIncludeArchivedFalse GETMealsParamsIncludeArchived = "false"
	GETMealsParamsIncludeArchivedTrue  GETMealsParamsIncludeArchived = "true"
)

// Defines values for GETMealsParamsSortBy.
const (
	GETMealsParamsSortByAsc  GETMealsParamsSortBy = "asc"
	GETMealsParamsSortByDesc GETMealsParamsSortBy = "desc"
)

// Defines values for GETOauth2ClientsParamsIncludeArchived.
const (
	GETOauth2ClientsParamsIncludeArchivedFalse GETOauth2ClientsParamsIncludeArchived = "false"
	GETOauth2ClientsParamsIncludeArchivedTrue  GETOauth2ClientsParamsIncludeArchived = "true"
)

// Defines values for GETOauth2ClientsParamsSortBy.
const (
	GETOauth2ClientsParamsSortByAsc  GETOauth2ClientsParamsSortBy = "asc"
	GETOauth2ClientsParamsSortByDesc GETOauth2ClientsParamsSortBy = "desc"
)

// Defines values for GETRecipesParamsIncludeArchived.
const (
	GETRecipesParamsIncludeArchivedFalse GETRecipesParamsIncludeArchived = "false"
	GETRecipesParamsIncludeArchivedTrue  GETRecipesParamsIncludeArchived = "true"
)

// Defines values for GETRecipesParamsSortBy.
const (
	GETRecipesParamsSortByAsc  GETRecipesParamsSortBy = "asc"
	GETRecipesParamsSortByDesc GETRecipesParamsSortBy = "desc"
)

// Defines values for GETRecipesRecipeIDPrepTasksParamsIncludeArchived.
const (
	GETRecipesRecipeIDPrepTasksParamsIncludeArchivedFalse GETRecipesRecipeIDPrepTasksParamsIncludeArchived = "false"
	GETRecipesRecipeIDPrepTasksParamsIncludeArchivedTrue  GETRecipesRecipeIDPrepTasksParamsIncludeArchived = "true"
)

// Defines values for GETRecipesRecipeIDPrepTasksParamsSortBy.
const (
	GETRecipesRecipeIDPrepTasksParamsSortByAsc  GETRecipesRecipeIDPrepTasksParamsSortBy = "asc"
	GETRecipesRecipeIDPrepTasksParamsSortByDesc GETRecipesRecipeIDPrepTasksParamsSortBy = "desc"
)

// Defines values for GETRecipesRecipeIDRatingsParamsIncludeArchived.
const (
	GETRecipesRecipeIDRatingsParamsIncludeArchivedFalse GETRecipesRecipeIDRatingsParamsIncludeArchived = "false"
	GETRecipesRecipeIDRatingsParamsIncludeArchivedTrue  GETRecipesRecipeIDRatingsParamsIncludeArchived = "true"
)

// Defines values for GETRecipesRecipeIDRatingsParamsSortBy.
const (
	GETRecipesRecipeIDRatingsParamsSortByAsc  GETRecipesRecipeIDRatingsParamsSortBy = "asc"
	GETRecipesRecipeIDRatingsParamsSortByDesc GETRecipesRecipeIDRatingsParamsSortBy = "desc"
)

// Defines values for GETRecipesRecipeIDStepsParamsIncludeArchived.
const (
	GETRecipesRecipeIDStepsParamsIncludeArchivedFalse GETRecipesRecipeIDStepsParamsIncludeArchived = "false"
	GETRecipesRecipeIDStepsParamsIncludeArchivedTrue  GETRecipesRecipeIDStepsParamsIncludeArchived = "true"
)

// Defines values for GETRecipesRecipeIDStepsParamsSortBy.
const (
	GETRecipesRecipeIDStepsParamsSortByAsc  GETRecipesRecipeIDStepsParamsSortBy = "asc"
	GETRecipesRecipeIDStepsParamsSortByDesc GETRecipesRecipeIDStepsParamsSortBy = "desc"
)

// Defines values for GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsParamsIncludeArchived.
const (
	GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsParamsIncludeArchivedFalse GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsParamsIncludeArchived = "false"
	GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsParamsIncludeArchivedTrue  GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsParamsIncludeArchived = "true"
)

// Defines values for GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsParamsSortBy.
const (
	GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsParamsSortByAsc  GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsParamsSortBy = "asc"
	GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsParamsSortByDesc GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsParamsSortBy = "desc"
)

// Defines values for GETRecipesRecipeIDStepsRecipeStepIDIngredientsParamsIncludeArchived.
const (
	GETRecipesRecipeIDStepsRecipeStepIDIngredientsParamsIncludeArchivedFalse GETRecipesRecipeIDStepsRecipeStepIDIngredientsParamsIncludeArchived = "false"
	GETRecipesRecipeIDStepsRecipeStepIDIngredientsParamsIncludeArchivedTrue  GETRecipesRecipeIDStepsRecipeStepIDIngredientsParamsIncludeArchived = "true"
)

// Defines values for GETRecipesRecipeIDStepsRecipeStepIDIngredientsParamsSortBy.
const (
	GETRecipesRecipeIDStepsRecipeStepIDIngredientsParamsSortByAsc  GETRecipesRecipeIDStepsRecipeStepIDIngredientsParamsSortBy = "asc"
	GETRecipesRecipeIDStepsRecipeStepIDIngredientsParamsSortByDesc GETRecipesRecipeIDStepsRecipeStepIDIngredientsParamsSortBy = "desc"
)

// Defines values for GETRecipesRecipeIDStepsRecipeStepIDInstrumentsParamsIncludeArchived.
const (
	GETRecipesRecipeIDStepsRecipeStepIDInstrumentsParamsIncludeArchivedFalse GETRecipesRecipeIDStepsRecipeStepIDInstrumentsParamsIncludeArchived = "false"
	GETRecipesRecipeIDStepsRecipeStepIDInstrumentsParamsIncludeArchivedTrue  GETRecipesRecipeIDStepsRecipeStepIDInstrumentsParamsIncludeArchived = "true"
)

// Defines values for GETRecipesRecipeIDStepsRecipeStepIDInstrumentsParamsSortBy.
const (
	GETRecipesRecipeIDStepsRecipeStepIDInstrumentsParamsSortByAsc  GETRecipesRecipeIDStepsRecipeStepIDInstrumentsParamsSortBy = "asc"
	GETRecipesRecipeIDStepsRecipeStepIDInstrumentsParamsSortByDesc GETRecipesRecipeIDStepsRecipeStepIDInstrumentsParamsSortBy = "desc"
)

// Defines values for GETRecipesRecipeIDStepsRecipeStepIDProductsParamsIncludeArchived.
const (
	GETRecipesRecipeIDStepsRecipeStepIDProductsParamsIncludeArchivedFalse GETRecipesRecipeIDStepsRecipeStepIDProductsParamsIncludeArchived = "false"
	GETRecipesRecipeIDStepsRecipeStepIDProductsParamsIncludeArchivedTrue  GETRecipesRecipeIDStepsRecipeStepIDProductsParamsIncludeArchived = "true"
)

// Defines values for GETRecipesRecipeIDStepsRecipeStepIDProductsParamsSortBy.
const (
	GETRecipesRecipeIDStepsRecipeStepIDProductsParamsSortByAsc  GETRecipesRecipeIDStepsRecipeStepIDProductsParamsSortBy = "asc"
	GETRecipesRecipeIDStepsRecipeStepIDProductsParamsSortByDesc GETRecipesRecipeIDStepsRecipeStepIDProductsParamsSortBy = "desc"
)

// Defines values for GETRecipesRecipeIDStepsRecipeStepIDVesselsParamsIncludeArchived.
const (
	GETRecipesRecipeIDStepsRecipeStepIDVesselsParamsIncludeArchivedFalse GETRecipesRecipeIDStepsRecipeStepIDVesselsParamsIncludeArchived = "false"
	GETRecipesRecipeIDStepsRecipeStepIDVesselsParamsIncludeArchivedTrue  GETRecipesRecipeIDStepsRecipeStepIDVesselsParamsIncludeArchived = "true"
)

// Defines values for GETRecipesRecipeIDStepsRecipeStepIDVesselsParamsSortBy.
const (
	GETRecipesRecipeIDStepsRecipeStepIDVesselsParamsSortByAsc  GETRecipesRecipeIDStepsRecipeStepIDVesselsParamsSortBy = "asc"
	GETRecipesRecipeIDStepsRecipeStepIDVesselsParamsSortByDesc GETRecipesRecipeIDStepsRecipeStepIDVesselsParamsSortBy = "desc"
)

// Defines values for GETSettingsParamsIncludeArchived.
const (
	GETSettingsParamsIncludeArchivedFalse GETSettingsParamsIncludeArchived = "false"
	GETSettingsParamsIncludeArchivedTrue  GETSettingsParamsIncludeArchived = "true"
)

// Defines values for GETSettingsParamsSortBy.
const (
	GETSettingsParamsSortByAsc  GETSettingsParamsSortBy = "asc"
	GETSettingsParamsSortByDesc GETSettingsParamsSortBy = "desc"
)

// Defines values for GETUserIngredientPreferencesParamsIncludeArchived.
const (
	GETUserIngredientPreferencesParamsIncludeArchivedFalse GETUserIngredientPreferencesParamsIncludeArchived = "false"
	GETUserIngredientPreferencesParamsIncludeArchivedTrue  GETUserIngredientPreferencesParamsIncludeArchived = "true"
)

// Defines values for GETUserIngredientPreferencesParamsSortBy.
const (
	GETUserIngredientPreferencesParamsSortByAsc  GETUserIngredientPreferencesParamsSortBy = "asc"
	GETUserIngredientPreferencesParamsSortByDesc GETUserIngredientPreferencesParamsSortBy = "desc"
)

// Defines values for GETUserNotificationsParamsIncludeArchived.
const (
	GETUserNotificationsParamsIncludeArchivedFalse GETUserNotificationsParamsIncludeArchived = "false"
	GETUserNotificationsParamsIncludeArchivedTrue  GETUserNotificationsParamsIncludeArchived = "true"
)

// Defines values for GETUserNotificationsParamsSortBy.
const (
	GETUserNotificationsParamsSortByAsc  GETUserNotificationsParamsSortBy = "asc"
	GETUserNotificationsParamsSortByDesc GETUserNotificationsParamsSortBy = "desc"
)

// Defines values for GETUsersParamsIncludeArchived.
const (
	GETUsersParamsIncludeArchivedFalse GETUsersParamsIncludeArchived = "false"
	GETUsersParamsIncludeArchivedTrue  GETUsersParamsIncludeArchived = "true"
)

// Defines values for GETUsersParamsSortBy.
const (
	GETUsersParamsSortByAsc  GETUsersParamsSortBy = "asc"
	GETUsersParamsSortByDesc GETUsersParamsSortBy = "desc"
)

// Defines values for GETUsersSearchParamsIncludeArchived.
const (
	GETUsersSearchParamsIncludeArchivedFalse GETUsersSearchParamsIncludeArchived = "false"
	GETUsersSearchParamsIncludeArchivedTrue  GETUsersSearchParamsIncludeArchived = "true"
)

// Defines values for GETUsersSearchParamsSortBy.
const (
	GETUsersSearchParamsSortByAsc  GETUsersSearchParamsSortBy = "asc"
	GETUsersSearchParamsSortByDesc GETUsersSearchParamsSortBy = "desc"
)

// Defines values for GETValidIngredientGroupsParamsIncludeArchived.
const (
	GETValidIngredientGroupsParamsIncludeArchivedFalse GETValidIngredientGroupsParamsIncludeArchived = "false"
	GETValidIngredientGroupsParamsIncludeArchivedTrue  GETValidIngredientGroupsParamsIncludeArchived = "true"
)

// Defines values for GETValidIngredientGroupsParamsSortBy.
const (
	GETValidIngredientGroupsParamsSortByAsc  GETValidIngredientGroupsParamsSortBy = "asc"
	GETValidIngredientGroupsParamsSortByDesc GETValidIngredientGroupsParamsSortBy = "desc"
)

// Defines values for GETValidIngredientMeasurementUnitsParamsIncludeArchived.
const (
	GETValidIngredientMeasurementUnitsParamsIncludeArchivedFalse GETValidIngredientMeasurementUnitsParamsIncludeArchived = "false"
	GETValidIngredientMeasurementUnitsParamsIncludeArchivedTrue  GETValidIngredientMeasurementUnitsParamsIncludeArchived = "true"
)

// Defines values for GETValidIngredientMeasurementUnitsParamsSortBy.
const (
	GETValidIngredientMeasurementUnitsParamsSortByAsc  GETValidIngredientMeasurementUnitsParamsSortBy = "asc"
	GETValidIngredientMeasurementUnitsParamsSortByDesc GETValidIngredientMeasurementUnitsParamsSortBy = "desc"
)

// Defines values for GETValidIngredientPreparationsParamsIncludeArchived.
const (
	GETValidIngredientPreparationsParamsIncludeArchivedFalse GETValidIngredientPreparationsParamsIncludeArchived = "false"
	GETValidIngredientPreparationsParamsIncludeArchivedTrue  GETValidIngredientPreparationsParamsIncludeArchived = "true"
)

// Defines values for GETValidIngredientPreparationsParamsSortBy.
const (
	GETValidIngredientPreparationsParamsSortByAsc  GETValidIngredientPreparationsParamsSortBy = "asc"
	GETValidIngredientPreparationsParamsSortByDesc GETValidIngredientPreparationsParamsSortBy = "desc"
)

// Defines values for GETValidIngredientStateIngredientsParamsIncludeArchived.
const (
	GETValidIngredientStateIngredientsParamsIncludeArchivedFalse GETValidIngredientStateIngredientsParamsIncludeArchived = "false"
	GETValidIngredientStateIngredientsParamsIncludeArchivedTrue  GETValidIngredientStateIngredientsParamsIncludeArchived = "true"
)

// Defines values for GETValidIngredientStateIngredientsParamsSortBy.
const (
	GETValidIngredientStateIngredientsParamsSortByAsc  GETValidIngredientStateIngredientsParamsSortBy = "asc"
	GETValidIngredientStateIngredientsParamsSortByDesc GETValidIngredientStateIngredientsParamsSortBy = "desc"
)

// Defines values for GETValidIngredientStatesParamsIncludeArchived.
const (
	GETValidIngredientStatesParamsIncludeArchivedFalse GETValidIngredientStatesParamsIncludeArchived = "false"
	GETValidIngredientStatesParamsIncludeArchivedTrue  GETValidIngredientStatesParamsIncludeArchived = "true"
)

// Defines values for GETValidIngredientStatesParamsSortBy.
const (
	GETValidIngredientStatesParamsSortByAsc  GETValidIngredientStatesParamsSortBy = "asc"
	GETValidIngredientStatesParamsSortByDesc GETValidIngredientStatesParamsSortBy = "desc"
)

// Defines values for GETValidIngredientsParamsIncludeArchived.
const (
	GETValidIngredientsParamsIncludeArchivedFalse GETValidIngredientsParamsIncludeArchived = "false"
	GETValidIngredientsParamsIncludeArchivedTrue  GETValidIngredientsParamsIncludeArchived = "true"
)

// Defines values for GETValidIngredientsParamsSortBy.
const (
	GETValidIngredientsParamsSortByAsc  GETValidIngredientsParamsSortBy = "asc"
	GETValidIngredientsParamsSortByDesc GETValidIngredientsParamsSortBy = "desc"
)

// Defines values for GETValidInstrumentsParamsIncludeArchived.
const (
	GETValidInstrumentsParamsIncludeArchivedFalse GETValidInstrumentsParamsIncludeArchived = "false"
	GETValidInstrumentsParamsIncludeArchivedTrue  GETValidInstrumentsParamsIncludeArchived = "true"
)

// Defines values for GETValidInstrumentsParamsSortBy.
const (
	GETValidInstrumentsParamsSortByAsc  GETValidInstrumentsParamsSortBy = "asc"
	GETValidInstrumentsParamsSortByDesc GETValidInstrumentsParamsSortBy = "desc"
)

// Defines values for GETValidMeasurementUnitsParamsIncludeArchived.
const (
	GETValidMeasurementUnitsParamsIncludeArchivedFalse GETValidMeasurementUnitsParamsIncludeArchived = "false"
	GETValidMeasurementUnitsParamsIncludeArchivedTrue  GETValidMeasurementUnitsParamsIncludeArchived = "true"
)

// Defines values for GETValidMeasurementUnitsParamsSortBy.
const (
	GETValidMeasurementUnitsParamsSortByAsc  GETValidMeasurementUnitsParamsSortBy = "asc"
	GETValidMeasurementUnitsParamsSortByDesc GETValidMeasurementUnitsParamsSortBy = "desc"
)

// Defines values for GETValidPreparationInstrumentsParamsIncludeArchived.
const (
	GETValidPreparationInstrumentsParamsIncludeArchivedFalse GETValidPreparationInstrumentsParamsIncludeArchived = "false"
	GETValidPreparationInstrumentsParamsIncludeArchivedTrue  GETValidPreparationInstrumentsParamsIncludeArchived = "true"
)

// Defines values for GETValidPreparationInstrumentsParamsSortBy.
const (
	GETValidPreparationInstrumentsParamsSortByAsc  GETValidPreparationInstrumentsParamsSortBy = "asc"
	GETValidPreparationInstrumentsParamsSortByDesc GETValidPreparationInstrumentsParamsSortBy = "desc"
)

// Defines values for GETValidPreparationVesselsParamsIncludeArchived.
const (
	GETValidPreparationVesselsParamsIncludeArchivedFalse GETValidPreparationVesselsParamsIncludeArchived = "false"
	GETValidPreparationVesselsParamsIncludeArchivedTrue  GETValidPreparationVesselsParamsIncludeArchived = "true"
)

// Defines values for GETValidPreparationVesselsParamsSortBy.
const (
	GETValidPreparationVesselsParamsSortByAsc  GETValidPreparationVesselsParamsSortBy = "asc"
	GETValidPreparationVesselsParamsSortByDesc GETValidPreparationVesselsParamsSortBy = "desc"
)

// Defines values for GETValidPreparationsParamsIncludeArchived.
const (
	GETValidPreparationsParamsIncludeArchivedFalse GETValidPreparationsParamsIncludeArchived = "false"
	GETValidPreparationsParamsIncludeArchivedTrue  GETValidPreparationsParamsIncludeArchived = "true"
)

// Defines values for GETValidPreparationsParamsSortBy.
const (
	GETValidPreparationsParamsSortByAsc  GETValidPreparationsParamsSortBy = "asc"
	GETValidPreparationsParamsSortByDesc GETValidPreparationsParamsSortBy = "desc"
)

// Defines values for GETValidVesselsParamsIncludeArchived.
const (
	GETValidVesselsParamsIncludeArchivedFalse GETValidVesselsParamsIncludeArchived = "false"
	GETValidVesselsParamsIncludeArchivedTrue  GETValidVesselsParamsIncludeArchived = "true"
)

// Defines values for GETValidVesselsParamsSortBy.
const (
	GETValidVesselsParamsSortByAsc  GETValidVesselsParamsSortBy = "asc"
	GETValidVesselsParamsSortByDesc GETValidVesselsParamsSortBy = "desc"
)

// Defines values for GETWebhooksParamsIncludeArchived.
const (
	False GETWebhooksParamsIncludeArchived = "false"
	True  GETWebhooksParamsIncludeArchived = "true"
)

// Defines values for GETWebhooksParamsSortBy.
const (
	Asc  GETWebhooksParamsSortBy = "asc"
	Desc GETWebhooksParamsSortBy = "desc"
)

// APIError defines model for APIError.
type APIError struct {
	Code    *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// APIResponse defines model for APIResponse.
type APIResponse struct {
	Details    *ResponseDetails `json:"details,omitempty"`
	Error      *APIError        `json:"error,omitempty"`
	Pagination *Pagination      `json:"pagination,omitempty"`
}

// APIResponseWithError defines model for APIResponseWithError.
type APIResponseWithError struct {
	Details *ResponseDetails `json:"details,omitempty"`
	Error   *APIError        `json:"error,omitempty"`
}

// AuditLogEntry defines model for AuditLogEntry.
type AuditLogEntry struct {
	BelongsToHousehold *string    `json:"belongsToHousehold,omitempty"`
	BelongsToUser      *string    `json:"belongsToUser,omitempty"`
	Changes            *ChangeLog `json:"changes,omitempty"`
	CreatedAt          *string    `json:"createdAt,omitempty"`
	EventType          *string    `json:"eventType,omitempty"`
	Id                 *string    `json:"id,omitempty"`
	RelevantID         *string    `json:"relevantID,omitempty"`
	ResourceType       *string    `json:"resourceType,omitempty"`
}

// AvatarUpdateInput defines model for AvatarUpdateInput.
type AvatarUpdateInput struct {
	Base64EncodedData *string `json:"base64EncodedData,omitempty"`
}

// ChangeActiveHouseholdInput defines model for ChangeActiveHouseholdInput.
type ChangeActiveHouseholdInput struct {
	HouseholdID *string `json:"householdID,omitempty"`
}

// ChangeLog defines model for ChangeLog.
type ChangeLog struct {
	NewValue *string `json:"newValue,omitempty"`
	OldValue *string `json:"oldValue,omitempty"`
}

// EmailAddressVerificationRequestInput defines model for EmailAddressVerificationRequestInput.
type EmailAddressVerificationRequestInput struct {
	EmailVerificationToken *string `json:"emailVerificationToken,omitempty"`
}

// FinalizeMealPlansRequest defines model for FinalizeMealPlansRequest.
type FinalizeMealPlansRequest struct {
	ReturnCount *bool `json:"returnCount,omitempty"`
}

// FinalizeMealPlansResponse defines model for FinalizeMealPlansResponse.
type FinalizeMealPlansResponse struct {
	Count *int `json:"count,omitempty"`
}

// Household defines model for Household.
type Household struct {
	AddressLine1             *string                            `json:"addressLine1,omitempty"`
	AddressLine2             *string                            `json:"addressLine2,omitempty"`
	ArchivedAt               *string                            `json:"archivedAt,omitempty"`
	BelongsToUser            *string                            `json:"belongsToUser,omitempty"`
	BillingStatus            *string                            `json:"billingStatus,omitempty"`
	City                     *string                            `json:"city,omitempty"`
	ContactPhone             *string                            `json:"contactPhone,omitempty"`
	Country                  *string                            `json:"country,omitempty"`
	CreatedAt                *string                            `json:"createdAt,omitempty"`
	Id                       *string                            `json:"id,omitempty"`
	LastUpdatedAt            *string                            `json:"lastUpdatedAt,omitempty"`
	Latitude                 *float32                           `json:"latitude,omitempty"`
	Longitude                *float32                           `json:"longitude,omitempty"`
	Members                  *[]HouseholdUserMembershipWithUser `json:"members,omitempty"`
	Name                     *string                            `json:"name,omitempty"`
	PaymentProcessorCustomer *string                            `json:"paymentProcessorCustomer,omitempty"`
	State                    *string                            `json:"state,omitempty"`
	SubscriptionPlanID       *string                            `json:"subscriptionPlanID,omitempty"`
	ZipCode                  *string                            `json:"zipCode,omitempty"`
}

// HouseholdCreationRequestInput defines model for HouseholdCreationRequestInput.
type HouseholdCreationRequestInput struct {
	AddressLine1 *string  `json:"addressLine1,omitempty"`
	AddressLine2 *string  `json:"addressLine2,omitempty"`
	City         *string  `json:"city,omitempty"`
	ContactPhone *string  `json:"contactPhone,omitempty"`
	Country      *string  `json:"country,omitempty"`
	Latitude     *float32 `json:"latitude,omitempty"`
	Longitude    *float32 `json:"longitude,omitempty"`
	Name         *string  `json:"name,omitempty"`
	State        *string  `json:"state,omitempty"`
	ZipCode      *string  `json:"zipCode,omitempty"`
}

// HouseholdInstrumentOwnership defines model for HouseholdInstrumentOwnership.
type HouseholdInstrumentOwnership struct {
	ArchivedAt         *string          `json:"archivedAt,omitempty"`
	BelongsToHousehold *string          `json:"belongsToHousehold,omitempty"`
	CreatedAt          *string          `json:"createdAt,omitempty"`
	Id                 *string          `json:"id,omitempty"`
	Instrument         *ValidInstrument `json:"instrument,omitempty"`
	LastUpdatedAt      *string          `json:"lastUpdatedAt,omitempty"`
	Notes              *string          `json:"notes,omitempty"`
	Quantity           *int             `json:"quantity,omitempty"`
}

// HouseholdInstrumentOwnershipCreationRequestInput defines model for HouseholdInstrumentOwnershipCreationRequestInput.
type HouseholdInstrumentOwnershipCreationRequestInput struct {
	BelongsToHousehold *string `json:"belongsToHousehold,omitempty"`
	Notes              *string `json:"notes,omitempty"`
	Quantity           *int    `json:"quantity,omitempty"`
	ValidInstrumentID  *string `json:"validInstrumentID,omitempty"`
}

// HouseholdInstrumentOwnershipUpdateRequestInput defines model for HouseholdInstrumentOwnershipUpdateRequestInput.
type HouseholdInstrumentOwnershipUpdateRequestInput struct {
	Notes             *string `json:"notes,omitempty"`
	Quantity          *int    `json:"quantity,omitempty"`
	ValidInstrumentID *string `json:"validInstrumentID,omitempty"`
}

// HouseholdInvitation defines model for HouseholdInvitation.
type HouseholdInvitation struct {
	ArchivedAt           *string    `json:"archivedAt,omitempty"`
	CreatedAt            *string    `json:"createdAt,omitempty"`
	DestinationHousehold *Household `json:"destinationHousehold,omitempty"`
	ExpiresAt            *string    `json:"expiresAt,omitempty"`
	FromUser             *User      `json:"fromUser,omitempty"`
	Id                   *string    `json:"id,omitempty"`
	LastUpdatedAt        *string    `json:"lastUpdatedAt,omitempty"`
	Note                 *string    `json:"note,omitempty"`
	Status               *string    `json:"status,omitempty"`
	StatusNote           *string    `json:"statusNote,omitempty"`
	ToEmail              *string    `json:"toEmail,omitempty"`
	ToName               *string    `json:"toName,omitempty"`
	ToUser               *string    `json:"toUser,omitempty"`
	Token                *string    `json:"token,omitempty"`
}

// HouseholdInvitationCreationRequestInput defines model for HouseholdInvitationCreationRequestInput.
type HouseholdInvitationCreationRequestInput struct {
	ExpiresAt *string `json:"expiresAt,omitempty"`
	Note      *string `json:"note,omitempty"`
	ToEmail   *string `json:"toEmail,omitempty"`
	ToName    *string `json:"toName,omitempty"`
}

// HouseholdInvitationUpdateRequestInput defines model for HouseholdInvitationUpdateRequestInput.
type HouseholdInvitationUpdateRequestInput struct {
	Note  *string `json:"note,omitempty"`
	Token *string `json:"token,omitempty"`
}

// HouseholdOwnershipTransferInput defines model for HouseholdOwnershipTransferInput.
type HouseholdOwnershipTransferInput struct {
	CurrentOwner *string `json:"currentOwner,omitempty"`
	NewOwner     *string `json:"newOwner,omitempty"`
	Reason       *string `json:"reason,omitempty"`
}

// HouseholdUpdateRequestInput defines model for HouseholdUpdateRequestInput.
type HouseholdUpdateRequestInput struct {
	AddressLine1 *string  `json:"addressLine1,omitempty"`
	AddressLine2 *string  `json:"addressLine2,omitempty"`
	City         *string  `json:"city,omitempty"`
	ContactPhone *string  `json:"contactPhone,omitempty"`
	Country      *string  `json:"country,omitempty"`
	Latitude     *float32 `json:"latitude,omitempty"`
	Longitude    *float32 `json:"longitude,omitempty"`
	Name         *string  `json:"name,omitempty"`
	State        *string  `json:"state,omitempty"`
	ZipCode      *string  `json:"zipCode,omitempty"`
}

// HouseholdUserMembership defines model for HouseholdUserMembership.
type HouseholdUserMembership struct {
	ArchivedAt         *string `json:"archivedAt,omitempty"`
	BelongsToHousehold *string `json:"belongsToHousehold,omitempty"`
	BelongsToUser      *string `json:"belongsToUser,omitempty"`
	CreatedAt          *string `json:"createdAt,omitempty"`
	DefaultHousehold   *bool   `json:"defaultHousehold,omitempty"`
	HouseholdRole      *string `json:"householdRole,omitempty"`
	Id                 *string `json:"id,omitempty"`
	LastUpdatedAt      *string `json:"lastUpdatedAt,omitempty"`
}

// HouseholdUserMembershipWithUser defines model for HouseholdUserMembershipWithUser.
type HouseholdUserMembershipWithUser struct {
	ArchivedAt         *string `json:"archivedAt,omitempty"`
	BelongsToHousehold *string `json:"belongsToHousehold,omitempty"`
	BelongsToUser      *User   `json:"belongsToUser,omitempty"`
	CreatedAt          *string `json:"createdAt,omitempty"`
	DefaultHousehold   *bool   `json:"defaultHousehold,omitempty"`
	HouseholdRole      *string `json:"householdRole,omitempty"`
	Id                 *string `json:"id,omitempty"`
	LastUpdatedAt      *string `json:"lastUpdatedAt,omitempty"`
}

// Meal defines model for Meal.
type Meal struct {
	ArchivedAt               *string          `json:"archivedAt,omitempty"`
	Components               *[]MealComponent `json:"components,omitempty"`
	CreatedAt                *string          `json:"createdAt,omitempty"`
	CreatedByUser            *string          `json:"createdByUser,omitempty"`
	Description              *string          `json:"description,omitempty"`
	EligibleForMealPlans     *bool            `json:"eligibleForMealPlans,omitempty"`
	Id                       *string          `json:"id,omitempty"`
	LastUpdatedAt            *string          `json:"lastUpdatedAt,omitempty"`
	MaximumEstimatedPortions *float32         `json:"maximumEstimatedPortions,omitempty"`
	MinimumEstimatedPortions *float32         `json:"minimumEstimatedPortions,omitempty"`
	Name                     *string          `json:"name,omitempty"`
}

// MealComponent defines model for MealComponent.
type MealComponent struct {
	ComponentType *string  `json:"componentType,omitempty"`
	Recipe        *Recipe  `json:"recipe,omitempty"`
	RecipeScale   *float32 `json:"recipeScale,omitempty"`
}

// MealComponentCreationRequestInput defines model for MealComponentCreationRequestInput.
type MealComponentCreationRequestInput struct {
	ComponentType *string  `json:"componentType,omitempty"`
	RecipeID      *string  `json:"recipeID,omitempty"`
	RecipeScale   *float32 `json:"recipeScale,omitempty"`
}

// MealCreationRequestInput defines model for MealCreationRequestInput.
type MealCreationRequestInput struct {
	Description              *string                              `json:"description,omitempty"`
	EligibleForMealPlans     *bool                                `json:"eligibleForMealPlans,omitempty"`
	MaximumEstimatedPortions *float32                             `json:"maximumEstimatedPortions,omitempty"`
	MinimumEstimatedPortions *float32                             `json:"minimumEstimatedPortions,omitempty"`
	Name                     *string                              `json:"name,omitempty"`
	Recipes                  *[]MealComponentCreationRequestInput `json:"recipes,omitempty"`
}

// MealPlan defines model for MealPlan.
type MealPlan struct {
	ArchivedAt             *string          `json:"archivedAt,omitempty"`
	BelongsToHousehold     *string          `json:"belongsToHousehold,omitempty"`
	CreatedAt              *string          `json:"createdAt,omitempty"`
	CreatedBy              *string          `json:"createdBy,omitempty"`
	ElectionMethod         *string          `json:"electionMethod,omitempty"`
	Events                 *[]MealPlanEvent `json:"events,omitempty"`
	GroceryListInitialized *bool            `json:"groceryListInitialized,omitempty"`
	Id                     *string          `json:"id,omitempty"`
	LastUpdatedAt          *string          `json:"lastUpdatedAt,omitempty"`
	Notes                  *string          `json:"notes,omitempty"`
	Status                 *string          `json:"status,omitempty"`
	TasksCreated           *bool            `json:"tasksCreated,omitempty"`
	VotingDeadline         *string          `json:"votingDeadline,omitempty"`
}

// MealPlanCreationRequestInput defines model for MealPlanCreationRequestInput.
type MealPlanCreationRequestInput struct {
	ElectionMethod *string                              `json:"electionMethod,omitempty"`
	Events         *[]MealPlanEventCreationRequestInput `json:"events,omitempty"`
	Notes          *string                              `json:"notes,omitempty"`
	VotingDeadline *string                              `json:"votingDeadline,omitempty"`
}

// MealPlanEvent defines model for MealPlanEvent.
type MealPlanEvent struct {
	ArchivedAt        *string           `json:"archivedAt,omitempty"`
	BelongsToMealPlan *string           `json:"belongsToMealPlan,omitempty"`
	CreatedAt         *string           `json:"createdAt,omitempty"`
	EndsAt            *string           `json:"endsAt,omitempty"`
	Id                *string           `json:"id,omitempty"`
	LastUpdatedAt     *string           `json:"lastUpdatedAt,omitempty"`
	MealName          *string           `json:"mealName,omitempty"`
	Notes             *string           `json:"notes,omitempty"`
	Options           *[]MealPlanOption `json:"options,omitempty"`
	StartsAt          *string           `json:"startsAt,omitempty"`
}

// MealPlanEventCreationRequestInput defines model for MealPlanEventCreationRequestInput.
type MealPlanEventCreationRequestInput struct {
	EndsAt   *string                               `json:"endsAt,omitempty"`
	MealName *string                               `json:"mealName,omitempty"`
	Notes    *string                               `json:"notes,omitempty"`
	Options  *[]MealPlanOptionCreationRequestInput `json:"options,omitempty"`
	StartsAt *string                               `json:"startsAt,omitempty"`
}

// MealPlanEventUpdateRequestInput defines model for MealPlanEventUpdateRequestInput.
type MealPlanEventUpdateRequestInput struct {
	EndsAt   *string `json:"endsAt,omitempty"`
	MealName *string `json:"mealName,omitempty"`
	Notes    *string `json:"notes,omitempty"`
	StartsAt *string `json:"startsAt,omitempty"`
}

// MealPlanGroceryListItem defines model for MealPlanGroceryListItem.
type MealPlanGroceryListItem struct {
	ArchivedAt               *string               `json:"archivedAt,omitempty"`
	BelongsToMealPlan        *string               `json:"belongsToMealPlan,omitempty"`
	CreatedAt                *string               `json:"createdAt,omitempty"`
	Id                       *string               `json:"id,omitempty"`
	Ingredient               *ValidIngredient      `json:"ingredient,omitempty"`
	LastUpdatedAt            *string               `json:"lastUpdatedAt,omitempty"`
	MaximumQuantityNeeded    *float32              `json:"maximumQuantityNeeded,omitempty"`
	MeasurementUnit          *ValidMeasurementUnit `json:"measurementUnit,omitempty"`
	MinimumQuantityNeeded    *float32              `json:"minimumQuantityNeeded,omitempty"`
	PurchasePrice            *float32              `json:"purchasePrice,omitempty"`
	PurchasedMeasurementUnit *ValidMeasurementUnit `json:"purchasedMeasurementUnit,omitempty"`
	PurchasedUPC             *string               `json:"purchasedUPC,omitempty"`
	QuantityPurchased        *float32              `json:"quantityPurchased,omitempty"`
	Status                   *string               `json:"status,omitempty"`
	StatusExplanation        *string               `json:"statusExplanation,omitempty"`
}

// MealPlanGroceryListItemCreationRequestInput defines model for MealPlanGroceryListItemCreationRequestInput.
type MealPlanGroceryListItemCreationRequestInput struct {
	BelongsToMealPlan          *string  `json:"belongsToMealPlan,omitempty"`
	MaximumQuantityNeeded      *float32 `json:"maximumQuantityNeeded,omitempty"`
	MinimumQuantityNeeded      *float32 `json:"minimumQuantityNeeded,omitempty"`
	PurchasePrice              *float32 `json:"purchasePrice,omitempty"`
	PurchasedMeasurementUnitID *string  `json:"purchasedMeasurementUnitID,omitempty"`
	PurchasedUPC               *string  `json:"purchasedUPC,omitempty"`
	QuantityPurchased          *float32 `json:"quantityPurchased,omitempty"`
	Status                     *string  `json:"status,omitempty"`
	StatusExplanation          *string  `json:"statusExplanation,omitempty"`
	ValidIngredientID          *string  `json:"validIngredientID,omitempty"`
	ValidMeasurementUnitID     *string  `json:"validMeasurementUnitID,omitempty"`
}

// MealPlanGroceryListItemUpdateRequestInput defines model for MealPlanGroceryListItemUpdateRequestInput.
type MealPlanGroceryListItemUpdateRequestInput struct {
	BelongsToMealPlan          *string  `json:"belongsToMealPlan,omitempty"`
	MaximumQuantityNeeded      *float32 `json:"maximumQuantityNeeded,omitempty"`
	MinimumQuantityNeeded      *float32 `json:"minimumQuantityNeeded,omitempty"`
	PurchasePrice              *float32 `json:"purchasePrice,omitempty"`
	PurchasedMeasurementUnitID *string  `json:"purchasedMeasurementUnitID,omitempty"`
	PurchasedUPC               *string  `json:"purchasedUPC,omitempty"`
	QuantityPurchased          *float32 `json:"quantityPurchased,omitempty"`
	Status                     *string  `json:"status,omitempty"`
	StatusExplanation          *string  `json:"statusExplanation,omitempty"`
	ValidIngredientID          *string  `json:"validIngredientID,omitempty"`
	ValidMeasurementUnitID     *string  `json:"validMeasurementUnitID,omitempty"`
}

// MealPlanOption defines model for MealPlanOption.
type MealPlanOption struct {
	ArchivedAt             *string               `json:"archivedAt,omitempty"`
	AssignedCook           *string               `json:"assignedCook,omitempty"`
	AssignedDishwasher     *string               `json:"assignedDishwasher,omitempty"`
	BelongsToMealPlanEvent *string               `json:"belongsToMealPlanEvent,omitempty"`
	Chosen                 *bool                 `json:"chosen,omitempty"`
	CreatedAt              *string               `json:"createdAt,omitempty"`
	Id                     *string               `json:"id,omitempty"`
	LastUpdatedAt          *string               `json:"lastUpdatedAt,omitempty"`
	Meal                   *Meal                 `json:"meal,omitempty"`
	MealScale              *float32              `json:"mealScale,omitempty"`
	Notes                  *string               `json:"notes,omitempty"`
	TieBroken              *bool                 `json:"tieBroken,omitempty"`
	Votes                  *[]MealPlanOptionVote `json:"votes,omitempty"`
}

// MealPlanOptionCreationRequestInput defines model for MealPlanOptionCreationRequestInput.
type MealPlanOptionCreationRequestInput struct {
	AssignedCook       *string  `json:"assignedCook,omitempty"`
	AssignedDishwasher *string  `json:"assignedDishwasher,omitempty"`
	MealID             *string  `json:"mealID,omitempty"`
	MealScale          *float32 `json:"mealScale,omitempty"`
	Notes              *string  `json:"notes,omitempty"`
}

// MealPlanOptionUpdateRequestInput defines model for MealPlanOptionUpdateRequestInput.
type MealPlanOptionUpdateRequestInput struct {
	AssignedCook       *string  `json:"assignedCook,omitempty"`
	AssignedDishwasher *string  `json:"assignedDishwasher,omitempty"`
	MealID             *string  `json:"mealID,omitempty"`
	MealScale          *float32 `json:"mealScale,omitempty"`
	Notes              *string  `json:"notes,omitempty"`
}

// MealPlanOptionVote defines model for MealPlanOptionVote.
type MealPlanOptionVote struct {
	Abstain                 *bool   `json:"abstain,omitempty"`
	ArchivedAt              *string `json:"archivedAt,omitempty"`
	BelongsToMealPlanOption *string `json:"belongsToMealPlanOption,omitempty"`
	ByUser                  *string `json:"byUser,omitempty"`
	CreatedAt               *string `json:"createdAt,omitempty"`
	Id                      *string `json:"id,omitempty"`
	LastUpdatedAt           *string `json:"lastUpdatedAt,omitempty"`
	Notes                   *string `json:"notes,omitempty"`
	Rank                    *int    `json:"rank,omitempty"`
}

// MealPlanOptionVoteCreationInput defines model for MealPlanOptionVoteCreationInput.
type MealPlanOptionVoteCreationInput struct {
	Abstain                 *bool   `json:"abstain,omitempty"`
	BelongsToMealPlanOption *string `json:"belongsToMealPlanOption,omitempty"`
	Notes                   *string `json:"notes,omitempty"`
	Rank                    *int    `json:"rank,omitempty"`
}

// MealPlanOptionVoteCreationRequestInput defines model for MealPlanOptionVoteCreationRequestInput.
type MealPlanOptionVoteCreationRequestInput struct {
	Votes *[]MealPlanOptionVoteCreationInput `json:"votes,omitempty"`
}

// MealPlanOptionVoteUpdateRequestInput defines model for MealPlanOptionVoteUpdateRequestInput.
type MealPlanOptionVoteUpdateRequestInput struct {
	Abstain                 *bool   `json:"abstain,omitempty"`
	BelongsToMealPlanOption *string `json:"belongsToMealPlanOption,omitempty"`
	Notes                   *string `json:"notes,omitempty"`
	Rank                    *int    `json:"rank,omitempty"`
}

// MealPlanTask defines model for MealPlanTask.
type MealPlanTask struct {
	AssignedToUser      *string         `json:"assignedToUser,omitempty"`
	CompletedAt         *string         `json:"completedAt,omitempty"`
	CreatedAt           *string         `json:"createdAt,omitempty"`
	CreationExplanation *string         `json:"creationExplanation,omitempty"`
	Id                  *string         `json:"id,omitempty"`
	LastUpdatedAt       *string         `json:"lastUpdatedAt,omitempty"`
	MealPlanOption      *MealPlanOption `json:"mealPlanOption,omitempty"`
	RecipePrepTask      *RecipePrepTask `json:"recipePrepTask,omitempty"`
	Status              *string         `json:"status,omitempty"`
	StatusExplanation   *string         `json:"statusExplanation,omitempty"`
}

// MealPlanTaskCreationRequestInput defines model for MealPlanTaskCreationRequestInput.
type MealPlanTaskCreationRequestInput struct {
	AssignedToUser      *string `json:"assignedToUser,omitempty"`
	CreationExplanation *string `json:"creationExplanation,omitempty"`
	MealPlanOptionID    *string `json:"mealPlanOptionID,omitempty"`
	RecipePrepTaskID    *string `json:"recipePrepTaskID,omitempty"`
	Status              *string `json:"status,omitempty"`
	StatusExplanation   *string `json:"statusExplanation,omitempty"`
}

// MealPlanTaskStatusChangeRequestInput defines model for MealPlanTaskStatusChangeRequestInput.
type MealPlanTaskStatusChangeRequestInput struct {
	AssignedToUser    *string `json:"assignedToUser,omitempty"`
	Status            *string `json:"status,omitempty"`
	StatusExplanation *string `json:"statusExplanation,omitempty"`
}

// MealPlanUpdateRequestInput defines model for MealPlanUpdateRequestInput.
type MealPlanUpdateRequestInput struct {
	Notes          *string `json:"notes,omitempty"`
	VotingDeadline *string `json:"votingDeadline,omitempty"`
}

// ModifyUserPermissionsInput defines model for ModifyUserPermissionsInput.
type ModifyUserPermissionsInput struct {
	NewRoles *string `json:"newRoles,omitempty"`
	Reason   *string `json:"reason,omitempty"`
}

// OAuth2Client defines model for OAuth2Client.
type OAuth2Client struct {
	ArchivedAt   *string `json:"archivedAt,omitempty"`
	ClientID     *string `json:"clientID,omitempty"`
	ClientSecret *string `json:"clientSecret,omitempty"`
	CreatedAt    *string `json:"createdAt,omitempty"`
	Description  *string `json:"description,omitempty"`
	Id           *string `json:"id,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// OAuth2ClientCreationRequestInput defines model for OAuth2ClientCreationRequestInput.
type OAuth2ClientCreationRequestInput struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// OAuth2ClientCreationResponse defines model for OAuth2ClientCreationResponse.
type OAuth2ClientCreationResponse struct {
	ClientID     *string `json:"clientID,omitempty"`
	ClientSecret *string `json:"clientSecret,omitempty"`
	Description  *string `json:"description,omitempty"`
	Id           *string `json:"id,omitempty"`
	Name         *string `json:"name,omitempty"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	FilteredCount *int `json:"filteredCount,omitempty"`
	Limit         *int `json:"limit,omitempty"`
	Page          *int `json:"page,omitempty"`
	TotalCount    *int `json:"totalCount,omitempty"`
}

// PasswordResetToken defines model for PasswordResetToken.
type PasswordResetToken struct {
	ArchivedAt    *string `json:"archivedAt,omitempty"`
	BelongsToUser *string `json:"belongsToUser,omitempty"`
	CreatedAt     *string `json:"createdAt,omitempty"`
	ExpiresAt     *string `json:"expiresAt,omitempty"`
	Id            *string `json:"id,omitempty"`
	LastUpdatedAt *string `json:"lastUpdatedAt,omitempty"`
	Token         *string `json:"token,omitempty"`
}

// PasswordResetTokenCreationRequestInput defines model for PasswordResetTokenCreationRequestInput.
type PasswordResetTokenCreationRequestInput struct {
	EmailAddress *string `json:"emailAddress,omitempty"`
}

// PasswordResetTokenRedemptionRequestInput defines model for PasswordResetTokenRedemptionRequestInput.
type PasswordResetTokenRedemptionRequestInput struct {
	NewPassword *string `json:"newPassword,omitempty"`
	Token       *string `json:"token,omitempty"`
}

// PasswordUpdateInput defines model for PasswordUpdateInput.
type PasswordUpdateInput struct {
	CurrentPassword *string `json:"currentPassword,omitempty"`
	NewPassword     *string `json:"newPassword,omitempty"`
	TotpToken       *string `json:"totpToken,omitempty"`
}

// Recipe defines model for Recipe.
type Recipe struct {
	ArchivedAt               *string           `json:"archivedAt,omitempty"`
	CreatedAt                *string           `json:"createdAt,omitempty"`
	CreatedByUser            *string           `json:"createdByUser,omitempty"`
	Description              *string           `json:"description,omitempty"`
	EligibleForMeals         *bool             `json:"eligibleForMeals,omitempty"`
	Id                       *string           `json:"id,omitempty"`
	InspiredByRecipeID       *string           `json:"inspiredByRecipeID,omitempty"`
	LastUpdatedAt            *string           `json:"lastUpdatedAt,omitempty"`
	MaximumEstimatedPortions *float32          `json:"maximumEstimatedPortions,omitempty"`
	Media                    *[]RecipeMedia    `json:"media,omitempty"`
	MinimumEstimatedPortions *float32          `json:"minimumEstimatedPortions,omitempty"`
	Name                     *string           `json:"name,omitempty"`
	PluralPortionName        *string           `json:"pluralPortionName,omitempty"`
	PortionName              *string           `json:"portionName,omitempty"`
	PrepTasks                *[]RecipePrepTask `json:"prepTasks,omitempty"`
	SealOfApproval           *bool             `json:"sealOfApproval,omitempty"`
	Slug                     *string           `json:"slug,omitempty"`
	Source                   *string           `json:"source,omitempty"`
	Steps                    *[]RecipeStep     `json:"steps,omitempty"`
	SupportingRecipes        *[]Recipe         `json:"supportingRecipes,omitempty"`
	YieldsComponentType      *string           `json:"yieldsComponentType,omitempty"`
}

// RecipeCreationRequestInput defines model for RecipeCreationRequestInput.
type RecipeCreationRequestInput struct {
	AlsoCreateMeal           *bool                                             `json:"alsoCreateMeal,omitempty"`
	Description              *string                                           `json:"description,omitempty"`
	EligibleForMeals         *bool                                             `json:"eligibleForMeals,omitempty"`
	InspiredByRecipeID       *string                                           `json:"inspiredByRecipeID,omitempty"`
	MaximumEstimatedPortions *float32                                          `json:"maximumEstimatedPortions,omitempty"`
	MinimumEstimatedPortions *float32                                          `json:"minimumEstimatedPortions,omitempty"`
	Name                     *string                                           `json:"name,omitempty"`
	PluralPortionName        *string                                           `json:"pluralPortionName,omitempty"`
	PortionName              *string                                           `json:"portionName,omitempty"`
	PrepTasks                *[]RecipePrepTaskWithinRecipeCreationRequestInput `json:"prepTasks,omitempty"`
	SealOfApproval           *bool                                             `json:"sealOfApproval,omitempty"`
	Slug                     *string                                           `json:"slug,omitempty"`
	Source                   *string                                           `json:"source,omitempty"`
	Steps                    *[]RecipeStepCreationRequestInput                 `json:"steps,omitempty"`
	YieldsComponentType      *string                                           `json:"yieldsComponentType,omitempty"`
}

// RecipeMedia defines model for RecipeMedia.
type RecipeMedia struct {
	ArchivedAt          *string `json:"archivedAt,omitempty"`
	BelongsToRecipe     *string `json:"belongsToRecipe,omitempty"`
	BelongsToRecipeStep *string `json:"belongsToRecipeStep,omitempty"`
	CreatedAt           *string `json:"createdAt,omitempty"`
	ExternalPath        *string `json:"externalPath,omitempty"`
	Id                  *string `json:"id,omitempty"`
	Index               *int    `json:"index,omitempty"`
	InternalPath        *string `json:"internalPath,omitempty"`
	LastUpdatedAt       *string `json:"lastUpdatedAt,omitempty"`
	MimeType            *string `json:"mimeType,omitempty"`
}

// RecipePrepTask defines model for RecipePrepTask.
type RecipePrepTask struct {
	ArchivedAt                             *string               `json:"archivedAt,omitempty"`
	BelongsToRecipe                        *string               `json:"belongsToRecipe,omitempty"`
	CreatedAt                              *string               `json:"createdAt,omitempty"`
	Description                            *string               `json:"description,omitempty"`
	ExplicitStorageInstructions            *string               `json:"explicitStorageInstructions,omitempty"`
	Id                                     *string               `json:"id,omitempty"`
	LastUpdatedAt                          *string               `json:"lastUpdatedAt,omitempty"`
	MaximumStorageTemperatureInCelsius     *float32              `json:"maximumStorageTemperatureInCelsius,omitempty"`
	MaximumTimeBufferBeforeRecipeInSeconds *int                  `json:"maximumTimeBufferBeforeRecipeInSeconds,omitempty"`
	MinimumStorageTemperatureInCelsius     *float32              `json:"minimumStorageTemperatureInCelsius,omitempty"`
	MinimumTimeBufferBeforeRecipeInSeconds *int                  `json:"minimumTimeBufferBeforeRecipeInSeconds,omitempty"`
	Name                                   *string               `json:"name,omitempty"`
	Notes                                  *string               `json:"notes,omitempty"`
	Optional                               *bool                 `json:"optional,omitempty"`
	RecipeSteps                            *[]RecipePrepTaskStep `json:"recipeSteps,omitempty"`
	StorageType                            *string               `json:"storageType,omitempty"`
}

// RecipePrepTaskCreationRequestInput defines model for RecipePrepTaskCreationRequestInput.
type RecipePrepTaskCreationRequestInput struct {
	BelongsToRecipe                        *string                                   `json:"belongsToRecipe,omitempty"`
	Description                            *string                                   `json:"description,omitempty"`
	ExplicitStorageInstructions            *string                                   `json:"explicitStorageInstructions,omitempty"`
	MaximumStorageTemperatureInCelsius     *float32                                  `json:"maximumStorageTemperatureInCelsius,omitempty"`
	MaximumTimeBufferBeforeRecipeInSeconds *int                                      `json:"maximumTimeBufferBeforeRecipeInSeconds,omitempty"`
	MinimumStorageTemperatureInCelsius     *float32                                  `json:"minimumStorageTemperatureInCelsius,omitempty"`
	MinimumTimeBufferBeforeRecipeInSeconds *int                                      `json:"minimumTimeBufferBeforeRecipeInSeconds,omitempty"`
	Name                                   *string                                   `json:"name,omitempty"`
	Notes                                  *string                                   `json:"notes,omitempty"`
	Optional                               *bool                                     `json:"optional,omitempty"`
	RecipeSteps                            *[]RecipePrepTaskStepCreationRequestInput `json:"recipeSteps,omitempty"`
	StorageType                            *string                                   `json:"storageType,omitempty"`
}

// RecipePrepTaskStep defines model for RecipePrepTaskStep.
type RecipePrepTaskStep struct {
	BelongsToRecipeStep     *string `json:"belongsToRecipeStep,omitempty"`
	BelongsToRecipeStepTask *string `json:"belongsToRecipeStepTask,omitempty"`
	Id                      *string `json:"id,omitempty"`
	SatisfiesRecipeStep     *bool   `json:"satisfiesRecipeStep,omitempty"`
}

// RecipePrepTaskStepCreationRequestInput defines model for RecipePrepTaskStepCreationRequestInput.
type RecipePrepTaskStepCreationRequestInput struct {
	BelongsToRecipeStep *string `json:"belongsToRecipeStep,omitempty"`
	SatisfiesRecipeStep *bool   `json:"satisfiesRecipeStep,omitempty"`
}

// RecipePrepTaskStepUpdateRequestInput defines model for RecipePrepTaskStepUpdateRequestInput.
type RecipePrepTaskStepUpdateRequestInput struct {
	BelongsToRecipeStep     *string `json:"belongsToRecipeStep,omitempty"`
	BelongsToRecipeStepTask *string `json:"belongsToRecipeStepTask,omitempty"`
	SatisfiesRecipeStep     *bool   `json:"satisfiesRecipeStep,omitempty"`
}

// RecipePrepTaskStepWithinRecipeCreationRequestInput defines model for RecipePrepTaskStepWithinRecipeCreationRequestInput.
type RecipePrepTaskStepWithinRecipeCreationRequestInput struct {
	BelongsToRecipeStepIndex *int  `json:"belongsToRecipeStepIndex,omitempty"`
	SatisfiesRecipeStep      *bool `json:"satisfiesRecipeStep,omitempty"`
}

// RecipePrepTaskUpdateRequestInput defines model for RecipePrepTaskUpdateRequestInput.
type RecipePrepTaskUpdateRequestInput struct {
	BelongsToRecipe                        *string                                 `json:"belongsToRecipe,omitempty"`
	Description                            *string                                 `json:"description,omitempty"`
	ExplicitStorageInstructions            *string                                 `json:"explicitStorageInstructions,omitempty"`
	MaximumStorageTemperatureInCelsius     *float32                                `json:"maximumStorageTemperatureInCelsius,omitempty"`
	MaximumTimeBufferBeforeRecipeInSeconds *int                                    `json:"maximumTimeBufferBeforeRecipeInSeconds,omitempty"`
	MinimumStorageTemperatureInCelsius     *float32                                `json:"minimumStorageTemperatureInCelsius,omitempty"`
	MinimumTimeBufferBeforeRecipeInSeconds *int                                    `json:"minimumTimeBufferBeforeRecipeInSeconds,omitempty"`
	Name                                   *string                                 `json:"name,omitempty"`
	Notes                                  *string                                 `json:"notes,omitempty"`
	Optional                               *bool                                   `json:"optional,omitempty"`
	RecipeSteps                            *[]RecipePrepTaskStepUpdateRequestInput `json:"recipeSteps,omitempty"`
	StorageType                            *string                                 `json:"storageType,omitempty"`
}

// RecipePrepTaskWithinRecipeCreationRequestInput defines model for RecipePrepTaskWithinRecipeCreationRequestInput.
type RecipePrepTaskWithinRecipeCreationRequestInput struct {
	BelongsToRecipe                        *string                                               `json:"belongsToRecipe,omitempty"`
	Description                            *string                                               `json:"description,omitempty"`
	ExplicitStorageInstructions            *string                                               `json:"explicitStorageInstructions,omitempty"`
	MaximumStorageTemperatureInCelsius     *float32                                              `json:"maximumStorageTemperatureInCelsius,omitempty"`
	MaximumTimeBufferBeforeRecipeInSeconds *int                                                  `json:"maximumTimeBufferBeforeRecipeInSeconds,omitempty"`
	MinimumStorageTemperatureInCelsius     *float32                                              `json:"minimumStorageTemperatureInCelsius,omitempty"`
	MinimumTimeBufferBeforeRecipeInSeconds *int                                                  `json:"minimumTimeBufferBeforeRecipeInSeconds,omitempty"`
	Name                                   *string                                               `json:"name,omitempty"`
	Notes                                  *string                                               `json:"notes,omitempty"`
	Optional                               *bool                                                 `json:"optional,omitempty"`
	RecipeSteps                            *[]RecipePrepTaskStepWithinRecipeCreationRequestInput `json:"recipeSteps,omitempty"`
	StorageType                            *string                                               `json:"storageType,omitempty"`
}

// RecipeRating defines model for RecipeRating.
type RecipeRating struct {
	ArchivedAt    *string  `json:"archivedAt,omitempty"`
	ByUser        *string  `json:"byUser,omitempty"`
	Cleanup       *float32 `json:"cleanup,omitempty"`
	CreatedAt     *string  `json:"createdAt,omitempty"`
	Difficulty    *float32 `json:"difficulty,omitempty"`
	Id            *string  `json:"id,omitempty"`
	Instructions  *float32 `json:"instructions,omitempty"`
	LastUpdatedAt *string  `json:"lastUpdatedAt,omitempty"`
	Notes         *string  `json:"notes,omitempty"`
	Overall       *float32 `json:"overall,omitempty"`
	RecipeID      *string  `json:"recipeID,omitempty"`
	Taste         *float32 `json:"taste,omitempty"`
}

// RecipeRatingCreationRequestInput defines model for RecipeRatingCreationRequestInput.
type RecipeRatingCreationRequestInput struct {
	ByUser       *string  `json:"byUser,omitempty"`
	Cleanup      *float32 `json:"cleanup,omitempty"`
	Difficulty   *float32 `json:"difficulty,omitempty"`
	Instructions *float32 `json:"instructions,omitempty"`
	Notes        *string  `json:"notes,omitempty"`
	Overall      *float32 `json:"overall,omitempty"`
	RecipeID     *string  `json:"recipeID,omitempty"`
	Taste        *float32 `json:"taste,omitempty"`
}

// RecipeRatingUpdateRequestInput defines model for RecipeRatingUpdateRequestInput.
type RecipeRatingUpdateRequestInput struct {
	ByUser       *string  `json:"byUser,omitempty"`
	Cleanup      *float32 `json:"cleanup,omitempty"`
	Difficulty   *float32 `json:"difficulty,omitempty"`
	Instructions *float32 `json:"instructions,omitempty"`
	Notes        *string  `json:"notes,omitempty"`
	Overall      *float32 `json:"overall,omitempty"`
	RecipeID     *string  `json:"recipeID,omitempty"`
	Taste        *float32 `json:"taste,omitempty"`
}

// RecipeStep defines model for RecipeStep.
type RecipeStep struct {
	ArchivedAt                    *string                          `json:"archivedAt,omitempty"`
	BelongsToRecipe               *string                          `json:"belongsToRecipe,omitempty"`
	CompletionConditions          *[]RecipeStepCompletionCondition `json:"completionConditions,omitempty"`
	ConditionExpression           *string                          `json:"conditionExpression,omitempty"`
	CreatedAt                     *string                          `json:"createdAt,omitempty"`
	ExplicitInstructions          *string                          `json:"explicitInstructions,omitempty"`
	Id                            *string                          `json:"id,omitempty"`
	Index                         *int                             `json:"index,omitempty"`
	Ingredients                   *[]RecipeStepIngredient          `json:"ingredients,omitempty"`
	Instruments                   *[]RecipeStepInstrument          `json:"instruments,omitempty"`
	LastUpdatedAt                 *string                          `json:"lastUpdatedAt,omitempty"`
	MaximumEstimatedTimeInSeconds *int                             `json:"maximumEstimatedTimeInSeconds,omitempty"`
	MaximumTemperatureInCelsius   *float32                         `json:"maximumTemperatureInCelsius,omitempty"`
	Media                         *[]RecipeMedia                   `json:"media,omitempty"`
	MinimumEstimatedTimeInSeconds *int                             `json:"minimumEstimatedTimeInSeconds,omitempty"`
	MinimumTemperatureInCelsius   *float32                         `json:"minimumTemperatureInCelsius,omitempty"`
	Notes                         *string                          `json:"notes,omitempty"`
	Optional                      *bool                            `json:"optional,omitempty"`
	Preparation                   *ValidPreparation                `json:"preparation,omitempty"`
	Products                      *[]RecipeStepProduct             `json:"products,omitempty"`
	StartTimerAutomatically       *bool                            `json:"startTimerAutomatically,omitempty"`
	Vessels                       *[]RecipeStepVessel              `json:"vessels,omitempty"`
}

// RecipeStepCompletionCondition defines model for RecipeStepCompletionCondition.
type RecipeStepCompletionCondition struct {
	ArchivedAt          *string                                    `json:"archivedAt,omitempty"`
	BelongsToRecipeStep *string                                    `json:"belongsToRecipeStep,omitempty"`
	CreatedAt           *string                                    `json:"createdAt,omitempty"`
	Id                  *string                                    `json:"id,omitempty"`
	IngredientState     *ValidIngredientState                      `json:"ingredientState,omitempty"`
	Ingredients         *[]RecipeStepCompletionConditionIngredient `json:"ingredients,omitempty"`
	LastUpdatedAt       *string                                    `json:"lastUpdatedAt,omitempty"`
	Notes               *string                                    `json:"notes,omitempty"`
	Optional            *bool                                      `json:"optional,omitempty"`
}

// RecipeStepCompletionConditionCreationRequestInput defines model for RecipeStepCompletionConditionCreationRequestInput.
type RecipeStepCompletionConditionCreationRequestInput struct {
	BelongsToRecipeStep *string `json:"belongsToRecipeStep,omitempty"`
	IngredientState     *string `json:"ingredientState,omitempty"`
	Ingredients         *[]int  `json:"ingredients,omitempty"`
	Notes               *string `json:"notes,omitempty"`
	Optional            *bool   `json:"optional,omitempty"`
}

// RecipeStepCompletionConditionForExistingRecipeCreationRequestInput defines model for RecipeStepCompletionConditionForExistingRecipeCreationRequestInput.
type RecipeStepCompletionConditionForExistingRecipeCreationRequestInput struct {
	BelongsToRecipeStep *string                                                                         `json:"belongsToRecipeStep,omitempty"`
	IngredientState     *string                                                                         `json:"ingredientState,omitempty"`
	Ingredients         *[]RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput `json:"ingredients,omitempty"`
	Notes               *string                                                                         `json:"notes,omitempty"`
	Optional            *bool                                                                           `json:"optional,omitempty"`
}

// RecipeStepCompletionConditionIngredient defines model for RecipeStepCompletionConditionIngredient.
type RecipeStepCompletionConditionIngredient struct {
	ArchivedAt                             *string `json:"archivedAt,omitempty"`
	BelongsToRecipeStepCompletionCondition *string `json:"belongsToRecipeStepCompletionCondition,omitempty"`
	CreatedAt                              *string `json:"createdAt,omitempty"`
	Id                                     *string `json:"id,omitempty"`
	LastUpdatedAt                          *string `json:"lastUpdatedAt,omitempty"`
	RecipeStepIngredient                   *string `json:"recipeStepIngredient,omitempty"`
}

// RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput defines model for RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput.
type RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput struct {
	RecipeStepIngredient *string `json:"recipeStepIngredient,omitempty"`
}

// RecipeStepCompletionConditionUpdateRequestInput defines model for RecipeStepCompletionConditionUpdateRequestInput.
type RecipeStepCompletionConditionUpdateRequestInput struct {
	BelongsToRecipeStep *string `json:"belongsToRecipeStep,omitempty"`
	IngredientState     *string `json:"ingredientState,omitempty"`
	Notes               *string `json:"notes,omitempty"`
	Optional            *bool   `json:"optional,omitempty"`
}

// RecipeStepCreationRequestInput defines model for RecipeStepCreationRequestInput.
type RecipeStepCreationRequestInput struct {
	CompletionConditions          *[]RecipeStepCompletionConditionCreationRequestInput `json:"completionConditions,omitempty"`
	ConditionExpression           *string                                              `json:"conditionExpression,omitempty"`
	ExplicitInstructions          *string                                              `json:"explicitInstructions,omitempty"`
	Index                         *int                                                 `json:"index,omitempty"`
	Ingredients                   *[]RecipeStepIngredientCreationRequestInput          `json:"ingredients,omitempty"`
	Instruments                   *[]RecipeStepInstrumentCreationRequestInput          `json:"instruments,omitempty"`
	MaximumEstimatedTimeInSeconds *int                                                 `json:"maximumEstimatedTimeInSeconds,omitempty"`
	MaximumTemperatureInCelsius   *float32                                             `json:"maximumTemperatureInCelsius,omitempty"`
	MinimumEstimatedTimeInSeconds *int                                                 `json:"minimumEstimatedTimeInSeconds,omitempty"`
	MinimumTemperatureInCelsius   *float32                                             `json:"minimumTemperatureInCelsius,omitempty"`
	Notes                         *string                                              `json:"notes,omitempty"`
	Optional                      *bool                                                `json:"optional,omitempty"`
	PreparationID                 *string                                              `json:"preparationID,omitempty"`
	Products                      *[]RecipeStepProductCreationRequestInput             `json:"products,omitempty"`
	StartTimerAutomatically       *bool                                                `json:"startTimerAutomatically,omitempty"`
	Vessels                       *[]RecipeStepVesselCreationRequestInput              `json:"vessels,omitempty"`
}

// RecipeStepIngredient defines model for RecipeStepIngredient.
type RecipeStepIngredient struct {
	ArchivedAt             *string               `json:"archivedAt,omitempty"`
	BelongsToRecipeStep    *string               `json:"belongsToRecipeStep,omitempty"`
	CreatedAt              *string               `json:"createdAt,omitempty"`
	Id                     *string               `json:"id,omitempty"`
	Ingredient             *ValidIngredient      `json:"ingredient,omitempty"`
	IngredientNotes        *string               `json:"ingredientNotes,omitempty"`
	LastUpdatedAt          *string               `json:"lastUpdatedAt,omitempty"`
	MaximumQuantity        *float32              `json:"maximumQuantity,omitempty"`
	MeasurementUnit        *ValidMeasurementUnit `json:"measurementUnit,omitempty"`
	MinimumQuantity        *float32              `json:"minimumQuantity,omitempty"`
	Name                   *string               `json:"name,omitempty"`
	OptionIndex            *int                  `json:"optionIndex,omitempty"`
	Optional               *bool                 `json:"optional,omitempty"`
	ProductOfRecipeID      *string               `json:"productOfRecipeID,omitempty"`
	ProductPercentageToUse *float32              `json:"productPercentageToUse,omitempty"`
	QuantityNotes          *string               `json:"quantityNotes,omitempty"`
	RecipeStepProductID    *string               `json:"recipeStepProductID,omitempty"`
	ToTaste                *bool                 `json:"toTaste,omitempty"`
	VesselIndex            *int                  `json:"vesselIndex,omitempty"`
}

// RecipeStepIngredientCreationRequestInput defines model for RecipeStepIngredientCreationRequestInput.
type RecipeStepIngredientCreationRequestInput struct {
	IngredientID                    *string  `json:"ingredientID,omitempty"`
	IngredientNotes                 *string  `json:"ingredientNotes,omitempty"`
	MaximumQuantity                 *float32 `json:"maximumQuantity,omitempty"`
	MeasurementUnitID               *string  `json:"measurementUnitID,omitempty"`
	MinimumQuantity                 *float32 `json:"minimumQuantity,omitempty"`
	Name                            *string  `json:"name,omitempty"`
	OptionIndex                     *int     `json:"optionIndex,omitempty"`
	Optional                        *bool    `json:"optional,omitempty"`
	ProductOfRecipeID               *string  `json:"productOfRecipeID,omitempty"`
	ProductOfRecipeStepIndex        *int     `json:"productOfRecipeStepIndex,omitempty"`
	ProductOfRecipeStepProductIndex *int     `json:"productOfRecipeStepProductIndex,omitempty"`
	ProductPercentageToUse          *float32 `json:"productPercentageToUse,omitempty"`
	QuantityNotes                   *string  `json:"quantityNotes,omitempty"`
	ToTaste                         *bool    `json:"toTaste,omitempty"`
	VesselIndex                     *int     `json:"vesselIndex,omitempty"`
}

// RecipeStepIngredientUpdateRequestInput defines model for RecipeStepIngredientUpdateRequestInput.
type RecipeStepIngredientUpdateRequestInput struct {
	BelongsToRecipeStep    *string  `json:"belongsToRecipeStep,omitempty"`
	IngredientID           *string  `json:"ingredientID,omitempty"`
	IngredientNotes        *string  `json:"ingredientNotes,omitempty"`
	MaximumQuantity        *float32 `json:"maximumQuantity,omitempty"`
	MeasurementUnitID      *string  `json:"measurementUnitID,omitempty"`
	MinimumQuantity        *float32 `json:"minimumQuantity,omitempty"`
	Name                   *string  `json:"name,omitempty"`
	OptionIndex            *int     `json:"optionIndex,omitempty"`
	Optional               *bool    `json:"optional,omitempty"`
	ProductOfRecipeID      *string  `json:"productOfRecipeID,omitempty"`
	ProductPercentageToUse *float32 `json:"productPercentageToUse,omitempty"`
	QuantityNotes          *string  `json:"quantityNotes,omitempty"`
	RecipeStepProductID    *string  `json:"recipeStepProductID,omitempty"`
	ToTaste                *bool    `json:"toTaste,omitempty"`
	VesselIndex            *int     `json:"vesselIndex,omitempty"`
}

// RecipeStepInstrument defines model for RecipeStepInstrument.
type RecipeStepInstrument struct {
	ArchivedAt          *string          `json:"archivedAt,omitempty"`
	BelongsToRecipeStep *string          `json:"belongsToRecipeStep,omitempty"`
	CreatedAt           *string          `json:"createdAt,omitempty"`
	Id                  *string          `json:"id,omitempty"`
	Instrument          *ValidInstrument `json:"instrument,omitempty"`
	LastUpdatedAt       *string          `json:"lastUpdatedAt,omitempty"`
	MaximumQuantity     *int             `json:"maximumQuantity,omitempty"`
	MinimumQuantity     *int             `json:"minimumQuantity,omitempty"`
	Name                *string          `json:"name,omitempty"`
	Notes               *string          `json:"notes,omitempty"`
	OptionIndex         *int             `json:"optionIndex,omitempty"`
	Optional            *bool            `json:"optional,omitempty"`
	PreferenceRank      *int             `json:"preferenceRank,omitempty"`
	RecipeStepProductID *string          `json:"recipeStepProductID,omitempty"`
}

// RecipeStepInstrumentCreationRequestInput defines model for RecipeStepInstrumentCreationRequestInput.
type RecipeStepInstrumentCreationRequestInput struct {
	InstrumentID                    *string `json:"instrumentID,omitempty"`
	MaximumQuantity                 *int    `json:"maximumQuantity,omitempty"`
	MinimumQuantity                 *int    `json:"minimumQuantity,omitempty"`
	Name                            *string `json:"name,omitempty"`
	Notes                           *string `json:"notes,omitempty"`
	OptionIndex                     *int    `json:"optionIndex,omitempty"`
	Optional                        *bool   `json:"optional,omitempty"`
	PreferenceRank                  *int    `json:"preferenceRank,omitempty"`
	ProductOfRecipeStepIndex        *int    `json:"productOfRecipeStepIndex,omitempty"`
	ProductOfRecipeStepProductIndex *int    `json:"productOfRecipeStepProductIndex,omitempty"`
	RecipeStepProductID             *string `json:"recipeStepProductID,omitempty"`
}

// RecipeStepInstrumentUpdateRequestInput defines model for RecipeStepInstrumentUpdateRequestInput.
type RecipeStepInstrumentUpdateRequestInput struct {
	BelongsToRecipeStep *string `json:"belongsToRecipeStep,omitempty"`
	InstrumentID        *string `json:"instrumentID,omitempty"`
	MaximumQuantity     *int    `json:"maximumQuantity,omitempty"`
	MinimumQuantity     *int    `json:"minimumQuantity,omitempty"`
	Name                *string `json:"name,omitempty"`
	Notes               *string `json:"notes,omitempty"`
	OptionIndex         *int    `json:"optionIndex,omitempty"`
	Optional            *bool   `json:"optional,omitempty"`
	PreferenceRank      *int    `json:"preferenceRank,omitempty"`
	RecipeStepProductID *string `json:"recipeStepProductID,omitempty"`
}

// RecipeStepProduct defines model for RecipeStepProduct.
type RecipeStepProduct struct {
	ArchivedAt                         *string               `json:"archivedAt,omitempty"`
	BelongsToRecipeStep                *string               `json:"belongsToRecipeStep,omitempty"`
	Compostable                        *bool                 `json:"compostable,omitempty"`
	ContainedInVesselIndex             *int                  `json:"containedInVesselIndex,omitempty"`
	CreatedAt                          *string               `json:"createdAt,omitempty"`
	Id                                 *string               `json:"id,omitempty"`
	Index                              *int                  `json:"index,omitempty"`
	IsLiquid                           *bool                 `json:"isLiquid,omitempty"`
	IsWaste                            *bool                 `json:"isWaste,omitempty"`
	LastUpdatedAt                      *string               `json:"lastUpdatedAt,omitempty"`
	MaximumQuantity                    *float32              `json:"maximumQuantity,omitempty"`
	MaximumStorageDurationInSeconds    *int                  `json:"maximumStorageDurationInSeconds,omitempty"`
	MaximumStorageTemperatureInCelsius *float32              `json:"maximumStorageTemperatureInCelsius,omitempty"`
	MeasurementUnit                    *ValidMeasurementUnit `json:"measurementUnit,omitempty"`
	MinimumQuantity                    *float32              `json:"minimumQuantity,omitempty"`
	MinimumStorageTemperatureInCelsius *float32              `json:"minimumStorageTemperatureInCelsius,omitempty"`
	Name                               *string               `json:"name,omitempty"`
	QuantityNotes                      *string               `json:"quantityNotes,omitempty"`
	StorageInstructions                *string               `json:"storageInstructions,omitempty"`
	Type                               *string               `json:"type,omitempty"`
}

// RecipeStepProductCreationRequestInput defines model for RecipeStepProductCreationRequestInput.
type RecipeStepProductCreationRequestInput struct {
	Compostable                        *bool    `json:"compostable,omitempty"`
	ContainedInVesselIndex             *int     `json:"containedInVesselIndex,omitempty"`
	Index                              *int     `json:"index,omitempty"`
	IsLiquid                           *bool    `json:"isLiquid,omitempty"`
	IsWaste                            *bool    `json:"isWaste,omitempty"`
	MaximumQuantity                    *float32 `json:"maximumQuantity,omitempty"`
	MaximumStorageDurationInSeconds    *int     `json:"maximumStorageDurationInSeconds,omitempty"`
	MaximumStorageTemperatureInCelsius *float32 `json:"maximumStorageTemperatureInCelsius,omitempty"`
	MeasurementUnitID                  *string  `json:"measurementUnitID,omitempty"`
	MinimumQuantity                    *float32 `json:"minimumQuantity,omitempty"`
	MinimumStorageTemperatureInCelsius *float32 `json:"minimumStorageTemperatureInCelsius,omitempty"`
	Name                               *string  `json:"name,omitempty"`
	QuantityNotes                      *string  `json:"quantityNotes,omitempty"`
	StorageInstructions                *string  `json:"storageInstructions,omitempty"`
	Type                               *string  `json:"type,omitempty"`
}

// RecipeStepProductUpdateRequestInput defines model for RecipeStepProductUpdateRequestInput.
type RecipeStepProductUpdateRequestInput struct {
	BelongsToRecipeStep                *string  `json:"belongsToRecipeStep,omitempty"`
	Compostable                        *bool    `json:"compostable,omitempty"`
	ContainedInVesselIndex             *int     `json:"containedInVesselIndex,omitempty"`
	Index                              *int     `json:"index,omitempty"`
	IsLiquid                           *bool    `json:"isLiquid,omitempty"`
	IsWaste                            *bool    `json:"isWaste,omitempty"`
	MaximumQuantity                    *float32 `json:"maximumQuantity,omitempty"`
	MaximumStorageDurationInSeconds    *int     `json:"maximumStorageDurationInSeconds,omitempty"`
	MaximumStorageTemperatureInCelsius *float32 `json:"maximumStorageTemperatureInCelsius,omitempty"`
	MeasurementUnitID                  *string  `json:"measurementUnitID,omitempty"`
	MinimumQuantity                    *float32 `json:"minimumQuantity,omitempty"`
	MinimumStorageTemperatureInCelsius *float32 `json:"minimumStorageTemperatureInCelsius,omitempty"`
	Name                               *string  `json:"name,omitempty"`
	QuantityNotes                      *string  `json:"quantityNotes,omitempty"`
	StorageInstructions                *string  `json:"storageInstructions,omitempty"`
	Type                               *string  `json:"type,omitempty"`
}

// RecipeStepUpdateRequestInput defines model for RecipeStepUpdateRequestInput.
type RecipeStepUpdateRequestInput struct {
	BelongsToRecipe               *string           `json:"belongsToRecipe,omitempty"`
	ConditionExpression           *string           `json:"conditionExpression,omitempty"`
	ExplicitInstructions          *string           `json:"explicitInstructions,omitempty"`
	Index                         *int              `json:"index,omitempty"`
	MaximumEstimatedTimeInSeconds *int              `json:"maximumEstimatedTimeInSeconds,omitempty"`
	MaximumTemperatureInCelsius   *float32          `json:"maximumTemperatureInCelsius,omitempty"`
	MinimumEstimatedTimeInSeconds *int              `json:"minimumEstimatedTimeInSeconds,omitempty"`
	MinimumTemperatureInCelsius   *float32          `json:"minimumTemperatureInCelsius,omitempty"`
	Notes                         *string           `json:"notes,omitempty"`
	Optional                      *bool             `json:"optional,omitempty"`
	Preparation                   *ValidPreparation `json:"preparation,omitempty"`
	StartTimerAutomatically       *bool             `json:"startTimerAutomatically,omitempty"`
}

// RecipeStepVessel defines model for RecipeStepVessel.
type RecipeStepVessel struct {
	ArchivedAt           *string      `json:"archivedAt,omitempty"`
	BelongsToRecipeStep  *string      `json:"belongsToRecipeStep,omitempty"`
	CreatedAt            *string      `json:"createdAt,omitempty"`
	Id                   *string      `json:"id,omitempty"`
	LastUpdatedAt        *string      `json:"lastUpdatedAt,omitempty"`
	MaximumQuantity      *int         `json:"maximumQuantity,omitempty"`
	MinimumQuantity      *int         `json:"minimumQuantity,omitempty"`
	Name                 *string      `json:"name,omitempty"`
	Notes                *string      `json:"notes,omitempty"`
	RecipeStepProductID  *string      `json:"recipeStepProductID,omitempty"`
	UnavailableAfterStep *bool        `json:"unavailableAfterStep,omitempty"`
	Vessel               *ValidVessel `json:"vessel,omitempty"`
	VesselPreposition    *string      `json:"vesselPreposition,omitempty"`
}

// RecipeStepVesselCreationRequestInput defines model for RecipeStepVesselCreationRequestInput.
type RecipeStepVesselCreationRequestInput struct {
	MaximumQuantity                 *int    `json:"maximumQuantity,omitempty"`
	MinimumQuantity                 *int    `json:"minimumQuantity,omitempty"`
	Name                            *string `json:"name,omitempty"`
	Notes                           *string `json:"notes,omitempty"`
	ProductOfRecipeStepIndex        *int    `json:"productOfRecipeStepIndex,omitempty"`
	ProductOfRecipeStepProductIndex *int    `json:"productOfRecipeStepProductIndex,omitempty"`
	RecipeStepProductID             *string `json:"recipeStepProductID,omitempty"`
	UnavailableAfterStep            *bool   `json:"unavailableAfterStep,omitempty"`
	VesselID                        *string `json:"vesselID,omitempty"`
	VesselPreposition               *string `json:"vesselPreposition,omitempty"`
}

// RecipeStepVesselUpdateRequestInput defines model for RecipeStepVesselUpdateRequestInput.
type RecipeStepVesselUpdateRequestInput struct {
	BelongsToRecipeStep  *string `json:"belongsToRecipeStep,omitempty"`
	MaximumQuantity      *int    `json:"maximumQuantity,omitempty"`
	MinimumQuantity      *int    `json:"minimumQuantity,omitempty"`
	Name                 *string `json:"name,omitempty"`
	Notes                *string `json:"notes,omitempty"`
	RecipeStepProductID  *string `json:"recipeStepProductID,omitempty"`
	UnavailableAfterStep *bool   `json:"unavailableAfterStep,omitempty"`
	VesselID             *string `json:"vesselID,omitempty"`
	VesselPreposition    *string `json:"vesselPreposition,omitempty"`
}

// RecipeUpdateRequestInput defines model for RecipeUpdateRequestInput.
type RecipeUpdateRequestInput struct {
	Description              *string  `json:"description,omitempty"`
	EligibleForMeals         *bool    `json:"eligibleForMeals,omitempty"`
	InspiredByRecipeID       *string  `json:"inspiredByRecipeID,omitempty"`
	MaximumEstimatedPortions *float32 `json:"maximumEstimatedPortions,omitempty"`
	MinimumEstimatedPortions *float32 `json:"minimumEstimatedPortions,omitempty"`
	Name                     *string  `json:"name,omitempty"`
	PluralPortionName        *string  `json:"pluralPortionName,omitempty"`
	PortionName              *string  `json:"portionName,omitempty"`
	SealOfApproval           *bool    `json:"sealOfApproval,omitempty"`
	Slug                     *string  `json:"slug,omitempty"`
	Source                   *string  `json:"source,omitempty"`
	YieldsComponentType      *string  `json:"yieldsComponentType,omitempty"`
}

// ResponseDetails defines model for ResponseDetails.
type ResponseDetails struct {
	CurrentHouseholdID *string `json:"currentHouseholdID,omitempty"`
	TraceID            *string `json:"traceID,omitempty"`
}

// ServiceSetting defines model for ServiceSetting.
type ServiceSetting struct {
	AdminsOnly    *bool     `json:"adminsOnly,omitempty"`
	ArchivedAt    *string   `json:"archivedAt,omitempty"`
	CreatedAt     *string   `json:"createdAt,omitempty"`
	DefaultValue  *string   `json:"defaultValue,omitempty"`
	Description   *string   `json:"description,omitempty"`
	Enumeration   *[]string `json:"enumeration,omitempty"`
	Id            *string   `json:"id,omitempty"`
	LastUpdatedAt *string   `json:"lastUpdatedAt,omitempty"`
	Name          *string   `json:"name,omitempty"`
	Type          *string   `json:"type,omitempty"`
}

// ServiceSettingConfiguration defines model for ServiceSettingConfiguration.
type ServiceSettingConfiguration struct {
	ArchivedAt         *string         `json:"archivedAt,omitempty"`
	BelongsToHousehold *string         `json:"belongsToHousehold,omitempty"`
	BelongsToUser      *string         `json:"belongsToUser,omitempty"`
	CreatedAt          *string         `json:"createdAt,omitempty"`
	Id                 *string         `json:"id,omitempty"`
	LastUpdatedAt      *string         `json:"lastUpdatedAt,omitempty"`
	Notes              *string         `json:"notes,omitempty"`
	ServiceSetting     *ServiceSetting `json:"serviceSetting,omitempty"`
	Value              *string         `json:"value,omitempty"`
}

// ServiceSettingConfigurationCreationRequestInput defines model for ServiceSettingConfigurationCreationRequestInput.
type ServiceSettingConfigurationCreationRequestInput struct {
	BelongsToHousehold *string `json:"belongsToHousehold,omitempty"`
	BelongsToUser      *string `json:"belongsToUser,omitempty"`
	Notes              *string `json:"notes,omitempty"`
	ServiceSettingID   *string `json:"serviceSettingID,omitempty"`
	Value              *string `json:"value,omitempty"`
}

// ServiceSettingConfigurationUpdateRequestInput defines model for ServiceSettingConfigurationUpdateRequestInput.
type ServiceSettingConfigurationUpdateRequestInput struct {
	BelongsToHousehold *string `json:"belongsToHousehold,omitempty"`
	BelongsToUser      *string `json:"belongsToUser,omitempty"`
	Notes              *string `json:"notes,omitempty"`
	ServiceSettingID   *string `json:"serviceSettingID,omitempty"`
	Value              *string `json:"value,omitempty"`
}

// ServiceSettingCreationRequestInput defines model for ServiceSettingCreationRequestInput.
type ServiceSettingCreationRequestInput struct {
	AdminsOnly   *bool     `json:"adminsOnly,omitempty"`
	DefaultValue *string   `json:"defaultValue,omitempty"`
	Description  *string   `json:"description,omitempty"`
	Enumeration  *[]string `json:"enumeration,omitempty"`
	Name         *string   `json:"name,omitempty"`
	Type         *string   `json:"type,omitempty"`
}

// TOTPSecretRefreshInput defines model for TOTPSecretRefreshInput.
type TOTPSecretRefreshInput struct {
	CurrentPassword *string `json:"currentPassword,omitempty"`
	TotpToken       *string `json:"totpToken,omitempty"`
}

// TOTPSecretRefreshResponse defines model for TOTPSecretRefreshResponse.
type TOTPSecretRefreshResponse struct {
	QrCode          *string `json:"qrCode,omitempty"`
	TwoFactorSecret *string `json:"twoFactorSecret,omitempty"`
}

// TOTPSecretVerificationInput defines model for TOTPSecretVerificationInput.
type TOTPSecretVerificationInput struct {
	TotpToken *string `json:"totpToken,omitempty"`
	UserID    *string `json:"userID,omitempty"`
}

// User defines model for User.
type User struct {
	AccountStatus             *string `json:"accountStatus,omitempty"`
	AccountStatusExplanation  *string `json:"accountStatusExplanation,omitempty"`
	ArchivedAt                *string `json:"archivedAt,omitempty"`
	Avatar                    *string `json:"avatar,omitempty"`
	Birthday                  *string `json:"birthday,omitempty"`
	CreatedAt                 *string `json:"createdAt,omitempty"`
	EmailAddress              *string `json:"emailAddress,omitempty"`
	EmailAddressVerifiedAt    *string `json:"emailAddressVerifiedAt,omitempty"`
	FirstName                 *string `json:"firstName,omitempty"`
	Id                        *string `json:"id,omitempty"`
	LastAcceptedPrivacyPolicy *string `json:"lastAcceptedPrivacyPolicy,omitempty"`
	LastAcceptedTOS           *string `json:"lastAcceptedTOS,omitempty"`
	LastName                  *string `json:"lastName,omitempty"`
	LastUpdatedAt             *string `json:"lastUpdatedAt,omitempty"`
	PasswordLastChangedAt     *string `json:"passwordLastChangedAt,omitempty"`
	RequiresPasswordChange    *bool   `json:"requiresPasswordChange,omitempty"`
	ServiceRoles              *string `json:"serviceRoles,omitempty"`
	TwoFactorSecretVerifiedAt *string `json:"twoFactorSecretVerifiedAt,omitempty"`
	Username                  *string `json:"username,omitempty"`
}

// UserAccountStatusUpdateInput defines model for UserAccountStatusUpdateInput.
type UserAccountStatusUpdateInput struct {
	NewStatus    *string `json:"newStatus,omitempty"`
	Reason       *string `json:"reason,omitempty"`
	TargetUserID *string `json:"targetUserID,omitempty"`
}

// UserCreationResponse defines model for UserCreationResponse.
type UserCreationResponse struct {
	AccountStatus   *string `json:"accountStatus,omitempty"`
	Avatar          *string `json:"avatar,omitempty"`
	Birthday        *string `json:"birthday,omitempty"`
	CreatedAt       *string `json:"createdAt,omitempty"`
	CreatedUserID   *string `json:"createdUserID,omitempty"`
	EmailAddress    *string `json:"emailAddress,omitempty"`
	FirstName       *string `json:"firstName,omitempty"`
	IsAdmin         *bool   `json:"isAdmin,omitempty"`
	LastName        *string `json:"lastName,omitempty"`
	QrCode          *string `json:"qrCode,omitempty"`
	TwoFactorSecret *string `json:"twoFactorSecret,omitempty"`
	Username        *string `json:"username,omitempty"`
}

// UserDetailsUpdateRequestInput defines model for UserDetailsUpdateRequestInput.
type UserDetailsUpdateRequestInput struct {
	Birthday        *string `json:"birthday,omitempty"`
	CurrentPassword *string `json:"currentPassword,omitempty"`
	FirstName       *string `json:"firstName,omitempty"`
	LastName        *string `json:"lastName,omitempty"`
	TotpToken       *string `json:"totpToken,omitempty"`
}

// UserEmailAddressUpdateInput defines model for UserEmailAddressUpdateInput.
type UserEmailAddressUpdateInput struct {
	CurrentPassword *string `json:"currentPassword,omitempty"`
	NewEmailAddress *string `json:"newEmailAddress,omitempty"`
	TotpToken       *string `json:"totpToken,omitempty"`
}

// UserIngredientPreference defines model for UserIngredientPreference.
type UserIngredientPreference struct {
	Allergy       *bool            `json:"allergy,omitempty"`
	ArchivedAt    *string          `json:"archivedAt,omitempty"`
	BelongsToUser *string          `json:"belongsToUser,omitempty"`
	CreatedAt     *string          `json:"createdAt,omitempty"`
	Id            *string          `json:"id,omitempty"`
	Ingredient    *ValidIngredient `json:"ingredient,omitempty"`
	LastUpdatedAt *string          `json:"lastUpdatedAt,omitempty"`
	Notes         *string          `json:"notes,omitempty"`
	Rating        *int             `json:"rating,omitempty"`
}

// UserIngredientPreferenceCreationRequestInput defines model for UserIngredientPreferenceCreationRequestInput.
type UserIngredientPreferenceCreationRequestInput struct {
	Allergy                *bool   `json:"allergy,omitempty"`
	Notes                  *string `json:"notes,omitempty"`
	Rating                 *int    `json:"rating,omitempty"`
	ValidIngredientGroupID *string `json:"validIngredientGroupID,omitempty"`
	ValidIngredientID      *string `json:"validIngredientID,omitempty"`
}

// UserIngredientPreferenceUpdateRequestInput defines model for UserIngredientPreferenceUpdateRequestInput.
type UserIngredientPreferenceUpdateRequestInput struct {
	Allergy      *bool   `json:"allergy,omitempty"`
	IngredientID *string `json:"ingredientID,omitempty"`
	Notes        *string `json:"notes,omitempty"`
	Rating       *int    `json:"rating,omitempty"`
}

// UserLoginInput defines model for UserLoginInput.
type UserLoginInput struct {
	Password  *string `json:"password,omitempty"`
	TotpToken *string `json:"totpToken,omitempty"`
	Username  *string `json:"username,omitempty"`
}

// UserNotification defines model for UserNotification.
type UserNotification struct {
	BelongsToUser *string `json:"belongsToUser,omitempty"`
	Content       *string `json:"content,omitempty"`
	CreatedAt     *string `json:"createdAt,omitempty"`
	Id            *string `json:"id,omitempty"`
	LastUpdatedAt *string `json:"lastUpdatedAt,omitempty"`
	Status        *string `json:"status,omitempty"`
}

// UserNotificationCreationRequestInput defines model for UserNotificationCreationRequestInput.
type UserNotificationCreationRequestInput struct {
	BelongsToUser *string `json:"belongsToUser,omitempty"`
	Content       *string `json:"content,omitempty"`
	Status        *string `json:"status,omitempty"`
}

// UserNotificationUpdateRequestInput defines model for UserNotificationUpdateRequestInput.
type UserNotificationUpdateRequestInput struct {
	Status *string `json:"status,omitempty"`
}

// UserPermissionsRequestInput defines model for UserPermissionsRequestInput.
type UserPermissionsRequestInput struct {
	Permissions *[]string `json:"permissions,omitempty"`
}

// UserPermissionsResponse defines model for UserPermissionsResponse.
type UserPermissionsResponse struct {
	Permissions *map[string]interface{} `json:"permissions,omitempty"`
}

// UserRegistrationInput defines model for UserRegistrationInput.
type UserRegistrationInput struct {
	AcceptedPrivacyPolicy *bool   `json:"acceptedPrivacyPolicy,omitempty"`
	AcceptedTOS           *bool   `json:"acceptedTOS,omitempty"`
	Birthday              *string `json:"birthday,omitempty"`
	EmailAddress          *string `json:"emailAddress,omitempty"`
	FirstName             *string `json:"firstName,omitempty"`
	HouseholdName         *string `json:"householdName,omitempty"`
	InvitationID          *string `json:"invitationID,omitempty"`
	InvitationToken       *string `json:"invitationToken,omitempty"`
	LastName              *string `json:"lastName,omitempty"`
	Password              *string `json:"password,omitempty"`
	Username              *string `json:"username,omitempty"`
}

// UserStatusResponse defines model for UserStatusResponse.
type UserStatusResponse struct {
	AccountStatus            *string `json:"accountStatus,omitempty"`
	AccountStatusExplanation *string `json:"accountStatusExplanation,omitempty"`
	ActiveHousehold          *string `json:"activeHousehold,omitempty"`
	IsAuthenticated          *bool   `json:"isAuthenticated,omitempty"`
	UserID                   *string `json:"userID,omitempty"`
}

// UsernameReminderRequestInput defines model for UsernameReminderRequestInput.
type UsernameReminderRequestInput struct {
	EmailAddress *string `json:"emailAddress,omitempty"`
}

// UsernameUpdateInput defines model for UsernameUpdateInput.
type UsernameUpdateInput struct {
	CurrentPassword *string `json:"currentPassword,omitempty"`
	NewUsername     *string `json:"newUsername,omitempty"`
	TotpToken       *string `json:"totpToken,omitempty"`
}

// ValidIngredient defines model for ValidIngredient.
type ValidIngredient struct {
	AnimalDerived                           *bool    `json:"animalDerived,omitempty"`
	AnimalFlesh                             *bool    `json:"animalFlesh,omitempty"`
	ArchivedAt                              *string  `json:"archivedAt,omitempty"`
	ContainsAlcohol                         *bool    `json:"containsAlcohol,omitempty"`
	ContainsDairy                           *bool    `json:"containsDairy,omitempty"`
	ContainsEgg                             *bool    `json:"containsEgg,omitempty"`
	ContainsFish                            *bool    `json:"containsFish,omitempty"`
	ContainsGluten                          *bool    `json:"containsGluten,omitempty"`
	ContainsPeanut                          *bool    `json:"containsPeanut,omitempty"`
	ContainsSesame                          *bool    `json:"containsSesame,omitempty"`
	ContainsShellfish                       *bool    `json:"containsShellfish,omitempty"`
	ContainsSoy                             *bool    `json:"containsSoy,omitempty"`
	ContainsTreeNut                         *bool    `json:"containsTreeNut,omitempty"`
	ContainsWheat                           *bool    `json:"containsWheat,omitempty"`
	CreatedAt                               *string  `json:"createdAt,omitempty"`
	Description                             *string  `json:"description,omitempty"`
	IconPath                                *string  `json:"iconPath,omitempty"`
	Id                                      *string  `json:"id,omitempty"`
	IsAcid                                  *bool    `json:"isAcid,omitempty"`
	IsFat                                   *bool    `json:"isFat,omitempty"`
	IsFruit                                 *bool    `json:"isFruit,omitempty"`
	IsGrain                                 *bool    `json:"isGrain,omitempty"`
	IsHeat                                  *bool    `json:"isHeat,omitempty"`
	IsLiquid                                *bool    `json:"isLiquid,omitempty"`
	IsMeasuredVolumetrically                *bool    `json:"isMeasuredVolumetrically,omitempty"`
	IsProtein                               *bool    `json:"isProtein,omitempty"`
	IsSalt                                  *bool    `json:"isSalt,omitempty"`
	IsStarch                                *bool    `json:"isStarch,omitempty"`
	LastUpdatedAt                           *string  `json:"lastUpdatedAt,omitempty"`
	MaximumIdealStorageTemperatureInCelsius *float32 `json:"maximumIdealStorageTemperatureInCelsius,omitempty"`
	MinimumIdealStorageTemperatureInCelsius *float32 `json:"minimumIdealStorageTemperatureInCelsius,omitempty"`
	Name                                    *string  `json:"name,omitempty"`
	PluralName                              *string  `json:"pluralName,omitempty"`
	RestrictToPreparations                  *bool    `json:"restrictToPreparations,omitempty"`
	ShoppingSuggestions                     *string  `json:"shoppingSuggestions,omitempty"`
	Slug                                    *string  `json:"slug,omitempty"`
	StorageInstructions                     *string  `json:"storageInstructions,omitempty"`
	Warning                                 *string  `json:"warning,omitempty"`
}

// ValidIngredientCreationRequestInput defines model for ValidIngredientCreationRequestInput.
type ValidIngredientCreationRequestInput struct {
	AnimalDerived                           *bool    `json:"animalDerived,omitempty"`
	AnimalFlesh                             *bool    `json:"animalFlesh,omitempty"`
	ContainsAlcohol                         *bool    `json:"containsAlcohol,omitempty"`
	ContainsDairy                           *bool    `json:"containsDairy,omitempty"`
	ContainsEgg                             *bool    `json:"containsEgg,omitempty"`
	ContainsFish                            *bool    `json:"containsFish,omitempty"`
	ContainsGluten                          *bool    `json:"containsGluten,omitempty"`
	ContainsPeanut                          *bool    `json:"containsPeanut,omitempty"`
	ContainsSesame                          *bool    `json:"containsSesame,omitempty"`
	ContainsShellfish                       *bool    `json:"containsShellfish,omitempty"`
	ContainsSoy                             *bool    `json:"containsSoy,omitempty"`
	ContainsTreeNut                         *bool    `json:"containsTreeNut,omitempty"`
	ContainsWheat                           *bool    `json:"containsWheat,omitempty"`
	Description                             *string  `json:"description,omitempty"`
	IconPath                                *string  `json:"iconPath,omitempty"`
	IsAcid                                  *bool    `json:"isAcid,omitempty"`
	IsFat                                   *bool    `json:"isFat,omitempty"`
	IsFruit                                 *bool    `json:"isFruit,omitempty"`
	IsGrain                                 *bool    `json:"isGrain,omitempty"`
	IsHeat                                  *bool    `json:"isHeat,omitempty"`
	IsLiquid                                *bool    `json:"isLiquid,omitempty"`
	IsMeasuredVolumetrically                *bool    `json:"isMeasuredVolumetrically,omitempty"`
	IsProtein                               *bool    `json:"isProtein,omitempty"`
	IsSalt                                  *bool    `json:"isSalt,omitempty"`
	IsStarch                                *bool    `json:"isStarch,omitempty"`
	MaximumIdealStorageTemperatureInCelsius *float32 `json:"maximumIdealStorageTemperatureInCelsius,omitempty"`
	MinimumIdealStorageTemperatureInCelsius *float32 `json:"minimumIdealStorageTemperatureInCelsius,omitempty"`
	Name                                    *string  `json:"name,omitempty"`
	PluralName                              *string  `json:"pluralName,omitempty"`
	RestrictToPreparations                  *bool    `json:"restrictToPreparations,omitempty"`
	ShoppingSuggestions                     *string  `json:"shoppingSuggestions,omitempty"`
	Slug                                    *string  `json:"slug,omitempty"`
	StorageInstructions                     *string  `json:"storageInstructions,omitempty"`
	Warning                                 *string  `json:"warning,omitempty"`
}

// ValidIngredientGroup defines model for ValidIngredientGroup.
type ValidIngredientGroup struct {
	ArchivedAt    *string                       `json:"archivedAt,omitempty"`
	CreatedAt     *string                       `json:"createdAt,omitempty"`
	Description   *string                       `json:"description,omitempty"`
	Id            *string                       `json:"id,omitempty"`
	LastUpdatedAt *string                       `json:"lastUpdatedAt,omitempty"`
	Members       *[]ValidIngredientGroupMember `json:"members,omitempty"`
	Name          *string                       `json:"name,omitempty"`
	Slug          *string                       `json:"slug,omitempty"`
}

// ValidIngredientGroupCreationRequestInput defines model for ValidIngredientGroupCreationRequestInput.
type ValidIngredientGroupCreationRequestInput struct {
	Description *string                                           `json:"description,omitempty"`
	Members     *[]ValidIngredientGroupMemberCreationRequestInput `json:"members,omitempty"`
	Name        *string                                           `json:"name,omitempty"`
	Slug        *string                                           `json:"slug,omitempty"`
}

// ValidIngredientGroupMember defines model for ValidIngredientGroupMember.
type ValidIngredientGroupMember struct {
	ArchivedAt      *string          `json:"archivedAt,omitempty"`
	BelongsToGroup  *string          `json:"belongsToGroup,omitempty"`
	CreatedAt       *string          `json:"createdAt,omitempty"`
	Id              *string          `json:"id,omitempty"`
	ValidIngredient *ValidIngredient `json:"validIngredient,omitempty"`
}

// ValidIngredientGroupMemberCreationRequestInput defines model for ValidIngredientGroupMemberCreationRequestInput.
type ValidIngredientGroupMemberCreationRequestInput struct {
	ValidIngredientID *string `json:"validIngredientID,omitempty"`
}

// ValidIngredientGroupUpdateRequestInput defines model for ValidIngredientGroupUpdateRequestInput.
type ValidIngredientGroupUpdateRequestInput struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	Slug        *string `json:"slug,omitempty"`
}

// ValidIngredientMeasurementUnit defines model for ValidIngredientMeasurementUnit.
type ValidIngredientMeasurementUnit struct {
	ArchivedAt               *string               `json:"archivedAt,omitempty"`
	CreatedAt                *string               `json:"createdAt,omitempty"`
	Id                       *string               `json:"id,omitempty"`
	Ingredient               *ValidIngredient      `json:"ingredient,omitempty"`
	LastUpdatedAt            *string               `json:"lastUpdatedAt,omitempty"`
	MaximumAllowableQuantity *float32              `json:"maximumAllowableQuantity,omitempty"`
	MeasurementUnit          *ValidMeasurementUnit `json:"measurementUnit,omitempty"`
	MinimumAllowableQuantity *float32              `json:"minimumAllowableQuantity,omitempty"`
	Notes                    *string               `json:"notes,omitempty"`
}

// ValidIngredientMeasurementUnitCreationRequestInput defines model for ValidIngredientMeasurementUnitCreationRequestInput.
type ValidIngredientMeasurementUnitCreationRequestInput struct {
	MaximumAllowableQuantity *float32 `json:"maximumAllowableQuantity,omitempty"`
	MinimumAllowableQuantity *float32 `json:"minimumAllowableQuantity,omitempty"`
	Notes                    *string  `json:"notes,omitempty"`
	ValidIngredientID        *string  `json:"validIngredientID,omitempty"`
	ValidMeasurementUnitID   *string  `json:"validMeasurementUnitID,omitempty"`
}

// ValidIngredientMeasurementUnitUpdateRequestInput defines model for ValidIngredientMeasurementUnitUpdateRequestInput.
type ValidIngredientMeasurementUnitUpdateRequestInput struct {
	MaximumAllowableQuantity *float32 `json:"maximumAllowableQuantity,omitempty"`
	MinimumAllowableQuantity *float32 `json:"minimumAllowableQuantity,omitempty"`
	Notes                    *string  `json:"notes,omitempty"`
	ValidIngredientID        *string  `json:"validIngredientID,omitempty"`
	ValidMeasurementUnitID   *string  `json:"validMeasurementUnitID,omitempty"`
}

// ValidIngredientPreparation defines model for ValidIngredientPreparation.
type ValidIngredientPreparation struct {
	ArchivedAt    *string           `json:"archivedAt,omitempty"`
	CreatedAt     *string           `json:"createdAt,omitempty"`
	Id            *string           `json:"id,omitempty"`
	Ingredient    *ValidIngredient  `json:"ingredient,omitempty"`
	LastUpdatedAt *string           `json:"lastUpdatedAt,omitempty"`
	Notes         *string           `json:"notes,omitempty"`
	Preparation   *ValidPreparation `json:"preparation,omitempty"`
}

// ValidIngredientPreparationCreationRequestInput defines model for ValidIngredientPreparationCreationRequestInput.
type ValidIngredientPreparationCreationRequestInput struct {
	Notes              *string `json:"notes,omitempty"`
	ValidIngredientID  *string `json:"validIngredientID,omitempty"`
	ValidPreparationID *string `json:"validPreparationID,omitempty"`
}

// ValidIngredientPreparationUpdateRequestInput defines model for ValidIngredientPreparationUpdateRequestInput.
type ValidIngredientPreparationUpdateRequestInput struct {
	Notes              *string `json:"notes,omitempty"`
	ValidIngredientID  *string `json:"validIngredientID,omitempty"`
	ValidPreparationID *string `json:"validPreparationID,omitempty"`
}

// ValidIngredientState defines model for ValidIngredientState.
type ValidIngredientState struct {
	ArchivedAt    *string `json:"archivedAt,omitempty"`
	AttributeType *string `json:"attributeType,omitempty"`
	CreatedAt     *string `json:"createdAt,omitempty"`
	Description   *string `json:"description,omitempty"`
	IconPath      *string `json:"iconPath,omitempty"`
	Id            *string `json:"id,omitempty"`
	LastUpdatedAt *string `json:"lastUpdatedAt,omitempty"`
	Name          *string `json:"name,omitempty"`
	PastTense     *string `json:"pastTense,omitempty"`
	Slug          *string `json:"slug,omitempty"`
}

// ValidIngredientStateCreationRequestInput defines model for ValidIngredientStateCreationRequestInput.
type ValidIngredientStateCreationRequestInput struct {
	AttributeType *string `json:"attributeType,omitempty"`
	Description   *string `json:"description,omitempty"`
	IconPath      *string `json:"iconPath,omitempty"`
	Name          *string `json:"name,omitempty"`
	PastTense     *string `json:"pastTense,omitempty"`
	Slug          *string `json:"slug,omitempty"`
}

// ValidIngredientStateIngredient defines model for ValidIngredientStateIngredient.
type ValidIngredientStateIngredient struct {
	ArchivedAt      *string               `json:"archivedAt,omitempty"`
	CreatedAt       *string               `json:"createdAt,omitempty"`
	Id              *string               `json:"id,omitempty"`
	Ingredient      *ValidIngredient      `json:"ingredient,omitempty"`
	IngredientState *ValidIngredientState `json:"ingredientState,omitempty"`
	LastUpdatedAt   *string               `json:"lastUpdatedAt,omitempty"`
	Notes           *string               `json:"notes,omitempty"`
}

// ValidIngredientStateIngredientCreationRequestInput defines model for ValidIngredientStateIngredientCreationRequestInput.
type ValidIngredientStateIngredientCreationRequestInput struct {
	Notes                  *string `json:"notes,omitempty"`
	ValidIngredientID      *string `json:"validIngredientID,omitempty"`
	ValidIngredientStateID *string `json:"validIngredientStateID,omitempty"`
}

// ValidIngredientStateIngredientUpdateRequestInput defines model for ValidIngredientStateIngredientUpdateRequestInput.
type ValidIngredientStateIngredientUpdateRequestInput struct {
	Notes                  *string `json:"notes,omitempty"`
	ValidIngredientID      *string `json:"validIngredientID,omitempty"`
	ValidIngredientStateID *string `json:"validIngredientStateID,omitempty"`
}

// ValidIngredientStateUpdateRequestInput defines model for ValidIngredientStateUpdateRequestInput.
type ValidIngredientStateUpdateRequestInput struct {
	AttributeType *string `json:"attributeType,omitempty"`
	Description   *string `json:"description,omitempty"`
	IconPath      *string `json:"iconPath,omitempty"`
	Name          *string `json:"name,omitempty"`
	PastTense     *string `json:"pastTense,omitempty"`
	Slug          *string `json:"slug,omitempty"`
}

// ValidIngredientUpdateRequestInput defines model for ValidIngredientUpdateRequestInput.
type ValidIngredientUpdateRequestInput struct {
	AnimalDerived                           *bool    `json:"animalDerived,omitempty"`
	AnimalFlesh                             *bool    `json:"animalFlesh,omitempty"`
	ContainsAlcohol                         *bool    `json:"containsAlcohol,omitempty"`
	ContainsDairy                           *bool    `json:"containsDairy,omitempty"`
	ContainsEgg                             *bool    `json:"containsEgg,omitempty"`
	ContainsFish                            *bool    `json:"containsFish,omitempty"`
	ContainsGluten                          *bool    `json:"containsGluten,omitempty"`
	ContainsPeanut                          *bool    `json:"containsPeanut,omitempty"`
	ContainsSesame                          *bool    `json:"containsSesame,omitempty"`
	ContainsShellfish                       *bool    `json:"containsShellfish,omitempty"`
	ContainsSoy                             *bool    `json:"containsSoy,omitempty"`
	ContainsTreeNut                         *bool    `json:"containsTreeNut,omitempty"`
	ContainsWheat                           *bool    `json:"containsWheat,omitempty"`
	Description                             *string  `json:"description,omitempty"`
	IconPath                                *string  `json:"iconPath,omitempty"`
	IsAcid                                  *bool    `json:"isAcid,omitempty"`
	IsFat                                   *bool    `json:"isFat,omitempty"`
	IsFruit                                 *bool    `json:"isFruit,omitempty"`
	IsGrain                                 *bool    `json:"isGrain,omitempty"`
	IsHeat                                  *bool    `json:"isHeat,omitempty"`
	IsLiquid                                *bool    `json:"isLiquid,omitempty"`
	IsMeasuredVolumetrically                *bool    `json:"isMeasuredVolumetrically,omitempty"`
	IsProtein                               *bool    `json:"isProtein,omitempty"`
	IsSalt                                  *bool    `json:"isSalt,omitempty"`
	IsStarch                                *bool    `json:"isStarch,omitempty"`
	MaximumIdealStorageTemperatureInCelsius *float32 `json:"maximumIdealStorageTemperatureInCelsius,omitempty"`
	MinimumIdealStorageTemperatureInCelsius *float32 `json:"minimumIdealStorageTemperatureInCelsius,omitempty"`
	Name                                    *string  `json:"name,omitempty"`
	PluralName                              *string  `json:"pluralName,omitempty"`
	RestrictToPreparations                  *bool    `json:"restrictToPreparations,omitempty"`
	ShoppingSuggestions                     *string  `json:"shoppingSuggestions,omitempty"`
	Slug                                    *string  `json:"slug,omitempty"`
	StorageInstructions                     *string  `json:"storageInstructions,omitempty"`
	Warning                                 *string  `json:"warning,omitempty"`
}

// ValidInstrument defines model for ValidInstrument.
type ValidInstrument struct {
	ArchivedAt                     *string `json:"archivedAt,omitempty"`
	CreatedAt                      *string `json:"createdAt,omitempty"`
	Description                    *string `json:"description,omitempty"`
	DisplayInSummaryLists          *bool   `json:"displayInSummaryLists,omitempty"`
	IconPath                       *string `json:"iconPath,omitempty"`
	Id                             *string `json:"id,omitempty"`
	IncludeInGeneratedInstructions *bool   `json:"includeInGeneratedInstructions,omitempty"`
	LastUpdatedAt                  *string `json:"lastUpdatedAt,omitempty"`
	Name                           *string `json:"name,omitempty"`
	PluralName                     *string `json:"pluralName,omitempty"`
	Slug                           *string `json:"slug,omitempty"`
	UsableForStorage               *bool   `json:"usableForStorage,omitempty"`
}

// ValidInstrumentCreationRequestInput defines model for ValidInstrumentCreationRequestInput.
type ValidInstrumentCreationRequestInput struct {
	Description                    *string `json:"description,omitempty"`
	DisplayInSummaryLists          *bool   `json:"displayInSummaryLists,omitempty"`
	IconPath                       *string `json:"iconPath,omitempty"`
	IncludeInGeneratedInstructions *bool   `json:"includeInGeneratedInstructions,omitempty"`
	Name                           *string `json:"name,omitempty"`
	PluralName                     *string `json:"pluralName,omitempty"`
	Slug                           *string `json:"slug,omitempty"`
	UsableForStorage               *bool   `json:"usableForStorage,omitempty"`
}

// ValidInstrumentUpdateRequestInput defines model for ValidInstrumentUpdateRequestInput.
type ValidInstrumentUpdateRequestInput struct {
	Description                    *string `json:"description,omitempty"`
	DisplayInSummaryLists          *bool   `json:"displayInSummaryLists,omitempty"`
	IconPath                       *string `json:"iconPath,omitempty"`
	IncludeInGeneratedInstructions *bool   `json:"includeInGeneratedInstructions,omitempty"`
	Name                           *string `json:"name,omitempty"`
	PluralName                     *string `json:"pluralName,omitempty"`
	Slug                           *string `json:"slug,omitempty"`
	UsableForStorage               *bool   `json:"usableForStorage,omitempty"`
}

// ValidMeasurementUnit defines model for ValidMeasurementUnit.
type ValidMeasurementUnit struct {
	ArchivedAt    *string `json:"archivedAt,omitempty"`
	CreatedAt     *string `json:"createdAt,omitempty"`
	Description   *string `json:"description,omitempty"`
	IconPath      *string `json:"iconPath,omitempty"`
	Id            *string `json:"id,omitempty"`
	Imperial      *bool   `json:"imperial,omitempty"`
	LastUpdatedAt *string `json:"lastUpdatedAt,omitempty"`
	Metric        *bool   `json:"metric,omitempty"`
	Name          *string `json:"name,omitempty"`
	PluralName    *string `json:"pluralName,omitempty"`
	Slug          *string `json:"slug,omitempty"`
	Universal     *bool   `json:"universal,omitempty"`
	Volumetric    *bool   `json:"volumetric,omitempty"`
}

// ValidMeasurementUnitConversion defines model for ValidMeasurementUnitConversion.
type ValidMeasurementUnitConversion struct {
	ArchivedAt        *string               `json:"archivedAt,omitempty"`
	CreatedAt         *string               `json:"createdAt,omitempty"`
	From              *ValidMeasurementUnit `json:"from,omitempty"`
	Id                *string               `json:"id,omitempty"`
	LastUpdatedAt     *string               `json:"lastUpdatedAt,omitempty"`
	Modifier          *float32              `json:"modifier,omitempty"`
	Notes             *string               `json:"notes,omitempty"`
	OnlyForIngredient *ValidIngredient      `json:"onlyForIngredient,omitempty"`
	To                *ValidMeasurementUnit `json:"to,omitempty"`
}

// ValidMeasurementUnitConversionCreationRequestInput defines model for ValidMeasurementUnitConversionCreationRequestInput.
type ValidMeasurementUnitConversionCreationRequestInput struct {
	From              *string  `json:"from,omitempty"`
	Modifier          *float32 `json:"modifier,omitempty"`
	Notes             *string  `json:"notes,omitempty"`
	OnlyForIngredient *string  `json:"onlyForIngredient,omitempty"`
	To                *string  `json:"to,omitempty"`
}

// ValidMeasurementUnitConversionUpdateRequestInput defines model for ValidMeasurementUnitConversionUpdateRequestInput.
type ValidMeasurementUnitConversionUpdateRequestInput struct {
	From              *string  `json:"from,omitempty"`
	Modifier          *float32 `json:"modifier,omitempty"`
	Notes             *string  `json:"notes,omitempty"`
	OnlyForIngredient *string  `json:"onlyForIngredient,omitempty"`
	To                *string  `json:"to,omitempty"`
}

// ValidMeasurementUnitCreationRequestInput defines model for ValidMeasurementUnitCreationRequestInput.
type ValidMeasurementUnitCreationRequestInput struct {
	Description *string `json:"description,omitempty"`
	IconPath    *string `json:"iconPath,omitempty"`
	Imperial    *bool   `json:"imperial,omitempty"`
	Metric      *bool   `json:"metric,omitempty"`
	Name        *string `json:"name,omitempty"`
	PluralName  *string `json:"pluralName,omitempty"`
	Slug        *string `json:"slug,omitempty"`
	Universal   *bool   `json:"universal,omitempty"`
	Volumetric  *bool   `json:"volumetric,omitempty"`
}

// ValidMeasurementUnitUpdateRequestInput defines model for ValidMeasurementUnitUpdateRequestInput.
type ValidMeasurementUnitUpdateRequestInput struct {
	Description *string `json:"description,omitempty"`
	IconPath    *string `json:"iconPath,omitempty"`
	Imperial    *bool   `json:"imperial,omitempty"`
	Metric      *bool   `json:"metric,omitempty"`
	Name        *string `json:"name,omitempty"`
	PluralName  *string `json:"pluralName,omitempty"`
	Slug        *string `json:"slug,omitempty"`
	Universal   *bool   `json:"universal,omitempty"`
	Volumetric  *bool   `json:"volumetric,omitempty"`
}

// ValidPreparation defines model for ValidPreparation.
type ValidPreparation struct {
	ArchivedAt                  *string `json:"archivedAt,omitempty"`
	ConditionExpressionRequired *bool   `json:"conditionExpressionRequired,omitempty"`
	ConsumesVessel              *bool   `json:"consumesVessel,omitempty"`
	CreatedAt                   *string `json:"createdAt,omitempty"`
	Description                 *string `json:"description,omitempty"`
	IconPath                    *string `json:"iconPath,omitempty"`
	Id                          *string `json:"id,omitempty"`
	LastUpdatedAt               *string `json:"lastUpdatedAt,omitempty"`
	MaximumIngredientCount      *int    `json:"maximumIngredientCount,omitempty"`
	MaximumInstrumentCount      *int    `json:"maximumInstrumentCount,omitempty"`
	MaximumVesselCount          *int    `json:"maximumVesselCount,omitempty"`
	MinimumIngredientCount      *int    `json:"minimumIngredientCount,omitempty"`
	MinimumInstrumentCount      *int    `json:"minimumInstrumentCount,omitempty"`
	MinimumVesselCount          *int    `json:"minimumVesselCount,omitempty"`
	Name                        *string `json:"name,omitempty"`
	OnlyForVessels              *bool   `json:"onlyForVessels,omitempty"`
	PastTense                   *string `json:"pastTense,omitempty"`
	RestrictToIngredients       *bool   `json:"restrictToIngredients,omitempty"`
	Slug                        *string `json:"slug,omitempty"`
	TemperatureRequired         *bool   `json:"temperatureRequired,omitempty"`
	TimeEstimateRequired        *bool   `json:"timeEstimateRequired,omitempty"`
	YieldsNothing               *bool   `json:"yieldsNothing,omitempty"`
}

// ValidPreparationCreationRequestInput defines model for ValidPreparationCreationRequestInput.
type ValidPreparationCreationRequestInput struct {
	ConditionExpressionRequired *bool   `json:"conditionExpressionRequired,omitempty"`
	ConsumesVessel              *bool   `json:"consumesVessel,omitempty"`
	Description                 *string `json:"description,omitempty"`
	IconPath                    *string `json:"iconPath,omitempty"`
	MaximumIngredientCount      *int    `json:"maximumIngredientCount,omitempty"`
	MaximumInstrumentCount      *int    `json:"maximumInstrumentCount,omitempty"`
	MaximumVesselCount          *int    `json:"maximumVesselCount,omitempty"`
	MinimumIngredientCount      *int    `json:"minimumIngredientCount,omitempty"`
	MinimumInstrumentCount      *int    `json:"minimumInstrumentCount,omitempty"`
	MinimumVesselCount          *int    `json:"minimumVesselCount,omitempty"`
	Name                        *string `json:"name,omitempty"`
	OnlyForVessels              *bool   `json:"onlyForVessels,omitempty"`
	PastTense                   *string `json:"pastTense,omitempty"`
	RestrictToIngredients       *bool   `json:"restrictToIngredients,omitempty"`
	Slug                        *string `json:"slug,omitempty"`
	TemperatureRequired         *bool   `json:"temperatureRequired,omitempty"`
	TimeEstimateRequired        *bool   `json:"timeEstimateRequired,omitempty"`
	YieldsNothing               *bool   `json:"yieldsNothing,omitempty"`
}

// ValidPreparationInstrument defines model for ValidPreparationInstrument.
type ValidPreparationInstrument struct {
	ArchivedAt    *string           `json:"archivedAt,omitempty"`
	CreatedAt     *string           `json:"createdAt,omitempty"`
	Id            *string           `json:"id,omitempty"`
	Instrument    *ValidInstrument  `json:"instrument,omitempty"`
	LastUpdatedAt *string           `json:"lastUpdatedAt,omitempty"`
	Notes         *string           `json:"notes,omitempty"`
	Preparation   *ValidPreparation `json:"preparation,omitempty"`
}

// ValidPreparationInstrumentCreationRequestInput defines model for ValidPreparationInstrumentCreationRequestInput.
type ValidPreparationInstrumentCreationRequestInput struct {
	Notes              *string `json:"notes,omitempty"`
	ValidInstrumentID  *string `json:"validInstrumentID,omitempty"`
	ValidPreparationID *string `json:"validPreparationID,omitempty"`
}

// ValidPreparationInstrumentUpdateRequestInput defines model for ValidPreparationInstrumentUpdateRequestInput.
type ValidPreparationInstrumentUpdateRequestInput struct {
	Notes              *string `json:"notes,omitempty"`
	ValidInstrumentID  *string `json:"validInstrumentID,omitempty"`
	ValidPreparationID *string `json:"validPreparationID,omitempty"`
}

// ValidPreparationUpdateRequestInput defines model for ValidPreparationUpdateRequestInput.
type ValidPreparationUpdateRequestInput struct {
	ConditionExpressionRequired *bool   `json:"conditionExpressionRequired,omitempty"`
	ConsumesVessel              *bool   `json:"consumesVessel,omitempty"`
	Description                 *string `json:"description,omitempty"`
	IconPath                    *string `json:"iconPath,omitempty"`
	MaximumIngredientCount      *int    `json:"maximumIngredientCount,omitempty"`
	MaximumInstrumentCount      *int    `json:"maximumInstrumentCount,omitempty"`
	MaximumVesselCount          *int    `json:"maximumVesselCount,omitempty"`
	MinimumIngredientCount      *int    `json:"minimumIngredientCount,omitempty"`
	MinimumInstrumentCount      *int    `json:"minimumInstrumentCount,omitempty"`
	MinimumVesselCount          *int    `json:"minimumVesselCount,omitempty"`
	Name                        *string `json:"name,omitempty"`
	OnlyForVessels              *bool   `json:"onlyForVessels,omitempty"`
	PastTense                   *string `json:"pastTense,omitempty"`
	RestrictToIngredients       *bool   `json:"restrictToIngredients,omitempty"`
	Slug                        *string `json:"slug,omitempty"`
	TemperatureRequired         *bool   `json:"temperatureRequired,omitempty"`
	TimeEstimateRequired        *bool   `json:"timeEstimateRequired,omitempty"`
	YieldsNothing               *bool   `json:"yieldsNothing,omitempty"`
}

// ValidPreparationVessel defines model for ValidPreparationVessel.
type ValidPreparationVessel struct {
	ArchivedAt    *string           `json:"archivedAt,omitempty"`
	CreatedAt     *string           `json:"createdAt,omitempty"`
	Id            *string           `json:"id,omitempty"`
	Instrument    *ValidVessel      `json:"instrument,omitempty"`
	LastUpdatedAt *string           `json:"lastUpdatedAt,omitempty"`
	Notes         *string           `json:"notes,omitempty"`
	Preparation   *ValidPreparation `json:"preparation,omitempty"`
}

// ValidPreparationVesselCreationRequestInput defines model for ValidPreparationVesselCreationRequestInput.
type ValidPreparationVesselCreationRequestInput struct {
	Notes              *string `json:"notes,omitempty"`
	ValidPreparationID *string `json:"validPreparationID,omitempty"`
	ValidVesselID      *string `json:"validVesselID,omitempty"`
}

// ValidPreparationVesselUpdateRequestInput defines model for ValidPreparationVesselUpdateRequestInput.
type ValidPreparationVesselUpdateRequestInput struct {
	Notes              *string `json:"notes,omitempty"`
	ValidPreparationID *string `json:"validPreparationID,omitempty"`
	ValidVesselID      *string `json:"validVesselID,omitempty"`
}

// ValidVessel defines model for ValidVessel.
type ValidVessel struct {
	ArchivedAt                     *string               `json:"archivedAt,omitempty"`
	Capacity                       *float32              `json:"capacity,omitempty"`
	CapacityUnit                   *ValidMeasurementUnit `json:"capacityUnit,omitempty"`
	CreatedAt                      *string               `json:"createdAt,omitempty"`
	Description                    *string               `json:"description,omitempty"`
	DisplayInSummaryLists          *bool                 `json:"displayInSummaryLists,omitempty"`
	HeightInMillimeters            *float32              `json:"heightInMillimeters,omitempty"`
	IconPath                       *string               `json:"iconPath,omitempty"`
	Id                             *string               `json:"id,omitempty"`
	IncludeInGeneratedInstructions *bool                 `json:"includeInGeneratedInstructions,omitempty"`
	LastUpdatedAt                  *string               `json:"lastUpdatedAt,omitempty"`
	LengthInMillimeters            *float32              `json:"lengthInMillimeters,omitempty"`
	Name                           *string               `json:"name,omitempty"`
	PluralName                     *string               `json:"pluralName,omitempty"`
	Shape                          *string               `json:"shape,omitempty"`
	Slug                           *string               `json:"slug,omitempty"`
	UsableForStorage               *bool                 `json:"usableForStorage,omitempty"`
	WidthInMillimeters             *float32              `json:"widthInMillimeters,omitempty"`
}

// ValidVesselCreationRequestInput defines model for ValidVesselCreationRequestInput.
type ValidVesselCreationRequestInput struct {
	Capacity                       *float32 `json:"capacity,omitempty"`
	CapacityUnitID                 *string  `json:"capacityUnitID,omitempty"`
	Description                    *string  `json:"description,omitempty"`
	DisplayInSummaryLists          *bool    `json:"displayInSummaryLists,omitempty"`
	HeightInMillimeters            *float32 `json:"heightInMillimeters,omitempty"`
	IconPath                       *string  `json:"iconPath,omitempty"`
	IncludeInGeneratedInstructions *bool    `json:"includeInGeneratedInstructions,omitempty"`
	LengthInMillimeters            *float32 `json:"lengthInMillimeters,omitempty"`
	Name                           *string  `json:"name,omitempty"`
	PluralName                     *string  `json:"pluralName,omitempty"`
	Shape                          *string  `json:"shape,omitempty"`
	Slug                           *string  `json:"slug,omitempty"`
	UsableForStorage               *bool    `json:"usableForStorage,omitempty"`
	WidthInMillimeters             *float32 `json:"widthInMillimeters,omitempty"`
}

// ValidVesselUpdateRequestInput defines model for ValidVesselUpdateRequestInput.
type ValidVesselUpdateRequestInput struct {
	Capacity                       *float32 `json:"capacity,omitempty"`
	CapacityUnitID                 *string  `json:"capacityUnitID,omitempty"`
	Description                    *string  `json:"description,omitempty"`
	DisplayInSummaryLists          *bool    `json:"displayInSummaryLists,omitempty"`
	HeightInMillimeters            *float32 `json:"heightInMillimeters,omitempty"`
	IconPath                       *string  `json:"iconPath,omitempty"`
	IncludeInGeneratedInstructions *bool    `json:"includeInGeneratedInstructions,omitempty"`
	LengthInMillimeters            *float32 `json:"lengthInMillimeters,omitempty"`
	Name                           *string  `json:"name,omitempty"`
	PluralName                     *string  `json:"pluralName,omitempty"`
	Shape                          *string  `json:"shape,omitempty"`
	Slug                           *string  `json:"slug,omitempty"`
	UsableForStorage               *bool    `json:"usableForStorage,omitempty"`
	WidthInMillimeters             *float32 `json:"widthInMillimeters,omitempty"`
}

// Webhook defines model for Webhook.
type Webhook struct {
	ArchivedAt         *string                `json:"archivedAt,omitempty"`
	BelongsToHousehold *string                `json:"belongsToHousehold,omitempty"`
	ContentType        *string                `json:"contentType,omitempty"`
	CreatedAt          *string                `json:"createdAt,omitempty"`
	Events             *[]WebhookTriggerEvent `json:"events,omitempty"`
	Id                 *string                `json:"id,omitempty"`
	LastUpdatedAt      *string                `json:"lastUpdatedAt,omitempty"`
	Method             *string                `json:"method,omitempty"`
	Name               *string                `json:"name,omitempty"`
	Url                *string                `json:"url,omitempty"`
}

// WebhookCreationRequestInput defines model for WebhookCreationRequestInput.
type WebhookCreationRequestInput struct {
	ContentType *string   `json:"contentType,omitempty"`
	Events      *[]string `json:"events,omitempty"`
	Method      *string   `json:"method,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Url         *string   `json:"url,omitempty"`
}

// WebhookTriggerEvent defines model for WebhookTriggerEvent.
type WebhookTriggerEvent struct {
	ArchivedAt       *string `json:"archivedAt,omitempty"`
	BelongsToWebhook *string `json:"belongsToWebhook,omitempty"`
	CreatedAt        *string `json:"createdAt,omitempty"`
	Id               *string `json:"id,omitempty"`
	TriggerEvent     *string `json:"triggerEvent,omitempty"`
}

// WebhookTriggerEventCreationRequestInput defines model for WebhookTriggerEventCreationRequestInput.
type WebhookTriggerEventCreationRequestInput struct {
	BelongsToWebhook *string `json:"belongsToWebhook,omitempty"`
	TriggerEvent     *string `json:"triggerEvent,omitempty"`
}

// GETHouseholdsParams defines parameters for GETHouseholds.
type GETHouseholdsParams struct {
	CreatedBefore   string                             `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                             `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                             `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                             `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETHouseholdsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETHouseholdsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                `json:"page"            form:"page"`
}

// GETHouseholdsParamsIncludeArchived defines parameters for GETHouseholds.
type GETHouseholdsParamsIncludeArchived string

// GETHouseholdsParamsSortBy defines parameters for GETHouseholds.
type GETHouseholdsParamsSortBy string

// GETHouseholdsInstrumentsParams defines parameters for GETHouseholdsInstruments.
type GETHouseholdsInstrumentsParams struct {
	CreatedBefore   string                                        `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                        `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                        `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                        `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETHouseholdsInstrumentsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETHouseholdsInstrumentsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                           `json:"page"            form:"page"`
}

// GETHouseholdsInstrumentsParamsIncludeArchived defines parameters for GETHouseholdsInstruments.
type GETHouseholdsInstrumentsParamsIncludeArchived string

// GETHouseholdsInstrumentsParamsSortBy defines parameters for GETHouseholdsInstruments.
type GETHouseholdsInstrumentsParamsSortBy string

// GETMealPlansParams defines parameters for GETMealPlans.
type GETMealPlansParams struct {
	CreatedBefore   string                            `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                            `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                            `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                            `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETMealPlansParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETMealPlansParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                               `json:"page"            form:"page"`
}

// GETMealPlansParamsIncludeArchived defines parameters for GETMealPlans.
type GETMealPlansParamsIncludeArchived string

// GETMealPlansParamsSortBy defines parameters for GETMealPlans.
type GETMealPlansParamsSortBy string

// GETMealPlansMealPlanIDEventsParams defines parameters for GETMealPlansMealPlanIDEvents.
type GETMealPlansMealPlanIDEventsParams struct {
	CreatedBefore   string                                            `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                            `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                            `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                            `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETMealPlansMealPlanIDEventsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETMealPlansMealPlanIDEventsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                               `json:"page"            form:"page"`
}

// GETMealPlansMealPlanIDEventsParamsIncludeArchived defines parameters for GETMealPlansMealPlanIDEvents.
type GETMealPlansMealPlanIDEventsParamsIncludeArchived string

// GETMealPlansMealPlanIDEventsParamsSortBy defines parameters for GETMealPlansMealPlanIDEvents.
type GETMealPlansMealPlanIDEventsParamsSortBy string

// GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsParams defines parameters for GETMealPlansMealPlanIDEventsMealPlanEventIDOptions.
type GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsParams struct {
	CreatedBefore   string                                                                  `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                                                  `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                                                  `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                                                  `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                                                     `json:"page"            form:"page"`
}

// GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsParamsIncludeArchived defines parameters for GETMealPlansMealPlanIDEventsMealPlanEventIDOptions.
type GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsParamsIncludeArchived string

// GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsParamsSortBy defines parameters for GETMealPlansMealPlanIDEventsMealPlanEventIDOptions.
type GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsParamsSortBy string

// GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesParams defines parameters for GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotes.
type GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesParams struct {
	CreatedBefore   string                                                                                       `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                                                                       `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                                                                       `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                                                                       `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                                                                          `json:"page"            form:"page"`
}

// GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesParamsIncludeArchived defines parameters for GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotes.
type GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesParamsIncludeArchived string

// GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesParamsSortBy defines parameters for GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotes.
type GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesParamsSortBy string

// GETMealPlansMealPlanIDGroceryListItemsParams defines parameters for GETMealPlansMealPlanIDGroceryListItems.
type GETMealPlansMealPlanIDGroceryListItemsParams struct {
	CreatedBefore   string                                                      `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                                      `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                                      `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                                      `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETMealPlansMealPlanIDGroceryListItemsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETMealPlansMealPlanIDGroceryListItemsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                                         `json:"page"            form:"page"`
}

// GETMealPlansMealPlanIDGroceryListItemsParamsIncludeArchived defines parameters for GETMealPlansMealPlanIDGroceryListItems.
type GETMealPlansMealPlanIDGroceryListItemsParamsIncludeArchived string

// GETMealPlansMealPlanIDGroceryListItemsParamsSortBy defines parameters for GETMealPlansMealPlanIDGroceryListItems.
type GETMealPlansMealPlanIDGroceryListItemsParamsSortBy string

// GETMealPlansMealPlanIDTasksParams defines parameters for GETMealPlansMealPlanIDTasks.
type GETMealPlansMealPlanIDTasksParams struct {
	CreatedBefore   string                                           `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                           `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                           `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                           `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETMealPlansMealPlanIDTasksParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETMealPlansMealPlanIDTasksParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                              `json:"page"            form:"page"`
}

// GETMealPlansMealPlanIDTasksParamsIncludeArchived defines parameters for GETMealPlansMealPlanIDTasks.
type GETMealPlansMealPlanIDTasksParamsIncludeArchived string

// GETMealPlansMealPlanIDTasksParamsSortBy defines parameters for GETMealPlansMealPlanIDTasks.
type GETMealPlansMealPlanIDTasksParamsSortBy string

// GETMealsParams defines parameters for GETMeals.
type GETMealsParams struct {
	CreatedBefore   string                        `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                        `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                        `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                        `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETMealsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETMealsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                           `json:"page"            form:"page"`
}

// GETMealsParamsIncludeArchived defines parameters for GETMeals.
type GETMealsParamsIncludeArchived string

// GETMealsParamsSortBy defines parameters for GETMeals.
type GETMealsParamsSortBy string

// GETOauth2ClientsParams defines parameters for GETOauth2Clients.
type GETOauth2ClientsParams struct {
	CreatedBefore   string                                `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETOauth2ClientsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETOauth2ClientsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                   `json:"page"            form:"page"`
}

// GETOauth2ClientsParamsIncludeArchived defines parameters for GETOauth2Clients.
type GETOauth2ClientsParamsIncludeArchived string

// GETOauth2ClientsParamsSortBy defines parameters for GETOauth2Clients.
type GETOauth2ClientsParamsSortBy string

// GETRecipesParams defines parameters for GETRecipes.
type GETRecipesParams struct {
	CreatedBefore   string                          `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                          `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                          `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                          `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETRecipesParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETRecipesParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                             `json:"page"            form:"page"`
}

// GETRecipesParamsIncludeArchived defines parameters for GETRecipes.
type GETRecipesParamsIncludeArchived string

// GETRecipesParamsSortBy defines parameters for GETRecipes.
type GETRecipesParamsSortBy string

// GETRecipesRecipeIDPrepTasksParams defines parameters for GETRecipesRecipeIDPrepTasks.
type GETRecipesRecipeIDPrepTasksParams struct {
	CreatedBefore   string                                           `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                           `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                           `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                           `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETRecipesRecipeIDPrepTasksParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETRecipesRecipeIDPrepTasksParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                              `json:"page"            form:"page"`
}

// GETRecipesRecipeIDPrepTasksParamsIncludeArchived defines parameters for GETRecipesRecipeIDPrepTasks.
type GETRecipesRecipeIDPrepTasksParamsIncludeArchived string

// GETRecipesRecipeIDPrepTasksParamsSortBy defines parameters for GETRecipesRecipeIDPrepTasks.
type GETRecipesRecipeIDPrepTasksParamsSortBy string

// GETRecipesRecipeIDRatingsParams defines parameters for GETRecipesRecipeIDRatings.
type GETRecipesRecipeIDRatingsParams struct {
	CreatedBefore   string                                         `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                         `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                         `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                         `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETRecipesRecipeIDRatingsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETRecipesRecipeIDRatingsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                            `json:"page"            form:"page"`
}

// GETRecipesRecipeIDRatingsParamsIncludeArchived defines parameters for GETRecipesRecipeIDRatings.
type GETRecipesRecipeIDRatingsParamsIncludeArchived string

// GETRecipesRecipeIDRatingsParamsSortBy defines parameters for GETRecipesRecipeIDRatings.
type GETRecipesRecipeIDRatingsParamsSortBy string

// GETRecipesRecipeIDStepsParams defines parameters for GETRecipesRecipeIDSteps.
type GETRecipesRecipeIDStepsParams struct {
	CreatedBefore   string                                       `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                       `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                       `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                       `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETRecipesRecipeIDStepsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETRecipesRecipeIDStepsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                          `json:"page"            form:"page"`
}

// GETRecipesRecipeIDStepsParamsIncludeArchived defines parameters for GETRecipesRecipeIDSteps.
type GETRecipesRecipeIDStepsParamsIncludeArchived string

// GETRecipesRecipeIDStepsParamsSortBy defines parameters for GETRecipesRecipeIDSteps.
type GETRecipesRecipeIDStepsParamsSortBy string

// GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsParams defines parameters for GETRecipesRecipeIDStepsRecipeStepIDCompletionConditions.
type GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsParams struct {
	CreatedBefore   string                                                                       `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                                                       `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                                                       `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                                                       `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                                                          `json:"page"            form:"page"`
}

// GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsParamsIncludeArchived defines parameters for GETRecipesRecipeIDStepsRecipeStepIDCompletionConditions.
type GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsParamsIncludeArchived string

// GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsParamsSortBy defines parameters for GETRecipesRecipeIDStepsRecipeStepIDCompletionConditions.
type GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsParamsSortBy string

// GETRecipesRecipeIDStepsRecipeStepIDIngredientsParams defines parameters for GETRecipesRecipeIDStepsRecipeStepIDIngredients.
type GETRecipesRecipeIDStepsRecipeStepIDIngredientsParams struct {
	CreatedBefore   string                                                              `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                                              `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                                              `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                                              `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETRecipesRecipeIDStepsRecipeStepIDIngredientsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETRecipesRecipeIDStepsRecipeStepIDIngredientsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                                                 `json:"page"            form:"page"`
}

// GETRecipesRecipeIDStepsRecipeStepIDIngredientsParamsIncludeArchived defines parameters for GETRecipesRecipeIDStepsRecipeStepIDIngredients.
type GETRecipesRecipeIDStepsRecipeStepIDIngredientsParamsIncludeArchived string

// GETRecipesRecipeIDStepsRecipeStepIDIngredientsParamsSortBy defines parameters for GETRecipesRecipeIDStepsRecipeStepIDIngredients.
type GETRecipesRecipeIDStepsRecipeStepIDIngredientsParamsSortBy string

// GETRecipesRecipeIDStepsRecipeStepIDInstrumentsParams defines parameters for GETRecipesRecipeIDStepsRecipeStepIDInstruments.
type GETRecipesRecipeIDStepsRecipeStepIDInstrumentsParams struct {
	CreatedBefore   string                                                              `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                                              `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                                              `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                                              `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETRecipesRecipeIDStepsRecipeStepIDInstrumentsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETRecipesRecipeIDStepsRecipeStepIDInstrumentsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                                                 `json:"page"            form:"page"`
}

// GETRecipesRecipeIDStepsRecipeStepIDInstrumentsParamsIncludeArchived defines parameters for GETRecipesRecipeIDStepsRecipeStepIDInstruments.
type GETRecipesRecipeIDStepsRecipeStepIDInstrumentsParamsIncludeArchived string

// GETRecipesRecipeIDStepsRecipeStepIDInstrumentsParamsSortBy defines parameters for GETRecipesRecipeIDStepsRecipeStepIDInstruments.
type GETRecipesRecipeIDStepsRecipeStepIDInstrumentsParamsSortBy string

// GETRecipesRecipeIDStepsRecipeStepIDProductsParams defines parameters for GETRecipesRecipeIDStepsRecipeStepIDProducts.
type GETRecipesRecipeIDStepsRecipeStepIDProductsParams struct {
	CreatedBefore   string                                                           `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                                           `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                                           `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                                           `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETRecipesRecipeIDStepsRecipeStepIDProductsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETRecipesRecipeIDStepsRecipeStepIDProductsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                                              `json:"page"            form:"page"`
}

// GETRecipesRecipeIDStepsRecipeStepIDProductsParamsIncludeArchived defines parameters for GETRecipesRecipeIDStepsRecipeStepIDProducts.
type GETRecipesRecipeIDStepsRecipeStepIDProductsParamsIncludeArchived string

// GETRecipesRecipeIDStepsRecipeStepIDProductsParamsSortBy defines parameters for GETRecipesRecipeIDStepsRecipeStepIDProducts.
type GETRecipesRecipeIDStepsRecipeStepIDProductsParamsSortBy string

// GETRecipesRecipeIDStepsRecipeStepIDVesselsParams defines parameters for GETRecipesRecipeIDStepsRecipeStepIDVessels.
type GETRecipesRecipeIDStepsRecipeStepIDVesselsParams struct {
	CreatedBefore   string                                                          `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                                          `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                                          `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                                          `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETRecipesRecipeIDStepsRecipeStepIDVesselsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETRecipesRecipeIDStepsRecipeStepIDVesselsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                                             `json:"page"            form:"page"`
}

// GETRecipesRecipeIDStepsRecipeStepIDVesselsParamsIncludeArchived defines parameters for GETRecipesRecipeIDStepsRecipeStepIDVessels.
type GETRecipesRecipeIDStepsRecipeStepIDVesselsParamsIncludeArchived string

// GETRecipesRecipeIDStepsRecipeStepIDVesselsParamsSortBy defines parameters for GETRecipesRecipeIDStepsRecipeStepIDVessels.
type GETRecipesRecipeIDStepsRecipeStepIDVesselsParamsSortBy string

// GETSettingsParams defines parameters for GETSettings.
type GETSettingsParams struct {
	CreatedBefore   string                           `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                           `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                           `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                           `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETSettingsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETSettingsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                              `json:"page"            form:"page"`
}

// GETSettingsParamsIncludeArchived defines parameters for GETSettings.
type GETSettingsParamsIncludeArchived string

// GETSettingsParamsSortBy defines parameters for GETSettings.
type GETSettingsParamsSortBy string

// GETUserIngredientPreferencesParams defines parameters for GETUserIngredientPreferences.
type GETUserIngredientPreferencesParams struct {
	CreatedBefore   string                                            `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                            `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                            `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                            `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETUserIngredientPreferencesParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETUserIngredientPreferencesParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                               `json:"page"            form:"page"`
}

// GETUserIngredientPreferencesParamsIncludeArchived defines parameters for GETUserIngredientPreferences.
type GETUserIngredientPreferencesParamsIncludeArchived string

// GETUserIngredientPreferencesParamsSortBy defines parameters for GETUserIngredientPreferences.
type GETUserIngredientPreferencesParamsSortBy string

// GETUserNotificationsParams defines parameters for GETUserNotifications.
type GETUserNotificationsParams struct {
	CreatedBefore   string                                    `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                    `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                    `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                    `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETUserNotificationsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETUserNotificationsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                       `json:"page"            form:"page"`
}

// GETUserNotificationsParamsIncludeArchived defines parameters for GETUserNotifications.
type GETUserNotificationsParamsIncludeArchived string

// GETUserNotificationsParamsSortBy defines parameters for GETUserNotifications.
type GETUserNotificationsParamsSortBy string

// GETUsersParams defines parameters for GETUsers.
type GETUsersParams struct {
	CreatedBefore   string                        `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                        `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                        `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                        `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETUsersParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETUsersParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                           `json:"page"            form:"page"`
}

// GETUsersParamsIncludeArchived defines parameters for GETUsers.
type GETUsersParamsIncludeArchived string

// GETUsersParamsSortBy defines parameters for GETUsers.
type GETUsersParamsSortBy string

// GETUsersSearchParams defines parameters for GETUsersSearch.
type GETUsersSearchParams struct {
	CreatedBefore   string                              `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                              `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                              `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                              `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETUsersSearchParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETUsersSearchParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                 `json:"page"            form:"page"`
}

// GETUsersSearchParamsIncludeArchived defines parameters for GETUsersSearch.
type GETUsersSearchParamsIncludeArchived string

// GETUsersSearchParamsSortBy defines parameters for GETUsersSearch.
type GETUsersSearchParamsSortBy string

// GETValidIngredientGroupsParams defines parameters for GETValidIngredientGroups.
type GETValidIngredientGroupsParams struct {
	CreatedBefore   string                                        `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                        `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                        `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                        `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETValidIngredientGroupsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETValidIngredientGroupsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                           `json:"page"            form:"page"`
}

// GETValidIngredientGroupsParamsIncludeArchived defines parameters for GETValidIngredientGroups.
type GETValidIngredientGroupsParamsIncludeArchived string

// GETValidIngredientGroupsParamsSortBy defines parameters for GETValidIngredientGroups.
type GETValidIngredientGroupsParamsSortBy string

// GETValidIngredientMeasurementUnitsParams defines parameters for GETValidIngredientMeasurementUnits.
type GETValidIngredientMeasurementUnitsParams struct {
	CreatedBefore   string                                                  `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                                  `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                                  `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                                  `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETValidIngredientMeasurementUnitsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETValidIngredientMeasurementUnitsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                                     `json:"page"            form:"page"`
}

// GETValidIngredientMeasurementUnitsParamsIncludeArchived defines parameters for GETValidIngredientMeasurementUnits.
type GETValidIngredientMeasurementUnitsParamsIncludeArchived string

// GETValidIngredientMeasurementUnitsParamsSortBy defines parameters for GETValidIngredientMeasurementUnits.
type GETValidIngredientMeasurementUnitsParamsSortBy string

// GETValidIngredientPreparationsParams defines parameters for GETValidIngredientPreparations.
type GETValidIngredientPreparationsParams struct {
	CreatedBefore   string                                              `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                              `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                              `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                              `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETValidIngredientPreparationsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETValidIngredientPreparationsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                                 `json:"page"            form:"page"`
}

// GETValidIngredientPreparationsParamsIncludeArchived defines parameters for GETValidIngredientPreparations.
type GETValidIngredientPreparationsParamsIncludeArchived string

// GETValidIngredientPreparationsParamsSortBy defines parameters for GETValidIngredientPreparations.
type GETValidIngredientPreparationsParamsSortBy string

// GETValidIngredientStateIngredientsParams defines parameters for GETValidIngredientStateIngredients.
type GETValidIngredientStateIngredientsParams struct {
	CreatedBefore   string                                                  `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                                  `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                                  `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                                  `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETValidIngredientStateIngredientsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETValidIngredientStateIngredientsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                                     `json:"page"            form:"page"`
}

// GETValidIngredientStateIngredientsParamsIncludeArchived defines parameters for GETValidIngredientStateIngredients.
type GETValidIngredientStateIngredientsParamsIncludeArchived string

// GETValidIngredientStateIngredientsParamsSortBy defines parameters for GETValidIngredientStateIngredients.
type GETValidIngredientStateIngredientsParamsSortBy string

// GETValidIngredientStatesParams defines parameters for GETValidIngredientStates.
type GETValidIngredientStatesParams struct {
	CreatedBefore   string                                        `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                        `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                        `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                        `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETValidIngredientStatesParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETValidIngredientStatesParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                           `json:"page"            form:"page"`
}

// GETValidIngredientStatesParamsIncludeArchived defines parameters for GETValidIngredientStates.
type GETValidIngredientStatesParamsIncludeArchived string

// GETValidIngredientStatesParamsSortBy defines parameters for GETValidIngredientStates.
type GETValidIngredientStatesParamsSortBy string

// GETValidIngredientsParams defines parameters for GETValidIngredients.
type GETValidIngredientsParams struct {
	CreatedBefore   string                                   `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                   `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                   `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                   `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETValidIngredientsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETValidIngredientsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                      `json:"page"            form:"page"`
}

// GETValidIngredientsParamsIncludeArchived defines parameters for GETValidIngredients.
type GETValidIngredientsParamsIncludeArchived string

// GETValidIngredientsParamsSortBy defines parameters for GETValidIngredients.
type GETValidIngredientsParamsSortBy string

// GETValidInstrumentsParams defines parameters for GETValidInstruments.
type GETValidInstrumentsParams struct {
	CreatedBefore   string                                   `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                   `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                   `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                   `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETValidInstrumentsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETValidInstrumentsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                      `json:"page"            form:"page"`
}

// GETValidInstrumentsParamsIncludeArchived defines parameters for GETValidInstruments.
type GETValidInstrumentsParamsIncludeArchived string

// GETValidInstrumentsParamsSortBy defines parameters for GETValidInstruments.
type GETValidInstrumentsParamsSortBy string

// GETValidMeasurementUnitsParams defines parameters for GETValidMeasurementUnits.
type GETValidMeasurementUnitsParams struct {
	CreatedBefore   string                                        `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                        `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                        `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                        `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETValidMeasurementUnitsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETValidMeasurementUnitsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                           `json:"page"            form:"page"`
}

// GETValidMeasurementUnitsParamsIncludeArchived defines parameters for GETValidMeasurementUnits.
type GETValidMeasurementUnitsParamsIncludeArchived string

// GETValidMeasurementUnitsParamsSortBy defines parameters for GETValidMeasurementUnits.
type GETValidMeasurementUnitsParamsSortBy string

// GETValidPreparationInstrumentsParams defines parameters for GETValidPreparationInstruments.
type GETValidPreparationInstrumentsParams struct {
	CreatedBefore   string                                              `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                              `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                              `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                              `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETValidPreparationInstrumentsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETValidPreparationInstrumentsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                                 `json:"page"            form:"page"`
}

// GETValidPreparationInstrumentsParamsIncludeArchived defines parameters for GETValidPreparationInstruments.
type GETValidPreparationInstrumentsParamsIncludeArchived string

// GETValidPreparationInstrumentsParamsSortBy defines parameters for GETValidPreparationInstruments.
type GETValidPreparationInstrumentsParamsSortBy string

// GETValidPreparationVesselsParams defines parameters for GETValidPreparationVessels.
type GETValidPreparationVesselsParams struct {
	CreatedBefore   string                                          `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                          `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                          `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                          `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETValidPreparationVesselsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETValidPreparationVesselsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                             `json:"page"            form:"page"`
}

// GETValidPreparationVesselsParamsIncludeArchived defines parameters for GETValidPreparationVessels.
type GETValidPreparationVesselsParamsIncludeArchived string

// GETValidPreparationVesselsParamsSortBy defines parameters for GETValidPreparationVessels.
type GETValidPreparationVesselsParamsSortBy string

// GETValidPreparationsParams defines parameters for GETValidPreparations.
type GETValidPreparationsParams struct {
	CreatedBefore   string                                    `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                                    `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                                    `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                                    `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETValidPreparationsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETValidPreparationsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                       `json:"page"            form:"page"`
}

// GETValidPreparationsParamsIncludeArchived defines parameters for GETValidPreparations.
type GETValidPreparationsParamsIncludeArchived string

// GETValidPreparationsParamsSortBy defines parameters for GETValidPreparations.
type GETValidPreparationsParamsSortBy string

// GETValidVesselsParams defines parameters for GETValidVessels.
type GETValidVesselsParams struct {
	CreatedBefore   string                               `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                               `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                               `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                               `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETValidVesselsParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETValidVesselsParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                                  `json:"page"            form:"page"`
}

// GETValidVesselsParamsIncludeArchived defines parameters for GETValidVessels.
type GETValidVesselsParamsIncludeArchived string

// GETValidVesselsParamsSortBy defines parameters for GETValidVessels.
type GETValidVesselsParamsSortBy string

// GETWebhooksParams defines parameters for GETWebhooks.
type GETWebhooksParams struct {
	CreatedBefore   string                           `json:"createdBefore"   form:"createdBefore"`
	CreatedAfter    string                           `json:"createdAfter"    form:"createdAfter"`
	UpdatedBefore   string                           `json:"updatedBefore"   form:"updatedBefore"`
	UpdatedAfter    string                           `json:"updatedAfter"    form:"updatedAfter"`
	IncludeArchived GETWebhooksParamsIncludeArchived `json:"includeArchived" form:"includeArchived"`
	SortBy          GETWebhooksParamsSortBy          `json:"sortBy"          form:"sortBy"`
	Page            int                              `json:"page"            form:"page"`
}

// GETWebhooksParamsIncludeArchived defines parameters for GETWebhooks.
type GETWebhooksParamsIncludeArchived string

// GETWebhooksParamsSortBy defines parameters for GETWebhooks.
type GETWebhooksParamsSortBy string

// POSTAdminUsersStatusJSONRequestBody defines body for POSTAdminUsersStatus for application/json ContentType.
type POSTAdminUsersStatusJSONRequestBody = UserAccountStatusUpdateInput

// PUTHouseholdInvitationsHouseholdInvitationIDAcceptJSONRequestBody defines body for PUTHouseholdInvitationsHouseholdInvitationIDAccept for application/json ContentType.
type PUTHouseholdInvitationsHouseholdInvitationIDAcceptJSONRequestBody = HouseholdInvitationUpdateRequestInput

// PUTHouseholdInvitationsHouseholdInvitationIDCancelJSONRequestBody defines body for PUTHouseholdInvitationsHouseholdInvitationIDCancel for application/json ContentType.
type PUTHouseholdInvitationsHouseholdInvitationIDCancelJSONRequestBody = HouseholdInvitationUpdateRequestInput

// PUTHouseholdInvitationsHouseholdInvitationIDRejectJSONRequestBody defines body for PUTHouseholdInvitationsHouseholdInvitationIDReject for application/json ContentType.
type PUTHouseholdInvitationsHouseholdInvitationIDRejectJSONRequestBody = HouseholdInvitationUpdateRequestInput

// POSTHouseholdsJSONRequestBody defines body for POSTHouseholds for application/json ContentType.
type POSTHouseholdsJSONRequestBody = HouseholdCreationRequestInput

// POSTHouseholdsInstrumentsJSONRequestBody defines body for POSTHouseholdsInstruments for application/json ContentType.
type POSTHouseholdsInstrumentsJSONRequestBody = HouseholdInstrumentOwnershipCreationRequestInput

// PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDJSONRequestBody defines body for PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipID for application/json ContentType.
type PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDJSONRequestBody = HouseholdInstrumentOwnershipUpdateRequestInput

// PUTHouseholdsHouseholdIDJSONRequestBody defines body for PUTHouseholdsHouseholdID for application/json ContentType.
type PUTHouseholdsHouseholdIDJSONRequestBody = HouseholdUpdateRequestInput

// POSTHouseholdsHouseholdIDInvitationsJSONRequestBody defines body for POSTHouseholdsHouseholdIDInvitations for application/json ContentType.
type POSTHouseholdsHouseholdIDInvitationsJSONRequestBody = HouseholdInvitationCreationRequestInput

// POSTHouseholdsHouseholdIDInviteJSONRequestBody defines body for POSTHouseholdsHouseholdIDInvite for application/json ContentType.
type POSTHouseholdsHouseholdIDInviteJSONRequestBody = HouseholdInvitationCreationRequestInput

// PATCHHouseholdsHouseholdIDMembersUserIDPermissionsJSONRequestBody defines body for PATCHHouseholdsHouseholdIDMembersUserIDPermissions for application/json ContentType.
type PATCHHouseholdsHouseholdIDMembersUserIDPermissionsJSONRequestBody = ModifyUserPermissionsInput

// POSTHouseholdsHouseholdIDTransferJSONRequestBody defines body for POSTHouseholdsHouseholdIDTransfer for application/json ContentType.
type POSTHouseholdsHouseholdIDTransferJSONRequestBody = HouseholdOwnershipTransferInput

// POSTMealPlansJSONRequestBody defines body for POSTMealPlans for application/json ContentType.
type POSTMealPlansJSONRequestBody = MealPlanCreationRequestInput

// PUTMealPlansMealPlanIDJSONRequestBody defines body for PUTMealPlansMealPlanID for application/json ContentType.
type PUTMealPlansMealPlanIDJSONRequestBody = MealPlanUpdateRequestInput

// POSTMealPlansMealPlanIDEventsJSONRequestBody defines body for POSTMealPlansMealPlanIDEvents for application/json ContentType.
type POSTMealPlansMealPlanIDEventsJSONRequestBody = MealPlanEventCreationRequestInput

// PUTMealPlansMealPlanIDEventsMealPlanEventIDJSONRequestBody defines body for PUTMealPlansMealPlanIDEventsMealPlanEventID for application/json ContentType.
type PUTMealPlansMealPlanIDEventsMealPlanEventIDJSONRequestBody = MealPlanEventUpdateRequestInput

// POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsJSONRequestBody defines body for POSTMealPlansMealPlanIDEventsMealPlanEventIDOptions for application/json ContentType.
type POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsJSONRequestBody = MealPlanOptionCreationRequestInput

// PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDJSONRequestBody defines body for PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionID for application/json ContentType.
type PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDJSONRequestBody = MealPlanOptionUpdateRequestInput

// PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDJSONRequestBody defines body for PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteID for application/json ContentType.
type PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDJSONRequestBody = MealPlanOptionVoteUpdateRequestInput

// POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteJSONRequestBody defines body for POSTMealPlansMealPlanIDEventsMealPlanEventIDVote for application/json ContentType.
type POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteJSONRequestBody = MealPlanOptionVoteCreationRequestInput

// POSTMealPlansMealPlanIDGroceryListItemsJSONRequestBody defines body for POSTMealPlansMealPlanIDGroceryListItems for application/json ContentType.
type POSTMealPlansMealPlanIDGroceryListItemsJSONRequestBody = MealPlanGroceryListItemCreationRequestInput

// PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDJSONRequestBody defines body for PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemID for application/json ContentType.
type PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDJSONRequestBody = MealPlanGroceryListItemUpdateRequestInput

// POSTMealPlansMealPlanIDTasksJSONRequestBody defines body for POSTMealPlansMealPlanIDTasks for application/json ContentType.
type POSTMealPlansMealPlanIDTasksJSONRequestBody = MealPlanTaskCreationRequestInput

// PATCHMealPlansMealPlanIDTasksMealPlanTaskIDJSONRequestBody defines body for PATCHMealPlansMealPlanIDTasksMealPlanTaskID for application/json ContentType.
type PATCHMealPlansMealPlanIDTasksMealPlanTaskIDJSONRequestBody = MealPlanTaskStatusChangeRequestInput

// POSTMealsJSONRequestBody defines body for POSTMeals for application/json ContentType.
type POSTMealsJSONRequestBody = MealCreationRequestInput

// POSTOauth2ClientsJSONRequestBody defines body for POSTOauth2Clients for application/json ContentType.
type POSTOauth2ClientsJSONRequestBody = OAuth2ClientCreationRequestInput

// POSTRecipesJSONRequestBody defines body for POSTRecipes for application/json ContentType.
type POSTRecipesJSONRequestBody = RecipeCreationRequestInput

// PUTRecipesRecipeIDJSONRequestBody defines body for PUTRecipesRecipeID for application/json ContentType.
type PUTRecipesRecipeIDJSONRequestBody = RecipeUpdateRequestInput

// POSTRecipesRecipeIDPrepTasksJSONRequestBody defines body for POSTRecipesRecipeIDPrepTasks for application/json ContentType.
type POSTRecipesRecipeIDPrepTasksJSONRequestBody = RecipePrepTaskCreationRequestInput

// PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDJSONRequestBody defines body for PUTRecipesRecipeIDPrepTasksRecipePrepTaskID for application/json ContentType.
type PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDJSONRequestBody = RecipePrepTaskUpdateRequestInput

// POSTRecipesRecipeIDRatingsJSONRequestBody defines body for POSTRecipesRecipeIDRatings for application/json ContentType.
type POSTRecipesRecipeIDRatingsJSONRequestBody = RecipeRatingCreationRequestInput

// PUTRecipesRecipeIDRatingsRecipeRatingIDJSONRequestBody defines body for PUTRecipesRecipeIDRatingsRecipeRatingID for application/json ContentType.
type PUTRecipesRecipeIDRatingsRecipeRatingIDJSONRequestBody = RecipeRatingUpdateRequestInput

// POSTRecipesRecipeIDStepsJSONRequestBody defines body for POSTRecipesRecipeIDSteps for application/json ContentType.
type POSTRecipesRecipeIDStepsJSONRequestBody = RecipeStepCreationRequestInput

// PUTRecipesRecipeIDStepsRecipeStepIDJSONRequestBody defines body for PUTRecipesRecipeIDStepsRecipeStepID for application/json ContentType.
type PUTRecipesRecipeIDStepsRecipeStepIDJSONRequestBody = RecipeStepUpdateRequestInput

// POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsJSONRequestBody defines body for POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditions for application/json ContentType.
type POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsJSONRequestBody = RecipeStepCompletionConditionForExistingRecipeCreationRequestInput

// PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDJSONRequestBody defines body for PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionID for application/json ContentType.
type PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDJSONRequestBody = RecipeStepCompletionConditionUpdateRequestInput

// POSTRecipesRecipeIDStepsRecipeStepIDIngredientsJSONRequestBody defines body for POSTRecipesRecipeIDStepsRecipeStepIDIngredients for application/json ContentType.
type POSTRecipesRecipeIDStepsRecipeStepIDIngredientsJSONRequestBody = RecipeStepIngredientCreationRequestInput

// PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDJSONRequestBody defines body for PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientID for application/json ContentType.
type PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDJSONRequestBody = RecipeStepIngredientUpdateRequestInput

// POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsJSONRequestBody defines body for POSTRecipesRecipeIDStepsRecipeStepIDInstruments for application/json ContentType.
type POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsJSONRequestBody = RecipeStepInstrumentCreationRequestInput

// PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDJSONRequestBody defines body for PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentID for application/json ContentType.
type PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDJSONRequestBody = RecipeStepInstrumentUpdateRequestInput

// POSTRecipesRecipeIDStepsRecipeStepIDProductsJSONRequestBody defines body for POSTRecipesRecipeIDStepsRecipeStepIDProducts for application/json ContentType.
type POSTRecipesRecipeIDStepsRecipeStepIDProductsJSONRequestBody = RecipeStepProductCreationRequestInput

// PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDJSONRequestBody defines body for PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductID for application/json ContentType.
type PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDJSONRequestBody = RecipeStepProductUpdateRequestInput

// POSTRecipesRecipeIDStepsRecipeStepIDVesselsJSONRequestBody defines body for POSTRecipesRecipeIDStepsRecipeStepIDVessels for application/json ContentType.
type POSTRecipesRecipeIDStepsRecipeStepIDVesselsJSONRequestBody = RecipeStepVesselCreationRequestInput

// PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDJSONRequestBody defines body for PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselID for application/json ContentType.
type PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDJSONRequestBody = RecipeStepVesselUpdateRequestInput

// POSTSettingsJSONRequestBody defines body for POSTSettings for application/json ContentType.
type POSTSettingsJSONRequestBody = ServiceSettingCreationRequestInput

// POSTSettingsConfigurationsJSONRequestBody defines body for POSTSettingsConfigurations for application/json ContentType.
type POSTSettingsConfigurationsJSONRequestBody = ServiceSettingConfigurationCreationRequestInput

// PUTSettingsConfigurationsServiceSettingConfigurationIDJSONRequestBody defines body for PUTSettingsConfigurationsServiceSettingConfigurationID for application/json ContentType.
type PUTSettingsConfigurationsServiceSettingConfigurationIDJSONRequestBody = ServiceSettingConfigurationUpdateRequestInput

// POSTUserIngredientPreferencesJSONRequestBody defines body for POSTUserIngredientPreferences for application/json ContentType.
type POSTUserIngredientPreferencesJSONRequestBody = UserIngredientPreferenceCreationRequestInput

// PUTUserIngredientPreferencesUserIngredientPreferenceIDJSONRequestBody defines body for PUTUserIngredientPreferencesUserIngredientPreferenceID for application/json ContentType.
type PUTUserIngredientPreferencesUserIngredientPreferenceIDJSONRequestBody = UserIngredientPreferenceUpdateRequestInput

// POSTUserNotificationsJSONRequestBody defines body for POSTUserNotifications for application/json ContentType.
type POSTUserNotificationsJSONRequestBody = UserNotificationCreationRequestInput

// PATCHUserNotificationsUserNotificationIDJSONRequestBody defines body for PATCHUserNotificationsUserNotificationID for application/json ContentType.
type PATCHUserNotificationsUserNotificationIDJSONRequestBody = UserNotificationUpdateRequestInput

// POSTUsersAvatarUploadJSONRequestBody defines body for POSTUsersAvatarUpload for application/json ContentType.
type POSTUsersAvatarUploadJSONRequestBody = AvatarUpdateInput

// PUTUsersDetailsJSONRequestBody defines body for PUTUsersDetails for application/json ContentType.
type PUTUsersDetailsJSONRequestBody = UserDetailsUpdateRequestInput

// PUTUsersEmailAddressJSONRequestBody defines body for PUTUsersEmailAddress for application/json ContentType.
type PUTUsersEmailAddressJSONRequestBody = UserEmailAddressUpdateInput

// POSTUsersEmailAddressVerificationJSONRequestBody defines body for POSTUsersEmailAddressVerification for application/json ContentType.
type POSTUsersEmailAddressVerificationJSONRequestBody = EmailAddressVerificationRequestInput

// POSTUsersHouseholdSelectJSONRequestBody defines body for POSTUsersHouseholdSelect for application/json ContentType.
type POSTUsersHouseholdSelectJSONRequestBody = ChangeActiveHouseholdInput

// PUTUsersPasswordNewJSONRequestBody defines body for PUTUsersPasswordNew for application/json ContentType.
type PUTUsersPasswordNewJSONRequestBody = PasswordUpdateInput

// POSTUsersPermissionsCheckJSONRequestBody defines body for POSTUsersPermissionsCheck for application/json ContentType.
type POSTUsersPermissionsCheckJSONRequestBody = UserPermissionsRequestInput

// POSTUsersTotpSecretNewJSONRequestBody defines body for POSTUsersTotpSecretNew for application/json ContentType.
type POSTUsersTotpSecretNewJSONRequestBody = TOTPSecretRefreshInput

// PUTUsersUsernameJSONRequestBody defines body for PUTUsersUsername for application/json ContentType.
type PUTUsersUsernameJSONRequestBody = UsernameUpdateInput

// POSTValidIngredientGroupsJSONRequestBody defines body for POSTValidIngredientGroups for application/json ContentType.
type POSTValidIngredientGroupsJSONRequestBody = ValidIngredientGroupCreationRequestInput

// PUTValidIngredientGroupsValidIngredientGroupIDJSONRequestBody defines body for PUTValidIngredientGroupsValidIngredientGroupID for application/json ContentType.
type PUTValidIngredientGroupsValidIngredientGroupIDJSONRequestBody = ValidIngredientGroupUpdateRequestInput

// POSTValidIngredientMeasurementUnitsJSONRequestBody defines body for POSTValidIngredientMeasurementUnits for application/json ContentType.
type POSTValidIngredientMeasurementUnitsJSONRequestBody = ValidIngredientMeasurementUnitCreationRequestInput

// PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDJSONRequestBody defines body for PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitID for application/json ContentType.
type PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDJSONRequestBody = ValidIngredientMeasurementUnitUpdateRequestInput

// POSTValidIngredientPreparationsJSONRequestBody defines body for POSTValidIngredientPreparations for application/json ContentType.
type POSTValidIngredientPreparationsJSONRequestBody = ValidIngredientPreparationCreationRequestInput

// PUTValidIngredientPreparationsValidIngredientPreparationIDJSONRequestBody defines body for PUTValidIngredientPreparationsValidIngredientPreparationID for application/json ContentType.
type PUTValidIngredientPreparationsValidIngredientPreparationIDJSONRequestBody = ValidIngredientPreparationUpdateRequestInput

// POSTValidIngredientStateIngredientsJSONRequestBody defines body for POSTValidIngredientStateIngredients for application/json ContentType.
type POSTValidIngredientStateIngredientsJSONRequestBody = ValidIngredientStateIngredientCreationRequestInput

// PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDJSONRequestBody defines body for PUTValidIngredientStateIngredientsValidIngredientStateIngredientID for application/json ContentType.
type PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDJSONRequestBody = ValidIngredientStateIngredientUpdateRequestInput

// POSTValidIngredientStatesJSONRequestBody defines body for POSTValidIngredientStates for application/json ContentType.
type POSTValidIngredientStatesJSONRequestBody = ValidIngredientStateCreationRequestInput

// PUTValidIngredientStatesValidIngredientStateIDJSONRequestBody defines body for PUTValidIngredientStatesValidIngredientStateID for application/json ContentType.
type PUTValidIngredientStatesValidIngredientStateIDJSONRequestBody = ValidIngredientStateUpdateRequestInput

// POSTValidIngredientsJSONRequestBody defines body for POSTValidIngredients for application/json ContentType.
type POSTValidIngredientsJSONRequestBody = ValidIngredientCreationRequestInput

// PUTValidIngredientsValidIngredientIDJSONRequestBody defines body for PUTValidIngredientsValidIngredientID for application/json ContentType.
type PUTValidIngredientsValidIngredientIDJSONRequestBody = ValidIngredientUpdateRequestInput

// POSTValidInstrumentsJSONRequestBody defines body for POSTValidInstruments for application/json ContentType.
type POSTValidInstrumentsJSONRequestBody = ValidInstrumentCreationRequestInput

// PUTValidInstrumentsValidInstrumentIDJSONRequestBody defines body for PUTValidInstrumentsValidInstrumentID for application/json ContentType.
type PUTValidInstrumentsValidInstrumentIDJSONRequestBody = ValidInstrumentUpdateRequestInput

// POSTValidMeasurementConversionsJSONRequestBody defines body for POSTValidMeasurementConversions for application/json ContentType.
type POSTValidMeasurementConversionsJSONRequestBody = ValidMeasurementUnitConversionCreationRequestInput

// PUTValidMeasurementConversionsValidMeasurementUnitConversionIDJSONRequestBody defines body for PUTValidMeasurementConversionsValidMeasurementUnitConversionID for application/json ContentType.
type PUTValidMeasurementConversionsValidMeasurementUnitConversionIDJSONRequestBody = ValidMeasurementUnitConversionUpdateRequestInput

// POSTValidMeasurementUnitsJSONRequestBody defines body for POSTValidMeasurementUnits for application/json ContentType.
type POSTValidMeasurementUnitsJSONRequestBody = ValidMeasurementUnitCreationRequestInput

// PUTValidMeasurementUnitsValidMeasurementUnitIDJSONRequestBody defines body for PUTValidMeasurementUnitsValidMeasurementUnitID for application/json ContentType.
type PUTValidMeasurementUnitsValidMeasurementUnitIDJSONRequestBody = ValidMeasurementUnitUpdateRequestInput

// POSTValidPreparationInstrumentsJSONRequestBody defines body for POSTValidPreparationInstruments for application/json ContentType.
type POSTValidPreparationInstrumentsJSONRequestBody = ValidPreparationInstrumentCreationRequestInput

// PUTValidPreparationInstrumentsValidPreparationVesselIDJSONRequestBody defines body for PUTValidPreparationInstrumentsValidPreparationVesselID for application/json ContentType.
type PUTValidPreparationInstrumentsValidPreparationVesselIDJSONRequestBody = ValidPreparationInstrumentUpdateRequestInput

// POSTValidPreparationVesselsJSONRequestBody defines body for POSTValidPreparationVessels for application/json ContentType.
type POSTValidPreparationVesselsJSONRequestBody = ValidPreparationVesselCreationRequestInput

// PUTValidPreparationVesselsValidPreparationVesselIDJSONRequestBody defines body for PUTValidPreparationVesselsValidPreparationVesselID for application/json ContentType.
type PUTValidPreparationVesselsValidPreparationVesselIDJSONRequestBody = ValidPreparationVesselUpdateRequestInput

// POSTValidPreparationsJSONRequestBody defines body for POSTValidPreparations for application/json ContentType.
type POSTValidPreparationsJSONRequestBody = ValidPreparationCreationRequestInput

// PUTValidPreparationsValidPreparationIDJSONRequestBody defines body for PUTValidPreparationsValidPreparationID for application/json ContentType.
type PUTValidPreparationsValidPreparationIDJSONRequestBody = ValidPreparationUpdateRequestInput

// POSTValidVesselsJSONRequestBody defines body for POSTValidVessels for application/json ContentType.
type POSTValidVesselsJSONRequestBody = ValidVesselCreationRequestInput

// PUTValidVesselsValidVesselIDJSONRequestBody defines body for PUTValidVesselsValidVesselID for application/json ContentType.
type PUTValidVesselsValidVesselIDJSONRequestBody = ValidVesselUpdateRequestInput

// POSTWebhooksJSONRequestBody defines body for POSTWebhooks for application/json ContentType.
type POSTWebhooksJSONRequestBody = WebhookCreationRequestInput

// POSTWebhooksWebhookIDTriggerEventsJSONRequestBody defines body for POSTWebhooksWebhookIDTriggerEvents for application/json ContentType.
type POSTWebhooksWebhookIDTriggerEventsJSONRequestBody = WebhookTriggerEventCreationRequestInput

// POSTWorkersFinalizeMealPlansJSONRequestBody defines body for POSTWorkersFinalizeMealPlans for application/json ContentType.
type POSTWorkersFinalizeMealPlansJSONRequestBody = FinalizeMealPlansRequest

// POSTUsersJSONRequestBody defines body for POSTUsers for application/json ContentType.
type POSTUsersJSONRequestBody = UserRegistrationInput

// POSTUsersEmailAddressVerifyJSONRequestBody defines body for POSTUsersEmailAddressVerify for application/json ContentType.
type POSTUsersEmailAddressVerifyJSONRequestBody = EmailAddressVerificationRequestInput

// POSTUsersLoginJSONRequestBody defines body for POSTUsersLogin for application/json ContentType.
type POSTUsersLoginJSONRequestBody = UserLoginInput

// POSTUsersLoginAdminJSONRequestBody defines body for POSTUsersLoginAdmin for application/json ContentType.
type POSTUsersLoginAdminJSONRequestBody = UserLoginInput

// POSTUsersPasswordResetJSONRequestBody defines body for POSTUsersPasswordReset for application/json ContentType.
type POSTUsersPasswordResetJSONRequestBody = PasswordResetTokenCreationRequestInput

// POSTUsersPasswordResetRedeemJSONRequestBody defines body for POSTUsersPasswordResetRedeem for application/json ContentType.
type POSTUsersPasswordResetRedeemJSONRequestBody = PasswordResetTokenRedemptionRequestInput

// POSTUsersTotpSecretVerifyJSONRequestBody defines body for POSTUsersTotpSecretVerify for application/json ContentType.
type POSTUsersTotpSecretVerifyJSONRequestBody = TOTPSecretVerificationInput

// POSTUsersUsernameReminderJSONRequestBody defines body for POSTUsersUsernameReminder for application/json ContentType.
type POSTUsersUsernameReminderJSONRequestBody = UsernameReminderRequestInput

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// POSTAdminCycleCookieSecret request
	POSTAdminCycleCookieSecret(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTAdminUsersStatusWithBody request with any body
	POSTAdminUsersStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTAdminUsersStatus(ctx context.Context, body POSTAdminUsersStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETAuditLogEntriesForHousehold request
	GETAuditLogEntriesForHousehold(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETAuditLogEntriesForUser request
	GETAuditLogEntriesForUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETAuditLogEntriesAuditLogEntryID request
	GETAuditLogEntriesAuditLogEntryID(ctx context.Context, auditLogEntryID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETHouseholdInvitationsReceived request
	GETHouseholdInvitationsReceived(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETHouseholdInvitationsSent request
	GETHouseholdInvitationsSent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETHouseholdInvitationsHouseholdInvitationID request
	GETHouseholdInvitationsHouseholdInvitationID(ctx context.Context, householdInvitationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTHouseholdInvitationsHouseholdInvitationIDAcceptWithBody request with any body
	PUTHouseholdInvitationsHouseholdInvitationIDAcceptWithBody(ctx context.Context, householdInvitationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTHouseholdInvitationsHouseholdInvitationIDAccept(ctx context.Context, householdInvitationID string, body PUTHouseholdInvitationsHouseholdInvitationIDAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTHouseholdInvitationsHouseholdInvitationIDCancelWithBody request with any body
	PUTHouseholdInvitationsHouseholdInvitationIDCancelWithBody(ctx context.Context, householdInvitationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTHouseholdInvitationsHouseholdInvitationIDCancel(ctx context.Context, householdInvitationID string, body PUTHouseholdInvitationsHouseholdInvitationIDCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTHouseholdInvitationsHouseholdInvitationIDRejectWithBody request with any body
	PUTHouseholdInvitationsHouseholdInvitationIDRejectWithBody(ctx context.Context, householdInvitationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTHouseholdInvitationsHouseholdInvitationIDReject(ctx context.Context, householdInvitationID string, body PUTHouseholdInvitationsHouseholdInvitationIDRejectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETHouseholds request
	GETHouseholds(ctx context.Context, params *GETHouseholdsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTHouseholdsWithBody request with any body
	POSTHouseholdsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTHouseholds(ctx context.Context, body POSTHouseholdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETHouseholdsCurrent request
	GETHouseholdsCurrent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETHouseholdsInstruments request
	GETHouseholdsInstruments(ctx context.Context, params *GETHouseholdsInstrumentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTHouseholdsInstrumentsWithBody request with any body
	POSTHouseholdsInstrumentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTHouseholdsInstruments(ctx context.Context, body POSTHouseholdsInstrumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEHouseholdsInstrumentsHouseholdInstrumentOwnershipID request
	DELETEHouseholdsInstrumentsHouseholdInstrumentOwnershipID(ctx context.Context, householdInstrumentOwnershipID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETHouseholdsInstrumentsHouseholdInstrumentOwnershipID request
	GETHouseholdsInstrumentsHouseholdInstrumentOwnershipID(ctx context.Context, householdInstrumentOwnershipID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDWithBody request with any body
	PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDWithBody(ctx context.Context, householdInstrumentOwnershipID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipID(ctx context.Context, householdInstrumentOwnershipID string, body PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEHouseholdsHouseholdID request
	DELETEHouseholdsHouseholdID(ctx context.Context, householdID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETHouseholdsHouseholdID request
	GETHouseholdsHouseholdID(ctx context.Context, householdID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTHouseholdsHouseholdIDWithBody request with any body
	PUTHouseholdsHouseholdIDWithBody(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTHouseholdsHouseholdID(ctx context.Context, householdID string, body PUTHouseholdsHouseholdIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTHouseholdsHouseholdIDDefault request
	POSTHouseholdsHouseholdIDDefault(ctx context.Context, householdID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTHouseholdsHouseholdIDInvitationsWithBody request with any body
	POSTHouseholdsHouseholdIDInvitationsWithBody(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTHouseholdsHouseholdIDInvitations(ctx context.Context, householdID string, body POSTHouseholdsHouseholdIDInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETHouseholdsHouseholdIDInvitationsHouseholdInvitationID request
	GETHouseholdsHouseholdIDInvitationsHouseholdInvitationID(ctx context.Context, householdID string, householdInvitationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTHouseholdsHouseholdIDInviteWithBody request with any body
	POSTHouseholdsHouseholdIDInviteWithBody(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTHouseholdsHouseholdIDInvite(ctx context.Context, householdID string, body POSTHouseholdsHouseholdIDInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEHouseholdsHouseholdIDMembersUserID request
	DELETEHouseholdsHouseholdIDMembersUserID(ctx context.Context, householdID string, userID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PATCHHouseholdsHouseholdIDMembersUserIDPermissionsWithBody request with any body
	PATCHHouseholdsHouseholdIDMembersUserIDPermissionsWithBody(ctx context.Context, householdID string, userID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PATCHHouseholdsHouseholdIDMembersUserIDPermissions(ctx context.Context, householdID string, userID string, body PATCHHouseholdsHouseholdIDMembersUserIDPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTHouseholdsHouseholdIDTransferWithBody request with any body
	POSTHouseholdsHouseholdIDTransferWithBody(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTHouseholdsHouseholdIDTransfer(ctx context.Context, householdID string, body POSTHouseholdsHouseholdIDTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETMealPlans request
	GETMealPlans(ctx context.Context, params *GETMealPlansParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTMealPlansWithBody request with any body
	POSTMealPlansWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTMealPlans(ctx context.Context, body POSTMealPlansJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEMealPlansMealPlanID request
	DELETEMealPlansMealPlanID(ctx context.Context, mealPlanID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETMealPlansMealPlanID request
	GETMealPlansMealPlanID(ctx context.Context, mealPlanID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTMealPlansMealPlanIDWithBody request with any body
	PUTMealPlansMealPlanIDWithBody(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTMealPlansMealPlanID(ctx context.Context, mealPlanID string, body PUTMealPlansMealPlanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETMealPlansMealPlanIDEvents request
	GETMealPlansMealPlanIDEvents(ctx context.Context, mealPlanID string, params *GETMealPlansMealPlanIDEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTMealPlansMealPlanIDEventsWithBody request with any body
	POSTMealPlansMealPlanIDEventsWithBody(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTMealPlansMealPlanIDEvents(ctx context.Context, mealPlanID string, body POSTMealPlansMealPlanIDEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEMealPlansMealPlanIDEventsMealPlanEventID request
	DELETEMealPlansMealPlanIDEventsMealPlanEventID(ctx context.Context, mealPlanID string, mealPlanEventID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETMealPlansMealPlanIDEventsMealPlanEventID request
	GETMealPlansMealPlanIDEventsMealPlanEventID(ctx context.Context, mealPlanID string, mealPlanEventID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTMealPlansMealPlanIDEventsMealPlanEventIDWithBody request with any body
	PUTMealPlansMealPlanIDEventsMealPlanEventIDWithBody(ctx context.Context, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTMealPlansMealPlanIDEventsMealPlanEventID(ctx context.Context, mealPlanID string, mealPlanEventID string, body PUTMealPlansMealPlanIDEventsMealPlanEventIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETMealPlansMealPlanIDEventsMealPlanEventIDOptions request
	GETMealPlansMealPlanIDEventsMealPlanEventIDOptions(ctx context.Context, mealPlanID string, mealPlanEventID string, params *GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsWithBody request with any body
	POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsWithBody(ctx context.Context, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTMealPlansMealPlanIDEventsMealPlanEventIDOptions(ctx context.Context, mealPlanID string, mealPlanEventID string, body POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionID request
	DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionID(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionID request
	GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionID(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDWithBody request with any body
	PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDWithBody(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionID(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, body PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotes request
	GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotes(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, params *GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteID request
	DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteID(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteID request
	GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteID(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDWithBody request with any body
	PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDWithBody(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteID(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, body PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteWithBody request with any body
	POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteWithBody(ctx context.Context, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTMealPlansMealPlanIDEventsMealPlanEventIDVote(ctx context.Context, mealPlanID string, mealPlanEventID string, body POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTMealPlansMealPlanIDFinalize request
	POSTMealPlansMealPlanIDFinalize(ctx context.Context, mealPlanID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETMealPlansMealPlanIDGroceryListItems request
	GETMealPlansMealPlanIDGroceryListItems(ctx context.Context, mealPlanID string, params *GETMealPlansMealPlanIDGroceryListItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTMealPlansMealPlanIDGroceryListItemsWithBody request with any body
	POSTMealPlansMealPlanIDGroceryListItemsWithBody(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTMealPlansMealPlanIDGroceryListItems(ctx context.Context, mealPlanID string, body POSTMealPlansMealPlanIDGroceryListItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemID request
	DELETEMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemID(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemID request
	GETMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemID(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDWithBody request with any body
	PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDWithBody(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemID(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, body PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETMealPlansMealPlanIDTasks request
	GETMealPlansMealPlanIDTasks(ctx context.Context, mealPlanID string, params *GETMealPlansMealPlanIDTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTMealPlansMealPlanIDTasksWithBody request with any body
	POSTMealPlansMealPlanIDTasksWithBody(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTMealPlansMealPlanIDTasks(ctx context.Context, mealPlanID string, body POSTMealPlansMealPlanIDTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETMealPlansMealPlanIDTasksMealPlanTaskID request
	GETMealPlansMealPlanIDTasksMealPlanTaskID(ctx context.Context, mealPlanID string, mealPlanTaskID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PATCHMealPlansMealPlanIDTasksMealPlanTaskIDWithBody request with any body
	PATCHMealPlansMealPlanIDTasksMealPlanTaskIDWithBody(ctx context.Context, mealPlanID string, mealPlanTaskID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PATCHMealPlansMealPlanIDTasksMealPlanTaskID(ctx context.Context, mealPlanID string, mealPlanTaskID string, body PATCHMealPlansMealPlanIDTasksMealPlanTaskIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETMeals request
	GETMeals(ctx context.Context, params *GETMealsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTMealsWithBody request with any body
	POSTMealsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTMeals(ctx context.Context, body POSTMealsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETMealsSearch request
	GETMealsSearch(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEMealsMealID request
	DELETEMealsMealID(ctx context.Context, mealID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETMealsMealID request
	GETMealsMealID(ctx context.Context, mealID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETOauth2Clients request
	GETOauth2Clients(ctx context.Context, params *GETOauth2ClientsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTOauth2ClientsWithBody request with any body
	POSTOauth2ClientsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTOauth2Clients(ctx context.Context, body POSTOauth2ClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEOauth2ClientsOauth2ClientID request
	DELETEOauth2ClientsOauth2ClientID(ctx context.Context, oauth2ClientID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETOauth2ClientsOauth2ClientID request
	GETOauth2ClientsOauth2ClientID(ctx context.Context, oauth2ClientID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETRecipes request
	GETRecipes(ctx context.Context, params *GETRecipesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTRecipesWithBody request with any body
	POSTRecipesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTRecipes(ctx context.Context, body POSTRecipesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETRecipesSearch request
	GETRecipesSearch(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETERecipesRecipeID request
	DELETERecipesRecipeID(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETRecipesRecipeID request
	GETRecipesRecipeID(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTRecipesRecipeIDWithBody request with any body
	PUTRecipesRecipeIDWithBody(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTRecipesRecipeID(ctx context.Context, recipeID string, body PUTRecipesRecipeIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTRecipesRecipeIDClone request
	POSTRecipesRecipeIDClone(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETRecipesRecipeIDDag request
	GETRecipesRecipeIDDag(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTRecipesRecipeIDImages request
	POSTRecipesRecipeIDImages(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETRecipesRecipeIDMermaid request
	GETRecipesRecipeIDMermaid(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETRecipesRecipeIDPrepSteps request
	GETRecipesRecipeIDPrepSteps(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETRecipesRecipeIDPrepTasks request
	GETRecipesRecipeIDPrepTasks(ctx context.Context, recipeID string, params *GETRecipesRecipeIDPrepTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTRecipesRecipeIDPrepTasksWithBody request with any body
	POSTRecipesRecipeIDPrepTasksWithBody(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTRecipesRecipeIDPrepTasks(ctx context.Context, recipeID string, body POSTRecipesRecipeIDPrepTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETERecipesRecipeIDPrepTasksRecipePrepTaskID request
	DELETERecipesRecipeIDPrepTasksRecipePrepTaskID(ctx context.Context, recipeID string, recipePrepTaskID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETRecipesRecipeIDPrepTasksRecipePrepTaskID request
	GETRecipesRecipeIDPrepTasksRecipePrepTaskID(ctx context.Context, recipeID string, recipePrepTaskID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDWithBody request with any body
	PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDWithBody(ctx context.Context, recipeID string, recipePrepTaskID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTRecipesRecipeIDPrepTasksRecipePrepTaskID(ctx context.Context, recipeID string, recipePrepTaskID string, body PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETRecipesRecipeIDRatings request
	GETRecipesRecipeIDRatings(ctx context.Context, recipeID string, params *GETRecipesRecipeIDRatingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTRecipesRecipeIDRatingsWithBody request with any body
	POSTRecipesRecipeIDRatingsWithBody(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTRecipesRecipeIDRatings(ctx context.Context, recipeID string, body POSTRecipesRecipeIDRatingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETERecipesRecipeIDRatingsRecipeRatingID request
	DELETERecipesRecipeIDRatingsRecipeRatingID(ctx context.Context, recipeID string, recipeRatingID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETRecipesRecipeIDRatingsRecipeRatingID request
	GETRecipesRecipeIDRatingsRecipeRatingID(ctx context.Context, recipeID string, recipeRatingID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTRecipesRecipeIDRatingsRecipeRatingIDWithBody request with any body
	PUTRecipesRecipeIDRatingsRecipeRatingIDWithBody(ctx context.Context, recipeID string, recipeRatingID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTRecipesRecipeIDRatingsRecipeRatingID(ctx context.Context, recipeID string, recipeRatingID string, body PUTRecipesRecipeIDRatingsRecipeRatingIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETRecipesRecipeIDSteps request
	GETRecipesRecipeIDSteps(ctx context.Context, recipeID string, params *GETRecipesRecipeIDStepsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTRecipesRecipeIDStepsWithBody request with any body
	POSTRecipesRecipeIDStepsWithBody(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTRecipesRecipeIDSteps(ctx context.Context, recipeID string, body POSTRecipesRecipeIDStepsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETERecipesRecipeIDStepsRecipeStepID request
	DELETERecipesRecipeIDStepsRecipeStepID(ctx context.Context, recipeID string, recipeStepID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETRecipesRecipeIDStepsRecipeStepID request
	GETRecipesRecipeIDStepsRecipeStepID(ctx context.Context, recipeID string, recipeStepID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTRecipesRecipeIDStepsRecipeStepIDWithBody request with any body
	PUTRecipesRecipeIDStepsRecipeStepIDWithBody(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTRecipesRecipeIDStepsRecipeStepID(ctx context.Context, recipeID string, recipeStepID string, body PUTRecipesRecipeIDStepsRecipeStepIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETRecipesRecipeIDStepsRecipeStepIDCompletionConditions request
	GETRecipesRecipeIDStepsRecipeStepIDCompletionConditions(ctx context.Context, recipeID string, recipeStepID string, params *GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsWithBody request with any body
	POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsWithBody(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditions(ctx context.Context, recipeID string, recipeStepID string, body POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETERecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionID request
	DELETERecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionID(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionID request
	GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionID(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDWithBody request with any body
	PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDWithBody(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionID(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, body PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTRecipesRecipeIDStepsRecipeStepIDImages request
	POSTRecipesRecipeIDStepsRecipeStepIDImages(ctx context.Context, recipeID string, recipeStepID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETRecipesRecipeIDStepsRecipeStepIDIngredients request
	GETRecipesRecipeIDStepsRecipeStepIDIngredients(ctx context.Context, recipeID string, recipeStepID string, params *GETRecipesRecipeIDStepsRecipeStepIDIngredientsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTRecipesRecipeIDStepsRecipeStepIDIngredientsWithBody request with any body
	POSTRecipesRecipeIDStepsRecipeStepIDIngredientsWithBody(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTRecipesRecipeIDStepsRecipeStepIDIngredients(ctx context.Context, recipeID string, recipeStepID string, body POSTRecipesRecipeIDStepsRecipeStepIDIngredientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETERecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientID request
	DELETERecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientID(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientID request
	GETRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientID(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDWithBody request with any body
	PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDWithBody(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientID(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, body PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETRecipesRecipeIDStepsRecipeStepIDInstruments request
	GETRecipesRecipeIDStepsRecipeStepIDInstruments(ctx context.Context, recipeID string, recipeStepID string, params *GETRecipesRecipeIDStepsRecipeStepIDInstrumentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsWithBody request with any body
	POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsWithBody(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTRecipesRecipeIDStepsRecipeStepIDInstruments(ctx context.Context, recipeID string, recipeStepID string, body POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETERecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentID request
	DELETERecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentID(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentID request
	GETRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentID(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDWithBody request with any body
	PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDWithBody(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentID(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, body PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETRecipesRecipeIDStepsRecipeStepIDProducts request
	GETRecipesRecipeIDStepsRecipeStepIDProducts(ctx context.Context, recipeID string, recipeStepID string, params *GETRecipesRecipeIDStepsRecipeStepIDProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTRecipesRecipeIDStepsRecipeStepIDProductsWithBody request with any body
	POSTRecipesRecipeIDStepsRecipeStepIDProductsWithBody(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTRecipesRecipeIDStepsRecipeStepIDProducts(ctx context.Context, recipeID string, recipeStepID string, body POSTRecipesRecipeIDStepsRecipeStepIDProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETERecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductID request
	DELETERecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductID(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductID request
	GETRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductID(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDWithBody request with any body
	PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDWithBody(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductID(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, body PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETRecipesRecipeIDStepsRecipeStepIDVessels request
	GETRecipesRecipeIDStepsRecipeStepIDVessels(ctx context.Context, recipeID string, recipeStepID string, params *GETRecipesRecipeIDStepsRecipeStepIDVesselsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTRecipesRecipeIDStepsRecipeStepIDVesselsWithBody request with any body
	POSTRecipesRecipeIDStepsRecipeStepIDVesselsWithBody(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTRecipesRecipeIDStepsRecipeStepIDVessels(ctx context.Context, recipeID string, recipeStepID string, body POSTRecipesRecipeIDStepsRecipeStepIDVesselsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETERecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselID request
	DELETERecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselID(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselID request
	GETRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselID(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDWithBody request with any body
	PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDWithBody(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselID(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, body PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETSettings request
	GETSettings(ctx context.Context, params *GETSettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTSettingsWithBody request with any body
	POSTSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTSettings(ctx context.Context, body POSTSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTSettingsConfigurationsWithBody request with any body
	POSTSettingsConfigurationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTSettingsConfigurations(ctx context.Context, body POSTSettingsConfigurationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETSettingsConfigurationsHousehold request
	GETSettingsConfigurationsHousehold(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETSettingsConfigurationsUser request
	GETSettingsConfigurationsUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETSettingsConfigurationsUserServiceSettingConfigurationName request
	GETSettingsConfigurationsUserServiceSettingConfigurationName(ctx context.Context, serviceSettingConfigurationName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETESettingsConfigurationsServiceSettingConfigurationID request
	DELETESettingsConfigurationsServiceSettingConfigurationID(ctx context.Context, serviceSettingConfigurationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTSettingsConfigurationsServiceSettingConfigurationIDWithBody request with any body
	PUTSettingsConfigurationsServiceSettingConfigurationIDWithBody(ctx context.Context, serviceSettingConfigurationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTSettingsConfigurationsServiceSettingConfigurationID(ctx context.Context, serviceSettingConfigurationID string, body PUTSettingsConfigurationsServiceSettingConfigurationIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETSettingsSearch request
	GETSettingsSearch(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETESettingsServiceSettingID request
	DELETESettingsServiceSettingID(ctx context.Context, serviceSettingID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETSettingsServiceSettingID request
	GETSettingsServiceSettingID(ctx context.Context, serviceSettingID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETUserIngredientPreferences request
	GETUserIngredientPreferences(ctx context.Context, params *GETUserIngredientPreferencesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTUserIngredientPreferencesWithBody request with any body
	POSTUserIngredientPreferencesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTUserIngredientPreferences(ctx context.Context, body POSTUserIngredientPreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEUserIngredientPreferencesUserIngredientPreferenceID request
	DELETEUserIngredientPreferencesUserIngredientPreferenceID(ctx context.Context, userIngredientPreferenceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTUserIngredientPreferencesUserIngredientPreferenceIDWithBody request with any body
	PUTUserIngredientPreferencesUserIngredientPreferenceIDWithBody(ctx context.Context, userIngredientPreferenceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTUserIngredientPreferencesUserIngredientPreferenceID(ctx context.Context, userIngredientPreferenceID string, body PUTUserIngredientPreferencesUserIngredientPreferenceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETUserNotifications request
	GETUserNotifications(ctx context.Context, params *GETUserNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTUserNotificationsWithBody request with any body
	POSTUserNotificationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTUserNotifications(ctx context.Context, body POSTUserNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETUserNotificationsUserNotificationID request
	GETUserNotificationsUserNotificationID(ctx context.Context, userNotificationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PATCHUserNotificationsUserNotificationIDWithBody request with any body
	PATCHUserNotificationsUserNotificationIDWithBody(ctx context.Context, userNotificationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PATCHUserNotificationsUserNotificationID(ctx context.Context, userNotificationID string, body PATCHUserNotificationsUserNotificationIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETUsers request
	GETUsers(ctx context.Context, params *GETUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTUsersAvatarUploadWithBody request with any body
	POSTUsersAvatarUploadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTUsersAvatarUpload(ctx context.Context, body POSTUsersAvatarUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTUsersDetailsWithBody request with any body
	PUTUsersDetailsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTUsersDetails(ctx context.Context, body PUTUsersDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTUsersEmailAddressWithBody request with any body
	PUTUsersEmailAddressWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTUsersEmailAddress(ctx context.Context, body PUTUsersEmailAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTUsersEmailAddressVerificationWithBody request with any body
	POSTUsersEmailAddressVerificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTUsersEmailAddressVerification(ctx context.Context, body POSTUsersEmailAddressVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTUsersHouseholdSelectWithBody request with any body
	POSTUsersHouseholdSelectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTUsersHouseholdSelect(ctx context.Context, body POSTUsersHouseholdSelectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTUsersPasswordNewWithBody request with any body
	PUTUsersPasswordNewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTUsersPasswordNew(ctx context.Context, body PUTUsersPasswordNewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTUsersPermissionsCheckWithBody request with any body
	POSTUsersPermissionsCheckWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTUsersPermissionsCheck(ctx context.Context, body POSTUsersPermissionsCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETUsersSearch request
	GETUsersSearch(ctx context.Context, params *GETUsersSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETUsersSelf request
	GETUsersSelf(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTUsersTotpSecretNewWithBody request with any body
	POSTUsersTotpSecretNewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTUsersTotpSecretNew(ctx context.Context, body POSTUsersTotpSecretNewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTUsersUsernameWithBody request with any body
	PUTUsersUsernameWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTUsersUsername(ctx context.Context, body PUTUsersUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEUsersUserID request
	DELETEUsersUserID(ctx context.Context, userID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETUsersUserID request
	GETUsersUserID(ctx context.Context, userID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidIngredientGroups request
	GETValidIngredientGroups(ctx context.Context, params *GETValidIngredientGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTValidIngredientGroupsWithBody request with any body
	POSTValidIngredientGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTValidIngredientGroups(ctx context.Context, body POSTValidIngredientGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidIngredientGroupsSearch request
	GETValidIngredientGroupsSearch(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEValidIngredientGroupsValidIngredientGroupID request
	DELETEValidIngredientGroupsValidIngredientGroupID(ctx context.Context, validIngredientGroupID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidIngredientGroupsValidIngredientGroupID request
	GETValidIngredientGroupsValidIngredientGroupID(ctx context.Context, validIngredientGroupID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTValidIngredientGroupsValidIngredientGroupIDWithBody request with any body
	PUTValidIngredientGroupsValidIngredientGroupIDWithBody(ctx context.Context, validIngredientGroupID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTValidIngredientGroupsValidIngredientGroupID(ctx context.Context, validIngredientGroupID string, body PUTValidIngredientGroupsValidIngredientGroupIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidIngredientMeasurementUnits request
	GETValidIngredientMeasurementUnits(ctx context.Context, params *GETValidIngredientMeasurementUnitsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTValidIngredientMeasurementUnitsWithBody request with any body
	POSTValidIngredientMeasurementUnitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTValidIngredientMeasurementUnits(ctx context.Context, body POSTValidIngredientMeasurementUnitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidIngredientMeasurementUnitsByIngredientValidIngredientID request
	GETValidIngredientMeasurementUnitsByIngredientValidIngredientID(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidIngredientMeasurementUnitsByMeasurementUnitValidMeasurementUnitID request
	GETValidIngredientMeasurementUnitsByMeasurementUnitValidMeasurementUnitID(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEValidIngredientMeasurementUnitsValidIngredientMeasurementUnitID request
	DELETEValidIngredientMeasurementUnitsValidIngredientMeasurementUnitID(ctx context.Context, validIngredientMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidIngredientMeasurementUnitsValidIngredientMeasurementUnitID request
	GETValidIngredientMeasurementUnitsValidIngredientMeasurementUnitID(ctx context.Context, validIngredientMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDWithBody request with any body
	PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDWithBody(ctx context.Context, validIngredientMeasurementUnitID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitID(ctx context.Context, validIngredientMeasurementUnitID string, body PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidIngredientPreparations request
	GETValidIngredientPreparations(ctx context.Context, params *GETValidIngredientPreparationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTValidIngredientPreparationsWithBody request with any body
	POSTValidIngredientPreparationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTValidIngredientPreparations(ctx context.Context, body POSTValidIngredientPreparationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidIngredientPreparationsByIngredientValidIngredientID request
	GETValidIngredientPreparationsByIngredientValidIngredientID(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidIngredientPreparationsByPreparationValidPreparationID request
	GETValidIngredientPreparationsByPreparationValidPreparationID(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEValidIngredientPreparationsValidIngredientPreparationID request
	DELETEValidIngredientPreparationsValidIngredientPreparationID(ctx context.Context, validIngredientPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidIngredientPreparationsValidIngredientPreparationID request
	GETValidIngredientPreparationsValidIngredientPreparationID(ctx context.Context, validIngredientPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTValidIngredientPreparationsValidIngredientPreparationIDWithBody request with any body
	PUTValidIngredientPreparationsValidIngredientPreparationIDWithBody(ctx context.Context, validIngredientPreparationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTValidIngredientPreparationsValidIngredientPreparationID(ctx context.Context, validIngredientPreparationID string, body PUTValidIngredientPreparationsValidIngredientPreparationIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidIngredientStateIngredients request
	GETValidIngredientStateIngredients(ctx context.Context, params *GETValidIngredientStateIngredientsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTValidIngredientStateIngredientsWithBody request with any body
	POSTValidIngredientStateIngredientsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTValidIngredientStateIngredients(ctx context.Context, body POSTValidIngredientStateIngredientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidIngredientStateIngredientsByIngredientValidIngredientID request
	GETValidIngredientStateIngredientsByIngredientValidIngredientID(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidIngredientStateIngredientsByIngredientStateValidIngredientStateID request
	GETValidIngredientStateIngredientsByIngredientStateValidIngredientStateID(ctx context.Context, validIngredientStateID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEValidIngredientStateIngredientsValidIngredientStateIngredientID request
	DELETEValidIngredientStateIngredientsValidIngredientStateIngredientID(ctx context.Context, validIngredientStateIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidIngredientStateIngredientsValidIngredientStateIngredientID request
	GETValidIngredientStateIngredientsValidIngredientStateIngredientID(ctx context.Context, validIngredientStateIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDWithBody request with any body
	PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDWithBody(ctx context.Context, validIngredientStateIngredientID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTValidIngredientStateIngredientsValidIngredientStateIngredientID(ctx context.Context, validIngredientStateIngredientID string, body PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidIngredientStates request
	GETValidIngredientStates(ctx context.Context, params *GETValidIngredientStatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTValidIngredientStatesWithBody request with any body
	POSTValidIngredientStatesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTValidIngredientStates(ctx context.Context, body POSTValidIngredientStatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidIngredientStatesSearch request
	GETValidIngredientStatesSearch(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEValidIngredientStatesValidIngredientStateID request
	DELETEValidIngredientStatesValidIngredientStateID(ctx context.Context, validIngredientStateID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidIngredientStatesValidIngredientStateID request
	GETValidIngredientStatesValidIngredientStateID(ctx context.Context, validIngredientStateID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTValidIngredientStatesValidIngredientStateIDWithBody request with any body
	PUTValidIngredientStatesValidIngredientStateIDWithBody(ctx context.Context, validIngredientStateID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTValidIngredientStatesValidIngredientStateID(ctx context.Context, validIngredientStateID string, body PUTValidIngredientStatesValidIngredientStateIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidIngredients request
	GETValidIngredients(ctx context.Context, params *GETValidIngredientsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTValidIngredientsWithBody request with any body
	POSTValidIngredientsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTValidIngredients(ctx context.Context, body POSTValidIngredientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidIngredientsByPreparationValidPreparationID request
	GETValidIngredientsByPreparationValidPreparationID(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidIngredientsRandom request
	GETValidIngredientsRandom(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidIngredientsSearch request
	GETValidIngredientsSearch(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEValidIngredientsValidIngredientID request
	DELETEValidIngredientsValidIngredientID(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidIngredientsValidIngredientID request
	GETValidIngredientsValidIngredientID(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTValidIngredientsValidIngredientIDWithBody request with any body
	PUTValidIngredientsValidIngredientIDWithBody(ctx context.Context, validIngredientID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTValidIngredientsValidIngredientID(ctx context.Context, validIngredientID string, body PUTValidIngredientsValidIngredientIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidInstruments request
	GETValidInstruments(ctx context.Context, params *GETValidInstrumentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTValidInstrumentsWithBody request with any body
	POSTValidInstrumentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTValidInstruments(ctx context.Context, body POSTValidInstrumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidInstrumentsRandom request
	GETValidInstrumentsRandom(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidInstrumentsSearch request
	GETValidInstrumentsSearch(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEValidInstrumentsValidInstrumentID request
	DELETEValidInstrumentsValidInstrumentID(ctx context.Context, validInstrumentID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidInstrumentsValidInstrumentID request
	GETValidInstrumentsValidInstrumentID(ctx context.Context, validInstrumentID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTValidInstrumentsValidInstrumentIDWithBody request with any body
	PUTValidInstrumentsValidInstrumentIDWithBody(ctx context.Context, validInstrumentID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTValidInstrumentsValidInstrumentID(ctx context.Context, validInstrumentID string, body PUTValidInstrumentsValidInstrumentIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTValidMeasurementConversionsWithBody request with any body
	POSTValidMeasurementConversionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTValidMeasurementConversions(ctx context.Context, body POSTValidMeasurementConversionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidMeasurementConversionsFromUnitValidMeasurementUnitID request
	GETValidMeasurementConversionsFromUnitValidMeasurementUnitID(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidMeasurementConversionsToUnitValidMeasurementUnitID request
	GETValidMeasurementConversionsToUnitValidMeasurementUnitID(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEValidMeasurementConversionsValidMeasurementUnitConversionID request
	DELETEValidMeasurementConversionsValidMeasurementUnitConversionID(ctx context.Context, validMeasurementUnitConversionID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidMeasurementConversionsValidMeasurementUnitConversionID request
	GETValidMeasurementConversionsValidMeasurementUnitConversionID(ctx context.Context, validMeasurementUnitConversionID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTValidMeasurementConversionsValidMeasurementUnitConversionIDWithBody request with any body
	PUTValidMeasurementConversionsValidMeasurementUnitConversionIDWithBody(ctx context.Context, validMeasurementUnitConversionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTValidMeasurementConversionsValidMeasurementUnitConversionID(ctx context.Context, validMeasurementUnitConversionID string, body PUTValidMeasurementConversionsValidMeasurementUnitConversionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidMeasurementUnits request
	GETValidMeasurementUnits(ctx context.Context, params *GETValidMeasurementUnitsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTValidMeasurementUnitsWithBody request with any body
	POSTValidMeasurementUnitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTValidMeasurementUnits(ctx context.Context, body POSTValidMeasurementUnitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidMeasurementUnitsByIngredientValidIngredientID request
	GETValidMeasurementUnitsByIngredientValidIngredientID(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidMeasurementUnitsSearch request
	GETValidMeasurementUnitsSearch(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEValidMeasurementUnitsValidMeasurementUnitID request
	DELETEValidMeasurementUnitsValidMeasurementUnitID(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidMeasurementUnitsValidMeasurementUnitID request
	GETValidMeasurementUnitsValidMeasurementUnitID(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTValidMeasurementUnitsValidMeasurementUnitIDWithBody request with any body
	PUTValidMeasurementUnitsValidMeasurementUnitIDWithBody(ctx context.Context, validMeasurementUnitID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTValidMeasurementUnitsValidMeasurementUnitID(ctx context.Context, validMeasurementUnitID string, body PUTValidMeasurementUnitsValidMeasurementUnitIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidPreparationInstruments request
	GETValidPreparationInstruments(ctx context.Context, params *GETValidPreparationInstrumentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTValidPreparationInstrumentsWithBody request with any body
	POSTValidPreparationInstrumentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTValidPreparationInstruments(ctx context.Context, body POSTValidPreparationInstrumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidPreparationInstrumentsByInstrumentValidInstrumentID request
	GETValidPreparationInstrumentsByInstrumentValidInstrumentID(ctx context.Context, validInstrumentID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidPreparationInstrumentsByPreparationValidPreparationID request
	GETValidPreparationInstrumentsByPreparationValidPreparationID(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEValidPreparationInstrumentsValidPreparationVesselID request
	DELETEValidPreparationInstrumentsValidPreparationVesselID(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidPreparationInstrumentsValidPreparationVesselID request
	GETValidPreparationInstrumentsValidPreparationVesselID(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTValidPreparationInstrumentsValidPreparationVesselIDWithBody request with any body
	PUTValidPreparationInstrumentsValidPreparationVesselIDWithBody(ctx context.Context, validPreparationVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTValidPreparationInstrumentsValidPreparationVesselID(ctx context.Context, validPreparationVesselID string, body PUTValidPreparationInstrumentsValidPreparationVesselIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidPreparationVessels request
	GETValidPreparationVessels(ctx context.Context, params *GETValidPreparationVesselsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTValidPreparationVesselsWithBody request with any body
	POSTValidPreparationVesselsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTValidPreparationVessels(ctx context.Context, body POSTValidPreparationVesselsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidPreparationVesselsByPreparationValidPreparationID request
	GETValidPreparationVesselsByPreparationValidPreparationID(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidPreparationVesselsByVesselValidVesselID request
	GETValidPreparationVesselsByVesselValidVesselID(ctx context.Context, validVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEValidPreparationVesselsValidPreparationVesselID request
	DELETEValidPreparationVesselsValidPreparationVesselID(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidPreparationVesselsValidPreparationVesselID request
	GETValidPreparationVesselsValidPreparationVesselID(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTValidPreparationVesselsValidPreparationVesselIDWithBody request with any body
	PUTValidPreparationVesselsValidPreparationVesselIDWithBody(ctx context.Context, validPreparationVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTValidPreparationVesselsValidPreparationVesselID(ctx context.Context, validPreparationVesselID string, body PUTValidPreparationVesselsValidPreparationVesselIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidPreparations request
	GETValidPreparations(ctx context.Context, params *GETValidPreparationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTValidPreparationsWithBody request with any body
	POSTValidPreparationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTValidPreparations(ctx context.Context, body POSTValidPreparationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidPreparationsRandom request
	GETValidPreparationsRandom(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidPreparationsSearch request
	GETValidPreparationsSearch(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEValidPreparationsValidPreparationID request
	DELETEValidPreparationsValidPreparationID(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidPreparationsValidPreparationID request
	GETValidPreparationsValidPreparationID(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTValidPreparationsValidPreparationIDWithBody request with any body
	PUTValidPreparationsValidPreparationIDWithBody(ctx context.Context, validPreparationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTValidPreparationsValidPreparationID(ctx context.Context, validPreparationID string, body PUTValidPreparationsValidPreparationIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidVessels request
	GETValidVessels(ctx context.Context, params *GETValidVesselsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTValidVesselsWithBody request with any body
	POSTValidVesselsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTValidVessels(ctx context.Context, body POSTValidVesselsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidVesselsRandom request
	GETValidVesselsRandom(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidVesselsSearch request
	GETValidVesselsSearch(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEValidVesselsValidVesselID request
	DELETEValidVesselsValidVesselID(ctx context.Context, validVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETValidVesselsValidVesselID request
	GETValidVesselsValidVesselID(ctx context.Context, validVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PUTValidVesselsValidVesselIDWithBody request with any body
	PUTValidVesselsValidVesselIDWithBody(ctx context.Context, validVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PUTValidVesselsValidVesselID(ctx context.Context, validVesselID string, body PUTValidVesselsValidVesselIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETWebhooks request
	GETWebhooks(ctx context.Context, params *GETWebhooksParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTWebhooksWithBody request with any body
	POSTWebhooksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTWebhooks(ctx context.Context, body POSTWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEWebhooksWebhookID request
	DELETEWebhooksWebhookID(ctx context.Context, webhookID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETWebhooksWebhookID request
	GETWebhooksWebhookID(ctx context.Context, webhookID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTWebhooksWebhookIDTriggerEventsWithBody request with any body
	POSTWebhooksWebhookIDTriggerEventsWithBody(ctx context.Context, webhookID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTWebhooksWebhookIDTriggerEvents(ctx context.Context, webhookID string, body POSTWebhooksWebhookIDTriggerEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DELETEWebhooksWebhookIDTriggerEventsWebhookTriggerEventID request
	DELETEWebhooksWebhookIDTriggerEventsWebhookTriggerEventID(ctx context.Context, webhookID string, webhookTriggerEventID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTWorkersFinalizeMealPlansWithBody request with any body
	POSTWorkersFinalizeMealPlansWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTWorkersFinalizeMealPlans(ctx context.Context, body POSTWorkersFinalizeMealPlansJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTWorkersMealPlanGroceryListInit request
	POSTWorkersMealPlanGroceryListInit(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTWorkersMealPlanTasks request
	POSTWorkersMealPlanTasks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETAuthStatus request
	GETAuthStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GETOauth2Authorize request
	GETOauth2Authorize(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTOauth2Token request
	POSTOauth2Token(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTUsersWithBody request with any body
	POSTUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTUsers(ctx context.Context, body POSTUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTUsersEmailAddressVerifyWithBody request with any body
	POSTUsersEmailAddressVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTUsersEmailAddressVerify(ctx context.Context, body POSTUsersEmailAddressVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTUsersLoginWithBody request with any body
	POSTUsersLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTUsersLogin(ctx context.Context, body POSTUsersLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTUsersLoginAdminWithBody request with any body
	POSTUsersLoginAdminWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTUsersLoginAdmin(ctx context.Context, body POSTUsersLoginAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTUsersLogout request
	POSTUsersLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTUsersPasswordResetWithBody request with any body
	POSTUsersPasswordResetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTUsersPasswordReset(ctx context.Context, body POSTUsersPasswordResetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTUsersPasswordResetRedeemWithBody request with any body
	POSTUsersPasswordResetRedeemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTUsersPasswordResetRedeem(ctx context.Context, body POSTUsersPasswordResetRedeemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTUsersTotpSecretVerifyWithBody request with any body
	POSTUsersTotpSecretVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTUsersTotpSecretVerify(ctx context.Context, body POSTUsersTotpSecretVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// POSTUsersUsernameReminderWithBody request with any body
	POSTUsersUsernameReminderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	POSTUsersUsernameReminder(ctx context.Context, body POSTUsersUsernameReminderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) POSTAdminCycleCookieSecret(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTAdminCycleCookieSecretRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTAdminUsersStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTAdminUsersStatusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTAdminUsersStatus(ctx context.Context, body POSTAdminUsersStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTAdminUsersStatusRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETAuditLogEntriesForHousehold(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETAuditLogEntriesForHouseholdRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETAuditLogEntriesForUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETAuditLogEntriesForUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETAuditLogEntriesAuditLogEntryID(ctx context.Context, auditLogEntryID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETAuditLogEntriesAuditLogEntryIDRequest(c.Server, auditLogEntryID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETHouseholdInvitationsReceived(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETHouseholdInvitationsReceivedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETHouseholdInvitationsSent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETHouseholdInvitationsSentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETHouseholdInvitationsHouseholdInvitationID(ctx context.Context, householdInvitationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETHouseholdInvitationsHouseholdInvitationIDRequest(c.Server, householdInvitationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTHouseholdInvitationsHouseholdInvitationIDAcceptWithBody(ctx context.Context, householdInvitationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTHouseholdInvitationsHouseholdInvitationIDAcceptRequestWithBody(c.Server, householdInvitationID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTHouseholdInvitationsHouseholdInvitationIDAccept(ctx context.Context, householdInvitationID string, body PUTHouseholdInvitationsHouseholdInvitationIDAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTHouseholdInvitationsHouseholdInvitationIDAcceptRequest(c.Server, householdInvitationID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTHouseholdInvitationsHouseholdInvitationIDCancelWithBody(ctx context.Context, householdInvitationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTHouseholdInvitationsHouseholdInvitationIDCancelRequestWithBody(c.Server, householdInvitationID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTHouseholdInvitationsHouseholdInvitationIDCancel(ctx context.Context, householdInvitationID string, body PUTHouseholdInvitationsHouseholdInvitationIDCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTHouseholdInvitationsHouseholdInvitationIDCancelRequest(c.Server, householdInvitationID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTHouseholdInvitationsHouseholdInvitationIDRejectWithBody(ctx context.Context, householdInvitationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTHouseholdInvitationsHouseholdInvitationIDRejectRequestWithBody(c.Server, householdInvitationID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTHouseholdInvitationsHouseholdInvitationIDReject(ctx context.Context, householdInvitationID string, body PUTHouseholdInvitationsHouseholdInvitationIDRejectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTHouseholdInvitationsHouseholdInvitationIDRejectRequest(c.Server, householdInvitationID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETHouseholds(ctx context.Context, params *GETHouseholdsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETHouseholdsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTHouseholdsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTHouseholdsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTHouseholds(ctx context.Context, body POSTHouseholdsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTHouseholdsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETHouseholdsCurrent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETHouseholdsCurrentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETHouseholdsInstruments(ctx context.Context, params *GETHouseholdsInstrumentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETHouseholdsInstrumentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTHouseholdsInstrumentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTHouseholdsInstrumentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTHouseholdsInstruments(ctx context.Context, body POSTHouseholdsInstrumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTHouseholdsInstrumentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEHouseholdsInstrumentsHouseholdInstrumentOwnershipID(ctx context.Context, householdInstrumentOwnershipID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEHouseholdsInstrumentsHouseholdInstrumentOwnershipIDRequest(c.Server, householdInstrumentOwnershipID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETHouseholdsInstrumentsHouseholdInstrumentOwnershipID(ctx context.Context, householdInstrumentOwnershipID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETHouseholdsInstrumentsHouseholdInstrumentOwnershipIDRequest(c.Server, householdInstrumentOwnershipID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDWithBody(ctx context.Context, householdInstrumentOwnershipID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDRequestWithBody(c.Server, householdInstrumentOwnershipID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipID(ctx context.Context, householdInstrumentOwnershipID string, body PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDRequest(c.Server, householdInstrumentOwnershipID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEHouseholdsHouseholdID(ctx context.Context, householdID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEHouseholdsHouseholdIDRequest(c.Server, householdID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETHouseholdsHouseholdID(ctx context.Context, householdID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETHouseholdsHouseholdIDRequest(c.Server, householdID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTHouseholdsHouseholdIDWithBody(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTHouseholdsHouseholdIDRequestWithBody(c.Server, householdID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTHouseholdsHouseholdID(ctx context.Context, householdID string, body PUTHouseholdsHouseholdIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTHouseholdsHouseholdIDRequest(c.Server, householdID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTHouseholdsHouseholdIDDefault(ctx context.Context, householdID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTHouseholdsHouseholdIDDefaultRequest(c.Server, householdID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTHouseholdsHouseholdIDInvitationsWithBody(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTHouseholdsHouseholdIDInvitationsRequestWithBody(c.Server, householdID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTHouseholdsHouseholdIDInvitations(ctx context.Context, householdID string, body POSTHouseholdsHouseholdIDInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTHouseholdsHouseholdIDInvitationsRequest(c.Server, householdID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETHouseholdsHouseholdIDInvitationsHouseholdInvitationID(ctx context.Context, householdID string, householdInvitationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETHouseholdsHouseholdIDInvitationsHouseholdInvitationIDRequest(c.Server, householdID, householdInvitationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTHouseholdsHouseholdIDInviteWithBody(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTHouseholdsHouseholdIDInviteRequestWithBody(c.Server, householdID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTHouseholdsHouseholdIDInvite(ctx context.Context, householdID string, body POSTHouseholdsHouseholdIDInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTHouseholdsHouseholdIDInviteRequest(c.Server, householdID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEHouseholdsHouseholdIDMembersUserID(ctx context.Context, householdID string, userID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEHouseholdsHouseholdIDMembersUserIDRequest(c.Server, householdID, userID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PATCHHouseholdsHouseholdIDMembersUserIDPermissionsWithBody(ctx context.Context, householdID string, userID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPATCHHouseholdsHouseholdIDMembersUserIDPermissionsRequestWithBody(c.Server, householdID, userID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PATCHHouseholdsHouseholdIDMembersUserIDPermissions(ctx context.Context, householdID string, userID string, body PATCHHouseholdsHouseholdIDMembersUserIDPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPATCHHouseholdsHouseholdIDMembersUserIDPermissionsRequest(c.Server, householdID, userID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTHouseholdsHouseholdIDTransferWithBody(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTHouseholdsHouseholdIDTransferRequestWithBody(c.Server, householdID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTHouseholdsHouseholdIDTransfer(ctx context.Context, householdID string, body POSTHouseholdsHouseholdIDTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTHouseholdsHouseholdIDTransferRequest(c.Server, householdID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETMealPlans(ctx context.Context, params *GETMealPlansParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETMealPlansRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTMealPlansWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTMealPlansRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTMealPlans(ctx context.Context, body POSTMealPlansJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTMealPlansRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEMealPlansMealPlanID(ctx context.Context, mealPlanID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEMealPlansMealPlanIDRequest(c.Server, mealPlanID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETMealPlansMealPlanID(ctx context.Context, mealPlanID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETMealPlansMealPlanIDRequest(c.Server, mealPlanID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTMealPlansMealPlanIDWithBody(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTMealPlansMealPlanIDRequestWithBody(c.Server, mealPlanID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTMealPlansMealPlanID(ctx context.Context, mealPlanID string, body PUTMealPlansMealPlanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTMealPlansMealPlanIDRequest(c.Server, mealPlanID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETMealPlansMealPlanIDEvents(ctx context.Context, mealPlanID string, params *GETMealPlansMealPlanIDEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETMealPlansMealPlanIDEventsRequest(c.Server, mealPlanID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTMealPlansMealPlanIDEventsWithBody(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTMealPlansMealPlanIDEventsRequestWithBody(c.Server, mealPlanID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTMealPlansMealPlanIDEvents(ctx context.Context, mealPlanID string, body POSTMealPlansMealPlanIDEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTMealPlansMealPlanIDEventsRequest(c.Server, mealPlanID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEMealPlansMealPlanIDEventsMealPlanEventID(ctx context.Context, mealPlanID string, mealPlanEventID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEMealPlansMealPlanIDEventsMealPlanEventIDRequest(c.Server, mealPlanID, mealPlanEventID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETMealPlansMealPlanIDEventsMealPlanEventID(ctx context.Context, mealPlanID string, mealPlanEventID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETMealPlansMealPlanIDEventsMealPlanEventIDRequest(c.Server, mealPlanID, mealPlanEventID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTMealPlansMealPlanIDEventsMealPlanEventIDWithBody(ctx context.Context, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTMealPlansMealPlanIDEventsMealPlanEventIDRequestWithBody(c.Server, mealPlanID, mealPlanEventID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTMealPlansMealPlanIDEventsMealPlanEventID(ctx context.Context, mealPlanID string, mealPlanEventID string, body PUTMealPlansMealPlanIDEventsMealPlanEventIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTMealPlansMealPlanIDEventsMealPlanEventIDRequest(c.Server, mealPlanID, mealPlanEventID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETMealPlansMealPlanIDEventsMealPlanEventIDOptions(ctx context.Context, mealPlanID string, mealPlanEventID string, params *GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETMealPlansMealPlanIDEventsMealPlanEventIDOptionsRequest(c.Server, mealPlanID, mealPlanEventID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsWithBody(ctx context.Context, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsRequestWithBody(c.Server, mealPlanID, mealPlanEventID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTMealPlansMealPlanIDEventsMealPlanEventIDOptions(ctx context.Context, mealPlanID string, mealPlanEventID string, body POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsRequest(c.Server, mealPlanID, mealPlanEventID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionID(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDRequest(c.Server, mealPlanID, mealPlanEventID, mealPlanOptionID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionID(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDRequest(c.Server, mealPlanID, mealPlanEventID, mealPlanOptionID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDWithBody(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDRequestWithBody(c.Server, mealPlanID, mealPlanEventID, mealPlanOptionID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionID(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, body PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDRequest(c.Server, mealPlanID, mealPlanEventID, mealPlanOptionID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotes(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, params *GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesRequest(c.Server, mealPlanID, mealPlanEventID, mealPlanOptionID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteID(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDRequest(c.Server, mealPlanID, mealPlanEventID, mealPlanOptionID, mealPlanOptionVoteID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteID(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDRequest(c.Server, mealPlanID, mealPlanEventID, mealPlanOptionID, mealPlanOptionVoteID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDWithBody(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDRequestWithBody(c.Server, mealPlanID, mealPlanEventID, mealPlanOptionID, mealPlanOptionVoteID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteID(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, body PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDRequest(c.Server, mealPlanID, mealPlanEventID, mealPlanOptionID, mealPlanOptionVoteID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteWithBody(ctx context.Context, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTMealPlansMealPlanIDEventsMealPlanEventIDVoteRequestWithBody(c.Server, mealPlanID, mealPlanEventID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTMealPlansMealPlanIDEventsMealPlanEventIDVote(ctx context.Context, mealPlanID string, mealPlanEventID string, body POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTMealPlansMealPlanIDEventsMealPlanEventIDVoteRequest(c.Server, mealPlanID, mealPlanEventID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTMealPlansMealPlanIDFinalize(ctx context.Context, mealPlanID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTMealPlansMealPlanIDFinalizeRequest(c.Server, mealPlanID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETMealPlansMealPlanIDGroceryListItems(ctx context.Context, mealPlanID string, params *GETMealPlansMealPlanIDGroceryListItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETMealPlansMealPlanIDGroceryListItemsRequest(c.Server, mealPlanID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTMealPlansMealPlanIDGroceryListItemsWithBody(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTMealPlansMealPlanIDGroceryListItemsRequestWithBody(c.Server, mealPlanID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTMealPlansMealPlanIDGroceryListItems(ctx context.Context, mealPlanID string, body POSTMealPlansMealPlanIDGroceryListItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTMealPlansMealPlanIDGroceryListItemsRequest(c.Server, mealPlanID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemID(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDRequest(c.Server, mealPlanID, mealPlanGroceryListItemID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemID(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDRequest(c.Server, mealPlanID, mealPlanGroceryListItemID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDWithBody(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDRequestWithBody(c.Server, mealPlanID, mealPlanGroceryListItemID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemID(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, body PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDRequest(c.Server, mealPlanID, mealPlanGroceryListItemID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETMealPlansMealPlanIDTasks(ctx context.Context, mealPlanID string, params *GETMealPlansMealPlanIDTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETMealPlansMealPlanIDTasksRequest(c.Server, mealPlanID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTMealPlansMealPlanIDTasksWithBody(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTMealPlansMealPlanIDTasksRequestWithBody(c.Server, mealPlanID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTMealPlansMealPlanIDTasks(ctx context.Context, mealPlanID string, body POSTMealPlansMealPlanIDTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTMealPlansMealPlanIDTasksRequest(c.Server, mealPlanID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETMealPlansMealPlanIDTasksMealPlanTaskID(ctx context.Context, mealPlanID string, mealPlanTaskID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETMealPlansMealPlanIDTasksMealPlanTaskIDRequest(c.Server, mealPlanID, mealPlanTaskID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PATCHMealPlansMealPlanIDTasksMealPlanTaskIDWithBody(ctx context.Context, mealPlanID string, mealPlanTaskID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPATCHMealPlansMealPlanIDTasksMealPlanTaskIDRequestWithBody(c.Server, mealPlanID, mealPlanTaskID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PATCHMealPlansMealPlanIDTasksMealPlanTaskID(ctx context.Context, mealPlanID string, mealPlanTaskID string, body PATCHMealPlansMealPlanIDTasksMealPlanTaskIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPATCHMealPlansMealPlanIDTasksMealPlanTaskIDRequest(c.Server, mealPlanID, mealPlanTaskID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETMeals(ctx context.Context, params *GETMealsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETMealsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTMealsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTMealsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTMeals(ctx context.Context, body POSTMealsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTMealsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETMealsSearch(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETMealsSearchRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEMealsMealID(ctx context.Context, mealID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEMealsMealIDRequest(c.Server, mealID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETMealsMealID(ctx context.Context, mealID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETMealsMealIDRequest(c.Server, mealID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETOauth2Clients(ctx context.Context, params *GETOauth2ClientsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETOauth2ClientsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTOauth2ClientsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTOauth2ClientsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTOauth2Clients(ctx context.Context, body POSTOauth2ClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTOauth2ClientsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEOauth2ClientsOauth2ClientID(ctx context.Context, oauth2ClientID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEOauth2ClientsOauth2ClientIDRequest(c.Server, oauth2ClientID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETOauth2ClientsOauth2ClientID(ctx context.Context, oauth2ClientID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETOauth2ClientsOauth2ClientIDRequest(c.Server, oauth2ClientID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETRecipes(ctx context.Context, params *GETRecipesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETRecipesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTRecipesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTRecipesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTRecipes(ctx context.Context, body POSTRecipesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTRecipesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETRecipesSearch(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETRecipesSearchRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETERecipesRecipeID(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETERecipesRecipeIDRequest(c.Server, recipeID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETRecipesRecipeID(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETRecipesRecipeIDRequest(c.Server, recipeID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTRecipesRecipeIDWithBody(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTRecipesRecipeIDRequestWithBody(c.Server, recipeID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTRecipesRecipeID(ctx context.Context, recipeID string, body PUTRecipesRecipeIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTRecipesRecipeIDRequest(c.Server, recipeID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTRecipesRecipeIDClone(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTRecipesRecipeIDCloneRequest(c.Server, recipeID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETRecipesRecipeIDDag(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETRecipesRecipeIDDagRequest(c.Server, recipeID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTRecipesRecipeIDImages(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTRecipesRecipeIDImagesRequest(c.Server, recipeID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETRecipesRecipeIDMermaid(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETRecipesRecipeIDMermaidRequest(c.Server, recipeID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETRecipesRecipeIDPrepSteps(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETRecipesRecipeIDPrepStepsRequest(c.Server, recipeID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETRecipesRecipeIDPrepTasks(ctx context.Context, recipeID string, params *GETRecipesRecipeIDPrepTasksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETRecipesRecipeIDPrepTasksRequest(c.Server, recipeID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTRecipesRecipeIDPrepTasksWithBody(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTRecipesRecipeIDPrepTasksRequestWithBody(c.Server, recipeID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTRecipesRecipeIDPrepTasks(ctx context.Context, recipeID string, body POSTRecipesRecipeIDPrepTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTRecipesRecipeIDPrepTasksRequest(c.Server, recipeID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETERecipesRecipeIDPrepTasksRecipePrepTaskID(ctx context.Context, recipeID string, recipePrepTaskID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETERecipesRecipeIDPrepTasksRecipePrepTaskIDRequest(c.Server, recipeID, recipePrepTaskID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETRecipesRecipeIDPrepTasksRecipePrepTaskID(ctx context.Context, recipeID string, recipePrepTaskID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETRecipesRecipeIDPrepTasksRecipePrepTaskIDRequest(c.Server, recipeID, recipePrepTaskID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDWithBody(ctx context.Context, recipeID string, recipePrepTaskID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTRecipesRecipeIDPrepTasksRecipePrepTaskIDRequestWithBody(c.Server, recipeID, recipePrepTaskID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTRecipesRecipeIDPrepTasksRecipePrepTaskID(ctx context.Context, recipeID string, recipePrepTaskID string, body PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTRecipesRecipeIDPrepTasksRecipePrepTaskIDRequest(c.Server, recipeID, recipePrepTaskID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETRecipesRecipeIDRatings(ctx context.Context, recipeID string, params *GETRecipesRecipeIDRatingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETRecipesRecipeIDRatingsRequest(c.Server, recipeID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTRecipesRecipeIDRatingsWithBody(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTRecipesRecipeIDRatingsRequestWithBody(c.Server, recipeID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTRecipesRecipeIDRatings(ctx context.Context, recipeID string, body POSTRecipesRecipeIDRatingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTRecipesRecipeIDRatingsRequest(c.Server, recipeID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETERecipesRecipeIDRatingsRecipeRatingID(ctx context.Context, recipeID string, recipeRatingID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETERecipesRecipeIDRatingsRecipeRatingIDRequest(c.Server, recipeID, recipeRatingID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETRecipesRecipeIDRatingsRecipeRatingID(ctx context.Context, recipeID string, recipeRatingID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETRecipesRecipeIDRatingsRecipeRatingIDRequest(c.Server, recipeID, recipeRatingID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTRecipesRecipeIDRatingsRecipeRatingIDWithBody(ctx context.Context, recipeID string, recipeRatingID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTRecipesRecipeIDRatingsRecipeRatingIDRequestWithBody(c.Server, recipeID, recipeRatingID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTRecipesRecipeIDRatingsRecipeRatingID(ctx context.Context, recipeID string, recipeRatingID string, body PUTRecipesRecipeIDRatingsRecipeRatingIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTRecipesRecipeIDRatingsRecipeRatingIDRequest(c.Server, recipeID, recipeRatingID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETRecipesRecipeIDSteps(ctx context.Context, recipeID string, params *GETRecipesRecipeIDStepsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETRecipesRecipeIDStepsRequest(c.Server, recipeID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTRecipesRecipeIDStepsWithBody(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTRecipesRecipeIDStepsRequestWithBody(c.Server, recipeID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTRecipesRecipeIDSteps(ctx context.Context, recipeID string, body POSTRecipesRecipeIDStepsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTRecipesRecipeIDStepsRequest(c.Server, recipeID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETERecipesRecipeIDStepsRecipeStepID(ctx context.Context, recipeID string, recipeStepID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETERecipesRecipeIDStepsRecipeStepIDRequest(c.Server, recipeID, recipeStepID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETRecipesRecipeIDStepsRecipeStepID(ctx context.Context, recipeID string, recipeStepID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETRecipesRecipeIDStepsRecipeStepIDRequest(c.Server, recipeID, recipeStepID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTRecipesRecipeIDStepsRecipeStepIDWithBody(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTRecipesRecipeIDStepsRecipeStepIDRequestWithBody(c.Server, recipeID, recipeStepID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTRecipesRecipeIDStepsRecipeStepID(ctx context.Context, recipeID string, recipeStepID string, body PUTRecipesRecipeIDStepsRecipeStepIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTRecipesRecipeIDStepsRecipeStepIDRequest(c.Server, recipeID, recipeStepID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETRecipesRecipeIDStepsRecipeStepIDCompletionConditions(ctx context.Context, recipeID string, recipeStepID string, params *GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRequest(c.Server, recipeID, recipeStepID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsWithBody(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRequestWithBody(c.Server, recipeID, recipeStepID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditions(ctx context.Context, recipeID string, recipeStepID string, body POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRequest(c.Server, recipeID, recipeStepID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETERecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionID(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETERecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDRequest(c.Server, recipeID, recipeStepID, recipeStepCompletionConditionID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionID(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDRequest(c.Server, recipeID, recipeStepID, recipeStepCompletionConditionID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDWithBody(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDRequestWithBody(c.Server, recipeID, recipeStepID, recipeStepCompletionConditionID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionID(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, body PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDRequest(c.Server, recipeID, recipeStepID, recipeStepCompletionConditionID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTRecipesRecipeIDStepsRecipeStepIDImages(ctx context.Context, recipeID string, recipeStepID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTRecipesRecipeIDStepsRecipeStepIDImagesRequest(c.Server, recipeID, recipeStepID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETRecipesRecipeIDStepsRecipeStepIDIngredients(ctx context.Context, recipeID string, recipeStepID string, params *GETRecipesRecipeIDStepsRecipeStepIDIngredientsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETRecipesRecipeIDStepsRecipeStepIDIngredientsRequest(c.Server, recipeID, recipeStepID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTRecipesRecipeIDStepsRecipeStepIDIngredientsWithBody(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTRecipesRecipeIDStepsRecipeStepIDIngredientsRequestWithBody(c.Server, recipeID, recipeStepID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTRecipesRecipeIDStepsRecipeStepIDIngredients(ctx context.Context, recipeID string, recipeStepID string, body POSTRecipesRecipeIDStepsRecipeStepIDIngredientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTRecipesRecipeIDStepsRecipeStepIDIngredientsRequest(c.Server, recipeID, recipeStepID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETERecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientID(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETERecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDRequest(c.Server, recipeID, recipeStepID, recipeStepIngredientID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientID(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDRequest(c.Server, recipeID, recipeStepID, recipeStepIngredientID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDWithBody(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDRequestWithBody(c.Server, recipeID, recipeStepID, recipeStepIngredientID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientID(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, body PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDRequest(c.Server, recipeID, recipeStepID, recipeStepIngredientID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETRecipesRecipeIDStepsRecipeStepIDInstruments(ctx context.Context, recipeID string, recipeStepID string, params *GETRecipesRecipeIDStepsRecipeStepIDInstrumentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETRecipesRecipeIDStepsRecipeStepIDInstrumentsRequest(c.Server, recipeID, recipeStepID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsWithBody(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTRecipesRecipeIDStepsRecipeStepIDInstrumentsRequestWithBody(c.Server, recipeID, recipeStepID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTRecipesRecipeIDStepsRecipeStepIDInstruments(ctx context.Context, recipeID string, recipeStepID string, body POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTRecipesRecipeIDStepsRecipeStepIDInstrumentsRequest(c.Server, recipeID, recipeStepID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETERecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentID(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETERecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDRequest(c.Server, recipeID, recipeStepID, recipeStepInstrumentID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentID(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDRequest(c.Server, recipeID, recipeStepID, recipeStepInstrumentID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDWithBody(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDRequestWithBody(c.Server, recipeID, recipeStepID, recipeStepInstrumentID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentID(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, body PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDRequest(c.Server, recipeID, recipeStepID, recipeStepInstrumentID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETRecipesRecipeIDStepsRecipeStepIDProducts(ctx context.Context, recipeID string, recipeStepID string, params *GETRecipesRecipeIDStepsRecipeStepIDProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETRecipesRecipeIDStepsRecipeStepIDProductsRequest(c.Server, recipeID, recipeStepID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTRecipesRecipeIDStepsRecipeStepIDProductsWithBody(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTRecipesRecipeIDStepsRecipeStepIDProductsRequestWithBody(c.Server, recipeID, recipeStepID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTRecipesRecipeIDStepsRecipeStepIDProducts(ctx context.Context, recipeID string, recipeStepID string, body POSTRecipesRecipeIDStepsRecipeStepIDProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTRecipesRecipeIDStepsRecipeStepIDProductsRequest(c.Server, recipeID, recipeStepID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETERecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductID(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETERecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDRequest(c.Server, recipeID, recipeStepID, recipeStepProductID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductID(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDRequest(c.Server, recipeID, recipeStepID, recipeStepProductID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDWithBody(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDRequestWithBody(c.Server, recipeID, recipeStepID, recipeStepProductID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductID(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, body PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDRequest(c.Server, recipeID, recipeStepID, recipeStepProductID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETRecipesRecipeIDStepsRecipeStepIDVessels(ctx context.Context, recipeID string, recipeStepID string, params *GETRecipesRecipeIDStepsRecipeStepIDVesselsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETRecipesRecipeIDStepsRecipeStepIDVesselsRequest(c.Server, recipeID, recipeStepID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTRecipesRecipeIDStepsRecipeStepIDVesselsWithBody(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTRecipesRecipeIDStepsRecipeStepIDVesselsRequestWithBody(c.Server, recipeID, recipeStepID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTRecipesRecipeIDStepsRecipeStepIDVessels(ctx context.Context, recipeID string, recipeStepID string, body POSTRecipesRecipeIDStepsRecipeStepIDVesselsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTRecipesRecipeIDStepsRecipeStepIDVesselsRequest(c.Server, recipeID, recipeStepID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETERecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselID(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETERecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDRequest(c.Server, recipeID, recipeStepID, recipeStepVesselID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselID(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDRequest(c.Server, recipeID, recipeStepID, recipeStepVesselID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDWithBody(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDRequestWithBody(c.Server, recipeID, recipeStepID, recipeStepVesselID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselID(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, body PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDRequest(c.Server, recipeID, recipeStepID, recipeStepVesselID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETSettings(ctx context.Context, params *GETSettingsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETSettingsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTSettingsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTSettingsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTSettings(ctx context.Context, body POSTSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTSettingsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTSettingsConfigurationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTSettingsConfigurationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTSettingsConfigurations(ctx context.Context, body POSTSettingsConfigurationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTSettingsConfigurationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETSettingsConfigurationsHousehold(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETSettingsConfigurationsHouseholdRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETSettingsConfigurationsUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETSettingsConfigurationsUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETSettingsConfigurationsUserServiceSettingConfigurationName(ctx context.Context, serviceSettingConfigurationName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETSettingsConfigurationsUserServiceSettingConfigurationNameRequest(c.Server, serviceSettingConfigurationName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETESettingsConfigurationsServiceSettingConfigurationID(ctx context.Context, serviceSettingConfigurationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETESettingsConfigurationsServiceSettingConfigurationIDRequest(c.Server, serviceSettingConfigurationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTSettingsConfigurationsServiceSettingConfigurationIDWithBody(ctx context.Context, serviceSettingConfigurationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTSettingsConfigurationsServiceSettingConfigurationIDRequestWithBody(c.Server, serviceSettingConfigurationID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTSettingsConfigurationsServiceSettingConfigurationID(ctx context.Context, serviceSettingConfigurationID string, body PUTSettingsConfigurationsServiceSettingConfigurationIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTSettingsConfigurationsServiceSettingConfigurationIDRequest(c.Server, serviceSettingConfigurationID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETSettingsSearch(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETSettingsSearchRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETESettingsServiceSettingID(ctx context.Context, serviceSettingID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETESettingsServiceSettingIDRequest(c.Server, serviceSettingID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETSettingsServiceSettingID(ctx context.Context, serviceSettingID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETSettingsServiceSettingIDRequest(c.Server, serviceSettingID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETUserIngredientPreferences(ctx context.Context, params *GETUserIngredientPreferencesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETUserIngredientPreferencesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUserIngredientPreferencesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUserIngredientPreferencesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUserIngredientPreferences(ctx context.Context, body POSTUserIngredientPreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUserIngredientPreferencesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEUserIngredientPreferencesUserIngredientPreferenceID(ctx context.Context, userIngredientPreferenceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEUserIngredientPreferencesUserIngredientPreferenceIDRequest(c.Server, userIngredientPreferenceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTUserIngredientPreferencesUserIngredientPreferenceIDWithBody(ctx context.Context, userIngredientPreferenceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTUserIngredientPreferencesUserIngredientPreferenceIDRequestWithBody(c.Server, userIngredientPreferenceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTUserIngredientPreferencesUserIngredientPreferenceID(ctx context.Context, userIngredientPreferenceID string, body PUTUserIngredientPreferencesUserIngredientPreferenceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTUserIngredientPreferencesUserIngredientPreferenceIDRequest(c.Server, userIngredientPreferenceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETUserNotifications(ctx context.Context, params *GETUserNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETUserNotificationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUserNotificationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUserNotificationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUserNotifications(ctx context.Context, body POSTUserNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUserNotificationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETUserNotificationsUserNotificationID(ctx context.Context, userNotificationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETUserNotificationsUserNotificationIDRequest(c.Server, userNotificationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PATCHUserNotificationsUserNotificationIDWithBody(ctx context.Context, userNotificationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPATCHUserNotificationsUserNotificationIDRequestWithBody(c.Server, userNotificationID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PATCHUserNotificationsUserNotificationID(ctx context.Context, userNotificationID string, body PATCHUserNotificationsUserNotificationIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPATCHUserNotificationsUserNotificationIDRequest(c.Server, userNotificationID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETUsers(ctx context.Context, params *GETUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersAvatarUploadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersAvatarUploadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersAvatarUpload(ctx context.Context, body POSTUsersAvatarUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersAvatarUploadRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTUsersDetailsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTUsersDetailsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTUsersDetails(ctx context.Context, body PUTUsersDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTUsersDetailsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTUsersEmailAddressWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTUsersEmailAddressRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTUsersEmailAddress(ctx context.Context, body PUTUsersEmailAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTUsersEmailAddressRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersEmailAddressVerificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersEmailAddressVerificationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersEmailAddressVerification(ctx context.Context, body POSTUsersEmailAddressVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersEmailAddressVerificationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersHouseholdSelectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersHouseholdSelectRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersHouseholdSelect(ctx context.Context, body POSTUsersHouseholdSelectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersHouseholdSelectRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTUsersPasswordNewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTUsersPasswordNewRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTUsersPasswordNew(ctx context.Context, body PUTUsersPasswordNewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTUsersPasswordNewRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersPermissionsCheckWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersPermissionsCheckRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersPermissionsCheck(ctx context.Context, body POSTUsersPermissionsCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersPermissionsCheckRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETUsersSearch(ctx context.Context, params *GETUsersSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETUsersSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETUsersSelf(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETUsersSelfRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersTotpSecretNewWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersTotpSecretNewRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersTotpSecretNew(ctx context.Context, body POSTUsersTotpSecretNewJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersTotpSecretNewRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTUsersUsernameWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTUsersUsernameRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTUsersUsername(ctx context.Context, body PUTUsersUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTUsersUsernameRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEUsersUserID(ctx context.Context, userID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEUsersUserIDRequest(c.Server, userID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETUsersUserID(ctx context.Context, userID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETUsersUserIDRequest(c.Server, userID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidIngredientGroups(ctx context.Context, params *GETValidIngredientGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidIngredientGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTValidIngredientGroupsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTValidIngredientGroupsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTValidIngredientGroups(ctx context.Context, body POSTValidIngredientGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTValidIngredientGroupsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidIngredientGroupsSearch(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidIngredientGroupsSearchRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEValidIngredientGroupsValidIngredientGroupID(ctx context.Context, validIngredientGroupID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEValidIngredientGroupsValidIngredientGroupIDRequest(c.Server, validIngredientGroupID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidIngredientGroupsValidIngredientGroupID(ctx context.Context, validIngredientGroupID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidIngredientGroupsValidIngredientGroupIDRequest(c.Server, validIngredientGroupID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTValidIngredientGroupsValidIngredientGroupIDWithBody(ctx context.Context, validIngredientGroupID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTValidIngredientGroupsValidIngredientGroupIDRequestWithBody(c.Server, validIngredientGroupID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTValidIngredientGroupsValidIngredientGroupID(ctx context.Context, validIngredientGroupID string, body PUTValidIngredientGroupsValidIngredientGroupIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTValidIngredientGroupsValidIngredientGroupIDRequest(c.Server, validIngredientGroupID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidIngredientMeasurementUnits(ctx context.Context, params *GETValidIngredientMeasurementUnitsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidIngredientMeasurementUnitsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTValidIngredientMeasurementUnitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTValidIngredientMeasurementUnitsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTValidIngredientMeasurementUnits(ctx context.Context, body POSTValidIngredientMeasurementUnitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTValidIngredientMeasurementUnitsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidIngredientMeasurementUnitsByIngredientValidIngredientID(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidIngredientMeasurementUnitsByIngredientValidIngredientIDRequest(c.Server, validIngredientID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidIngredientMeasurementUnitsByMeasurementUnitValidMeasurementUnitID(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidIngredientMeasurementUnitsByMeasurementUnitValidMeasurementUnitIDRequest(c.Server, validMeasurementUnitID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEValidIngredientMeasurementUnitsValidIngredientMeasurementUnitID(ctx context.Context, validIngredientMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDRequest(c.Server, validIngredientMeasurementUnitID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidIngredientMeasurementUnitsValidIngredientMeasurementUnitID(ctx context.Context, validIngredientMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDRequest(c.Server, validIngredientMeasurementUnitID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDWithBody(ctx context.Context, validIngredientMeasurementUnitID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDRequestWithBody(c.Server, validIngredientMeasurementUnitID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitID(ctx context.Context, validIngredientMeasurementUnitID string, body PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDRequest(c.Server, validIngredientMeasurementUnitID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidIngredientPreparations(ctx context.Context, params *GETValidIngredientPreparationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidIngredientPreparationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTValidIngredientPreparationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTValidIngredientPreparationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTValidIngredientPreparations(ctx context.Context, body POSTValidIngredientPreparationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTValidIngredientPreparationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidIngredientPreparationsByIngredientValidIngredientID(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidIngredientPreparationsByIngredientValidIngredientIDRequest(c.Server, validIngredientID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidIngredientPreparationsByPreparationValidPreparationID(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidIngredientPreparationsByPreparationValidPreparationIDRequest(c.Server, validPreparationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEValidIngredientPreparationsValidIngredientPreparationID(ctx context.Context, validIngredientPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEValidIngredientPreparationsValidIngredientPreparationIDRequest(c.Server, validIngredientPreparationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidIngredientPreparationsValidIngredientPreparationID(ctx context.Context, validIngredientPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidIngredientPreparationsValidIngredientPreparationIDRequest(c.Server, validIngredientPreparationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTValidIngredientPreparationsValidIngredientPreparationIDWithBody(ctx context.Context, validIngredientPreparationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTValidIngredientPreparationsValidIngredientPreparationIDRequestWithBody(c.Server, validIngredientPreparationID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTValidIngredientPreparationsValidIngredientPreparationID(ctx context.Context, validIngredientPreparationID string, body PUTValidIngredientPreparationsValidIngredientPreparationIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTValidIngredientPreparationsValidIngredientPreparationIDRequest(c.Server, validIngredientPreparationID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidIngredientStateIngredients(ctx context.Context, params *GETValidIngredientStateIngredientsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidIngredientStateIngredientsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTValidIngredientStateIngredientsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTValidIngredientStateIngredientsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTValidIngredientStateIngredients(ctx context.Context, body POSTValidIngredientStateIngredientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTValidIngredientStateIngredientsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidIngredientStateIngredientsByIngredientValidIngredientID(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidIngredientStateIngredientsByIngredientValidIngredientIDRequest(c.Server, validIngredientID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidIngredientStateIngredientsByIngredientStateValidIngredientStateID(ctx context.Context, validIngredientStateID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidIngredientStateIngredientsByIngredientStateValidIngredientStateIDRequest(c.Server, validIngredientStateID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEValidIngredientStateIngredientsValidIngredientStateIngredientID(ctx context.Context, validIngredientStateIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEValidIngredientStateIngredientsValidIngredientStateIngredientIDRequest(c.Server, validIngredientStateIngredientID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidIngredientStateIngredientsValidIngredientStateIngredientID(ctx context.Context, validIngredientStateIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidIngredientStateIngredientsValidIngredientStateIngredientIDRequest(c.Server, validIngredientStateIngredientID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDWithBody(ctx context.Context, validIngredientStateIngredientID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTValidIngredientStateIngredientsValidIngredientStateIngredientIDRequestWithBody(c.Server, validIngredientStateIngredientID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTValidIngredientStateIngredientsValidIngredientStateIngredientID(ctx context.Context, validIngredientStateIngredientID string, body PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTValidIngredientStateIngredientsValidIngredientStateIngredientIDRequest(c.Server, validIngredientStateIngredientID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidIngredientStates(ctx context.Context, params *GETValidIngredientStatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidIngredientStatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTValidIngredientStatesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTValidIngredientStatesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTValidIngredientStates(ctx context.Context, body POSTValidIngredientStatesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTValidIngredientStatesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidIngredientStatesSearch(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidIngredientStatesSearchRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEValidIngredientStatesValidIngredientStateID(ctx context.Context, validIngredientStateID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEValidIngredientStatesValidIngredientStateIDRequest(c.Server, validIngredientStateID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidIngredientStatesValidIngredientStateID(ctx context.Context, validIngredientStateID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidIngredientStatesValidIngredientStateIDRequest(c.Server, validIngredientStateID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTValidIngredientStatesValidIngredientStateIDWithBody(ctx context.Context, validIngredientStateID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTValidIngredientStatesValidIngredientStateIDRequestWithBody(c.Server, validIngredientStateID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTValidIngredientStatesValidIngredientStateID(ctx context.Context, validIngredientStateID string, body PUTValidIngredientStatesValidIngredientStateIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTValidIngredientStatesValidIngredientStateIDRequest(c.Server, validIngredientStateID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidIngredients(ctx context.Context, params *GETValidIngredientsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidIngredientsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTValidIngredientsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTValidIngredientsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTValidIngredients(ctx context.Context, body POSTValidIngredientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTValidIngredientsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidIngredientsByPreparationValidPreparationID(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidIngredientsByPreparationValidPreparationIDRequest(c.Server, validPreparationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidIngredientsRandom(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidIngredientsRandomRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidIngredientsSearch(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidIngredientsSearchRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEValidIngredientsValidIngredientID(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEValidIngredientsValidIngredientIDRequest(c.Server, validIngredientID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidIngredientsValidIngredientID(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidIngredientsValidIngredientIDRequest(c.Server, validIngredientID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTValidIngredientsValidIngredientIDWithBody(ctx context.Context, validIngredientID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTValidIngredientsValidIngredientIDRequestWithBody(c.Server, validIngredientID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTValidIngredientsValidIngredientID(ctx context.Context, validIngredientID string, body PUTValidIngredientsValidIngredientIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTValidIngredientsValidIngredientIDRequest(c.Server, validIngredientID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidInstruments(ctx context.Context, params *GETValidInstrumentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidInstrumentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTValidInstrumentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTValidInstrumentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTValidInstruments(ctx context.Context, body POSTValidInstrumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTValidInstrumentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidInstrumentsRandom(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidInstrumentsRandomRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidInstrumentsSearch(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidInstrumentsSearchRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEValidInstrumentsValidInstrumentID(ctx context.Context, validInstrumentID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEValidInstrumentsValidInstrumentIDRequest(c.Server, validInstrumentID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidInstrumentsValidInstrumentID(ctx context.Context, validInstrumentID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidInstrumentsValidInstrumentIDRequest(c.Server, validInstrumentID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTValidInstrumentsValidInstrumentIDWithBody(ctx context.Context, validInstrumentID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTValidInstrumentsValidInstrumentIDRequestWithBody(c.Server, validInstrumentID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTValidInstrumentsValidInstrumentID(ctx context.Context, validInstrumentID string, body PUTValidInstrumentsValidInstrumentIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTValidInstrumentsValidInstrumentIDRequest(c.Server, validInstrumentID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTValidMeasurementConversionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTValidMeasurementConversionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTValidMeasurementConversions(ctx context.Context, body POSTValidMeasurementConversionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTValidMeasurementConversionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidMeasurementConversionsFromUnitValidMeasurementUnitID(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidMeasurementConversionsFromUnitValidMeasurementUnitIDRequest(c.Server, validMeasurementUnitID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidMeasurementConversionsToUnitValidMeasurementUnitID(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidMeasurementConversionsToUnitValidMeasurementUnitIDRequest(c.Server, validMeasurementUnitID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEValidMeasurementConversionsValidMeasurementUnitConversionID(ctx context.Context, validMeasurementUnitConversionID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEValidMeasurementConversionsValidMeasurementUnitConversionIDRequest(c.Server, validMeasurementUnitConversionID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidMeasurementConversionsValidMeasurementUnitConversionID(ctx context.Context, validMeasurementUnitConversionID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidMeasurementConversionsValidMeasurementUnitConversionIDRequest(c.Server, validMeasurementUnitConversionID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTValidMeasurementConversionsValidMeasurementUnitConversionIDWithBody(ctx context.Context, validMeasurementUnitConversionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTValidMeasurementConversionsValidMeasurementUnitConversionIDRequestWithBody(c.Server, validMeasurementUnitConversionID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTValidMeasurementConversionsValidMeasurementUnitConversionID(ctx context.Context, validMeasurementUnitConversionID string, body PUTValidMeasurementConversionsValidMeasurementUnitConversionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTValidMeasurementConversionsValidMeasurementUnitConversionIDRequest(c.Server, validMeasurementUnitConversionID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidMeasurementUnits(ctx context.Context, params *GETValidMeasurementUnitsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidMeasurementUnitsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTValidMeasurementUnitsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTValidMeasurementUnitsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTValidMeasurementUnits(ctx context.Context, body POSTValidMeasurementUnitsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTValidMeasurementUnitsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidMeasurementUnitsByIngredientValidIngredientID(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidMeasurementUnitsByIngredientValidIngredientIDRequest(c.Server, validIngredientID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidMeasurementUnitsSearch(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidMeasurementUnitsSearchRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEValidMeasurementUnitsValidMeasurementUnitID(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEValidMeasurementUnitsValidMeasurementUnitIDRequest(c.Server, validMeasurementUnitID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidMeasurementUnitsValidMeasurementUnitID(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidMeasurementUnitsValidMeasurementUnitIDRequest(c.Server, validMeasurementUnitID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTValidMeasurementUnitsValidMeasurementUnitIDWithBody(ctx context.Context, validMeasurementUnitID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTValidMeasurementUnitsValidMeasurementUnitIDRequestWithBody(c.Server, validMeasurementUnitID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTValidMeasurementUnitsValidMeasurementUnitID(ctx context.Context, validMeasurementUnitID string, body PUTValidMeasurementUnitsValidMeasurementUnitIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTValidMeasurementUnitsValidMeasurementUnitIDRequest(c.Server, validMeasurementUnitID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidPreparationInstruments(ctx context.Context, params *GETValidPreparationInstrumentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidPreparationInstrumentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTValidPreparationInstrumentsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTValidPreparationInstrumentsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTValidPreparationInstruments(ctx context.Context, body POSTValidPreparationInstrumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTValidPreparationInstrumentsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidPreparationInstrumentsByInstrumentValidInstrumentID(ctx context.Context, validInstrumentID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidPreparationInstrumentsByInstrumentValidInstrumentIDRequest(c.Server, validInstrumentID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidPreparationInstrumentsByPreparationValidPreparationID(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidPreparationInstrumentsByPreparationValidPreparationIDRequest(c.Server, validPreparationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEValidPreparationInstrumentsValidPreparationVesselID(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEValidPreparationInstrumentsValidPreparationVesselIDRequest(c.Server, validPreparationVesselID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidPreparationInstrumentsValidPreparationVesselID(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidPreparationInstrumentsValidPreparationVesselIDRequest(c.Server, validPreparationVesselID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTValidPreparationInstrumentsValidPreparationVesselIDWithBody(ctx context.Context, validPreparationVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTValidPreparationInstrumentsValidPreparationVesselIDRequestWithBody(c.Server, validPreparationVesselID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTValidPreparationInstrumentsValidPreparationVesselID(ctx context.Context, validPreparationVesselID string, body PUTValidPreparationInstrumentsValidPreparationVesselIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTValidPreparationInstrumentsValidPreparationVesselIDRequest(c.Server, validPreparationVesselID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidPreparationVessels(ctx context.Context, params *GETValidPreparationVesselsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidPreparationVesselsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTValidPreparationVesselsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTValidPreparationVesselsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTValidPreparationVessels(ctx context.Context, body POSTValidPreparationVesselsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTValidPreparationVesselsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidPreparationVesselsByPreparationValidPreparationID(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidPreparationVesselsByPreparationValidPreparationIDRequest(c.Server, validPreparationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidPreparationVesselsByVesselValidVesselID(ctx context.Context, validVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidPreparationVesselsByVesselValidVesselIDRequest(c.Server, validVesselID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEValidPreparationVesselsValidPreparationVesselID(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEValidPreparationVesselsValidPreparationVesselIDRequest(c.Server, validPreparationVesselID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidPreparationVesselsValidPreparationVesselID(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidPreparationVesselsValidPreparationVesselIDRequest(c.Server, validPreparationVesselID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTValidPreparationVesselsValidPreparationVesselIDWithBody(ctx context.Context, validPreparationVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTValidPreparationVesselsValidPreparationVesselIDRequestWithBody(c.Server, validPreparationVesselID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTValidPreparationVesselsValidPreparationVesselID(ctx context.Context, validPreparationVesselID string, body PUTValidPreparationVesselsValidPreparationVesselIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTValidPreparationVesselsValidPreparationVesselIDRequest(c.Server, validPreparationVesselID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidPreparations(ctx context.Context, params *GETValidPreparationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidPreparationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTValidPreparationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTValidPreparationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTValidPreparations(ctx context.Context, body POSTValidPreparationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTValidPreparationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidPreparationsRandom(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidPreparationsRandomRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidPreparationsSearch(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidPreparationsSearchRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEValidPreparationsValidPreparationID(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEValidPreparationsValidPreparationIDRequest(c.Server, validPreparationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidPreparationsValidPreparationID(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidPreparationsValidPreparationIDRequest(c.Server, validPreparationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTValidPreparationsValidPreparationIDWithBody(ctx context.Context, validPreparationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTValidPreparationsValidPreparationIDRequestWithBody(c.Server, validPreparationID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTValidPreparationsValidPreparationID(ctx context.Context, validPreparationID string, body PUTValidPreparationsValidPreparationIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTValidPreparationsValidPreparationIDRequest(c.Server, validPreparationID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidVessels(ctx context.Context, params *GETValidVesselsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidVesselsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTValidVesselsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTValidVesselsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTValidVessels(ctx context.Context, body POSTValidVesselsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTValidVesselsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidVesselsRandom(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidVesselsRandomRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidVesselsSearch(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidVesselsSearchRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEValidVesselsValidVesselID(ctx context.Context, validVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEValidVesselsValidVesselIDRequest(c.Server, validVesselID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETValidVesselsValidVesselID(ctx context.Context, validVesselID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETValidVesselsValidVesselIDRequest(c.Server, validVesselID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTValidVesselsValidVesselIDWithBody(ctx context.Context, validVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTValidVesselsValidVesselIDRequestWithBody(c.Server, validVesselID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PUTValidVesselsValidVesselID(ctx context.Context, validVesselID string, body PUTValidVesselsValidVesselIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPUTValidVesselsValidVesselIDRequest(c.Server, validVesselID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETWebhooks(ctx context.Context, params *GETWebhooksParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETWebhooksRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTWebhooksWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTWebhooksRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTWebhooks(ctx context.Context, body POSTWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTWebhooksRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEWebhooksWebhookID(ctx context.Context, webhookID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEWebhooksWebhookIDRequest(c.Server, webhookID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETWebhooksWebhookID(ctx context.Context, webhookID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETWebhooksWebhookIDRequest(c.Server, webhookID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTWebhooksWebhookIDTriggerEventsWithBody(ctx context.Context, webhookID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTWebhooksWebhookIDTriggerEventsRequestWithBody(c.Server, webhookID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTWebhooksWebhookIDTriggerEvents(ctx context.Context, webhookID string, body POSTWebhooksWebhookIDTriggerEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTWebhooksWebhookIDTriggerEventsRequest(c.Server, webhookID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DELETEWebhooksWebhookIDTriggerEventsWebhookTriggerEventID(ctx context.Context, webhookID string, webhookTriggerEventID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDELETEWebhooksWebhookIDTriggerEventsWebhookTriggerEventIDRequest(c.Server, webhookID, webhookTriggerEventID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTWorkersFinalizeMealPlansWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTWorkersFinalizeMealPlansRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTWorkersFinalizeMealPlans(ctx context.Context, body POSTWorkersFinalizeMealPlansJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTWorkersFinalizeMealPlansRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTWorkersMealPlanGroceryListInit(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTWorkersMealPlanGroceryListInitRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTWorkersMealPlanTasks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTWorkersMealPlanTasksRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETAuthStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETAuthStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GETOauth2Authorize(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGETOauth2AuthorizeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTOauth2Token(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTOauth2TokenRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsers(ctx context.Context, body POSTUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersEmailAddressVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersEmailAddressVerifyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersEmailAddressVerify(ctx context.Context, body POSTUsersEmailAddressVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersEmailAddressVerifyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersLogin(ctx context.Context, body POSTUsersLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersLoginAdminWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersLoginAdminRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersLoginAdmin(ctx context.Context, body POSTUsersLoginAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersLoginAdminRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersLogoutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersPasswordResetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersPasswordResetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersPasswordReset(ctx context.Context, body POSTUsersPasswordResetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersPasswordResetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersPasswordResetRedeemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersPasswordResetRedeemRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersPasswordResetRedeem(ctx context.Context, body POSTUsersPasswordResetRedeemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersPasswordResetRedeemRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersTotpSecretVerifyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersTotpSecretVerifyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersTotpSecretVerify(ctx context.Context, body POSTUsersTotpSecretVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersTotpSecretVerifyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersUsernameReminderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersUsernameReminderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) POSTUsersUsernameReminder(ctx context.Context, body POSTUsersUsernameReminderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPOSTUsersUsernameReminderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPOSTAdminCycleCookieSecretRequest generates requests for POSTAdminCycleCookieSecret
func NewPOSTAdminCycleCookieSecretRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/cycle_cookie_secret")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTAdminUsersStatusRequest calls the generic POSTAdminUsersStatus builder with application/json body
func NewPOSTAdminUsersStatusRequest(server string, body POSTAdminUsersStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTAdminUsersStatusRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTAdminUsersStatusRequestWithBody generates requests for POSTAdminUsersStatus with any type of body
func NewPOSTAdminUsersStatusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/users/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETAuditLogEntriesForHouseholdRequest generates requests for GETAuditLogEntriesForHousehold
func NewGETAuditLogEntriesForHouseholdRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/audit_log_entries/for_household")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETAuditLogEntriesForUserRequest generates requests for GETAuditLogEntriesForUser
func NewGETAuditLogEntriesForUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/audit_log_entries/for_user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETAuditLogEntriesAuditLogEntryIDRequest generates requests for GETAuditLogEntriesAuditLogEntryID
func NewGETAuditLogEntriesAuditLogEntryIDRequest(server string, auditLogEntryID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "auditLogEntryID", runtime.ParamLocationPath, auditLogEntryID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/audit_log_entries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETHouseholdInvitationsReceivedRequest generates requests for GETHouseholdInvitationsReceived
func NewGETHouseholdInvitationsReceivedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/household_invitations/received")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETHouseholdInvitationsSentRequest generates requests for GETHouseholdInvitationsSent
func NewGETHouseholdInvitationsSentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/household_invitations/sent")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETHouseholdInvitationsHouseholdInvitationIDRequest generates requests for GETHouseholdInvitationsHouseholdInvitationID
func NewGETHouseholdInvitationsHouseholdInvitationIDRequest(server string, householdInvitationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdInvitationID", runtime.ParamLocationPath, householdInvitationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/household_invitations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTHouseholdInvitationsHouseholdInvitationIDAcceptRequest calls the generic PUTHouseholdInvitationsHouseholdInvitationIDAccept builder with application/json body
func NewPUTHouseholdInvitationsHouseholdInvitationIDAcceptRequest(server string, householdInvitationID string, body PUTHouseholdInvitationsHouseholdInvitationIDAcceptJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTHouseholdInvitationsHouseholdInvitationIDAcceptRequestWithBody(server, householdInvitationID, "application/json", bodyReader)
}

// NewPUTHouseholdInvitationsHouseholdInvitationIDAcceptRequestWithBody generates requests for PUTHouseholdInvitationsHouseholdInvitationIDAccept with any type of body
func NewPUTHouseholdInvitationsHouseholdInvitationIDAcceptRequestWithBody(server string, householdInvitationID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdInvitationID", runtime.ParamLocationPath, householdInvitationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/household_invitations/%s/accept", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPUTHouseholdInvitationsHouseholdInvitationIDCancelRequest calls the generic PUTHouseholdInvitationsHouseholdInvitationIDCancel builder with application/json body
func NewPUTHouseholdInvitationsHouseholdInvitationIDCancelRequest(server string, householdInvitationID string, body PUTHouseholdInvitationsHouseholdInvitationIDCancelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTHouseholdInvitationsHouseholdInvitationIDCancelRequestWithBody(server, householdInvitationID, "application/json", bodyReader)
}

// NewPUTHouseholdInvitationsHouseholdInvitationIDCancelRequestWithBody generates requests for PUTHouseholdInvitationsHouseholdInvitationIDCancel with any type of body
func NewPUTHouseholdInvitationsHouseholdInvitationIDCancelRequestWithBody(server string, householdInvitationID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdInvitationID", runtime.ParamLocationPath, householdInvitationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/household_invitations/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPUTHouseholdInvitationsHouseholdInvitationIDRejectRequest calls the generic PUTHouseholdInvitationsHouseholdInvitationIDReject builder with application/json body
func NewPUTHouseholdInvitationsHouseholdInvitationIDRejectRequest(server string, householdInvitationID string, body PUTHouseholdInvitationsHouseholdInvitationIDRejectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTHouseholdInvitationsHouseholdInvitationIDRejectRequestWithBody(server, householdInvitationID, "application/json", bodyReader)
}

// NewPUTHouseholdInvitationsHouseholdInvitationIDRejectRequestWithBody generates requests for PUTHouseholdInvitationsHouseholdInvitationIDReject with any type of body
func NewPUTHouseholdInvitationsHouseholdInvitationIDRejectRequestWithBody(server string, householdInvitationID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdInvitationID", runtime.ParamLocationPath, householdInvitationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/household_invitations/%s/reject", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETHouseholdsRequest generates requests for GETHouseholds
func NewGETHouseholdsRequest(server string, params *GETHouseholdsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTHouseholdsRequest calls the generic POSTHouseholds builder with application/json body
func NewPOSTHouseholdsRequest(server string, body POSTHouseholdsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTHouseholdsRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTHouseholdsRequestWithBody generates requests for POSTHouseholds with any type of body
func NewPOSTHouseholdsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETHouseholdsCurrentRequest generates requests for GETHouseholdsCurrent
func NewGETHouseholdsCurrentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/current")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETHouseholdsInstrumentsRequest generates requests for GETHouseholdsInstruments
func NewGETHouseholdsInstrumentsRequest(server string, params *GETHouseholdsInstrumentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/instruments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTHouseholdsInstrumentsRequest calls the generic POSTHouseholdsInstruments builder with application/json body
func NewPOSTHouseholdsInstrumentsRequest(server string, body POSTHouseholdsInstrumentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTHouseholdsInstrumentsRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTHouseholdsInstrumentsRequestWithBody generates requests for POSTHouseholdsInstruments with any type of body
func NewPOSTHouseholdsInstrumentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/instruments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDELETEHouseholdsInstrumentsHouseholdInstrumentOwnershipIDRequest generates requests for DELETEHouseholdsInstrumentsHouseholdInstrumentOwnershipID
func NewDELETEHouseholdsInstrumentsHouseholdInstrumentOwnershipIDRequest(server string, householdInstrumentOwnershipID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdInstrumentOwnershipID", runtime.ParamLocationPath, householdInstrumentOwnershipID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/instruments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETHouseholdsInstrumentsHouseholdInstrumentOwnershipIDRequest generates requests for GETHouseholdsInstrumentsHouseholdInstrumentOwnershipID
func NewGETHouseholdsInstrumentsHouseholdInstrumentOwnershipIDRequest(server string, householdInstrumentOwnershipID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdInstrumentOwnershipID", runtime.ParamLocationPath, householdInstrumentOwnershipID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/instruments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDRequest calls the generic PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipID builder with application/json body
func NewPUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDRequest(server string, householdInstrumentOwnershipID string, body PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDRequestWithBody(server, householdInstrumentOwnershipID, "application/json", bodyReader)
}

// NewPUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDRequestWithBody generates requests for PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipID with any type of body
func NewPUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDRequestWithBody(server string, householdInstrumentOwnershipID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdInstrumentOwnershipID", runtime.ParamLocationPath, householdInstrumentOwnershipID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/instruments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDELETEHouseholdsHouseholdIDRequest generates requests for DELETEHouseholdsHouseholdID
func NewDELETEHouseholdsHouseholdIDRequest(server string, householdID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdID", runtime.ParamLocationPath, householdID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETHouseholdsHouseholdIDRequest generates requests for GETHouseholdsHouseholdID
func NewGETHouseholdsHouseholdIDRequest(server string, householdID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdID", runtime.ParamLocationPath, householdID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTHouseholdsHouseholdIDRequest calls the generic PUTHouseholdsHouseholdID builder with application/json body
func NewPUTHouseholdsHouseholdIDRequest(server string, householdID string, body PUTHouseholdsHouseholdIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTHouseholdsHouseholdIDRequestWithBody(server, householdID, "application/json", bodyReader)
}

// NewPUTHouseholdsHouseholdIDRequestWithBody generates requests for PUTHouseholdsHouseholdID with any type of body
func NewPUTHouseholdsHouseholdIDRequestWithBody(server string, householdID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdID", runtime.ParamLocationPath, householdID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPOSTHouseholdsHouseholdIDDefaultRequest generates requests for POSTHouseholdsHouseholdIDDefault
func NewPOSTHouseholdsHouseholdIDDefaultRequest(server string, householdID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdID", runtime.ParamLocationPath, householdID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/%s/default", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTHouseholdsHouseholdIDInvitationsRequest calls the generic POSTHouseholdsHouseholdIDInvitations builder with application/json body
func NewPOSTHouseholdsHouseholdIDInvitationsRequest(server string, householdID string, body POSTHouseholdsHouseholdIDInvitationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTHouseholdsHouseholdIDInvitationsRequestWithBody(server, householdID, "application/json", bodyReader)
}

// NewPOSTHouseholdsHouseholdIDInvitationsRequestWithBody generates requests for POSTHouseholdsHouseholdIDInvitations with any type of body
func NewPOSTHouseholdsHouseholdIDInvitationsRequestWithBody(server string, householdID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdID", runtime.ParamLocationPath, householdID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/%s/invitations", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETHouseholdsHouseholdIDInvitationsHouseholdInvitationIDRequest generates requests for GETHouseholdsHouseholdIDInvitationsHouseholdInvitationID
func NewGETHouseholdsHouseholdIDInvitationsHouseholdInvitationIDRequest(server string, householdID string, householdInvitationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdID", runtime.ParamLocationPath, householdID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "householdInvitationID", runtime.ParamLocationPath, householdInvitationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/%s/invitations/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTHouseholdsHouseholdIDInviteRequest calls the generic POSTHouseholdsHouseholdIDInvite builder with application/json body
func NewPOSTHouseholdsHouseholdIDInviteRequest(server string, householdID string, body POSTHouseholdsHouseholdIDInviteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTHouseholdsHouseholdIDInviteRequestWithBody(server, householdID, "application/json", bodyReader)
}

// NewPOSTHouseholdsHouseholdIDInviteRequestWithBody generates requests for POSTHouseholdsHouseholdIDInvite with any type of body
func NewPOSTHouseholdsHouseholdIDInviteRequestWithBody(server string, householdID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdID", runtime.ParamLocationPath, householdID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/%s/invite", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDELETEHouseholdsHouseholdIDMembersUserIDRequest generates requests for DELETEHouseholdsHouseholdIDMembersUserID
func NewDELETEHouseholdsHouseholdIDMembersUserIDRequest(server string, householdID string, userID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdID", runtime.ParamLocationPath, householdID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userID", runtime.ParamLocationPath, userID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/%s/members/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPATCHHouseholdsHouseholdIDMembersUserIDPermissionsRequest calls the generic PATCHHouseholdsHouseholdIDMembersUserIDPermissions builder with application/json body
func NewPATCHHouseholdsHouseholdIDMembersUserIDPermissionsRequest(server string, householdID string, userID string, body PATCHHouseholdsHouseholdIDMembersUserIDPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPATCHHouseholdsHouseholdIDMembersUserIDPermissionsRequestWithBody(server, householdID, userID, "application/json", bodyReader)
}

// NewPATCHHouseholdsHouseholdIDMembersUserIDPermissionsRequestWithBody generates requests for PATCHHouseholdsHouseholdIDMembersUserIDPermissions with any type of body
func NewPATCHHouseholdsHouseholdIDMembersUserIDPermissionsRequestWithBody(server string, householdID string, userID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdID", runtime.ParamLocationPath, householdID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userID", runtime.ParamLocationPath, userID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/%s/members/%s/permissions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPOSTHouseholdsHouseholdIDTransferRequest calls the generic POSTHouseholdsHouseholdIDTransfer builder with application/json body
func NewPOSTHouseholdsHouseholdIDTransferRequest(server string, householdID string, body POSTHouseholdsHouseholdIDTransferJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTHouseholdsHouseholdIDTransferRequestWithBody(server, householdID, "application/json", bodyReader)
}

// NewPOSTHouseholdsHouseholdIDTransferRequestWithBody generates requests for POSTHouseholdsHouseholdIDTransfer with any type of body
func NewPOSTHouseholdsHouseholdIDTransferRequestWithBody(server string, householdID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "householdID", runtime.ParamLocationPath, householdID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/households/%s/transfer", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETMealPlansRequest generates requests for GETMealPlans
func NewGETMealPlansRequest(server string, params *GETMealPlansParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTMealPlansRequest calls the generic POSTMealPlans builder with application/json body
func NewPOSTMealPlansRequest(server string, body POSTMealPlansJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTMealPlansRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTMealPlansRequestWithBody generates requests for POSTMealPlans with any type of body
func NewPOSTMealPlansRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDELETEMealPlansMealPlanIDRequest generates requests for DELETEMealPlansMealPlanID
func NewDELETEMealPlansMealPlanIDRequest(server string, mealPlanID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETMealPlansMealPlanIDRequest generates requests for GETMealPlansMealPlanID
func NewGETMealPlansMealPlanIDRequest(server string, mealPlanID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTMealPlansMealPlanIDRequest calls the generic PUTMealPlansMealPlanID builder with application/json body
func NewPUTMealPlansMealPlanIDRequest(server string, mealPlanID string, body PUTMealPlansMealPlanIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTMealPlansMealPlanIDRequestWithBody(server, mealPlanID, "application/json", bodyReader)
}

// NewPUTMealPlansMealPlanIDRequestWithBody generates requests for PUTMealPlansMealPlanID with any type of body
func NewPUTMealPlansMealPlanIDRequestWithBody(server string, mealPlanID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETMealPlansMealPlanIDEventsRequest generates requests for GETMealPlansMealPlanIDEvents
func NewGETMealPlansMealPlanIDEventsRequest(server string, mealPlanID string, params *GETMealPlansMealPlanIDEventsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTMealPlansMealPlanIDEventsRequest calls the generic POSTMealPlansMealPlanIDEvents builder with application/json body
func NewPOSTMealPlansMealPlanIDEventsRequest(server string, mealPlanID string, body POSTMealPlansMealPlanIDEventsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTMealPlansMealPlanIDEventsRequestWithBody(server, mealPlanID, "application/json", bodyReader)
}

// NewPOSTMealPlansMealPlanIDEventsRequestWithBody generates requests for POSTMealPlansMealPlanIDEvents with any type of body
func NewPOSTMealPlansMealPlanIDEventsRequestWithBody(server string, mealPlanID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDELETEMealPlansMealPlanIDEventsMealPlanEventIDRequest generates requests for DELETEMealPlansMealPlanIDEventsMealPlanEventID
func NewDELETEMealPlansMealPlanIDEventsMealPlanEventIDRequest(server string, mealPlanID string, mealPlanEventID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanEventID", runtime.ParamLocationPath, mealPlanEventID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETMealPlansMealPlanIDEventsMealPlanEventIDRequest generates requests for GETMealPlansMealPlanIDEventsMealPlanEventID
func NewGETMealPlansMealPlanIDEventsMealPlanEventIDRequest(server string, mealPlanID string, mealPlanEventID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanEventID", runtime.ParamLocationPath, mealPlanEventID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTMealPlansMealPlanIDEventsMealPlanEventIDRequest calls the generic PUTMealPlansMealPlanIDEventsMealPlanEventID builder with application/json body
func NewPUTMealPlansMealPlanIDEventsMealPlanEventIDRequest(server string, mealPlanID string, mealPlanEventID string, body PUTMealPlansMealPlanIDEventsMealPlanEventIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTMealPlansMealPlanIDEventsMealPlanEventIDRequestWithBody(server, mealPlanID, mealPlanEventID, "application/json", bodyReader)
}

// NewPUTMealPlansMealPlanIDEventsMealPlanEventIDRequestWithBody generates requests for PUTMealPlansMealPlanIDEventsMealPlanEventID with any type of body
func NewPUTMealPlansMealPlanIDEventsMealPlanEventIDRequestWithBody(server string, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanEventID", runtime.ParamLocationPath, mealPlanEventID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETMealPlansMealPlanIDEventsMealPlanEventIDOptionsRequest generates requests for GETMealPlansMealPlanIDEventsMealPlanEventIDOptions
func NewGETMealPlansMealPlanIDEventsMealPlanEventIDOptionsRequest(server string, mealPlanID string, mealPlanEventID string, params *GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanEventID", runtime.ParamLocationPath, mealPlanEventID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events/%s/options", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsRequest calls the generic POSTMealPlansMealPlanIDEventsMealPlanEventIDOptions builder with application/json body
func NewPOSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsRequest(server string, mealPlanID string, mealPlanEventID string, body POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsRequestWithBody(server, mealPlanID, mealPlanEventID, "application/json", bodyReader)
}

// NewPOSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsRequestWithBody generates requests for POSTMealPlansMealPlanIDEventsMealPlanEventIDOptions with any type of body
func NewPOSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsRequestWithBody(server string, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanEventID", runtime.ParamLocationPath, mealPlanEventID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events/%s/options", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDRequest generates requests for DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionID
func NewDELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDRequest(server string, mealPlanID string, mealPlanEventID string, mealPlanOptionID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanEventID", runtime.ParamLocationPath, mealPlanEventID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "mealPlanOptionID", runtime.ParamLocationPath, mealPlanOptionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events/%s/options/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDRequest generates requests for GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionID
func NewGETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDRequest(server string, mealPlanID string, mealPlanEventID string, mealPlanOptionID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanEventID", runtime.ParamLocationPath, mealPlanEventID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "mealPlanOptionID", runtime.ParamLocationPath, mealPlanOptionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events/%s/options/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDRequest calls the generic PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionID builder with application/json body
func NewPUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDRequest(server string, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, body PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDRequestWithBody(server, mealPlanID, mealPlanEventID, mealPlanOptionID, "application/json", bodyReader)
}

// NewPUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDRequestWithBody generates requests for PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionID with any type of body
func NewPUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDRequestWithBody(server string, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanEventID", runtime.ParamLocationPath, mealPlanEventID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "mealPlanOptionID", runtime.ParamLocationPath, mealPlanOptionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events/%s/options/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesRequest generates requests for GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotes
func NewGETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesRequest(server string, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, params *GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanEventID", runtime.ParamLocationPath, mealPlanEventID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "mealPlanOptionID", runtime.ParamLocationPath, mealPlanOptionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events/%s/options/%s/votes", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDRequest generates requests for DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteID
func NewDELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDRequest(server string, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanEventID", runtime.ParamLocationPath, mealPlanEventID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "mealPlanOptionID", runtime.ParamLocationPath, mealPlanOptionID)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "mealPlanOptionVoteID", runtime.ParamLocationPath, mealPlanOptionVoteID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events/%s/options/%s/votes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDRequest generates requests for GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteID
func NewGETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDRequest(server string, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanEventID", runtime.ParamLocationPath, mealPlanEventID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "mealPlanOptionID", runtime.ParamLocationPath, mealPlanOptionID)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "mealPlanOptionVoteID", runtime.ParamLocationPath, mealPlanOptionVoteID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events/%s/options/%s/votes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDRequest calls the generic PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteID builder with application/json body
func NewPUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDRequest(server string, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, body PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDRequestWithBody(server, mealPlanID, mealPlanEventID, mealPlanOptionID, mealPlanOptionVoteID, "application/json", bodyReader)
}

// NewPUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDRequestWithBody generates requests for PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteID with any type of body
func NewPUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDRequestWithBody(server string, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanEventID", runtime.ParamLocationPath, mealPlanEventID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "mealPlanOptionID", runtime.ParamLocationPath, mealPlanOptionID)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "mealPlanOptionVoteID", runtime.ParamLocationPath, mealPlanOptionVoteID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events/%s/options/%s/votes/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPOSTMealPlansMealPlanIDEventsMealPlanEventIDVoteRequest calls the generic POSTMealPlansMealPlanIDEventsMealPlanEventIDVote builder with application/json body
func NewPOSTMealPlansMealPlanIDEventsMealPlanEventIDVoteRequest(server string, mealPlanID string, mealPlanEventID string, body POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTMealPlansMealPlanIDEventsMealPlanEventIDVoteRequestWithBody(server, mealPlanID, mealPlanEventID, "application/json", bodyReader)
}

// NewPOSTMealPlansMealPlanIDEventsMealPlanEventIDVoteRequestWithBody generates requests for POSTMealPlansMealPlanIDEventsMealPlanEventIDVote with any type of body
func NewPOSTMealPlansMealPlanIDEventsMealPlanEventIDVoteRequestWithBody(server string, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanEventID", runtime.ParamLocationPath, mealPlanEventID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/events/%s/vote", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPOSTMealPlansMealPlanIDFinalizeRequest generates requests for POSTMealPlansMealPlanIDFinalize
func NewPOSTMealPlansMealPlanIDFinalizeRequest(server string, mealPlanID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/finalize", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETMealPlansMealPlanIDGroceryListItemsRequest generates requests for GETMealPlansMealPlanIDGroceryListItems
func NewGETMealPlansMealPlanIDGroceryListItemsRequest(server string, mealPlanID string, params *GETMealPlansMealPlanIDGroceryListItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/grocery_list_items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTMealPlansMealPlanIDGroceryListItemsRequest calls the generic POSTMealPlansMealPlanIDGroceryListItems builder with application/json body
func NewPOSTMealPlansMealPlanIDGroceryListItemsRequest(server string, mealPlanID string, body POSTMealPlansMealPlanIDGroceryListItemsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTMealPlansMealPlanIDGroceryListItemsRequestWithBody(server, mealPlanID, "application/json", bodyReader)
}

// NewPOSTMealPlansMealPlanIDGroceryListItemsRequestWithBody generates requests for POSTMealPlansMealPlanIDGroceryListItems with any type of body
func NewPOSTMealPlansMealPlanIDGroceryListItemsRequestWithBody(server string, mealPlanID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/grocery_list_items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDELETEMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDRequest generates requests for DELETEMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemID
func NewDELETEMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDRequest(server string, mealPlanID string, mealPlanGroceryListItemID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanGroceryListItemID", runtime.ParamLocationPath, mealPlanGroceryListItemID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/grocery_list_items/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDRequest generates requests for GETMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemID
func NewGETMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDRequest(server string, mealPlanID string, mealPlanGroceryListItemID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanGroceryListItemID", runtime.ParamLocationPath, mealPlanGroceryListItemID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/grocery_list_items/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDRequest calls the generic PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemID builder with application/json body
func NewPUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDRequest(server string, mealPlanID string, mealPlanGroceryListItemID string, body PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDRequestWithBody(server, mealPlanID, mealPlanGroceryListItemID, "application/json", bodyReader)
}

// NewPUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDRequestWithBody generates requests for PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemID with any type of body
func NewPUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDRequestWithBody(server string, mealPlanID string, mealPlanGroceryListItemID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanGroceryListItemID", runtime.ParamLocationPath, mealPlanGroceryListItemID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/grocery_list_items/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETMealPlansMealPlanIDTasksRequest generates requests for GETMealPlansMealPlanIDTasks
func NewGETMealPlansMealPlanIDTasksRequest(server string, mealPlanID string, params *GETMealPlansMealPlanIDTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTMealPlansMealPlanIDTasksRequest calls the generic POSTMealPlansMealPlanIDTasks builder with application/json body
func NewPOSTMealPlansMealPlanIDTasksRequest(server string, mealPlanID string, body POSTMealPlansMealPlanIDTasksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTMealPlansMealPlanIDTasksRequestWithBody(server, mealPlanID, "application/json", bodyReader)
}

// NewPOSTMealPlansMealPlanIDTasksRequestWithBody generates requests for POSTMealPlansMealPlanIDTasks with any type of body
func NewPOSTMealPlansMealPlanIDTasksRequestWithBody(server string, mealPlanID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETMealPlansMealPlanIDTasksMealPlanTaskIDRequest generates requests for GETMealPlansMealPlanIDTasksMealPlanTaskID
func NewGETMealPlansMealPlanIDTasksMealPlanTaskIDRequest(server string, mealPlanID string, mealPlanTaskID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanTaskID", runtime.ParamLocationPath, mealPlanTaskID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/tasks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPATCHMealPlansMealPlanIDTasksMealPlanTaskIDRequest calls the generic PATCHMealPlansMealPlanIDTasksMealPlanTaskID builder with application/json body
func NewPATCHMealPlansMealPlanIDTasksMealPlanTaskIDRequest(server string, mealPlanID string, mealPlanTaskID string, body PATCHMealPlansMealPlanIDTasksMealPlanTaskIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPATCHMealPlansMealPlanIDTasksMealPlanTaskIDRequestWithBody(server, mealPlanID, mealPlanTaskID, "application/json", bodyReader)
}

// NewPATCHMealPlansMealPlanIDTasksMealPlanTaskIDRequestWithBody generates requests for PATCHMealPlansMealPlanIDTasksMealPlanTaskID with any type of body
func NewPATCHMealPlansMealPlanIDTasksMealPlanTaskIDRequestWithBody(server string, mealPlanID string, mealPlanTaskID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealPlanID", runtime.ParamLocationPath, mealPlanID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "mealPlanTaskID", runtime.ParamLocationPath, mealPlanTaskID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meal_plans/%s/tasks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETMealsRequest generates requests for GETMeals
func NewGETMealsRequest(server string, params *GETMealsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meals")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTMealsRequest calls the generic POSTMeals builder with application/json body
func NewPOSTMealsRequest(server string, body POSTMealsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTMealsRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTMealsRequestWithBody generates requests for POSTMeals with any type of body
func NewPOSTMealsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meals")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETMealsSearchRequest generates requests for GETMealsSearch
func NewGETMealsSearchRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meals/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDELETEMealsMealIDRequest generates requests for DELETEMealsMealID
func NewDELETEMealsMealIDRequest(server string, mealID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealID", runtime.ParamLocationPath, mealID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meals/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETMealsMealIDRequest generates requests for GETMealsMealID
func NewGETMealsMealIDRequest(server string, mealID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mealID", runtime.ParamLocationPath, mealID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/meals/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETOauth2ClientsRequest generates requests for GETOauth2Clients
func NewGETOauth2ClientsRequest(server string, params *GETOauth2ClientsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/oauth2_clients")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTOauth2ClientsRequest calls the generic POSTOauth2Clients builder with application/json body
func NewPOSTOauth2ClientsRequest(server string, body POSTOauth2ClientsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTOauth2ClientsRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTOauth2ClientsRequestWithBody generates requests for POSTOauth2Clients with any type of body
func NewPOSTOauth2ClientsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/oauth2_clients")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDELETEOauth2ClientsOauth2ClientIDRequest generates requests for DELETEOauth2ClientsOauth2ClientID
func NewDELETEOauth2ClientsOauth2ClientIDRequest(server string, oauth2ClientID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "oauth2ClientID", runtime.ParamLocationPath, oauth2ClientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/oauth2_clients/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETOauth2ClientsOauth2ClientIDRequest generates requests for GETOauth2ClientsOauth2ClientID
func NewGETOauth2ClientsOauth2ClientIDRequest(server string, oauth2ClientID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "oauth2ClientID", runtime.ParamLocationPath, oauth2ClientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/oauth2_clients/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETRecipesRequest generates requests for GETRecipes
func NewGETRecipesRequest(server string, params *GETRecipesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTRecipesRequest calls the generic POSTRecipes builder with application/json body
func NewPOSTRecipesRequest(server string, body POSTRecipesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTRecipesRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTRecipesRequestWithBody generates requests for POSTRecipes with any type of body
func NewPOSTRecipesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETRecipesSearchRequest generates requests for GETRecipesSearch
func NewGETRecipesSearchRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDELETERecipesRecipeIDRequest generates requests for DELETERecipesRecipeID
func NewDELETERecipesRecipeIDRequest(server string, recipeID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETRecipesRecipeIDRequest generates requests for GETRecipesRecipeID
func NewGETRecipesRecipeIDRequest(server string, recipeID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTRecipesRecipeIDRequest calls the generic PUTRecipesRecipeID builder with application/json body
func NewPUTRecipesRecipeIDRequest(server string, recipeID string, body PUTRecipesRecipeIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTRecipesRecipeIDRequestWithBody(server, recipeID, "application/json", bodyReader)
}

// NewPUTRecipesRecipeIDRequestWithBody generates requests for PUTRecipesRecipeID with any type of body
func NewPUTRecipesRecipeIDRequestWithBody(server string, recipeID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPOSTRecipesRecipeIDCloneRequest generates requests for POSTRecipesRecipeIDClone
func NewPOSTRecipesRecipeIDCloneRequest(server string, recipeID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/clone", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETRecipesRecipeIDDagRequest generates requests for GETRecipesRecipeIDDag
func NewGETRecipesRecipeIDDagRequest(server string, recipeID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/dag", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTRecipesRecipeIDImagesRequest generates requests for POSTRecipesRecipeIDImages
func NewPOSTRecipesRecipeIDImagesRequest(server string, recipeID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/images", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETRecipesRecipeIDMermaidRequest generates requests for GETRecipesRecipeIDMermaid
func NewGETRecipesRecipeIDMermaidRequest(server string, recipeID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/mermaid", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETRecipesRecipeIDPrepStepsRequest generates requests for GETRecipesRecipeIDPrepSteps
func NewGETRecipesRecipeIDPrepStepsRequest(server string, recipeID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/prep_steps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETRecipesRecipeIDPrepTasksRequest generates requests for GETRecipesRecipeIDPrepTasks
func NewGETRecipesRecipeIDPrepTasksRequest(server string, recipeID string, params *GETRecipesRecipeIDPrepTasksParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/prep_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTRecipesRecipeIDPrepTasksRequest calls the generic POSTRecipesRecipeIDPrepTasks builder with application/json body
func NewPOSTRecipesRecipeIDPrepTasksRequest(server string, recipeID string, body POSTRecipesRecipeIDPrepTasksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTRecipesRecipeIDPrepTasksRequestWithBody(server, recipeID, "application/json", bodyReader)
}

// NewPOSTRecipesRecipeIDPrepTasksRequestWithBody generates requests for POSTRecipesRecipeIDPrepTasks with any type of body
func NewPOSTRecipesRecipeIDPrepTasksRequestWithBody(server string, recipeID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/prep_tasks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDELETERecipesRecipeIDPrepTasksRecipePrepTaskIDRequest generates requests for DELETERecipesRecipeIDPrepTasksRecipePrepTaskID
func NewDELETERecipesRecipeIDPrepTasksRecipePrepTaskIDRequest(server string, recipeID string, recipePrepTaskID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipePrepTaskID", runtime.ParamLocationPath, recipePrepTaskID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/prep_tasks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETRecipesRecipeIDPrepTasksRecipePrepTaskIDRequest generates requests for GETRecipesRecipeIDPrepTasksRecipePrepTaskID
func NewGETRecipesRecipeIDPrepTasksRecipePrepTaskIDRequest(server string, recipeID string, recipePrepTaskID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipePrepTaskID", runtime.ParamLocationPath, recipePrepTaskID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/prep_tasks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTRecipesRecipeIDPrepTasksRecipePrepTaskIDRequest calls the generic PUTRecipesRecipeIDPrepTasksRecipePrepTaskID builder with application/json body
func NewPUTRecipesRecipeIDPrepTasksRecipePrepTaskIDRequest(server string, recipeID string, recipePrepTaskID string, body PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTRecipesRecipeIDPrepTasksRecipePrepTaskIDRequestWithBody(server, recipeID, recipePrepTaskID, "application/json", bodyReader)
}

// NewPUTRecipesRecipeIDPrepTasksRecipePrepTaskIDRequestWithBody generates requests for PUTRecipesRecipeIDPrepTasksRecipePrepTaskID with any type of body
func NewPUTRecipesRecipeIDPrepTasksRecipePrepTaskIDRequestWithBody(server string, recipeID string, recipePrepTaskID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipePrepTaskID", runtime.ParamLocationPath, recipePrepTaskID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/prep_tasks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETRecipesRecipeIDRatingsRequest generates requests for GETRecipesRecipeIDRatings
func NewGETRecipesRecipeIDRatingsRequest(server string, recipeID string, params *GETRecipesRecipeIDRatingsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/ratings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTRecipesRecipeIDRatingsRequest calls the generic POSTRecipesRecipeIDRatings builder with application/json body
func NewPOSTRecipesRecipeIDRatingsRequest(server string, recipeID string, body POSTRecipesRecipeIDRatingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTRecipesRecipeIDRatingsRequestWithBody(server, recipeID, "application/json", bodyReader)
}

// NewPOSTRecipesRecipeIDRatingsRequestWithBody generates requests for POSTRecipesRecipeIDRatings with any type of body
func NewPOSTRecipesRecipeIDRatingsRequestWithBody(server string, recipeID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/ratings", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDELETERecipesRecipeIDRatingsRecipeRatingIDRequest generates requests for DELETERecipesRecipeIDRatingsRecipeRatingID
func NewDELETERecipesRecipeIDRatingsRecipeRatingIDRequest(server string, recipeID string, recipeRatingID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeRatingID", runtime.ParamLocationPath, recipeRatingID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/ratings/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETRecipesRecipeIDRatingsRecipeRatingIDRequest generates requests for GETRecipesRecipeIDRatingsRecipeRatingID
func NewGETRecipesRecipeIDRatingsRecipeRatingIDRequest(server string, recipeID string, recipeRatingID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeRatingID", runtime.ParamLocationPath, recipeRatingID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/ratings/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTRecipesRecipeIDRatingsRecipeRatingIDRequest calls the generic PUTRecipesRecipeIDRatingsRecipeRatingID builder with application/json body
func NewPUTRecipesRecipeIDRatingsRecipeRatingIDRequest(server string, recipeID string, recipeRatingID string, body PUTRecipesRecipeIDRatingsRecipeRatingIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTRecipesRecipeIDRatingsRecipeRatingIDRequestWithBody(server, recipeID, recipeRatingID, "application/json", bodyReader)
}

// NewPUTRecipesRecipeIDRatingsRecipeRatingIDRequestWithBody generates requests for PUTRecipesRecipeIDRatingsRecipeRatingID with any type of body
func NewPUTRecipesRecipeIDRatingsRecipeRatingIDRequestWithBody(server string, recipeID string, recipeRatingID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeRatingID", runtime.ParamLocationPath, recipeRatingID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/ratings/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETRecipesRecipeIDStepsRequest generates requests for GETRecipesRecipeIDSteps
func NewGETRecipesRecipeIDStepsRequest(server string, recipeID string, params *GETRecipesRecipeIDStepsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTRecipesRecipeIDStepsRequest calls the generic POSTRecipesRecipeIDSteps builder with application/json body
func NewPOSTRecipesRecipeIDStepsRequest(server string, recipeID string, body POSTRecipesRecipeIDStepsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTRecipesRecipeIDStepsRequestWithBody(server, recipeID, "application/json", bodyReader)
}

// NewPOSTRecipesRecipeIDStepsRequestWithBody generates requests for POSTRecipesRecipeIDSteps with any type of body
func NewPOSTRecipesRecipeIDStepsRequestWithBody(server string, recipeID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDELETERecipesRecipeIDStepsRecipeStepIDRequest generates requests for DELETERecipesRecipeIDStepsRecipeStepID
func NewDELETERecipesRecipeIDStepsRecipeStepIDRequest(server string, recipeID string, recipeStepID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETRecipesRecipeIDStepsRecipeStepIDRequest generates requests for GETRecipesRecipeIDStepsRecipeStepID
func NewGETRecipesRecipeIDStepsRecipeStepIDRequest(server string, recipeID string, recipeStepID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTRecipesRecipeIDStepsRecipeStepIDRequest calls the generic PUTRecipesRecipeIDStepsRecipeStepID builder with application/json body
func NewPUTRecipesRecipeIDStepsRecipeStepIDRequest(server string, recipeID string, recipeStepID string, body PUTRecipesRecipeIDStepsRecipeStepIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTRecipesRecipeIDStepsRecipeStepIDRequestWithBody(server, recipeID, recipeStepID, "application/json", bodyReader)
}

// NewPUTRecipesRecipeIDStepsRecipeStepIDRequestWithBody generates requests for PUTRecipesRecipeIDStepsRecipeStepID with any type of body
func NewPUTRecipesRecipeIDStepsRecipeStepIDRequestWithBody(server string, recipeID string, recipeStepID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRequest generates requests for GETRecipesRecipeIDStepsRecipeStepIDCompletionConditions
func NewGETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRequest(server string, recipeID string, recipeStepID string, params *GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/completion_conditions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRequest calls the generic POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditions builder with application/json body
func NewPOSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRequest(server string, recipeID string, recipeStepID string, body POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRequestWithBody(server, recipeID, recipeStepID, "application/json", bodyReader)
}

// NewPOSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRequestWithBody generates requests for POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditions with any type of body
func NewPOSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRequestWithBody(server string, recipeID string, recipeStepID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/completion_conditions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDELETERecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDRequest generates requests for DELETERecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionID
func NewDELETERecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDRequest(server string, recipeID string, recipeStepID string, recipeStepCompletionConditionID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepCompletionConditionID", runtime.ParamLocationPath, recipeStepCompletionConditionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/completion_conditions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDRequest generates requests for GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionID
func NewGETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDRequest(server string, recipeID string, recipeStepID string, recipeStepCompletionConditionID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepCompletionConditionID", runtime.ParamLocationPath, recipeStepCompletionConditionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/completion_conditions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDRequest calls the generic PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionID builder with application/json body
func NewPUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDRequest(server string, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, body PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDRequestWithBody(server, recipeID, recipeStepID, recipeStepCompletionConditionID, "application/json", bodyReader)
}

// NewPUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDRequestWithBody generates requests for PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionID with any type of body
func NewPUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDRequestWithBody(server string, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepCompletionConditionID", runtime.ParamLocationPath, recipeStepCompletionConditionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/completion_conditions/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPOSTRecipesRecipeIDStepsRecipeStepIDImagesRequest generates requests for POSTRecipesRecipeIDStepsRecipeStepIDImages
func NewPOSTRecipesRecipeIDStepsRecipeStepIDImagesRequest(server string, recipeID string, recipeStepID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/images", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETRecipesRecipeIDStepsRecipeStepIDIngredientsRequest generates requests for GETRecipesRecipeIDStepsRecipeStepIDIngredients
func NewGETRecipesRecipeIDStepsRecipeStepIDIngredientsRequest(server string, recipeID string, recipeStepID string, params *GETRecipesRecipeIDStepsRecipeStepIDIngredientsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/ingredients", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTRecipesRecipeIDStepsRecipeStepIDIngredientsRequest calls the generic POSTRecipesRecipeIDStepsRecipeStepIDIngredients builder with application/json body
func NewPOSTRecipesRecipeIDStepsRecipeStepIDIngredientsRequest(server string, recipeID string, recipeStepID string, body POSTRecipesRecipeIDStepsRecipeStepIDIngredientsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTRecipesRecipeIDStepsRecipeStepIDIngredientsRequestWithBody(server, recipeID, recipeStepID, "application/json", bodyReader)
}

// NewPOSTRecipesRecipeIDStepsRecipeStepIDIngredientsRequestWithBody generates requests for POSTRecipesRecipeIDStepsRecipeStepIDIngredients with any type of body
func NewPOSTRecipesRecipeIDStepsRecipeStepIDIngredientsRequestWithBody(server string, recipeID string, recipeStepID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/ingredients", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDELETERecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDRequest generates requests for DELETERecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientID
func NewDELETERecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDRequest(server string, recipeID string, recipeStepID string, recipeStepIngredientID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepIngredientID", runtime.ParamLocationPath, recipeStepIngredientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/ingredients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDRequest generates requests for GETRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientID
func NewGETRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDRequest(server string, recipeID string, recipeStepID string, recipeStepIngredientID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepIngredientID", runtime.ParamLocationPath, recipeStepIngredientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/ingredients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDRequest calls the generic PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientID builder with application/json body
func NewPUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDRequest(server string, recipeID string, recipeStepID string, recipeStepIngredientID string, body PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDRequestWithBody(server, recipeID, recipeStepID, recipeStepIngredientID, "application/json", bodyReader)
}

// NewPUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDRequestWithBody generates requests for PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientID with any type of body
func NewPUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDRequestWithBody(server string, recipeID string, recipeStepID string, recipeStepIngredientID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepIngredientID", runtime.ParamLocationPath, recipeStepIngredientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/ingredients/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETRecipesRecipeIDStepsRecipeStepIDInstrumentsRequest generates requests for GETRecipesRecipeIDStepsRecipeStepIDInstruments
func NewGETRecipesRecipeIDStepsRecipeStepIDInstrumentsRequest(server string, recipeID string, recipeStepID string, params *GETRecipesRecipeIDStepsRecipeStepIDInstrumentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/instruments", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTRecipesRecipeIDStepsRecipeStepIDInstrumentsRequest calls the generic POSTRecipesRecipeIDStepsRecipeStepIDInstruments builder with application/json body
func NewPOSTRecipesRecipeIDStepsRecipeStepIDInstrumentsRequest(server string, recipeID string, recipeStepID string, body POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTRecipesRecipeIDStepsRecipeStepIDInstrumentsRequestWithBody(server, recipeID, recipeStepID, "application/json", bodyReader)
}

// NewPOSTRecipesRecipeIDStepsRecipeStepIDInstrumentsRequestWithBody generates requests for POSTRecipesRecipeIDStepsRecipeStepIDInstruments with any type of body
func NewPOSTRecipesRecipeIDStepsRecipeStepIDInstrumentsRequestWithBody(server string, recipeID string, recipeStepID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/instruments", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDELETERecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDRequest generates requests for DELETERecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentID
func NewDELETERecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDRequest(server string, recipeID string, recipeStepID string, recipeStepInstrumentID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepInstrumentID", runtime.ParamLocationPath, recipeStepInstrumentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/instruments/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDRequest generates requests for GETRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentID
func NewGETRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDRequest(server string, recipeID string, recipeStepID string, recipeStepInstrumentID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepInstrumentID", runtime.ParamLocationPath, recipeStepInstrumentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/instruments/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDRequest calls the generic PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentID builder with application/json body
func NewPUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDRequest(server string, recipeID string, recipeStepID string, recipeStepInstrumentID string, body PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDRequestWithBody(server, recipeID, recipeStepID, recipeStepInstrumentID, "application/json", bodyReader)
}

// NewPUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDRequestWithBody generates requests for PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentID with any type of body
func NewPUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDRequestWithBody(server string, recipeID string, recipeStepID string, recipeStepInstrumentID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepInstrumentID", runtime.ParamLocationPath, recipeStepInstrumentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/instruments/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETRecipesRecipeIDStepsRecipeStepIDProductsRequest generates requests for GETRecipesRecipeIDStepsRecipeStepIDProducts
func NewGETRecipesRecipeIDStepsRecipeStepIDProductsRequest(server string, recipeID string, recipeStepID string, params *GETRecipesRecipeIDStepsRecipeStepIDProductsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/products", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTRecipesRecipeIDStepsRecipeStepIDProductsRequest calls the generic POSTRecipesRecipeIDStepsRecipeStepIDProducts builder with application/json body
func NewPOSTRecipesRecipeIDStepsRecipeStepIDProductsRequest(server string, recipeID string, recipeStepID string, body POSTRecipesRecipeIDStepsRecipeStepIDProductsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTRecipesRecipeIDStepsRecipeStepIDProductsRequestWithBody(server, recipeID, recipeStepID, "application/json", bodyReader)
}

// NewPOSTRecipesRecipeIDStepsRecipeStepIDProductsRequestWithBody generates requests for POSTRecipesRecipeIDStepsRecipeStepIDProducts with any type of body
func NewPOSTRecipesRecipeIDStepsRecipeStepIDProductsRequestWithBody(server string, recipeID string, recipeStepID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/products", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDELETERecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDRequest generates requests for DELETERecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductID
func NewDELETERecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDRequest(server string, recipeID string, recipeStepID string, recipeStepProductID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepProductID", runtime.ParamLocationPath, recipeStepProductID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/products/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDRequest generates requests for GETRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductID
func NewGETRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDRequest(server string, recipeID string, recipeStepID string, recipeStepProductID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepProductID", runtime.ParamLocationPath, recipeStepProductID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/products/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDRequest calls the generic PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductID builder with application/json body
func NewPUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDRequest(server string, recipeID string, recipeStepID string, recipeStepProductID string, body PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDRequestWithBody(server, recipeID, recipeStepID, recipeStepProductID, "application/json", bodyReader)
}

// NewPUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDRequestWithBody generates requests for PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductID with any type of body
func NewPUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDRequestWithBody(server string, recipeID string, recipeStepID string, recipeStepProductID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepProductID", runtime.ParamLocationPath, recipeStepProductID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/products/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETRecipesRecipeIDStepsRecipeStepIDVesselsRequest generates requests for GETRecipesRecipeIDStepsRecipeStepIDVessels
func NewGETRecipesRecipeIDStepsRecipeStepIDVesselsRequest(server string, recipeID string, recipeStepID string, params *GETRecipesRecipeIDStepsRecipeStepIDVesselsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/vessels", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTRecipesRecipeIDStepsRecipeStepIDVesselsRequest calls the generic POSTRecipesRecipeIDStepsRecipeStepIDVessels builder with application/json body
func NewPOSTRecipesRecipeIDStepsRecipeStepIDVesselsRequest(server string, recipeID string, recipeStepID string, body POSTRecipesRecipeIDStepsRecipeStepIDVesselsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTRecipesRecipeIDStepsRecipeStepIDVesselsRequestWithBody(server, recipeID, recipeStepID, "application/json", bodyReader)
}

// NewPOSTRecipesRecipeIDStepsRecipeStepIDVesselsRequestWithBody generates requests for POSTRecipesRecipeIDStepsRecipeStepIDVessels with any type of body
func NewPOSTRecipesRecipeIDStepsRecipeStepIDVesselsRequestWithBody(server string, recipeID string, recipeStepID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/vessels", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDELETERecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDRequest generates requests for DELETERecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselID
func NewDELETERecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDRequest(server string, recipeID string, recipeStepID string, recipeStepVesselID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepVesselID", runtime.ParamLocationPath, recipeStepVesselID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/vessels/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDRequest generates requests for GETRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselID
func NewGETRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDRequest(server string, recipeID string, recipeStepID string, recipeStepVesselID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepVesselID", runtime.ParamLocationPath, recipeStepVesselID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/vessels/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDRequest calls the generic PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselID builder with application/json body
func NewPUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDRequest(server string, recipeID string, recipeStepID string, recipeStepVesselID string, body PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDRequestWithBody(server, recipeID, recipeStepID, recipeStepVesselID, "application/json", bodyReader)
}

// NewPUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDRequestWithBody generates requests for PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselID with any type of body
func NewPUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDRequestWithBody(server string, recipeID string, recipeStepID string, recipeStepVesselID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "recipeID", runtime.ParamLocationPath, recipeID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "recipeStepID", runtime.ParamLocationPath, recipeStepID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "recipeStepVesselID", runtime.ParamLocationPath, recipeStepVesselID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/recipes/%s/steps/%s/vessels/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETSettingsRequest generates requests for GETSettings
func NewGETSettingsRequest(server string, params *GETSettingsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTSettingsRequest calls the generic POSTSettings builder with application/json body
func NewPOSTSettingsRequest(server string, body POSTSettingsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTSettingsRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTSettingsRequestWithBody generates requests for POSTSettings with any type of body
func NewPOSTSettingsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPOSTSettingsConfigurationsRequest calls the generic POSTSettingsConfigurations builder with application/json body
func NewPOSTSettingsConfigurationsRequest(server string, body POSTSettingsConfigurationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTSettingsConfigurationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTSettingsConfigurationsRequestWithBody generates requests for POSTSettingsConfigurations with any type of body
func NewPOSTSettingsConfigurationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings/configurations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETSettingsConfigurationsHouseholdRequest generates requests for GETSettingsConfigurationsHousehold
func NewGETSettingsConfigurationsHouseholdRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings/configurations/household")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETSettingsConfigurationsUserRequest generates requests for GETSettingsConfigurationsUser
func NewGETSettingsConfigurationsUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings/configurations/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETSettingsConfigurationsUserServiceSettingConfigurationNameRequest generates requests for GETSettingsConfigurationsUserServiceSettingConfigurationName
func NewGETSettingsConfigurationsUserServiceSettingConfigurationNameRequest(server string, serviceSettingConfigurationName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceSettingConfigurationName", runtime.ParamLocationPath, serviceSettingConfigurationName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings/configurations/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDELETESettingsConfigurationsServiceSettingConfigurationIDRequest generates requests for DELETESettingsConfigurationsServiceSettingConfigurationID
func NewDELETESettingsConfigurationsServiceSettingConfigurationIDRequest(server string, serviceSettingConfigurationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceSettingConfigurationID", runtime.ParamLocationPath, serviceSettingConfigurationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings/configurations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTSettingsConfigurationsServiceSettingConfigurationIDRequest calls the generic PUTSettingsConfigurationsServiceSettingConfigurationID builder with application/json body
func NewPUTSettingsConfigurationsServiceSettingConfigurationIDRequest(server string, serviceSettingConfigurationID string, body PUTSettingsConfigurationsServiceSettingConfigurationIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTSettingsConfigurationsServiceSettingConfigurationIDRequestWithBody(server, serviceSettingConfigurationID, "application/json", bodyReader)
}

// NewPUTSettingsConfigurationsServiceSettingConfigurationIDRequestWithBody generates requests for PUTSettingsConfigurationsServiceSettingConfigurationID with any type of body
func NewPUTSettingsConfigurationsServiceSettingConfigurationIDRequestWithBody(server string, serviceSettingConfigurationID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceSettingConfigurationID", runtime.ParamLocationPath, serviceSettingConfigurationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings/configurations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETSettingsSearchRequest generates requests for GETSettingsSearch
func NewGETSettingsSearchRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDELETESettingsServiceSettingIDRequest generates requests for DELETESettingsServiceSettingID
func NewDELETESettingsServiceSettingIDRequest(server string, serviceSettingID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceSettingID", runtime.ParamLocationPath, serviceSettingID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETSettingsServiceSettingIDRequest generates requests for GETSettingsServiceSettingID
func NewGETSettingsServiceSettingIDRequest(server string, serviceSettingID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceSettingID", runtime.ParamLocationPath, serviceSettingID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/settings/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETUserIngredientPreferencesRequest generates requests for GETUserIngredientPreferences
func NewGETUserIngredientPreferencesRequest(server string, params *GETUserIngredientPreferencesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user_ingredient_preferences")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTUserIngredientPreferencesRequest calls the generic POSTUserIngredientPreferences builder with application/json body
func NewPOSTUserIngredientPreferencesRequest(server string, body POSTUserIngredientPreferencesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTUserIngredientPreferencesRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTUserIngredientPreferencesRequestWithBody generates requests for POSTUserIngredientPreferences with any type of body
func NewPOSTUserIngredientPreferencesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user_ingredient_preferences")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDELETEUserIngredientPreferencesUserIngredientPreferenceIDRequest generates requests for DELETEUserIngredientPreferencesUserIngredientPreferenceID
func NewDELETEUserIngredientPreferencesUserIngredientPreferenceIDRequest(server string, userIngredientPreferenceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userIngredientPreferenceID", runtime.ParamLocationPath, userIngredientPreferenceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user_ingredient_preferences/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTUserIngredientPreferencesUserIngredientPreferenceIDRequest calls the generic PUTUserIngredientPreferencesUserIngredientPreferenceID builder with application/json body
func NewPUTUserIngredientPreferencesUserIngredientPreferenceIDRequest(server string, userIngredientPreferenceID string, body PUTUserIngredientPreferencesUserIngredientPreferenceIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTUserIngredientPreferencesUserIngredientPreferenceIDRequestWithBody(server, userIngredientPreferenceID, "application/json", bodyReader)
}

// NewPUTUserIngredientPreferencesUserIngredientPreferenceIDRequestWithBody generates requests for PUTUserIngredientPreferencesUserIngredientPreferenceID with any type of body
func NewPUTUserIngredientPreferencesUserIngredientPreferenceIDRequestWithBody(server string, userIngredientPreferenceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userIngredientPreferenceID", runtime.ParamLocationPath, userIngredientPreferenceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user_ingredient_preferences/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETUserNotificationsRequest generates requests for GETUserNotifications
func NewGETUserNotificationsRequest(server string, params *GETUserNotificationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user_notifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTUserNotificationsRequest calls the generic POSTUserNotifications builder with application/json body
func NewPOSTUserNotificationsRequest(server string, body POSTUserNotificationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTUserNotificationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTUserNotificationsRequestWithBody generates requests for POSTUserNotifications with any type of body
func NewPOSTUserNotificationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user_notifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETUserNotificationsUserNotificationIDRequest generates requests for GETUserNotificationsUserNotificationID
func NewGETUserNotificationsUserNotificationIDRequest(server string, userNotificationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userNotificationID", runtime.ParamLocationPath, userNotificationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user_notifications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPATCHUserNotificationsUserNotificationIDRequest calls the generic PATCHUserNotificationsUserNotificationID builder with application/json body
func NewPATCHUserNotificationsUserNotificationIDRequest(server string, userNotificationID string, body PATCHUserNotificationsUserNotificationIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPATCHUserNotificationsUserNotificationIDRequestWithBody(server, userNotificationID, "application/json", bodyReader)
}

// NewPATCHUserNotificationsUserNotificationIDRequestWithBody generates requests for PATCHUserNotificationsUserNotificationID with any type of body
func NewPATCHUserNotificationsUserNotificationIDRequestWithBody(server string, userNotificationID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userNotificationID", runtime.ParamLocationPath, userNotificationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/user_notifications/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETUsersRequest generates requests for GETUsers
func NewGETUsersRequest(server string, params *GETUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTUsersAvatarUploadRequest calls the generic POSTUsersAvatarUpload builder with application/json body
func NewPOSTUsersAvatarUploadRequest(server string, body POSTUsersAvatarUploadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTUsersAvatarUploadRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTUsersAvatarUploadRequestWithBody generates requests for POSTUsersAvatarUpload with any type of body
func NewPOSTUsersAvatarUploadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/avatar/upload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPUTUsersDetailsRequest calls the generic PUTUsersDetails builder with application/json body
func NewPUTUsersDetailsRequest(server string, body PUTUsersDetailsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTUsersDetailsRequestWithBody(server, "application/json", bodyReader)
}

// NewPUTUsersDetailsRequestWithBody generates requests for PUTUsersDetails with any type of body
func NewPUTUsersDetailsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/details")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPUTUsersEmailAddressRequest calls the generic PUTUsersEmailAddress builder with application/json body
func NewPUTUsersEmailAddressRequest(server string, body PUTUsersEmailAddressJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTUsersEmailAddressRequestWithBody(server, "application/json", bodyReader)
}

// NewPUTUsersEmailAddressRequestWithBody generates requests for PUTUsersEmailAddress with any type of body
func NewPUTUsersEmailAddressRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/email_address")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPOSTUsersEmailAddressVerificationRequest calls the generic POSTUsersEmailAddressVerification builder with application/json body
func NewPOSTUsersEmailAddressVerificationRequest(server string, body POSTUsersEmailAddressVerificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTUsersEmailAddressVerificationRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTUsersEmailAddressVerificationRequestWithBody generates requests for POSTUsersEmailAddressVerification with any type of body
func NewPOSTUsersEmailAddressVerificationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/email_address_verification")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPOSTUsersHouseholdSelectRequest calls the generic POSTUsersHouseholdSelect builder with application/json body
func NewPOSTUsersHouseholdSelectRequest(server string, body POSTUsersHouseholdSelectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTUsersHouseholdSelectRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTUsersHouseholdSelectRequestWithBody generates requests for POSTUsersHouseholdSelect with any type of body
func NewPOSTUsersHouseholdSelectRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/household/select")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPUTUsersPasswordNewRequest calls the generic PUTUsersPasswordNew builder with application/json body
func NewPUTUsersPasswordNewRequest(server string, body PUTUsersPasswordNewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTUsersPasswordNewRequestWithBody(server, "application/json", bodyReader)
}

// NewPUTUsersPasswordNewRequestWithBody generates requests for PUTUsersPasswordNew with any type of body
func NewPUTUsersPasswordNewRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/password/new")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPOSTUsersPermissionsCheckRequest calls the generic POSTUsersPermissionsCheck builder with application/json body
func NewPOSTUsersPermissionsCheckRequest(server string, body POSTUsersPermissionsCheckJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTUsersPermissionsCheckRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTUsersPermissionsCheckRequestWithBody generates requests for POSTUsersPermissionsCheck with any type of body
func NewPOSTUsersPermissionsCheckRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/permissions/check")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETUsersSearchRequest generates requests for GETUsersSearch
func NewGETUsersSearchRequest(server string, params *GETUsersSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETUsersSelfRequest generates requests for GETUsersSelf
func NewGETUsersSelfRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/self")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTUsersTotpSecretNewRequest calls the generic POSTUsersTotpSecretNew builder with application/json body
func NewPOSTUsersTotpSecretNewRequest(server string, body POSTUsersTotpSecretNewJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTUsersTotpSecretNewRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTUsersTotpSecretNewRequestWithBody generates requests for POSTUsersTotpSecretNew with any type of body
func NewPOSTUsersTotpSecretNewRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/totp_secret/new")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPUTUsersUsernameRequest calls the generic PUTUsersUsername builder with application/json body
func NewPUTUsersUsernameRequest(server string, body PUTUsersUsernameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTUsersUsernameRequestWithBody(server, "application/json", bodyReader)
}

// NewPUTUsersUsernameRequestWithBody generates requests for PUTUsersUsername with any type of body
func NewPUTUsersUsernameRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/username")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDELETEUsersUserIDRequest generates requests for DELETEUsersUserID
func NewDELETEUsersUserIDRequest(server string, userID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userID", runtime.ParamLocationPath, userID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETUsersUserIDRequest generates requests for GETUsersUserID
func NewGETUsersUserIDRequest(server string, userID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userID", runtime.ParamLocationPath, userID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETValidIngredientGroupsRequest generates requests for GETValidIngredientGroups
func NewGETValidIngredientGroupsRequest(server string, params *GETValidIngredientGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTValidIngredientGroupsRequest calls the generic POSTValidIngredientGroups builder with application/json body
func NewPOSTValidIngredientGroupsRequest(server string, body POSTValidIngredientGroupsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTValidIngredientGroupsRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTValidIngredientGroupsRequestWithBody generates requests for POSTValidIngredientGroups with any type of body
func NewPOSTValidIngredientGroupsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETValidIngredientGroupsSearchRequest generates requests for GETValidIngredientGroupsSearch
func NewGETValidIngredientGroupsSearchRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_groups/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDELETEValidIngredientGroupsValidIngredientGroupIDRequest generates requests for DELETEValidIngredientGroupsValidIngredientGroupID
func NewDELETEValidIngredientGroupsValidIngredientGroupIDRequest(server string, validIngredientGroupID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientGroupID", runtime.ParamLocationPath, validIngredientGroupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETValidIngredientGroupsValidIngredientGroupIDRequest generates requests for GETValidIngredientGroupsValidIngredientGroupID
func NewGETValidIngredientGroupsValidIngredientGroupIDRequest(server string, validIngredientGroupID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientGroupID", runtime.ParamLocationPath, validIngredientGroupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTValidIngredientGroupsValidIngredientGroupIDRequest calls the generic PUTValidIngredientGroupsValidIngredientGroupID builder with application/json body
func NewPUTValidIngredientGroupsValidIngredientGroupIDRequest(server string, validIngredientGroupID string, body PUTValidIngredientGroupsValidIngredientGroupIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTValidIngredientGroupsValidIngredientGroupIDRequestWithBody(server, validIngredientGroupID, "application/json", bodyReader)
}

// NewPUTValidIngredientGroupsValidIngredientGroupIDRequestWithBody generates requests for PUTValidIngredientGroupsValidIngredientGroupID with any type of body
func NewPUTValidIngredientGroupsValidIngredientGroupIDRequestWithBody(server string, validIngredientGroupID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientGroupID", runtime.ParamLocationPath, validIngredientGroupID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETValidIngredientMeasurementUnitsRequest generates requests for GETValidIngredientMeasurementUnits
func NewGETValidIngredientMeasurementUnitsRequest(server string, params *GETValidIngredientMeasurementUnitsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_measurement_units")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTValidIngredientMeasurementUnitsRequest calls the generic POSTValidIngredientMeasurementUnits builder with application/json body
func NewPOSTValidIngredientMeasurementUnitsRequest(server string, body POSTValidIngredientMeasurementUnitsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTValidIngredientMeasurementUnitsRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTValidIngredientMeasurementUnitsRequestWithBody generates requests for POSTValidIngredientMeasurementUnits with any type of body
func NewPOSTValidIngredientMeasurementUnitsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_measurement_units")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETValidIngredientMeasurementUnitsByIngredientValidIngredientIDRequest generates requests for GETValidIngredientMeasurementUnitsByIngredientValidIngredientID
func NewGETValidIngredientMeasurementUnitsByIngredientValidIngredientIDRequest(server string, validIngredientID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientID", runtime.ParamLocationPath, validIngredientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_measurement_units/by_ingredient/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETValidIngredientMeasurementUnitsByMeasurementUnitValidMeasurementUnitIDRequest generates requests for GETValidIngredientMeasurementUnitsByMeasurementUnitValidMeasurementUnitID
func NewGETValidIngredientMeasurementUnitsByMeasurementUnitValidMeasurementUnitIDRequest(server string, validMeasurementUnitID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validMeasurementUnitID", runtime.ParamLocationPath, validMeasurementUnitID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_measurement_units/by_measurement_unit/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDELETEValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDRequest generates requests for DELETEValidIngredientMeasurementUnitsValidIngredientMeasurementUnitID
func NewDELETEValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDRequest(server string, validIngredientMeasurementUnitID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientMeasurementUnitID", runtime.ParamLocationPath, validIngredientMeasurementUnitID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_measurement_units/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDRequest generates requests for GETValidIngredientMeasurementUnitsValidIngredientMeasurementUnitID
func NewGETValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDRequest(server string, validIngredientMeasurementUnitID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientMeasurementUnitID", runtime.ParamLocationPath, validIngredientMeasurementUnitID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_measurement_units/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDRequest calls the generic PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitID builder with application/json body
func NewPUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDRequest(server string, validIngredientMeasurementUnitID string, body PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDRequestWithBody(server, validIngredientMeasurementUnitID, "application/json", bodyReader)
}

// NewPUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDRequestWithBody generates requests for PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitID with any type of body
func NewPUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDRequestWithBody(server string, validIngredientMeasurementUnitID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientMeasurementUnitID", runtime.ParamLocationPath, validIngredientMeasurementUnitID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_measurement_units/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETValidIngredientPreparationsRequest generates requests for GETValidIngredientPreparations
func NewGETValidIngredientPreparationsRequest(server string, params *GETValidIngredientPreparationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_preparations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTValidIngredientPreparationsRequest calls the generic POSTValidIngredientPreparations builder with application/json body
func NewPOSTValidIngredientPreparationsRequest(server string, body POSTValidIngredientPreparationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTValidIngredientPreparationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTValidIngredientPreparationsRequestWithBody generates requests for POSTValidIngredientPreparations with any type of body
func NewPOSTValidIngredientPreparationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_preparations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETValidIngredientPreparationsByIngredientValidIngredientIDRequest generates requests for GETValidIngredientPreparationsByIngredientValidIngredientID
func NewGETValidIngredientPreparationsByIngredientValidIngredientIDRequest(server string, validIngredientID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientID", runtime.ParamLocationPath, validIngredientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_preparations/by_ingredient/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETValidIngredientPreparationsByPreparationValidPreparationIDRequest generates requests for GETValidIngredientPreparationsByPreparationValidPreparationID
func NewGETValidIngredientPreparationsByPreparationValidPreparationIDRequest(server string, validPreparationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validPreparationID", runtime.ParamLocationPath, validPreparationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_preparations/by_preparation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDELETEValidIngredientPreparationsValidIngredientPreparationIDRequest generates requests for DELETEValidIngredientPreparationsValidIngredientPreparationID
func NewDELETEValidIngredientPreparationsValidIngredientPreparationIDRequest(server string, validIngredientPreparationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientPreparationID", runtime.ParamLocationPath, validIngredientPreparationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_preparations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETValidIngredientPreparationsValidIngredientPreparationIDRequest generates requests for GETValidIngredientPreparationsValidIngredientPreparationID
func NewGETValidIngredientPreparationsValidIngredientPreparationIDRequest(server string, validIngredientPreparationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientPreparationID", runtime.ParamLocationPath, validIngredientPreparationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_preparations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTValidIngredientPreparationsValidIngredientPreparationIDRequest calls the generic PUTValidIngredientPreparationsValidIngredientPreparationID builder with application/json body
func NewPUTValidIngredientPreparationsValidIngredientPreparationIDRequest(server string, validIngredientPreparationID string, body PUTValidIngredientPreparationsValidIngredientPreparationIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTValidIngredientPreparationsValidIngredientPreparationIDRequestWithBody(server, validIngredientPreparationID, "application/json", bodyReader)
}

// NewPUTValidIngredientPreparationsValidIngredientPreparationIDRequestWithBody generates requests for PUTValidIngredientPreparationsValidIngredientPreparationID with any type of body
func NewPUTValidIngredientPreparationsValidIngredientPreparationIDRequestWithBody(server string, validIngredientPreparationID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientPreparationID", runtime.ParamLocationPath, validIngredientPreparationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_preparations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETValidIngredientStateIngredientsRequest generates requests for GETValidIngredientStateIngredients
func NewGETValidIngredientStateIngredientsRequest(server string, params *GETValidIngredientStateIngredientsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_state_ingredients")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTValidIngredientStateIngredientsRequest calls the generic POSTValidIngredientStateIngredients builder with application/json body
func NewPOSTValidIngredientStateIngredientsRequest(server string, body POSTValidIngredientStateIngredientsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTValidIngredientStateIngredientsRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTValidIngredientStateIngredientsRequestWithBody generates requests for POSTValidIngredientStateIngredients with any type of body
func NewPOSTValidIngredientStateIngredientsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_state_ingredients")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETValidIngredientStateIngredientsByIngredientValidIngredientIDRequest generates requests for GETValidIngredientStateIngredientsByIngredientValidIngredientID
func NewGETValidIngredientStateIngredientsByIngredientValidIngredientIDRequest(server string, validIngredientID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientID", runtime.ParamLocationPath, validIngredientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_state_ingredients/by_ingredient/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETValidIngredientStateIngredientsByIngredientStateValidIngredientStateIDRequest generates requests for GETValidIngredientStateIngredientsByIngredientStateValidIngredientStateID
func NewGETValidIngredientStateIngredientsByIngredientStateValidIngredientStateIDRequest(server string, validIngredientStateID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientStateID", runtime.ParamLocationPath, validIngredientStateID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_state_ingredients/by_ingredient_state/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDELETEValidIngredientStateIngredientsValidIngredientStateIngredientIDRequest generates requests for DELETEValidIngredientStateIngredientsValidIngredientStateIngredientID
func NewDELETEValidIngredientStateIngredientsValidIngredientStateIngredientIDRequest(server string, validIngredientStateIngredientID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientStateIngredientID", runtime.ParamLocationPath, validIngredientStateIngredientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_state_ingredients/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETValidIngredientStateIngredientsValidIngredientStateIngredientIDRequest generates requests for GETValidIngredientStateIngredientsValidIngredientStateIngredientID
func NewGETValidIngredientStateIngredientsValidIngredientStateIngredientIDRequest(server string, validIngredientStateIngredientID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientStateIngredientID", runtime.ParamLocationPath, validIngredientStateIngredientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_state_ingredients/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTValidIngredientStateIngredientsValidIngredientStateIngredientIDRequest calls the generic PUTValidIngredientStateIngredientsValidIngredientStateIngredientID builder with application/json body
func NewPUTValidIngredientStateIngredientsValidIngredientStateIngredientIDRequest(server string, validIngredientStateIngredientID string, body PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTValidIngredientStateIngredientsValidIngredientStateIngredientIDRequestWithBody(server, validIngredientStateIngredientID, "application/json", bodyReader)
}

// NewPUTValidIngredientStateIngredientsValidIngredientStateIngredientIDRequestWithBody generates requests for PUTValidIngredientStateIngredientsValidIngredientStateIngredientID with any type of body
func NewPUTValidIngredientStateIngredientsValidIngredientStateIngredientIDRequestWithBody(server string, validIngredientStateIngredientID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientStateIngredientID", runtime.ParamLocationPath, validIngredientStateIngredientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_state_ingredients/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETValidIngredientStatesRequest generates requests for GETValidIngredientStates
func NewGETValidIngredientStatesRequest(server string, params *GETValidIngredientStatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_states")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTValidIngredientStatesRequest calls the generic POSTValidIngredientStates builder with application/json body
func NewPOSTValidIngredientStatesRequest(server string, body POSTValidIngredientStatesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTValidIngredientStatesRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTValidIngredientStatesRequestWithBody generates requests for POSTValidIngredientStates with any type of body
func NewPOSTValidIngredientStatesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_states")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETValidIngredientStatesSearchRequest generates requests for GETValidIngredientStatesSearch
func NewGETValidIngredientStatesSearchRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_states/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDELETEValidIngredientStatesValidIngredientStateIDRequest generates requests for DELETEValidIngredientStatesValidIngredientStateID
func NewDELETEValidIngredientStatesValidIngredientStateIDRequest(server string, validIngredientStateID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientStateID", runtime.ParamLocationPath, validIngredientStateID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_states/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETValidIngredientStatesValidIngredientStateIDRequest generates requests for GETValidIngredientStatesValidIngredientStateID
func NewGETValidIngredientStatesValidIngredientStateIDRequest(server string, validIngredientStateID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientStateID", runtime.ParamLocationPath, validIngredientStateID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_states/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTValidIngredientStatesValidIngredientStateIDRequest calls the generic PUTValidIngredientStatesValidIngredientStateID builder with application/json body
func NewPUTValidIngredientStatesValidIngredientStateIDRequest(server string, validIngredientStateID string, body PUTValidIngredientStatesValidIngredientStateIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTValidIngredientStatesValidIngredientStateIDRequestWithBody(server, validIngredientStateID, "application/json", bodyReader)
}

// NewPUTValidIngredientStatesValidIngredientStateIDRequestWithBody generates requests for PUTValidIngredientStatesValidIngredientStateID with any type of body
func NewPUTValidIngredientStatesValidIngredientStateIDRequestWithBody(server string, validIngredientStateID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientStateID", runtime.ParamLocationPath, validIngredientStateID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredient_states/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETValidIngredientsRequest generates requests for GETValidIngredients
func NewGETValidIngredientsRequest(server string, params *GETValidIngredientsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredients")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTValidIngredientsRequest calls the generic POSTValidIngredients builder with application/json body
func NewPOSTValidIngredientsRequest(server string, body POSTValidIngredientsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTValidIngredientsRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTValidIngredientsRequestWithBody generates requests for POSTValidIngredients with any type of body
func NewPOSTValidIngredientsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredients")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETValidIngredientsByPreparationValidPreparationIDRequest generates requests for GETValidIngredientsByPreparationValidPreparationID
func NewGETValidIngredientsByPreparationValidPreparationIDRequest(server string, validPreparationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validPreparationID", runtime.ParamLocationPath, validPreparationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredients/by_preparation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETValidIngredientsRandomRequest generates requests for GETValidIngredientsRandom
func NewGETValidIngredientsRandomRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredients/random")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETValidIngredientsSearchRequest generates requests for GETValidIngredientsSearch
func NewGETValidIngredientsSearchRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredients/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDELETEValidIngredientsValidIngredientIDRequest generates requests for DELETEValidIngredientsValidIngredientID
func NewDELETEValidIngredientsValidIngredientIDRequest(server string, validIngredientID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientID", runtime.ParamLocationPath, validIngredientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredients/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETValidIngredientsValidIngredientIDRequest generates requests for GETValidIngredientsValidIngredientID
func NewGETValidIngredientsValidIngredientIDRequest(server string, validIngredientID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientID", runtime.ParamLocationPath, validIngredientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredients/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTValidIngredientsValidIngredientIDRequest calls the generic PUTValidIngredientsValidIngredientID builder with application/json body
func NewPUTValidIngredientsValidIngredientIDRequest(server string, validIngredientID string, body PUTValidIngredientsValidIngredientIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTValidIngredientsValidIngredientIDRequestWithBody(server, validIngredientID, "application/json", bodyReader)
}

// NewPUTValidIngredientsValidIngredientIDRequestWithBody generates requests for PUTValidIngredientsValidIngredientID with any type of body
func NewPUTValidIngredientsValidIngredientIDRequestWithBody(server string, validIngredientID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientID", runtime.ParamLocationPath, validIngredientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_ingredients/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETValidInstrumentsRequest generates requests for GETValidInstruments
func NewGETValidInstrumentsRequest(server string, params *GETValidInstrumentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_instruments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTValidInstrumentsRequest calls the generic POSTValidInstruments builder with application/json body
func NewPOSTValidInstrumentsRequest(server string, body POSTValidInstrumentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTValidInstrumentsRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTValidInstrumentsRequestWithBody generates requests for POSTValidInstruments with any type of body
func NewPOSTValidInstrumentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_instruments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETValidInstrumentsRandomRequest generates requests for GETValidInstrumentsRandom
func NewGETValidInstrumentsRandomRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_instruments/random")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETValidInstrumentsSearchRequest generates requests for GETValidInstrumentsSearch
func NewGETValidInstrumentsSearchRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_instruments/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDELETEValidInstrumentsValidInstrumentIDRequest generates requests for DELETEValidInstrumentsValidInstrumentID
func NewDELETEValidInstrumentsValidInstrumentIDRequest(server string, validInstrumentID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validInstrumentID", runtime.ParamLocationPath, validInstrumentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_instruments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETValidInstrumentsValidInstrumentIDRequest generates requests for GETValidInstrumentsValidInstrumentID
func NewGETValidInstrumentsValidInstrumentIDRequest(server string, validInstrumentID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validInstrumentID", runtime.ParamLocationPath, validInstrumentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_instruments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTValidInstrumentsValidInstrumentIDRequest calls the generic PUTValidInstrumentsValidInstrumentID builder with application/json body
func NewPUTValidInstrumentsValidInstrumentIDRequest(server string, validInstrumentID string, body PUTValidInstrumentsValidInstrumentIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTValidInstrumentsValidInstrumentIDRequestWithBody(server, validInstrumentID, "application/json", bodyReader)
}

// NewPUTValidInstrumentsValidInstrumentIDRequestWithBody generates requests for PUTValidInstrumentsValidInstrumentID with any type of body
func NewPUTValidInstrumentsValidInstrumentIDRequestWithBody(server string, validInstrumentID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validInstrumentID", runtime.ParamLocationPath, validInstrumentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_instruments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPOSTValidMeasurementConversionsRequest calls the generic POSTValidMeasurementConversions builder with application/json body
func NewPOSTValidMeasurementConversionsRequest(server string, body POSTValidMeasurementConversionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTValidMeasurementConversionsRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTValidMeasurementConversionsRequestWithBody generates requests for POSTValidMeasurementConversions with any type of body
func NewPOSTValidMeasurementConversionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_measurement_conversions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETValidMeasurementConversionsFromUnitValidMeasurementUnitIDRequest generates requests for GETValidMeasurementConversionsFromUnitValidMeasurementUnitID
func NewGETValidMeasurementConversionsFromUnitValidMeasurementUnitIDRequest(server string, validMeasurementUnitID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validMeasurementUnitID", runtime.ParamLocationPath, validMeasurementUnitID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_measurement_conversions/from_unit/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETValidMeasurementConversionsToUnitValidMeasurementUnitIDRequest generates requests for GETValidMeasurementConversionsToUnitValidMeasurementUnitID
func NewGETValidMeasurementConversionsToUnitValidMeasurementUnitIDRequest(server string, validMeasurementUnitID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validMeasurementUnitID", runtime.ParamLocationPath, validMeasurementUnitID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_measurement_conversions/to_unit/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDELETEValidMeasurementConversionsValidMeasurementUnitConversionIDRequest generates requests for DELETEValidMeasurementConversionsValidMeasurementUnitConversionID
func NewDELETEValidMeasurementConversionsValidMeasurementUnitConversionIDRequest(server string, validMeasurementUnitConversionID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validMeasurementUnitConversionID", runtime.ParamLocationPath, validMeasurementUnitConversionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_measurement_conversions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETValidMeasurementConversionsValidMeasurementUnitConversionIDRequest generates requests for GETValidMeasurementConversionsValidMeasurementUnitConversionID
func NewGETValidMeasurementConversionsValidMeasurementUnitConversionIDRequest(server string, validMeasurementUnitConversionID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validMeasurementUnitConversionID", runtime.ParamLocationPath, validMeasurementUnitConversionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_measurement_conversions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTValidMeasurementConversionsValidMeasurementUnitConversionIDRequest calls the generic PUTValidMeasurementConversionsValidMeasurementUnitConversionID builder with application/json body
func NewPUTValidMeasurementConversionsValidMeasurementUnitConversionIDRequest(server string, validMeasurementUnitConversionID string, body PUTValidMeasurementConversionsValidMeasurementUnitConversionIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTValidMeasurementConversionsValidMeasurementUnitConversionIDRequestWithBody(server, validMeasurementUnitConversionID, "application/json", bodyReader)
}

// NewPUTValidMeasurementConversionsValidMeasurementUnitConversionIDRequestWithBody generates requests for PUTValidMeasurementConversionsValidMeasurementUnitConversionID with any type of body
func NewPUTValidMeasurementConversionsValidMeasurementUnitConversionIDRequestWithBody(server string, validMeasurementUnitConversionID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validMeasurementUnitConversionID", runtime.ParamLocationPath, validMeasurementUnitConversionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_measurement_conversions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETValidMeasurementUnitsRequest generates requests for GETValidMeasurementUnits
func NewGETValidMeasurementUnitsRequest(server string, params *GETValidMeasurementUnitsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_measurement_units")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTValidMeasurementUnitsRequest calls the generic POSTValidMeasurementUnits builder with application/json body
func NewPOSTValidMeasurementUnitsRequest(server string, body POSTValidMeasurementUnitsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTValidMeasurementUnitsRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTValidMeasurementUnitsRequestWithBody generates requests for POSTValidMeasurementUnits with any type of body
func NewPOSTValidMeasurementUnitsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_measurement_units")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETValidMeasurementUnitsByIngredientValidIngredientIDRequest generates requests for GETValidMeasurementUnitsByIngredientValidIngredientID
func NewGETValidMeasurementUnitsByIngredientValidIngredientIDRequest(server string, validIngredientID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validIngredientID", runtime.ParamLocationPath, validIngredientID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_measurement_units/by_ingredient/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETValidMeasurementUnitsSearchRequest generates requests for GETValidMeasurementUnitsSearch
func NewGETValidMeasurementUnitsSearchRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_measurement_units/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDELETEValidMeasurementUnitsValidMeasurementUnitIDRequest generates requests for DELETEValidMeasurementUnitsValidMeasurementUnitID
func NewDELETEValidMeasurementUnitsValidMeasurementUnitIDRequest(server string, validMeasurementUnitID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validMeasurementUnitID", runtime.ParamLocationPath, validMeasurementUnitID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_measurement_units/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETValidMeasurementUnitsValidMeasurementUnitIDRequest generates requests for GETValidMeasurementUnitsValidMeasurementUnitID
func NewGETValidMeasurementUnitsValidMeasurementUnitIDRequest(server string, validMeasurementUnitID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validMeasurementUnitID", runtime.ParamLocationPath, validMeasurementUnitID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_measurement_units/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTValidMeasurementUnitsValidMeasurementUnitIDRequest calls the generic PUTValidMeasurementUnitsValidMeasurementUnitID builder with application/json body
func NewPUTValidMeasurementUnitsValidMeasurementUnitIDRequest(server string, validMeasurementUnitID string, body PUTValidMeasurementUnitsValidMeasurementUnitIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTValidMeasurementUnitsValidMeasurementUnitIDRequestWithBody(server, validMeasurementUnitID, "application/json", bodyReader)
}

// NewPUTValidMeasurementUnitsValidMeasurementUnitIDRequestWithBody generates requests for PUTValidMeasurementUnitsValidMeasurementUnitID with any type of body
func NewPUTValidMeasurementUnitsValidMeasurementUnitIDRequestWithBody(server string, validMeasurementUnitID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validMeasurementUnitID", runtime.ParamLocationPath, validMeasurementUnitID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_measurement_units/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETValidPreparationInstrumentsRequest generates requests for GETValidPreparationInstruments
func NewGETValidPreparationInstrumentsRequest(server string, params *GETValidPreparationInstrumentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_instruments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTValidPreparationInstrumentsRequest calls the generic POSTValidPreparationInstruments builder with application/json body
func NewPOSTValidPreparationInstrumentsRequest(server string, body POSTValidPreparationInstrumentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTValidPreparationInstrumentsRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTValidPreparationInstrumentsRequestWithBody generates requests for POSTValidPreparationInstruments with any type of body
func NewPOSTValidPreparationInstrumentsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_instruments")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETValidPreparationInstrumentsByInstrumentValidInstrumentIDRequest generates requests for GETValidPreparationInstrumentsByInstrumentValidInstrumentID
func NewGETValidPreparationInstrumentsByInstrumentValidInstrumentIDRequest(server string, validInstrumentID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validInstrumentID", runtime.ParamLocationPath, validInstrumentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_instruments/by_instrument/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETValidPreparationInstrumentsByPreparationValidPreparationIDRequest generates requests for GETValidPreparationInstrumentsByPreparationValidPreparationID
func NewGETValidPreparationInstrumentsByPreparationValidPreparationIDRequest(server string, validPreparationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validPreparationID", runtime.ParamLocationPath, validPreparationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_instruments/by_preparation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDELETEValidPreparationInstrumentsValidPreparationVesselIDRequest generates requests for DELETEValidPreparationInstrumentsValidPreparationVesselID
func NewDELETEValidPreparationInstrumentsValidPreparationVesselIDRequest(server string, validPreparationVesselID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validPreparationVesselID", runtime.ParamLocationPath, validPreparationVesselID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_instruments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETValidPreparationInstrumentsValidPreparationVesselIDRequest generates requests for GETValidPreparationInstrumentsValidPreparationVesselID
func NewGETValidPreparationInstrumentsValidPreparationVesselIDRequest(server string, validPreparationVesselID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validPreparationVesselID", runtime.ParamLocationPath, validPreparationVesselID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_instruments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTValidPreparationInstrumentsValidPreparationVesselIDRequest calls the generic PUTValidPreparationInstrumentsValidPreparationVesselID builder with application/json body
func NewPUTValidPreparationInstrumentsValidPreparationVesselIDRequest(server string, validPreparationVesselID string, body PUTValidPreparationInstrumentsValidPreparationVesselIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTValidPreparationInstrumentsValidPreparationVesselIDRequestWithBody(server, validPreparationVesselID, "application/json", bodyReader)
}

// NewPUTValidPreparationInstrumentsValidPreparationVesselIDRequestWithBody generates requests for PUTValidPreparationInstrumentsValidPreparationVesselID with any type of body
func NewPUTValidPreparationInstrumentsValidPreparationVesselIDRequestWithBody(server string, validPreparationVesselID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validPreparationVesselID", runtime.ParamLocationPath, validPreparationVesselID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_instruments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETValidPreparationVesselsRequest generates requests for GETValidPreparationVessels
func NewGETValidPreparationVesselsRequest(server string, params *GETValidPreparationVesselsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_vessels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTValidPreparationVesselsRequest calls the generic POSTValidPreparationVessels builder with application/json body
func NewPOSTValidPreparationVesselsRequest(server string, body POSTValidPreparationVesselsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTValidPreparationVesselsRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTValidPreparationVesselsRequestWithBody generates requests for POSTValidPreparationVessels with any type of body
func NewPOSTValidPreparationVesselsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_vessels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETValidPreparationVesselsByPreparationValidPreparationIDRequest generates requests for GETValidPreparationVesselsByPreparationValidPreparationID
func NewGETValidPreparationVesselsByPreparationValidPreparationIDRequest(server string, validPreparationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validPreparationID", runtime.ParamLocationPath, validPreparationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_vessels/by_preparation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETValidPreparationVesselsByVesselValidVesselIDRequest generates requests for GETValidPreparationVesselsByVesselValidVesselID
func NewGETValidPreparationVesselsByVesselValidVesselIDRequest(server string, validVesselID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ValidVesselID", runtime.ParamLocationPath, validVesselID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_vessels/by_vessel/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDELETEValidPreparationVesselsValidPreparationVesselIDRequest generates requests for DELETEValidPreparationVesselsValidPreparationVesselID
func NewDELETEValidPreparationVesselsValidPreparationVesselIDRequest(server string, validPreparationVesselID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validPreparationVesselID", runtime.ParamLocationPath, validPreparationVesselID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_vessels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETValidPreparationVesselsValidPreparationVesselIDRequest generates requests for GETValidPreparationVesselsValidPreparationVesselID
func NewGETValidPreparationVesselsValidPreparationVesselIDRequest(server string, validPreparationVesselID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validPreparationVesselID", runtime.ParamLocationPath, validPreparationVesselID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_vessels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTValidPreparationVesselsValidPreparationVesselIDRequest calls the generic PUTValidPreparationVesselsValidPreparationVesselID builder with application/json body
func NewPUTValidPreparationVesselsValidPreparationVesselIDRequest(server string, validPreparationVesselID string, body PUTValidPreparationVesselsValidPreparationVesselIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTValidPreparationVesselsValidPreparationVesselIDRequestWithBody(server, validPreparationVesselID, "application/json", bodyReader)
}

// NewPUTValidPreparationVesselsValidPreparationVesselIDRequestWithBody generates requests for PUTValidPreparationVesselsValidPreparationVesselID with any type of body
func NewPUTValidPreparationVesselsValidPreparationVesselIDRequestWithBody(server string, validPreparationVesselID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validPreparationVesselID", runtime.ParamLocationPath, validPreparationVesselID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparation_vessels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETValidPreparationsRequest generates requests for GETValidPreparations
func NewGETValidPreparationsRequest(server string, params *GETValidPreparationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTValidPreparationsRequest calls the generic POSTValidPreparations builder with application/json body
func NewPOSTValidPreparationsRequest(server string, body POSTValidPreparationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTValidPreparationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTValidPreparationsRequestWithBody generates requests for POSTValidPreparations with any type of body
func NewPOSTValidPreparationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETValidPreparationsRandomRequest generates requests for GETValidPreparationsRandom
func NewGETValidPreparationsRandomRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparations/random")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETValidPreparationsSearchRequest generates requests for GETValidPreparationsSearch
func NewGETValidPreparationsSearchRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparations/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDELETEValidPreparationsValidPreparationIDRequest generates requests for DELETEValidPreparationsValidPreparationID
func NewDELETEValidPreparationsValidPreparationIDRequest(server string, validPreparationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validPreparationID", runtime.ParamLocationPath, validPreparationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETValidPreparationsValidPreparationIDRequest generates requests for GETValidPreparationsValidPreparationID
func NewGETValidPreparationsValidPreparationIDRequest(server string, validPreparationID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validPreparationID", runtime.ParamLocationPath, validPreparationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTValidPreparationsValidPreparationIDRequest calls the generic PUTValidPreparationsValidPreparationID builder with application/json body
func NewPUTValidPreparationsValidPreparationIDRequest(server string, validPreparationID string, body PUTValidPreparationsValidPreparationIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTValidPreparationsValidPreparationIDRequestWithBody(server, validPreparationID, "application/json", bodyReader)
}

// NewPUTValidPreparationsValidPreparationIDRequestWithBody generates requests for PUTValidPreparationsValidPreparationID with any type of body
func NewPUTValidPreparationsValidPreparationIDRequestWithBody(server string, validPreparationID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validPreparationID", runtime.ParamLocationPath, validPreparationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_preparations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETValidVesselsRequest generates requests for GETValidVessels
func NewGETValidVesselsRequest(server string, params *GETValidVesselsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_vessels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTValidVesselsRequest calls the generic POSTValidVessels builder with application/json body
func NewPOSTValidVesselsRequest(server string, body POSTValidVesselsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTValidVesselsRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTValidVesselsRequestWithBody generates requests for POSTValidVessels with any type of body
func NewPOSTValidVesselsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_vessels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETValidVesselsRandomRequest generates requests for GETValidVesselsRandom
func NewGETValidVesselsRandomRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_vessels/random")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETValidVesselsSearchRequest generates requests for GETValidVesselsSearch
func NewGETValidVesselsSearchRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_vessels/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDELETEValidVesselsValidVesselIDRequest generates requests for DELETEValidVesselsValidVesselID
func NewDELETEValidVesselsValidVesselIDRequest(server string, validVesselID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validVesselID", runtime.ParamLocationPath, validVesselID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_vessels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETValidVesselsValidVesselIDRequest generates requests for GETValidVesselsValidVesselID
func NewGETValidVesselsValidVesselIDRequest(server string, validVesselID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validVesselID", runtime.ParamLocationPath, validVesselID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_vessels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPUTValidVesselsValidVesselIDRequest calls the generic PUTValidVesselsValidVesselID builder with application/json body
func NewPUTValidVesselsValidVesselIDRequest(server string, validVesselID string, body PUTValidVesselsValidVesselIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPUTValidVesselsValidVesselIDRequestWithBody(server, validVesselID, "application/json", bodyReader)
}

// NewPUTValidVesselsValidVesselIDRequestWithBody generates requests for PUTValidVesselsValidVesselID with any type of body
func NewPUTValidVesselsValidVesselIDRequestWithBody(server string, validVesselID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "validVesselID", runtime.ParamLocationPath, validVesselID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/valid_vessels/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGETWebhooksRequest generates requests for GETWebhooks
func NewGETWebhooksRequest(server string, params *GETWebhooksParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/webhooks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdBefore", runtime.ParamLocationQuery, params.CreatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "createdAfter", runtime.ParamLocationQuery, params.CreatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedBefore", runtime.ParamLocationQuery, params.UpdatedBefore); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updatedAfter", runtime.ParamLocationQuery, params.UpdatedAfter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeArchived", runtime.ParamLocationQuery, params.IncludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortBy", runtime.ParamLocationQuery, params.SortBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTWebhooksRequest calls the generic POSTWebhooks builder with application/json body
func NewPOSTWebhooksRequest(server string, body POSTWebhooksJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTWebhooksRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTWebhooksRequestWithBody generates requests for POSTWebhooks with any type of body
func NewPOSTWebhooksRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/webhooks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDELETEWebhooksWebhookIDRequest generates requests for DELETEWebhooksWebhookID
func NewDELETEWebhooksWebhookIDRequest(server string, webhookID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "webhookID", runtime.ParamLocationPath, webhookID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/webhooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETWebhooksWebhookIDRequest generates requests for GETWebhooksWebhookID
func NewGETWebhooksWebhookIDRequest(server string, webhookID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "webhookID", runtime.ParamLocationPath, webhookID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/webhooks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTWebhooksWebhookIDTriggerEventsRequest calls the generic POSTWebhooksWebhookIDTriggerEvents builder with application/json body
func NewPOSTWebhooksWebhookIDTriggerEventsRequest(server string, webhookID string, body POSTWebhooksWebhookIDTriggerEventsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTWebhooksWebhookIDTriggerEventsRequestWithBody(server, webhookID, "application/json", bodyReader)
}

// NewPOSTWebhooksWebhookIDTriggerEventsRequestWithBody generates requests for POSTWebhooksWebhookIDTriggerEvents with any type of body
func NewPOSTWebhooksWebhookIDTriggerEventsRequestWithBody(server string, webhookID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "webhookID", runtime.ParamLocationPath, webhookID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/webhooks/%s/trigger_events", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDELETEWebhooksWebhookIDTriggerEventsWebhookTriggerEventIDRequest generates requests for DELETEWebhooksWebhookIDTriggerEventsWebhookTriggerEventID
func NewDELETEWebhooksWebhookIDTriggerEventsWebhookTriggerEventIDRequest(server string, webhookID string, webhookTriggerEventID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "webhookID", runtime.ParamLocationPath, webhookID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "webhookTriggerEventID", runtime.ParamLocationPath, webhookTriggerEventID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/webhooks/%s/trigger_events/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTWorkersFinalizeMealPlansRequest calls the generic POSTWorkersFinalizeMealPlans builder with application/json body
func NewPOSTWorkersFinalizeMealPlansRequest(server string, body POSTWorkersFinalizeMealPlansJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTWorkersFinalizeMealPlansRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTWorkersFinalizeMealPlansRequestWithBody generates requests for POSTWorkersFinalizeMealPlans with any type of body
func NewPOSTWorkersFinalizeMealPlansRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/workers/finalize_meal_plans")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPOSTWorkersMealPlanGroceryListInitRequest generates requests for POSTWorkersMealPlanGroceryListInit
func NewPOSTWorkersMealPlanGroceryListInitRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/workers/meal_plan_grocery_list_init")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTWorkersMealPlanTasksRequest generates requests for POSTWorkersMealPlanTasks
func NewPOSTWorkersMealPlanTasksRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/workers/meal_plan_tasks")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETAuthStatusRequest generates requests for GETAuthStatus
func NewGETAuthStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGETOauth2AuthorizeRequest generates requests for GETOauth2Authorize
func NewGETOauth2AuthorizeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth2/authorize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTOauth2TokenRequest generates requests for POSTOauth2Token
func NewPOSTOauth2TokenRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth2/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTUsersRequest calls the generic POSTUsers builder with application/json body
func NewPOSTUsersRequest(server string, body POSTUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTUsersRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTUsersRequestWithBody generates requests for POSTUsers with any type of body
func NewPOSTUsersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPOSTUsersEmailAddressVerifyRequest calls the generic POSTUsersEmailAddressVerify builder with application/json body
func NewPOSTUsersEmailAddressVerifyRequest(server string, body POSTUsersEmailAddressVerifyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTUsersEmailAddressVerifyRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTUsersEmailAddressVerifyRequestWithBody generates requests for POSTUsersEmailAddressVerify with any type of body
func NewPOSTUsersEmailAddressVerifyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/email_address/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPOSTUsersLoginRequest calls the generic POSTUsersLogin builder with application/json body
func NewPOSTUsersLoginRequest(server string, body POSTUsersLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTUsersLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTUsersLoginRequestWithBody generates requests for POSTUsersLogin with any type of body
func NewPOSTUsersLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPOSTUsersLoginAdminRequest calls the generic POSTUsersLoginAdmin builder with application/json body
func NewPOSTUsersLoginAdminRequest(server string, body POSTUsersLoginAdminJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTUsersLoginAdminRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTUsersLoginAdminRequestWithBody generates requests for POSTUsersLoginAdmin with any type of body
func NewPOSTUsersLoginAdminRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/login/admin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPOSTUsersLogoutRequest generates requests for POSTUsersLogout
func NewPOSTUsersLogoutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPOSTUsersPasswordResetRequest calls the generic POSTUsersPasswordReset builder with application/json body
func NewPOSTUsersPasswordResetRequest(server string, body POSTUsersPasswordResetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTUsersPasswordResetRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTUsersPasswordResetRequestWithBody generates requests for POSTUsersPasswordReset with any type of body
func NewPOSTUsersPasswordResetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/password/reset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPOSTUsersPasswordResetRedeemRequest calls the generic POSTUsersPasswordResetRedeem builder with application/json body
func NewPOSTUsersPasswordResetRedeemRequest(server string, body POSTUsersPasswordResetRedeemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTUsersPasswordResetRedeemRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTUsersPasswordResetRedeemRequestWithBody generates requests for POSTUsersPasswordResetRedeem with any type of body
func NewPOSTUsersPasswordResetRedeemRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/password/reset/redeem")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPOSTUsersTotpSecretVerifyRequest calls the generic POSTUsersTotpSecretVerify builder with application/json body
func NewPOSTUsersTotpSecretVerifyRequest(server string, body POSTUsersTotpSecretVerifyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTUsersTotpSecretVerifyRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTUsersTotpSecretVerifyRequestWithBody generates requests for POSTUsersTotpSecretVerify with any type of body
func NewPOSTUsersTotpSecretVerifyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/totp_secret/verify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPOSTUsersUsernameReminderRequest calls the generic POSTUsersUsernameReminder builder with application/json body
func NewPOSTUsersUsernameReminderRequest(server string, body POSTUsersUsernameReminderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPOSTUsersUsernameReminderRequestWithBody(server, "application/json", bodyReader)
}

// NewPOSTUsersUsernameReminderRequestWithBody generates requests for POSTUsersUsernameReminder with any type of body
func NewPOSTUsersUsernameReminderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/username/reminder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// POSTAdminCycleCookieSecretWithResponse request
	POSTAdminCycleCookieSecretWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*POSTAdminCycleCookieSecretResponse, error)

	// POSTAdminUsersStatusWithBodyWithResponse request with any body
	POSTAdminUsersStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTAdminUsersStatusResponse, error)

	POSTAdminUsersStatusWithResponse(ctx context.Context, body POSTAdminUsersStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTAdminUsersStatusResponse, error)

	// GETAuditLogEntriesForHouseholdWithResponse request
	GETAuditLogEntriesForHouseholdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETAuditLogEntriesForHouseholdResponse, error)

	// GETAuditLogEntriesForUserWithResponse request
	GETAuditLogEntriesForUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETAuditLogEntriesForUserResponse, error)

	// GETAuditLogEntriesAuditLogEntryIDWithResponse request
	GETAuditLogEntriesAuditLogEntryIDWithResponse(ctx context.Context, auditLogEntryID string, reqEditors ...RequestEditorFn) (*GETAuditLogEntriesAuditLogEntryIDResponse, error)

	// GETHouseholdInvitationsReceivedWithResponse request
	GETHouseholdInvitationsReceivedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETHouseholdInvitationsReceivedResponse, error)

	// GETHouseholdInvitationsSentWithResponse request
	GETHouseholdInvitationsSentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETHouseholdInvitationsSentResponse, error)

	// GETHouseholdInvitationsHouseholdInvitationIDWithResponse request
	GETHouseholdInvitationsHouseholdInvitationIDWithResponse(ctx context.Context, householdInvitationID string, reqEditors ...RequestEditorFn) (*GETHouseholdInvitationsHouseholdInvitationIDResponse, error)

	// PUTHouseholdInvitationsHouseholdInvitationIDAcceptWithBodyWithResponse request with any body
	PUTHouseholdInvitationsHouseholdInvitationIDAcceptWithBodyWithResponse(ctx context.Context, householdInvitationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTHouseholdInvitationsHouseholdInvitationIDAcceptResponse, error)

	PUTHouseholdInvitationsHouseholdInvitationIDAcceptWithResponse(ctx context.Context, householdInvitationID string, body PUTHouseholdInvitationsHouseholdInvitationIDAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTHouseholdInvitationsHouseholdInvitationIDAcceptResponse, error)

	// PUTHouseholdInvitationsHouseholdInvitationIDCancelWithBodyWithResponse request with any body
	PUTHouseholdInvitationsHouseholdInvitationIDCancelWithBodyWithResponse(ctx context.Context, householdInvitationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTHouseholdInvitationsHouseholdInvitationIDCancelResponse, error)

	PUTHouseholdInvitationsHouseholdInvitationIDCancelWithResponse(ctx context.Context, householdInvitationID string, body PUTHouseholdInvitationsHouseholdInvitationIDCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTHouseholdInvitationsHouseholdInvitationIDCancelResponse, error)

	// PUTHouseholdInvitationsHouseholdInvitationIDRejectWithBodyWithResponse request with any body
	PUTHouseholdInvitationsHouseholdInvitationIDRejectWithBodyWithResponse(ctx context.Context, householdInvitationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTHouseholdInvitationsHouseholdInvitationIDRejectResponse, error)

	PUTHouseholdInvitationsHouseholdInvitationIDRejectWithResponse(ctx context.Context, householdInvitationID string, body PUTHouseholdInvitationsHouseholdInvitationIDRejectJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTHouseholdInvitationsHouseholdInvitationIDRejectResponse, error)

	// GETHouseholdsWithResponse request
	GETHouseholdsWithResponse(ctx context.Context, params *GETHouseholdsParams, reqEditors ...RequestEditorFn) (*GETHouseholdsResponse, error)

	// POSTHouseholdsWithBodyWithResponse request with any body
	POSTHouseholdsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTHouseholdsResponse, error)

	POSTHouseholdsWithResponse(ctx context.Context, body POSTHouseholdsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTHouseholdsResponse, error)

	// GETHouseholdsCurrentWithResponse request
	GETHouseholdsCurrentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETHouseholdsCurrentResponse, error)

	// GETHouseholdsInstrumentsWithResponse request
	GETHouseholdsInstrumentsWithResponse(ctx context.Context, params *GETHouseholdsInstrumentsParams, reqEditors ...RequestEditorFn) (*GETHouseholdsInstrumentsResponse, error)

	// POSTHouseholdsInstrumentsWithBodyWithResponse request with any body
	POSTHouseholdsInstrumentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTHouseholdsInstrumentsResponse, error)

	POSTHouseholdsInstrumentsWithResponse(ctx context.Context, body POSTHouseholdsInstrumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTHouseholdsInstrumentsResponse, error)

	// DELETEHouseholdsInstrumentsHouseholdInstrumentOwnershipIDWithResponse request
	DELETEHouseholdsInstrumentsHouseholdInstrumentOwnershipIDWithResponse(ctx context.Context, householdInstrumentOwnershipID string, reqEditors ...RequestEditorFn) (*DELETEHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse, error)

	// GETHouseholdsInstrumentsHouseholdInstrumentOwnershipIDWithResponse request
	GETHouseholdsInstrumentsHouseholdInstrumentOwnershipIDWithResponse(ctx context.Context, householdInstrumentOwnershipID string, reqEditors ...RequestEditorFn) (*GETHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse, error)

	// PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDWithBodyWithResponse request with any body
	PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDWithBodyWithResponse(ctx context.Context, householdInstrumentOwnershipID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse, error)

	PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDWithResponse(ctx context.Context, householdInstrumentOwnershipID string, body PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse, error)

	// DELETEHouseholdsHouseholdIDWithResponse request
	DELETEHouseholdsHouseholdIDWithResponse(ctx context.Context, householdID string, reqEditors ...RequestEditorFn) (*DELETEHouseholdsHouseholdIDResponse, error)

	// GETHouseholdsHouseholdIDWithResponse request
	GETHouseholdsHouseholdIDWithResponse(ctx context.Context, householdID string, reqEditors ...RequestEditorFn) (*GETHouseholdsHouseholdIDResponse, error)

	// PUTHouseholdsHouseholdIDWithBodyWithResponse request with any body
	PUTHouseholdsHouseholdIDWithBodyWithResponse(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTHouseholdsHouseholdIDResponse, error)

	PUTHouseholdsHouseholdIDWithResponse(ctx context.Context, householdID string, body PUTHouseholdsHouseholdIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTHouseholdsHouseholdIDResponse, error)

	// POSTHouseholdsHouseholdIDDefaultWithResponse request
	POSTHouseholdsHouseholdIDDefaultWithResponse(ctx context.Context, householdID string, reqEditors ...RequestEditorFn) (*POSTHouseholdsHouseholdIDDefaultResponse, error)

	// POSTHouseholdsHouseholdIDInvitationsWithBodyWithResponse request with any body
	POSTHouseholdsHouseholdIDInvitationsWithBodyWithResponse(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTHouseholdsHouseholdIDInvitationsResponse, error)

	POSTHouseholdsHouseholdIDInvitationsWithResponse(ctx context.Context, householdID string, body POSTHouseholdsHouseholdIDInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTHouseholdsHouseholdIDInvitationsResponse, error)

	// GETHouseholdsHouseholdIDInvitationsHouseholdInvitationIDWithResponse request
	GETHouseholdsHouseholdIDInvitationsHouseholdInvitationIDWithResponse(ctx context.Context, householdID string, householdInvitationID string, reqEditors ...RequestEditorFn) (*GETHouseholdsHouseholdIDInvitationsHouseholdInvitationIDResponse, error)

	// POSTHouseholdsHouseholdIDInviteWithBodyWithResponse request with any body
	POSTHouseholdsHouseholdIDInviteWithBodyWithResponse(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTHouseholdsHouseholdIDInviteResponse, error)

	POSTHouseholdsHouseholdIDInviteWithResponse(ctx context.Context, householdID string, body POSTHouseholdsHouseholdIDInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTHouseholdsHouseholdIDInviteResponse, error)

	// DELETEHouseholdsHouseholdIDMembersUserIDWithResponse request
	DELETEHouseholdsHouseholdIDMembersUserIDWithResponse(ctx context.Context, householdID string, userID string, reqEditors ...RequestEditorFn) (*DELETEHouseholdsHouseholdIDMembersUserIDResponse, error)

	// PATCHHouseholdsHouseholdIDMembersUserIDPermissionsWithBodyWithResponse request with any body
	PATCHHouseholdsHouseholdIDMembersUserIDPermissionsWithBodyWithResponse(ctx context.Context, householdID string, userID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PATCHHouseholdsHouseholdIDMembersUserIDPermissionsResponse, error)

	PATCHHouseholdsHouseholdIDMembersUserIDPermissionsWithResponse(ctx context.Context, householdID string, userID string, body PATCHHouseholdsHouseholdIDMembersUserIDPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PATCHHouseholdsHouseholdIDMembersUserIDPermissionsResponse, error)

	// POSTHouseholdsHouseholdIDTransferWithBodyWithResponse request with any body
	POSTHouseholdsHouseholdIDTransferWithBodyWithResponse(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTHouseholdsHouseholdIDTransferResponse, error)

	POSTHouseholdsHouseholdIDTransferWithResponse(ctx context.Context, householdID string, body POSTHouseholdsHouseholdIDTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTHouseholdsHouseholdIDTransferResponse, error)

	// GETMealPlansWithResponse request
	GETMealPlansWithResponse(ctx context.Context, params *GETMealPlansParams, reqEditors ...RequestEditorFn) (*GETMealPlansResponse, error)

	// POSTMealPlansWithBodyWithResponse request with any body
	POSTMealPlansWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTMealPlansResponse, error)

	POSTMealPlansWithResponse(ctx context.Context, body POSTMealPlansJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTMealPlansResponse, error)

	// DELETEMealPlansMealPlanIDWithResponse request
	DELETEMealPlansMealPlanIDWithResponse(ctx context.Context, mealPlanID string, reqEditors ...RequestEditorFn) (*DELETEMealPlansMealPlanIDResponse, error)

	// GETMealPlansMealPlanIDWithResponse request
	GETMealPlansMealPlanIDWithResponse(ctx context.Context, mealPlanID string, reqEditors ...RequestEditorFn) (*GETMealPlansMealPlanIDResponse, error)

	// PUTMealPlansMealPlanIDWithBodyWithResponse request with any body
	PUTMealPlansMealPlanIDWithBodyWithResponse(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTMealPlansMealPlanIDResponse, error)

	PUTMealPlansMealPlanIDWithResponse(ctx context.Context, mealPlanID string, body PUTMealPlansMealPlanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTMealPlansMealPlanIDResponse, error)

	// GETMealPlansMealPlanIDEventsWithResponse request
	GETMealPlansMealPlanIDEventsWithResponse(ctx context.Context, mealPlanID string, params *GETMealPlansMealPlanIDEventsParams, reqEditors ...RequestEditorFn) (*GETMealPlansMealPlanIDEventsResponse, error)

	// POSTMealPlansMealPlanIDEventsWithBodyWithResponse request with any body
	POSTMealPlansMealPlanIDEventsWithBodyWithResponse(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTMealPlansMealPlanIDEventsResponse, error)

	POSTMealPlansMealPlanIDEventsWithResponse(ctx context.Context, mealPlanID string, body POSTMealPlansMealPlanIDEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTMealPlansMealPlanIDEventsResponse, error)

	// DELETEMealPlansMealPlanIDEventsMealPlanEventIDWithResponse request
	DELETEMealPlansMealPlanIDEventsMealPlanEventIDWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, reqEditors ...RequestEditorFn) (*DELETEMealPlansMealPlanIDEventsMealPlanEventIDResponse, error)

	// GETMealPlansMealPlanIDEventsMealPlanEventIDWithResponse request
	GETMealPlansMealPlanIDEventsMealPlanEventIDWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, reqEditors ...RequestEditorFn) (*GETMealPlansMealPlanIDEventsMealPlanEventIDResponse, error)

	// PUTMealPlansMealPlanIDEventsMealPlanEventIDWithBodyWithResponse request with any body
	PUTMealPlansMealPlanIDEventsMealPlanEventIDWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTMealPlansMealPlanIDEventsMealPlanEventIDResponse, error)

	PUTMealPlansMealPlanIDEventsMealPlanEventIDWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, body PUTMealPlansMealPlanIDEventsMealPlanEventIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTMealPlansMealPlanIDEventsMealPlanEventIDResponse, error)

	// GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsWithResponse request
	GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, params *GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsParams, reqEditors ...RequestEditorFn) (*GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsResponse, error)

	// POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsWithBodyWithResponse request with any body
	POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsResponse, error)

	POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, body POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsResponse, error)

	// DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDWithResponse request
	DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, reqEditors ...RequestEditorFn) (*DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse, error)

	// GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDWithResponse request
	GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, reqEditors ...RequestEditorFn) (*GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse, error)

	// PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDWithBodyWithResponse request with any body
	PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse, error)

	PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, body PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse, error)

	// GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesWithResponse request
	GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, params *GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesParams, reqEditors ...RequestEditorFn) (*GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesResponse, error)

	// DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDWithResponse request
	DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, reqEditors ...RequestEditorFn) (*DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse, error)

	// GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDWithResponse request
	GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, reqEditors ...RequestEditorFn) (*GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse, error)

	// PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDWithBodyWithResponse request with any body
	PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse, error)

	PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, body PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse, error)

	// POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteWithBodyWithResponse request with any body
	POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteResponse, error)

	POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, body POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteResponse, error)

	// POSTMealPlansMealPlanIDFinalizeWithResponse request
	POSTMealPlansMealPlanIDFinalizeWithResponse(ctx context.Context, mealPlanID string, reqEditors ...RequestEditorFn) (*POSTMealPlansMealPlanIDFinalizeResponse, error)

	// GETMealPlansMealPlanIDGroceryListItemsWithResponse request
	GETMealPlansMealPlanIDGroceryListItemsWithResponse(ctx context.Context, mealPlanID string, params *GETMealPlansMealPlanIDGroceryListItemsParams, reqEditors ...RequestEditorFn) (*GETMealPlansMealPlanIDGroceryListItemsResponse, error)

	// POSTMealPlansMealPlanIDGroceryListItemsWithBodyWithResponse request with any body
	POSTMealPlansMealPlanIDGroceryListItemsWithBodyWithResponse(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTMealPlansMealPlanIDGroceryListItemsResponse, error)

	POSTMealPlansMealPlanIDGroceryListItemsWithResponse(ctx context.Context, mealPlanID string, body POSTMealPlansMealPlanIDGroceryListItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTMealPlansMealPlanIDGroceryListItemsResponse, error)

	// DELETEMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDWithResponse request
	DELETEMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDWithResponse(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, reqEditors ...RequestEditorFn) (*DELETEMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse, error)

	// GETMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDWithResponse request
	GETMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDWithResponse(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, reqEditors ...RequestEditorFn) (*GETMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse, error)

	// PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDWithBodyWithResponse request with any body
	PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse, error)

	PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDWithResponse(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, body PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse, error)

	// GETMealPlansMealPlanIDTasksWithResponse request
	GETMealPlansMealPlanIDTasksWithResponse(ctx context.Context, mealPlanID string, params *GETMealPlansMealPlanIDTasksParams, reqEditors ...RequestEditorFn) (*GETMealPlansMealPlanIDTasksResponse, error)

	// POSTMealPlansMealPlanIDTasksWithBodyWithResponse request with any body
	POSTMealPlansMealPlanIDTasksWithBodyWithResponse(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTMealPlansMealPlanIDTasksResponse, error)

	POSTMealPlansMealPlanIDTasksWithResponse(ctx context.Context, mealPlanID string, body POSTMealPlansMealPlanIDTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTMealPlansMealPlanIDTasksResponse, error)

	// GETMealPlansMealPlanIDTasksMealPlanTaskIDWithResponse request
	GETMealPlansMealPlanIDTasksMealPlanTaskIDWithResponse(ctx context.Context, mealPlanID string, mealPlanTaskID string, reqEditors ...RequestEditorFn) (*GETMealPlansMealPlanIDTasksMealPlanTaskIDResponse, error)

	// PATCHMealPlansMealPlanIDTasksMealPlanTaskIDWithBodyWithResponse request with any body
	PATCHMealPlansMealPlanIDTasksMealPlanTaskIDWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanTaskID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PATCHMealPlansMealPlanIDTasksMealPlanTaskIDResponse, error)

	PATCHMealPlansMealPlanIDTasksMealPlanTaskIDWithResponse(ctx context.Context, mealPlanID string, mealPlanTaskID string, body PATCHMealPlansMealPlanIDTasksMealPlanTaskIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PATCHMealPlansMealPlanIDTasksMealPlanTaskIDResponse, error)

	// GETMealsWithResponse request
	GETMealsWithResponse(ctx context.Context, params *GETMealsParams, reqEditors ...RequestEditorFn) (*GETMealsResponse, error)

	// POSTMealsWithBodyWithResponse request with any body
	POSTMealsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTMealsResponse, error)

	POSTMealsWithResponse(ctx context.Context, body POSTMealsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTMealsResponse, error)

	// GETMealsSearchWithResponse request
	GETMealsSearchWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETMealsSearchResponse, error)

	// DELETEMealsMealIDWithResponse request
	DELETEMealsMealIDWithResponse(ctx context.Context, mealID string, reqEditors ...RequestEditorFn) (*DELETEMealsMealIDResponse, error)

	// GETMealsMealIDWithResponse request
	GETMealsMealIDWithResponse(ctx context.Context, mealID string, reqEditors ...RequestEditorFn) (*GETMealsMealIDResponse, error)

	// GETOauth2ClientsWithResponse request
	GETOauth2ClientsWithResponse(ctx context.Context, params *GETOauth2ClientsParams, reqEditors ...RequestEditorFn) (*GETOauth2ClientsResponse, error)

	// POSTOauth2ClientsWithBodyWithResponse request with any body
	POSTOauth2ClientsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTOauth2ClientsResponse, error)

	POSTOauth2ClientsWithResponse(ctx context.Context, body POSTOauth2ClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTOauth2ClientsResponse, error)

	// DELETEOauth2ClientsOauth2ClientIDWithResponse request
	DELETEOauth2ClientsOauth2ClientIDWithResponse(ctx context.Context, oauth2ClientID string, reqEditors ...RequestEditorFn) (*DELETEOauth2ClientsOauth2ClientIDResponse, error)

	// GETOauth2ClientsOauth2ClientIDWithResponse request
	GETOauth2ClientsOauth2ClientIDWithResponse(ctx context.Context, oauth2ClientID string, reqEditors ...RequestEditorFn) (*GETOauth2ClientsOauth2ClientIDResponse, error)

	// GETRecipesWithResponse request
	GETRecipesWithResponse(ctx context.Context, params *GETRecipesParams, reqEditors ...RequestEditorFn) (*GETRecipesResponse, error)

	// POSTRecipesWithBodyWithResponse request with any body
	POSTRecipesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTRecipesResponse, error)

	POSTRecipesWithResponse(ctx context.Context, body POSTRecipesJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTRecipesResponse, error)

	// GETRecipesSearchWithResponse request
	GETRecipesSearchWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETRecipesSearchResponse, error)

	// DELETERecipesRecipeIDWithResponse request
	DELETERecipesRecipeIDWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*DELETERecipesRecipeIDResponse, error)

	// GETRecipesRecipeIDWithResponse request
	GETRecipesRecipeIDWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDResponse, error)

	// PUTRecipesRecipeIDWithBodyWithResponse request with any body
	PUTRecipesRecipeIDWithBodyWithResponse(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDResponse, error)

	PUTRecipesRecipeIDWithResponse(ctx context.Context, recipeID string, body PUTRecipesRecipeIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDResponse, error)

	// POSTRecipesRecipeIDCloneWithResponse request
	POSTRecipesRecipeIDCloneWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDCloneResponse, error)

	// GETRecipesRecipeIDDagWithResponse request
	GETRecipesRecipeIDDagWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDDagResponse, error)

	// POSTRecipesRecipeIDImagesWithResponse request
	POSTRecipesRecipeIDImagesWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDImagesResponse, error)

	// GETRecipesRecipeIDMermaidWithResponse request
	GETRecipesRecipeIDMermaidWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDMermaidResponse, error)

	// GETRecipesRecipeIDPrepStepsWithResponse request
	GETRecipesRecipeIDPrepStepsWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDPrepStepsResponse, error)

	// GETRecipesRecipeIDPrepTasksWithResponse request
	GETRecipesRecipeIDPrepTasksWithResponse(ctx context.Context, recipeID string, params *GETRecipesRecipeIDPrepTasksParams, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDPrepTasksResponse, error)

	// POSTRecipesRecipeIDPrepTasksWithBodyWithResponse request with any body
	POSTRecipesRecipeIDPrepTasksWithBodyWithResponse(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDPrepTasksResponse, error)

	POSTRecipesRecipeIDPrepTasksWithResponse(ctx context.Context, recipeID string, body POSTRecipesRecipeIDPrepTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDPrepTasksResponse, error)

	// DELETERecipesRecipeIDPrepTasksRecipePrepTaskIDWithResponse request
	DELETERecipesRecipeIDPrepTasksRecipePrepTaskIDWithResponse(ctx context.Context, recipeID string, recipePrepTaskID string, reqEditors ...RequestEditorFn) (*DELETERecipesRecipeIDPrepTasksRecipePrepTaskIDResponse, error)

	// GETRecipesRecipeIDPrepTasksRecipePrepTaskIDWithResponse request
	GETRecipesRecipeIDPrepTasksRecipePrepTaskIDWithResponse(ctx context.Context, recipeID string, recipePrepTaskID string, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDPrepTasksRecipePrepTaskIDResponse, error)

	// PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDWithBodyWithResponse request with any body
	PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDWithBodyWithResponse(ctx context.Context, recipeID string, recipePrepTaskID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDResponse, error)

	PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDWithResponse(ctx context.Context, recipeID string, recipePrepTaskID string, body PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDResponse, error)

	// GETRecipesRecipeIDRatingsWithResponse request
	GETRecipesRecipeIDRatingsWithResponse(ctx context.Context, recipeID string, params *GETRecipesRecipeIDRatingsParams, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDRatingsResponse, error)

	// POSTRecipesRecipeIDRatingsWithBodyWithResponse request with any body
	POSTRecipesRecipeIDRatingsWithBodyWithResponse(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDRatingsResponse, error)

	POSTRecipesRecipeIDRatingsWithResponse(ctx context.Context, recipeID string, body POSTRecipesRecipeIDRatingsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDRatingsResponse, error)

	// DELETERecipesRecipeIDRatingsRecipeRatingIDWithResponse request
	DELETERecipesRecipeIDRatingsRecipeRatingIDWithResponse(ctx context.Context, recipeID string, recipeRatingID string, reqEditors ...RequestEditorFn) (*DELETERecipesRecipeIDRatingsRecipeRatingIDResponse, error)

	// GETRecipesRecipeIDRatingsRecipeRatingIDWithResponse request
	GETRecipesRecipeIDRatingsRecipeRatingIDWithResponse(ctx context.Context, recipeID string, recipeRatingID string, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDRatingsRecipeRatingIDResponse, error)

	// PUTRecipesRecipeIDRatingsRecipeRatingIDWithBodyWithResponse request with any body
	PUTRecipesRecipeIDRatingsRecipeRatingIDWithBodyWithResponse(ctx context.Context, recipeID string, recipeRatingID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDRatingsRecipeRatingIDResponse, error)

	PUTRecipesRecipeIDRatingsRecipeRatingIDWithResponse(ctx context.Context, recipeID string, recipeRatingID string, body PUTRecipesRecipeIDRatingsRecipeRatingIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDRatingsRecipeRatingIDResponse, error)

	// GETRecipesRecipeIDStepsWithResponse request
	GETRecipesRecipeIDStepsWithResponse(ctx context.Context, recipeID string, params *GETRecipesRecipeIDStepsParams, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDStepsResponse, error)

	// POSTRecipesRecipeIDStepsWithBodyWithResponse request with any body
	POSTRecipesRecipeIDStepsWithBodyWithResponse(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsResponse, error)

	POSTRecipesRecipeIDStepsWithResponse(ctx context.Context, recipeID string, body POSTRecipesRecipeIDStepsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsResponse, error)

	// DELETERecipesRecipeIDStepsRecipeStepIDWithResponse request
	DELETERecipesRecipeIDStepsRecipeStepIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, reqEditors ...RequestEditorFn) (*DELETERecipesRecipeIDStepsRecipeStepIDResponse, error)

	// GETRecipesRecipeIDStepsRecipeStepIDWithResponse request
	GETRecipesRecipeIDStepsRecipeStepIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDStepsRecipeStepIDResponse, error)

	// PUTRecipesRecipeIDStepsRecipeStepIDWithBodyWithResponse request with any body
	PUTRecipesRecipeIDStepsRecipeStepIDWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDStepsRecipeStepIDResponse, error)

	PUTRecipesRecipeIDStepsRecipeStepIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, body PUTRecipesRecipeIDStepsRecipeStepIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDStepsRecipeStepIDResponse, error)

	// GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsWithResponse request
	GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsWithResponse(ctx context.Context, recipeID string, recipeStepID string, params *GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsParams, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsResponse, error)

	// POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsWithBodyWithResponse request with any body
	POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsResponse, error)

	POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsWithResponse(ctx context.Context, recipeID string, recipeStepID string, body POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsResponse, error)

	// DELETERecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDWithResponse request
	DELETERecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, reqEditors ...RequestEditorFn) (*DELETERecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse, error)

	// GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDWithResponse request
	GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse, error)

	// PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDWithBodyWithResponse request with any body
	PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse, error)

	PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, body PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse, error)

	// POSTRecipesRecipeIDStepsRecipeStepIDImagesWithResponse request
	POSTRecipesRecipeIDStepsRecipeStepIDImagesWithResponse(ctx context.Context, recipeID string, recipeStepID string, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsRecipeStepIDImagesResponse, error)

	// GETRecipesRecipeIDStepsRecipeStepIDIngredientsWithResponse request
	GETRecipesRecipeIDStepsRecipeStepIDIngredientsWithResponse(ctx context.Context, recipeID string, recipeStepID string, params *GETRecipesRecipeIDStepsRecipeStepIDIngredientsParams, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDStepsRecipeStepIDIngredientsResponse, error)

	// POSTRecipesRecipeIDStepsRecipeStepIDIngredientsWithBodyWithResponse request with any body
	POSTRecipesRecipeIDStepsRecipeStepIDIngredientsWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsRecipeStepIDIngredientsResponse, error)

	POSTRecipesRecipeIDStepsRecipeStepIDIngredientsWithResponse(ctx context.Context, recipeID string, recipeStepID string, body POSTRecipesRecipeIDStepsRecipeStepIDIngredientsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsRecipeStepIDIngredientsResponse, error)

	// DELETERecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDWithResponse request
	DELETERecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, reqEditors ...RequestEditorFn) (*DELETERecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse, error)

	// GETRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDWithResponse request
	GETRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse, error)

	// PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDWithBodyWithResponse request with any body
	PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse, error)

	PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, body PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse, error)

	// GETRecipesRecipeIDStepsRecipeStepIDInstrumentsWithResponse request
	GETRecipesRecipeIDStepsRecipeStepIDInstrumentsWithResponse(ctx context.Context, recipeID string, recipeStepID string, params *GETRecipesRecipeIDStepsRecipeStepIDInstrumentsParams, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDStepsRecipeStepIDInstrumentsResponse, error)

	// POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsWithBodyWithResponse request with any body
	POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsResponse, error)

	POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsWithResponse(ctx context.Context, recipeID string, recipeStepID string, body POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsResponse, error)

	// DELETERecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDWithResponse request
	DELETERecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, reqEditors ...RequestEditorFn) (*DELETERecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse, error)

	// GETRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDWithResponse request
	GETRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse, error)

	// PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDWithBodyWithResponse request with any body
	PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse, error)

	PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, body PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse, error)

	// GETRecipesRecipeIDStepsRecipeStepIDProductsWithResponse request
	GETRecipesRecipeIDStepsRecipeStepIDProductsWithResponse(ctx context.Context, recipeID string, recipeStepID string, params *GETRecipesRecipeIDStepsRecipeStepIDProductsParams, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDStepsRecipeStepIDProductsResponse, error)

	// POSTRecipesRecipeIDStepsRecipeStepIDProductsWithBodyWithResponse request with any body
	POSTRecipesRecipeIDStepsRecipeStepIDProductsWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsRecipeStepIDProductsResponse, error)

	POSTRecipesRecipeIDStepsRecipeStepIDProductsWithResponse(ctx context.Context, recipeID string, recipeStepID string, body POSTRecipesRecipeIDStepsRecipeStepIDProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsRecipeStepIDProductsResponse, error)

	// DELETERecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDWithResponse request
	DELETERecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, reqEditors ...RequestEditorFn) (*DELETERecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse, error)

	// GETRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDWithResponse request
	GETRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse, error)

	// PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDWithBodyWithResponse request with any body
	PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse, error)

	PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, body PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse, error)

	// GETRecipesRecipeIDStepsRecipeStepIDVesselsWithResponse request
	GETRecipesRecipeIDStepsRecipeStepIDVesselsWithResponse(ctx context.Context, recipeID string, recipeStepID string, params *GETRecipesRecipeIDStepsRecipeStepIDVesselsParams, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDStepsRecipeStepIDVesselsResponse, error)

	// POSTRecipesRecipeIDStepsRecipeStepIDVesselsWithBodyWithResponse request with any body
	POSTRecipesRecipeIDStepsRecipeStepIDVesselsWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsRecipeStepIDVesselsResponse, error)

	POSTRecipesRecipeIDStepsRecipeStepIDVesselsWithResponse(ctx context.Context, recipeID string, recipeStepID string, body POSTRecipesRecipeIDStepsRecipeStepIDVesselsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsRecipeStepIDVesselsResponse, error)

	// DELETERecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDWithResponse request
	DELETERecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, reqEditors ...RequestEditorFn) (*DELETERecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse, error)

	// GETRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDWithResponse request
	GETRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse, error)

	// PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDWithBodyWithResponse request with any body
	PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse, error)

	PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, body PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse, error)

	// GETSettingsWithResponse request
	GETSettingsWithResponse(ctx context.Context, params *GETSettingsParams, reqEditors ...RequestEditorFn) (*GETSettingsResponse, error)

	// POSTSettingsWithBodyWithResponse request with any body
	POSTSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTSettingsResponse, error)

	POSTSettingsWithResponse(ctx context.Context, body POSTSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTSettingsResponse, error)

	// POSTSettingsConfigurationsWithBodyWithResponse request with any body
	POSTSettingsConfigurationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTSettingsConfigurationsResponse, error)

	POSTSettingsConfigurationsWithResponse(ctx context.Context, body POSTSettingsConfigurationsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTSettingsConfigurationsResponse, error)

	// GETSettingsConfigurationsHouseholdWithResponse request
	GETSettingsConfigurationsHouseholdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETSettingsConfigurationsHouseholdResponse, error)

	// GETSettingsConfigurationsUserWithResponse request
	GETSettingsConfigurationsUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETSettingsConfigurationsUserResponse, error)

	// GETSettingsConfigurationsUserServiceSettingConfigurationNameWithResponse request
	GETSettingsConfigurationsUserServiceSettingConfigurationNameWithResponse(ctx context.Context, serviceSettingConfigurationName string, reqEditors ...RequestEditorFn) (*GETSettingsConfigurationsUserServiceSettingConfigurationNameResponse, error)

	// DELETESettingsConfigurationsServiceSettingConfigurationIDWithResponse request
	DELETESettingsConfigurationsServiceSettingConfigurationIDWithResponse(ctx context.Context, serviceSettingConfigurationID string, reqEditors ...RequestEditorFn) (*DELETESettingsConfigurationsServiceSettingConfigurationIDResponse, error)

	// PUTSettingsConfigurationsServiceSettingConfigurationIDWithBodyWithResponse request with any body
	PUTSettingsConfigurationsServiceSettingConfigurationIDWithBodyWithResponse(ctx context.Context, serviceSettingConfigurationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTSettingsConfigurationsServiceSettingConfigurationIDResponse, error)

	PUTSettingsConfigurationsServiceSettingConfigurationIDWithResponse(ctx context.Context, serviceSettingConfigurationID string, body PUTSettingsConfigurationsServiceSettingConfigurationIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTSettingsConfigurationsServiceSettingConfigurationIDResponse, error)

	// GETSettingsSearchWithResponse request
	GETSettingsSearchWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETSettingsSearchResponse, error)

	// DELETESettingsServiceSettingIDWithResponse request
	DELETESettingsServiceSettingIDWithResponse(ctx context.Context, serviceSettingID string, reqEditors ...RequestEditorFn) (*DELETESettingsServiceSettingIDResponse, error)

	// GETSettingsServiceSettingIDWithResponse request
	GETSettingsServiceSettingIDWithResponse(ctx context.Context, serviceSettingID string, reqEditors ...RequestEditorFn) (*GETSettingsServiceSettingIDResponse, error)

	// GETUserIngredientPreferencesWithResponse request
	GETUserIngredientPreferencesWithResponse(ctx context.Context, params *GETUserIngredientPreferencesParams, reqEditors ...RequestEditorFn) (*GETUserIngredientPreferencesResponse, error)

	// POSTUserIngredientPreferencesWithBodyWithResponse request with any body
	POSTUserIngredientPreferencesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUserIngredientPreferencesResponse, error)

	POSTUserIngredientPreferencesWithResponse(ctx context.Context, body POSTUserIngredientPreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUserIngredientPreferencesResponse, error)

	// DELETEUserIngredientPreferencesUserIngredientPreferenceIDWithResponse request
	DELETEUserIngredientPreferencesUserIngredientPreferenceIDWithResponse(ctx context.Context, userIngredientPreferenceID string, reqEditors ...RequestEditorFn) (*DELETEUserIngredientPreferencesUserIngredientPreferenceIDResponse, error)

	// PUTUserIngredientPreferencesUserIngredientPreferenceIDWithBodyWithResponse request with any body
	PUTUserIngredientPreferencesUserIngredientPreferenceIDWithBodyWithResponse(ctx context.Context, userIngredientPreferenceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTUserIngredientPreferencesUserIngredientPreferenceIDResponse, error)

	PUTUserIngredientPreferencesUserIngredientPreferenceIDWithResponse(ctx context.Context, userIngredientPreferenceID string, body PUTUserIngredientPreferencesUserIngredientPreferenceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTUserIngredientPreferencesUserIngredientPreferenceIDResponse, error)

	// GETUserNotificationsWithResponse request
	GETUserNotificationsWithResponse(ctx context.Context, params *GETUserNotificationsParams, reqEditors ...RequestEditorFn) (*GETUserNotificationsResponse, error)

	// POSTUserNotificationsWithBodyWithResponse request with any body
	POSTUserNotificationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUserNotificationsResponse, error)

	POSTUserNotificationsWithResponse(ctx context.Context, body POSTUserNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUserNotificationsResponse, error)

	// GETUserNotificationsUserNotificationIDWithResponse request
	GETUserNotificationsUserNotificationIDWithResponse(ctx context.Context, userNotificationID string, reqEditors ...RequestEditorFn) (*GETUserNotificationsUserNotificationIDResponse, error)

	// PATCHUserNotificationsUserNotificationIDWithBodyWithResponse request with any body
	PATCHUserNotificationsUserNotificationIDWithBodyWithResponse(ctx context.Context, userNotificationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PATCHUserNotificationsUserNotificationIDResponse, error)

	PATCHUserNotificationsUserNotificationIDWithResponse(ctx context.Context, userNotificationID string, body PATCHUserNotificationsUserNotificationIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PATCHUserNotificationsUserNotificationIDResponse, error)

	// GETUsersWithResponse request
	GETUsersWithResponse(ctx context.Context, params *GETUsersParams, reqEditors ...RequestEditorFn) (*GETUsersResponse, error)

	// POSTUsersAvatarUploadWithBodyWithResponse request with any body
	POSTUsersAvatarUploadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersAvatarUploadResponse, error)

	POSTUsersAvatarUploadWithResponse(ctx context.Context, body POSTUsersAvatarUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersAvatarUploadResponse, error)

	// PUTUsersDetailsWithBodyWithResponse request with any body
	PUTUsersDetailsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTUsersDetailsResponse, error)

	PUTUsersDetailsWithResponse(ctx context.Context, body PUTUsersDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTUsersDetailsResponse, error)

	// PUTUsersEmailAddressWithBodyWithResponse request with any body
	PUTUsersEmailAddressWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTUsersEmailAddressResponse, error)

	PUTUsersEmailAddressWithResponse(ctx context.Context, body PUTUsersEmailAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTUsersEmailAddressResponse, error)

	// POSTUsersEmailAddressVerificationWithBodyWithResponse request with any body
	POSTUsersEmailAddressVerificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersEmailAddressVerificationResponse, error)

	POSTUsersEmailAddressVerificationWithResponse(ctx context.Context, body POSTUsersEmailAddressVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersEmailAddressVerificationResponse, error)

	// POSTUsersHouseholdSelectWithBodyWithResponse request with any body
	POSTUsersHouseholdSelectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersHouseholdSelectResponse, error)

	POSTUsersHouseholdSelectWithResponse(ctx context.Context, body POSTUsersHouseholdSelectJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersHouseholdSelectResponse, error)

	// PUTUsersPasswordNewWithBodyWithResponse request with any body
	PUTUsersPasswordNewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTUsersPasswordNewResponse, error)

	PUTUsersPasswordNewWithResponse(ctx context.Context, body PUTUsersPasswordNewJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTUsersPasswordNewResponse, error)

	// POSTUsersPermissionsCheckWithBodyWithResponse request with any body
	POSTUsersPermissionsCheckWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersPermissionsCheckResponse, error)

	POSTUsersPermissionsCheckWithResponse(ctx context.Context, body POSTUsersPermissionsCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersPermissionsCheckResponse, error)

	// GETUsersSearchWithResponse request
	GETUsersSearchWithResponse(ctx context.Context, params *GETUsersSearchParams, reqEditors ...RequestEditorFn) (*GETUsersSearchResponse, error)

	// GETUsersSelfWithResponse request
	GETUsersSelfWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETUsersSelfResponse, error)

	// POSTUsersTotpSecretNewWithBodyWithResponse request with any body
	POSTUsersTotpSecretNewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersTotpSecretNewResponse, error)

	POSTUsersTotpSecretNewWithResponse(ctx context.Context, body POSTUsersTotpSecretNewJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersTotpSecretNewResponse, error)

	// PUTUsersUsernameWithBodyWithResponse request with any body
	PUTUsersUsernameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTUsersUsernameResponse, error)

	PUTUsersUsernameWithResponse(ctx context.Context, body PUTUsersUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTUsersUsernameResponse, error)

	// DELETEUsersUserIDWithResponse request
	DELETEUsersUserIDWithResponse(ctx context.Context, userID string, reqEditors ...RequestEditorFn) (*DELETEUsersUserIDResponse, error)

	// GETUsersUserIDWithResponse request
	GETUsersUserIDWithResponse(ctx context.Context, userID string, reqEditors ...RequestEditorFn) (*GETUsersUserIDResponse, error)

	// GETValidIngredientGroupsWithResponse request
	GETValidIngredientGroupsWithResponse(ctx context.Context, params *GETValidIngredientGroupsParams, reqEditors ...RequestEditorFn) (*GETValidIngredientGroupsResponse, error)

	// POSTValidIngredientGroupsWithBodyWithResponse request with any body
	POSTValidIngredientGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTValidIngredientGroupsResponse, error)

	POSTValidIngredientGroupsWithResponse(ctx context.Context, body POSTValidIngredientGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTValidIngredientGroupsResponse, error)

	// GETValidIngredientGroupsSearchWithResponse request
	GETValidIngredientGroupsSearchWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETValidIngredientGroupsSearchResponse, error)

	// DELETEValidIngredientGroupsValidIngredientGroupIDWithResponse request
	DELETEValidIngredientGroupsValidIngredientGroupIDWithResponse(ctx context.Context, validIngredientGroupID string, reqEditors ...RequestEditorFn) (*DELETEValidIngredientGroupsValidIngredientGroupIDResponse, error)

	// GETValidIngredientGroupsValidIngredientGroupIDWithResponse request
	GETValidIngredientGroupsValidIngredientGroupIDWithResponse(ctx context.Context, validIngredientGroupID string, reqEditors ...RequestEditorFn) (*GETValidIngredientGroupsValidIngredientGroupIDResponse, error)

	// PUTValidIngredientGroupsValidIngredientGroupIDWithBodyWithResponse request with any body
	PUTValidIngredientGroupsValidIngredientGroupIDWithBodyWithResponse(ctx context.Context, validIngredientGroupID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTValidIngredientGroupsValidIngredientGroupIDResponse, error)

	PUTValidIngredientGroupsValidIngredientGroupIDWithResponse(ctx context.Context, validIngredientGroupID string, body PUTValidIngredientGroupsValidIngredientGroupIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTValidIngredientGroupsValidIngredientGroupIDResponse, error)

	// GETValidIngredientMeasurementUnitsWithResponse request
	GETValidIngredientMeasurementUnitsWithResponse(ctx context.Context, params *GETValidIngredientMeasurementUnitsParams, reqEditors ...RequestEditorFn) (*GETValidIngredientMeasurementUnitsResponse, error)

	// POSTValidIngredientMeasurementUnitsWithBodyWithResponse request with any body
	POSTValidIngredientMeasurementUnitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTValidIngredientMeasurementUnitsResponse, error)

	POSTValidIngredientMeasurementUnitsWithResponse(ctx context.Context, body POSTValidIngredientMeasurementUnitsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTValidIngredientMeasurementUnitsResponse, error)

	// GETValidIngredientMeasurementUnitsByIngredientValidIngredientIDWithResponse request
	GETValidIngredientMeasurementUnitsByIngredientValidIngredientIDWithResponse(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*GETValidIngredientMeasurementUnitsByIngredientValidIngredientIDResponse, error)

	// GETValidIngredientMeasurementUnitsByMeasurementUnitValidMeasurementUnitIDWithResponse request
	GETValidIngredientMeasurementUnitsByMeasurementUnitValidMeasurementUnitIDWithResponse(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*GETValidIngredientMeasurementUnitsByMeasurementUnitValidMeasurementUnitIDResponse, error)

	// DELETEValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDWithResponse request
	DELETEValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDWithResponse(ctx context.Context, validIngredientMeasurementUnitID string, reqEditors ...RequestEditorFn) (*DELETEValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse, error)

	// GETValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDWithResponse request
	GETValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDWithResponse(ctx context.Context, validIngredientMeasurementUnitID string, reqEditors ...RequestEditorFn) (*GETValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse, error)

	// PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDWithBodyWithResponse request with any body
	PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDWithBodyWithResponse(ctx context.Context, validIngredientMeasurementUnitID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse, error)

	PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDWithResponse(ctx context.Context, validIngredientMeasurementUnitID string, body PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse, error)

	// GETValidIngredientPreparationsWithResponse request
	GETValidIngredientPreparationsWithResponse(ctx context.Context, params *GETValidIngredientPreparationsParams, reqEditors ...RequestEditorFn) (*GETValidIngredientPreparationsResponse, error)

	// POSTValidIngredientPreparationsWithBodyWithResponse request with any body
	POSTValidIngredientPreparationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTValidIngredientPreparationsResponse, error)

	POSTValidIngredientPreparationsWithResponse(ctx context.Context, body POSTValidIngredientPreparationsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTValidIngredientPreparationsResponse, error)

	// GETValidIngredientPreparationsByIngredientValidIngredientIDWithResponse request
	GETValidIngredientPreparationsByIngredientValidIngredientIDWithResponse(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*GETValidIngredientPreparationsByIngredientValidIngredientIDResponse, error)

	// GETValidIngredientPreparationsByPreparationValidPreparationIDWithResponse request
	GETValidIngredientPreparationsByPreparationValidPreparationIDWithResponse(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*GETValidIngredientPreparationsByPreparationValidPreparationIDResponse, error)

	// DELETEValidIngredientPreparationsValidIngredientPreparationIDWithResponse request
	DELETEValidIngredientPreparationsValidIngredientPreparationIDWithResponse(ctx context.Context, validIngredientPreparationID string, reqEditors ...RequestEditorFn) (*DELETEValidIngredientPreparationsValidIngredientPreparationIDResponse, error)

	// GETValidIngredientPreparationsValidIngredientPreparationIDWithResponse request
	GETValidIngredientPreparationsValidIngredientPreparationIDWithResponse(ctx context.Context, validIngredientPreparationID string, reqEditors ...RequestEditorFn) (*GETValidIngredientPreparationsValidIngredientPreparationIDResponse, error)

	// PUTValidIngredientPreparationsValidIngredientPreparationIDWithBodyWithResponse request with any body
	PUTValidIngredientPreparationsValidIngredientPreparationIDWithBodyWithResponse(ctx context.Context, validIngredientPreparationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTValidIngredientPreparationsValidIngredientPreparationIDResponse, error)

	PUTValidIngredientPreparationsValidIngredientPreparationIDWithResponse(ctx context.Context, validIngredientPreparationID string, body PUTValidIngredientPreparationsValidIngredientPreparationIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTValidIngredientPreparationsValidIngredientPreparationIDResponse, error)

	// GETValidIngredientStateIngredientsWithResponse request
	GETValidIngredientStateIngredientsWithResponse(ctx context.Context, params *GETValidIngredientStateIngredientsParams, reqEditors ...RequestEditorFn) (*GETValidIngredientStateIngredientsResponse, error)

	// POSTValidIngredientStateIngredientsWithBodyWithResponse request with any body
	POSTValidIngredientStateIngredientsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTValidIngredientStateIngredientsResponse, error)

	POSTValidIngredientStateIngredientsWithResponse(ctx context.Context, body POSTValidIngredientStateIngredientsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTValidIngredientStateIngredientsResponse, error)

	// GETValidIngredientStateIngredientsByIngredientValidIngredientIDWithResponse request
	GETValidIngredientStateIngredientsByIngredientValidIngredientIDWithResponse(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*GETValidIngredientStateIngredientsByIngredientValidIngredientIDResponse, error)

	// GETValidIngredientStateIngredientsByIngredientStateValidIngredientStateIDWithResponse request
	GETValidIngredientStateIngredientsByIngredientStateValidIngredientStateIDWithResponse(ctx context.Context, validIngredientStateID string, reqEditors ...RequestEditorFn) (*GETValidIngredientStateIngredientsByIngredientStateValidIngredientStateIDResponse, error)

	// DELETEValidIngredientStateIngredientsValidIngredientStateIngredientIDWithResponse request
	DELETEValidIngredientStateIngredientsValidIngredientStateIngredientIDWithResponse(ctx context.Context, validIngredientStateIngredientID string, reqEditors ...RequestEditorFn) (*DELETEValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse, error)

	// GETValidIngredientStateIngredientsValidIngredientStateIngredientIDWithResponse request
	GETValidIngredientStateIngredientsValidIngredientStateIngredientIDWithResponse(ctx context.Context, validIngredientStateIngredientID string, reqEditors ...RequestEditorFn) (*GETValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse, error)

	// PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDWithBodyWithResponse request with any body
	PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDWithBodyWithResponse(ctx context.Context, validIngredientStateIngredientID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse, error)

	PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDWithResponse(ctx context.Context, validIngredientStateIngredientID string, body PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse, error)

	// GETValidIngredientStatesWithResponse request
	GETValidIngredientStatesWithResponse(ctx context.Context, params *GETValidIngredientStatesParams, reqEditors ...RequestEditorFn) (*GETValidIngredientStatesResponse, error)

	// POSTValidIngredientStatesWithBodyWithResponse request with any body
	POSTValidIngredientStatesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTValidIngredientStatesResponse, error)

	POSTValidIngredientStatesWithResponse(ctx context.Context, body POSTValidIngredientStatesJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTValidIngredientStatesResponse, error)

	// GETValidIngredientStatesSearchWithResponse request
	GETValidIngredientStatesSearchWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETValidIngredientStatesSearchResponse, error)

	// DELETEValidIngredientStatesValidIngredientStateIDWithResponse request
	DELETEValidIngredientStatesValidIngredientStateIDWithResponse(ctx context.Context, validIngredientStateID string, reqEditors ...RequestEditorFn) (*DELETEValidIngredientStatesValidIngredientStateIDResponse, error)

	// GETValidIngredientStatesValidIngredientStateIDWithResponse request
	GETValidIngredientStatesValidIngredientStateIDWithResponse(ctx context.Context, validIngredientStateID string, reqEditors ...RequestEditorFn) (*GETValidIngredientStatesValidIngredientStateIDResponse, error)

	// PUTValidIngredientStatesValidIngredientStateIDWithBodyWithResponse request with any body
	PUTValidIngredientStatesValidIngredientStateIDWithBodyWithResponse(ctx context.Context, validIngredientStateID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTValidIngredientStatesValidIngredientStateIDResponse, error)

	PUTValidIngredientStatesValidIngredientStateIDWithResponse(ctx context.Context, validIngredientStateID string, body PUTValidIngredientStatesValidIngredientStateIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTValidIngredientStatesValidIngredientStateIDResponse, error)

	// GETValidIngredientsWithResponse request
	GETValidIngredientsWithResponse(ctx context.Context, params *GETValidIngredientsParams, reqEditors ...RequestEditorFn) (*GETValidIngredientsResponse, error)

	// POSTValidIngredientsWithBodyWithResponse request with any body
	POSTValidIngredientsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTValidIngredientsResponse, error)

	POSTValidIngredientsWithResponse(ctx context.Context, body POSTValidIngredientsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTValidIngredientsResponse, error)

	// GETValidIngredientsByPreparationValidPreparationIDWithResponse request
	GETValidIngredientsByPreparationValidPreparationIDWithResponse(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*GETValidIngredientsByPreparationValidPreparationIDResponse, error)

	// GETValidIngredientsRandomWithResponse request
	GETValidIngredientsRandomWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETValidIngredientsRandomResponse, error)

	// GETValidIngredientsSearchWithResponse request
	GETValidIngredientsSearchWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETValidIngredientsSearchResponse, error)

	// DELETEValidIngredientsValidIngredientIDWithResponse request
	DELETEValidIngredientsValidIngredientIDWithResponse(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*DELETEValidIngredientsValidIngredientIDResponse, error)

	// GETValidIngredientsValidIngredientIDWithResponse request
	GETValidIngredientsValidIngredientIDWithResponse(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*GETValidIngredientsValidIngredientIDResponse, error)

	// PUTValidIngredientsValidIngredientIDWithBodyWithResponse request with any body
	PUTValidIngredientsValidIngredientIDWithBodyWithResponse(ctx context.Context, validIngredientID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTValidIngredientsValidIngredientIDResponse, error)

	PUTValidIngredientsValidIngredientIDWithResponse(ctx context.Context, validIngredientID string, body PUTValidIngredientsValidIngredientIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTValidIngredientsValidIngredientIDResponse, error)

	// GETValidInstrumentsWithResponse request
	GETValidInstrumentsWithResponse(ctx context.Context, params *GETValidInstrumentsParams, reqEditors ...RequestEditorFn) (*GETValidInstrumentsResponse, error)

	// POSTValidInstrumentsWithBodyWithResponse request with any body
	POSTValidInstrumentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTValidInstrumentsResponse, error)

	POSTValidInstrumentsWithResponse(ctx context.Context, body POSTValidInstrumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTValidInstrumentsResponse, error)

	// GETValidInstrumentsRandomWithResponse request
	GETValidInstrumentsRandomWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETValidInstrumentsRandomResponse, error)

	// GETValidInstrumentsSearchWithResponse request
	GETValidInstrumentsSearchWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETValidInstrumentsSearchResponse, error)

	// DELETEValidInstrumentsValidInstrumentIDWithResponse request
	DELETEValidInstrumentsValidInstrumentIDWithResponse(ctx context.Context, validInstrumentID string, reqEditors ...RequestEditorFn) (*DELETEValidInstrumentsValidInstrumentIDResponse, error)

	// GETValidInstrumentsValidInstrumentIDWithResponse request
	GETValidInstrumentsValidInstrumentIDWithResponse(ctx context.Context, validInstrumentID string, reqEditors ...RequestEditorFn) (*GETValidInstrumentsValidInstrumentIDResponse, error)

	// PUTValidInstrumentsValidInstrumentIDWithBodyWithResponse request with any body
	PUTValidInstrumentsValidInstrumentIDWithBodyWithResponse(ctx context.Context, validInstrumentID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTValidInstrumentsValidInstrumentIDResponse, error)

	PUTValidInstrumentsValidInstrumentIDWithResponse(ctx context.Context, validInstrumentID string, body PUTValidInstrumentsValidInstrumentIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTValidInstrumentsValidInstrumentIDResponse, error)

	// POSTValidMeasurementConversionsWithBodyWithResponse request with any body
	POSTValidMeasurementConversionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTValidMeasurementConversionsResponse, error)

	POSTValidMeasurementConversionsWithResponse(ctx context.Context, body POSTValidMeasurementConversionsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTValidMeasurementConversionsResponse, error)

	// GETValidMeasurementConversionsFromUnitValidMeasurementUnitIDWithResponse request
	GETValidMeasurementConversionsFromUnitValidMeasurementUnitIDWithResponse(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*GETValidMeasurementConversionsFromUnitValidMeasurementUnitIDResponse, error)

	// GETValidMeasurementConversionsToUnitValidMeasurementUnitIDWithResponse request
	GETValidMeasurementConversionsToUnitValidMeasurementUnitIDWithResponse(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*GETValidMeasurementConversionsToUnitValidMeasurementUnitIDResponse, error)

	// DELETEValidMeasurementConversionsValidMeasurementUnitConversionIDWithResponse request
	DELETEValidMeasurementConversionsValidMeasurementUnitConversionIDWithResponse(ctx context.Context, validMeasurementUnitConversionID string, reqEditors ...RequestEditorFn) (*DELETEValidMeasurementConversionsValidMeasurementUnitConversionIDResponse, error)

	// GETValidMeasurementConversionsValidMeasurementUnitConversionIDWithResponse request
	GETValidMeasurementConversionsValidMeasurementUnitConversionIDWithResponse(ctx context.Context, validMeasurementUnitConversionID string, reqEditors ...RequestEditorFn) (*GETValidMeasurementConversionsValidMeasurementUnitConversionIDResponse, error)

	// PUTValidMeasurementConversionsValidMeasurementUnitConversionIDWithBodyWithResponse request with any body
	PUTValidMeasurementConversionsValidMeasurementUnitConversionIDWithBodyWithResponse(ctx context.Context, validMeasurementUnitConversionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTValidMeasurementConversionsValidMeasurementUnitConversionIDResponse, error)

	PUTValidMeasurementConversionsValidMeasurementUnitConversionIDWithResponse(ctx context.Context, validMeasurementUnitConversionID string, body PUTValidMeasurementConversionsValidMeasurementUnitConversionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTValidMeasurementConversionsValidMeasurementUnitConversionIDResponse, error)

	// GETValidMeasurementUnitsWithResponse request
	GETValidMeasurementUnitsWithResponse(ctx context.Context, params *GETValidMeasurementUnitsParams, reqEditors ...RequestEditorFn) (*GETValidMeasurementUnitsResponse, error)

	// POSTValidMeasurementUnitsWithBodyWithResponse request with any body
	POSTValidMeasurementUnitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTValidMeasurementUnitsResponse, error)

	POSTValidMeasurementUnitsWithResponse(ctx context.Context, body POSTValidMeasurementUnitsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTValidMeasurementUnitsResponse, error)

	// GETValidMeasurementUnitsByIngredientValidIngredientIDWithResponse request
	GETValidMeasurementUnitsByIngredientValidIngredientIDWithResponse(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*GETValidMeasurementUnitsByIngredientValidIngredientIDResponse, error)

	// GETValidMeasurementUnitsSearchWithResponse request
	GETValidMeasurementUnitsSearchWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETValidMeasurementUnitsSearchResponse, error)

	// DELETEValidMeasurementUnitsValidMeasurementUnitIDWithResponse request
	DELETEValidMeasurementUnitsValidMeasurementUnitIDWithResponse(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*DELETEValidMeasurementUnitsValidMeasurementUnitIDResponse, error)

	// GETValidMeasurementUnitsValidMeasurementUnitIDWithResponse request
	GETValidMeasurementUnitsValidMeasurementUnitIDWithResponse(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*GETValidMeasurementUnitsValidMeasurementUnitIDResponse, error)

	// PUTValidMeasurementUnitsValidMeasurementUnitIDWithBodyWithResponse request with any body
	PUTValidMeasurementUnitsValidMeasurementUnitIDWithBodyWithResponse(ctx context.Context, validMeasurementUnitID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTValidMeasurementUnitsValidMeasurementUnitIDResponse, error)

	PUTValidMeasurementUnitsValidMeasurementUnitIDWithResponse(ctx context.Context, validMeasurementUnitID string, body PUTValidMeasurementUnitsValidMeasurementUnitIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTValidMeasurementUnitsValidMeasurementUnitIDResponse, error)

	// GETValidPreparationInstrumentsWithResponse request
	GETValidPreparationInstrumentsWithResponse(ctx context.Context, params *GETValidPreparationInstrumentsParams, reqEditors ...RequestEditorFn) (*GETValidPreparationInstrumentsResponse, error)

	// POSTValidPreparationInstrumentsWithBodyWithResponse request with any body
	POSTValidPreparationInstrumentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTValidPreparationInstrumentsResponse, error)

	POSTValidPreparationInstrumentsWithResponse(ctx context.Context, body POSTValidPreparationInstrumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTValidPreparationInstrumentsResponse, error)

	// GETValidPreparationInstrumentsByInstrumentValidInstrumentIDWithResponse request
	GETValidPreparationInstrumentsByInstrumentValidInstrumentIDWithResponse(ctx context.Context, validInstrumentID string, reqEditors ...RequestEditorFn) (*GETValidPreparationInstrumentsByInstrumentValidInstrumentIDResponse, error)

	// GETValidPreparationInstrumentsByPreparationValidPreparationIDWithResponse request
	GETValidPreparationInstrumentsByPreparationValidPreparationIDWithResponse(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*GETValidPreparationInstrumentsByPreparationValidPreparationIDResponse, error)

	// DELETEValidPreparationInstrumentsValidPreparationVesselIDWithResponse request
	DELETEValidPreparationInstrumentsValidPreparationVesselIDWithResponse(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*DELETEValidPreparationInstrumentsValidPreparationVesselIDResponse, error)

	// GETValidPreparationInstrumentsValidPreparationVesselIDWithResponse request
	GETValidPreparationInstrumentsValidPreparationVesselIDWithResponse(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*GETValidPreparationInstrumentsValidPreparationVesselIDResponse, error)

	// PUTValidPreparationInstrumentsValidPreparationVesselIDWithBodyWithResponse request with any body
	PUTValidPreparationInstrumentsValidPreparationVesselIDWithBodyWithResponse(ctx context.Context, validPreparationVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTValidPreparationInstrumentsValidPreparationVesselIDResponse, error)

	PUTValidPreparationInstrumentsValidPreparationVesselIDWithResponse(ctx context.Context, validPreparationVesselID string, body PUTValidPreparationInstrumentsValidPreparationVesselIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTValidPreparationInstrumentsValidPreparationVesselIDResponse, error)

	// GETValidPreparationVesselsWithResponse request
	GETValidPreparationVesselsWithResponse(ctx context.Context, params *GETValidPreparationVesselsParams, reqEditors ...RequestEditorFn) (*GETValidPreparationVesselsResponse, error)

	// POSTValidPreparationVesselsWithBodyWithResponse request with any body
	POSTValidPreparationVesselsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTValidPreparationVesselsResponse, error)

	POSTValidPreparationVesselsWithResponse(ctx context.Context, body POSTValidPreparationVesselsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTValidPreparationVesselsResponse, error)

	// GETValidPreparationVesselsByPreparationValidPreparationIDWithResponse request
	GETValidPreparationVesselsByPreparationValidPreparationIDWithResponse(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*GETValidPreparationVesselsByPreparationValidPreparationIDResponse, error)

	// GETValidPreparationVesselsByVesselValidVesselIDWithResponse request
	GETValidPreparationVesselsByVesselValidVesselIDWithResponse(ctx context.Context, validVesselID string, reqEditors ...RequestEditorFn) (*GETValidPreparationVesselsByVesselValidVesselIDResponse, error)

	// DELETEValidPreparationVesselsValidPreparationVesselIDWithResponse request
	DELETEValidPreparationVesselsValidPreparationVesselIDWithResponse(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*DELETEValidPreparationVesselsValidPreparationVesselIDResponse, error)

	// GETValidPreparationVesselsValidPreparationVesselIDWithResponse request
	GETValidPreparationVesselsValidPreparationVesselIDWithResponse(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*GETValidPreparationVesselsValidPreparationVesselIDResponse, error)

	// PUTValidPreparationVesselsValidPreparationVesselIDWithBodyWithResponse request with any body
	PUTValidPreparationVesselsValidPreparationVesselIDWithBodyWithResponse(ctx context.Context, validPreparationVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTValidPreparationVesselsValidPreparationVesselIDResponse, error)

	PUTValidPreparationVesselsValidPreparationVesselIDWithResponse(ctx context.Context, validPreparationVesselID string, body PUTValidPreparationVesselsValidPreparationVesselIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTValidPreparationVesselsValidPreparationVesselIDResponse, error)

	// GETValidPreparationsWithResponse request
	GETValidPreparationsWithResponse(ctx context.Context, params *GETValidPreparationsParams, reqEditors ...RequestEditorFn) (*GETValidPreparationsResponse, error)

	// POSTValidPreparationsWithBodyWithResponse request with any body
	POSTValidPreparationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTValidPreparationsResponse, error)

	POSTValidPreparationsWithResponse(ctx context.Context, body POSTValidPreparationsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTValidPreparationsResponse, error)

	// GETValidPreparationsRandomWithResponse request
	GETValidPreparationsRandomWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETValidPreparationsRandomResponse, error)

	// GETValidPreparationsSearchWithResponse request
	GETValidPreparationsSearchWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETValidPreparationsSearchResponse, error)

	// DELETEValidPreparationsValidPreparationIDWithResponse request
	DELETEValidPreparationsValidPreparationIDWithResponse(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*DELETEValidPreparationsValidPreparationIDResponse, error)

	// GETValidPreparationsValidPreparationIDWithResponse request
	GETValidPreparationsValidPreparationIDWithResponse(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*GETValidPreparationsValidPreparationIDResponse, error)

	// PUTValidPreparationsValidPreparationIDWithBodyWithResponse request with any body
	PUTValidPreparationsValidPreparationIDWithBodyWithResponse(ctx context.Context, validPreparationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTValidPreparationsValidPreparationIDResponse, error)

	PUTValidPreparationsValidPreparationIDWithResponse(ctx context.Context, validPreparationID string, body PUTValidPreparationsValidPreparationIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTValidPreparationsValidPreparationIDResponse, error)

	// GETValidVesselsWithResponse request
	GETValidVesselsWithResponse(ctx context.Context, params *GETValidVesselsParams, reqEditors ...RequestEditorFn) (*GETValidVesselsResponse, error)

	// POSTValidVesselsWithBodyWithResponse request with any body
	POSTValidVesselsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTValidVesselsResponse, error)

	POSTValidVesselsWithResponse(ctx context.Context, body POSTValidVesselsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTValidVesselsResponse, error)

	// GETValidVesselsRandomWithResponse request
	GETValidVesselsRandomWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETValidVesselsRandomResponse, error)

	// GETValidVesselsSearchWithResponse request
	GETValidVesselsSearchWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETValidVesselsSearchResponse, error)

	// DELETEValidVesselsValidVesselIDWithResponse request
	DELETEValidVesselsValidVesselIDWithResponse(ctx context.Context, validVesselID string, reqEditors ...RequestEditorFn) (*DELETEValidVesselsValidVesselIDResponse, error)

	// GETValidVesselsValidVesselIDWithResponse request
	GETValidVesselsValidVesselIDWithResponse(ctx context.Context, validVesselID string, reqEditors ...RequestEditorFn) (*GETValidVesselsValidVesselIDResponse, error)

	// PUTValidVesselsValidVesselIDWithBodyWithResponse request with any body
	PUTValidVesselsValidVesselIDWithBodyWithResponse(ctx context.Context, validVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTValidVesselsValidVesselIDResponse, error)

	PUTValidVesselsValidVesselIDWithResponse(ctx context.Context, validVesselID string, body PUTValidVesselsValidVesselIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTValidVesselsValidVesselIDResponse, error)

	// GETWebhooksWithResponse request
	GETWebhooksWithResponse(ctx context.Context, params *GETWebhooksParams, reqEditors ...RequestEditorFn) (*GETWebhooksResponse, error)

	// POSTWebhooksWithBodyWithResponse request with any body
	POSTWebhooksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTWebhooksResponse, error)

	POSTWebhooksWithResponse(ctx context.Context, body POSTWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTWebhooksResponse, error)

	// DELETEWebhooksWebhookIDWithResponse request
	DELETEWebhooksWebhookIDWithResponse(ctx context.Context, webhookID string, reqEditors ...RequestEditorFn) (*DELETEWebhooksWebhookIDResponse, error)

	// GETWebhooksWebhookIDWithResponse request
	GETWebhooksWebhookIDWithResponse(ctx context.Context, webhookID string, reqEditors ...RequestEditorFn) (*GETWebhooksWebhookIDResponse, error)

	// POSTWebhooksWebhookIDTriggerEventsWithBodyWithResponse request with any body
	POSTWebhooksWebhookIDTriggerEventsWithBodyWithResponse(ctx context.Context, webhookID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTWebhooksWebhookIDTriggerEventsResponse, error)

	POSTWebhooksWebhookIDTriggerEventsWithResponse(ctx context.Context, webhookID string, body POSTWebhooksWebhookIDTriggerEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTWebhooksWebhookIDTriggerEventsResponse, error)

	// DELETEWebhooksWebhookIDTriggerEventsWebhookTriggerEventIDWithResponse request
	DELETEWebhooksWebhookIDTriggerEventsWebhookTriggerEventIDWithResponse(ctx context.Context, webhookID string, webhookTriggerEventID string, reqEditors ...RequestEditorFn) (*DELETEWebhooksWebhookIDTriggerEventsWebhookTriggerEventIDResponse, error)

	// POSTWorkersFinalizeMealPlansWithBodyWithResponse request with any body
	POSTWorkersFinalizeMealPlansWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTWorkersFinalizeMealPlansResponse, error)

	POSTWorkersFinalizeMealPlansWithResponse(ctx context.Context, body POSTWorkersFinalizeMealPlansJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTWorkersFinalizeMealPlansResponse, error)

	// POSTWorkersMealPlanGroceryListInitWithResponse request
	POSTWorkersMealPlanGroceryListInitWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*POSTWorkersMealPlanGroceryListInitResponse, error)

	// POSTWorkersMealPlanTasksWithResponse request
	POSTWorkersMealPlanTasksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*POSTWorkersMealPlanTasksResponse, error)

	// GETAuthStatusWithResponse request
	GETAuthStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETAuthStatusResponse, error)

	// GETOauth2AuthorizeWithResponse request
	GETOauth2AuthorizeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETOauth2AuthorizeResponse, error)

	// POSTOauth2TokenWithResponse request
	POSTOauth2TokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*POSTOauth2TokenResponse, error)

	// POSTUsersWithBodyWithResponse request with any body
	POSTUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersResponse, error)

	POSTUsersWithResponse(ctx context.Context, body POSTUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersResponse, error)

	// POSTUsersEmailAddressVerifyWithBodyWithResponse request with any body
	POSTUsersEmailAddressVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersEmailAddressVerifyResponse, error)

	POSTUsersEmailAddressVerifyWithResponse(ctx context.Context, body POSTUsersEmailAddressVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersEmailAddressVerifyResponse, error)

	// POSTUsersLoginWithBodyWithResponse request with any body
	POSTUsersLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersLoginResponse, error)

	POSTUsersLoginWithResponse(ctx context.Context, body POSTUsersLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersLoginResponse, error)

	// POSTUsersLoginAdminWithBodyWithResponse request with any body
	POSTUsersLoginAdminWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersLoginAdminResponse, error)

	POSTUsersLoginAdminWithResponse(ctx context.Context, body POSTUsersLoginAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersLoginAdminResponse, error)

	// POSTUsersLogoutWithResponse request
	POSTUsersLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*POSTUsersLogoutResponse, error)

	// POSTUsersPasswordResetWithBodyWithResponse request with any body
	POSTUsersPasswordResetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersPasswordResetResponse, error)

	POSTUsersPasswordResetWithResponse(ctx context.Context, body POSTUsersPasswordResetJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersPasswordResetResponse, error)

	// POSTUsersPasswordResetRedeemWithBodyWithResponse request with any body
	POSTUsersPasswordResetRedeemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersPasswordResetRedeemResponse, error)

	POSTUsersPasswordResetRedeemWithResponse(ctx context.Context, body POSTUsersPasswordResetRedeemJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersPasswordResetRedeemResponse, error)

	// POSTUsersTotpSecretVerifyWithBodyWithResponse request with any body
	POSTUsersTotpSecretVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersTotpSecretVerifyResponse, error)

	POSTUsersTotpSecretVerifyWithResponse(ctx context.Context, body POSTUsersTotpSecretVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersTotpSecretVerifyResponse, error)

	// POSTUsersUsernameReminderWithBodyWithResponse request with any body
	POSTUsersUsernameReminderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersUsernameReminderResponse, error)

	POSTUsersUsernameReminderWithResponse(ctx context.Context, body POSTUsersUsernameReminderJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersUsernameReminderResponse, error)
}

type POSTAdminCycleCookieSecretResponse struct {
	HTTPResponse *http.Response
	Body         []byte
}

// Status returns HTTPResponse.Status
func (r POSTAdminCycleCookieSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTAdminCycleCookieSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTAdminUsersStatusResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *UserStatusResponse `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *UserStatusResponse `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTAdminUsersStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTAdminUsersStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETAuditLogEntriesForHouseholdResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *AuditLogEntry   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *AuditLogEntry   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETAuditLogEntriesForHouseholdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETAuditLogEntriesForHouseholdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETAuditLogEntriesForUserResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *AuditLogEntry   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *AuditLogEntry   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETAuditLogEntriesForUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETAuditLogEntriesForUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETAuditLogEntriesAuditLogEntryIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *AuditLogEntry   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *AuditLogEntry   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETAuditLogEntriesAuditLogEntryIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETAuditLogEntriesAuditLogEntryIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETHouseholdInvitationsReceivedResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETHouseholdInvitationsReceivedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETHouseholdInvitationsReceivedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETHouseholdInvitationsSentResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETHouseholdInvitationsSentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETHouseholdInvitationsSentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETHouseholdInvitationsHouseholdInvitationIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETHouseholdInvitationsHouseholdInvitationIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETHouseholdInvitationsHouseholdInvitationIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTHouseholdInvitationsHouseholdInvitationIDAcceptResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTHouseholdInvitationsHouseholdInvitationIDAcceptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTHouseholdInvitationsHouseholdInvitationIDAcceptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTHouseholdInvitationsHouseholdInvitationIDCancelResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTHouseholdInvitationsHouseholdInvitationIDCancelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTHouseholdInvitationsHouseholdInvitationIDCancelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTHouseholdInvitationsHouseholdInvitationIDRejectResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTHouseholdInvitationsHouseholdInvitationIDRejectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTHouseholdInvitationsHouseholdInvitationIDRejectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETHouseholdsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]Household     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]Household     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETHouseholdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETHouseholdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTHouseholdsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTHouseholdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTHouseholdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETHouseholdsCurrentResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETHouseholdsCurrentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETHouseholdsCurrentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETHouseholdsInstrumentsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]HouseholdInstrumentOwnership `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]HouseholdInstrumentOwnership `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETHouseholdsInstrumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETHouseholdsInstrumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTHouseholdsInstrumentsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTHouseholdsInstrumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTHouseholdsInstrumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEHouseholdsHouseholdIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEHouseholdsHouseholdIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEHouseholdsHouseholdIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETHouseholdsHouseholdIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETHouseholdsHouseholdIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETHouseholdsHouseholdIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTHouseholdsHouseholdIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTHouseholdsHouseholdIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTHouseholdsHouseholdIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTHouseholdsHouseholdIDDefaultResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTHouseholdsHouseholdIDDefaultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTHouseholdsHouseholdIDDefaultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTHouseholdsHouseholdIDInvitationsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTHouseholdsHouseholdIDInvitationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTHouseholdsHouseholdIDInvitationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETHouseholdsHouseholdIDInvitationsHouseholdInvitationIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETHouseholdsHouseholdIDInvitationsHouseholdInvitationIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETHouseholdsHouseholdIDInvitationsHouseholdInvitationIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTHouseholdsHouseholdIDInviteResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *HouseholdInvitation `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTHouseholdsHouseholdIDInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTHouseholdsHouseholdIDInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEHouseholdsHouseholdIDMembersUserIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *HouseholdUserMembership `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *HouseholdUserMembership `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEHouseholdsHouseholdIDMembersUserIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEHouseholdsHouseholdIDMembersUserIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PATCHHouseholdsHouseholdIDMembersUserIDPermissionsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *UserPermissionsResponse `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *UserPermissionsResponse `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PATCHHouseholdsHouseholdIDMembersUserIDPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PATCHHouseholdsHouseholdIDMembersUserIDPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTHouseholdsHouseholdIDTransferResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTHouseholdsHouseholdIDTransferResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTHouseholdsHouseholdIDTransferResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETMealPlansResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]MealPlan      `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]MealPlan      `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETMealPlansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETMealPlansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTMealPlansResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *MealPlan        `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *MealPlan        `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTMealPlansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTMealPlansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEMealPlansMealPlanIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *MealPlan        `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *MealPlan        `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEMealPlansMealPlanIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEMealPlansMealPlanIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETMealPlansMealPlanIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *MealPlan        `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *MealPlan        `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETMealPlansMealPlanIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETMealPlansMealPlanIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTMealPlansMealPlanIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *MealPlan        `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *MealPlan        `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTMealPlansMealPlanIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTMealPlansMealPlanIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETMealPlansMealPlanIDEventsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]MealPlanEvent `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]MealPlanEvent `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETMealPlansMealPlanIDEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETMealPlansMealPlanIDEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTMealPlansMealPlanIDEventsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *MealPlanEvent   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *MealPlanEvent   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTMealPlansMealPlanIDEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTMealPlansMealPlanIDEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEMealPlansMealPlanIDEventsMealPlanEventIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *MealPlanEvent   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *MealPlanEvent   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEMealPlansMealPlanIDEventsMealPlanEventIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEMealPlansMealPlanIDEventsMealPlanEventIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETMealPlansMealPlanIDEventsMealPlanEventIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *MealPlanEvent   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *MealPlanEvent   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETMealPlansMealPlanIDEventsMealPlanEventIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETMealPlansMealPlanIDEventsMealPlanEventIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTMealPlansMealPlanIDEventsMealPlanEventIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *MealPlanEvent   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *MealPlanEvent   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTMealPlansMealPlanIDEventsMealPlanEventIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTMealPlansMealPlanIDEventsMealPlanEventIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]MealPlanOption `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]MealPlanOption `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *MealPlanOption  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *MealPlanOption  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *MealPlanOption  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *MealPlanOption  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *MealPlanOption  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *MealPlanOption  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *MealPlanOption  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *MealPlanOption  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]MealPlanOptionVote `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]MealPlanOptionVote `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *MealPlanOptionVote `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *MealPlanOptionVote `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *MealPlanOptionVote `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *MealPlanOptionVote `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *MealPlanOptionVote `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *MealPlanOptionVote `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *MealPlanOptionVote `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *MealPlanOptionVote `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTMealPlansMealPlanIDFinalizeResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *FinalizeMealPlansResponse `json:"data,omitempty"`
		Details    *ResponseDetails           `json:"details,omitempty"`
		Error      *APIError                  `json:"error,omitempty"`
		Pagination *Pagination                `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *FinalizeMealPlansResponse `json:"data,omitempty"`
		Details    *ResponseDetails           `json:"details,omitempty"`
		Error      *APIError                  `json:"error,omitempty"`
		Pagination *Pagination                `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTMealPlansMealPlanIDFinalizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTMealPlansMealPlanIDFinalizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETMealPlansMealPlanIDGroceryListItemsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]MealPlanGroceryListItem `json:"data,omitempty"`
		Details    *ResponseDetails           `json:"details,omitempty"`
		Error      *APIError                  `json:"error,omitempty"`
		Pagination *Pagination                `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]MealPlanGroceryListItem `json:"data,omitempty"`
		Details    *ResponseDetails           `json:"details,omitempty"`
		Error      *APIError                  `json:"error,omitempty"`
		Pagination *Pagination                `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETMealPlansMealPlanIDGroceryListItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETMealPlansMealPlanIDGroceryListItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTMealPlansMealPlanIDGroceryListItemsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *MealPlanGroceryListItem `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *MealPlanGroceryListItem `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTMealPlansMealPlanIDGroceryListItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTMealPlansMealPlanIDGroceryListItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *MealPlanGroceryListItem `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *MealPlanGroceryListItem `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *MealPlanGroceryListItem `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *MealPlanGroceryListItem `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *MealPlanGroceryListItem `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *MealPlanGroceryListItem `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETMealPlansMealPlanIDTasksResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]MealPlanTask  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]MealPlanTask  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETMealPlansMealPlanIDTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETMealPlansMealPlanIDTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTMealPlansMealPlanIDTasksResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *MealPlanTask    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *MealPlanTask    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTMealPlansMealPlanIDTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTMealPlansMealPlanIDTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETMealPlansMealPlanIDTasksMealPlanTaskIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *MealPlanTask    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *MealPlanTask    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETMealPlansMealPlanIDTasksMealPlanTaskIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETMealPlansMealPlanIDTasksMealPlanTaskIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PATCHMealPlansMealPlanIDTasksMealPlanTaskIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *MealPlanTask    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *MealPlanTask    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PATCHMealPlansMealPlanIDTasksMealPlanTaskIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PATCHMealPlansMealPlanIDTasksMealPlanTaskIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETMealsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]Meal          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]Meal          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETMealsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETMealsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTMealsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *Meal            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *Meal            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTMealsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTMealsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETMealsSearchResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *Meal            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *Meal            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETMealsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETMealsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEMealsMealIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *Meal            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *Meal            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEMealsMealIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEMealsMealIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETMealsMealIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *Meal            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *Meal            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETMealsMealIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETMealsMealIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETOauth2ClientsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]OAuth2Client  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]OAuth2Client  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETOauth2ClientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETOauth2ClientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTOauth2ClientsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *OAuth2ClientCreationResponse `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *OAuth2ClientCreationResponse `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTOauth2ClientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTOauth2ClientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEOauth2ClientsOauth2ClientIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *OAuth2Client    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *OAuth2Client    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEOauth2ClientsOauth2ClientIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEOauth2ClientsOauth2ClientIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETOauth2ClientsOauth2ClientIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *OAuth2Client    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *OAuth2Client    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETOauth2ClientsOauth2ClientIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETOauth2ClientsOauth2ClientIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETRecipesResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]Recipe        `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]Recipe        `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETRecipesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETRecipesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTRecipesResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *Recipe          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *Recipe          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTRecipesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTRecipesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETRecipesSearchResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *Recipe          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *Recipe          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETRecipesSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETRecipesSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETERecipesRecipeIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *Recipe          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *Recipe          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETERecipesRecipeIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETERecipesRecipeIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETRecipesRecipeIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *Recipe          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *Recipe          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETRecipesRecipeIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETRecipesRecipeIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTRecipesRecipeIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *Recipe          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *Recipe          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTRecipesRecipeIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTRecipesRecipeIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTRecipesRecipeIDCloneResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *Recipe          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *Recipe          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTRecipesRecipeIDCloneResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTRecipesRecipeIDCloneResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETRecipesRecipeIDDagResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *APIError        `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *APIError        `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETRecipesRecipeIDDagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETRecipesRecipeIDDagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTRecipesRecipeIDImagesResponse struct {
	HTTPResponse *http.Response
	Body         []byte
}

// Status returns HTTPResponse.Status
func (r POSTRecipesRecipeIDImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTRecipesRecipeIDImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETRecipesRecipeIDMermaidResponse struct {
	HTTPResponse *http.Response
	Body         []byte
}

// Status returns HTTPResponse.Status
func (r GETRecipesRecipeIDMermaidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETRecipesRecipeIDMermaidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETRecipesRecipeIDPrepStepsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipePrepTaskStep `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipePrepTaskStep `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETRecipesRecipeIDPrepStepsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETRecipesRecipeIDPrepStepsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETRecipesRecipeIDPrepTasksResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]RecipePrepTask `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]RecipePrepTask `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETRecipesRecipeIDPrepTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETRecipesRecipeIDPrepTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTRecipesRecipeIDPrepTasksResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *RecipePrepTask  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *RecipePrepTask  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTRecipesRecipeIDPrepTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTRecipesRecipeIDPrepTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETERecipesRecipeIDPrepTasksRecipePrepTaskIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *RecipePrepTask  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *RecipePrepTask  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETERecipesRecipeIDPrepTasksRecipePrepTaskIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETERecipesRecipeIDPrepTasksRecipePrepTaskIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETRecipesRecipeIDPrepTasksRecipePrepTaskIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipePrepTask  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipePrepTask  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETRecipesRecipeIDPrepTasksRecipePrepTaskIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETRecipesRecipeIDPrepTasksRecipePrepTaskIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipePrepTask  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipePrepTask  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETRecipesRecipeIDRatingsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]RecipeRating  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]RecipeRating  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETRecipesRecipeIDRatingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETRecipesRecipeIDRatingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTRecipesRecipeIDRatingsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *RecipeRating    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *RecipeRating    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTRecipesRecipeIDRatingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTRecipesRecipeIDRatingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETERecipesRecipeIDRatingsRecipeRatingIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *RecipeRating    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *RecipeRating    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETERecipesRecipeIDRatingsRecipeRatingIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETERecipesRecipeIDRatingsRecipeRatingIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETRecipesRecipeIDRatingsRecipeRatingIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeRating    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeRating    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETRecipesRecipeIDRatingsRecipeRatingIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETRecipesRecipeIDRatingsRecipeRatingIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTRecipesRecipeIDRatingsRecipeRatingIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeRating    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeRating    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTRecipesRecipeIDRatingsRecipeRatingIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTRecipesRecipeIDRatingsRecipeRatingIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETRecipesRecipeIDStepsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]RecipeStep    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]RecipeStep    `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETRecipesRecipeIDStepsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETRecipesRecipeIDStepsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTRecipesRecipeIDStepsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *RecipeStep      `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *RecipeStep      `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTRecipesRecipeIDStepsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTRecipesRecipeIDStepsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETERecipesRecipeIDStepsRecipeStepIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *RecipeStep      `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *RecipeStep      `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETERecipesRecipeIDStepsRecipeStepIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETERecipesRecipeIDStepsRecipeStepIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETRecipesRecipeIDStepsRecipeStepIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeStep      `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeStep      `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETRecipesRecipeIDStepsRecipeStepIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETRecipesRecipeIDStepsRecipeStepIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTRecipesRecipeIDStepsRecipeStepIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeStep      `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeStep      `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTRecipesRecipeIDStepsRecipeStepIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTRecipesRecipeIDStepsRecipeStepIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]RecipeStepCompletionCondition `json:"data,omitempty"`
		Details    *ResponseDetails                 `json:"details,omitempty"`
		Error      *APIError                        `json:"error,omitempty"`
		Pagination *Pagination                      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]RecipeStepCompletionCondition `json:"data,omitempty"`
		Details    *ResponseDetails                 `json:"details,omitempty"`
		Error      *APIError                        `json:"error,omitempty"`
		Pagination *Pagination                      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
		Details    *ResponseDetails               `json:"details,omitempty"`
		Error      *APIError                      `json:"error,omitempty"`
		Pagination *Pagination                    `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
		Details    *ResponseDetails               `json:"details,omitempty"`
		Error      *APIError                      `json:"error,omitempty"`
		Pagination *Pagination                    `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETERecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
		Details    *ResponseDetails               `json:"details,omitempty"`
		Error      *APIError                      `json:"error,omitempty"`
		Pagination *Pagination                    `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
		Details    *ResponseDetails               `json:"details,omitempty"`
		Error      *APIError                      `json:"error,omitempty"`
		Pagination *Pagination                    `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETERecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETERecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
		Details    *ResponseDetails               `json:"details,omitempty"`
		Error      *APIError                      `json:"error,omitempty"`
		Pagination *Pagination                    `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
		Details    *ResponseDetails               `json:"details,omitempty"`
		Error      *APIError                      `json:"error,omitempty"`
		Pagination *Pagination                    `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
		Details    *ResponseDetails               `json:"details,omitempty"`
		Error      *APIError                      `json:"error,omitempty"`
		Pagination *Pagination                    `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
		Details    *ResponseDetails               `json:"details,omitempty"`
		Error      *APIError                      `json:"error,omitempty"`
		Pagination *Pagination                    `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTRecipesRecipeIDStepsRecipeStepIDImagesResponse struct {
	HTTPResponse *http.Response
	Body         []byte
}

// Status returns HTTPResponse.Status
func (r POSTRecipesRecipeIDStepsRecipeStepIDImagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTRecipesRecipeIDStepsRecipeStepIDImagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETRecipesRecipeIDStepsRecipeStepIDIngredientsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]RecipeStepIngredient `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]RecipeStepIngredient `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETRecipesRecipeIDStepsRecipeStepIDIngredientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETRecipesRecipeIDStepsRecipeStepIDIngredientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTRecipesRecipeIDStepsRecipeStepIDIngredientsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *RecipeStepIngredient `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *RecipeStepIngredient `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTRecipesRecipeIDStepsRecipeStepIDIngredientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTRecipesRecipeIDStepsRecipeStepIDIngredientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETERecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *RecipeStepIngredient `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *RecipeStepIngredient `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETERecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETERecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeStepIngredient `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeStepIngredient `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeStepIngredient `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeStepIngredient `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETRecipesRecipeIDStepsRecipeStepIDInstrumentsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]RecipeStepInstrument `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]RecipeStepInstrument `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETRecipesRecipeIDStepsRecipeStepIDInstrumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETRecipesRecipeIDStepsRecipeStepIDInstrumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *RecipeStepInstrument `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *RecipeStepInstrument `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETERecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *RecipeStepInstrument `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *RecipeStepInstrument `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETERecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETERecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeStepInstrument `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeStepInstrument `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeStepInstrument `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeStepInstrument `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETRecipesRecipeIDStepsRecipeStepIDProductsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]RecipeStepProduct `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]RecipeStepProduct `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETRecipesRecipeIDStepsRecipeStepIDProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETRecipesRecipeIDStepsRecipeStepIDProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTRecipesRecipeIDStepsRecipeStepIDProductsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *RecipeStepProduct `json:"data,omitempty"`
		Details    *ResponseDetails   `json:"details,omitempty"`
		Error      *APIError          `json:"error,omitempty"`
		Pagination *Pagination        `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *RecipeStepProduct `json:"data,omitempty"`
		Details    *ResponseDetails   `json:"details,omitempty"`
		Error      *APIError          `json:"error,omitempty"`
		Pagination *Pagination        `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTRecipesRecipeIDStepsRecipeStepIDProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTRecipesRecipeIDStepsRecipeStepIDProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETERecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *RecipeStepProduct `json:"data,omitempty"`
		Details    *ResponseDetails   `json:"details,omitempty"`
		Error      *APIError          `json:"error,omitempty"`
		Pagination *Pagination        `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *RecipeStepProduct `json:"data,omitempty"`
		Details    *ResponseDetails   `json:"details,omitempty"`
		Error      *APIError          `json:"error,omitempty"`
		Pagination *Pagination        `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETERecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETERecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeStepProduct `json:"data,omitempty"`
		Details    *ResponseDetails   `json:"details,omitempty"`
		Error      *APIError          `json:"error,omitempty"`
		Pagination *Pagination        `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeStepProduct `json:"data,omitempty"`
		Details    *ResponseDetails   `json:"details,omitempty"`
		Error      *APIError          `json:"error,omitempty"`
		Pagination *Pagination        `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeStepProduct `json:"data,omitempty"`
		Details    *ResponseDetails   `json:"details,omitempty"`
		Error      *APIError          `json:"error,omitempty"`
		Pagination *Pagination        `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeStepProduct `json:"data,omitempty"`
		Details    *ResponseDetails   `json:"details,omitempty"`
		Error      *APIError          `json:"error,omitempty"`
		Pagination *Pagination        `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETRecipesRecipeIDStepsRecipeStepIDVesselsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]RecipeStepVessel `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]RecipeStepVessel `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETRecipesRecipeIDStepsRecipeStepIDVesselsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETRecipesRecipeIDStepsRecipeStepIDVesselsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTRecipesRecipeIDStepsRecipeStepIDVesselsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *RecipeStepVessel `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *RecipeStepVessel `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTRecipesRecipeIDStepsRecipeStepIDVesselsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTRecipesRecipeIDStepsRecipeStepIDVesselsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETERecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *RecipeStepVessel `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *RecipeStepVessel `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETERecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETERecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeStepVessel `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeStepVessel `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *RecipeStepVessel `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *RecipeStepVessel `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETSettingsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ServiceSetting `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]ServiceSetting `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTSettingsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ServiceSetting  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ServiceSetting  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTSettingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTSettingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTSettingsConfigurationsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ServiceSettingConfiguration `json:"data,omitempty"`
		Details    *ResponseDetails             `json:"details,omitempty"`
		Error      *APIError                    `json:"error,omitempty"`
		Pagination *Pagination                  `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ServiceSettingConfiguration `json:"data,omitempty"`
		Details    *ResponseDetails             `json:"details,omitempty"`
		Error      *APIError                    `json:"error,omitempty"`
		Pagination *Pagination                  `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTSettingsConfigurationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTSettingsConfigurationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETSettingsConfigurationsHouseholdResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ServiceSettingConfiguration `json:"data,omitempty"`
		Details    *ResponseDetails             `json:"details,omitempty"`
		Error      *APIError                    `json:"error,omitempty"`
		Pagination *Pagination                  `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ServiceSettingConfiguration `json:"data,omitempty"`
		Details    *ResponseDetails             `json:"details,omitempty"`
		Error      *APIError                    `json:"error,omitempty"`
		Pagination *Pagination                  `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETSettingsConfigurationsHouseholdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETSettingsConfigurationsHouseholdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETSettingsConfigurationsUserResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ServiceSettingConfiguration `json:"data,omitempty"`
		Details    *ResponseDetails             `json:"details,omitempty"`
		Error      *APIError                    `json:"error,omitempty"`
		Pagination *Pagination                  `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ServiceSettingConfiguration `json:"data,omitempty"`
		Details    *ResponseDetails             `json:"details,omitempty"`
		Error      *APIError                    `json:"error,omitempty"`
		Pagination *Pagination                  `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETSettingsConfigurationsUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETSettingsConfigurationsUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETSettingsConfigurationsUserServiceSettingConfigurationNameResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ServiceSettingConfiguration `json:"data,omitempty"`
		Details    *ResponseDetails             `json:"details,omitempty"`
		Error      *APIError                    `json:"error,omitempty"`
		Pagination *Pagination                  `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ServiceSettingConfiguration `json:"data,omitempty"`
		Details    *ResponseDetails             `json:"details,omitempty"`
		Error      *APIError                    `json:"error,omitempty"`
		Pagination *Pagination                  `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETSettingsConfigurationsUserServiceSettingConfigurationNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETSettingsConfigurationsUserServiceSettingConfigurationNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETESettingsConfigurationsServiceSettingConfigurationIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ServiceSettingConfiguration `json:"data,omitempty"`
		Details    *ResponseDetails             `json:"details,omitempty"`
		Error      *APIError                    `json:"error,omitempty"`
		Pagination *Pagination                  `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ServiceSettingConfiguration `json:"data,omitempty"`
		Details    *ResponseDetails             `json:"details,omitempty"`
		Error      *APIError                    `json:"error,omitempty"`
		Pagination *Pagination                  `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETESettingsConfigurationsServiceSettingConfigurationIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETESettingsConfigurationsServiceSettingConfigurationIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTSettingsConfigurationsServiceSettingConfigurationIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ServiceSettingConfiguration `json:"data,omitempty"`
		Details    *ResponseDetails             `json:"details,omitempty"`
		Error      *APIError                    `json:"error,omitempty"`
		Pagination *Pagination                  `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ServiceSettingConfiguration `json:"data,omitempty"`
		Details    *ResponseDetails             `json:"details,omitempty"`
		Error      *APIError                    `json:"error,omitempty"`
		Pagination *Pagination                  `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTSettingsConfigurationsServiceSettingConfigurationIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTSettingsConfigurationsServiceSettingConfigurationIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETSettingsSearchResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ServiceSetting  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ServiceSetting  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETSettingsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETSettingsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETESettingsServiceSettingIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ServiceSetting  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ServiceSetting  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETESettingsServiceSettingIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETESettingsServiceSettingIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETSettingsServiceSettingIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ServiceSetting  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ServiceSetting  `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETSettingsServiceSettingIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETSettingsServiceSettingIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETUserIngredientPreferencesResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]UserIngredientPreference `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]UserIngredientPreference `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETUserIngredientPreferencesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETUserIngredientPreferencesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTUserIngredientPreferencesResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *UserIngredientPreference `json:"data,omitempty"`
		Details    *ResponseDetails          `json:"details,omitempty"`
		Error      *APIError                 `json:"error,omitempty"`
		Pagination *Pagination               `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *UserIngredientPreference `json:"data,omitempty"`
		Details    *ResponseDetails          `json:"details,omitempty"`
		Error      *APIError                 `json:"error,omitempty"`
		Pagination *Pagination               `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTUserIngredientPreferencesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTUserIngredientPreferencesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEUserIngredientPreferencesUserIngredientPreferenceIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *UserIngredientPreference `json:"data,omitempty"`
		Details    *ResponseDetails          `json:"details,omitempty"`
		Error      *APIError                 `json:"error,omitempty"`
		Pagination *Pagination               `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *UserIngredientPreference `json:"data,omitempty"`
		Details    *ResponseDetails          `json:"details,omitempty"`
		Error      *APIError                 `json:"error,omitempty"`
		Pagination *Pagination               `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEUserIngredientPreferencesUserIngredientPreferenceIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEUserIngredientPreferencesUserIngredientPreferenceIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTUserIngredientPreferencesUserIngredientPreferenceIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *UserIngredientPreference `json:"data,omitempty"`
		Details    *ResponseDetails          `json:"details,omitempty"`
		Error      *APIError                 `json:"error,omitempty"`
		Pagination *Pagination               `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *UserIngredientPreference `json:"data,omitempty"`
		Details    *ResponseDetails          `json:"details,omitempty"`
		Error      *APIError                 `json:"error,omitempty"`
		Pagination *Pagination               `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTUserIngredientPreferencesUserIngredientPreferenceIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTUserIngredientPreferencesUserIngredientPreferenceIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETUserNotificationsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]UserNotification `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]UserNotification `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETUserNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETUserNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTUserNotificationsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *UserNotification `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *UserNotification `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTUserNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTUserNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETUserNotificationsUserNotificationIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *UserNotification `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *UserNotification `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETUserNotificationsUserNotificationIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETUserNotificationsUserNotificationIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PATCHUserNotificationsUserNotificationIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *UserNotification `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *UserNotification `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PATCHUserNotificationsUserNotificationIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PATCHUserNotificationsUserNotificationIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETUsersResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]User          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]User          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTUsersAvatarUploadResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTUsersAvatarUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTUsersAvatarUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTUsersDetailsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTUsersDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTUsersDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTUsersEmailAddressResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTUsersEmailAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTUsersEmailAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTUsersEmailAddressVerificationResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTUsersEmailAddressVerificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTUsersEmailAddressVerificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTUsersHouseholdSelectResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *Household       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTUsersHouseholdSelectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTUsersHouseholdSelectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTUsersPasswordNewResponse struct {
	HTTPResponse *http.Response
	Body         []byte
}

// Status returns HTTPResponse.Status
func (r PUTUsersPasswordNewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTUsersPasswordNewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTUsersPermissionsCheckResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *UserPermissionsResponse `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *UserPermissionsResponse `json:"data,omitempty"`
		Details    *ResponseDetails         `json:"details,omitempty"`
		Error      *APIError                `json:"error,omitempty"`
		Pagination *Pagination              `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTUsersPermissionsCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTUsersPermissionsCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETUsersSearchResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]User          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]User          `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETUsersSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETUsersSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETUsersSelfResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETUsersSelfResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETUsersSelfResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTUsersTotpSecretNewResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *TOTPSecretRefreshResponse `json:"data,omitempty"`
		Details    *ResponseDetails           `json:"details,omitempty"`
		Error      *APIError                  `json:"error,omitempty"`
		Pagination *Pagination                `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *TOTPSecretRefreshResponse `json:"data,omitempty"`
		Details    *ResponseDetails           `json:"details,omitempty"`
		Error      *APIError                  `json:"error,omitempty"`
		Pagination *Pagination                `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTUsersTotpSecretNewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTUsersTotpSecretNewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTUsersUsernameResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTUsersUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTUsersUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEUsersUserIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEUsersUserIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEUsersUserIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETUsersUserIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETUsersUserIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETUsersUserIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidIngredientGroupsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ValidIngredientGroup `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]ValidIngredientGroup `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidIngredientGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidIngredientGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTValidIngredientGroupsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ValidIngredientGroup `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ValidIngredientGroup `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTValidIngredientGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTValidIngredientGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidIngredientGroupsSearchResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientGroup `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientGroup `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidIngredientGroupsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidIngredientGroupsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEValidIngredientGroupsValidIngredientGroupIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ValidIngredientGroup `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ValidIngredientGroup `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEValidIngredientGroupsValidIngredientGroupIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEValidIngredientGroupsValidIngredientGroupIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidIngredientGroupsValidIngredientGroupIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientGroup `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientGroup `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidIngredientGroupsValidIngredientGroupIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidIngredientGroupsValidIngredientGroupIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTValidIngredientGroupsValidIngredientGroupIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientGroup `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientGroup `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTValidIngredientGroupsValidIngredientGroupIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTValidIngredientGroupsValidIngredientGroupIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidIngredientMeasurementUnitsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                  `json:"details,omitempty"`
		Error      *APIError                         `json:"error,omitempty"`
		Pagination *Pagination                       `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                  `json:"details,omitempty"`
		Error      *APIError                         `json:"error,omitempty"`
		Pagination *Pagination                       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidIngredientMeasurementUnitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidIngredientMeasurementUnitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTValidIngredientMeasurementUnitsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTValidIngredientMeasurementUnitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTValidIngredientMeasurementUnitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidIngredientMeasurementUnitsByIngredientValidIngredientIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidIngredientMeasurementUnitsByIngredientValidIngredientIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidIngredientMeasurementUnitsByIngredientValidIngredientIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidIngredientMeasurementUnitsByMeasurementUnitValidMeasurementUnitIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidIngredientMeasurementUnitsByMeasurementUnitValidMeasurementUnitIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidIngredientMeasurementUnitsByMeasurementUnitValidMeasurementUnitIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidIngredientPreparationsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidIngredientPreparationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidIngredientPreparationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTValidIngredientPreparationsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTValidIngredientPreparationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTValidIngredientPreparationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidIngredientPreparationsByIngredientValidIngredientIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidIngredientPreparationsByIngredientValidIngredientIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidIngredientPreparationsByIngredientValidIngredientIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidIngredientPreparationsByPreparationValidPreparationIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidIngredientPreparationsByPreparationValidPreparationIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidIngredientPreparationsByPreparationValidPreparationIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEValidIngredientPreparationsValidIngredientPreparationIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEValidIngredientPreparationsValidIngredientPreparationIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEValidIngredientPreparationsValidIngredientPreparationIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidIngredientPreparationsValidIngredientPreparationIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidIngredientPreparationsValidIngredientPreparationIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidIngredientPreparationsValidIngredientPreparationIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTValidIngredientPreparationsValidIngredientPreparationIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientPreparation `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTValidIngredientPreparationsValidIngredientPreparationIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTValidIngredientPreparationsValidIngredientPreparationIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidIngredientStateIngredientsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                  `json:"details,omitempty"`
		Error      *APIError                         `json:"error,omitempty"`
		Pagination *Pagination                       `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                  `json:"details,omitempty"`
		Error      *APIError                         `json:"error,omitempty"`
		Pagination *Pagination                       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidIngredientStateIngredientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidIngredientStateIngredientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTValidIngredientStateIngredientsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTValidIngredientStateIngredientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTValidIngredientStateIngredientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidIngredientStateIngredientsByIngredientValidIngredientIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidIngredientStateIngredientsByIngredientValidIngredientIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidIngredientStateIngredientsByIngredientValidIngredientIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidIngredientStateIngredientsByIngredientStateValidIngredientStateIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidIngredientStateIngredientsByIngredientStateValidIngredientStateIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidIngredientStateIngredientsByIngredientStateValidIngredientStateIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidIngredientStatesResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ValidIngredientState `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]ValidIngredientState `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidIngredientStatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidIngredientStatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTValidIngredientStatesResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ValidIngredientState `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ValidIngredientState `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTValidIngredientStatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTValidIngredientStatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidIngredientStatesSearchResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientState `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientState `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidIngredientStatesSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidIngredientStatesSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEValidIngredientStatesValidIngredientStateIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ValidIngredientState `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ValidIngredientState `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEValidIngredientStatesValidIngredientStateIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEValidIngredientStatesValidIngredientStateIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidIngredientStatesValidIngredientStateIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientState `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientState `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidIngredientStatesValidIngredientStateIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidIngredientStatesValidIngredientStateIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTValidIngredientStatesValidIngredientStateIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredientState `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredientState `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTValidIngredientStatesValidIngredientStateIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTValidIngredientStatesValidIngredientStateIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidIngredientsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails   `json:"details,omitempty"`
		Error      *APIError          `json:"error,omitempty"`
		Pagination *Pagination        `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails   `json:"details,omitempty"`
		Error      *APIError          `json:"error,omitempty"`
		Pagination *Pagination        `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidIngredientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidIngredientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTValidIngredientsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTValidIngredientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTValidIngredientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidIngredientsByPreparationValidPreparationIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidIngredientsByPreparationValidPreparationIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidIngredientsByPreparationValidPreparationIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidIngredientsRandomResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidIngredientsRandomResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidIngredientsRandomResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidIngredientsSearchResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidIngredientsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidIngredientsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEValidIngredientsValidIngredientIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEValidIngredientsValidIngredientIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEValidIngredientsValidIngredientIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidIngredientsValidIngredientIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidIngredientsValidIngredientIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidIngredientsValidIngredientIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTValidIngredientsValidIngredientIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidIngredient `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTValidIngredientsValidIngredientIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTValidIngredientsValidIngredientIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidInstrumentsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails   `json:"details,omitempty"`
		Error      *APIError          `json:"error,omitempty"`
		Pagination *Pagination        `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails   `json:"details,omitempty"`
		Error      *APIError          `json:"error,omitempty"`
		Pagination *Pagination        `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidInstrumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidInstrumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTValidInstrumentsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTValidInstrumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTValidInstrumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidInstrumentsRandomResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidInstrumentsRandomResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidInstrumentsRandomResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidInstrumentsSearchResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidInstrumentsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidInstrumentsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEValidInstrumentsValidInstrumentIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEValidInstrumentsValidInstrumentIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEValidInstrumentsValidInstrumentIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidInstrumentsValidInstrumentIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidInstrumentsValidInstrumentIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidInstrumentsValidInstrumentIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTValidInstrumentsValidInstrumentIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidInstrument `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTValidInstrumentsValidInstrumentIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTValidInstrumentsValidInstrumentIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTValidMeasurementConversionsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTValidMeasurementConversionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTValidMeasurementConversionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidMeasurementConversionsFromUnitValidMeasurementUnitIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidMeasurementConversionsFromUnitValidMeasurementUnitIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidMeasurementConversionsFromUnitValidMeasurementUnitIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidMeasurementConversionsToUnitValidMeasurementUnitIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidMeasurementConversionsToUnitValidMeasurementUnitIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidMeasurementConversionsToUnitValidMeasurementUnitIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEValidMeasurementConversionsValidMeasurementUnitConversionIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEValidMeasurementConversionsValidMeasurementUnitConversionIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEValidMeasurementConversionsValidMeasurementUnitConversionIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidMeasurementConversionsValidMeasurementUnitConversionIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidMeasurementConversionsValidMeasurementUnitConversionIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidMeasurementConversionsValidMeasurementUnitConversionIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTValidMeasurementConversionsValidMeasurementUnitConversionIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
		Details    *ResponseDetails                `json:"details,omitempty"`
		Error      *APIError                       `json:"error,omitempty"`
		Pagination *Pagination                     `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTValidMeasurementConversionsValidMeasurementUnitConversionIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTValidMeasurementConversionsValidMeasurementUnitConversionIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidMeasurementUnitsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidMeasurementUnitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidMeasurementUnitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTValidMeasurementUnitsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTValidMeasurementUnitsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTValidMeasurementUnitsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidMeasurementUnitsByIngredientValidIngredientIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidMeasurementUnitsByIngredientValidIngredientIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidMeasurementUnitsByIngredientValidIngredientIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidMeasurementUnitsSearchResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidMeasurementUnitsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidMeasurementUnitsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEValidMeasurementUnitsValidMeasurementUnitIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEValidMeasurementUnitsValidMeasurementUnitIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEValidMeasurementUnitsValidMeasurementUnitIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidMeasurementUnitsValidMeasurementUnitIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidMeasurementUnitsValidMeasurementUnitIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidMeasurementUnitsValidMeasurementUnitIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTValidMeasurementUnitsValidMeasurementUnitIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidMeasurementUnit `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTValidMeasurementUnitsValidMeasurementUnitIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTValidMeasurementUnitsValidMeasurementUnitIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidPreparationInstrumentsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails              `json:"details,omitempty"`
		Error      *APIError                     `json:"error,omitempty"`
		Pagination *Pagination                   `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidPreparationInstrumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidPreparationInstrumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTValidPreparationInstrumentsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTValidPreparationInstrumentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTValidPreparationInstrumentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidPreparationInstrumentsByInstrumentValidInstrumentIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidPreparationInstrumentsByInstrumentValidInstrumentIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidPreparationInstrumentsByInstrumentValidInstrumentIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidPreparationInstrumentsByPreparationValidPreparationIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidPreparationInstrumentsByPreparationValidPreparationIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidPreparationInstrumentsByPreparationValidPreparationIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEValidPreparationInstrumentsValidPreparationVesselIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEValidPreparationInstrumentsValidPreparationVesselIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEValidPreparationInstrumentsValidPreparationVesselIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidPreparationInstrumentsValidPreparationVesselIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidPreparationInstrumentsValidPreparationVesselIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidPreparationInstrumentsValidPreparationVesselIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTValidPreparationInstrumentsValidPreparationVesselIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidPreparationInstrument `json:"data,omitempty"`
		Details    *ResponseDetails            `json:"details,omitempty"`
		Error      *APIError                   `json:"error,omitempty"`
		Pagination *Pagination                 `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTValidPreparationInstrumentsValidPreparationVesselIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTValidPreparationInstrumentsValidPreparationVesselIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidPreparationVesselsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails          `json:"details,omitempty"`
		Error      *APIError                 `json:"error,omitempty"`
		Pagination *Pagination               `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails          `json:"details,omitempty"`
		Error      *APIError                 `json:"error,omitempty"`
		Pagination *Pagination               `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidPreparationVesselsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidPreparationVesselsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTValidPreparationVesselsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTValidPreparationVesselsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTValidPreparationVesselsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidPreparationVesselsByPreparationValidPreparationIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidPreparationVesselsByPreparationValidPreparationIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidPreparationVesselsByPreparationValidPreparationIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidPreparationVesselsByVesselValidVesselIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidPreparationVesselsByVesselValidVesselIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidPreparationVesselsByVesselValidVesselIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEValidPreparationVesselsValidPreparationVesselIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEValidPreparationVesselsValidPreparationVesselIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEValidPreparationVesselsValidPreparationVesselIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidPreparationVesselsValidPreparationVesselIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidPreparationVesselsValidPreparationVesselIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidPreparationVesselsValidPreparationVesselIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTValidPreparationVesselsValidPreparationVesselIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidPreparationVessel `json:"data,omitempty"`
		Details    *ResponseDetails        `json:"details,omitempty"`
		Error      *APIError               `json:"error,omitempty"`
		Pagination *Pagination             `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTValidPreparationVesselsValidPreparationVesselIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTValidPreparationVesselsValidPreparationVesselIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidPreparationsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidPreparationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidPreparationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTValidPreparationsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTValidPreparationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTValidPreparationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidPreparationsRandomResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidPreparationsRandomResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidPreparationsRandomResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidPreparationsSearchResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidPreparationsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidPreparationsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEValidPreparationsValidPreparationIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEValidPreparationsValidPreparationIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEValidPreparationsValidPreparationIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidPreparationsValidPreparationIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidPreparationsValidPreparationIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidPreparationsValidPreparationIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTValidPreparationsValidPreparationIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidPreparation `json:"data,omitempty"`
		Details    *ResponseDetails  `json:"details,omitempty"`
		Error      *APIError         `json:"error,omitempty"`
		Pagination *Pagination       `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTValidPreparationsValidPreparationIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTValidPreparationsValidPreparationIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidVesselsResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]ValidVessel   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]ValidVessel   `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidVesselsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidVesselsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTValidVesselsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *ValidVessel     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *ValidVessel     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTValidVesselsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTValidVesselsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidVesselsRandomResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidVessel     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidVessel     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidVesselsRandomResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidVesselsRandomResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidVesselsSearchResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidVessel     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidVessel     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidVesselsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidVesselsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEValidVesselsValidVesselIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *ValidVessel     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *ValidVessel     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEValidVesselsValidVesselIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEValidVesselsValidVesselIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETValidVesselsValidVesselIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidVessel     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidVessel     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETValidVesselsValidVesselIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETValidVesselsValidVesselIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PUTValidVesselsValidVesselIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *ValidVessel     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *ValidVessel     `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r PUTValidVesselsValidVesselIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PUTValidVesselsValidVesselIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETWebhooksResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *[]Webhook       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *[]Webhook       `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETWebhooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETWebhooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTWebhooksResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *Webhook         `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *Webhook         `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTWebhooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTWebhooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEWebhooksWebhookIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *Webhook         `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *Webhook         `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEWebhooksWebhookIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEWebhooksWebhookIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETWebhooksWebhookIDResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *Webhook         `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *Webhook         `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETWebhooksWebhookIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETWebhooksWebhookIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTWebhooksWebhookIDTriggerEventsResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *WebhookTriggerEvent `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *WebhookTriggerEvent `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTWebhooksWebhookIDTriggerEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTWebhooksWebhookIDTriggerEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DELETEWebhooksWebhookIDTriggerEventsWebhookTriggerEventIDResponse struct {
	HTTPResponse *http.Response
	JSON202      *struct {
		Data       *WebhookTriggerEvent `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	XML202 *struct {
		Data       *WebhookTriggerEvent `json:"data,omitempty"`
		Details    *ResponseDetails     `json:"details,omitempty"`
		Error      *APIError            `json:"error,omitempty"`
		Pagination *Pagination          `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r DELETEWebhooksWebhookIDTriggerEventsWebhookTriggerEventIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DELETEWebhooksWebhookIDTriggerEventsWebhookTriggerEventIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTWorkersFinalizeMealPlansResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *FinalizeMealPlansRequest `json:"data,omitempty"`
		Details    *ResponseDetails          `json:"details,omitempty"`
		Error      *APIError                 `json:"error,omitempty"`
		Pagination *Pagination               `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *FinalizeMealPlansRequest `json:"data,omitempty"`
		Details    *ResponseDetails          `json:"details,omitempty"`
		Error      *APIError                 `json:"error,omitempty"`
		Pagination *Pagination               `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTWorkersFinalizeMealPlansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTWorkersFinalizeMealPlansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTWorkersMealPlanGroceryListInitResponse struct {
	HTTPResponse *http.Response
	Body         []byte
}

// Status returns HTTPResponse.Status
func (r POSTWorkersMealPlanGroceryListInitResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTWorkersMealPlanGroceryListInitResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTWorkersMealPlanTasksResponse struct {
	HTTPResponse *http.Response
	Body         []byte
}

// Status returns HTTPResponse.Status
func (r POSTWorkersMealPlanTasksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTWorkersMealPlanTasksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETAuthStatusResponse struct {
	HTTPResponse *http.Response
	JSON200      *struct {
		Data       *UserStatusResponse `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML200 *struct {
		Data       *UserStatusResponse `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r GETAuthStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETAuthStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GETOauth2AuthorizeResponse struct {
	HTTPResponse *http.Response
	Body         []byte
}

// Status returns HTTPResponse.Status
func (r GETOauth2AuthorizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GETOauth2AuthorizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTOauth2TokenResponse struct {
	HTTPResponse *http.Response
	Body         []byte
}

// Status returns HTTPResponse.Status
func (r POSTOauth2TokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTOauth2TokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTUsersResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *UserCreationResponse `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *UserCreationResponse `json:"data,omitempty"`
		Details    *ResponseDetails      `json:"details,omitempty"`
		Error      *APIError             `json:"error,omitempty"`
		Pagination *Pagination           `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTUsersEmailAddressVerifyResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTUsersEmailAddressVerifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTUsersEmailAddressVerifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTUsersLoginResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *UserStatusResponse `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *UserStatusResponse `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTUsersLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTUsersLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTUsersLoginAdminResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *UserStatusResponse `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *UserStatusResponse `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTUsersLoginAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTUsersLoginAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTUsersLogoutResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *UserStatusResponse `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *UserStatusResponse `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTUsersLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTUsersLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTUsersPasswordResetResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *PasswordResetToken `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *PasswordResetToken `json:"data,omitempty"`
		Details    *ResponseDetails    `json:"details,omitempty"`
		Error      *APIError           `json:"error,omitempty"`
		Pagination *Pagination         `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTUsersPasswordResetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTUsersPasswordResetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTUsersPasswordResetRedeemResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTUsersPasswordResetRedeemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTUsersPasswordResetRedeemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTUsersTotpSecretVerifyResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTUsersTotpSecretVerifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTUsersTotpSecretVerifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type POSTUsersUsernameReminderResponse struct {
	HTTPResponse *http.Response
	JSON201      *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	XML201 *struct {
		Data       *User            `json:"data,omitempty"`
		Details    *ResponseDetails `json:"details,omitempty"`
		Error      *APIError        `json:"error,omitempty"`
		Pagination *Pagination      `json:"pagination,omitempty"`
	}
	JSON400 *APIResponseWithError
	XML400  *APIResponseWithError
	JSON401 *APIResponseWithError
	XML401  *APIResponseWithError
	JSON500 *APIResponseWithError
	XML500  *APIResponseWithError
	Body    []byte
}

// Status returns HTTPResponse.Status
func (r POSTUsersUsernameReminderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r POSTUsersUsernameReminderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// POSTAdminCycleCookieSecretWithResponse request returning *POSTAdminCycleCookieSecretResponse
func (c *ClientWithResponses) POSTAdminCycleCookieSecretWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*POSTAdminCycleCookieSecretResponse, error) {
	rsp, err := c.POSTAdminCycleCookieSecret(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTAdminCycleCookieSecretResponse(rsp)
}

// POSTAdminUsersStatusWithBodyWithResponse request with arbitrary body returning *POSTAdminUsersStatusResponse
func (c *ClientWithResponses) POSTAdminUsersStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTAdminUsersStatusResponse, error) {
	rsp, err := c.POSTAdminUsersStatusWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTAdminUsersStatusResponse(rsp)
}

func (c *ClientWithResponses) POSTAdminUsersStatusWithResponse(ctx context.Context, body POSTAdminUsersStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTAdminUsersStatusResponse, error) {
	rsp, err := c.POSTAdminUsersStatus(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTAdminUsersStatusResponse(rsp)
}

// GETAuditLogEntriesForHouseholdWithResponse request returning *GETAuditLogEntriesForHouseholdResponse
func (c *ClientWithResponses) GETAuditLogEntriesForHouseholdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETAuditLogEntriesForHouseholdResponse, error) {
	rsp, err := c.GETAuditLogEntriesForHousehold(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETAuditLogEntriesForHouseholdResponse(rsp)
}

// GETAuditLogEntriesForUserWithResponse request returning *GETAuditLogEntriesForUserResponse
func (c *ClientWithResponses) GETAuditLogEntriesForUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETAuditLogEntriesForUserResponse, error) {
	rsp, err := c.GETAuditLogEntriesForUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETAuditLogEntriesForUserResponse(rsp)
}

// GETAuditLogEntriesAuditLogEntryIDWithResponse request returning *GETAuditLogEntriesAuditLogEntryIDResponse
func (c *ClientWithResponses) GETAuditLogEntriesAuditLogEntryIDWithResponse(ctx context.Context, auditLogEntryID string, reqEditors ...RequestEditorFn) (*GETAuditLogEntriesAuditLogEntryIDResponse, error) {
	rsp, err := c.GETAuditLogEntriesAuditLogEntryID(ctx, auditLogEntryID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETAuditLogEntriesAuditLogEntryIDResponse(rsp)
}

// GETHouseholdInvitationsReceivedWithResponse request returning *GETHouseholdInvitationsReceivedResponse
func (c *ClientWithResponses) GETHouseholdInvitationsReceivedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETHouseholdInvitationsReceivedResponse, error) {
	rsp, err := c.GETHouseholdInvitationsReceived(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETHouseholdInvitationsReceivedResponse(rsp)
}

// GETHouseholdInvitationsSentWithResponse request returning *GETHouseholdInvitationsSentResponse
func (c *ClientWithResponses) GETHouseholdInvitationsSentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETHouseholdInvitationsSentResponse, error) {
	rsp, err := c.GETHouseholdInvitationsSent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETHouseholdInvitationsSentResponse(rsp)
}

// GETHouseholdInvitationsHouseholdInvitationIDWithResponse request returning *GETHouseholdInvitationsHouseholdInvitationIDResponse
func (c *ClientWithResponses) GETHouseholdInvitationsHouseholdInvitationIDWithResponse(ctx context.Context, householdInvitationID string, reqEditors ...RequestEditorFn) (*GETHouseholdInvitationsHouseholdInvitationIDResponse, error) {
	rsp, err := c.GETHouseholdInvitationsHouseholdInvitationID(ctx, householdInvitationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETHouseholdInvitationsHouseholdInvitationIDResponse(rsp)
}

// PUTHouseholdInvitationsHouseholdInvitationIDAcceptWithBodyWithResponse request with arbitrary body returning *PUTHouseholdInvitationsHouseholdInvitationIDAcceptResponse
func (c *ClientWithResponses) PUTHouseholdInvitationsHouseholdInvitationIDAcceptWithBodyWithResponse(ctx context.Context, householdInvitationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTHouseholdInvitationsHouseholdInvitationIDAcceptResponse, error) {
	rsp, err := c.PUTHouseholdInvitationsHouseholdInvitationIDAcceptWithBody(ctx, householdInvitationID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTHouseholdInvitationsHouseholdInvitationIDAcceptResponse(rsp)
}

func (c *ClientWithResponses) PUTHouseholdInvitationsHouseholdInvitationIDAcceptWithResponse(ctx context.Context, householdInvitationID string, body PUTHouseholdInvitationsHouseholdInvitationIDAcceptJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTHouseholdInvitationsHouseholdInvitationIDAcceptResponse, error) {
	rsp, err := c.PUTHouseholdInvitationsHouseholdInvitationIDAccept(ctx, householdInvitationID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTHouseholdInvitationsHouseholdInvitationIDAcceptResponse(rsp)
}

// PUTHouseholdInvitationsHouseholdInvitationIDCancelWithBodyWithResponse request with arbitrary body returning *PUTHouseholdInvitationsHouseholdInvitationIDCancelResponse
func (c *ClientWithResponses) PUTHouseholdInvitationsHouseholdInvitationIDCancelWithBodyWithResponse(ctx context.Context, householdInvitationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTHouseholdInvitationsHouseholdInvitationIDCancelResponse, error) {
	rsp, err := c.PUTHouseholdInvitationsHouseholdInvitationIDCancelWithBody(ctx, householdInvitationID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTHouseholdInvitationsHouseholdInvitationIDCancelResponse(rsp)
}

func (c *ClientWithResponses) PUTHouseholdInvitationsHouseholdInvitationIDCancelWithResponse(ctx context.Context, householdInvitationID string, body PUTHouseholdInvitationsHouseholdInvitationIDCancelJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTHouseholdInvitationsHouseholdInvitationIDCancelResponse, error) {
	rsp, err := c.PUTHouseholdInvitationsHouseholdInvitationIDCancel(ctx, householdInvitationID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTHouseholdInvitationsHouseholdInvitationIDCancelResponse(rsp)
}

// PUTHouseholdInvitationsHouseholdInvitationIDRejectWithBodyWithResponse request with arbitrary body returning *PUTHouseholdInvitationsHouseholdInvitationIDRejectResponse
func (c *ClientWithResponses) PUTHouseholdInvitationsHouseholdInvitationIDRejectWithBodyWithResponse(ctx context.Context, householdInvitationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTHouseholdInvitationsHouseholdInvitationIDRejectResponse, error) {
	rsp, err := c.PUTHouseholdInvitationsHouseholdInvitationIDRejectWithBody(ctx, householdInvitationID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTHouseholdInvitationsHouseholdInvitationIDRejectResponse(rsp)
}

func (c *ClientWithResponses) PUTHouseholdInvitationsHouseholdInvitationIDRejectWithResponse(ctx context.Context, householdInvitationID string, body PUTHouseholdInvitationsHouseholdInvitationIDRejectJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTHouseholdInvitationsHouseholdInvitationIDRejectResponse, error) {
	rsp, err := c.PUTHouseholdInvitationsHouseholdInvitationIDReject(ctx, householdInvitationID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTHouseholdInvitationsHouseholdInvitationIDRejectResponse(rsp)
}

// GETHouseholdsWithResponse request returning *GETHouseholdsResponse
func (c *ClientWithResponses) GETHouseholdsWithResponse(ctx context.Context, params *GETHouseholdsParams, reqEditors ...RequestEditorFn) (*GETHouseholdsResponse, error) {
	rsp, err := c.GETHouseholds(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETHouseholdsResponse(rsp)
}

// POSTHouseholdsWithBodyWithResponse request with arbitrary body returning *POSTHouseholdsResponse
func (c *ClientWithResponses) POSTHouseholdsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTHouseholdsResponse, error) {
	rsp, err := c.POSTHouseholdsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTHouseholdsResponse(rsp)
}

func (c *ClientWithResponses) POSTHouseholdsWithResponse(ctx context.Context, body POSTHouseholdsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTHouseholdsResponse, error) {
	rsp, err := c.POSTHouseholds(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTHouseholdsResponse(rsp)
}

// GETHouseholdsCurrentWithResponse request returning *GETHouseholdsCurrentResponse
func (c *ClientWithResponses) GETHouseholdsCurrentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETHouseholdsCurrentResponse, error) {
	rsp, err := c.GETHouseholdsCurrent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETHouseholdsCurrentResponse(rsp)
}

// GETHouseholdsInstrumentsWithResponse request returning *GETHouseholdsInstrumentsResponse
func (c *ClientWithResponses) GETHouseholdsInstrumentsWithResponse(ctx context.Context, params *GETHouseholdsInstrumentsParams, reqEditors ...RequestEditorFn) (*GETHouseholdsInstrumentsResponse, error) {
	rsp, err := c.GETHouseholdsInstruments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETHouseholdsInstrumentsResponse(rsp)
}

// POSTHouseholdsInstrumentsWithBodyWithResponse request with arbitrary body returning *POSTHouseholdsInstrumentsResponse
func (c *ClientWithResponses) POSTHouseholdsInstrumentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTHouseholdsInstrumentsResponse, error) {
	rsp, err := c.POSTHouseholdsInstrumentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTHouseholdsInstrumentsResponse(rsp)
}

func (c *ClientWithResponses) POSTHouseholdsInstrumentsWithResponse(ctx context.Context, body POSTHouseholdsInstrumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTHouseholdsInstrumentsResponse, error) {
	rsp, err := c.POSTHouseholdsInstruments(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTHouseholdsInstrumentsResponse(rsp)
}

// DELETEHouseholdsInstrumentsHouseholdInstrumentOwnershipIDWithResponse request returning *DELETEHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse
func (c *ClientWithResponses) DELETEHouseholdsInstrumentsHouseholdInstrumentOwnershipIDWithResponse(ctx context.Context, householdInstrumentOwnershipID string, reqEditors ...RequestEditorFn) (*DELETEHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse, error) {
	rsp, err := c.DELETEHouseholdsInstrumentsHouseholdInstrumentOwnershipID(ctx, householdInstrumentOwnershipID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse(rsp)
}

// GETHouseholdsInstrumentsHouseholdInstrumentOwnershipIDWithResponse request returning *GETHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse
func (c *ClientWithResponses) GETHouseholdsInstrumentsHouseholdInstrumentOwnershipIDWithResponse(ctx context.Context, householdInstrumentOwnershipID string, reqEditors ...RequestEditorFn) (*GETHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse, error) {
	rsp, err := c.GETHouseholdsInstrumentsHouseholdInstrumentOwnershipID(ctx, householdInstrumentOwnershipID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse(rsp)
}

// PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDWithBodyWithResponse request with arbitrary body returning *PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse
func (c *ClientWithResponses) PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDWithBodyWithResponse(ctx context.Context, householdInstrumentOwnershipID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse, error) {
	rsp, err := c.PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDWithBody(ctx, householdInstrumentOwnershipID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse(rsp)
}

func (c *ClientWithResponses) PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDWithResponse(ctx context.Context, householdInstrumentOwnershipID string, body PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse, error) {
	rsp, err := c.PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipID(ctx, householdInstrumentOwnershipID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse(rsp)
}

// DELETEHouseholdsHouseholdIDWithResponse request returning *DELETEHouseholdsHouseholdIDResponse
func (c *ClientWithResponses) DELETEHouseholdsHouseholdIDWithResponse(ctx context.Context, householdID string, reqEditors ...RequestEditorFn) (*DELETEHouseholdsHouseholdIDResponse, error) {
	rsp, err := c.DELETEHouseholdsHouseholdID(ctx, householdID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEHouseholdsHouseholdIDResponse(rsp)
}

// GETHouseholdsHouseholdIDWithResponse request returning *GETHouseholdsHouseholdIDResponse
func (c *ClientWithResponses) GETHouseholdsHouseholdIDWithResponse(ctx context.Context, householdID string, reqEditors ...RequestEditorFn) (*GETHouseholdsHouseholdIDResponse, error) {
	rsp, err := c.GETHouseholdsHouseholdID(ctx, householdID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETHouseholdsHouseholdIDResponse(rsp)
}

// PUTHouseholdsHouseholdIDWithBodyWithResponse request with arbitrary body returning *PUTHouseholdsHouseholdIDResponse
func (c *ClientWithResponses) PUTHouseholdsHouseholdIDWithBodyWithResponse(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTHouseholdsHouseholdIDResponse, error) {
	rsp, err := c.PUTHouseholdsHouseholdIDWithBody(ctx, householdID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTHouseholdsHouseholdIDResponse(rsp)
}

func (c *ClientWithResponses) PUTHouseholdsHouseholdIDWithResponse(ctx context.Context, householdID string, body PUTHouseholdsHouseholdIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTHouseholdsHouseholdIDResponse, error) {
	rsp, err := c.PUTHouseholdsHouseholdID(ctx, householdID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTHouseholdsHouseholdIDResponse(rsp)
}

// POSTHouseholdsHouseholdIDDefaultWithResponse request returning *POSTHouseholdsHouseholdIDDefaultResponse
func (c *ClientWithResponses) POSTHouseholdsHouseholdIDDefaultWithResponse(ctx context.Context, householdID string, reqEditors ...RequestEditorFn) (*POSTHouseholdsHouseholdIDDefaultResponse, error) {
	rsp, err := c.POSTHouseholdsHouseholdIDDefault(ctx, householdID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTHouseholdsHouseholdIDDefaultResponse(rsp)
}

// POSTHouseholdsHouseholdIDInvitationsWithBodyWithResponse request with arbitrary body returning *POSTHouseholdsHouseholdIDInvitationsResponse
func (c *ClientWithResponses) POSTHouseholdsHouseholdIDInvitationsWithBodyWithResponse(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTHouseholdsHouseholdIDInvitationsResponse, error) {
	rsp, err := c.POSTHouseholdsHouseholdIDInvitationsWithBody(ctx, householdID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTHouseholdsHouseholdIDInvitationsResponse(rsp)
}

func (c *ClientWithResponses) POSTHouseholdsHouseholdIDInvitationsWithResponse(ctx context.Context, householdID string, body POSTHouseholdsHouseholdIDInvitationsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTHouseholdsHouseholdIDInvitationsResponse, error) {
	rsp, err := c.POSTHouseholdsHouseholdIDInvitations(ctx, householdID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTHouseholdsHouseholdIDInvitationsResponse(rsp)
}

// GETHouseholdsHouseholdIDInvitationsHouseholdInvitationIDWithResponse request returning *GETHouseholdsHouseholdIDInvitationsHouseholdInvitationIDResponse
func (c *ClientWithResponses) GETHouseholdsHouseholdIDInvitationsHouseholdInvitationIDWithResponse(ctx context.Context, householdID string, householdInvitationID string, reqEditors ...RequestEditorFn) (*GETHouseholdsHouseholdIDInvitationsHouseholdInvitationIDResponse, error) {
	rsp, err := c.GETHouseholdsHouseholdIDInvitationsHouseholdInvitationID(ctx, householdID, householdInvitationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETHouseholdsHouseholdIDInvitationsHouseholdInvitationIDResponse(rsp)
}

// POSTHouseholdsHouseholdIDInviteWithBodyWithResponse request with arbitrary body returning *POSTHouseholdsHouseholdIDInviteResponse
func (c *ClientWithResponses) POSTHouseholdsHouseholdIDInviteWithBodyWithResponse(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTHouseholdsHouseholdIDInviteResponse, error) {
	rsp, err := c.POSTHouseholdsHouseholdIDInviteWithBody(ctx, householdID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTHouseholdsHouseholdIDInviteResponse(rsp)
}

func (c *ClientWithResponses) POSTHouseholdsHouseholdIDInviteWithResponse(ctx context.Context, householdID string, body POSTHouseholdsHouseholdIDInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTHouseholdsHouseholdIDInviteResponse, error) {
	rsp, err := c.POSTHouseholdsHouseholdIDInvite(ctx, householdID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTHouseholdsHouseholdIDInviteResponse(rsp)
}

// DELETEHouseholdsHouseholdIDMembersUserIDWithResponse request returning *DELETEHouseholdsHouseholdIDMembersUserIDResponse
func (c *ClientWithResponses) DELETEHouseholdsHouseholdIDMembersUserIDWithResponse(ctx context.Context, householdID string, userID string, reqEditors ...RequestEditorFn) (*DELETEHouseholdsHouseholdIDMembersUserIDResponse, error) {
	rsp, err := c.DELETEHouseholdsHouseholdIDMembersUserID(ctx, householdID, userID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEHouseholdsHouseholdIDMembersUserIDResponse(rsp)
}

// PATCHHouseholdsHouseholdIDMembersUserIDPermissionsWithBodyWithResponse request with arbitrary body returning *PATCHHouseholdsHouseholdIDMembersUserIDPermissionsResponse
func (c *ClientWithResponses) PATCHHouseholdsHouseholdIDMembersUserIDPermissionsWithBodyWithResponse(ctx context.Context, householdID string, userID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PATCHHouseholdsHouseholdIDMembersUserIDPermissionsResponse, error) {
	rsp, err := c.PATCHHouseholdsHouseholdIDMembersUserIDPermissionsWithBody(ctx, householdID, userID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePATCHHouseholdsHouseholdIDMembersUserIDPermissionsResponse(rsp)
}

func (c *ClientWithResponses) PATCHHouseholdsHouseholdIDMembersUserIDPermissionsWithResponse(ctx context.Context, householdID string, userID string, body PATCHHouseholdsHouseholdIDMembersUserIDPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PATCHHouseholdsHouseholdIDMembersUserIDPermissionsResponse, error) {
	rsp, err := c.PATCHHouseholdsHouseholdIDMembersUserIDPermissions(ctx, householdID, userID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePATCHHouseholdsHouseholdIDMembersUserIDPermissionsResponse(rsp)
}

// POSTHouseholdsHouseholdIDTransferWithBodyWithResponse request with arbitrary body returning *POSTHouseholdsHouseholdIDTransferResponse
func (c *ClientWithResponses) POSTHouseholdsHouseholdIDTransferWithBodyWithResponse(ctx context.Context, householdID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTHouseholdsHouseholdIDTransferResponse, error) {
	rsp, err := c.POSTHouseholdsHouseholdIDTransferWithBody(ctx, householdID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTHouseholdsHouseholdIDTransferResponse(rsp)
}

func (c *ClientWithResponses) POSTHouseholdsHouseholdIDTransferWithResponse(ctx context.Context, householdID string, body POSTHouseholdsHouseholdIDTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTHouseholdsHouseholdIDTransferResponse, error) {
	rsp, err := c.POSTHouseholdsHouseholdIDTransfer(ctx, householdID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTHouseholdsHouseholdIDTransferResponse(rsp)
}

// GETMealPlansWithResponse request returning *GETMealPlansResponse
func (c *ClientWithResponses) GETMealPlansWithResponse(ctx context.Context, params *GETMealPlansParams, reqEditors ...RequestEditorFn) (*GETMealPlansResponse, error) {
	rsp, err := c.GETMealPlans(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETMealPlansResponse(rsp)
}

// POSTMealPlansWithBodyWithResponse request with arbitrary body returning *POSTMealPlansResponse
func (c *ClientWithResponses) POSTMealPlansWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTMealPlansResponse, error) {
	rsp, err := c.POSTMealPlansWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTMealPlansResponse(rsp)
}

func (c *ClientWithResponses) POSTMealPlansWithResponse(ctx context.Context, body POSTMealPlansJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTMealPlansResponse, error) {
	rsp, err := c.POSTMealPlans(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTMealPlansResponse(rsp)
}

// DELETEMealPlansMealPlanIDWithResponse request returning *DELETEMealPlansMealPlanIDResponse
func (c *ClientWithResponses) DELETEMealPlansMealPlanIDWithResponse(ctx context.Context, mealPlanID string, reqEditors ...RequestEditorFn) (*DELETEMealPlansMealPlanIDResponse, error) {
	rsp, err := c.DELETEMealPlansMealPlanID(ctx, mealPlanID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEMealPlansMealPlanIDResponse(rsp)
}

// GETMealPlansMealPlanIDWithResponse request returning *GETMealPlansMealPlanIDResponse
func (c *ClientWithResponses) GETMealPlansMealPlanIDWithResponse(ctx context.Context, mealPlanID string, reqEditors ...RequestEditorFn) (*GETMealPlansMealPlanIDResponse, error) {
	rsp, err := c.GETMealPlansMealPlanID(ctx, mealPlanID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETMealPlansMealPlanIDResponse(rsp)
}

// PUTMealPlansMealPlanIDWithBodyWithResponse request with arbitrary body returning *PUTMealPlansMealPlanIDResponse
func (c *ClientWithResponses) PUTMealPlansMealPlanIDWithBodyWithResponse(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTMealPlansMealPlanIDResponse, error) {
	rsp, err := c.PUTMealPlansMealPlanIDWithBody(ctx, mealPlanID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTMealPlansMealPlanIDResponse(rsp)
}

func (c *ClientWithResponses) PUTMealPlansMealPlanIDWithResponse(ctx context.Context, mealPlanID string, body PUTMealPlansMealPlanIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTMealPlansMealPlanIDResponse, error) {
	rsp, err := c.PUTMealPlansMealPlanID(ctx, mealPlanID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTMealPlansMealPlanIDResponse(rsp)
}

// GETMealPlansMealPlanIDEventsWithResponse request returning *GETMealPlansMealPlanIDEventsResponse
func (c *ClientWithResponses) GETMealPlansMealPlanIDEventsWithResponse(ctx context.Context, mealPlanID string, params *GETMealPlansMealPlanIDEventsParams, reqEditors ...RequestEditorFn) (*GETMealPlansMealPlanIDEventsResponse, error) {
	rsp, err := c.GETMealPlansMealPlanIDEvents(ctx, mealPlanID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETMealPlansMealPlanIDEventsResponse(rsp)
}

// POSTMealPlansMealPlanIDEventsWithBodyWithResponse request with arbitrary body returning *POSTMealPlansMealPlanIDEventsResponse
func (c *ClientWithResponses) POSTMealPlansMealPlanIDEventsWithBodyWithResponse(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTMealPlansMealPlanIDEventsResponse, error) {
	rsp, err := c.POSTMealPlansMealPlanIDEventsWithBody(ctx, mealPlanID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTMealPlansMealPlanIDEventsResponse(rsp)
}

func (c *ClientWithResponses) POSTMealPlansMealPlanIDEventsWithResponse(ctx context.Context, mealPlanID string, body POSTMealPlansMealPlanIDEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTMealPlansMealPlanIDEventsResponse, error) {
	rsp, err := c.POSTMealPlansMealPlanIDEvents(ctx, mealPlanID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTMealPlansMealPlanIDEventsResponse(rsp)
}

// DELETEMealPlansMealPlanIDEventsMealPlanEventIDWithResponse request returning *DELETEMealPlansMealPlanIDEventsMealPlanEventIDResponse
func (c *ClientWithResponses) DELETEMealPlansMealPlanIDEventsMealPlanEventIDWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, reqEditors ...RequestEditorFn) (*DELETEMealPlansMealPlanIDEventsMealPlanEventIDResponse, error) {
	rsp, err := c.DELETEMealPlansMealPlanIDEventsMealPlanEventID(ctx, mealPlanID, mealPlanEventID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEMealPlansMealPlanIDEventsMealPlanEventIDResponse(rsp)
}

// GETMealPlansMealPlanIDEventsMealPlanEventIDWithResponse request returning *GETMealPlansMealPlanIDEventsMealPlanEventIDResponse
func (c *ClientWithResponses) GETMealPlansMealPlanIDEventsMealPlanEventIDWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, reqEditors ...RequestEditorFn) (*GETMealPlansMealPlanIDEventsMealPlanEventIDResponse, error) {
	rsp, err := c.GETMealPlansMealPlanIDEventsMealPlanEventID(ctx, mealPlanID, mealPlanEventID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETMealPlansMealPlanIDEventsMealPlanEventIDResponse(rsp)
}

// PUTMealPlansMealPlanIDEventsMealPlanEventIDWithBodyWithResponse request with arbitrary body returning *PUTMealPlansMealPlanIDEventsMealPlanEventIDResponse
func (c *ClientWithResponses) PUTMealPlansMealPlanIDEventsMealPlanEventIDWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTMealPlansMealPlanIDEventsMealPlanEventIDResponse, error) {
	rsp, err := c.PUTMealPlansMealPlanIDEventsMealPlanEventIDWithBody(ctx, mealPlanID, mealPlanEventID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTMealPlansMealPlanIDEventsMealPlanEventIDResponse(rsp)
}

func (c *ClientWithResponses) PUTMealPlansMealPlanIDEventsMealPlanEventIDWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, body PUTMealPlansMealPlanIDEventsMealPlanEventIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTMealPlansMealPlanIDEventsMealPlanEventIDResponse, error) {
	rsp, err := c.PUTMealPlansMealPlanIDEventsMealPlanEventID(ctx, mealPlanID, mealPlanEventID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTMealPlansMealPlanIDEventsMealPlanEventIDResponse(rsp)
}

// GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsWithResponse request returning *GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsResponse
func (c *ClientWithResponses) GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, params *GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsParams, reqEditors ...RequestEditorFn) (*GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsResponse, error) {
	rsp, err := c.GETMealPlansMealPlanIDEventsMealPlanEventIDOptions(ctx, mealPlanID, mealPlanEventID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETMealPlansMealPlanIDEventsMealPlanEventIDOptionsResponse(rsp)
}

// POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsWithBodyWithResponse request with arbitrary body returning *POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsResponse
func (c *ClientWithResponses) POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsResponse, error) {
	rsp, err := c.POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsWithBody(ctx, mealPlanID, mealPlanEventID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsResponse(rsp)
}

func (c *ClientWithResponses) POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, body POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsResponse, error) {
	rsp, err := c.POSTMealPlansMealPlanIDEventsMealPlanEventIDOptions(ctx, mealPlanID, mealPlanEventID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsResponse(rsp)
}

// DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDWithResponse request returning *DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse
func (c *ClientWithResponses) DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, reqEditors ...RequestEditorFn) (*DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse, error) {
	rsp, err := c.DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionID(ctx, mealPlanID, mealPlanEventID, mealPlanOptionID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse(rsp)
}

// GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDWithResponse request returning *GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse
func (c *ClientWithResponses) GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, reqEditors ...RequestEditorFn) (*GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse, error) {
	rsp, err := c.GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionID(ctx, mealPlanID, mealPlanEventID, mealPlanOptionID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse(rsp)
}

// PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDWithBodyWithResponse request with arbitrary body returning *PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse
func (c *ClientWithResponses) PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse, error) {
	rsp, err := c.PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDWithBody(ctx, mealPlanID, mealPlanEventID, mealPlanOptionID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse(rsp)
}

func (c *ClientWithResponses) PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, body PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse, error) {
	rsp, err := c.PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionID(ctx, mealPlanID, mealPlanEventID, mealPlanOptionID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse(rsp)
}

// GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesWithResponse request returning *GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesResponse
func (c *ClientWithResponses) GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, params *GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesParams, reqEditors ...RequestEditorFn) (*GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesResponse, error) {
	rsp, err := c.GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotes(ctx, mealPlanID, mealPlanEventID, mealPlanOptionID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesResponse(rsp)
}

// DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDWithResponse request returning *DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse
func (c *ClientWithResponses) DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, reqEditors ...RequestEditorFn) (*DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse, error) {
	rsp, err := c.DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteID(ctx, mealPlanID, mealPlanEventID, mealPlanOptionID, mealPlanOptionVoteID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse(rsp)
}

// GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDWithResponse request returning *GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse
func (c *ClientWithResponses) GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, reqEditors ...RequestEditorFn) (*GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse, error) {
	rsp, err := c.GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteID(ctx, mealPlanID, mealPlanEventID, mealPlanOptionID, mealPlanOptionVoteID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse(rsp)
}

// PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDWithBodyWithResponse request with arbitrary body returning *PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse
func (c *ClientWithResponses) PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse, error) {
	rsp, err := c.PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDWithBody(ctx, mealPlanID, mealPlanEventID, mealPlanOptionID, mealPlanOptionVoteID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse(rsp)
}

func (c *ClientWithResponses) PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, mealPlanOptionID string, mealPlanOptionVoteID string, body PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse, error) {
	rsp, err := c.PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteID(ctx, mealPlanID, mealPlanEventID, mealPlanOptionID, mealPlanOptionVoteID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse(rsp)
}

// POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteWithBodyWithResponse request with arbitrary body returning *POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteResponse
func (c *ClientWithResponses) POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteResponse, error) {
	rsp, err := c.POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteWithBody(ctx, mealPlanID, mealPlanEventID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTMealPlansMealPlanIDEventsMealPlanEventIDVoteResponse(rsp)
}

func (c *ClientWithResponses) POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteWithResponse(ctx context.Context, mealPlanID string, mealPlanEventID string, body POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteResponse, error) {
	rsp, err := c.POSTMealPlansMealPlanIDEventsMealPlanEventIDVote(ctx, mealPlanID, mealPlanEventID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTMealPlansMealPlanIDEventsMealPlanEventIDVoteResponse(rsp)
}

// POSTMealPlansMealPlanIDFinalizeWithResponse request returning *POSTMealPlansMealPlanIDFinalizeResponse
func (c *ClientWithResponses) POSTMealPlansMealPlanIDFinalizeWithResponse(ctx context.Context, mealPlanID string, reqEditors ...RequestEditorFn) (*POSTMealPlansMealPlanIDFinalizeResponse, error) {
	rsp, err := c.POSTMealPlansMealPlanIDFinalize(ctx, mealPlanID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTMealPlansMealPlanIDFinalizeResponse(rsp)
}

// GETMealPlansMealPlanIDGroceryListItemsWithResponse request returning *GETMealPlansMealPlanIDGroceryListItemsResponse
func (c *ClientWithResponses) GETMealPlansMealPlanIDGroceryListItemsWithResponse(ctx context.Context, mealPlanID string, params *GETMealPlansMealPlanIDGroceryListItemsParams, reqEditors ...RequestEditorFn) (*GETMealPlansMealPlanIDGroceryListItemsResponse, error) {
	rsp, err := c.GETMealPlansMealPlanIDGroceryListItems(ctx, mealPlanID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETMealPlansMealPlanIDGroceryListItemsResponse(rsp)
}

// POSTMealPlansMealPlanIDGroceryListItemsWithBodyWithResponse request with arbitrary body returning *POSTMealPlansMealPlanIDGroceryListItemsResponse
func (c *ClientWithResponses) POSTMealPlansMealPlanIDGroceryListItemsWithBodyWithResponse(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTMealPlansMealPlanIDGroceryListItemsResponse, error) {
	rsp, err := c.POSTMealPlansMealPlanIDGroceryListItemsWithBody(ctx, mealPlanID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTMealPlansMealPlanIDGroceryListItemsResponse(rsp)
}

func (c *ClientWithResponses) POSTMealPlansMealPlanIDGroceryListItemsWithResponse(ctx context.Context, mealPlanID string, body POSTMealPlansMealPlanIDGroceryListItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTMealPlansMealPlanIDGroceryListItemsResponse, error) {
	rsp, err := c.POSTMealPlansMealPlanIDGroceryListItems(ctx, mealPlanID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTMealPlansMealPlanIDGroceryListItemsResponse(rsp)
}

// DELETEMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDWithResponse request returning *DELETEMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse
func (c *ClientWithResponses) DELETEMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDWithResponse(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, reqEditors ...RequestEditorFn) (*DELETEMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse, error) {
	rsp, err := c.DELETEMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemID(ctx, mealPlanID, mealPlanGroceryListItemID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse(rsp)
}

// GETMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDWithResponse request returning *GETMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse
func (c *ClientWithResponses) GETMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDWithResponse(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, reqEditors ...RequestEditorFn) (*GETMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse, error) {
	rsp, err := c.GETMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemID(ctx, mealPlanID, mealPlanGroceryListItemID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse(rsp)
}

// PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDWithBodyWithResponse request with arbitrary body returning *PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse
func (c *ClientWithResponses) PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse, error) {
	rsp, err := c.PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDWithBody(ctx, mealPlanID, mealPlanGroceryListItemID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse(rsp)
}

func (c *ClientWithResponses) PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDWithResponse(ctx context.Context, mealPlanID string, mealPlanGroceryListItemID string, body PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse, error) {
	rsp, err := c.PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemID(ctx, mealPlanID, mealPlanGroceryListItemID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse(rsp)
}

// GETMealPlansMealPlanIDTasksWithResponse request returning *GETMealPlansMealPlanIDTasksResponse
func (c *ClientWithResponses) GETMealPlansMealPlanIDTasksWithResponse(ctx context.Context, mealPlanID string, params *GETMealPlansMealPlanIDTasksParams, reqEditors ...RequestEditorFn) (*GETMealPlansMealPlanIDTasksResponse, error) {
	rsp, err := c.GETMealPlansMealPlanIDTasks(ctx, mealPlanID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETMealPlansMealPlanIDTasksResponse(rsp)
}

// POSTMealPlansMealPlanIDTasksWithBodyWithResponse request with arbitrary body returning *POSTMealPlansMealPlanIDTasksResponse
func (c *ClientWithResponses) POSTMealPlansMealPlanIDTasksWithBodyWithResponse(ctx context.Context, mealPlanID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTMealPlansMealPlanIDTasksResponse, error) {
	rsp, err := c.POSTMealPlansMealPlanIDTasksWithBody(ctx, mealPlanID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTMealPlansMealPlanIDTasksResponse(rsp)
}

func (c *ClientWithResponses) POSTMealPlansMealPlanIDTasksWithResponse(ctx context.Context, mealPlanID string, body POSTMealPlansMealPlanIDTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTMealPlansMealPlanIDTasksResponse, error) {
	rsp, err := c.POSTMealPlansMealPlanIDTasks(ctx, mealPlanID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTMealPlansMealPlanIDTasksResponse(rsp)
}

// GETMealPlansMealPlanIDTasksMealPlanTaskIDWithResponse request returning *GETMealPlansMealPlanIDTasksMealPlanTaskIDResponse
func (c *ClientWithResponses) GETMealPlansMealPlanIDTasksMealPlanTaskIDWithResponse(ctx context.Context, mealPlanID string, mealPlanTaskID string, reqEditors ...RequestEditorFn) (*GETMealPlansMealPlanIDTasksMealPlanTaskIDResponse, error) {
	rsp, err := c.GETMealPlansMealPlanIDTasksMealPlanTaskID(ctx, mealPlanID, mealPlanTaskID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETMealPlansMealPlanIDTasksMealPlanTaskIDResponse(rsp)
}

// PATCHMealPlansMealPlanIDTasksMealPlanTaskIDWithBodyWithResponse request with arbitrary body returning *PATCHMealPlansMealPlanIDTasksMealPlanTaskIDResponse
func (c *ClientWithResponses) PATCHMealPlansMealPlanIDTasksMealPlanTaskIDWithBodyWithResponse(ctx context.Context, mealPlanID string, mealPlanTaskID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PATCHMealPlansMealPlanIDTasksMealPlanTaskIDResponse, error) {
	rsp, err := c.PATCHMealPlansMealPlanIDTasksMealPlanTaskIDWithBody(ctx, mealPlanID, mealPlanTaskID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePATCHMealPlansMealPlanIDTasksMealPlanTaskIDResponse(rsp)
}

func (c *ClientWithResponses) PATCHMealPlansMealPlanIDTasksMealPlanTaskIDWithResponse(ctx context.Context, mealPlanID string, mealPlanTaskID string, body PATCHMealPlansMealPlanIDTasksMealPlanTaskIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PATCHMealPlansMealPlanIDTasksMealPlanTaskIDResponse, error) {
	rsp, err := c.PATCHMealPlansMealPlanIDTasksMealPlanTaskID(ctx, mealPlanID, mealPlanTaskID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePATCHMealPlansMealPlanIDTasksMealPlanTaskIDResponse(rsp)
}

// GETMealsWithResponse request returning *GETMealsResponse
func (c *ClientWithResponses) GETMealsWithResponse(ctx context.Context, params *GETMealsParams, reqEditors ...RequestEditorFn) (*GETMealsResponse, error) {
	rsp, err := c.GETMeals(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETMealsResponse(rsp)
}

// POSTMealsWithBodyWithResponse request with arbitrary body returning *POSTMealsResponse
func (c *ClientWithResponses) POSTMealsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTMealsResponse, error) {
	rsp, err := c.POSTMealsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTMealsResponse(rsp)
}

func (c *ClientWithResponses) POSTMealsWithResponse(ctx context.Context, body POSTMealsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTMealsResponse, error) {
	rsp, err := c.POSTMeals(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTMealsResponse(rsp)
}

// GETMealsSearchWithResponse request returning *GETMealsSearchResponse
func (c *ClientWithResponses) GETMealsSearchWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETMealsSearchResponse, error) {
	rsp, err := c.GETMealsSearch(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETMealsSearchResponse(rsp)
}

// DELETEMealsMealIDWithResponse request returning *DELETEMealsMealIDResponse
func (c *ClientWithResponses) DELETEMealsMealIDWithResponse(ctx context.Context, mealID string, reqEditors ...RequestEditorFn) (*DELETEMealsMealIDResponse, error) {
	rsp, err := c.DELETEMealsMealID(ctx, mealID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEMealsMealIDResponse(rsp)
}

// GETMealsMealIDWithResponse request returning *GETMealsMealIDResponse
func (c *ClientWithResponses) GETMealsMealIDWithResponse(ctx context.Context, mealID string, reqEditors ...RequestEditorFn) (*GETMealsMealIDResponse, error) {
	rsp, err := c.GETMealsMealID(ctx, mealID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETMealsMealIDResponse(rsp)
}

// GETOauth2ClientsWithResponse request returning *GETOauth2ClientsResponse
func (c *ClientWithResponses) GETOauth2ClientsWithResponse(ctx context.Context, params *GETOauth2ClientsParams, reqEditors ...RequestEditorFn) (*GETOauth2ClientsResponse, error) {
	rsp, err := c.GETOauth2Clients(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETOauth2ClientsResponse(rsp)
}

// POSTOauth2ClientsWithBodyWithResponse request with arbitrary body returning *POSTOauth2ClientsResponse
func (c *ClientWithResponses) POSTOauth2ClientsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTOauth2ClientsResponse, error) {
	rsp, err := c.POSTOauth2ClientsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTOauth2ClientsResponse(rsp)
}

func (c *ClientWithResponses) POSTOauth2ClientsWithResponse(ctx context.Context, body POSTOauth2ClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTOauth2ClientsResponse, error) {
	rsp, err := c.POSTOauth2Clients(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTOauth2ClientsResponse(rsp)
}

// DELETEOauth2ClientsOauth2ClientIDWithResponse request returning *DELETEOauth2ClientsOauth2ClientIDResponse
func (c *ClientWithResponses) DELETEOauth2ClientsOauth2ClientIDWithResponse(ctx context.Context, oauth2ClientID string, reqEditors ...RequestEditorFn) (*DELETEOauth2ClientsOauth2ClientIDResponse, error) {
	rsp, err := c.DELETEOauth2ClientsOauth2ClientID(ctx, oauth2ClientID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEOauth2ClientsOauth2ClientIDResponse(rsp)
}

// GETOauth2ClientsOauth2ClientIDWithResponse request returning *GETOauth2ClientsOauth2ClientIDResponse
func (c *ClientWithResponses) GETOauth2ClientsOauth2ClientIDWithResponse(ctx context.Context, oauth2ClientID string, reqEditors ...RequestEditorFn) (*GETOauth2ClientsOauth2ClientIDResponse, error) {
	rsp, err := c.GETOauth2ClientsOauth2ClientID(ctx, oauth2ClientID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETOauth2ClientsOauth2ClientIDResponse(rsp)
}

// GETRecipesWithResponse request returning *GETRecipesResponse
func (c *ClientWithResponses) GETRecipesWithResponse(ctx context.Context, params *GETRecipesParams, reqEditors ...RequestEditorFn) (*GETRecipesResponse, error) {
	rsp, err := c.GETRecipes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETRecipesResponse(rsp)
}

// POSTRecipesWithBodyWithResponse request with arbitrary body returning *POSTRecipesResponse
func (c *ClientWithResponses) POSTRecipesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTRecipesResponse, error) {
	rsp, err := c.POSTRecipesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTRecipesResponse(rsp)
}

func (c *ClientWithResponses) POSTRecipesWithResponse(ctx context.Context, body POSTRecipesJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTRecipesResponse, error) {
	rsp, err := c.POSTRecipes(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTRecipesResponse(rsp)
}

// GETRecipesSearchWithResponse request returning *GETRecipesSearchResponse
func (c *ClientWithResponses) GETRecipesSearchWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETRecipesSearchResponse, error) {
	rsp, err := c.GETRecipesSearch(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETRecipesSearchResponse(rsp)
}

// DELETERecipesRecipeIDWithResponse request returning *DELETERecipesRecipeIDResponse
func (c *ClientWithResponses) DELETERecipesRecipeIDWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*DELETERecipesRecipeIDResponse, error) {
	rsp, err := c.DELETERecipesRecipeID(ctx, recipeID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETERecipesRecipeIDResponse(rsp)
}

// GETRecipesRecipeIDWithResponse request returning *GETRecipesRecipeIDResponse
func (c *ClientWithResponses) GETRecipesRecipeIDWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDResponse, error) {
	rsp, err := c.GETRecipesRecipeID(ctx, recipeID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETRecipesRecipeIDResponse(rsp)
}

// PUTRecipesRecipeIDWithBodyWithResponse request with arbitrary body returning *PUTRecipesRecipeIDResponse
func (c *ClientWithResponses) PUTRecipesRecipeIDWithBodyWithResponse(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDResponse, error) {
	rsp, err := c.PUTRecipesRecipeIDWithBody(ctx, recipeID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTRecipesRecipeIDResponse(rsp)
}

func (c *ClientWithResponses) PUTRecipesRecipeIDWithResponse(ctx context.Context, recipeID string, body PUTRecipesRecipeIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDResponse, error) {
	rsp, err := c.PUTRecipesRecipeID(ctx, recipeID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTRecipesRecipeIDResponse(rsp)
}

// POSTRecipesRecipeIDCloneWithResponse request returning *POSTRecipesRecipeIDCloneResponse
func (c *ClientWithResponses) POSTRecipesRecipeIDCloneWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDCloneResponse, error) {
	rsp, err := c.POSTRecipesRecipeIDClone(ctx, recipeID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTRecipesRecipeIDCloneResponse(rsp)
}

// GETRecipesRecipeIDDagWithResponse request returning *GETRecipesRecipeIDDagResponse
func (c *ClientWithResponses) GETRecipesRecipeIDDagWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDDagResponse, error) {
	rsp, err := c.GETRecipesRecipeIDDag(ctx, recipeID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETRecipesRecipeIDDagResponse(rsp)
}

// POSTRecipesRecipeIDImagesWithResponse request returning *POSTRecipesRecipeIDImagesResponse
func (c *ClientWithResponses) POSTRecipesRecipeIDImagesWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDImagesResponse, error) {
	rsp, err := c.POSTRecipesRecipeIDImages(ctx, recipeID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTRecipesRecipeIDImagesResponse(rsp)
}

// GETRecipesRecipeIDMermaidWithResponse request returning *GETRecipesRecipeIDMermaidResponse
func (c *ClientWithResponses) GETRecipesRecipeIDMermaidWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDMermaidResponse, error) {
	rsp, err := c.GETRecipesRecipeIDMermaid(ctx, recipeID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETRecipesRecipeIDMermaidResponse(rsp)
}

// GETRecipesRecipeIDPrepStepsWithResponse request returning *GETRecipesRecipeIDPrepStepsResponse
func (c *ClientWithResponses) GETRecipesRecipeIDPrepStepsWithResponse(ctx context.Context, recipeID string, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDPrepStepsResponse, error) {
	rsp, err := c.GETRecipesRecipeIDPrepSteps(ctx, recipeID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETRecipesRecipeIDPrepStepsResponse(rsp)
}

// GETRecipesRecipeIDPrepTasksWithResponse request returning *GETRecipesRecipeIDPrepTasksResponse
func (c *ClientWithResponses) GETRecipesRecipeIDPrepTasksWithResponse(ctx context.Context, recipeID string, params *GETRecipesRecipeIDPrepTasksParams, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDPrepTasksResponse, error) {
	rsp, err := c.GETRecipesRecipeIDPrepTasks(ctx, recipeID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETRecipesRecipeIDPrepTasksResponse(rsp)
}

// POSTRecipesRecipeIDPrepTasksWithBodyWithResponse request with arbitrary body returning *POSTRecipesRecipeIDPrepTasksResponse
func (c *ClientWithResponses) POSTRecipesRecipeIDPrepTasksWithBodyWithResponse(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDPrepTasksResponse, error) {
	rsp, err := c.POSTRecipesRecipeIDPrepTasksWithBody(ctx, recipeID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTRecipesRecipeIDPrepTasksResponse(rsp)
}

func (c *ClientWithResponses) POSTRecipesRecipeIDPrepTasksWithResponse(ctx context.Context, recipeID string, body POSTRecipesRecipeIDPrepTasksJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDPrepTasksResponse, error) {
	rsp, err := c.POSTRecipesRecipeIDPrepTasks(ctx, recipeID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTRecipesRecipeIDPrepTasksResponse(rsp)
}

// DELETERecipesRecipeIDPrepTasksRecipePrepTaskIDWithResponse request returning *DELETERecipesRecipeIDPrepTasksRecipePrepTaskIDResponse
func (c *ClientWithResponses) DELETERecipesRecipeIDPrepTasksRecipePrepTaskIDWithResponse(ctx context.Context, recipeID string, recipePrepTaskID string, reqEditors ...RequestEditorFn) (*DELETERecipesRecipeIDPrepTasksRecipePrepTaskIDResponse, error) {
	rsp, err := c.DELETERecipesRecipeIDPrepTasksRecipePrepTaskID(ctx, recipeID, recipePrepTaskID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETERecipesRecipeIDPrepTasksRecipePrepTaskIDResponse(rsp)
}

// GETRecipesRecipeIDPrepTasksRecipePrepTaskIDWithResponse request returning *GETRecipesRecipeIDPrepTasksRecipePrepTaskIDResponse
func (c *ClientWithResponses) GETRecipesRecipeIDPrepTasksRecipePrepTaskIDWithResponse(ctx context.Context, recipeID string, recipePrepTaskID string, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDPrepTasksRecipePrepTaskIDResponse, error) {
	rsp, err := c.GETRecipesRecipeIDPrepTasksRecipePrepTaskID(ctx, recipeID, recipePrepTaskID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETRecipesRecipeIDPrepTasksRecipePrepTaskIDResponse(rsp)
}

// PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDWithBodyWithResponse request with arbitrary body returning *PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDResponse
func (c *ClientWithResponses) PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDWithBodyWithResponse(ctx context.Context, recipeID string, recipePrepTaskID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDResponse, error) {
	rsp, err := c.PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDWithBody(ctx, recipeID, recipePrepTaskID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTRecipesRecipeIDPrepTasksRecipePrepTaskIDResponse(rsp)
}

func (c *ClientWithResponses) PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDWithResponse(ctx context.Context, recipeID string, recipePrepTaskID string, body PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDResponse, error) {
	rsp, err := c.PUTRecipesRecipeIDPrepTasksRecipePrepTaskID(ctx, recipeID, recipePrepTaskID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTRecipesRecipeIDPrepTasksRecipePrepTaskIDResponse(rsp)
}

// GETRecipesRecipeIDRatingsWithResponse request returning *GETRecipesRecipeIDRatingsResponse
func (c *ClientWithResponses) GETRecipesRecipeIDRatingsWithResponse(ctx context.Context, recipeID string, params *GETRecipesRecipeIDRatingsParams, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDRatingsResponse, error) {
	rsp, err := c.GETRecipesRecipeIDRatings(ctx, recipeID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETRecipesRecipeIDRatingsResponse(rsp)
}

// POSTRecipesRecipeIDRatingsWithBodyWithResponse request with arbitrary body returning *POSTRecipesRecipeIDRatingsResponse
func (c *ClientWithResponses) POSTRecipesRecipeIDRatingsWithBodyWithResponse(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDRatingsResponse, error) {
	rsp, err := c.POSTRecipesRecipeIDRatingsWithBody(ctx, recipeID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTRecipesRecipeIDRatingsResponse(rsp)
}

func (c *ClientWithResponses) POSTRecipesRecipeIDRatingsWithResponse(ctx context.Context, recipeID string, body POSTRecipesRecipeIDRatingsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDRatingsResponse, error) {
	rsp, err := c.POSTRecipesRecipeIDRatings(ctx, recipeID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTRecipesRecipeIDRatingsResponse(rsp)
}

// DELETERecipesRecipeIDRatingsRecipeRatingIDWithResponse request returning *DELETERecipesRecipeIDRatingsRecipeRatingIDResponse
func (c *ClientWithResponses) DELETERecipesRecipeIDRatingsRecipeRatingIDWithResponse(ctx context.Context, recipeID string, recipeRatingID string, reqEditors ...RequestEditorFn) (*DELETERecipesRecipeIDRatingsRecipeRatingIDResponse, error) {
	rsp, err := c.DELETERecipesRecipeIDRatingsRecipeRatingID(ctx, recipeID, recipeRatingID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETERecipesRecipeIDRatingsRecipeRatingIDResponse(rsp)
}

// GETRecipesRecipeIDRatingsRecipeRatingIDWithResponse request returning *GETRecipesRecipeIDRatingsRecipeRatingIDResponse
func (c *ClientWithResponses) GETRecipesRecipeIDRatingsRecipeRatingIDWithResponse(ctx context.Context, recipeID string, recipeRatingID string, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDRatingsRecipeRatingIDResponse, error) {
	rsp, err := c.GETRecipesRecipeIDRatingsRecipeRatingID(ctx, recipeID, recipeRatingID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETRecipesRecipeIDRatingsRecipeRatingIDResponse(rsp)
}

// PUTRecipesRecipeIDRatingsRecipeRatingIDWithBodyWithResponse request with arbitrary body returning *PUTRecipesRecipeIDRatingsRecipeRatingIDResponse
func (c *ClientWithResponses) PUTRecipesRecipeIDRatingsRecipeRatingIDWithBodyWithResponse(ctx context.Context, recipeID string, recipeRatingID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDRatingsRecipeRatingIDResponse, error) {
	rsp, err := c.PUTRecipesRecipeIDRatingsRecipeRatingIDWithBody(ctx, recipeID, recipeRatingID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTRecipesRecipeIDRatingsRecipeRatingIDResponse(rsp)
}

func (c *ClientWithResponses) PUTRecipesRecipeIDRatingsRecipeRatingIDWithResponse(ctx context.Context, recipeID string, recipeRatingID string, body PUTRecipesRecipeIDRatingsRecipeRatingIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDRatingsRecipeRatingIDResponse, error) {
	rsp, err := c.PUTRecipesRecipeIDRatingsRecipeRatingID(ctx, recipeID, recipeRatingID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTRecipesRecipeIDRatingsRecipeRatingIDResponse(rsp)
}

// GETRecipesRecipeIDStepsWithResponse request returning *GETRecipesRecipeIDStepsResponse
func (c *ClientWithResponses) GETRecipesRecipeIDStepsWithResponse(ctx context.Context, recipeID string, params *GETRecipesRecipeIDStepsParams, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDStepsResponse, error) {
	rsp, err := c.GETRecipesRecipeIDSteps(ctx, recipeID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETRecipesRecipeIDStepsResponse(rsp)
}

// POSTRecipesRecipeIDStepsWithBodyWithResponse request with arbitrary body returning *POSTRecipesRecipeIDStepsResponse
func (c *ClientWithResponses) POSTRecipesRecipeIDStepsWithBodyWithResponse(ctx context.Context, recipeID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsResponse, error) {
	rsp, err := c.POSTRecipesRecipeIDStepsWithBody(ctx, recipeID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTRecipesRecipeIDStepsResponse(rsp)
}

func (c *ClientWithResponses) POSTRecipesRecipeIDStepsWithResponse(ctx context.Context, recipeID string, body POSTRecipesRecipeIDStepsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsResponse, error) {
	rsp, err := c.POSTRecipesRecipeIDSteps(ctx, recipeID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTRecipesRecipeIDStepsResponse(rsp)
}

// DELETERecipesRecipeIDStepsRecipeStepIDWithResponse request returning *DELETERecipesRecipeIDStepsRecipeStepIDResponse
func (c *ClientWithResponses) DELETERecipesRecipeIDStepsRecipeStepIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, reqEditors ...RequestEditorFn) (*DELETERecipesRecipeIDStepsRecipeStepIDResponse, error) {
	rsp, err := c.DELETERecipesRecipeIDStepsRecipeStepID(ctx, recipeID, recipeStepID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETERecipesRecipeIDStepsRecipeStepIDResponse(rsp)
}

// GETRecipesRecipeIDStepsRecipeStepIDWithResponse request returning *GETRecipesRecipeIDStepsRecipeStepIDResponse
func (c *ClientWithResponses) GETRecipesRecipeIDStepsRecipeStepIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDStepsRecipeStepIDResponse, error) {
	rsp, err := c.GETRecipesRecipeIDStepsRecipeStepID(ctx, recipeID, recipeStepID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETRecipesRecipeIDStepsRecipeStepIDResponse(rsp)
}

// PUTRecipesRecipeIDStepsRecipeStepIDWithBodyWithResponse request with arbitrary body returning *PUTRecipesRecipeIDStepsRecipeStepIDResponse
func (c *ClientWithResponses) PUTRecipesRecipeIDStepsRecipeStepIDWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDStepsRecipeStepIDResponse, error) {
	rsp, err := c.PUTRecipesRecipeIDStepsRecipeStepIDWithBody(ctx, recipeID, recipeStepID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTRecipesRecipeIDStepsRecipeStepIDResponse(rsp)
}

func (c *ClientWithResponses) PUTRecipesRecipeIDStepsRecipeStepIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, body PUTRecipesRecipeIDStepsRecipeStepIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDStepsRecipeStepIDResponse, error) {
	rsp, err := c.PUTRecipesRecipeIDStepsRecipeStepID(ctx, recipeID, recipeStepID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTRecipesRecipeIDStepsRecipeStepIDResponse(rsp)
}

// GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsWithResponse request returning *GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsResponse
func (c *ClientWithResponses) GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsWithResponse(ctx context.Context, recipeID string, recipeStepID string, params *GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsParams, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsResponse, error) {
	rsp, err := c.GETRecipesRecipeIDStepsRecipeStepIDCompletionConditions(ctx, recipeID, recipeStepID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsResponse(rsp)
}

// POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsWithBodyWithResponse request with arbitrary body returning *POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsResponse
func (c *ClientWithResponses) POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsResponse, error) {
	rsp, err := c.POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsWithBody(ctx, recipeID, recipeStepID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsResponse(rsp)
}

func (c *ClientWithResponses) POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsWithResponse(ctx context.Context, recipeID string, recipeStepID string, body POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsResponse, error) {
	rsp, err := c.POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditions(ctx, recipeID, recipeStepID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsResponse(rsp)
}

// DELETERecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDWithResponse request returning *DELETERecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse
func (c *ClientWithResponses) DELETERecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, reqEditors ...RequestEditorFn) (*DELETERecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse, error) {
	rsp, err := c.DELETERecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionID(ctx, recipeID, recipeStepID, recipeStepCompletionConditionID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETERecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse(rsp)
}

// GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDWithResponse request returning *GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse
func (c *ClientWithResponses) GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse, error) {
	rsp, err := c.GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionID(ctx, recipeID, recipeStepID, recipeStepCompletionConditionID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse(rsp)
}

// PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDWithBodyWithResponse request with arbitrary body returning *PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse
func (c *ClientWithResponses) PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse, error) {
	rsp, err := c.PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDWithBody(ctx, recipeID, recipeStepID, recipeStepCompletionConditionID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse(rsp)
}

func (c *ClientWithResponses) PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepCompletionConditionID string, body PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse, error) {
	rsp, err := c.PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionID(ctx, recipeID, recipeStepID, recipeStepCompletionConditionID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse(rsp)
}

// POSTRecipesRecipeIDStepsRecipeStepIDImagesWithResponse request returning *POSTRecipesRecipeIDStepsRecipeStepIDImagesResponse
func (c *ClientWithResponses) POSTRecipesRecipeIDStepsRecipeStepIDImagesWithResponse(ctx context.Context, recipeID string, recipeStepID string, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsRecipeStepIDImagesResponse, error) {
	rsp, err := c.POSTRecipesRecipeIDStepsRecipeStepIDImages(ctx, recipeID, recipeStepID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTRecipesRecipeIDStepsRecipeStepIDImagesResponse(rsp)
}

// GETRecipesRecipeIDStepsRecipeStepIDIngredientsWithResponse request returning *GETRecipesRecipeIDStepsRecipeStepIDIngredientsResponse
func (c *ClientWithResponses) GETRecipesRecipeIDStepsRecipeStepIDIngredientsWithResponse(ctx context.Context, recipeID string, recipeStepID string, params *GETRecipesRecipeIDStepsRecipeStepIDIngredientsParams, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDStepsRecipeStepIDIngredientsResponse, error) {
	rsp, err := c.GETRecipesRecipeIDStepsRecipeStepIDIngredients(ctx, recipeID, recipeStepID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETRecipesRecipeIDStepsRecipeStepIDIngredientsResponse(rsp)
}

// POSTRecipesRecipeIDStepsRecipeStepIDIngredientsWithBodyWithResponse request with arbitrary body returning *POSTRecipesRecipeIDStepsRecipeStepIDIngredientsResponse
func (c *ClientWithResponses) POSTRecipesRecipeIDStepsRecipeStepIDIngredientsWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsRecipeStepIDIngredientsResponse, error) {
	rsp, err := c.POSTRecipesRecipeIDStepsRecipeStepIDIngredientsWithBody(ctx, recipeID, recipeStepID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTRecipesRecipeIDStepsRecipeStepIDIngredientsResponse(rsp)
}

func (c *ClientWithResponses) POSTRecipesRecipeIDStepsRecipeStepIDIngredientsWithResponse(ctx context.Context, recipeID string, recipeStepID string, body POSTRecipesRecipeIDStepsRecipeStepIDIngredientsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsRecipeStepIDIngredientsResponse, error) {
	rsp, err := c.POSTRecipesRecipeIDStepsRecipeStepIDIngredients(ctx, recipeID, recipeStepID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTRecipesRecipeIDStepsRecipeStepIDIngredientsResponse(rsp)
}

// DELETERecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDWithResponse request returning *DELETERecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse
func (c *ClientWithResponses) DELETERecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, reqEditors ...RequestEditorFn) (*DELETERecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse, error) {
	rsp, err := c.DELETERecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientID(ctx, recipeID, recipeStepID, recipeStepIngredientID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETERecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse(rsp)
}

// GETRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDWithResponse request returning *GETRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse
func (c *ClientWithResponses) GETRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse, error) {
	rsp, err := c.GETRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientID(ctx, recipeID, recipeStepID, recipeStepIngredientID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse(rsp)
}

// PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDWithBodyWithResponse request with arbitrary body returning *PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse
func (c *ClientWithResponses) PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse, error) {
	rsp, err := c.PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDWithBody(ctx, recipeID, recipeStepID, recipeStepIngredientID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse(rsp)
}

func (c *ClientWithResponses) PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepIngredientID string, body PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse, error) {
	rsp, err := c.PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientID(ctx, recipeID, recipeStepID, recipeStepIngredientID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse(rsp)
}

// GETRecipesRecipeIDStepsRecipeStepIDInstrumentsWithResponse request returning *GETRecipesRecipeIDStepsRecipeStepIDInstrumentsResponse
func (c *ClientWithResponses) GETRecipesRecipeIDStepsRecipeStepIDInstrumentsWithResponse(ctx context.Context, recipeID string, recipeStepID string, params *GETRecipesRecipeIDStepsRecipeStepIDInstrumentsParams, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDStepsRecipeStepIDInstrumentsResponse, error) {
	rsp, err := c.GETRecipesRecipeIDStepsRecipeStepIDInstruments(ctx, recipeID, recipeStepID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETRecipesRecipeIDStepsRecipeStepIDInstrumentsResponse(rsp)
}

// POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsWithBodyWithResponse request with arbitrary body returning *POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsResponse
func (c *ClientWithResponses) POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsResponse, error) {
	rsp, err := c.POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsWithBody(ctx, recipeID, recipeStepID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTRecipesRecipeIDStepsRecipeStepIDInstrumentsResponse(rsp)
}

func (c *ClientWithResponses) POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsWithResponse(ctx context.Context, recipeID string, recipeStepID string, body POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsResponse, error) {
	rsp, err := c.POSTRecipesRecipeIDStepsRecipeStepIDInstruments(ctx, recipeID, recipeStepID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTRecipesRecipeIDStepsRecipeStepIDInstrumentsResponse(rsp)
}

// DELETERecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDWithResponse request returning *DELETERecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse
func (c *ClientWithResponses) DELETERecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, reqEditors ...RequestEditorFn) (*DELETERecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse, error) {
	rsp, err := c.DELETERecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentID(ctx, recipeID, recipeStepID, recipeStepInstrumentID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETERecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse(rsp)
}

// GETRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDWithResponse request returning *GETRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse
func (c *ClientWithResponses) GETRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse, error) {
	rsp, err := c.GETRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentID(ctx, recipeID, recipeStepID, recipeStepInstrumentID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse(rsp)
}

// PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDWithBodyWithResponse request with arbitrary body returning *PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse
func (c *ClientWithResponses) PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse, error) {
	rsp, err := c.PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDWithBody(ctx, recipeID, recipeStepID, recipeStepInstrumentID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse(rsp)
}

func (c *ClientWithResponses) PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepInstrumentID string, body PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse, error) {
	rsp, err := c.PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentID(ctx, recipeID, recipeStepID, recipeStepInstrumentID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse(rsp)
}

// GETRecipesRecipeIDStepsRecipeStepIDProductsWithResponse request returning *GETRecipesRecipeIDStepsRecipeStepIDProductsResponse
func (c *ClientWithResponses) GETRecipesRecipeIDStepsRecipeStepIDProductsWithResponse(ctx context.Context, recipeID string, recipeStepID string, params *GETRecipesRecipeIDStepsRecipeStepIDProductsParams, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDStepsRecipeStepIDProductsResponse, error) {
	rsp, err := c.GETRecipesRecipeIDStepsRecipeStepIDProducts(ctx, recipeID, recipeStepID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETRecipesRecipeIDStepsRecipeStepIDProductsResponse(rsp)
}

// POSTRecipesRecipeIDStepsRecipeStepIDProductsWithBodyWithResponse request with arbitrary body returning *POSTRecipesRecipeIDStepsRecipeStepIDProductsResponse
func (c *ClientWithResponses) POSTRecipesRecipeIDStepsRecipeStepIDProductsWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsRecipeStepIDProductsResponse, error) {
	rsp, err := c.POSTRecipesRecipeIDStepsRecipeStepIDProductsWithBody(ctx, recipeID, recipeStepID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTRecipesRecipeIDStepsRecipeStepIDProductsResponse(rsp)
}

func (c *ClientWithResponses) POSTRecipesRecipeIDStepsRecipeStepIDProductsWithResponse(ctx context.Context, recipeID string, recipeStepID string, body POSTRecipesRecipeIDStepsRecipeStepIDProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsRecipeStepIDProductsResponse, error) {
	rsp, err := c.POSTRecipesRecipeIDStepsRecipeStepIDProducts(ctx, recipeID, recipeStepID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTRecipesRecipeIDStepsRecipeStepIDProductsResponse(rsp)
}

// DELETERecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDWithResponse request returning *DELETERecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse
func (c *ClientWithResponses) DELETERecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, reqEditors ...RequestEditorFn) (*DELETERecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse, error) {
	rsp, err := c.DELETERecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductID(ctx, recipeID, recipeStepID, recipeStepProductID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETERecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse(rsp)
}

// GETRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDWithResponse request returning *GETRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse
func (c *ClientWithResponses) GETRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse, error) {
	rsp, err := c.GETRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductID(ctx, recipeID, recipeStepID, recipeStepProductID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse(rsp)
}

// PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDWithBodyWithResponse request with arbitrary body returning *PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse
func (c *ClientWithResponses) PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse, error) {
	rsp, err := c.PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDWithBody(ctx, recipeID, recipeStepID, recipeStepProductID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse(rsp)
}

func (c *ClientWithResponses) PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepProductID string, body PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse, error) {
	rsp, err := c.PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductID(ctx, recipeID, recipeStepID, recipeStepProductID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse(rsp)
}

// GETRecipesRecipeIDStepsRecipeStepIDVesselsWithResponse request returning *GETRecipesRecipeIDStepsRecipeStepIDVesselsResponse
func (c *ClientWithResponses) GETRecipesRecipeIDStepsRecipeStepIDVesselsWithResponse(ctx context.Context, recipeID string, recipeStepID string, params *GETRecipesRecipeIDStepsRecipeStepIDVesselsParams, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDStepsRecipeStepIDVesselsResponse, error) {
	rsp, err := c.GETRecipesRecipeIDStepsRecipeStepIDVessels(ctx, recipeID, recipeStepID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETRecipesRecipeIDStepsRecipeStepIDVesselsResponse(rsp)
}

// POSTRecipesRecipeIDStepsRecipeStepIDVesselsWithBodyWithResponse request with arbitrary body returning *POSTRecipesRecipeIDStepsRecipeStepIDVesselsResponse
func (c *ClientWithResponses) POSTRecipesRecipeIDStepsRecipeStepIDVesselsWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsRecipeStepIDVesselsResponse, error) {
	rsp, err := c.POSTRecipesRecipeIDStepsRecipeStepIDVesselsWithBody(ctx, recipeID, recipeStepID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTRecipesRecipeIDStepsRecipeStepIDVesselsResponse(rsp)
}

func (c *ClientWithResponses) POSTRecipesRecipeIDStepsRecipeStepIDVesselsWithResponse(ctx context.Context, recipeID string, recipeStepID string, body POSTRecipesRecipeIDStepsRecipeStepIDVesselsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTRecipesRecipeIDStepsRecipeStepIDVesselsResponse, error) {
	rsp, err := c.POSTRecipesRecipeIDStepsRecipeStepIDVessels(ctx, recipeID, recipeStepID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTRecipesRecipeIDStepsRecipeStepIDVesselsResponse(rsp)
}

// DELETERecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDWithResponse request returning *DELETERecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse
func (c *ClientWithResponses) DELETERecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, reqEditors ...RequestEditorFn) (*DELETERecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse, error) {
	rsp, err := c.DELETERecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselID(ctx, recipeID, recipeStepID, recipeStepVesselID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETERecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse(rsp)
}

// GETRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDWithResponse request returning *GETRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse
func (c *ClientWithResponses) GETRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, reqEditors ...RequestEditorFn) (*GETRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse, error) {
	rsp, err := c.GETRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselID(ctx, recipeID, recipeStepID, recipeStepVesselID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse(rsp)
}

// PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDWithBodyWithResponse request with arbitrary body returning *PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse
func (c *ClientWithResponses) PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDWithBodyWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse, error) {
	rsp, err := c.PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDWithBody(ctx, recipeID, recipeStepID, recipeStepVesselID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse(rsp)
}

func (c *ClientWithResponses) PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDWithResponse(ctx context.Context, recipeID string, recipeStepID string, recipeStepVesselID string, body PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse, error) {
	rsp, err := c.PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselID(ctx, recipeID, recipeStepID, recipeStepVesselID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse(rsp)
}

// GETSettingsWithResponse request returning *GETSettingsResponse
func (c *ClientWithResponses) GETSettingsWithResponse(ctx context.Context, params *GETSettingsParams, reqEditors ...RequestEditorFn) (*GETSettingsResponse, error) {
	rsp, err := c.GETSettings(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETSettingsResponse(rsp)
}

// POSTSettingsWithBodyWithResponse request with arbitrary body returning *POSTSettingsResponse
func (c *ClientWithResponses) POSTSettingsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTSettingsResponse, error) {
	rsp, err := c.POSTSettingsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTSettingsResponse(rsp)
}

func (c *ClientWithResponses) POSTSettingsWithResponse(ctx context.Context, body POSTSettingsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTSettingsResponse, error) {
	rsp, err := c.POSTSettings(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTSettingsResponse(rsp)
}

// POSTSettingsConfigurationsWithBodyWithResponse request with arbitrary body returning *POSTSettingsConfigurationsResponse
func (c *ClientWithResponses) POSTSettingsConfigurationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTSettingsConfigurationsResponse, error) {
	rsp, err := c.POSTSettingsConfigurationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTSettingsConfigurationsResponse(rsp)
}

func (c *ClientWithResponses) POSTSettingsConfigurationsWithResponse(ctx context.Context, body POSTSettingsConfigurationsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTSettingsConfigurationsResponse, error) {
	rsp, err := c.POSTSettingsConfigurations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTSettingsConfigurationsResponse(rsp)
}

// GETSettingsConfigurationsHouseholdWithResponse request returning *GETSettingsConfigurationsHouseholdResponse
func (c *ClientWithResponses) GETSettingsConfigurationsHouseholdWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETSettingsConfigurationsHouseholdResponse, error) {
	rsp, err := c.GETSettingsConfigurationsHousehold(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETSettingsConfigurationsHouseholdResponse(rsp)
}

// GETSettingsConfigurationsUserWithResponse request returning *GETSettingsConfigurationsUserResponse
func (c *ClientWithResponses) GETSettingsConfigurationsUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETSettingsConfigurationsUserResponse, error) {
	rsp, err := c.GETSettingsConfigurationsUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETSettingsConfigurationsUserResponse(rsp)
}

// GETSettingsConfigurationsUserServiceSettingConfigurationNameWithResponse request returning *GETSettingsConfigurationsUserServiceSettingConfigurationNameResponse
func (c *ClientWithResponses) GETSettingsConfigurationsUserServiceSettingConfigurationNameWithResponse(ctx context.Context, serviceSettingConfigurationName string, reqEditors ...RequestEditorFn) (*GETSettingsConfigurationsUserServiceSettingConfigurationNameResponse, error) {
	rsp, err := c.GETSettingsConfigurationsUserServiceSettingConfigurationName(ctx, serviceSettingConfigurationName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETSettingsConfigurationsUserServiceSettingConfigurationNameResponse(rsp)
}

// DELETESettingsConfigurationsServiceSettingConfigurationIDWithResponse request returning *DELETESettingsConfigurationsServiceSettingConfigurationIDResponse
func (c *ClientWithResponses) DELETESettingsConfigurationsServiceSettingConfigurationIDWithResponse(ctx context.Context, serviceSettingConfigurationID string, reqEditors ...RequestEditorFn) (*DELETESettingsConfigurationsServiceSettingConfigurationIDResponse, error) {
	rsp, err := c.DELETESettingsConfigurationsServiceSettingConfigurationID(ctx, serviceSettingConfigurationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETESettingsConfigurationsServiceSettingConfigurationIDResponse(rsp)
}

// PUTSettingsConfigurationsServiceSettingConfigurationIDWithBodyWithResponse request with arbitrary body returning *PUTSettingsConfigurationsServiceSettingConfigurationIDResponse
func (c *ClientWithResponses) PUTSettingsConfigurationsServiceSettingConfigurationIDWithBodyWithResponse(ctx context.Context, serviceSettingConfigurationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTSettingsConfigurationsServiceSettingConfigurationIDResponse, error) {
	rsp, err := c.PUTSettingsConfigurationsServiceSettingConfigurationIDWithBody(ctx, serviceSettingConfigurationID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTSettingsConfigurationsServiceSettingConfigurationIDResponse(rsp)
}

func (c *ClientWithResponses) PUTSettingsConfigurationsServiceSettingConfigurationIDWithResponse(ctx context.Context, serviceSettingConfigurationID string, body PUTSettingsConfigurationsServiceSettingConfigurationIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTSettingsConfigurationsServiceSettingConfigurationIDResponse, error) {
	rsp, err := c.PUTSettingsConfigurationsServiceSettingConfigurationID(ctx, serviceSettingConfigurationID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTSettingsConfigurationsServiceSettingConfigurationIDResponse(rsp)
}

// GETSettingsSearchWithResponse request returning *GETSettingsSearchResponse
func (c *ClientWithResponses) GETSettingsSearchWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETSettingsSearchResponse, error) {
	rsp, err := c.GETSettingsSearch(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETSettingsSearchResponse(rsp)
}

// DELETESettingsServiceSettingIDWithResponse request returning *DELETESettingsServiceSettingIDResponse
func (c *ClientWithResponses) DELETESettingsServiceSettingIDWithResponse(ctx context.Context, serviceSettingID string, reqEditors ...RequestEditorFn) (*DELETESettingsServiceSettingIDResponse, error) {
	rsp, err := c.DELETESettingsServiceSettingID(ctx, serviceSettingID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETESettingsServiceSettingIDResponse(rsp)
}

// GETSettingsServiceSettingIDWithResponse request returning *GETSettingsServiceSettingIDResponse
func (c *ClientWithResponses) GETSettingsServiceSettingIDWithResponse(ctx context.Context, serviceSettingID string, reqEditors ...RequestEditorFn) (*GETSettingsServiceSettingIDResponse, error) {
	rsp, err := c.GETSettingsServiceSettingID(ctx, serviceSettingID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETSettingsServiceSettingIDResponse(rsp)
}

// GETUserIngredientPreferencesWithResponse request returning *GETUserIngredientPreferencesResponse
func (c *ClientWithResponses) GETUserIngredientPreferencesWithResponse(ctx context.Context, params *GETUserIngredientPreferencesParams, reqEditors ...RequestEditorFn) (*GETUserIngredientPreferencesResponse, error) {
	rsp, err := c.GETUserIngredientPreferences(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETUserIngredientPreferencesResponse(rsp)
}

// POSTUserIngredientPreferencesWithBodyWithResponse request with arbitrary body returning *POSTUserIngredientPreferencesResponse
func (c *ClientWithResponses) POSTUserIngredientPreferencesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUserIngredientPreferencesResponse, error) {
	rsp, err := c.POSTUserIngredientPreferencesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUserIngredientPreferencesResponse(rsp)
}

func (c *ClientWithResponses) POSTUserIngredientPreferencesWithResponse(ctx context.Context, body POSTUserIngredientPreferencesJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUserIngredientPreferencesResponse, error) {
	rsp, err := c.POSTUserIngredientPreferences(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUserIngredientPreferencesResponse(rsp)
}

// DELETEUserIngredientPreferencesUserIngredientPreferenceIDWithResponse request returning *DELETEUserIngredientPreferencesUserIngredientPreferenceIDResponse
func (c *ClientWithResponses) DELETEUserIngredientPreferencesUserIngredientPreferenceIDWithResponse(ctx context.Context, userIngredientPreferenceID string, reqEditors ...RequestEditorFn) (*DELETEUserIngredientPreferencesUserIngredientPreferenceIDResponse, error) {
	rsp, err := c.DELETEUserIngredientPreferencesUserIngredientPreferenceID(ctx, userIngredientPreferenceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEUserIngredientPreferencesUserIngredientPreferenceIDResponse(rsp)
}

// PUTUserIngredientPreferencesUserIngredientPreferenceIDWithBodyWithResponse request with arbitrary body returning *PUTUserIngredientPreferencesUserIngredientPreferenceIDResponse
func (c *ClientWithResponses) PUTUserIngredientPreferencesUserIngredientPreferenceIDWithBodyWithResponse(ctx context.Context, userIngredientPreferenceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTUserIngredientPreferencesUserIngredientPreferenceIDResponse, error) {
	rsp, err := c.PUTUserIngredientPreferencesUserIngredientPreferenceIDWithBody(ctx, userIngredientPreferenceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTUserIngredientPreferencesUserIngredientPreferenceIDResponse(rsp)
}

func (c *ClientWithResponses) PUTUserIngredientPreferencesUserIngredientPreferenceIDWithResponse(ctx context.Context, userIngredientPreferenceID string, body PUTUserIngredientPreferencesUserIngredientPreferenceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTUserIngredientPreferencesUserIngredientPreferenceIDResponse, error) {
	rsp, err := c.PUTUserIngredientPreferencesUserIngredientPreferenceID(ctx, userIngredientPreferenceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTUserIngredientPreferencesUserIngredientPreferenceIDResponse(rsp)
}

// GETUserNotificationsWithResponse request returning *GETUserNotificationsResponse
func (c *ClientWithResponses) GETUserNotificationsWithResponse(ctx context.Context, params *GETUserNotificationsParams, reqEditors ...RequestEditorFn) (*GETUserNotificationsResponse, error) {
	rsp, err := c.GETUserNotifications(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETUserNotificationsResponse(rsp)
}

// POSTUserNotificationsWithBodyWithResponse request with arbitrary body returning *POSTUserNotificationsResponse
func (c *ClientWithResponses) POSTUserNotificationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUserNotificationsResponse, error) {
	rsp, err := c.POSTUserNotificationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUserNotificationsResponse(rsp)
}

func (c *ClientWithResponses) POSTUserNotificationsWithResponse(ctx context.Context, body POSTUserNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUserNotificationsResponse, error) {
	rsp, err := c.POSTUserNotifications(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUserNotificationsResponse(rsp)
}

// GETUserNotificationsUserNotificationIDWithResponse request returning *GETUserNotificationsUserNotificationIDResponse
func (c *ClientWithResponses) GETUserNotificationsUserNotificationIDWithResponse(ctx context.Context, userNotificationID string, reqEditors ...RequestEditorFn) (*GETUserNotificationsUserNotificationIDResponse, error) {
	rsp, err := c.GETUserNotificationsUserNotificationID(ctx, userNotificationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETUserNotificationsUserNotificationIDResponse(rsp)
}

// PATCHUserNotificationsUserNotificationIDWithBodyWithResponse request with arbitrary body returning *PATCHUserNotificationsUserNotificationIDResponse
func (c *ClientWithResponses) PATCHUserNotificationsUserNotificationIDWithBodyWithResponse(ctx context.Context, userNotificationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PATCHUserNotificationsUserNotificationIDResponse, error) {
	rsp, err := c.PATCHUserNotificationsUserNotificationIDWithBody(ctx, userNotificationID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePATCHUserNotificationsUserNotificationIDResponse(rsp)
}

func (c *ClientWithResponses) PATCHUserNotificationsUserNotificationIDWithResponse(ctx context.Context, userNotificationID string, body PATCHUserNotificationsUserNotificationIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PATCHUserNotificationsUserNotificationIDResponse, error) {
	rsp, err := c.PATCHUserNotificationsUserNotificationID(ctx, userNotificationID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePATCHUserNotificationsUserNotificationIDResponse(rsp)
}

// GETUsersWithResponse request returning *GETUsersResponse
func (c *ClientWithResponses) GETUsersWithResponse(ctx context.Context, params *GETUsersParams, reqEditors ...RequestEditorFn) (*GETUsersResponse, error) {
	rsp, err := c.GETUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETUsersResponse(rsp)
}

// POSTUsersAvatarUploadWithBodyWithResponse request with arbitrary body returning *POSTUsersAvatarUploadResponse
func (c *ClientWithResponses) POSTUsersAvatarUploadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersAvatarUploadResponse, error) {
	rsp, err := c.POSTUsersAvatarUploadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersAvatarUploadResponse(rsp)
}

func (c *ClientWithResponses) POSTUsersAvatarUploadWithResponse(ctx context.Context, body POSTUsersAvatarUploadJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersAvatarUploadResponse, error) {
	rsp, err := c.POSTUsersAvatarUpload(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersAvatarUploadResponse(rsp)
}

// PUTUsersDetailsWithBodyWithResponse request with arbitrary body returning *PUTUsersDetailsResponse
func (c *ClientWithResponses) PUTUsersDetailsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTUsersDetailsResponse, error) {
	rsp, err := c.PUTUsersDetailsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTUsersDetailsResponse(rsp)
}

func (c *ClientWithResponses) PUTUsersDetailsWithResponse(ctx context.Context, body PUTUsersDetailsJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTUsersDetailsResponse, error) {
	rsp, err := c.PUTUsersDetails(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTUsersDetailsResponse(rsp)
}

// PUTUsersEmailAddressWithBodyWithResponse request with arbitrary body returning *PUTUsersEmailAddressResponse
func (c *ClientWithResponses) PUTUsersEmailAddressWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTUsersEmailAddressResponse, error) {
	rsp, err := c.PUTUsersEmailAddressWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTUsersEmailAddressResponse(rsp)
}

func (c *ClientWithResponses) PUTUsersEmailAddressWithResponse(ctx context.Context, body PUTUsersEmailAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTUsersEmailAddressResponse, error) {
	rsp, err := c.PUTUsersEmailAddress(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTUsersEmailAddressResponse(rsp)
}

// POSTUsersEmailAddressVerificationWithBodyWithResponse request with arbitrary body returning *POSTUsersEmailAddressVerificationResponse
func (c *ClientWithResponses) POSTUsersEmailAddressVerificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersEmailAddressVerificationResponse, error) {
	rsp, err := c.POSTUsersEmailAddressVerificationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersEmailAddressVerificationResponse(rsp)
}

func (c *ClientWithResponses) POSTUsersEmailAddressVerificationWithResponse(ctx context.Context, body POSTUsersEmailAddressVerificationJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersEmailAddressVerificationResponse, error) {
	rsp, err := c.POSTUsersEmailAddressVerification(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersEmailAddressVerificationResponse(rsp)
}

// POSTUsersHouseholdSelectWithBodyWithResponse request with arbitrary body returning *POSTUsersHouseholdSelectResponse
func (c *ClientWithResponses) POSTUsersHouseholdSelectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersHouseholdSelectResponse, error) {
	rsp, err := c.POSTUsersHouseholdSelectWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersHouseholdSelectResponse(rsp)
}

func (c *ClientWithResponses) POSTUsersHouseholdSelectWithResponse(ctx context.Context, body POSTUsersHouseholdSelectJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersHouseholdSelectResponse, error) {
	rsp, err := c.POSTUsersHouseholdSelect(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersHouseholdSelectResponse(rsp)
}

// PUTUsersPasswordNewWithBodyWithResponse request with arbitrary body returning *PUTUsersPasswordNewResponse
func (c *ClientWithResponses) PUTUsersPasswordNewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTUsersPasswordNewResponse, error) {
	rsp, err := c.PUTUsersPasswordNewWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTUsersPasswordNewResponse(rsp)
}

func (c *ClientWithResponses) PUTUsersPasswordNewWithResponse(ctx context.Context, body PUTUsersPasswordNewJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTUsersPasswordNewResponse, error) {
	rsp, err := c.PUTUsersPasswordNew(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTUsersPasswordNewResponse(rsp)
}

// POSTUsersPermissionsCheckWithBodyWithResponse request with arbitrary body returning *POSTUsersPermissionsCheckResponse
func (c *ClientWithResponses) POSTUsersPermissionsCheckWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersPermissionsCheckResponse, error) {
	rsp, err := c.POSTUsersPermissionsCheckWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersPermissionsCheckResponse(rsp)
}

func (c *ClientWithResponses) POSTUsersPermissionsCheckWithResponse(ctx context.Context, body POSTUsersPermissionsCheckJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersPermissionsCheckResponse, error) {
	rsp, err := c.POSTUsersPermissionsCheck(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersPermissionsCheckResponse(rsp)
}

// GETUsersSearchWithResponse request returning *GETUsersSearchResponse
func (c *ClientWithResponses) GETUsersSearchWithResponse(ctx context.Context, params *GETUsersSearchParams, reqEditors ...RequestEditorFn) (*GETUsersSearchResponse, error) {
	rsp, err := c.GETUsersSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETUsersSearchResponse(rsp)
}

// GETUsersSelfWithResponse request returning *GETUsersSelfResponse
func (c *ClientWithResponses) GETUsersSelfWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETUsersSelfResponse, error) {
	rsp, err := c.GETUsersSelf(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETUsersSelfResponse(rsp)
}

// POSTUsersTotpSecretNewWithBodyWithResponse request with arbitrary body returning *POSTUsersTotpSecretNewResponse
func (c *ClientWithResponses) POSTUsersTotpSecretNewWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersTotpSecretNewResponse, error) {
	rsp, err := c.POSTUsersTotpSecretNewWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersTotpSecretNewResponse(rsp)
}

func (c *ClientWithResponses) POSTUsersTotpSecretNewWithResponse(ctx context.Context, body POSTUsersTotpSecretNewJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersTotpSecretNewResponse, error) {
	rsp, err := c.POSTUsersTotpSecretNew(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersTotpSecretNewResponse(rsp)
}

// PUTUsersUsernameWithBodyWithResponse request with arbitrary body returning *PUTUsersUsernameResponse
func (c *ClientWithResponses) PUTUsersUsernameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTUsersUsernameResponse, error) {
	rsp, err := c.PUTUsersUsernameWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTUsersUsernameResponse(rsp)
}

func (c *ClientWithResponses) PUTUsersUsernameWithResponse(ctx context.Context, body PUTUsersUsernameJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTUsersUsernameResponse, error) {
	rsp, err := c.PUTUsersUsername(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTUsersUsernameResponse(rsp)
}

// DELETEUsersUserIDWithResponse request returning *DELETEUsersUserIDResponse
func (c *ClientWithResponses) DELETEUsersUserIDWithResponse(ctx context.Context, userID string, reqEditors ...RequestEditorFn) (*DELETEUsersUserIDResponse, error) {
	rsp, err := c.DELETEUsersUserID(ctx, userID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEUsersUserIDResponse(rsp)
}

// GETUsersUserIDWithResponse request returning *GETUsersUserIDResponse
func (c *ClientWithResponses) GETUsersUserIDWithResponse(ctx context.Context, userID string, reqEditors ...RequestEditorFn) (*GETUsersUserIDResponse, error) {
	rsp, err := c.GETUsersUserID(ctx, userID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETUsersUserIDResponse(rsp)
}

// GETValidIngredientGroupsWithResponse request returning *GETValidIngredientGroupsResponse
func (c *ClientWithResponses) GETValidIngredientGroupsWithResponse(ctx context.Context, params *GETValidIngredientGroupsParams, reqEditors ...RequestEditorFn) (*GETValidIngredientGroupsResponse, error) {
	rsp, err := c.GETValidIngredientGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidIngredientGroupsResponse(rsp)
}

// POSTValidIngredientGroupsWithBodyWithResponse request with arbitrary body returning *POSTValidIngredientGroupsResponse
func (c *ClientWithResponses) POSTValidIngredientGroupsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTValidIngredientGroupsResponse, error) {
	rsp, err := c.POSTValidIngredientGroupsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTValidIngredientGroupsResponse(rsp)
}

func (c *ClientWithResponses) POSTValidIngredientGroupsWithResponse(ctx context.Context, body POSTValidIngredientGroupsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTValidIngredientGroupsResponse, error) {
	rsp, err := c.POSTValidIngredientGroups(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTValidIngredientGroupsResponse(rsp)
}

// GETValidIngredientGroupsSearchWithResponse request returning *GETValidIngredientGroupsSearchResponse
func (c *ClientWithResponses) GETValidIngredientGroupsSearchWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETValidIngredientGroupsSearchResponse, error) {
	rsp, err := c.GETValidIngredientGroupsSearch(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidIngredientGroupsSearchResponse(rsp)
}

// DELETEValidIngredientGroupsValidIngredientGroupIDWithResponse request returning *DELETEValidIngredientGroupsValidIngredientGroupIDResponse
func (c *ClientWithResponses) DELETEValidIngredientGroupsValidIngredientGroupIDWithResponse(ctx context.Context, validIngredientGroupID string, reqEditors ...RequestEditorFn) (*DELETEValidIngredientGroupsValidIngredientGroupIDResponse, error) {
	rsp, err := c.DELETEValidIngredientGroupsValidIngredientGroupID(ctx, validIngredientGroupID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEValidIngredientGroupsValidIngredientGroupIDResponse(rsp)
}

// GETValidIngredientGroupsValidIngredientGroupIDWithResponse request returning *GETValidIngredientGroupsValidIngredientGroupIDResponse
func (c *ClientWithResponses) GETValidIngredientGroupsValidIngredientGroupIDWithResponse(ctx context.Context, validIngredientGroupID string, reqEditors ...RequestEditorFn) (*GETValidIngredientGroupsValidIngredientGroupIDResponse, error) {
	rsp, err := c.GETValidIngredientGroupsValidIngredientGroupID(ctx, validIngredientGroupID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidIngredientGroupsValidIngredientGroupIDResponse(rsp)
}

// PUTValidIngredientGroupsValidIngredientGroupIDWithBodyWithResponse request with arbitrary body returning *PUTValidIngredientGroupsValidIngredientGroupIDResponse
func (c *ClientWithResponses) PUTValidIngredientGroupsValidIngredientGroupIDWithBodyWithResponse(ctx context.Context, validIngredientGroupID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTValidIngredientGroupsValidIngredientGroupIDResponse, error) {
	rsp, err := c.PUTValidIngredientGroupsValidIngredientGroupIDWithBody(ctx, validIngredientGroupID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTValidIngredientGroupsValidIngredientGroupIDResponse(rsp)
}

func (c *ClientWithResponses) PUTValidIngredientGroupsValidIngredientGroupIDWithResponse(ctx context.Context, validIngredientGroupID string, body PUTValidIngredientGroupsValidIngredientGroupIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTValidIngredientGroupsValidIngredientGroupIDResponse, error) {
	rsp, err := c.PUTValidIngredientGroupsValidIngredientGroupID(ctx, validIngredientGroupID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTValidIngredientGroupsValidIngredientGroupIDResponse(rsp)
}

// GETValidIngredientMeasurementUnitsWithResponse request returning *GETValidIngredientMeasurementUnitsResponse
func (c *ClientWithResponses) GETValidIngredientMeasurementUnitsWithResponse(ctx context.Context, params *GETValidIngredientMeasurementUnitsParams, reqEditors ...RequestEditorFn) (*GETValidIngredientMeasurementUnitsResponse, error) {
	rsp, err := c.GETValidIngredientMeasurementUnits(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidIngredientMeasurementUnitsResponse(rsp)
}

// POSTValidIngredientMeasurementUnitsWithBodyWithResponse request with arbitrary body returning *POSTValidIngredientMeasurementUnitsResponse
func (c *ClientWithResponses) POSTValidIngredientMeasurementUnitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTValidIngredientMeasurementUnitsResponse, error) {
	rsp, err := c.POSTValidIngredientMeasurementUnitsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTValidIngredientMeasurementUnitsResponse(rsp)
}

func (c *ClientWithResponses) POSTValidIngredientMeasurementUnitsWithResponse(ctx context.Context, body POSTValidIngredientMeasurementUnitsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTValidIngredientMeasurementUnitsResponse, error) {
	rsp, err := c.POSTValidIngredientMeasurementUnits(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTValidIngredientMeasurementUnitsResponse(rsp)
}

// GETValidIngredientMeasurementUnitsByIngredientValidIngredientIDWithResponse request returning *GETValidIngredientMeasurementUnitsByIngredientValidIngredientIDResponse
func (c *ClientWithResponses) GETValidIngredientMeasurementUnitsByIngredientValidIngredientIDWithResponse(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*GETValidIngredientMeasurementUnitsByIngredientValidIngredientIDResponse, error) {
	rsp, err := c.GETValidIngredientMeasurementUnitsByIngredientValidIngredientID(ctx, validIngredientID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidIngredientMeasurementUnitsByIngredientValidIngredientIDResponse(rsp)
}

// GETValidIngredientMeasurementUnitsByMeasurementUnitValidMeasurementUnitIDWithResponse request returning *GETValidIngredientMeasurementUnitsByMeasurementUnitValidMeasurementUnitIDResponse
func (c *ClientWithResponses) GETValidIngredientMeasurementUnitsByMeasurementUnitValidMeasurementUnitIDWithResponse(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*GETValidIngredientMeasurementUnitsByMeasurementUnitValidMeasurementUnitIDResponse, error) {
	rsp, err := c.GETValidIngredientMeasurementUnitsByMeasurementUnitValidMeasurementUnitID(ctx, validMeasurementUnitID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidIngredientMeasurementUnitsByMeasurementUnitValidMeasurementUnitIDResponse(rsp)
}

// DELETEValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDWithResponse request returning *DELETEValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse
func (c *ClientWithResponses) DELETEValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDWithResponse(ctx context.Context, validIngredientMeasurementUnitID string, reqEditors ...RequestEditorFn) (*DELETEValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse, error) {
	rsp, err := c.DELETEValidIngredientMeasurementUnitsValidIngredientMeasurementUnitID(ctx, validIngredientMeasurementUnitID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse(rsp)
}

// GETValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDWithResponse request returning *GETValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse
func (c *ClientWithResponses) GETValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDWithResponse(ctx context.Context, validIngredientMeasurementUnitID string, reqEditors ...RequestEditorFn) (*GETValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse, error) {
	rsp, err := c.GETValidIngredientMeasurementUnitsValidIngredientMeasurementUnitID(ctx, validIngredientMeasurementUnitID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse(rsp)
}

// PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDWithBodyWithResponse request with arbitrary body returning *PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse
func (c *ClientWithResponses) PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDWithBodyWithResponse(ctx context.Context, validIngredientMeasurementUnitID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse, error) {
	rsp, err := c.PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDWithBody(ctx, validIngredientMeasurementUnitID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse(rsp)
}

func (c *ClientWithResponses) PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDWithResponse(ctx context.Context, validIngredientMeasurementUnitID string, body PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse, error) {
	rsp, err := c.PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitID(ctx, validIngredientMeasurementUnitID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse(rsp)
}

// GETValidIngredientPreparationsWithResponse request returning *GETValidIngredientPreparationsResponse
func (c *ClientWithResponses) GETValidIngredientPreparationsWithResponse(ctx context.Context, params *GETValidIngredientPreparationsParams, reqEditors ...RequestEditorFn) (*GETValidIngredientPreparationsResponse, error) {
	rsp, err := c.GETValidIngredientPreparations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidIngredientPreparationsResponse(rsp)
}

// POSTValidIngredientPreparationsWithBodyWithResponse request with arbitrary body returning *POSTValidIngredientPreparationsResponse
func (c *ClientWithResponses) POSTValidIngredientPreparationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTValidIngredientPreparationsResponse, error) {
	rsp, err := c.POSTValidIngredientPreparationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTValidIngredientPreparationsResponse(rsp)
}

func (c *ClientWithResponses) POSTValidIngredientPreparationsWithResponse(ctx context.Context, body POSTValidIngredientPreparationsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTValidIngredientPreparationsResponse, error) {
	rsp, err := c.POSTValidIngredientPreparations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTValidIngredientPreparationsResponse(rsp)
}

// GETValidIngredientPreparationsByIngredientValidIngredientIDWithResponse request returning *GETValidIngredientPreparationsByIngredientValidIngredientIDResponse
func (c *ClientWithResponses) GETValidIngredientPreparationsByIngredientValidIngredientIDWithResponse(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*GETValidIngredientPreparationsByIngredientValidIngredientIDResponse, error) {
	rsp, err := c.GETValidIngredientPreparationsByIngredientValidIngredientID(ctx, validIngredientID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidIngredientPreparationsByIngredientValidIngredientIDResponse(rsp)
}

// GETValidIngredientPreparationsByPreparationValidPreparationIDWithResponse request returning *GETValidIngredientPreparationsByPreparationValidPreparationIDResponse
func (c *ClientWithResponses) GETValidIngredientPreparationsByPreparationValidPreparationIDWithResponse(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*GETValidIngredientPreparationsByPreparationValidPreparationIDResponse, error) {
	rsp, err := c.GETValidIngredientPreparationsByPreparationValidPreparationID(ctx, validPreparationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidIngredientPreparationsByPreparationValidPreparationIDResponse(rsp)
}

// DELETEValidIngredientPreparationsValidIngredientPreparationIDWithResponse request returning *DELETEValidIngredientPreparationsValidIngredientPreparationIDResponse
func (c *ClientWithResponses) DELETEValidIngredientPreparationsValidIngredientPreparationIDWithResponse(ctx context.Context, validIngredientPreparationID string, reqEditors ...RequestEditorFn) (*DELETEValidIngredientPreparationsValidIngredientPreparationIDResponse, error) {
	rsp, err := c.DELETEValidIngredientPreparationsValidIngredientPreparationID(ctx, validIngredientPreparationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEValidIngredientPreparationsValidIngredientPreparationIDResponse(rsp)
}

// GETValidIngredientPreparationsValidIngredientPreparationIDWithResponse request returning *GETValidIngredientPreparationsValidIngredientPreparationIDResponse
func (c *ClientWithResponses) GETValidIngredientPreparationsValidIngredientPreparationIDWithResponse(ctx context.Context, validIngredientPreparationID string, reqEditors ...RequestEditorFn) (*GETValidIngredientPreparationsValidIngredientPreparationIDResponse, error) {
	rsp, err := c.GETValidIngredientPreparationsValidIngredientPreparationID(ctx, validIngredientPreparationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidIngredientPreparationsValidIngredientPreparationIDResponse(rsp)
}

// PUTValidIngredientPreparationsValidIngredientPreparationIDWithBodyWithResponse request with arbitrary body returning *PUTValidIngredientPreparationsValidIngredientPreparationIDResponse
func (c *ClientWithResponses) PUTValidIngredientPreparationsValidIngredientPreparationIDWithBodyWithResponse(ctx context.Context, validIngredientPreparationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTValidIngredientPreparationsValidIngredientPreparationIDResponse, error) {
	rsp, err := c.PUTValidIngredientPreparationsValidIngredientPreparationIDWithBody(ctx, validIngredientPreparationID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTValidIngredientPreparationsValidIngredientPreparationIDResponse(rsp)
}

func (c *ClientWithResponses) PUTValidIngredientPreparationsValidIngredientPreparationIDWithResponse(ctx context.Context, validIngredientPreparationID string, body PUTValidIngredientPreparationsValidIngredientPreparationIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTValidIngredientPreparationsValidIngredientPreparationIDResponse, error) {
	rsp, err := c.PUTValidIngredientPreparationsValidIngredientPreparationID(ctx, validIngredientPreparationID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTValidIngredientPreparationsValidIngredientPreparationIDResponse(rsp)
}

// GETValidIngredientStateIngredientsWithResponse request returning *GETValidIngredientStateIngredientsResponse
func (c *ClientWithResponses) GETValidIngredientStateIngredientsWithResponse(ctx context.Context, params *GETValidIngredientStateIngredientsParams, reqEditors ...RequestEditorFn) (*GETValidIngredientStateIngredientsResponse, error) {
	rsp, err := c.GETValidIngredientStateIngredients(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidIngredientStateIngredientsResponse(rsp)
}

// POSTValidIngredientStateIngredientsWithBodyWithResponse request with arbitrary body returning *POSTValidIngredientStateIngredientsResponse
func (c *ClientWithResponses) POSTValidIngredientStateIngredientsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTValidIngredientStateIngredientsResponse, error) {
	rsp, err := c.POSTValidIngredientStateIngredientsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTValidIngredientStateIngredientsResponse(rsp)
}

func (c *ClientWithResponses) POSTValidIngredientStateIngredientsWithResponse(ctx context.Context, body POSTValidIngredientStateIngredientsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTValidIngredientStateIngredientsResponse, error) {
	rsp, err := c.POSTValidIngredientStateIngredients(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTValidIngredientStateIngredientsResponse(rsp)
}

// GETValidIngredientStateIngredientsByIngredientValidIngredientIDWithResponse request returning *GETValidIngredientStateIngredientsByIngredientValidIngredientIDResponse
func (c *ClientWithResponses) GETValidIngredientStateIngredientsByIngredientValidIngredientIDWithResponse(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*GETValidIngredientStateIngredientsByIngredientValidIngredientIDResponse, error) {
	rsp, err := c.GETValidIngredientStateIngredientsByIngredientValidIngredientID(ctx, validIngredientID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidIngredientStateIngredientsByIngredientValidIngredientIDResponse(rsp)
}

// GETValidIngredientStateIngredientsByIngredientStateValidIngredientStateIDWithResponse request returning *GETValidIngredientStateIngredientsByIngredientStateValidIngredientStateIDResponse
func (c *ClientWithResponses) GETValidIngredientStateIngredientsByIngredientStateValidIngredientStateIDWithResponse(ctx context.Context, validIngredientStateID string, reqEditors ...RequestEditorFn) (*GETValidIngredientStateIngredientsByIngredientStateValidIngredientStateIDResponse, error) {
	rsp, err := c.GETValidIngredientStateIngredientsByIngredientStateValidIngredientStateID(ctx, validIngredientStateID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidIngredientStateIngredientsByIngredientStateValidIngredientStateIDResponse(rsp)
}

// DELETEValidIngredientStateIngredientsValidIngredientStateIngredientIDWithResponse request returning *DELETEValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse
func (c *ClientWithResponses) DELETEValidIngredientStateIngredientsValidIngredientStateIngredientIDWithResponse(ctx context.Context, validIngredientStateIngredientID string, reqEditors ...RequestEditorFn) (*DELETEValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse, error) {
	rsp, err := c.DELETEValidIngredientStateIngredientsValidIngredientStateIngredientID(ctx, validIngredientStateIngredientID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse(rsp)
}

// GETValidIngredientStateIngredientsValidIngredientStateIngredientIDWithResponse request returning *GETValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse
func (c *ClientWithResponses) GETValidIngredientStateIngredientsValidIngredientStateIngredientIDWithResponse(ctx context.Context, validIngredientStateIngredientID string, reqEditors ...RequestEditorFn) (*GETValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse, error) {
	rsp, err := c.GETValidIngredientStateIngredientsValidIngredientStateIngredientID(ctx, validIngredientStateIngredientID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse(rsp)
}

// PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDWithBodyWithResponse request with arbitrary body returning *PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse
func (c *ClientWithResponses) PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDWithBodyWithResponse(ctx context.Context, validIngredientStateIngredientID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse, error) {
	rsp, err := c.PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDWithBody(ctx, validIngredientStateIngredientID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse(rsp)
}

func (c *ClientWithResponses) PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDWithResponse(ctx context.Context, validIngredientStateIngredientID string, body PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse, error) {
	rsp, err := c.PUTValidIngredientStateIngredientsValidIngredientStateIngredientID(ctx, validIngredientStateIngredientID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse(rsp)
}

// GETValidIngredientStatesWithResponse request returning *GETValidIngredientStatesResponse
func (c *ClientWithResponses) GETValidIngredientStatesWithResponse(ctx context.Context, params *GETValidIngredientStatesParams, reqEditors ...RequestEditorFn) (*GETValidIngredientStatesResponse, error) {
	rsp, err := c.GETValidIngredientStates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidIngredientStatesResponse(rsp)
}

// POSTValidIngredientStatesWithBodyWithResponse request with arbitrary body returning *POSTValidIngredientStatesResponse
func (c *ClientWithResponses) POSTValidIngredientStatesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTValidIngredientStatesResponse, error) {
	rsp, err := c.POSTValidIngredientStatesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTValidIngredientStatesResponse(rsp)
}

func (c *ClientWithResponses) POSTValidIngredientStatesWithResponse(ctx context.Context, body POSTValidIngredientStatesJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTValidIngredientStatesResponse, error) {
	rsp, err := c.POSTValidIngredientStates(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTValidIngredientStatesResponse(rsp)
}

// GETValidIngredientStatesSearchWithResponse request returning *GETValidIngredientStatesSearchResponse
func (c *ClientWithResponses) GETValidIngredientStatesSearchWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETValidIngredientStatesSearchResponse, error) {
	rsp, err := c.GETValidIngredientStatesSearch(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidIngredientStatesSearchResponse(rsp)
}

// DELETEValidIngredientStatesValidIngredientStateIDWithResponse request returning *DELETEValidIngredientStatesValidIngredientStateIDResponse
func (c *ClientWithResponses) DELETEValidIngredientStatesValidIngredientStateIDWithResponse(ctx context.Context, validIngredientStateID string, reqEditors ...RequestEditorFn) (*DELETEValidIngredientStatesValidIngredientStateIDResponse, error) {
	rsp, err := c.DELETEValidIngredientStatesValidIngredientStateID(ctx, validIngredientStateID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEValidIngredientStatesValidIngredientStateIDResponse(rsp)
}

// GETValidIngredientStatesValidIngredientStateIDWithResponse request returning *GETValidIngredientStatesValidIngredientStateIDResponse
func (c *ClientWithResponses) GETValidIngredientStatesValidIngredientStateIDWithResponse(ctx context.Context, validIngredientStateID string, reqEditors ...RequestEditorFn) (*GETValidIngredientStatesValidIngredientStateIDResponse, error) {
	rsp, err := c.GETValidIngredientStatesValidIngredientStateID(ctx, validIngredientStateID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidIngredientStatesValidIngredientStateIDResponse(rsp)
}

// PUTValidIngredientStatesValidIngredientStateIDWithBodyWithResponse request with arbitrary body returning *PUTValidIngredientStatesValidIngredientStateIDResponse
func (c *ClientWithResponses) PUTValidIngredientStatesValidIngredientStateIDWithBodyWithResponse(ctx context.Context, validIngredientStateID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTValidIngredientStatesValidIngredientStateIDResponse, error) {
	rsp, err := c.PUTValidIngredientStatesValidIngredientStateIDWithBody(ctx, validIngredientStateID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTValidIngredientStatesValidIngredientStateIDResponse(rsp)
}

func (c *ClientWithResponses) PUTValidIngredientStatesValidIngredientStateIDWithResponse(ctx context.Context, validIngredientStateID string, body PUTValidIngredientStatesValidIngredientStateIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTValidIngredientStatesValidIngredientStateIDResponse, error) {
	rsp, err := c.PUTValidIngredientStatesValidIngredientStateID(ctx, validIngredientStateID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTValidIngredientStatesValidIngredientStateIDResponse(rsp)
}

// GETValidIngredientsWithResponse request returning *GETValidIngredientsResponse
func (c *ClientWithResponses) GETValidIngredientsWithResponse(ctx context.Context, params *GETValidIngredientsParams, reqEditors ...RequestEditorFn) (*GETValidIngredientsResponse, error) {
	rsp, err := c.GETValidIngredients(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidIngredientsResponse(rsp)
}

// POSTValidIngredientsWithBodyWithResponse request with arbitrary body returning *POSTValidIngredientsResponse
func (c *ClientWithResponses) POSTValidIngredientsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTValidIngredientsResponse, error) {
	rsp, err := c.POSTValidIngredientsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTValidIngredientsResponse(rsp)
}

func (c *ClientWithResponses) POSTValidIngredientsWithResponse(ctx context.Context, body POSTValidIngredientsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTValidIngredientsResponse, error) {
	rsp, err := c.POSTValidIngredients(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTValidIngredientsResponse(rsp)
}

// GETValidIngredientsByPreparationValidPreparationIDWithResponse request returning *GETValidIngredientsByPreparationValidPreparationIDResponse
func (c *ClientWithResponses) GETValidIngredientsByPreparationValidPreparationIDWithResponse(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*GETValidIngredientsByPreparationValidPreparationIDResponse, error) {
	rsp, err := c.GETValidIngredientsByPreparationValidPreparationID(ctx, validPreparationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidIngredientsByPreparationValidPreparationIDResponse(rsp)
}

// GETValidIngredientsRandomWithResponse request returning *GETValidIngredientsRandomResponse
func (c *ClientWithResponses) GETValidIngredientsRandomWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETValidIngredientsRandomResponse, error) {
	rsp, err := c.GETValidIngredientsRandom(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidIngredientsRandomResponse(rsp)
}

// GETValidIngredientsSearchWithResponse request returning *GETValidIngredientsSearchResponse
func (c *ClientWithResponses) GETValidIngredientsSearchWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETValidIngredientsSearchResponse, error) {
	rsp, err := c.GETValidIngredientsSearch(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidIngredientsSearchResponse(rsp)
}

// DELETEValidIngredientsValidIngredientIDWithResponse request returning *DELETEValidIngredientsValidIngredientIDResponse
func (c *ClientWithResponses) DELETEValidIngredientsValidIngredientIDWithResponse(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*DELETEValidIngredientsValidIngredientIDResponse, error) {
	rsp, err := c.DELETEValidIngredientsValidIngredientID(ctx, validIngredientID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEValidIngredientsValidIngredientIDResponse(rsp)
}

// GETValidIngredientsValidIngredientIDWithResponse request returning *GETValidIngredientsValidIngredientIDResponse
func (c *ClientWithResponses) GETValidIngredientsValidIngredientIDWithResponse(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*GETValidIngredientsValidIngredientIDResponse, error) {
	rsp, err := c.GETValidIngredientsValidIngredientID(ctx, validIngredientID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidIngredientsValidIngredientIDResponse(rsp)
}

// PUTValidIngredientsValidIngredientIDWithBodyWithResponse request with arbitrary body returning *PUTValidIngredientsValidIngredientIDResponse
func (c *ClientWithResponses) PUTValidIngredientsValidIngredientIDWithBodyWithResponse(ctx context.Context, validIngredientID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTValidIngredientsValidIngredientIDResponse, error) {
	rsp, err := c.PUTValidIngredientsValidIngredientIDWithBody(ctx, validIngredientID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTValidIngredientsValidIngredientIDResponse(rsp)
}

func (c *ClientWithResponses) PUTValidIngredientsValidIngredientIDWithResponse(ctx context.Context, validIngredientID string, body PUTValidIngredientsValidIngredientIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTValidIngredientsValidIngredientIDResponse, error) {
	rsp, err := c.PUTValidIngredientsValidIngredientID(ctx, validIngredientID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTValidIngredientsValidIngredientIDResponse(rsp)
}

// GETValidInstrumentsWithResponse request returning *GETValidInstrumentsResponse
func (c *ClientWithResponses) GETValidInstrumentsWithResponse(ctx context.Context, params *GETValidInstrumentsParams, reqEditors ...RequestEditorFn) (*GETValidInstrumentsResponse, error) {
	rsp, err := c.GETValidInstruments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidInstrumentsResponse(rsp)
}

// POSTValidInstrumentsWithBodyWithResponse request with arbitrary body returning *POSTValidInstrumentsResponse
func (c *ClientWithResponses) POSTValidInstrumentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTValidInstrumentsResponse, error) {
	rsp, err := c.POSTValidInstrumentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTValidInstrumentsResponse(rsp)
}

func (c *ClientWithResponses) POSTValidInstrumentsWithResponse(ctx context.Context, body POSTValidInstrumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTValidInstrumentsResponse, error) {
	rsp, err := c.POSTValidInstruments(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTValidInstrumentsResponse(rsp)
}

// GETValidInstrumentsRandomWithResponse request returning *GETValidInstrumentsRandomResponse
func (c *ClientWithResponses) GETValidInstrumentsRandomWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETValidInstrumentsRandomResponse, error) {
	rsp, err := c.GETValidInstrumentsRandom(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidInstrumentsRandomResponse(rsp)
}

// GETValidInstrumentsSearchWithResponse request returning *GETValidInstrumentsSearchResponse
func (c *ClientWithResponses) GETValidInstrumentsSearchWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETValidInstrumentsSearchResponse, error) {
	rsp, err := c.GETValidInstrumentsSearch(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidInstrumentsSearchResponse(rsp)
}

// DELETEValidInstrumentsValidInstrumentIDWithResponse request returning *DELETEValidInstrumentsValidInstrumentIDResponse
func (c *ClientWithResponses) DELETEValidInstrumentsValidInstrumentIDWithResponse(ctx context.Context, validInstrumentID string, reqEditors ...RequestEditorFn) (*DELETEValidInstrumentsValidInstrumentIDResponse, error) {
	rsp, err := c.DELETEValidInstrumentsValidInstrumentID(ctx, validInstrumentID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEValidInstrumentsValidInstrumentIDResponse(rsp)
}

// GETValidInstrumentsValidInstrumentIDWithResponse request returning *GETValidInstrumentsValidInstrumentIDResponse
func (c *ClientWithResponses) GETValidInstrumentsValidInstrumentIDWithResponse(ctx context.Context, validInstrumentID string, reqEditors ...RequestEditorFn) (*GETValidInstrumentsValidInstrumentIDResponse, error) {
	rsp, err := c.GETValidInstrumentsValidInstrumentID(ctx, validInstrumentID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidInstrumentsValidInstrumentIDResponse(rsp)
}

// PUTValidInstrumentsValidInstrumentIDWithBodyWithResponse request with arbitrary body returning *PUTValidInstrumentsValidInstrumentIDResponse
func (c *ClientWithResponses) PUTValidInstrumentsValidInstrumentIDWithBodyWithResponse(ctx context.Context, validInstrumentID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTValidInstrumentsValidInstrumentIDResponse, error) {
	rsp, err := c.PUTValidInstrumentsValidInstrumentIDWithBody(ctx, validInstrumentID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTValidInstrumentsValidInstrumentIDResponse(rsp)
}

func (c *ClientWithResponses) PUTValidInstrumentsValidInstrumentIDWithResponse(ctx context.Context, validInstrumentID string, body PUTValidInstrumentsValidInstrumentIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTValidInstrumentsValidInstrumentIDResponse, error) {
	rsp, err := c.PUTValidInstrumentsValidInstrumentID(ctx, validInstrumentID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTValidInstrumentsValidInstrumentIDResponse(rsp)
}

// POSTValidMeasurementConversionsWithBodyWithResponse request with arbitrary body returning *POSTValidMeasurementConversionsResponse
func (c *ClientWithResponses) POSTValidMeasurementConversionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTValidMeasurementConversionsResponse, error) {
	rsp, err := c.POSTValidMeasurementConversionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTValidMeasurementConversionsResponse(rsp)
}

func (c *ClientWithResponses) POSTValidMeasurementConversionsWithResponse(ctx context.Context, body POSTValidMeasurementConversionsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTValidMeasurementConversionsResponse, error) {
	rsp, err := c.POSTValidMeasurementConversions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTValidMeasurementConversionsResponse(rsp)
}

// GETValidMeasurementConversionsFromUnitValidMeasurementUnitIDWithResponse request returning *GETValidMeasurementConversionsFromUnitValidMeasurementUnitIDResponse
func (c *ClientWithResponses) GETValidMeasurementConversionsFromUnitValidMeasurementUnitIDWithResponse(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*GETValidMeasurementConversionsFromUnitValidMeasurementUnitIDResponse, error) {
	rsp, err := c.GETValidMeasurementConversionsFromUnitValidMeasurementUnitID(ctx, validMeasurementUnitID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidMeasurementConversionsFromUnitValidMeasurementUnitIDResponse(rsp)
}

// GETValidMeasurementConversionsToUnitValidMeasurementUnitIDWithResponse request returning *GETValidMeasurementConversionsToUnitValidMeasurementUnitIDResponse
func (c *ClientWithResponses) GETValidMeasurementConversionsToUnitValidMeasurementUnitIDWithResponse(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*GETValidMeasurementConversionsToUnitValidMeasurementUnitIDResponse, error) {
	rsp, err := c.GETValidMeasurementConversionsToUnitValidMeasurementUnitID(ctx, validMeasurementUnitID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidMeasurementConversionsToUnitValidMeasurementUnitIDResponse(rsp)
}

// DELETEValidMeasurementConversionsValidMeasurementUnitConversionIDWithResponse request returning *DELETEValidMeasurementConversionsValidMeasurementUnitConversionIDResponse
func (c *ClientWithResponses) DELETEValidMeasurementConversionsValidMeasurementUnitConversionIDWithResponse(ctx context.Context, validMeasurementUnitConversionID string, reqEditors ...RequestEditorFn) (*DELETEValidMeasurementConversionsValidMeasurementUnitConversionIDResponse, error) {
	rsp, err := c.DELETEValidMeasurementConversionsValidMeasurementUnitConversionID(ctx, validMeasurementUnitConversionID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEValidMeasurementConversionsValidMeasurementUnitConversionIDResponse(rsp)
}

// GETValidMeasurementConversionsValidMeasurementUnitConversionIDWithResponse request returning *GETValidMeasurementConversionsValidMeasurementUnitConversionIDResponse
func (c *ClientWithResponses) GETValidMeasurementConversionsValidMeasurementUnitConversionIDWithResponse(ctx context.Context, validMeasurementUnitConversionID string, reqEditors ...RequestEditorFn) (*GETValidMeasurementConversionsValidMeasurementUnitConversionIDResponse, error) {
	rsp, err := c.GETValidMeasurementConversionsValidMeasurementUnitConversionID(ctx, validMeasurementUnitConversionID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidMeasurementConversionsValidMeasurementUnitConversionIDResponse(rsp)
}

// PUTValidMeasurementConversionsValidMeasurementUnitConversionIDWithBodyWithResponse request with arbitrary body returning *PUTValidMeasurementConversionsValidMeasurementUnitConversionIDResponse
func (c *ClientWithResponses) PUTValidMeasurementConversionsValidMeasurementUnitConversionIDWithBodyWithResponse(ctx context.Context, validMeasurementUnitConversionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTValidMeasurementConversionsValidMeasurementUnitConversionIDResponse, error) {
	rsp, err := c.PUTValidMeasurementConversionsValidMeasurementUnitConversionIDWithBody(ctx, validMeasurementUnitConversionID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTValidMeasurementConversionsValidMeasurementUnitConversionIDResponse(rsp)
}

func (c *ClientWithResponses) PUTValidMeasurementConversionsValidMeasurementUnitConversionIDWithResponse(ctx context.Context, validMeasurementUnitConversionID string, body PUTValidMeasurementConversionsValidMeasurementUnitConversionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTValidMeasurementConversionsValidMeasurementUnitConversionIDResponse, error) {
	rsp, err := c.PUTValidMeasurementConversionsValidMeasurementUnitConversionID(ctx, validMeasurementUnitConversionID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTValidMeasurementConversionsValidMeasurementUnitConversionIDResponse(rsp)
}

// GETValidMeasurementUnitsWithResponse request returning *GETValidMeasurementUnitsResponse
func (c *ClientWithResponses) GETValidMeasurementUnitsWithResponse(ctx context.Context, params *GETValidMeasurementUnitsParams, reqEditors ...RequestEditorFn) (*GETValidMeasurementUnitsResponse, error) {
	rsp, err := c.GETValidMeasurementUnits(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidMeasurementUnitsResponse(rsp)
}

// POSTValidMeasurementUnitsWithBodyWithResponse request with arbitrary body returning *POSTValidMeasurementUnitsResponse
func (c *ClientWithResponses) POSTValidMeasurementUnitsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTValidMeasurementUnitsResponse, error) {
	rsp, err := c.POSTValidMeasurementUnitsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTValidMeasurementUnitsResponse(rsp)
}

func (c *ClientWithResponses) POSTValidMeasurementUnitsWithResponse(ctx context.Context, body POSTValidMeasurementUnitsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTValidMeasurementUnitsResponse, error) {
	rsp, err := c.POSTValidMeasurementUnits(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTValidMeasurementUnitsResponse(rsp)
}

// GETValidMeasurementUnitsByIngredientValidIngredientIDWithResponse request returning *GETValidMeasurementUnitsByIngredientValidIngredientIDResponse
func (c *ClientWithResponses) GETValidMeasurementUnitsByIngredientValidIngredientIDWithResponse(ctx context.Context, validIngredientID string, reqEditors ...RequestEditorFn) (*GETValidMeasurementUnitsByIngredientValidIngredientIDResponse, error) {
	rsp, err := c.GETValidMeasurementUnitsByIngredientValidIngredientID(ctx, validIngredientID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidMeasurementUnitsByIngredientValidIngredientIDResponse(rsp)
}

// GETValidMeasurementUnitsSearchWithResponse request returning *GETValidMeasurementUnitsSearchResponse
func (c *ClientWithResponses) GETValidMeasurementUnitsSearchWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETValidMeasurementUnitsSearchResponse, error) {
	rsp, err := c.GETValidMeasurementUnitsSearch(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidMeasurementUnitsSearchResponse(rsp)
}

// DELETEValidMeasurementUnitsValidMeasurementUnitIDWithResponse request returning *DELETEValidMeasurementUnitsValidMeasurementUnitIDResponse
func (c *ClientWithResponses) DELETEValidMeasurementUnitsValidMeasurementUnitIDWithResponse(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*DELETEValidMeasurementUnitsValidMeasurementUnitIDResponse, error) {
	rsp, err := c.DELETEValidMeasurementUnitsValidMeasurementUnitID(ctx, validMeasurementUnitID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEValidMeasurementUnitsValidMeasurementUnitIDResponse(rsp)
}

// GETValidMeasurementUnitsValidMeasurementUnitIDWithResponse request returning *GETValidMeasurementUnitsValidMeasurementUnitIDResponse
func (c *ClientWithResponses) GETValidMeasurementUnitsValidMeasurementUnitIDWithResponse(ctx context.Context, validMeasurementUnitID string, reqEditors ...RequestEditorFn) (*GETValidMeasurementUnitsValidMeasurementUnitIDResponse, error) {
	rsp, err := c.GETValidMeasurementUnitsValidMeasurementUnitID(ctx, validMeasurementUnitID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidMeasurementUnitsValidMeasurementUnitIDResponse(rsp)
}

// PUTValidMeasurementUnitsValidMeasurementUnitIDWithBodyWithResponse request with arbitrary body returning *PUTValidMeasurementUnitsValidMeasurementUnitIDResponse
func (c *ClientWithResponses) PUTValidMeasurementUnitsValidMeasurementUnitIDWithBodyWithResponse(ctx context.Context, validMeasurementUnitID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTValidMeasurementUnitsValidMeasurementUnitIDResponse, error) {
	rsp, err := c.PUTValidMeasurementUnitsValidMeasurementUnitIDWithBody(ctx, validMeasurementUnitID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTValidMeasurementUnitsValidMeasurementUnitIDResponse(rsp)
}

func (c *ClientWithResponses) PUTValidMeasurementUnitsValidMeasurementUnitIDWithResponse(ctx context.Context, validMeasurementUnitID string, body PUTValidMeasurementUnitsValidMeasurementUnitIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTValidMeasurementUnitsValidMeasurementUnitIDResponse, error) {
	rsp, err := c.PUTValidMeasurementUnitsValidMeasurementUnitID(ctx, validMeasurementUnitID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTValidMeasurementUnitsValidMeasurementUnitIDResponse(rsp)
}

// GETValidPreparationInstrumentsWithResponse request returning *GETValidPreparationInstrumentsResponse
func (c *ClientWithResponses) GETValidPreparationInstrumentsWithResponse(ctx context.Context, params *GETValidPreparationInstrumentsParams, reqEditors ...RequestEditorFn) (*GETValidPreparationInstrumentsResponse, error) {
	rsp, err := c.GETValidPreparationInstruments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidPreparationInstrumentsResponse(rsp)
}

// POSTValidPreparationInstrumentsWithBodyWithResponse request with arbitrary body returning *POSTValidPreparationInstrumentsResponse
func (c *ClientWithResponses) POSTValidPreparationInstrumentsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTValidPreparationInstrumentsResponse, error) {
	rsp, err := c.POSTValidPreparationInstrumentsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTValidPreparationInstrumentsResponse(rsp)
}

func (c *ClientWithResponses) POSTValidPreparationInstrumentsWithResponse(ctx context.Context, body POSTValidPreparationInstrumentsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTValidPreparationInstrumentsResponse, error) {
	rsp, err := c.POSTValidPreparationInstruments(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTValidPreparationInstrumentsResponse(rsp)
}

// GETValidPreparationInstrumentsByInstrumentValidInstrumentIDWithResponse request returning *GETValidPreparationInstrumentsByInstrumentValidInstrumentIDResponse
func (c *ClientWithResponses) GETValidPreparationInstrumentsByInstrumentValidInstrumentIDWithResponse(ctx context.Context, validInstrumentID string, reqEditors ...RequestEditorFn) (*GETValidPreparationInstrumentsByInstrumentValidInstrumentIDResponse, error) {
	rsp, err := c.GETValidPreparationInstrumentsByInstrumentValidInstrumentID(ctx, validInstrumentID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidPreparationInstrumentsByInstrumentValidInstrumentIDResponse(rsp)
}

// GETValidPreparationInstrumentsByPreparationValidPreparationIDWithResponse request returning *GETValidPreparationInstrumentsByPreparationValidPreparationIDResponse
func (c *ClientWithResponses) GETValidPreparationInstrumentsByPreparationValidPreparationIDWithResponse(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*GETValidPreparationInstrumentsByPreparationValidPreparationIDResponse, error) {
	rsp, err := c.GETValidPreparationInstrumentsByPreparationValidPreparationID(ctx, validPreparationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidPreparationInstrumentsByPreparationValidPreparationIDResponse(rsp)
}

// DELETEValidPreparationInstrumentsValidPreparationVesselIDWithResponse request returning *DELETEValidPreparationInstrumentsValidPreparationVesselIDResponse
func (c *ClientWithResponses) DELETEValidPreparationInstrumentsValidPreparationVesselIDWithResponse(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*DELETEValidPreparationInstrumentsValidPreparationVesselIDResponse, error) {
	rsp, err := c.DELETEValidPreparationInstrumentsValidPreparationVesselID(ctx, validPreparationVesselID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEValidPreparationInstrumentsValidPreparationVesselIDResponse(rsp)
}

// GETValidPreparationInstrumentsValidPreparationVesselIDWithResponse request returning *GETValidPreparationInstrumentsValidPreparationVesselIDResponse
func (c *ClientWithResponses) GETValidPreparationInstrumentsValidPreparationVesselIDWithResponse(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*GETValidPreparationInstrumentsValidPreparationVesselIDResponse, error) {
	rsp, err := c.GETValidPreparationInstrumentsValidPreparationVesselID(ctx, validPreparationVesselID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidPreparationInstrumentsValidPreparationVesselIDResponse(rsp)
}

// PUTValidPreparationInstrumentsValidPreparationVesselIDWithBodyWithResponse request with arbitrary body returning *PUTValidPreparationInstrumentsValidPreparationVesselIDResponse
func (c *ClientWithResponses) PUTValidPreparationInstrumentsValidPreparationVesselIDWithBodyWithResponse(ctx context.Context, validPreparationVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTValidPreparationInstrumentsValidPreparationVesselIDResponse, error) {
	rsp, err := c.PUTValidPreparationInstrumentsValidPreparationVesselIDWithBody(ctx, validPreparationVesselID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTValidPreparationInstrumentsValidPreparationVesselIDResponse(rsp)
}

func (c *ClientWithResponses) PUTValidPreparationInstrumentsValidPreparationVesselIDWithResponse(ctx context.Context, validPreparationVesselID string, body PUTValidPreparationInstrumentsValidPreparationVesselIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTValidPreparationInstrumentsValidPreparationVesselIDResponse, error) {
	rsp, err := c.PUTValidPreparationInstrumentsValidPreparationVesselID(ctx, validPreparationVesselID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTValidPreparationInstrumentsValidPreparationVesselIDResponse(rsp)
}

// GETValidPreparationVesselsWithResponse request returning *GETValidPreparationVesselsResponse
func (c *ClientWithResponses) GETValidPreparationVesselsWithResponse(ctx context.Context, params *GETValidPreparationVesselsParams, reqEditors ...RequestEditorFn) (*GETValidPreparationVesselsResponse, error) {
	rsp, err := c.GETValidPreparationVessels(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidPreparationVesselsResponse(rsp)
}

// POSTValidPreparationVesselsWithBodyWithResponse request with arbitrary body returning *POSTValidPreparationVesselsResponse
func (c *ClientWithResponses) POSTValidPreparationVesselsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTValidPreparationVesselsResponse, error) {
	rsp, err := c.POSTValidPreparationVesselsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTValidPreparationVesselsResponse(rsp)
}

func (c *ClientWithResponses) POSTValidPreparationVesselsWithResponse(ctx context.Context, body POSTValidPreparationVesselsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTValidPreparationVesselsResponse, error) {
	rsp, err := c.POSTValidPreparationVessels(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTValidPreparationVesselsResponse(rsp)
}

// GETValidPreparationVesselsByPreparationValidPreparationIDWithResponse request returning *GETValidPreparationVesselsByPreparationValidPreparationIDResponse
func (c *ClientWithResponses) GETValidPreparationVesselsByPreparationValidPreparationIDWithResponse(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*GETValidPreparationVesselsByPreparationValidPreparationIDResponse, error) {
	rsp, err := c.GETValidPreparationVesselsByPreparationValidPreparationID(ctx, validPreparationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidPreparationVesselsByPreparationValidPreparationIDResponse(rsp)
}

// GETValidPreparationVesselsByVesselValidVesselIDWithResponse request returning *GETValidPreparationVesselsByVesselValidVesselIDResponse
func (c *ClientWithResponses) GETValidPreparationVesselsByVesselValidVesselIDWithResponse(ctx context.Context, validVesselID string, reqEditors ...RequestEditorFn) (*GETValidPreparationVesselsByVesselValidVesselIDResponse, error) {
	rsp, err := c.GETValidPreparationVesselsByVesselValidVesselID(ctx, validVesselID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidPreparationVesselsByVesselValidVesselIDResponse(rsp)
}

// DELETEValidPreparationVesselsValidPreparationVesselIDWithResponse request returning *DELETEValidPreparationVesselsValidPreparationVesselIDResponse
func (c *ClientWithResponses) DELETEValidPreparationVesselsValidPreparationVesselIDWithResponse(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*DELETEValidPreparationVesselsValidPreparationVesselIDResponse, error) {
	rsp, err := c.DELETEValidPreparationVesselsValidPreparationVesselID(ctx, validPreparationVesselID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEValidPreparationVesselsValidPreparationVesselIDResponse(rsp)
}

// GETValidPreparationVesselsValidPreparationVesselIDWithResponse request returning *GETValidPreparationVesselsValidPreparationVesselIDResponse
func (c *ClientWithResponses) GETValidPreparationVesselsValidPreparationVesselIDWithResponse(ctx context.Context, validPreparationVesselID string, reqEditors ...RequestEditorFn) (*GETValidPreparationVesselsValidPreparationVesselIDResponse, error) {
	rsp, err := c.GETValidPreparationVesselsValidPreparationVesselID(ctx, validPreparationVesselID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidPreparationVesselsValidPreparationVesselIDResponse(rsp)
}

// PUTValidPreparationVesselsValidPreparationVesselIDWithBodyWithResponse request with arbitrary body returning *PUTValidPreparationVesselsValidPreparationVesselIDResponse
func (c *ClientWithResponses) PUTValidPreparationVesselsValidPreparationVesselIDWithBodyWithResponse(ctx context.Context, validPreparationVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTValidPreparationVesselsValidPreparationVesselIDResponse, error) {
	rsp, err := c.PUTValidPreparationVesselsValidPreparationVesselIDWithBody(ctx, validPreparationVesselID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTValidPreparationVesselsValidPreparationVesselIDResponse(rsp)
}

func (c *ClientWithResponses) PUTValidPreparationVesselsValidPreparationVesselIDWithResponse(ctx context.Context, validPreparationVesselID string, body PUTValidPreparationVesselsValidPreparationVesselIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTValidPreparationVesselsValidPreparationVesselIDResponse, error) {
	rsp, err := c.PUTValidPreparationVesselsValidPreparationVesselID(ctx, validPreparationVesselID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTValidPreparationVesselsValidPreparationVesselIDResponse(rsp)
}

// GETValidPreparationsWithResponse request returning *GETValidPreparationsResponse
func (c *ClientWithResponses) GETValidPreparationsWithResponse(ctx context.Context, params *GETValidPreparationsParams, reqEditors ...RequestEditorFn) (*GETValidPreparationsResponse, error) {
	rsp, err := c.GETValidPreparations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidPreparationsResponse(rsp)
}

// POSTValidPreparationsWithBodyWithResponse request with arbitrary body returning *POSTValidPreparationsResponse
func (c *ClientWithResponses) POSTValidPreparationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTValidPreparationsResponse, error) {
	rsp, err := c.POSTValidPreparationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTValidPreparationsResponse(rsp)
}

func (c *ClientWithResponses) POSTValidPreparationsWithResponse(ctx context.Context, body POSTValidPreparationsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTValidPreparationsResponse, error) {
	rsp, err := c.POSTValidPreparations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTValidPreparationsResponse(rsp)
}

// GETValidPreparationsRandomWithResponse request returning *GETValidPreparationsRandomResponse
func (c *ClientWithResponses) GETValidPreparationsRandomWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETValidPreparationsRandomResponse, error) {
	rsp, err := c.GETValidPreparationsRandom(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidPreparationsRandomResponse(rsp)
}

// GETValidPreparationsSearchWithResponse request returning *GETValidPreparationsSearchResponse
func (c *ClientWithResponses) GETValidPreparationsSearchWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETValidPreparationsSearchResponse, error) {
	rsp, err := c.GETValidPreparationsSearch(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidPreparationsSearchResponse(rsp)
}

// DELETEValidPreparationsValidPreparationIDWithResponse request returning *DELETEValidPreparationsValidPreparationIDResponse
func (c *ClientWithResponses) DELETEValidPreparationsValidPreparationIDWithResponse(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*DELETEValidPreparationsValidPreparationIDResponse, error) {
	rsp, err := c.DELETEValidPreparationsValidPreparationID(ctx, validPreparationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEValidPreparationsValidPreparationIDResponse(rsp)
}

// GETValidPreparationsValidPreparationIDWithResponse request returning *GETValidPreparationsValidPreparationIDResponse
func (c *ClientWithResponses) GETValidPreparationsValidPreparationIDWithResponse(ctx context.Context, validPreparationID string, reqEditors ...RequestEditorFn) (*GETValidPreparationsValidPreparationIDResponse, error) {
	rsp, err := c.GETValidPreparationsValidPreparationID(ctx, validPreparationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidPreparationsValidPreparationIDResponse(rsp)
}

// PUTValidPreparationsValidPreparationIDWithBodyWithResponse request with arbitrary body returning *PUTValidPreparationsValidPreparationIDResponse
func (c *ClientWithResponses) PUTValidPreparationsValidPreparationIDWithBodyWithResponse(ctx context.Context, validPreparationID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTValidPreparationsValidPreparationIDResponse, error) {
	rsp, err := c.PUTValidPreparationsValidPreparationIDWithBody(ctx, validPreparationID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTValidPreparationsValidPreparationIDResponse(rsp)
}

func (c *ClientWithResponses) PUTValidPreparationsValidPreparationIDWithResponse(ctx context.Context, validPreparationID string, body PUTValidPreparationsValidPreparationIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTValidPreparationsValidPreparationIDResponse, error) {
	rsp, err := c.PUTValidPreparationsValidPreparationID(ctx, validPreparationID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTValidPreparationsValidPreparationIDResponse(rsp)
}

// GETValidVesselsWithResponse request returning *GETValidVesselsResponse
func (c *ClientWithResponses) GETValidVesselsWithResponse(ctx context.Context, params *GETValidVesselsParams, reqEditors ...RequestEditorFn) (*GETValidVesselsResponse, error) {
	rsp, err := c.GETValidVessels(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidVesselsResponse(rsp)
}

// POSTValidVesselsWithBodyWithResponse request with arbitrary body returning *POSTValidVesselsResponse
func (c *ClientWithResponses) POSTValidVesselsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTValidVesselsResponse, error) {
	rsp, err := c.POSTValidVesselsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTValidVesselsResponse(rsp)
}

func (c *ClientWithResponses) POSTValidVesselsWithResponse(ctx context.Context, body POSTValidVesselsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTValidVesselsResponse, error) {
	rsp, err := c.POSTValidVessels(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTValidVesselsResponse(rsp)
}

// GETValidVesselsRandomWithResponse request returning *GETValidVesselsRandomResponse
func (c *ClientWithResponses) GETValidVesselsRandomWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETValidVesselsRandomResponse, error) {
	rsp, err := c.GETValidVesselsRandom(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidVesselsRandomResponse(rsp)
}

// GETValidVesselsSearchWithResponse request returning *GETValidVesselsSearchResponse
func (c *ClientWithResponses) GETValidVesselsSearchWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETValidVesselsSearchResponse, error) {
	rsp, err := c.GETValidVesselsSearch(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidVesselsSearchResponse(rsp)
}

// DELETEValidVesselsValidVesselIDWithResponse request returning *DELETEValidVesselsValidVesselIDResponse
func (c *ClientWithResponses) DELETEValidVesselsValidVesselIDWithResponse(ctx context.Context, validVesselID string, reqEditors ...RequestEditorFn) (*DELETEValidVesselsValidVesselIDResponse, error) {
	rsp, err := c.DELETEValidVesselsValidVesselID(ctx, validVesselID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEValidVesselsValidVesselIDResponse(rsp)
}

// GETValidVesselsValidVesselIDWithResponse request returning *GETValidVesselsValidVesselIDResponse
func (c *ClientWithResponses) GETValidVesselsValidVesselIDWithResponse(ctx context.Context, validVesselID string, reqEditors ...RequestEditorFn) (*GETValidVesselsValidVesselIDResponse, error) {
	rsp, err := c.GETValidVesselsValidVesselID(ctx, validVesselID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETValidVesselsValidVesselIDResponse(rsp)
}

// PUTValidVesselsValidVesselIDWithBodyWithResponse request with arbitrary body returning *PUTValidVesselsValidVesselIDResponse
func (c *ClientWithResponses) PUTValidVesselsValidVesselIDWithBodyWithResponse(ctx context.Context, validVesselID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PUTValidVesselsValidVesselIDResponse, error) {
	rsp, err := c.PUTValidVesselsValidVesselIDWithBody(ctx, validVesselID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTValidVesselsValidVesselIDResponse(rsp)
}

func (c *ClientWithResponses) PUTValidVesselsValidVesselIDWithResponse(ctx context.Context, validVesselID string, body PUTValidVesselsValidVesselIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PUTValidVesselsValidVesselIDResponse, error) {
	rsp, err := c.PUTValidVesselsValidVesselID(ctx, validVesselID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePUTValidVesselsValidVesselIDResponse(rsp)
}

// GETWebhooksWithResponse request returning *GETWebhooksResponse
func (c *ClientWithResponses) GETWebhooksWithResponse(ctx context.Context, params *GETWebhooksParams, reqEditors ...RequestEditorFn) (*GETWebhooksResponse, error) {
	rsp, err := c.GETWebhooks(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETWebhooksResponse(rsp)
}

// POSTWebhooksWithBodyWithResponse request with arbitrary body returning *POSTWebhooksResponse
func (c *ClientWithResponses) POSTWebhooksWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTWebhooksResponse, error) {
	rsp, err := c.POSTWebhooksWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTWebhooksResponse(rsp)
}

func (c *ClientWithResponses) POSTWebhooksWithResponse(ctx context.Context, body POSTWebhooksJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTWebhooksResponse, error) {
	rsp, err := c.POSTWebhooks(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTWebhooksResponse(rsp)
}

// DELETEWebhooksWebhookIDWithResponse request returning *DELETEWebhooksWebhookIDResponse
func (c *ClientWithResponses) DELETEWebhooksWebhookIDWithResponse(ctx context.Context, webhookID string, reqEditors ...RequestEditorFn) (*DELETEWebhooksWebhookIDResponse, error) {
	rsp, err := c.DELETEWebhooksWebhookID(ctx, webhookID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEWebhooksWebhookIDResponse(rsp)
}

// GETWebhooksWebhookIDWithResponse request returning *GETWebhooksWebhookIDResponse
func (c *ClientWithResponses) GETWebhooksWebhookIDWithResponse(ctx context.Context, webhookID string, reqEditors ...RequestEditorFn) (*GETWebhooksWebhookIDResponse, error) {
	rsp, err := c.GETWebhooksWebhookID(ctx, webhookID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETWebhooksWebhookIDResponse(rsp)
}

// POSTWebhooksWebhookIDTriggerEventsWithBodyWithResponse request with arbitrary body returning *POSTWebhooksWebhookIDTriggerEventsResponse
func (c *ClientWithResponses) POSTWebhooksWebhookIDTriggerEventsWithBodyWithResponse(ctx context.Context, webhookID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTWebhooksWebhookIDTriggerEventsResponse, error) {
	rsp, err := c.POSTWebhooksWebhookIDTriggerEventsWithBody(ctx, webhookID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTWebhooksWebhookIDTriggerEventsResponse(rsp)
}

func (c *ClientWithResponses) POSTWebhooksWebhookIDTriggerEventsWithResponse(ctx context.Context, webhookID string, body POSTWebhooksWebhookIDTriggerEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTWebhooksWebhookIDTriggerEventsResponse, error) {
	rsp, err := c.POSTWebhooksWebhookIDTriggerEvents(ctx, webhookID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTWebhooksWebhookIDTriggerEventsResponse(rsp)
}

// DELETEWebhooksWebhookIDTriggerEventsWebhookTriggerEventIDWithResponse request returning *DELETEWebhooksWebhookIDTriggerEventsWebhookTriggerEventIDResponse
func (c *ClientWithResponses) DELETEWebhooksWebhookIDTriggerEventsWebhookTriggerEventIDWithResponse(ctx context.Context, webhookID string, webhookTriggerEventID string, reqEditors ...RequestEditorFn) (*DELETEWebhooksWebhookIDTriggerEventsWebhookTriggerEventIDResponse, error) {
	rsp, err := c.DELETEWebhooksWebhookIDTriggerEventsWebhookTriggerEventID(ctx, webhookID, webhookTriggerEventID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDELETEWebhooksWebhookIDTriggerEventsWebhookTriggerEventIDResponse(rsp)
}

// POSTWorkersFinalizeMealPlansWithBodyWithResponse request with arbitrary body returning *POSTWorkersFinalizeMealPlansResponse
func (c *ClientWithResponses) POSTWorkersFinalizeMealPlansWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTWorkersFinalizeMealPlansResponse, error) {
	rsp, err := c.POSTWorkersFinalizeMealPlansWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTWorkersFinalizeMealPlansResponse(rsp)
}

func (c *ClientWithResponses) POSTWorkersFinalizeMealPlansWithResponse(ctx context.Context, body POSTWorkersFinalizeMealPlansJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTWorkersFinalizeMealPlansResponse, error) {
	rsp, err := c.POSTWorkersFinalizeMealPlans(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTWorkersFinalizeMealPlansResponse(rsp)
}

// POSTWorkersMealPlanGroceryListInitWithResponse request returning *POSTWorkersMealPlanGroceryListInitResponse
func (c *ClientWithResponses) POSTWorkersMealPlanGroceryListInitWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*POSTWorkersMealPlanGroceryListInitResponse, error) {
	rsp, err := c.POSTWorkersMealPlanGroceryListInit(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTWorkersMealPlanGroceryListInitResponse(rsp)
}

// POSTWorkersMealPlanTasksWithResponse request returning *POSTWorkersMealPlanTasksResponse
func (c *ClientWithResponses) POSTWorkersMealPlanTasksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*POSTWorkersMealPlanTasksResponse, error) {
	rsp, err := c.POSTWorkersMealPlanTasks(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTWorkersMealPlanTasksResponse(rsp)
}

// GETAuthStatusWithResponse request returning *GETAuthStatusResponse
func (c *ClientWithResponses) GETAuthStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETAuthStatusResponse, error) {
	rsp, err := c.GETAuthStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETAuthStatusResponse(rsp)
}

// GETOauth2AuthorizeWithResponse request returning *GETOauth2AuthorizeResponse
func (c *ClientWithResponses) GETOauth2AuthorizeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GETOauth2AuthorizeResponse, error) {
	rsp, err := c.GETOauth2Authorize(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGETOauth2AuthorizeResponse(rsp)
}

// POSTOauth2TokenWithResponse request returning *POSTOauth2TokenResponse
func (c *ClientWithResponses) POSTOauth2TokenWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*POSTOauth2TokenResponse, error) {
	rsp, err := c.POSTOauth2Token(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTOauth2TokenResponse(rsp)
}

// POSTUsersWithBodyWithResponse request with arbitrary body returning *POSTUsersResponse
func (c *ClientWithResponses) POSTUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersResponse, error) {
	rsp, err := c.POSTUsersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersResponse(rsp)
}

func (c *ClientWithResponses) POSTUsersWithResponse(ctx context.Context, body POSTUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersResponse, error) {
	rsp, err := c.POSTUsers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersResponse(rsp)
}

// POSTUsersEmailAddressVerifyWithBodyWithResponse request with arbitrary body returning *POSTUsersEmailAddressVerifyResponse
func (c *ClientWithResponses) POSTUsersEmailAddressVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersEmailAddressVerifyResponse, error) {
	rsp, err := c.POSTUsersEmailAddressVerifyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersEmailAddressVerifyResponse(rsp)
}

func (c *ClientWithResponses) POSTUsersEmailAddressVerifyWithResponse(ctx context.Context, body POSTUsersEmailAddressVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersEmailAddressVerifyResponse, error) {
	rsp, err := c.POSTUsersEmailAddressVerify(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersEmailAddressVerifyResponse(rsp)
}

// POSTUsersLoginWithBodyWithResponse request with arbitrary body returning *POSTUsersLoginResponse
func (c *ClientWithResponses) POSTUsersLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersLoginResponse, error) {
	rsp, err := c.POSTUsersLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersLoginResponse(rsp)
}

func (c *ClientWithResponses) POSTUsersLoginWithResponse(ctx context.Context, body POSTUsersLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersLoginResponse, error) {
	rsp, err := c.POSTUsersLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersLoginResponse(rsp)
}

// POSTUsersLoginAdminWithBodyWithResponse request with arbitrary body returning *POSTUsersLoginAdminResponse
func (c *ClientWithResponses) POSTUsersLoginAdminWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersLoginAdminResponse, error) {
	rsp, err := c.POSTUsersLoginAdminWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersLoginAdminResponse(rsp)
}

func (c *ClientWithResponses) POSTUsersLoginAdminWithResponse(ctx context.Context, body POSTUsersLoginAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersLoginAdminResponse, error) {
	rsp, err := c.POSTUsersLoginAdmin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersLoginAdminResponse(rsp)
}

// POSTUsersLogoutWithResponse request returning *POSTUsersLogoutResponse
func (c *ClientWithResponses) POSTUsersLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*POSTUsersLogoutResponse, error) {
	rsp, err := c.POSTUsersLogout(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersLogoutResponse(rsp)
}

// POSTUsersPasswordResetWithBodyWithResponse request with arbitrary body returning *POSTUsersPasswordResetResponse
func (c *ClientWithResponses) POSTUsersPasswordResetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersPasswordResetResponse, error) {
	rsp, err := c.POSTUsersPasswordResetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersPasswordResetResponse(rsp)
}

func (c *ClientWithResponses) POSTUsersPasswordResetWithResponse(ctx context.Context, body POSTUsersPasswordResetJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersPasswordResetResponse, error) {
	rsp, err := c.POSTUsersPasswordReset(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersPasswordResetResponse(rsp)
}

// POSTUsersPasswordResetRedeemWithBodyWithResponse request with arbitrary body returning *POSTUsersPasswordResetRedeemResponse
func (c *ClientWithResponses) POSTUsersPasswordResetRedeemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersPasswordResetRedeemResponse, error) {
	rsp, err := c.POSTUsersPasswordResetRedeemWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersPasswordResetRedeemResponse(rsp)
}

func (c *ClientWithResponses) POSTUsersPasswordResetRedeemWithResponse(ctx context.Context, body POSTUsersPasswordResetRedeemJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersPasswordResetRedeemResponse, error) {
	rsp, err := c.POSTUsersPasswordResetRedeem(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersPasswordResetRedeemResponse(rsp)
}

// POSTUsersTotpSecretVerifyWithBodyWithResponse request with arbitrary body returning *POSTUsersTotpSecretVerifyResponse
func (c *ClientWithResponses) POSTUsersTotpSecretVerifyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersTotpSecretVerifyResponse, error) {
	rsp, err := c.POSTUsersTotpSecretVerifyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersTotpSecretVerifyResponse(rsp)
}

func (c *ClientWithResponses) POSTUsersTotpSecretVerifyWithResponse(ctx context.Context, body POSTUsersTotpSecretVerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersTotpSecretVerifyResponse, error) {
	rsp, err := c.POSTUsersTotpSecretVerify(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersTotpSecretVerifyResponse(rsp)
}

// POSTUsersUsernameReminderWithBodyWithResponse request with arbitrary body returning *POSTUsersUsernameReminderResponse
func (c *ClientWithResponses) POSTUsersUsernameReminderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*POSTUsersUsernameReminderResponse, error) {
	rsp, err := c.POSTUsersUsernameReminderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersUsernameReminderResponse(rsp)
}

func (c *ClientWithResponses) POSTUsersUsernameReminderWithResponse(ctx context.Context, body POSTUsersUsernameReminderJSONRequestBody, reqEditors ...RequestEditorFn) (*POSTUsersUsernameReminderResponse, error) {
	rsp, err := c.POSTUsersUsernameReminder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePOSTUsersUsernameReminderResponse(rsp)
}

// ParsePOSTAdminCycleCookieSecretResponse parses an HTTP response from a POSTAdminCycleCookieSecretWithResponse call
func ParsePOSTAdminCycleCookieSecretResponse(rsp *http.Response) (*POSTAdminCycleCookieSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTAdminCycleCookieSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePOSTAdminUsersStatusResponse parses an HTTP response from a POSTAdminUsersStatusWithResponse call
func ParsePOSTAdminUsersStatusResponse(rsp *http.Response) (*POSTAdminUsersStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTAdminUsersStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserStatusResponse `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserStatusResponse `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETAuditLogEntriesForHouseholdResponse parses an HTTP response from a GETAuditLogEntriesForHouseholdWithResponse call
func ParseGETAuditLogEntriesForHouseholdResponse(rsp *http.Response) (*GETAuditLogEntriesForHouseholdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETAuditLogEntriesForHouseholdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *AuditLogEntry   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *AuditLogEntry   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETAuditLogEntriesForUserResponse parses an HTTP response from a GETAuditLogEntriesForUserWithResponse call
func ParseGETAuditLogEntriesForUserResponse(rsp *http.Response) (*GETAuditLogEntriesForUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETAuditLogEntriesForUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *AuditLogEntry   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *AuditLogEntry   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETAuditLogEntriesAuditLogEntryIDResponse parses an HTTP response from a GETAuditLogEntriesAuditLogEntryIDWithResponse call
func ParseGETAuditLogEntriesAuditLogEntryIDResponse(rsp *http.Response) (*GETAuditLogEntriesAuditLogEntryIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETAuditLogEntriesAuditLogEntryIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *AuditLogEntry   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *AuditLogEntry   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETHouseholdInvitationsReceivedResponse parses an HTTP response from a GETHouseholdInvitationsReceivedWithResponse call
func ParseGETHouseholdInvitationsReceivedResponse(rsp *http.Response) (*GETHouseholdInvitationsReceivedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETHouseholdInvitationsReceivedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETHouseholdInvitationsSentResponse parses an HTTP response from a GETHouseholdInvitationsSentWithResponse call
func ParseGETHouseholdInvitationsSentResponse(rsp *http.Response) (*GETHouseholdInvitationsSentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETHouseholdInvitationsSentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETHouseholdInvitationsHouseholdInvitationIDResponse parses an HTTP response from a GETHouseholdInvitationsHouseholdInvitationIDWithResponse call
func ParseGETHouseholdInvitationsHouseholdInvitationIDResponse(rsp *http.Response) (*GETHouseholdInvitationsHouseholdInvitationIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETHouseholdInvitationsHouseholdInvitationIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTHouseholdInvitationsHouseholdInvitationIDAcceptResponse parses an HTTP response from a PUTHouseholdInvitationsHouseholdInvitationIDAcceptWithResponse call
func ParsePUTHouseholdInvitationsHouseholdInvitationIDAcceptResponse(rsp *http.Response) (*PUTHouseholdInvitationsHouseholdInvitationIDAcceptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTHouseholdInvitationsHouseholdInvitationIDAcceptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTHouseholdInvitationsHouseholdInvitationIDCancelResponse parses an HTTP response from a PUTHouseholdInvitationsHouseholdInvitationIDCancelWithResponse call
func ParsePUTHouseholdInvitationsHouseholdInvitationIDCancelResponse(rsp *http.Response) (*PUTHouseholdInvitationsHouseholdInvitationIDCancelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTHouseholdInvitationsHouseholdInvitationIDCancelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTHouseholdInvitationsHouseholdInvitationIDRejectResponse parses an HTTP response from a PUTHouseholdInvitationsHouseholdInvitationIDRejectWithResponse call
func ParsePUTHouseholdInvitationsHouseholdInvitationIDRejectResponse(rsp *http.Response) (*PUTHouseholdInvitationsHouseholdInvitationIDRejectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTHouseholdInvitationsHouseholdInvitationIDRejectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETHouseholdsResponse parses an HTTP response from a GETHouseholdsWithResponse call
func ParseGETHouseholdsResponse(rsp *http.Response) (*GETHouseholdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETHouseholdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Household     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Household     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTHouseholdsResponse parses an HTTP response from a POSTHouseholdsWithResponse call
func ParsePOSTHouseholdsResponse(rsp *http.Response) (*POSTHouseholdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTHouseholdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETHouseholdsCurrentResponse parses an HTTP response from a GETHouseholdsCurrentWithResponse call
func ParseGETHouseholdsCurrentResponse(rsp *http.Response) (*GETHouseholdsCurrentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETHouseholdsCurrentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETHouseholdsInstrumentsResponse parses an HTTP response from a GETHouseholdsInstrumentsWithResponse call
func ParseGETHouseholdsInstrumentsResponse(rsp *http.Response) (*GETHouseholdsInstrumentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETHouseholdsInstrumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]HouseholdInstrumentOwnership `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]HouseholdInstrumentOwnership `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTHouseholdsInstrumentsResponse parses an HTTP response from a POSTHouseholdsInstrumentsWithResponse call
func ParsePOSTHouseholdsInstrumentsResponse(rsp *http.Response) (*POSTHouseholdsInstrumentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTHouseholdsInstrumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse parses an HTTP response from a DELETEHouseholdsInstrumentsHouseholdInstrumentOwnershipIDWithResponse call
func ParseDELETEHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse(rsp *http.Response) (*DELETEHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse parses an HTTP response from a GETHouseholdsInstrumentsHouseholdInstrumentOwnershipIDWithResponse call
func ParseGETHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse(rsp *http.Response) (*GETHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse parses an HTTP response from a PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDWithResponse call
func ParsePUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse(rsp *http.Response) (*PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTHouseholdsInstrumentsHouseholdInstrumentOwnershipIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInstrumentOwnership `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEHouseholdsHouseholdIDResponse parses an HTTP response from a DELETEHouseholdsHouseholdIDWithResponse call
func ParseDELETEHouseholdsHouseholdIDResponse(rsp *http.Response) (*DELETEHouseholdsHouseholdIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEHouseholdsHouseholdIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETHouseholdsHouseholdIDResponse parses an HTTP response from a GETHouseholdsHouseholdIDWithResponse call
func ParseGETHouseholdsHouseholdIDResponse(rsp *http.Response) (*GETHouseholdsHouseholdIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETHouseholdsHouseholdIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTHouseholdsHouseholdIDResponse parses an HTTP response from a PUTHouseholdsHouseholdIDWithResponse call
func ParsePUTHouseholdsHouseholdIDResponse(rsp *http.Response) (*PUTHouseholdsHouseholdIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTHouseholdsHouseholdIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTHouseholdsHouseholdIDDefaultResponse parses an HTTP response from a POSTHouseholdsHouseholdIDDefaultWithResponse call
func ParsePOSTHouseholdsHouseholdIDDefaultResponse(rsp *http.Response) (*POSTHouseholdsHouseholdIDDefaultResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTHouseholdsHouseholdIDDefaultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTHouseholdsHouseholdIDInvitationsResponse parses an HTTP response from a POSTHouseholdsHouseholdIDInvitationsWithResponse call
func ParsePOSTHouseholdsHouseholdIDInvitationsResponse(rsp *http.Response) (*POSTHouseholdsHouseholdIDInvitationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTHouseholdsHouseholdIDInvitationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETHouseholdsHouseholdIDInvitationsHouseholdInvitationIDResponse parses an HTTP response from a GETHouseholdsHouseholdIDInvitationsHouseholdInvitationIDWithResponse call
func ParseGETHouseholdsHouseholdIDInvitationsHouseholdInvitationIDResponse(rsp *http.Response) (*GETHouseholdsHouseholdIDInvitationsHouseholdInvitationIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETHouseholdsHouseholdIDInvitationsHouseholdInvitationIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTHouseholdsHouseholdIDInviteResponse parses an HTTP response from a POSTHouseholdsHouseholdIDInviteWithResponse call
func ParsePOSTHouseholdsHouseholdIDInviteResponse(rsp *http.Response) (*POSTHouseholdsHouseholdIDInviteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTHouseholdsHouseholdIDInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *HouseholdInvitation `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEHouseholdsHouseholdIDMembersUserIDResponse parses an HTTP response from a DELETEHouseholdsHouseholdIDMembersUserIDWithResponse call
func ParseDELETEHouseholdsHouseholdIDMembersUserIDResponse(rsp *http.Response) (*DELETEHouseholdsHouseholdIDMembersUserIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEHouseholdsHouseholdIDMembersUserIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *HouseholdUserMembership `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *HouseholdUserMembership `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePATCHHouseholdsHouseholdIDMembersUserIDPermissionsResponse parses an HTTP response from a PATCHHouseholdsHouseholdIDMembersUserIDPermissionsWithResponse call
func ParsePATCHHouseholdsHouseholdIDMembersUserIDPermissionsResponse(rsp *http.Response) (*PATCHHouseholdsHouseholdIDMembersUserIDPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PATCHHouseholdsHouseholdIDMembersUserIDPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *UserPermissionsResponse `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *UserPermissionsResponse `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTHouseholdsHouseholdIDTransferResponse parses an HTTP response from a POSTHouseholdsHouseholdIDTransferWithResponse call
func ParsePOSTHouseholdsHouseholdIDTransferResponse(rsp *http.Response) (*POSTHouseholdsHouseholdIDTransferResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTHouseholdsHouseholdIDTransferResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETMealPlansResponse parses an HTTP response from a GETMealPlansWithResponse call
func ParseGETMealPlansResponse(rsp *http.Response) (*GETMealPlansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETMealPlansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]MealPlan      `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]MealPlan      `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTMealPlansResponse parses an HTTP response from a POSTMealPlansWithResponse call
func ParsePOSTMealPlansResponse(rsp *http.Response) (*POSTMealPlansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTMealPlansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *MealPlan        `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *MealPlan        `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEMealPlansMealPlanIDResponse parses an HTTP response from a DELETEMealPlansMealPlanIDWithResponse call
func ParseDELETEMealPlansMealPlanIDResponse(rsp *http.Response) (*DELETEMealPlansMealPlanIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEMealPlansMealPlanIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *MealPlan        `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *MealPlan        `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETMealPlansMealPlanIDResponse parses an HTTP response from a GETMealPlansMealPlanIDWithResponse call
func ParseGETMealPlansMealPlanIDResponse(rsp *http.Response) (*GETMealPlansMealPlanIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETMealPlansMealPlanIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlan        `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlan        `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTMealPlansMealPlanIDResponse parses an HTTP response from a PUTMealPlansMealPlanIDWithResponse call
func ParsePUTMealPlansMealPlanIDResponse(rsp *http.Response) (*PUTMealPlansMealPlanIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTMealPlansMealPlanIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlan        `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlan        `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETMealPlansMealPlanIDEventsResponse parses an HTTP response from a GETMealPlansMealPlanIDEventsWithResponse call
func ParseGETMealPlansMealPlanIDEventsResponse(rsp *http.Response) (*GETMealPlansMealPlanIDEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETMealPlansMealPlanIDEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]MealPlanEvent `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]MealPlanEvent `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTMealPlansMealPlanIDEventsResponse parses an HTTP response from a POSTMealPlansMealPlanIDEventsWithResponse call
func ParsePOSTMealPlansMealPlanIDEventsResponse(rsp *http.Response) (*POSTMealPlansMealPlanIDEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTMealPlansMealPlanIDEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *MealPlanEvent   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *MealPlanEvent   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEMealPlansMealPlanIDEventsMealPlanEventIDResponse parses an HTTP response from a DELETEMealPlansMealPlanIDEventsMealPlanEventIDWithResponse call
func ParseDELETEMealPlansMealPlanIDEventsMealPlanEventIDResponse(rsp *http.Response) (*DELETEMealPlansMealPlanIDEventsMealPlanEventIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEMealPlansMealPlanIDEventsMealPlanEventIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *MealPlanEvent   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *MealPlanEvent   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETMealPlansMealPlanIDEventsMealPlanEventIDResponse parses an HTTP response from a GETMealPlansMealPlanIDEventsMealPlanEventIDWithResponse call
func ParseGETMealPlansMealPlanIDEventsMealPlanEventIDResponse(rsp *http.Response) (*GETMealPlansMealPlanIDEventsMealPlanEventIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETMealPlansMealPlanIDEventsMealPlanEventIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanEvent   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanEvent   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTMealPlansMealPlanIDEventsMealPlanEventIDResponse parses an HTTP response from a PUTMealPlansMealPlanIDEventsMealPlanEventIDWithResponse call
func ParsePUTMealPlansMealPlanIDEventsMealPlanEventIDResponse(rsp *http.Response) (*PUTMealPlansMealPlanIDEventsMealPlanEventIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTMealPlansMealPlanIDEventsMealPlanEventIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanEvent   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanEvent   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETMealPlansMealPlanIDEventsMealPlanEventIDOptionsResponse parses an HTTP response from a GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsWithResponse call
func ParseGETMealPlansMealPlanIDEventsMealPlanEventIDOptionsResponse(rsp *http.Response) (*GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]MealPlanOption `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]MealPlanOption `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsResponse parses an HTTP response from a POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsWithResponse call
func ParsePOSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsResponse(rsp *http.Response) (*POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTMealPlansMealPlanIDEventsMealPlanEventIDOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *MealPlanOption  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *MealPlanOption  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse parses an HTTP response from a DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDWithResponse call
func ParseDELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse(rsp *http.Response) (*DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *MealPlanOption  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *MealPlanOption  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse parses an HTTP response from a GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDWithResponse call
func ParseGETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse(rsp *http.Response) (*GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanOption  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanOption  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse parses an HTTP response from a PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDWithResponse call
func ParsePUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse(rsp *http.Response) (*PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanOption  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanOption  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesResponse parses an HTTP response from a GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesWithResponse call
func ParseGETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesResponse(rsp *http.Response) (*GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]MealPlanOptionVote `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]MealPlanOptionVote `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse parses an HTTP response from a DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDWithResponse call
func ParseDELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse(rsp *http.Response) (*DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *MealPlanOptionVote `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *MealPlanOptionVote `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse parses an HTTP response from a GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDWithResponse call
func ParseGETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse(rsp *http.Response) (*GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanOptionVote `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanOptionVote `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse parses an HTTP response from a PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDWithResponse call
func ParsePUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse(rsp *http.Response) (*PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTMealPlansMealPlanIDEventsMealPlanEventIDOptionsMealPlanOptionIDVotesMealPlanOptionVoteIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanOptionVote `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanOptionVote `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTMealPlansMealPlanIDEventsMealPlanEventIDVoteResponse parses an HTTP response from a POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteWithResponse call
func ParsePOSTMealPlansMealPlanIDEventsMealPlanEventIDVoteResponse(rsp *http.Response) (*POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTMealPlansMealPlanIDEventsMealPlanEventIDVoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *MealPlanOptionVote `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *MealPlanOptionVote `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTMealPlansMealPlanIDFinalizeResponse parses an HTTP response from a POSTMealPlansMealPlanIDFinalizeWithResponse call
func ParsePOSTMealPlansMealPlanIDFinalizeResponse(rsp *http.Response) (*POSTMealPlansMealPlanIDFinalizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTMealPlansMealPlanIDFinalizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *FinalizeMealPlansResponse `json:"data,omitempty"`
			Details    *ResponseDetails           `json:"details,omitempty"`
			Error      *APIError                  `json:"error,omitempty"`
			Pagination *Pagination                `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *FinalizeMealPlansResponse `json:"data,omitempty"`
			Details    *ResponseDetails           `json:"details,omitempty"`
			Error      *APIError                  `json:"error,omitempty"`
			Pagination *Pagination                `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETMealPlansMealPlanIDGroceryListItemsResponse parses an HTTP response from a GETMealPlansMealPlanIDGroceryListItemsWithResponse call
func ParseGETMealPlansMealPlanIDGroceryListItemsResponse(rsp *http.Response) (*GETMealPlansMealPlanIDGroceryListItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETMealPlansMealPlanIDGroceryListItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]MealPlanGroceryListItem `json:"data,omitempty"`
			Details    *ResponseDetails           `json:"details,omitempty"`
			Error      *APIError                  `json:"error,omitempty"`
			Pagination *Pagination                `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]MealPlanGroceryListItem `json:"data,omitempty"`
			Details    *ResponseDetails           `json:"details,omitempty"`
			Error      *APIError                  `json:"error,omitempty"`
			Pagination *Pagination                `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTMealPlansMealPlanIDGroceryListItemsResponse parses an HTTP response from a POSTMealPlansMealPlanIDGroceryListItemsWithResponse call
func ParsePOSTMealPlansMealPlanIDGroceryListItemsResponse(rsp *http.Response) (*POSTMealPlansMealPlanIDGroceryListItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTMealPlansMealPlanIDGroceryListItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *MealPlanGroceryListItem `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *MealPlanGroceryListItem `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse parses an HTTP response from a DELETEMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDWithResponse call
func ParseDELETEMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse(rsp *http.Response) (*DELETEMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *MealPlanGroceryListItem `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *MealPlanGroceryListItem `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse parses an HTTP response from a GETMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDWithResponse call
func ParseGETMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse(rsp *http.Response) (*GETMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanGroceryListItem `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanGroceryListItem `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse parses an HTTP response from a PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDWithResponse call
func ParsePUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse(rsp *http.Response) (*PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTMealPlansMealPlanIDGroceryListItemsMealPlanGroceryListItemIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanGroceryListItem `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanGroceryListItem `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETMealPlansMealPlanIDTasksResponse parses an HTTP response from a GETMealPlansMealPlanIDTasksWithResponse call
func ParseGETMealPlansMealPlanIDTasksResponse(rsp *http.Response) (*GETMealPlansMealPlanIDTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETMealPlansMealPlanIDTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]MealPlanTask  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]MealPlanTask  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTMealPlansMealPlanIDTasksResponse parses an HTTP response from a POSTMealPlansMealPlanIDTasksWithResponse call
func ParsePOSTMealPlansMealPlanIDTasksResponse(rsp *http.Response) (*POSTMealPlansMealPlanIDTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTMealPlansMealPlanIDTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *MealPlanTask    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *MealPlanTask    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETMealPlansMealPlanIDTasksMealPlanTaskIDResponse parses an HTTP response from a GETMealPlansMealPlanIDTasksMealPlanTaskIDWithResponse call
func ParseGETMealPlansMealPlanIDTasksMealPlanTaskIDResponse(rsp *http.Response) (*GETMealPlansMealPlanIDTasksMealPlanTaskIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETMealPlansMealPlanIDTasksMealPlanTaskIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanTask    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanTask    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePATCHMealPlansMealPlanIDTasksMealPlanTaskIDResponse parses an HTTP response from a PATCHMealPlansMealPlanIDTasksMealPlanTaskIDWithResponse call
func ParsePATCHMealPlansMealPlanIDTasksMealPlanTaskIDResponse(rsp *http.Response) (*PATCHMealPlansMealPlanIDTasksMealPlanTaskIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PATCHMealPlansMealPlanIDTasksMealPlanTaskIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanTask    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *MealPlanTask    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETMealsResponse parses an HTTP response from a GETMealsWithResponse call
func ParseGETMealsResponse(rsp *http.Response) (*GETMealsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETMealsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Meal          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Meal          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTMealsResponse parses an HTTP response from a POSTMealsWithResponse call
func ParsePOSTMealsResponse(rsp *http.Response) (*POSTMealsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTMealsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Meal            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Meal            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETMealsSearchResponse parses an HTTP response from a GETMealsSearchWithResponse call
func ParseGETMealsSearchResponse(rsp *http.Response) (*GETMealsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETMealsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Meal            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Meal            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEMealsMealIDResponse parses an HTTP response from a DELETEMealsMealIDWithResponse call
func ParseDELETEMealsMealIDResponse(rsp *http.Response) (*DELETEMealsMealIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEMealsMealIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *Meal            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *Meal            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETMealsMealIDResponse parses an HTTP response from a GETMealsMealIDWithResponse call
func ParseGETMealsMealIDResponse(rsp *http.Response) (*GETMealsMealIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETMealsMealIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Meal            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Meal            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETOauth2ClientsResponse parses an HTTP response from a GETOauth2ClientsWithResponse call
func ParseGETOauth2ClientsResponse(rsp *http.Response) (*GETOauth2ClientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETOauth2ClientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]OAuth2Client  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]OAuth2Client  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTOauth2ClientsResponse parses an HTTP response from a POSTOauth2ClientsWithResponse call
func ParsePOSTOauth2ClientsResponse(rsp *http.Response) (*POSTOauth2ClientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTOauth2ClientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *OAuth2ClientCreationResponse `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *OAuth2ClientCreationResponse `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEOauth2ClientsOauth2ClientIDResponse parses an HTTP response from a DELETEOauth2ClientsOauth2ClientIDWithResponse call
func ParseDELETEOauth2ClientsOauth2ClientIDResponse(rsp *http.Response) (*DELETEOauth2ClientsOauth2ClientIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEOauth2ClientsOauth2ClientIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *OAuth2Client    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *OAuth2Client    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETOauth2ClientsOauth2ClientIDResponse parses an HTTP response from a GETOauth2ClientsOauth2ClientIDWithResponse call
func ParseGETOauth2ClientsOauth2ClientIDResponse(rsp *http.Response) (*GETOauth2ClientsOauth2ClientIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETOauth2ClientsOauth2ClientIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *OAuth2Client    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *OAuth2Client    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETRecipesResponse parses an HTTP response from a GETRecipesWithResponse call
func ParseGETRecipesResponse(rsp *http.Response) (*GETRecipesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETRecipesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Recipe        `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Recipe        `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTRecipesResponse parses an HTTP response from a POSTRecipesWithResponse call
func ParsePOSTRecipesResponse(rsp *http.Response) (*POSTRecipesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTRecipesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Recipe          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Recipe          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETRecipesSearchResponse parses an HTTP response from a GETRecipesSearchWithResponse call
func ParseGETRecipesSearchResponse(rsp *http.Response) (*GETRecipesSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETRecipesSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Recipe          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Recipe          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETERecipesRecipeIDResponse parses an HTTP response from a DELETERecipesRecipeIDWithResponse call
func ParseDELETERecipesRecipeIDResponse(rsp *http.Response) (*DELETERecipesRecipeIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETERecipesRecipeIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *Recipe          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *Recipe          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETRecipesRecipeIDResponse parses an HTTP response from a GETRecipesRecipeIDWithResponse call
func ParseGETRecipesRecipeIDResponse(rsp *http.Response) (*GETRecipesRecipeIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETRecipesRecipeIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Recipe          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Recipe          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTRecipesRecipeIDResponse parses an HTTP response from a PUTRecipesRecipeIDWithResponse call
func ParsePUTRecipesRecipeIDResponse(rsp *http.Response) (*PUTRecipesRecipeIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTRecipesRecipeIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Recipe          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Recipe          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTRecipesRecipeIDCloneResponse parses an HTTP response from a POSTRecipesRecipeIDCloneWithResponse call
func ParsePOSTRecipesRecipeIDCloneResponse(rsp *http.Response) (*POSTRecipesRecipeIDCloneResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTRecipesRecipeIDCloneResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Recipe          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Recipe          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETRecipesRecipeIDDagResponse parses an HTTP response from a GETRecipesRecipeIDDagWithResponse call
func ParseGETRecipesRecipeIDDagResponse(rsp *http.Response) (*GETRecipesRecipeIDDagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETRecipesRecipeIDDagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *APIError        `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *APIError        `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTRecipesRecipeIDImagesResponse parses an HTTP response from a POSTRecipesRecipeIDImagesWithResponse call
func ParsePOSTRecipesRecipeIDImagesResponse(rsp *http.Response) (*POSTRecipesRecipeIDImagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTRecipesRecipeIDImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGETRecipesRecipeIDMermaidResponse parses an HTTP response from a GETRecipesRecipeIDMermaidWithResponse call
func ParseGETRecipesRecipeIDMermaidResponse(rsp *http.Response) (*GETRecipesRecipeIDMermaidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETRecipesRecipeIDMermaidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGETRecipesRecipeIDPrepStepsResponse parses an HTTP response from a GETRecipesRecipeIDPrepStepsWithResponse call
func ParseGETRecipesRecipeIDPrepStepsResponse(rsp *http.Response) (*GETRecipesRecipeIDPrepStepsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETRecipesRecipeIDPrepStepsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipePrepTaskStep `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipePrepTaskStep `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETRecipesRecipeIDPrepTasksResponse parses an HTTP response from a GETRecipesRecipeIDPrepTasksWithResponse call
func ParseGETRecipesRecipeIDPrepTasksResponse(rsp *http.Response) (*GETRecipesRecipeIDPrepTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETRecipesRecipeIDPrepTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipePrepTask `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipePrepTask `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTRecipesRecipeIDPrepTasksResponse parses an HTTP response from a POSTRecipesRecipeIDPrepTasksWithResponse call
func ParsePOSTRecipesRecipeIDPrepTasksResponse(rsp *http.Response) (*POSTRecipesRecipeIDPrepTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTRecipesRecipeIDPrepTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipePrepTask  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipePrepTask  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETERecipesRecipeIDPrepTasksRecipePrepTaskIDResponse parses an HTTP response from a DELETERecipesRecipeIDPrepTasksRecipePrepTaskIDWithResponse call
func ParseDELETERecipesRecipeIDPrepTasksRecipePrepTaskIDResponse(rsp *http.Response) (*DELETERecipesRecipeIDPrepTasksRecipePrepTaskIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETERecipesRecipeIDPrepTasksRecipePrepTaskIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipePrepTask  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipePrepTask  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETRecipesRecipeIDPrepTasksRecipePrepTaskIDResponse parses an HTTP response from a GETRecipesRecipeIDPrepTasksRecipePrepTaskIDWithResponse call
func ParseGETRecipesRecipeIDPrepTasksRecipePrepTaskIDResponse(rsp *http.Response) (*GETRecipesRecipeIDPrepTasksRecipePrepTaskIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETRecipesRecipeIDPrepTasksRecipePrepTaskIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipePrepTask  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipePrepTask  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTRecipesRecipeIDPrepTasksRecipePrepTaskIDResponse parses an HTTP response from a PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDWithResponse call
func ParsePUTRecipesRecipeIDPrepTasksRecipePrepTaskIDResponse(rsp *http.Response) (*PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTRecipesRecipeIDPrepTasksRecipePrepTaskIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipePrepTask  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipePrepTask  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETRecipesRecipeIDRatingsResponse parses an HTTP response from a GETRecipesRecipeIDRatingsWithResponse call
func ParseGETRecipesRecipeIDRatingsResponse(rsp *http.Response) (*GETRecipesRecipeIDRatingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETRecipesRecipeIDRatingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeRating  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeRating  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTRecipesRecipeIDRatingsResponse parses an HTTP response from a POSTRecipesRecipeIDRatingsWithResponse call
func ParsePOSTRecipesRecipeIDRatingsResponse(rsp *http.Response) (*POSTRecipesRecipeIDRatingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTRecipesRecipeIDRatingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeRating    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeRating    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETERecipesRecipeIDRatingsRecipeRatingIDResponse parses an HTTP response from a DELETERecipesRecipeIDRatingsRecipeRatingIDWithResponse call
func ParseDELETERecipesRecipeIDRatingsRecipeRatingIDResponse(rsp *http.Response) (*DELETERecipesRecipeIDRatingsRecipeRatingIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETERecipesRecipeIDRatingsRecipeRatingIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeRating    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeRating    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETRecipesRecipeIDRatingsRecipeRatingIDResponse parses an HTTP response from a GETRecipesRecipeIDRatingsRecipeRatingIDWithResponse call
func ParseGETRecipesRecipeIDRatingsRecipeRatingIDResponse(rsp *http.Response) (*GETRecipesRecipeIDRatingsRecipeRatingIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETRecipesRecipeIDRatingsRecipeRatingIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeRating    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeRating    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTRecipesRecipeIDRatingsRecipeRatingIDResponse parses an HTTP response from a PUTRecipesRecipeIDRatingsRecipeRatingIDWithResponse call
func ParsePUTRecipesRecipeIDRatingsRecipeRatingIDResponse(rsp *http.Response) (*PUTRecipesRecipeIDRatingsRecipeRatingIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTRecipesRecipeIDRatingsRecipeRatingIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeRating    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeRating    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETRecipesRecipeIDStepsResponse parses an HTTP response from a GETRecipesRecipeIDStepsWithResponse call
func ParseGETRecipesRecipeIDStepsResponse(rsp *http.Response) (*GETRecipesRecipeIDStepsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETRecipesRecipeIDStepsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeStep    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeStep    `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTRecipesRecipeIDStepsResponse parses an HTTP response from a POSTRecipesRecipeIDStepsWithResponse call
func ParsePOSTRecipesRecipeIDStepsResponse(rsp *http.Response) (*POSTRecipesRecipeIDStepsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTRecipesRecipeIDStepsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeStep      `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeStep      `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETERecipesRecipeIDStepsRecipeStepIDResponse parses an HTTP response from a DELETERecipesRecipeIDStepsRecipeStepIDWithResponse call
func ParseDELETERecipesRecipeIDStepsRecipeStepIDResponse(rsp *http.Response) (*DELETERecipesRecipeIDStepsRecipeStepIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETERecipesRecipeIDStepsRecipeStepIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeStep      `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeStep      `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETRecipesRecipeIDStepsRecipeStepIDResponse parses an HTTP response from a GETRecipesRecipeIDStepsRecipeStepIDWithResponse call
func ParseGETRecipesRecipeIDStepsRecipeStepIDResponse(rsp *http.Response) (*GETRecipesRecipeIDStepsRecipeStepIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETRecipesRecipeIDStepsRecipeStepIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStep      `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStep      `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTRecipesRecipeIDStepsRecipeStepIDResponse parses an HTTP response from a PUTRecipesRecipeIDStepsRecipeStepIDWithResponse call
func ParsePUTRecipesRecipeIDStepsRecipeStepIDResponse(rsp *http.Response) (*PUTRecipesRecipeIDStepsRecipeStepIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTRecipesRecipeIDStepsRecipeStepIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStep      `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStep      `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsResponse parses an HTTP response from a GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsWithResponse call
func ParseGETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsResponse(rsp *http.Response) (*GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeStepCompletionCondition `json:"data,omitempty"`
			Details    *ResponseDetails                 `json:"details,omitempty"`
			Error      *APIError                        `json:"error,omitempty"`
			Pagination *Pagination                      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeStepCompletionCondition `json:"data,omitempty"`
			Details    *ResponseDetails                 `json:"details,omitempty"`
			Error      *APIError                        `json:"error,omitempty"`
			Pagination *Pagination                      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsResponse parses an HTTP response from a POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsWithResponse call
func ParsePOSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsResponse(rsp *http.Response) (*POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
			Details    *ResponseDetails               `json:"details,omitempty"`
			Error      *APIError                      `json:"error,omitempty"`
			Pagination *Pagination                    `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
			Details    *ResponseDetails               `json:"details,omitempty"`
			Error      *APIError                      `json:"error,omitempty"`
			Pagination *Pagination                    `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETERecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse parses an HTTP response from a DELETERecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDWithResponse call
func ParseDELETERecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse(rsp *http.Response) (*DELETERecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETERecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
			Details    *ResponseDetails               `json:"details,omitempty"`
			Error      *APIError                      `json:"error,omitempty"`
			Pagination *Pagination                    `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
			Details    *ResponseDetails               `json:"details,omitempty"`
			Error      *APIError                      `json:"error,omitempty"`
			Pagination *Pagination                    `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse parses an HTTP response from a GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDWithResponse call
func ParseGETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse(rsp *http.Response) (*GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
			Details    *ResponseDetails               `json:"details,omitempty"`
			Error      *APIError                      `json:"error,omitempty"`
			Pagination *Pagination                    `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
			Details    *ResponseDetails               `json:"details,omitempty"`
			Error      *APIError                      `json:"error,omitempty"`
			Pagination *Pagination                    `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse parses an HTTP response from a PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDWithResponse call
func ParsePUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse(rsp *http.Response) (*PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTRecipesRecipeIDStepsRecipeStepIDCompletionConditionsRecipeStepCompletionConditionIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
			Details    *ResponseDetails               `json:"details,omitempty"`
			Error      *APIError                      `json:"error,omitempty"`
			Pagination *Pagination                    `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepCompletionCondition `json:"data,omitempty"`
			Details    *ResponseDetails               `json:"details,omitempty"`
			Error      *APIError                      `json:"error,omitempty"`
			Pagination *Pagination                    `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTRecipesRecipeIDStepsRecipeStepIDImagesResponse parses an HTTP response from a POSTRecipesRecipeIDStepsRecipeStepIDImagesWithResponse call
func ParsePOSTRecipesRecipeIDStepsRecipeStepIDImagesResponse(rsp *http.Response) (*POSTRecipesRecipeIDStepsRecipeStepIDImagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTRecipesRecipeIDStepsRecipeStepIDImagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGETRecipesRecipeIDStepsRecipeStepIDIngredientsResponse parses an HTTP response from a GETRecipesRecipeIDStepsRecipeStepIDIngredientsWithResponse call
func ParseGETRecipesRecipeIDStepsRecipeStepIDIngredientsResponse(rsp *http.Response) (*GETRecipesRecipeIDStepsRecipeStepIDIngredientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETRecipesRecipeIDStepsRecipeStepIDIngredientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeStepIngredient `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeStepIngredient `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTRecipesRecipeIDStepsRecipeStepIDIngredientsResponse parses an HTTP response from a POSTRecipesRecipeIDStepsRecipeStepIDIngredientsWithResponse call
func ParsePOSTRecipesRecipeIDStepsRecipeStepIDIngredientsResponse(rsp *http.Response) (*POSTRecipesRecipeIDStepsRecipeStepIDIngredientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTRecipesRecipeIDStepsRecipeStepIDIngredientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeStepIngredient `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeStepIngredient `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETERecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse parses an HTTP response from a DELETERecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDWithResponse call
func ParseDELETERecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse(rsp *http.Response) (*DELETERecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETERecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeStepIngredient `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeStepIngredient `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse parses an HTTP response from a GETRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDWithResponse call
func ParseGETRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse(rsp *http.Response) (*GETRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepIngredient `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepIngredient `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse parses an HTTP response from a PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDWithResponse call
func ParsePUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse(rsp *http.Response) (*PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTRecipesRecipeIDStepsRecipeStepIDIngredientsRecipeStepIngredientIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepIngredient `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepIngredient `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETRecipesRecipeIDStepsRecipeStepIDInstrumentsResponse parses an HTTP response from a GETRecipesRecipeIDStepsRecipeStepIDInstrumentsWithResponse call
func ParseGETRecipesRecipeIDStepsRecipeStepIDInstrumentsResponse(rsp *http.Response) (*GETRecipesRecipeIDStepsRecipeStepIDInstrumentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETRecipesRecipeIDStepsRecipeStepIDInstrumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeStepInstrument `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeStepInstrument `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTRecipesRecipeIDStepsRecipeStepIDInstrumentsResponse parses an HTTP response from a POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsWithResponse call
func ParsePOSTRecipesRecipeIDStepsRecipeStepIDInstrumentsResponse(rsp *http.Response) (*POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTRecipesRecipeIDStepsRecipeStepIDInstrumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeStepInstrument `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeStepInstrument `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETERecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse parses an HTTP response from a DELETERecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDWithResponse call
func ParseDELETERecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse(rsp *http.Response) (*DELETERecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETERecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeStepInstrument `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeStepInstrument `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse parses an HTTP response from a GETRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDWithResponse call
func ParseGETRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse(rsp *http.Response) (*GETRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepInstrument `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepInstrument `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse parses an HTTP response from a PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDWithResponse call
func ParsePUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse(rsp *http.Response) (*PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTRecipesRecipeIDStepsRecipeStepIDInstrumentsRecipeStepInstrumentIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepInstrument `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepInstrument `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETRecipesRecipeIDStepsRecipeStepIDProductsResponse parses an HTTP response from a GETRecipesRecipeIDStepsRecipeStepIDProductsWithResponse call
func ParseGETRecipesRecipeIDStepsRecipeStepIDProductsResponse(rsp *http.Response) (*GETRecipesRecipeIDStepsRecipeStepIDProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETRecipesRecipeIDStepsRecipeStepIDProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeStepProduct `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeStepProduct `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTRecipesRecipeIDStepsRecipeStepIDProductsResponse parses an HTTP response from a POSTRecipesRecipeIDStepsRecipeStepIDProductsWithResponse call
func ParsePOSTRecipesRecipeIDStepsRecipeStepIDProductsResponse(rsp *http.Response) (*POSTRecipesRecipeIDStepsRecipeStepIDProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTRecipesRecipeIDStepsRecipeStepIDProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeStepProduct `json:"data,omitempty"`
			Details    *ResponseDetails   `json:"details,omitempty"`
			Error      *APIError          `json:"error,omitempty"`
			Pagination *Pagination        `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeStepProduct `json:"data,omitempty"`
			Details    *ResponseDetails   `json:"details,omitempty"`
			Error      *APIError          `json:"error,omitempty"`
			Pagination *Pagination        `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETERecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse parses an HTTP response from a DELETERecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDWithResponse call
func ParseDELETERecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse(rsp *http.Response) (*DELETERecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETERecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeStepProduct `json:"data,omitempty"`
			Details    *ResponseDetails   `json:"details,omitempty"`
			Error      *APIError          `json:"error,omitempty"`
			Pagination *Pagination        `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeStepProduct `json:"data,omitempty"`
			Details    *ResponseDetails   `json:"details,omitempty"`
			Error      *APIError          `json:"error,omitempty"`
			Pagination *Pagination        `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse parses an HTTP response from a GETRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDWithResponse call
func ParseGETRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse(rsp *http.Response) (*GETRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepProduct `json:"data,omitempty"`
			Details    *ResponseDetails   `json:"details,omitempty"`
			Error      *APIError          `json:"error,omitempty"`
			Pagination *Pagination        `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepProduct `json:"data,omitempty"`
			Details    *ResponseDetails   `json:"details,omitempty"`
			Error      *APIError          `json:"error,omitempty"`
			Pagination *Pagination        `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse parses an HTTP response from a PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDWithResponse call
func ParsePUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse(rsp *http.Response) (*PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTRecipesRecipeIDStepsRecipeStepIDProductsRecipeStepProductIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepProduct `json:"data,omitempty"`
			Details    *ResponseDetails   `json:"details,omitempty"`
			Error      *APIError          `json:"error,omitempty"`
			Pagination *Pagination        `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepProduct `json:"data,omitempty"`
			Details    *ResponseDetails   `json:"details,omitempty"`
			Error      *APIError          `json:"error,omitempty"`
			Pagination *Pagination        `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETRecipesRecipeIDStepsRecipeStepIDVesselsResponse parses an HTTP response from a GETRecipesRecipeIDStepsRecipeStepIDVesselsWithResponse call
func ParseGETRecipesRecipeIDStepsRecipeStepIDVesselsResponse(rsp *http.Response) (*GETRecipesRecipeIDStepsRecipeStepIDVesselsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETRecipesRecipeIDStepsRecipeStepIDVesselsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeStepVessel `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]RecipeStepVessel `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTRecipesRecipeIDStepsRecipeStepIDVesselsResponse parses an HTTP response from a POSTRecipesRecipeIDStepsRecipeStepIDVesselsWithResponse call
func ParsePOSTRecipesRecipeIDStepsRecipeStepIDVesselsResponse(rsp *http.Response) (*POSTRecipesRecipeIDStepsRecipeStepIDVesselsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTRecipesRecipeIDStepsRecipeStepIDVesselsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeStepVessel `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *RecipeStepVessel `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETERecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse parses an HTTP response from a DELETERecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDWithResponse call
func ParseDELETERecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse(rsp *http.Response) (*DELETERecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETERecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeStepVessel `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *RecipeStepVessel `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse parses an HTTP response from a GETRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDWithResponse call
func ParseGETRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse(rsp *http.Response) (*GETRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepVessel `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepVessel `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse parses an HTTP response from a PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDWithResponse call
func ParsePUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse(rsp *http.Response) (*PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTRecipesRecipeIDStepsRecipeStepIDVesselsRecipeStepVesselIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepVessel `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *RecipeStepVessel `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETSettingsResponse parses an HTTP response from a GETSettingsWithResponse call
func ParseGETSettingsResponse(rsp *http.Response) (*GETSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ServiceSetting `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ServiceSetting `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTSettingsResponse parses an HTTP response from a POSTSettingsWithResponse call
func ParsePOSTSettingsResponse(rsp *http.Response) (*POSTSettingsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTSettingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ServiceSetting  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ServiceSetting  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTSettingsConfigurationsResponse parses an HTTP response from a POSTSettingsConfigurationsWithResponse call
func ParsePOSTSettingsConfigurationsResponse(rsp *http.Response) (*POSTSettingsConfigurationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTSettingsConfigurationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ServiceSettingConfiguration `json:"data,omitempty"`
			Details    *ResponseDetails             `json:"details,omitempty"`
			Error      *APIError                    `json:"error,omitempty"`
			Pagination *Pagination                  `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ServiceSettingConfiguration `json:"data,omitempty"`
			Details    *ResponseDetails             `json:"details,omitempty"`
			Error      *APIError                    `json:"error,omitempty"`
			Pagination *Pagination                  `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETSettingsConfigurationsHouseholdResponse parses an HTTP response from a GETSettingsConfigurationsHouseholdWithResponse call
func ParseGETSettingsConfigurationsHouseholdResponse(rsp *http.Response) (*GETSettingsConfigurationsHouseholdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETSettingsConfigurationsHouseholdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ServiceSettingConfiguration `json:"data,omitempty"`
			Details    *ResponseDetails             `json:"details,omitempty"`
			Error      *APIError                    `json:"error,omitempty"`
			Pagination *Pagination                  `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ServiceSettingConfiguration `json:"data,omitempty"`
			Details    *ResponseDetails             `json:"details,omitempty"`
			Error      *APIError                    `json:"error,omitempty"`
			Pagination *Pagination                  `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETSettingsConfigurationsUserResponse parses an HTTP response from a GETSettingsConfigurationsUserWithResponse call
func ParseGETSettingsConfigurationsUserResponse(rsp *http.Response) (*GETSettingsConfigurationsUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETSettingsConfigurationsUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ServiceSettingConfiguration `json:"data,omitempty"`
			Details    *ResponseDetails             `json:"details,omitempty"`
			Error      *APIError                    `json:"error,omitempty"`
			Pagination *Pagination                  `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ServiceSettingConfiguration `json:"data,omitempty"`
			Details    *ResponseDetails             `json:"details,omitempty"`
			Error      *APIError                    `json:"error,omitempty"`
			Pagination *Pagination                  `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETSettingsConfigurationsUserServiceSettingConfigurationNameResponse parses an HTTP response from a GETSettingsConfigurationsUserServiceSettingConfigurationNameWithResponse call
func ParseGETSettingsConfigurationsUserServiceSettingConfigurationNameResponse(rsp *http.Response) (*GETSettingsConfigurationsUserServiceSettingConfigurationNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETSettingsConfigurationsUserServiceSettingConfigurationNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ServiceSettingConfiguration `json:"data,omitempty"`
			Details    *ResponseDetails             `json:"details,omitempty"`
			Error      *APIError                    `json:"error,omitempty"`
			Pagination *Pagination                  `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ServiceSettingConfiguration `json:"data,omitempty"`
			Details    *ResponseDetails             `json:"details,omitempty"`
			Error      *APIError                    `json:"error,omitempty"`
			Pagination *Pagination                  `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETESettingsConfigurationsServiceSettingConfigurationIDResponse parses an HTTP response from a DELETESettingsConfigurationsServiceSettingConfigurationIDWithResponse call
func ParseDELETESettingsConfigurationsServiceSettingConfigurationIDResponse(rsp *http.Response) (*DELETESettingsConfigurationsServiceSettingConfigurationIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETESettingsConfigurationsServiceSettingConfigurationIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ServiceSettingConfiguration `json:"data,omitempty"`
			Details    *ResponseDetails             `json:"details,omitempty"`
			Error      *APIError                    `json:"error,omitempty"`
			Pagination *Pagination                  `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ServiceSettingConfiguration `json:"data,omitempty"`
			Details    *ResponseDetails             `json:"details,omitempty"`
			Error      *APIError                    `json:"error,omitempty"`
			Pagination *Pagination                  `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTSettingsConfigurationsServiceSettingConfigurationIDResponse parses an HTTP response from a PUTSettingsConfigurationsServiceSettingConfigurationIDWithResponse call
func ParsePUTSettingsConfigurationsServiceSettingConfigurationIDResponse(rsp *http.Response) (*PUTSettingsConfigurationsServiceSettingConfigurationIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTSettingsConfigurationsServiceSettingConfigurationIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ServiceSettingConfiguration `json:"data,omitempty"`
			Details    *ResponseDetails             `json:"details,omitempty"`
			Error      *APIError                    `json:"error,omitempty"`
			Pagination *Pagination                  `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ServiceSettingConfiguration `json:"data,omitempty"`
			Details    *ResponseDetails             `json:"details,omitempty"`
			Error      *APIError                    `json:"error,omitempty"`
			Pagination *Pagination                  `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETSettingsSearchResponse parses an HTTP response from a GETSettingsSearchWithResponse call
func ParseGETSettingsSearchResponse(rsp *http.Response) (*GETSettingsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETSettingsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ServiceSetting  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ServiceSetting  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETESettingsServiceSettingIDResponse parses an HTTP response from a DELETESettingsServiceSettingIDWithResponse call
func ParseDELETESettingsServiceSettingIDResponse(rsp *http.Response) (*DELETESettingsServiceSettingIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETESettingsServiceSettingIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ServiceSetting  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ServiceSetting  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETSettingsServiceSettingIDResponse parses an HTTP response from a GETSettingsServiceSettingIDWithResponse call
func ParseGETSettingsServiceSettingIDResponse(rsp *http.Response) (*GETSettingsServiceSettingIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETSettingsServiceSettingIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ServiceSetting  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ServiceSetting  `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETUserIngredientPreferencesResponse parses an HTTP response from a GETUserIngredientPreferencesWithResponse call
func ParseGETUserIngredientPreferencesResponse(rsp *http.Response) (*GETUserIngredientPreferencesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETUserIngredientPreferencesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]UserIngredientPreference `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]UserIngredientPreference `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTUserIngredientPreferencesResponse parses an HTTP response from a POSTUserIngredientPreferencesWithResponse call
func ParsePOSTUserIngredientPreferencesResponse(rsp *http.Response) (*POSTUserIngredientPreferencesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTUserIngredientPreferencesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserIngredientPreference `json:"data,omitempty"`
			Details    *ResponseDetails          `json:"details,omitempty"`
			Error      *APIError                 `json:"error,omitempty"`
			Pagination *Pagination               `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserIngredientPreference `json:"data,omitempty"`
			Details    *ResponseDetails          `json:"details,omitempty"`
			Error      *APIError                 `json:"error,omitempty"`
			Pagination *Pagination               `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEUserIngredientPreferencesUserIngredientPreferenceIDResponse parses an HTTP response from a DELETEUserIngredientPreferencesUserIngredientPreferenceIDWithResponse call
func ParseDELETEUserIngredientPreferencesUserIngredientPreferenceIDResponse(rsp *http.Response) (*DELETEUserIngredientPreferencesUserIngredientPreferenceIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEUserIngredientPreferencesUserIngredientPreferenceIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *UserIngredientPreference `json:"data,omitempty"`
			Details    *ResponseDetails          `json:"details,omitempty"`
			Error      *APIError                 `json:"error,omitempty"`
			Pagination *Pagination               `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *UserIngredientPreference `json:"data,omitempty"`
			Details    *ResponseDetails          `json:"details,omitempty"`
			Error      *APIError                 `json:"error,omitempty"`
			Pagination *Pagination               `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTUserIngredientPreferencesUserIngredientPreferenceIDResponse parses an HTTP response from a PUTUserIngredientPreferencesUserIngredientPreferenceIDWithResponse call
func ParsePUTUserIngredientPreferencesUserIngredientPreferenceIDResponse(rsp *http.Response) (*PUTUserIngredientPreferencesUserIngredientPreferenceIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTUserIngredientPreferencesUserIngredientPreferenceIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *UserIngredientPreference `json:"data,omitempty"`
			Details    *ResponseDetails          `json:"details,omitempty"`
			Error      *APIError                 `json:"error,omitempty"`
			Pagination *Pagination               `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *UserIngredientPreference `json:"data,omitempty"`
			Details    *ResponseDetails          `json:"details,omitempty"`
			Error      *APIError                 `json:"error,omitempty"`
			Pagination *Pagination               `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETUserNotificationsResponse parses an HTTP response from a GETUserNotificationsWithResponse call
func ParseGETUserNotificationsResponse(rsp *http.Response) (*GETUserNotificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETUserNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]UserNotification `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]UserNotification `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTUserNotificationsResponse parses an HTTP response from a POSTUserNotificationsWithResponse call
func ParsePOSTUserNotificationsResponse(rsp *http.Response) (*POSTUserNotificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTUserNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserNotification `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserNotification `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETUserNotificationsUserNotificationIDResponse parses an HTTP response from a GETUserNotificationsUserNotificationIDWithResponse call
func ParseGETUserNotificationsUserNotificationIDResponse(rsp *http.Response) (*GETUserNotificationsUserNotificationIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETUserNotificationsUserNotificationIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *UserNotification `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *UserNotification `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePATCHUserNotificationsUserNotificationIDResponse parses an HTTP response from a PATCHUserNotificationsUserNotificationIDWithResponse call
func ParsePATCHUserNotificationsUserNotificationIDResponse(rsp *http.Response) (*PATCHUserNotificationsUserNotificationIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PATCHUserNotificationsUserNotificationIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *UserNotification `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *UserNotification `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETUsersResponse parses an HTTP response from a GETUsersWithResponse call
func ParseGETUsersResponse(rsp *http.Response) (*GETUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]User          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]User          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTUsersAvatarUploadResponse parses an HTTP response from a POSTUsersAvatarUploadWithResponse call
func ParsePOSTUsersAvatarUploadResponse(rsp *http.Response) (*POSTUsersAvatarUploadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTUsersAvatarUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTUsersDetailsResponse parses an HTTP response from a PUTUsersDetailsWithResponse call
func ParsePUTUsersDetailsResponse(rsp *http.Response) (*PUTUsersDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTUsersDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTUsersEmailAddressResponse parses an HTTP response from a PUTUsersEmailAddressWithResponse call
func ParsePUTUsersEmailAddressResponse(rsp *http.Response) (*PUTUsersEmailAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTUsersEmailAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTUsersEmailAddressVerificationResponse parses an HTTP response from a POSTUsersEmailAddressVerificationWithResponse call
func ParsePOSTUsersEmailAddressVerificationResponse(rsp *http.Response) (*POSTUsersEmailAddressVerificationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTUsersEmailAddressVerificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTUsersHouseholdSelectResponse parses an HTTP response from a POSTUsersHouseholdSelectWithResponse call
func ParsePOSTUsersHouseholdSelectResponse(rsp *http.Response) (*POSTUsersHouseholdSelectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTUsersHouseholdSelectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Household       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTUsersPasswordNewResponse parses an HTTP response from a PUTUsersPasswordNewWithResponse call
func ParsePUTUsersPasswordNewResponse(rsp *http.Response) (*PUTUsersPasswordNewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTUsersPasswordNewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePOSTUsersPermissionsCheckResponse parses an HTTP response from a POSTUsersPermissionsCheckWithResponse call
func ParsePOSTUsersPermissionsCheckResponse(rsp *http.Response) (*POSTUsersPermissionsCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTUsersPermissionsCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserPermissionsResponse `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserPermissionsResponse `json:"data,omitempty"`
			Details    *ResponseDetails         `json:"details,omitempty"`
			Error      *APIError                `json:"error,omitempty"`
			Pagination *Pagination              `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETUsersSearchResponse parses an HTTP response from a GETUsersSearchWithResponse call
func ParseGETUsersSearchResponse(rsp *http.Response) (*GETUsersSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETUsersSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]User          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]User          `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETUsersSelfResponse parses an HTTP response from a GETUsersSelfWithResponse call
func ParseGETUsersSelfResponse(rsp *http.Response) (*GETUsersSelfResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETUsersSelfResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTUsersTotpSecretNewResponse parses an HTTP response from a POSTUsersTotpSecretNewWithResponse call
func ParsePOSTUsersTotpSecretNewResponse(rsp *http.Response) (*POSTUsersTotpSecretNewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTUsersTotpSecretNewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *TOTPSecretRefreshResponse `json:"data,omitempty"`
			Details    *ResponseDetails           `json:"details,omitempty"`
			Error      *APIError                  `json:"error,omitempty"`
			Pagination *Pagination                `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *TOTPSecretRefreshResponse `json:"data,omitempty"`
			Details    *ResponseDetails           `json:"details,omitempty"`
			Error      *APIError                  `json:"error,omitempty"`
			Pagination *Pagination                `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTUsersUsernameResponse parses an HTTP response from a PUTUsersUsernameWithResponse call
func ParsePUTUsersUsernameResponse(rsp *http.Response) (*PUTUsersUsernameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTUsersUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEUsersUserIDResponse parses an HTTP response from a DELETEUsersUserIDWithResponse call
func ParseDELETEUsersUserIDResponse(rsp *http.Response) (*DELETEUsersUserIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEUsersUserIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETUsersUserIDResponse parses an HTTP response from a GETUsersUserIDWithResponse call
func ParseGETUsersUserIDResponse(rsp *http.Response) (*GETUsersUserIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETUsersUserIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidIngredientGroupsResponse parses an HTTP response from a GETValidIngredientGroupsWithResponse call
func ParseGETValidIngredientGroupsResponse(rsp *http.Response) (*GETValidIngredientGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidIngredientGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidIngredientGroup `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidIngredientGroup `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTValidIngredientGroupsResponse parses an HTTP response from a POSTValidIngredientGroupsWithResponse call
func ParsePOSTValidIngredientGroupsResponse(rsp *http.Response) (*POSTValidIngredientGroupsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTValidIngredientGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidIngredientGroup `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidIngredientGroup `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidIngredientGroupsSearchResponse parses an HTTP response from a GETValidIngredientGroupsSearchWithResponse call
func ParseGETValidIngredientGroupsSearchResponse(rsp *http.Response) (*GETValidIngredientGroupsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidIngredientGroupsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientGroup `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientGroup `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEValidIngredientGroupsValidIngredientGroupIDResponse parses an HTTP response from a DELETEValidIngredientGroupsValidIngredientGroupIDWithResponse call
func ParseDELETEValidIngredientGroupsValidIngredientGroupIDResponse(rsp *http.Response) (*DELETEValidIngredientGroupsValidIngredientGroupIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEValidIngredientGroupsValidIngredientGroupIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidIngredientGroup `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidIngredientGroup `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidIngredientGroupsValidIngredientGroupIDResponse parses an HTTP response from a GETValidIngredientGroupsValidIngredientGroupIDWithResponse call
func ParseGETValidIngredientGroupsValidIngredientGroupIDResponse(rsp *http.Response) (*GETValidIngredientGroupsValidIngredientGroupIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidIngredientGroupsValidIngredientGroupIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientGroup `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientGroup `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTValidIngredientGroupsValidIngredientGroupIDResponse parses an HTTP response from a PUTValidIngredientGroupsValidIngredientGroupIDWithResponse call
func ParsePUTValidIngredientGroupsValidIngredientGroupIDResponse(rsp *http.Response) (*PUTValidIngredientGroupsValidIngredientGroupIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTValidIngredientGroupsValidIngredientGroupIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientGroup `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientGroup `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidIngredientMeasurementUnitsResponse parses an HTTP response from a GETValidIngredientMeasurementUnitsWithResponse call
func ParseGETValidIngredientMeasurementUnitsResponse(rsp *http.Response) (*GETValidIngredientMeasurementUnitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidIngredientMeasurementUnitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                  `json:"details,omitempty"`
			Error      *APIError                         `json:"error,omitempty"`
			Pagination *Pagination                       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                  `json:"details,omitempty"`
			Error      *APIError                         `json:"error,omitempty"`
			Pagination *Pagination                       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTValidIngredientMeasurementUnitsResponse parses an HTTP response from a POSTValidIngredientMeasurementUnitsWithResponse call
func ParsePOSTValidIngredientMeasurementUnitsResponse(rsp *http.Response) (*POSTValidIngredientMeasurementUnitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTValidIngredientMeasurementUnitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidIngredientMeasurementUnitsByIngredientValidIngredientIDResponse parses an HTTP response from a GETValidIngredientMeasurementUnitsByIngredientValidIngredientIDWithResponse call
func ParseGETValidIngredientMeasurementUnitsByIngredientValidIngredientIDResponse(rsp *http.Response) (*GETValidIngredientMeasurementUnitsByIngredientValidIngredientIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidIngredientMeasurementUnitsByIngredientValidIngredientIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidIngredientMeasurementUnitsByMeasurementUnitValidMeasurementUnitIDResponse parses an HTTP response from a GETValidIngredientMeasurementUnitsByMeasurementUnitValidMeasurementUnitIDWithResponse call
func ParseGETValidIngredientMeasurementUnitsByMeasurementUnitValidMeasurementUnitIDResponse(rsp *http.Response) (*GETValidIngredientMeasurementUnitsByMeasurementUnitValidMeasurementUnitIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidIngredientMeasurementUnitsByMeasurementUnitValidMeasurementUnitIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse parses an HTTP response from a DELETEValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDWithResponse call
func ParseDELETEValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse(rsp *http.Response) (*DELETEValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse parses an HTTP response from a GETValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDWithResponse call
func ParseGETValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse(rsp *http.Response) (*GETValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse parses an HTTP response from a PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDWithResponse call
func ParsePUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse(rsp *http.Response) (*PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTValidIngredientMeasurementUnitsValidIngredientMeasurementUnitIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidIngredientPreparationsResponse parses an HTTP response from a GETValidIngredientPreparationsWithResponse call
func ParseGETValidIngredientPreparationsResponse(rsp *http.Response) (*GETValidIngredientPreparationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidIngredientPreparationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTValidIngredientPreparationsResponse parses an HTTP response from a POSTValidIngredientPreparationsWithResponse call
func ParsePOSTValidIngredientPreparationsResponse(rsp *http.Response) (*POSTValidIngredientPreparationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTValidIngredientPreparationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidIngredientPreparationsByIngredientValidIngredientIDResponse parses an HTTP response from a GETValidIngredientPreparationsByIngredientValidIngredientIDWithResponse call
func ParseGETValidIngredientPreparationsByIngredientValidIngredientIDResponse(rsp *http.Response) (*GETValidIngredientPreparationsByIngredientValidIngredientIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidIngredientPreparationsByIngredientValidIngredientIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidIngredientPreparationsByPreparationValidPreparationIDResponse parses an HTTP response from a GETValidIngredientPreparationsByPreparationValidPreparationIDWithResponse call
func ParseGETValidIngredientPreparationsByPreparationValidPreparationIDResponse(rsp *http.Response) (*GETValidIngredientPreparationsByPreparationValidPreparationIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidIngredientPreparationsByPreparationValidPreparationIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEValidIngredientPreparationsValidIngredientPreparationIDResponse parses an HTTP response from a DELETEValidIngredientPreparationsValidIngredientPreparationIDWithResponse call
func ParseDELETEValidIngredientPreparationsValidIngredientPreparationIDResponse(rsp *http.Response) (*DELETEValidIngredientPreparationsValidIngredientPreparationIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEValidIngredientPreparationsValidIngredientPreparationIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidIngredientPreparationsValidIngredientPreparationIDResponse parses an HTTP response from a GETValidIngredientPreparationsValidIngredientPreparationIDWithResponse call
func ParseGETValidIngredientPreparationsValidIngredientPreparationIDResponse(rsp *http.Response) (*GETValidIngredientPreparationsValidIngredientPreparationIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidIngredientPreparationsValidIngredientPreparationIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTValidIngredientPreparationsValidIngredientPreparationIDResponse parses an HTTP response from a PUTValidIngredientPreparationsValidIngredientPreparationIDWithResponse call
func ParsePUTValidIngredientPreparationsValidIngredientPreparationIDResponse(rsp *http.Response) (*PUTValidIngredientPreparationsValidIngredientPreparationIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTValidIngredientPreparationsValidIngredientPreparationIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientPreparation `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidIngredientStateIngredientsResponse parses an HTTP response from a GETValidIngredientStateIngredientsWithResponse call
func ParseGETValidIngredientStateIngredientsResponse(rsp *http.Response) (*GETValidIngredientStateIngredientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidIngredientStateIngredientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                  `json:"details,omitempty"`
			Error      *APIError                         `json:"error,omitempty"`
			Pagination *Pagination                       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                  `json:"details,omitempty"`
			Error      *APIError                         `json:"error,omitempty"`
			Pagination *Pagination                       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTValidIngredientStateIngredientsResponse parses an HTTP response from a POSTValidIngredientStateIngredientsWithResponse call
func ParsePOSTValidIngredientStateIngredientsResponse(rsp *http.Response) (*POSTValidIngredientStateIngredientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTValidIngredientStateIngredientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidIngredientStateIngredientsByIngredientValidIngredientIDResponse parses an HTTP response from a GETValidIngredientStateIngredientsByIngredientValidIngredientIDWithResponse call
func ParseGETValidIngredientStateIngredientsByIngredientValidIngredientIDResponse(rsp *http.Response) (*GETValidIngredientStateIngredientsByIngredientValidIngredientIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidIngredientStateIngredientsByIngredientValidIngredientIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidIngredientStateIngredientsByIngredientStateValidIngredientStateIDResponse parses an HTTP response from a GETValidIngredientStateIngredientsByIngredientStateValidIngredientStateIDWithResponse call
func ParseGETValidIngredientStateIngredientsByIngredientStateValidIngredientStateIDResponse(rsp *http.Response) (*GETValidIngredientStateIngredientsByIngredientStateValidIngredientStateIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidIngredientStateIngredientsByIngredientStateValidIngredientStateIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse parses an HTTP response from a DELETEValidIngredientStateIngredientsValidIngredientStateIngredientIDWithResponse call
func ParseDELETEValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse(rsp *http.Response) (*DELETEValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse parses an HTTP response from a GETValidIngredientStateIngredientsValidIngredientStateIngredientIDWithResponse call
func ParseGETValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse(rsp *http.Response) (*GETValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse parses an HTTP response from a PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDWithResponse call
func ParsePUTValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse(rsp *http.Response) (*PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTValidIngredientStateIngredientsValidIngredientStateIngredientIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientStateIngredient `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidIngredientStatesResponse parses an HTTP response from a GETValidIngredientStatesWithResponse call
func ParseGETValidIngredientStatesResponse(rsp *http.Response) (*GETValidIngredientStatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidIngredientStatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidIngredientState `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidIngredientState `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTValidIngredientStatesResponse parses an HTTP response from a POSTValidIngredientStatesWithResponse call
func ParsePOSTValidIngredientStatesResponse(rsp *http.Response) (*POSTValidIngredientStatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTValidIngredientStatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidIngredientState `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidIngredientState `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidIngredientStatesSearchResponse parses an HTTP response from a GETValidIngredientStatesSearchWithResponse call
func ParseGETValidIngredientStatesSearchResponse(rsp *http.Response) (*GETValidIngredientStatesSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidIngredientStatesSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientState `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientState `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEValidIngredientStatesValidIngredientStateIDResponse parses an HTTP response from a DELETEValidIngredientStatesValidIngredientStateIDWithResponse call
func ParseDELETEValidIngredientStatesValidIngredientStateIDResponse(rsp *http.Response) (*DELETEValidIngredientStatesValidIngredientStateIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEValidIngredientStatesValidIngredientStateIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidIngredientState `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidIngredientState `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidIngredientStatesValidIngredientStateIDResponse parses an HTTP response from a GETValidIngredientStatesValidIngredientStateIDWithResponse call
func ParseGETValidIngredientStatesValidIngredientStateIDResponse(rsp *http.Response) (*GETValidIngredientStatesValidIngredientStateIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidIngredientStatesValidIngredientStateIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientState `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientState `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTValidIngredientStatesValidIngredientStateIDResponse parses an HTTP response from a PUTValidIngredientStatesValidIngredientStateIDWithResponse call
func ParsePUTValidIngredientStatesValidIngredientStateIDResponse(rsp *http.Response) (*PUTValidIngredientStatesValidIngredientStateIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTValidIngredientStatesValidIngredientStateIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientState `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredientState `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidIngredientsResponse parses an HTTP response from a GETValidIngredientsWithResponse call
func ParseGETValidIngredientsResponse(rsp *http.Response) (*GETValidIngredientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidIngredientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails   `json:"details,omitempty"`
			Error      *APIError          `json:"error,omitempty"`
			Pagination *Pagination        `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails   `json:"details,omitempty"`
			Error      *APIError          `json:"error,omitempty"`
			Pagination *Pagination        `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTValidIngredientsResponse parses an HTTP response from a POSTValidIngredientsWithResponse call
func ParsePOSTValidIngredientsResponse(rsp *http.Response) (*POSTValidIngredientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTValidIngredientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidIngredientsByPreparationValidPreparationIDResponse parses an HTTP response from a GETValidIngredientsByPreparationValidPreparationIDWithResponse call
func ParseGETValidIngredientsByPreparationValidPreparationIDResponse(rsp *http.Response) (*GETValidIngredientsByPreparationValidPreparationIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidIngredientsByPreparationValidPreparationIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidIngredientsRandomResponse parses an HTTP response from a GETValidIngredientsRandomWithResponse call
func ParseGETValidIngredientsRandomResponse(rsp *http.Response) (*GETValidIngredientsRandomResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidIngredientsRandomResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidIngredientsSearchResponse parses an HTTP response from a GETValidIngredientsSearchWithResponse call
func ParseGETValidIngredientsSearchResponse(rsp *http.Response) (*GETValidIngredientsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidIngredientsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEValidIngredientsValidIngredientIDResponse parses an HTTP response from a DELETEValidIngredientsValidIngredientIDWithResponse call
func ParseDELETEValidIngredientsValidIngredientIDResponse(rsp *http.Response) (*DELETEValidIngredientsValidIngredientIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEValidIngredientsValidIngredientIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidIngredientsValidIngredientIDResponse parses an HTTP response from a GETValidIngredientsValidIngredientIDWithResponse call
func ParseGETValidIngredientsValidIngredientIDResponse(rsp *http.Response) (*GETValidIngredientsValidIngredientIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidIngredientsValidIngredientIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTValidIngredientsValidIngredientIDResponse parses an HTTP response from a PUTValidIngredientsValidIngredientIDWithResponse call
func ParsePUTValidIngredientsValidIngredientIDResponse(rsp *http.Response) (*PUTValidIngredientsValidIngredientIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTValidIngredientsValidIngredientIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidIngredient `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidInstrumentsResponse parses an HTTP response from a GETValidInstrumentsWithResponse call
func ParseGETValidInstrumentsResponse(rsp *http.Response) (*GETValidInstrumentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidInstrumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails   `json:"details,omitempty"`
			Error      *APIError          `json:"error,omitempty"`
			Pagination *Pagination        `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails   `json:"details,omitempty"`
			Error      *APIError          `json:"error,omitempty"`
			Pagination *Pagination        `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTValidInstrumentsResponse parses an HTTP response from a POSTValidInstrumentsWithResponse call
func ParsePOSTValidInstrumentsResponse(rsp *http.Response) (*POSTValidInstrumentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTValidInstrumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidInstrumentsRandomResponse parses an HTTP response from a GETValidInstrumentsRandomWithResponse call
func ParseGETValidInstrumentsRandomResponse(rsp *http.Response) (*GETValidInstrumentsRandomResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidInstrumentsRandomResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidInstrumentsSearchResponse parses an HTTP response from a GETValidInstrumentsSearchWithResponse call
func ParseGETValidInstrumentsSearchResponse(rsp *http.Response) (*GETValidInstrumentsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidInstrumentsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEValidInstrumentsValidInstrumentIDResponse parses an HTTP response from a DELETEValidInstrumentsValidInstrumentIDWithResponse call
func ParseDELETEValidInstrumentsValidInstrumentIDResponse(rsp *http.Response) (*DELETEValidInstrumentsValidInstrumentIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEValidInstrumentsValidInstrumentIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidInstrumentsValidInstrumentIDResponse parses an HTTP response from a GETValidInstrumentsValidInstrumentIDWithResponse call
func ParseGETValidInstrumentsValidInstrumentIDResponse(rsp *http.Response) (*GETValidInstrumentsValidInstrumentIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidInstrumentsValidInstrumentIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTValidInstrumentsValidInstrumentIDResponse parses an HTTP response from a PUTValidInstrumentsValidInstrumentIDWithResponse call
func ParsePUTValidInstrumentsValidInstrumentIDResponse(rsp *http.Response) (*PUTValidInstrumentsValidInstrumentIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTValidInstrumentsValidInstrumentIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidInstrument `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTValidMeasurementConversionsResponse parses an HTTP response from a POSTValidMeasurementConversionsWithResponse call
func ParsePOSTValidMeasurementConversionsResponse(rsp *http.Response) (*POSTValidMeasurementConversionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTValidMeasurementConversionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidMeasurementConversionsFromUnitValidMeasurementUnitIDResponse parses an HTTP response from a GETValidMeasurementConversionsFromUnitValidMeasurementUnitIDWithResponse call
func ParseGETValidMeasurementConversionsFromUnitValidMeasurementUnitIDResponse(rsp *http.Response) (*GETValidMeasurementConversionsFromUnitValidMeasurementUnitIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidMeasurementConversionsFromUnitValidMeasurementUnitIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidMeasurementConversionsToUnitValidMeasurementUnitIDResponse parses an HTTP response from a GETValidMeasurementConversionsToUnitValidMeasurementUnitIDWithResponse call
func ParseGETValidMeasurementConversionsToUnitValidMeasurementUnitIDResponse(rsp *http.Response) (*GETValidMeasurementConversionsToUnitValidMeasurementUnitIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidMeasurementConversionsToUnitValidMeasurementUnitIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEValidMeasurementConversionsValidMeasurementUnitConversionIDResponse parses an HTTP response from a DELETEValidMeasurementConversionsValidMeasurementUnitConversionIDWithResponse call
func ParseDELETEValidMeasurementConversionsValidMeasurementUnitConversionIDResponse(rsp *http.Response) (*DELETEValidMeasurementConversionsValidMeasurementUnitConversionIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEValidMeasurementConversionsValidMeasurementUnitConversionIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidMeasurementConversionsValidMeasurementUnitConversionIDResponse parses an HTTP response from a GETValidMeasurementConversionsValidMeasurementUnitConversionIDWithResponse call
func ParseGETValidMeasurementConversionsValidMeasurementUnitConversionIDResponse(rsp *http.Response) (*GETValidMeasurementConversionsValidMeasurementUnitConversionIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidMeasurementConversionsValidMeasurementUnitConversionIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTValidMeasurementConversionsValidMeasurementUnitConversionIDResponse parses an HTTP response from a PUTValidMeasurementConversionsValidMeasurementUnitConversionIDWithResponse call
func ParsePUTValidMeasurementConversionsValidMeasurementUnitConversionIDResponse(rsp *http.Response) (*PUTValidMeasurementConversionsValidMeasurementUnitConversionIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTValidMeasurementConversionsValidMeasurementUnitConversionIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnitConversion `json:"data,omitempty"`
			Details    *ResponseDetails                `json:"details,omitempty"`
			Error      *APIError                       `json:"error,omitempty"`
			Pagination *Pagination                     `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidMeasurementUnitsResponse parses an HTTP response from a GETValidMeasurementUnitsWithResponse call
func ParseGETValidMeasurementUnitsResponse(rsp *http.Response) (*GETValidMeasurementUnitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidMeasurementUnitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTValidMeasurementUnitsResponse parses an HTTP response from a POSTValidMeasurementUnitsWithResponse call
func ParsePOSTValidMeasurementUnitsResponse(rsp *http.Response) (*POSTValidMeasurementUnitsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTValidMeasurementUnitsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidMeasurementUnitsByIngredientValidIngredientIDResponse parses an HTTP response from a GETValidMeasurementUnitsByIngredientValidIngredientIDWithResponse call
func ParseGETValidMeasurementUnitsByIngredientValidIngredientIDResponse(rsp *http.Response) (*GETValidMeasurementUnitsByIngredientValidIngredientIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidMeasurementUnitsByIngredientValidIngredientIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidMeasurementUnitsSearchResponse parses an HTTP response from a GETValidMeasurementUnitsSearchWithResponse call
func ParseGETValidMeasurementUnitsSearchResponse(rsp *http.Response) (*GETValidMeasurementUnitsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidMeasurementUnitsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEValidMeasurementUnitsValidMeasurementUnitIDResponse parses an HTTP response from a DELETEValidMeasurementUnitsValidMeasurementUnitIDWithResponse call
func ParseDELETEValidMeasurementUnitsValidMeasurementUnitIDResponse(rsp *http.Response) (*DELETEValidMeasurementUnitsValidMeasurementUnitIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEValidMeasurementUnitsValidMeasurementUnitIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidMeasurementUnitsValidMeasurementUnitIDResponse parses an HTTP response from a GETValidMeasurementUnitsValidMeasurementUnitIDWithResponse call
func ParseGETValidMeasurementUnitsValidMeasurementUnitIDResponse(rsp *http.Response) (*GETValidMeasurementUnitsValidMeasurementUnitIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidMeasurementUnitsValidMeasurementUnitIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTValidMeasurementUnitsValidMeasurementUnitIDResponse parses an HTTP response from a PUTValidMeasurementUnitsValidMeasurementUnitIDWithResponse call
func ParsePUTValidMeasurementUnitsValidMeasurementUnitIDResponse(rsp *http.Response) (*PUTValidMeasurementUnitsValidMeasurementUnitIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTValidMeasurementUnitsValidMeasurementUnitIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidMeasurementUnit `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidPreparationInstrumentsResponse parses an HTTP response from a GETValidPreparationInstrumentsWithResponse call
func ParseGETValidPreparationInstrumentsResponse(rsp *http.Response) (*GETValidPreparationInstrumentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidPreparationInstrumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails              `json:"details,omitempty"`
			Error      *APIError                     `json:"error,omitempty"`
			Pagination *Pagination                   `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTValidPreparationInstrumentsResponse parses an HTTP response from a POSTValidPreparationInstrumentsWithResponse call
func ParsePOSTValidPreparationInstrumentsResponse(rsp *http.Response) (*POSTValidPreparationInstrumentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTValidPreparationInstrumentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidPreparationInstrumentsByInstrumentValidInstrumentIDResponse parses an HTTP response from a GETValidPreparationInstrumentsByInstrumentValidInstrumentIDWithResponse call
func ParseGETValidPreparationInstrumentsByInstrumentValidInstrumentIDResponse(rsp *http.Response) (*GETValidPreparationInstrumentsByInstrumentValidInstrumentIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidPreparationInstrumentsByInstrumentValidInstrumentIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidPreparationInstrumentsByPreparationValidPreparationIDResponse parses an HTTP response from a GETValidPreparationInstrumentsByPreparationValidPreparationIDWithResponse call
func ParseGETValidPreparationInstrumentsByPreparationValidPreparationIDResponse(rsp *http.Response) (*GETValidPreparationInstrumentsByPreparationValidPreparationIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidPreparationInstrumentsByPreparationValidPreparationIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEValidPreparationInstrumentsValidPreparationVesselIDResponse parses an HTTP response from a DELETEValidPreparationInstrumentsValidPreparationVesselIDWithResponse call
func ParseDELETEValidPreparationInstrumentsValidPreparationVesselIDResponse(rsp *http.Response) (*DELETEValidPreparationInstrumentsValidPreparationVesselIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEValidPreparationInstrumentsValidPreparationVesselIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidPreparationInstrumentsValidPreparationVesselIDResponse parses an HTTP response from a GETValidPreparationInstrumentsValidPreparationVesselIDWithResponse call
func ParseGETValidPreparationInstrumentsValidPreparationVesselIDResponse(rsp *http.Response) (*GETValidPreparationInstrumentsValidPreparationVesselIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidPreparationInstrumentsValidPreparationVesselIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTValidPreparationInstrumentsValidPreparationVesselIDResponse parses an HTTP response from a PUTValidPreparationInstrumentsValidPreparationVesselIDWithResponse call
func ParsePUTValidPreparationInstrumentsValidPreparationVesselIDResponse(rsp *http.Response) (*PUTValidPreparationInstrumentsValidPreparationVesselIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTValidPreparationInstrumentsValidPreparationVesselIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationInstrument `json:"data,omitempty"`
			Details    *ResponseDetails            `json:"details,omitempty"`
			Error      *APIError                   `json:"error,omitempty"`
			Pagination *Pagination                 `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidPreparationVesselsResponse parses an HTTP response from a GETValidPreparationVesselsWithResponse call
func ParseGETValidPreparationVesselsResponse(rsp *http.Response) (*GETValidPreparationVesselsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidPreparationVesselsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails          `json:"details,omitempty"`
			Error      *APIError                 `json:"error,omitempty"`
			Pagination *Pagination               `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails          `json:"details,omitempty"`
			Error      *APIError                 `json:"error,omitempty"`
			Pagination *Pagination               `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTValidPreparationVesselsResponse parses an HTTP response from a POSTValidPreparationVesselsWithResponse call
func ParsePOSTValidPreparationVesselsResponse(rsp *http.Response) (*POSTValidPreparationVesselsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTValidPreparationVesselsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidPreparationVesselsByPreparationValidPreparationIDResponse parses an HTTP response from a GETValidPreparationVesselsByPreparationValidPreparationIDWithResponse call
func ParseGETValidPreparationVesselsByPreparationValidPreparationIDResponse(rsp *http.Response) (*GETValidPreparationVesselsByPreparationValidPreparationIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidPreparationVesselsByPreparationValidPreparationIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidPreparationVesselsByVesselValidVesselIDResponse parses an HTTP response from a GETValidPreparationVesselsByVesselValidVesselIDWithResponse call
func ParseGETValidPreparationVesselsByVesselValidVesselIDResponse(rsp *http.Response) (*GETValidPreparationVesselsByVesselValidVesselIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidPreparationVesselsByVesselValidVesselIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEValidPreparationVesselsValidPreparationVesselIDResponse parses an HTTP response from a DELETEValidPreparationVesselsValidPreparationVesselIDWithResponse call
func ParseDELETEValidPreparationVesselsValidPreparationVesselIDResponse(rsp *http.Response) (*DELETEValidPreparationVesselsValidPreparationVesselIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEValidPreparationVesselsValidPreparationVesselIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidPreparationVesselsValidPreparationVesselIDResponse parses an HTTP response from a GETValidPreparationVesselsValidPreparationVesselIDWithResponse call
func ParseGETValidPreparationVesselsValidPreparationVesselIDResponse(rsp *http.Response) (*GETValidPreparationVesselsValidPreparationVesselIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidPreparationVesselsValidPreparationVesselIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTValidPreparationVesselsValidPreparationVesselIDResponse parses an HTTP response from a PUTValidPreparationVesselsValidPreparationVesselIDWithResponse call
func ParsePUTValidPreparationVesselsValidPreparationVesselIDResponse(rsp *http.Response) (*PUTValidPreparationVesselsValidPreparationVesselIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTValidPreparationVesselsValidPreparationVesselIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparationVessel `json:"data,omitempty"`
			Details    *ResponseDetails        `json:"details,omitempty"`
			Error      *APIError               `json:"error,omitempty"`
			Pagination *Pagination             `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidPreparationsResponse parses an HTTP response from a GETValidPreparationsWithResponse call
func ParseGETValidPreparationsResponse(rsp *http.Response) (*GETValidPreparationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidPreparationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTValidPreparationsResponse parses an HTTP response from a POSTValidPreparationsWithResponse call
func ParsePOSTValidPreparationsResponse(rsp *http.Response) (*POSTValidPreparationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTValidPreparationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidPreparationsRandomResponse parses an HTTP response from a GETValidPreparationsRandomWithResponse call
func ParseGETValidPreparationsRandomResponse(rsp *http.Response) (*GETValidPreparationsRandomResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidPreparationsRandomResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidPreparationsSearchResponse parses an HTTP response from a GETValidPreparationsSearchWithResponse call
func ParseGETValidPreparationsSearchResponse(rsp *http.Response) (*GETValidPreparationsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidPreparationsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEValidPreparationsValidPreparationIDResponse parses an HTTP response from a DELETEValidPreparationsValidPreparationIDWithResponse call
func ParseDELETEValidPreparationsValidPreparationIDResponse(rsp *http.Response) (*DELETEValidPreparationsValidPreparationIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEValidPreparationsValidPreparationIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidPreparationsValidPreparationIDResponse parses an HTTP response from a GETValidPreparationsValidPreparationIDWithResponse call
func ParseGETValidPreparationsValidPreparationIDResponse(rsp *http.Response) (*GETValidPreparationsValidPreparationIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidPreparationsValidPreparationIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTValidPreparationsValidPreparationIDResponse parses an HTTP response from a PUTValidPreparationsValidPreparationIDWithResponse call
func ParsePUTValidPreparationsValidPreparationIDResponse(rsp *http.Response) (*PUTValidPreparationsValidPreparationIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTValidPreparationsValidPreparationIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidPreparation `json:"data,omitempty"`
			Details    *ResponseDetails  `json:"details,omitempty"`
			Error      *APIError         `json:"error,omitempty"`
			Pagination *Pagination       `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidVesselsResponse parses an HTTP response from a GETValidVesselsWithResponse call
func ParseGETValidVesselsResponse(rsp *http.Response) (*GETValidVesselsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidVesselsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidVessel   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]ValidVessel   `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTValidVesselsResponse parses an HTTP response from a POSTValidVesselsWithResponse call
func ParsePOSTValidVesselsResponse(rsp *http.Response) (*POSTValidVesselsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTValidVesselsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidVessel     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *ValidVessel     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidVesselsRandomResponse parses an HTTP response from a GETValidVesselsRandomWithResponse call
func ParseGETValidVesselsRandomResponse(rsp *http.Response) (*GETValidVesselsRandomResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidVesselsRandomResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidVessel     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidVessel     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidVesselsSearchResponse parses an HTTP response from a GETValidVesselsSearchWithResponse call
func ParseGETValidVesselsSearchResponse(rsp *http.Response) (*GETValidVesselsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidVesselsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidVessel     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidVessel     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEValidVesselsValidVesselIDResponse parses an HTTP response from a DELETEValidVesselsValidVesselIDWithResponse call
func ParseDELETEValidVesselsValidVesselIDResponse(rsp *http.Response) (*DELETEValidVesselsValidVesselIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEValidVesselsValidVesselIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidVessel     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *ValidVessel     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETValidVesselsValidVesselIDResponse parses an HTTP response from a GETValidVesselsValidVesselIDWithResponse call
func ParseGETValidVesselsValidVesselIDResponse(rsp *http.Response) (*GETValidVesselsValidVesselIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETValidVesselsValidVesselIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidVessel     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidVessel     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePUTValidVesselsValidVesselIDResponse parses an HTTP response from a PUTValidVesselsValidVesselIDWithResponse call
func ParsePUTValidVesselsValidVesselIDResponse(rsp *http.Response) (*PUTValidVesselsValidVesselIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PUTValidVesselsValidVesselIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidVessel     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *ValidVessel     `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETWebhooksResponse parses an HTTP response from a GETWebhooksWithResponse call
func ParseGETWebhooksResponse(rsp *http.Response) (*GETWebhooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETWebhooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Webhook       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *[]Webhook       `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTWebhooksResponse parses an HTTP response from a POSTWebhooksWithResponse call
func ParsePOSTWebhooksResponse(rsp *http.Response) (*POSTWebhooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTWebhooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Webhook         `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *Webhook         `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEWebhooksWebhookIDResponse parses an HTTP response from a DELETEWebhooksWebhookIDWithResponse call
func ParseDELETEWebhooksWebhookIDResponse(rsp *http.Response) (*DELETEWebhooksWebhookIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEWebhooksWebhookIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *Webhook         `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *Webhook         `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETWebhooksWebhookIDResponse parses an HTTP response from a GETWebhooksWebhookIDWithResponse call
func ParseGETWebhooksWebhookIDResponse(rsp *http.Response) (*GETWebhooksWebhookIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETWebhooksWebhookIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Webhook         `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *Webhook         `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTWebhooksWebhookIDTriggerEventsResponse parses an HTTP response from a POSTWebhooksWebhookIDTriggerEventsWithResponse call
func ParsePOSTWebhooksWebhookIDTriggerEventsResponse(rsp *http.Response) (*POSTWebhooksWebhookIDTriggerEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTWebhooksWebhookIDTriggerEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *WebhookTriggerEvent `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *WebhookTriggerEvent `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseDELETEWebhooksWebhookIDTriggerEventsWebhookTriggerEventIDResponse parses an HTTP response from a DELETEWebhooksWebhookIDTriggerEventsWebhookTriggerEventIDWithResponse call
func ParseDELETEWebhooksWebhookIDTriggerEventsWebhookTriggerEventIDResponse(rsp *http.Response) (*DELETEWebhooksWebhookIDTriggerEventsWebhookTriggerEventIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DELETEWebhooksWebhookIDTriggerEventsWebhookTriggerEventIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest struct {
			Data       *WebhookTriggerEvent `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 202:
		var dest struct {
			Data       *WebhookTriggerEvent `json:"data,omitempty"`
			Details    *ResponseDetails     `json:"details,omitempty"`
			Error      *APIError            `json:"error,omitempty"`
			Pagination *Pagination          `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTWorkersFinalizeMealPlansResponse parses an HTTP response from a POSTWorkersFinalizeMealPlansWithResponse call
func ParsePOSTWorkersFinalizeMealPlansResponse(rsp *http.Response) (*POSTWorkersFinalizeMealPlansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTWorkersFinalizeMealPlansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *FinalizeMealPlansRequest `json:"data,omitempty"`
			Details    *ResponseDetails          `json:"details,omitempty"`
			Error      *APIError                 `json:"error,omitempty"`
			Pagination *Pagination               `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *FinalizeMealPlansRequest `json:"data,omitempty"`
			Details    *ResponseDetails          `json:"details,omitempty"`
			Error      *APIError                 `json:"error,omitempty"`
			Pagination *Pagination               `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTWorkersMealPlanGroceryListInitResponse parses an HTTP response from a POSTWorkersMealPlanGroceryListInitWithResponse call
func ParsePOSTWorkersMealPlanGroceryListInitResponse(rsp *http.Response) (*POSTWorkersMealPlanGroceryListInitResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTWorkersMealPlanGroceryListInitResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePOSTWorkersMealPlanTasksResponse parses an HTTP response from a POSTWorkersMealPlanTasksWithResponse call
func ParsePOSTWorkersMealPlanTasksResponse(rsp *http.Response) (*POSTWorkersMealPlanTasksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTWorkersMealPlanTasksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGETAuthStatusResponse parses an HTTP response from a GETAuthStatusWithResponse call
func ParseGETAuthStatusResponse(rsp *http.Response) (*GETAuthStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETAuthStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data       *UserStatusResponse `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest struct {
			Data       *UserStatusResponse `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParseGETOauth2AuthorizeResponse parses an HTTP response from a GETOauth2AuthorizeWithResponse call
func ParseGETOauth2AuthorizeResponse(rsp *http.Response) (*GETOauth2AuthorizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GETOauth2AuthorizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePOSTOauth2TokenResponse parses an HTTP response from a POSTOauth2TokenWithResponse call
func ParsePOSTOauth2TokenResponse(rsp *http.Response) (*POSTOauth2TokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTOauth2TokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePOSTUsersResponse parses an HTTP response from a POSTUsersWithResponse call
func ParsePOSTUsersResponse(rsp *http.Response) (*POSTUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserCreationResponse `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserCreationResponse `json:"data,omitempty"`
			Details    *ResponseDetails      `json:"details,omitempty"`
			Error      *APIError             `json:"error,omitempty"`
			Pagination *Pagination           `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTUsersEmailAddressVerifyResponse parses an HTTP response from a POSTUsersEmailAddressVerifyWithResponse call
func ParsePOSTUsersEmailAddressVerifyResponse(rsp *http.Response) (*POSTUsersEmailAddressVerifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTUsersEmailAddressVerifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTUsersLoginResponse parses an HTTP response from a POSTUsersLoginWithResponse call
func ParsePOSTUsersLoginResponse(rsp *http.Response) (*POSTUsersLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTUsersLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserStatusResponse `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserStatusResponse `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTUsersLoginAdminResponse parses an HTTP response from a POSTUsersLoginAdminWithResponse call
func ParsePOSTUsersLoginAdminResponse(rsp *http.Response) (*POSTUsersLoginAdminResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTUsersLoginAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserStatusResponse `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserStatusResponse `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTUsersLogoutResponse parses an HTTP response from a POSTUsersLogoutWithResponse call
func ParsePOSTUsersLogoutResponse(rsp *http.Response) (*POSTUsersLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTUsersLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserStatusResponse `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *UserStatusResponse `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTUsersPasswordResetResponse parses an HTTP response from a POSTUsersPasswordResetWithResponse call
func ParsePOSTUsersPasswordResetResponse(rsp *http.Response) (*POSTUsersPasswordResetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTUsersPasswordResetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *PasswordResetToken `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *PasswordResetToken `json:"data,omitempty"`
			Details    *ResponseDetails    `json:"details,omitempty"`
			Error      *APIError           `json:"error,omitempty"`
			Pagination *Pagination         `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTUsersPasswordResetRedeemResponse parses an HTTP response from a POSTUsersPasswordResetRedeemWithResponse call
func ParsePOSTUsersPasswordResetRedeemResponse(rsp *http.Response) (*POSTUsersPasswordResetRedeemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTUsersPasswordResetRedeemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTUsersTotpSecretVerifyResponse parses an HTTP response from a POSTUsersTotpSecretVerifyWithResponse call
func ParsePOSTUsersTotpSecretVerifyResponse(rsp *http.Response) (*POSTUsersTotpSecretVerifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTUsersTotpSecretVerifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}

// ParsePOSTUsersUsernameReminderResponse parses an HTTP response from a POSTUsersUsernameReminderWithResponse call
func ParsePOSTUsersUsernameReminderResponse(rsp *http.Response) (*POSTUsersUsernameReminderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &POSTUsersUsernameReminderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 201:
		var dest struct {
			Data       *User            `json:"data,omitempty"`
			Details    *ResponseDetails `json:"details,omitempty"`
			Error      *APIError        `json:"error,omitempty"`
			Pagination *Pagination      `json:"pagination,omitempty"`
		}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 400:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 401:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 500:
		var dest APIResponseWithError
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML500 = &dest

	}

	return response, nil
}
