// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_notifications.sql

package generated

import (
	"context"
	"database/sql"
	"time"
)

const checkUserNotificationExistence = `-- name: CheckUserNotificationExistence :one
SELECT EXISTS(
	SELECT user_notifications.id
	FROM user_notifications
	WHERE user_notifications.id = $1
	AND user_notifications.belongs_to_user = $2
)
`

type CheckUserNotificationExistenceParams struct {
	ID            string
	BelongsToUser string
}

func (q *Queries) CheckUserNotificationExistence(ctx context.Context, db DBTX, arg *CheckUserNotificationExistenceParams) (bool, error) {
	row := db.QueryRowContext(ctx, checkUserNotificationExistence, arg.ID, arg.BelongsToUser)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUserNotification = `-- name: CreateUserNotification :exec
INSERT INTO user_notifications (
	id,
	content,
	belongs_to_user
) VALUES (
	$1,
	$2,
	$3
)
`

type CreateUserNotificationParams struct {
	ID            string
	Content       string
	BelongsToUser string
}

func (q *Queries) CreateUserNotification(ctx context.Context, db DBTX, arg *CreateUserNotificationParams) error {
	_, err := db.ExecContext(ctx, createUserNotification, arg.ID, arg.Content, arg.BelongsToUser)
	return err
}

const getUserNotification = `-- name: GetUserNotification :one
SELECT
	user_notifications.id,
	user_notifications.content,
	user_notifications.status,
	user_notifications.belongs_to_user,
	user_notifications.created_at,
	user_notifications.last_updated_at
FROM user_notifications
WHERE belongs_to_user = $1
AND user_notifications.id = $2
`

type GetUserNotificationParams struct {
	BelongsToUser string
	ID            string
}

func (q *Queries) GetUserNotification(ctx context.Context, db DBTX, arg *GetUserNotificationParams) (*UserNotifications, error) {
	row := db.QueryRowContext(ctx, getUserNotification, arg.BelongsToUser, arg.ID)
	var i UserNotifications
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.Status,
		&i.BelongsToUser,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return &i, err
}

const getUserNotificationsForUser = `-- name: GetUserNotificationsForUser :many
SELECT
	user_notifications.id,
	user_notifications.content,
	user_notifications.status,
	user_notifications.belongs_to_user,
	user_notifications.created_at,
	user_notifications.last_updated_at,
	(
		SELECT COUNT(user_notifications.id)
		FROM user_notifications
		WHERE user_notifications.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
			AND user_notifications.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
			AND (
				user_notifications.last_updated_at IS NULL
				OR user_notifications.last_updated_at > COALESCE($3, (SELECT NOW() - '999 years'::INTERVAL))
			)
			AND (
				user_notifications.last_updated_at IS NULL
				OR user_notifications.last_updated_at < COALESCE($4, (SELECT NOW() + '999 years'::INTERVAL))
			)
			AND user_notifications.status != 'dismissed'
			AND user_notifications.belongs_to_user = $5
	) AS filtered_count,
	(
		SELECT COUNT(user_notifications.id)
		FROM user_notifications
		WHERE
			user_notifications.status != 'dismissed'
			AND user_notifications.belongs_to_user = $5
	) AS total_count
FROM user_notifications
WHERE user_notifications.status != 'dismissed'
	AND user_notifications.created_at > COALESCE($1, (SELECT NOW() - '999 years'::INTERVAL))
	AND user_notifications.created_at < COALESCE($2, (SELECT NOW() + '999 years'::INTERVAL))
	AND (
		user_notifications.last_updated_at IS NULL
		OR user_notifications.last_updated_at > COALESCE($4, (SELECT NOW() - '999 years'::INTERVAL))
	)
	AND (
		user_notifications.last_updated_at IS NULL
		OR user_notifications.last_updated_at < COALESCE($3, (SELECT NOW() + '999 years'::INTERVAL))
	)
	AND user_notifications.belongs_to_user = $5
LIMIT $7
OFFSET $6
`

type GetUserNotificationsForUserParams struct {
	CreatedAfter  sql.NullTime
	CreatedBefore sql.NullTime
	UpdatedBefore sql.NullTime
	UpdatedAfter  sql.NullTime
	UserID        string
	QueryOffset   sql.NullInt32
	QueryLimit    sql.NullInt32
}

type GetUserNotificationsForUserRow struct {
	ID            string
	Content       string
	Status        UserNotificationStatus
	BelongsToUser string
	CreatedAt     time.Time
	LastUpdatedAt sql.NullTime
	FilteredCount int64
	TotalCount    int64
}

func (q *Queries) GetUserNotificationsForUser(ctx context.Context, db DBTX, arg *GetUserNotificationsForUserParams) ([]*GetUserNotificationsForUserRow, error) {
	rows, err := db.QueryContext(ctx, getUserNotificationsForUser,
		arg.CreatedAfter,
		arg.CreatedBefore,
		arg.UpdatedBefore,
		arg.UpdatedAfter,
		arg.UserID,
		arg.QueryOffset,
		arg.QueryLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetUserNotificationsForUserRow{}
	for rows.Next() {
		var i GetUserNotificationsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.Status,
			&i.BelongsToUser,
			&i.CreatedAt,
			&i.LastUpdatedAt,
			&i.FilteredCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserNotification = `-- name: UpdateUserNotification :execrows
UPDATE user_notifications SET
	status = $1,
	last_updated_at = NOW()
WHERE id = $2
`

type UpdateUserNotificationParams struct {
	Status UserNotificationStatus
	ID     string
}

func (q *Queries) UpdateUserNotification(ctx context.Context, db DBTX, arg *UpdateUserNotificationParams) (int64, error) {
	result, err := db.ExecContext(ctx, updateUserNotification, arg.Status, arg.ID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
