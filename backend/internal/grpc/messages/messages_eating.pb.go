// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: messages_eating.proto

package messages

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EatingUserDataCollection struct {
	state                         protoimpl.MessageState          `protogen:"open.v1"`
	ReportID                      string                          `protobuf:"bytes,1,opt,name=ReportID,proto3" json:"ReportID,omitempty"`
	HouseholdInstrumentOwnerships []*HouseholdInstrumentOwnership `protobuf:"bytes,2,rep,name=HouseholdInstrumentOwnerships,proto3" json:"HouseholdInstrumentOwnerships,omitempty"`
	MealPlans                     []*MealPlan                     `protobuf:"bytes,3,rep,name=MealPlans,proto3" json:"MealPlans,omitempty"`
	RecipeRatings                 []*RecipeRating                 `protobuf:"bytes,4,rep,name=RecipeRatings,proto3" json:"RecipeRatings,omitempty"`
	Recipes                       []*Recipe                       `protobuf:"bytes,5,rep,name=Recipes,proto3" json:"Recipes,omitempty"`
	Meals                         []*Meal                         `protobuf:"bytes,6,rep,name=Meals,proto3" json:"Meals,omitempty"`
	UserIngredientPreferences     []*UserIngredientPreference     `protobuf:"bytes,7,rep,name=UserIngredientPreferences,proto3" json:"UserIngredientPreferences,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *EatingUserDataCollection) Reset() {
	*x = EatingUserDataCollection{}
	mi := &file_messages_eating_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EatingUserDataCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EatingUserDataCollection) ProtoMessage() {}

func (x *EatingUserDataCollection) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EatingUserDataCollection.ProtoReflect.Descriptor instead.
func (*EatingUserDataCollection) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{0}
}

func (x *EatingUserDataCollection) GetReportID() string {
	if x != nil {
		return x.ReportID
	}
	return ""
}

func (x *EatingUserDataCollection) GetHouseholdInstrumentOwnerships() []*HouseholdInstrumentOwnership {
	if x != nil {
		return x.HouseholdInstrumentOwnerships
	}
	return nil
}

func (x *EatingUserDataCollection) GetMealPlans() []*MealPlan {
	if x != nil {
		return x.MealPlans
	}
	return nil
}

func (x *EatingUserDataCollection) GetRecipeRatings() []*RecipeRating {
	if x != nil {
		return x.RecipeRatings
	}
	return nil
}

func (x *EatingUserDataCollection) GetRecipes() []*Recipe {
	if x != nil {
		return x.Recipes
	}
	return nil
}

func (x *EatingUserDataCollection) GetMeals() []*Meal {
	if x != nil {
		return x.Meals
	}
	return nil
}

func (x *EatingUserDataCollection) GetUserIngredientPreferences() []*UserIngredientPreference {
	if x != nil {
		return x.UserIngredientPreferences
	}
	return nil
}

type ValidIngredient struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt                   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	LastUpdatedAt               *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	ArchivedAt                  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	StorageTemperatureInCelsius *OptionalFloat32Range  `protobuf:"bytes,4,opt,name=StorageTemperatureInCelsius,proto3" json:"StorageTemperatureInCelsius,omitempty"`
	StorageInstructions         string                 `protobuf:"bytes,8,opt,name=StorageInstructions,proto3" json:"StorageInstructions,omitempty"`
	Warning                     string                 `protobuf:"bytes,6,opt,name=Warning,proto3" json:"Warning,omitempty"`
	PluralName                  string                 `protobuf:"bytes,7,opt,name=PluralName,proto3" json:"PluralName,omitempty"`
	IconPath                    string                 `protobuf:"bytes,5,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	Name                        string                 `protobuf:"bytes,9,opt,name=Name,proto3" json:"Name,omitempty"`
	ID                          string                 `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	Description                 string                 `protobuf:"bytes,11,opt,name=Description,proto3" json:"Description,omitempty"`
	Slug                        string                 `protobuf:"bytes,12,opt,name=Slug,proto3" json:"Slug,omitempty"`
	ShoppingSuggestions         string                 `protobuf:"bytes,13,opt,name=ShoppingSuggestions,proto3" json:"ShoppingSuggestions,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
	ContainsEgg                 bool `protobuf:"varint,18,opt,name=ContainsEgg,proto3" json:"ContainsEgg,omitempty"`
	ContainsAlcohol             bool `protobuf:"varint,27,opt,name=ContainsAlcohol,proto3" json:"ContainsAlcohol,omitempty"`
	ContainsPeanut              bool `protobuf:"varint,16,opt,name=ContainsPeanut,proto3" json:"ContainsPeanut,omitempty"`
	ContainsWheat               bool `protobuf:"varint,19,opt,name=ContainsWheat,proto3" json:"ContainsWheat,omitempty"`
	ContainsSoy                 bool `protobuf:"varint,20,opt,name=ContainsSoy,proto3" json:"ContainsSoy,omitempty"`
	AnimalDerived               bool `protobuf:"varint,21,opt,name=AnimalDerived,proto3" json:"AnimalDerived,omitempty"`
	RestrictToPreparations      bool `protobuf:"varint,22,opt,name=RestrictToPreparations,proto3" json:"RestrictToPreparations,omitempty"`
	ContainsSesame              bool `protobuf:"varint,23,opt,name=ContainsSesame,proto3" json:"ContainsSesame,omitempty"`
	ContainsFish                bool `protobuf:"varint,24,opt,name=ContainsFish,proto3" json:"ContainsFish,omitempty"`
	ContainsGluten              bool `protobuf:"varint,25,opt,name=ContainsGluten,proto3" json:"ContainsGluten,omitempty"`
	ContainsDairy               bool `protobuf:"varint,26,opt,name=ContainsDairy,proto3" json:"ContainsDairy,omitempty"`
	ContainsTreeNut             bool `protobuf:"varint,17,opt,name=ContainsTreeNut,proto3" json:"ContainsTreeNut,omitempty"`
	AnimalFlesh                 bool `protobuf:"varint,28,opt,name=AnimalFlesh,proto3" json:"AnimalFlesh,omitempty"`
	IsStarch                    bool `protobuf:"varint,29,opt,name=IsStarch,proto3" json:"IsStarch,omitempty"`
	IsProtein                   bool `protobuf:"varint,30,opt,name=IsProtein,proto3" json:"IsProtein,omitempty"`
	IsGrain                     bool `protobuf:"varint,31,opt,name=IsGrain,proto3" json:"IsGrain,omitempty"`
	IsFruit                     bool `protobuf:"varint,32,opt,name=IsFruit,proto3" json:"IsFruit,omitempty"`
	IsSalt                      bool `protobuf:"varint,33,opt,name=IsSalt,proto3" json:"IsSalt,omitempty"`
	IsFat                       bool `protobuf:"varint,34,opt,name=IsFat,proto3" json:"IsFat,omitempty"`
	IsAcid                      bool `protobuf:"varint,35,opt,name=IsAcid,proto3" json:"IsAcid,omitempty"`
	IsHeat                      bool `protobuf:"varint,36,opt,name=IsHeat,proto3" json:"IsHeat,omitempty"`
	IsLiquid                    bool `protobuf:"varint,15,opt,name=IsLiquid,proto3" json:"IsLiquid,omitempty"`
	ContainsShellfish           bool `protobuf:"varint,14,opt,name=ContainsShellfish,proto3" json:"ContainsShellfish,omitempty"`
}

func (x *ValidIngredient) Reset() {
	*x = ValidIngredient{}
	mi := &file_messages_eating_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredient) ProtoMessage() {}

func (x *ValidIngredient) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredient.ProtoReflect.Descriptor instead.
func (*ValidIngredient) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{1}
}

func (x *ValidIngredient) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidIngredient) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidIngredient) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidIngredient) GetStorageTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.StorageTemperatureInCelsius
	}
	return nil
}

func (x *ValidIngredient) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidIngredient) GetWarning() string {
	if x != nil {
		return x.Warning
	}
	return ""
}

func (x *ValidIngredient) GetPluralName() string {
	if x != nil {
		return x.PluralName
	}
	return ""
}

func (x *ValidIngredient) GetStorageInstructions() string {
	if x != nil {
		return x.StorageInstructions
	}
	return ""
}

func (x *ValidIngredient) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidIngredient) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidIngredient) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidIngredient) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidIngredient) GetShoppingSuggestions() string {
	if x != nil {
		return x.ShoppingSuggestions
	}
	return ""
}

func (x *ValidIngredient) GetContainsShellfish() bool {
	if x != nil {
		return x.ContainsShellfish
	}
	return false
}

func (x *ValidIngredient) GetIsLiquid() bool {
	if x != nil {
		return x.IsLiquid
	}
	return false
}

func (x *ValidIngredient) GetContainsPeanut() bool {
	if x != nil {
		return x.ContainsPeanut
	}
	return false
}

func (x *ValidIngredient) GetContainsTreeNut() bool {
	if x != nil {
		return x.ContainsTreeNut
	}
	return false
}

func (x *ValidIngredient) GetContainsEgg() bool {
	if x != nil {
		return x.ContainsEgg
	}
	return false
}

func (x *ValidIngredient) GetContainsWheat() bool {
	if x != nil {
		return x.ContainsWheat
	}
	return false
}

func (x *ValidIngredient) GetContainsSoy() bool {
	if x != nil {
		return x.ContainsSoy
	}
	return false
}

func (x *ValidIngredient) GetAnimalDerived() bool {
	if x != nil {
		return x.AnimalDerived
	}
	return false
}

func (x *ValidIngredient) GetRestrictToPreparations() bool {
	if x != nil {
		return x.RestrictToPreparations
	}
	return false
}

func (x *ValidIngredient) GetContainsSesame() bool {
	if x != nil {
		return x.ContainsSesame
	}
	return false
}

func (x *ValidIngredient) GetContainsFish() bool {
	if x != nil {
		return x.ContainsFish
	}
	return false
}

func (x *ValidIngredient) GetContainsGluten() bool {
	if x != nil {
		return x.ContainsGluten
	}
	return false
}

func (x *ValidIngredient) GetContainsDairy() bool {
	if x != nil {
		return x.ContainsDairy
	}
	return false
}

func (x *ValidIngredient) GetContainsAlcohol() bool {
	if x != nil {
		return x.ContainsAlcohol
	}
	return false
}

func (x *ValidIngredient) GetAnimalFlesh() bool {
	if x != nil {
		return x.AnimalFlesh
	}
	return false
}

func (x *ValidIngredient) GetIsStarch() bool {
	if x != nil {
		return x.IsStarch
	}
	return false
}

func (x *ValidIngredient) GetIsProtein() bool {
	if x != nil {
		return x.IsProtein
	}
	return false
}

func (x *ValidIngredient) GetIsGrain() bool {
	if x != nil {
		return x.IsGrain
	}
	return false
}

func (x *ValidIngredient) GetIsFruit() bool {
	if x != nil {
		return x.IsFruit
	}
	return false
}

func (x *ValidIngredient) GetIsSalt() bool {
	if x != nil {
		return x.IsSalt
	}
	return false
}

func (x *ValidIngredient) GetIsFat() bool {
	if x != nil {
		return x.IsFat
	}
	return false
}

func (x *ValidIngredient) GetIsAcid() bool {
	if x != nil {
		return x.IsAcid
	}
	return false
}

func (x *ValidIngredient) GetIsHeat() bool {
	if x != nil {
		return x.IsHeat
	}
	return false
}

type ValidIngredientCreationRequestInput struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	StorageTemperatureInCelsius *OptionalFloat32Range  `protobuf:"bytes,1,opt,name=StorageTemperatureInCelsius,proto3" json:"StorageTemperatureInCelsius,omitempty"`
	Warning                     string                 `protobuf:"bytes,2,opt,name=Warning,proto3" json:"Warning,omitempty"`
	IconPath                    string                 `protobuf:"bytes,3,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	PluralName                  string                 `protobuf:"bytes,4,opt,name=PluralName,proto3" json:"PluralName,omitempty"`
	StorageInstructions         string                 `protobuf:"bytes,5,opt,name=StorageInstructions,proto3" json:"StorageInstructions,omitempty"`
	Name                        string                 `protobuf:"bytes,6,opt,name=Name,proto3" json:"Name,omitempty"`
	Description                 string                 `protobuf:"bytes,7,opt,name=Description,proto3" json:"Description,omitempty"`
	Slug                        string                 `protobuf:"bytes,8,opt,name=Slug,proto3" json:"Slug,omitempty"`
	ShoppingSuggestions         string                 `protobuf:"bytes,9,opt,name=ShoppingSuggestions,proto3" json:"ShoppingSuggestions,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
	ContainsPeanut              bool `protobuf:"varint,16,opt,name=ContainsPeanut,proto3" json:"ContainsPeanut,omitempty"`
	ContainsAlcohol             bool `protobuf:"varint,23,opt,name=ContainsAlcohol,proto3" json:"ContainsAlcohol,omitempty"`
	IsLiquid                    bool `protobuf:"varint,14,opt,name=IsLiquid,proto3" json:"IsLiquid,omitempty"`
	ContainsSoy                 bool `protobuf:"varint,15,opt,name=ContainsSoy,proto3" json:"ContainsSoy,omitempty"`
	AnimalFlesh                 bool `protobuf:"varint,12,opt,name=AnimalFlesh,proto3" json:"AnimalFlesh,omitempty"`
	AnimalDerived               bool `protobuf:"varint,17,opt,name=AnimalDerived,proto3" json:"AnimalDerived,omitempty"`
	RestrictToPreparations      bool `protobuf:"varint,18,opt,name=RestrictToPreparations,proto3" json:"RestrictToPreparations,omitempty"`
	ContainsDairy               bool `protobuf:"varint,19,opt,name=ContainsDairy,proto3" json:"ContainsDairy,omitempty"`
	ContainsSesame              bool `protobuf:"varint,20,opt,name=ContainsSesame,proto3" json:"ContainsSesame,omitempty"`
	ContainsTreeNut             bool `protobuf:"varint,21,opt,name=ContainsTreeNut,proto3" json:"ContainsTreeNut,omitempty"`
	ContainsWheat               bool `protobuf:"varint,22,opt,name=ContainsWheat,proto3" json:"ContainsWheat,omitempty"`
	ContainsEgg                 bool `protobuf:"varint,13,opt,name=ContainsEgg,proto3" json:"ContainsEgg,omitempty"`
	ContainsGluten              bool `protobuf:"varint,24,opt,name=ContainsGluten,proto3" json:"ContainsGluten,omitempty"`
	IsStarch                    bool `protobuf:"varint,25,opt,name=IsStarch,proto3" json:"IsStarch,omitempty"`
	IsProtein                   bool `protobuf:"varint,26,opt,name=IsProtein,proto3" json:"IsProtein,omitempty"`
	IsGrain                     bool `protobuf:"varint,27,opt,name=IsGrain,proto3" json:"IsGrain,omitempty"`
	IsFruit                     bool `protobuf:"varint,28,opt,name=IsFruit,proto3" json:"IsFruit,omitempty"`
	IsSalt                      bool `protobuf:"varint,29,opt,name=IsSalt,proto3" json:"IsSalt,omitempty"`
	IsFat                       bool `protobuf:"varint,30,opt,name=IsFat,proto3" json:"IsFat,omitempty"`
	IsAcid                      bool `protobuf:"varint,31,opt,name=IsAcid,proto3" json:"IsAcid,omitempty"`
	IsHeat                      bool `protobuf:"varint,32,opt,name=IsHeat,proto3" json:"IsHeat,omitempty"`
	ContainsShellfish           bool `protobuf:"varint,11,opt,name=ContainsShellfish,proto3" json:"ContainsShellfish,omitempty"`
	ContainsFish                bool `protobuf:"varint,10,opt,name=ContainsFish,proto3" json:"ContainsFish,omitempty"`
}

func (x *ValidIngredientCreationRequestInput) Reset() {
	*x = ValidIngredientCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientCreationRequestInput) ProtoMessage() {}

func (x *ValidIngredientCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidIngredientCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{2}
}

func (x *ValidIngredientCreationRequestInput) GetStorageTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.StorageTemperatureInCelsius
	}
	return nil
}

func (x *ValidIngredientCreationRequestInput) GetWarning() string {
	if x != nil {
		return x.Warning
	}
	return ""
}

func (x *ValidIngredientCreationRequestInput) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidIngredientCreationRequestInput) GetPluralName() string {
	if x != nil {
		return x.PluralName
	}
	return ""
}

func (x *ValidIngredientCreationRequestInput) GetStorageInstructions() string {
	if x != nil {
		return x.StorageInstructions
	}
	return ""
}

func (x *ValidIngredientCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidIngredientCreationRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidIngredientCreationRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidIngredientCreationRequestInput) GetShoppingSuggestions() string {
	if x != nil {
		return x.ShoppingSuggestions
	}
	return ""
}

func (x *ValidIngredientCreationRequestInput) GetContainsFish() bool {
	if x != nil {
		return x.ContainsFish
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetContainsShellfish() bool {
	if x != nil {
		return x.ContainsShellfish
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetAnimalFlesh() bool {
	if x != nil {
		return x.AnimalFlesh
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetContainsEgg() bool {
	if x != nil {
		return x.ContainsEgg
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetIsLiquid() bool {
	if x != nil {
		return x.IsLiquid
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetContainsSoy() bool {
	if x != nil {
		return x.ContainsSoy
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetContainsPeanut() bool {
	if x != nil {
		return x.ContainsPeanut
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetAnimalDerived() bool {
	if x != nil {
		return x.AnimalDerived
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetRestrictToPreparations() bool {
	if x != nil {
		return x.RestrictToPreparations
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetContainsDairy() bool {
	if x != nil {
		return x.ContainsDairy
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetContainsSesame() bool {
	if x != nil {
		return x.ContainsSesame
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetContainsTreeNut() bool {
	if x != nil {
		return x.ContainsTreeNut
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetContainsWheat() bool {
	if x != nil {
		return x.ContainsWheat
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetContainsAlcohol() bool {
	if x != nil {
		return x.ContainsAlcohol
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetContainsGluten() bool {
	if x != nil {
		return x.ContainsGluten
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetIsStarch() bool {
	if x != nil {
		return x.IsStarch
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetIsProtein() bool {
	if x != nil {
		return x.IsProtein
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetIsGrain() bool {
	if x != nil {
		return x.IsGrain
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetIsFruit() bool {
	if x != nil {
		return x.IsFruit
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetIsSalt() bool {
	if x != nil {
		return x.IsSalt
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetIsFat() bool {
	if x != nil {
		return x.IsFat
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetIsAcid() bool {
	if x != nil {
		return x.IsAcid
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetIsHeat() bool {
	if x != nil {
		return x.IsHeat
	}
	return false
}

type ValidIngredientGroup struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp        `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	LastUpdatedAt *timestamppb.Timestamp        `protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	ArchivedAt    *timestamppb.Timestamp        `protobuf:"bytes,3,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	ID            string                        `protobuf:"bytes,4,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                        `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`
	Slug          string                        `protobuf:"bytes,6,opt,name=Slug,proto3" json:"Slug,omitempty"`
	Description   string                        `protobuf:"bytes,7,opt,name=Description,proto3" json:"Description,omitempty"`
	Members       []*ValidIngredientGroupMember `protobuf:"bytes,8,rep,name=Members,proto3" json:"Members,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidIngredientGroup) Reset() {
	*x = ValidIngredientGroup{}
	mi := &file_messages_eating_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientGroup) ProtoMessage() {}

func (x *ValidIngredientGroup) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientGroup.ProtoReflect.Descriptor instead.
func (*ValidIngredientGroup) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{3}
}

func (x *ValidIngredientGroup) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidIngredientGroup) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidIngredientGroup) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidIngredientGroup) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidIngredientGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidIngredientGroup) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidIngredientGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidIngredientGroup) GetMembers() []*ValidIngredientGroupMember {
	if x != nil {
		return x.Members
	}
	return nil
}

type ValidIngredientGroupCreationRequestInput struct {
	state         protoimpl.MessageState                            `protogen:"open.v1"`
	Name          string                                            `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Slug          string                                            `protobuf:"bytes,2,opt,name=Slug,proto3" json:"Slug,omitempty"`
	Description   string                                            `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Members       []*ValidIngredientGroupMemberCreationRequestInput `protobuf:"bytes,4,rep,name=Members,proto3" json:"Members,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidIngredientGroupCreationRequestInput) Reset() {
	*x = ValidIngredientGroupCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientGroupCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientGroupCreationRequestInput) ProtoMessage() {}

func (x *ValidIngredientGroupCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientGroupCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidIngredientGroupCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{4}
}

func (x *ValidIngredientGroupCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidIngredientGroupCreationRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidIngredientGroupCreationRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidIngredientGroupCreationRequestInput) GetMembers() []*ValidIngredientGroupMemberCreationRequestInput {
	if x != nil {
		return x.Members
	}
	return nil
}

type ValidIngredientGroupMember struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	ArchivedAt      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	ID              string                 `protobuf:"bytes,3,opt,name=ID,proto3" json:"ID,omitempty"`
	BelongsToGroup  string                 `protobuf:"bytes,4,opt,name=BelongsToGroup,proto3" json:"BelongsToGroup,omitempty"`
	ValidIngredient *ValidIngredient       `protobuf:"bytes,5,opt,name=ValidIngredient,proto3" json:"ValidIngredient,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ValidIngredientGroupMember) Reset() {
	*x = ValidIngredientGroupMember{}
	mi := &file_messages_eating_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientGroupMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientGroupMember) ProtoMessage() {}

func (x *ValidIngredientGroupMember) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientGroupMember.ProtoReflect.Descriptor instead.
func (*ValidIngredientGroupMember) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{5}
}

func (x *ValidIngredientGroupMember) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidIngredientGroupMember) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidIngredientGroupMember) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidIngredientGroupMember) GetBelongsToGroup() string {
	if x != nil {
		return x.BelongsToGroup
	}
	return ""
}

func (x *ValidIngredientGroupMember) GetValidIngredient() *ValidIngredient {
	if x != nil {
		return x.ValidIngredient
	}
	return nil
}

type ValidIngredientGroupMemberCreationRequestInput struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientID string                 `protobuf:"bytes,1,opt,name=ValidIngredientID,proto3" json:"ValidIngredientID,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ValidIngredientGroupMemberCreationRequestInput) Reset() {
	*x = ValidIngredientGroupMemberCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientGroupMemberCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientGroupMemberCreationRequestInput) ProtoMessage() {}

func (x *ValidIngredientGroupMemberCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientGroupMemberCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidIngredientGroupMemberCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{6}
}

func (x *ValidIngredientGroupMemberCreationRequestInput) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

type ValidIngredientGroupUpdateRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Slug          string                 `protobuf:"bytes,2,opt,name=Slug,proto3" json:"Slug,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidIngredientGroupUpdateRequestInput) Reset() {
	*x = ValidIngredientGroupUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientGroupUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientGroupUpdateRequestInput) ProtoMessage() {}

func (x *ValidIngredientGroupUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientGroupUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ValidIngredientGroupUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{7}
}

func (x *ValidIngredientGroupUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidIngredientGroupUpdateRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidIngredientGroupUpdateRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ValidIngredientMeasurementUnit struct {
	state             protoimpl.MessageState       `protogen:"open.v1"`
	CreatedAt         *timestamppb.Timestamp       `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	LastUpdatedAt     *timestamppb.Timestamp       `protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	ArchivedAt        *timestamppb.Timestamp       `protobuf:"bytes,3,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	Notes             string                       `protobuf:"bytes,4,opt,name=Notes,proto3" json:"Notes,omitempty"`
	ID                string                       `protobuf:"bytes,5,opt,name=ID,proto3" json:"ID,omitempty"`
	AllowableQuantity *Float32RangeWithOptionalMax `protobuf:"bytes,6,opt,name=AllowableQuantity,proto3" json:"AllowableQuantity,omitempty"`
	MeasurementUnit   *ValidMeasurementUnit        `protobuf:"bytes,7,opt,name=MeasurementUnit,proto3" json:"MeasurementUnit,omitempty"`
	Ingredient        *ValidIngredient             `protobuf:"bytes,8,opt,name=Ingredient,proto3" json:"Ingredient,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ValidIngredientMeasurementUnit) Reset() {
	*x = ValidIngredientMeasurementUnit{}
	mi := &file_messages_eating_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientMeasurementUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientMeasurementUnit) ProtoMessage() {}

func (x *ValidIngredientMeasurementUnit) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientMeasurementUnit.ProtoReflect.Descriptor instead.
func (*ValidIngredientMeasurementUnit) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{8}
}

func (x *ValidIngredientMeasurementUnit) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidIngredientMeasurementUnit) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidIngredientMeasurementUnit) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidIngredientMeasurementUnit) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidIngredientMeasurementUnit) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidIngredientMeasurementUnit) GetAllowableQuantity() *Float32RangeWithOptionalMax {
	if x != nil {
		return x.AllowableQuantity
	}
	return nil
}

func (x *ValidIngredientMeasurementUnit) GetMeasurementUnit() *ValidMeasurementUnit {
	if x != nil {
		return x.MeasurementUnit
	}
	return nil
}

func (x *ValidIngredientMeasurementUnit) GetIngredient() *ValidIngredient {
	if x != nil {
		return x.Ingredient
	}
	return nil
}

type ValidIngredientMeasurementUnitCreationRequestInput struct {
	state                  protoimpl.MessageState       `protogen:"open.v1"`
	Notes                  string                       `protobuf:"bytes,1,opt,name=Notes,proto3" json:"Notes,omitempty"`
	ValidMeasurementUnitID string                       `protobuf:"bytes,2,opt,name=ValidMeasurementUnitID,proto3" json:"ValidMeasurementUnitID,omitempty"`
	ValidIngredientID      string                       `protobuf:"bytes,3,opt,name=ValidIngredientID,proto3" json:"ValidIngredientID,omitempty"`
	AllowableQuantity      *Float32RangeWithOptionalMax `protobuf:"bytes,4,opt,name=AllowableQuantity,proto3" json:"AllowableQuantity,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ValidIngredientMeasurementUnitCreationRequestInput) Reset() {
	*x = ValidIngredientMeasurementUnitCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientMeasurementUnitCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientMeasurementUnitCreationRequestInput) ProtoMessage() {}

func (x *ValidIngredientMeasurementUnitCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientMeasurementUnitCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidIngredientMeasurementUnitCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{9}
}

func (x *ValidIngredientMeasurementUnitCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidIngredientMeasurementUnitCreationRequestInput) GetValidMeasurementUnitID() string {
	if x != nil {
		return x.ValidMeasurementUnitID
	}
	return ""
}

func (x *ValidIngredientMeasurementUnitCreationRequestInput) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

func (x *ValidIngredientMeasurementUnitCreationRequestInput) GetAllowableQuantity() *Float32RangeWithOptionalMax {
	if x != nil {
		return x.AllowableQuantity
	}
	return nil
}

type ValidIngredientMeasurementUnitUpdateRequestInput struct {
	state                  protoimpl.MessageState                         `protogen:"open.v1"`
	Notes                  string                                         `protobuf:"bytes,1,opt,name=Notes,proto3" json:"Notes,omitempty"`
	ValidMeasurementUnitID string                                         `protobuf:"bytes,2,opt,name=ValidMeasurementUnitID,proto3" json:"ValidMeasurementUnitID,omitempty"`
	ValidIngredientID      string                                         `protobuf:"bytes,3,opt,name=ValidIngredientID,proto3" json:"ValidIngredientID,omitempty"`
	AllowableQuantity      *Float32RangeWithOptionalMaxUpdateRequestInput `protobuf:"bytes,4,opt,name=AllowableQuantity,proto3" json:"AllowableQuantity,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ValidIngredientMeasurementUnitUpdateRequestInput) Reset() {
	*x = ValidIngredientMeasurementUnitUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientMeasurementUnitUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientMeasurementUnitUpdateRequestInput) ProtoMessage() {}

func (x *ValidIngredientMeasurementUnitUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientMeasurementUnitUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ValidIngredientMeasurementUnitUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{10}
}

func (x *ValidIngredientMeasurementUnitUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidIngredientMeasurementUnitUpdateRequestInput) GetValidMeasurementUnitID() string {
	if x != nil {
		return x.ValidMeasurementUnitID
	}
	return ""
}

func (x *ValidIngredientMeasurementUnitUpdateRequestInput) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

func (x *ValidIngredientMeasurementUnitUpdateRequestInput) GetAllowableQuantity() *Float32RangeWithOptionalMaxUpdateRequestInput {
	if x != nil {
		return x.AllowableQuantity
	}
	return nil
}

type ValidIngredientPreparation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	LastUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	ArchivedAt    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	Notes         string                 `protobuf:"bytes,4,opt,name=Notes,proto3" json:"Notes,omitempty"`
	ID            string                 `protobuf:"bytes,5,opt,name=ID,proto3" json:"ID,omitempty"`
	Preparation   *ValidPreparation      `protobuf:"bytes,6,opt,name=Preparation,proto3" json:"Preparation,omitempty"`
	Ingredient    *ValidIngredient       `protobuf:"bytes,7,opt,name=Ingredient,proto3" json:"Ingredient,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidIngredientPreparation) Reset() {
	*x = ValidIngredientPreparation{}
	mi := &file_messages_eating_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientPreparation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientPreparation) ProtoMessage() {}

func (x *ValidIngredientPreparation) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientPreparation.ProtoReflect.Descriptor instead.
func (*ValidIngredientPreparation) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{11}
}

func (x *ValidIngredientPreparation) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidIngredientPreparation) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidIngredientPreparation) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidIngredientPreparation) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidIngredientPreparation) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidIngredientPreparation) GetPreparation() *ValidPreparation {
	if x != nil {
		return x.Preparation
	}
	return nil
}

func (x *ValidIngredientPreparation) GetIngredient() *ValidIngredient {
	if x != nil {
		return x.Ingredient
	}
	return nil
}

type ValidIngredientPreparationCreationRequestInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Notes              string                 `protobuf:"bytes,1,opt,name=Notes,proto3" json:"Notes,omitempty"`
	ValidPreparationID string                 `protobuf:"bytes,2,opt,name=ValidPreparationID,proto3" json:"ValidPreparationID,omitempty"`
	ValidIngredientID  string                 `protobuf:"bytes,3,opt,name=ValidIngredientID,proto3" json:"ValidIngredientID,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ValidIngredientPreparationCreationRequestInput) Reset() {
	*x = ValidIngredientPreparationCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientPreparationCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientPreparationCreationRequestInput) ProtoMessage() {}

func (x *ValidIngredientPreparationCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientPreparationCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidIngredientPreparationCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{12}
}

func (x *ValidIngredientPreparationCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidIngredientPreparationCreationRequestInput) GetValidPreparationID() string {
	if x != nil {
		return x.ValidPreparationID
	}
	return ""
}

func (x *ValidIngredientPreparationCreationRequestInput) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

type ValidIngredientPreparationUpdateRequestInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Notes              string                 `protobuf:"bytes,1,opt,name=Notes,proto3" json:"Notes,omitempty"`
	ValidPreparationID string                 `protobuf:"bytes,2,opt,name=ValidPreparationID,proto3" json:"ValidPreparationID,omitempty"`
	ValidIngredientID  string                 `protobuf:"bytes,3,opt,name=ValidIngredientID,proto3" json:"ValidIngredientID,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ValidIngredientPreparationUpdateRequestInput) Reset() {
	*x = ValidIngredientPreparationUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientPreparationUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientPreparationUpdateRequestInput) ProtoMessage() {}

func (x *ValidIngredientPreparationUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientPreparationUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ValidIngredientPreparationUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{13}
}

func (x *ValidIngredientPreparationUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidIngredientPreparationUpdateRequestInput) GetValidPreparationID() string {
	if x != nil {
		return x.ValidPreparationID
	}
	return ""
}

func (x *ValidIngredientPreparationUpdateRequestInput) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

type ValidIngredientState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	ArchivedAt    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	LastUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	PastTense     string                 `protobuf:"bytes,4,opt,name=PastTense,proto3" json:"PastTense,omitempty"`
	Description   string                 `protobuf:"bytes,5,opt,name=Description,proto3" json:"Description,omitempty"`
	IconPath      string                 `protobuf:"bytes,6,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	ID            string                 `protobuf:"bytes,7,opt,name=ID,proto3" json:"ID,omitempty"`
	Name          string                 `protobuf:"bytes,8,opt,name=Name,proto3" json:"Name,omitempty"`
	AttributeType string                 `protobuf:"bytes,9,opt,name=AttributeType,proto3" json:"AttributeType,omitempty"`
	Slug          string                 `protobuf:"bytes,10,opt,name=Slug,proto3" json:"Slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidIngredientState) Reset() {
	*x = ValidIngredientState{}
	mi := &file_messages_eating_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientState) ProtoMessage() {}

func (x *ValidIngredientState) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientState.ProtoReflect.Descriptor instead.
func (*ValidIngredientState) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{14}
}

func (x *ValidIngredientState) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidIngredientState) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidIngredientState) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidIngredientState) GetPastTense() string {
	if x != nil {
		return x.PastTense
	}
	return ""
}

func (x *ValidIngredientState) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidIngredientState) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidIngredientState) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidIngredientState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidIngredientState) GetAttributeType() string {
	if x != nil {
		return x.AttributeType
	}
	return ""
}

func (x *ValidIngredientState) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type ValidIngredientStateCreationRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Slug          string                 `protobuf:"bytes,2,opt,name=Slug,proto3" json:"Slug,omitempty"`
	PastTense     string                 `protobuf:"bytes,3,opt,name=PastTense,proto3" json:"PastTense,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	AttributeType string                 `protobuf:"bytes,5,opt,name=AttributeType,proto3" json:"AttributeType,omitempty"`
	IconPath      string                 `protobuf:"bytes,6,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidIngredientStateCreationRequestInput) Reset() {
	*x = ValidIngredientStateCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientStateCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientStateCreationRequestInput) ProtoMessage() {}

func (x *ValidIngredientStateCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientStateCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidIngredientStateCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{15}
}

func (x *ValidIngredientStateCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidIngredientStateCreationRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidIngredientStateCreationRequestInput) GetPastTense() string {
	if x != nil {
		return x.PastTense
	}
	return ""
}

func (x *ValidIngredientStateCreationRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidIngredientStateCreationRequestInput) GetAttributeType() string {
	if x != nil {
		return x.AttributeType
	}
	return ""
}

func (x *ValidIngredientStateCreationRequestInput) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

type ValidIngredientStateIngredient struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	LastUpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	ArchivedAt      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	Notes           string                 `protobuf:"bytes,4,opt,name=Notes,proto3" json:"Notes,omitempty"`
	ID              string                 `protobuf:"bytes,5,opt,name=ID,proto3" json:"ID,omitempty"`
	IngredientState *ValidIngredientState  `protobuf:"bytes,6,opt,name=IngredientState,proto3" json:"IngredientState,omitempty"`
	Ingredient      *ValidIngredient       `protobuf:"bytes,7,opt,name=Ingredient,proto3" json:"Ingredient,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ValidIngredientStateIngredient) Reset() {
	*x = ValidIngredientStateIngredient{}
	mi := &file_messages_eating_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientStateIngredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientStateIngredient) ProtoMessage() {}

func (x *ValidIngredientStateIngredient) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientStateIngredient.ProtoReflect.Descriptor instead.
func (*ValidIngredientStateIngredient) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{16}
}

func (x *ValidIngredientStateIngredient) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidIngredientStateIngredient) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidIngredientStateIngredient) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidIngredientStateIngredient) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidIngredientStateIngredient) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidIngredientStateIngredient) GetIngredientState() *ValidIngredientState {
	if x != nil {
		return x.IngredientState
	}
	return nil
}

func (x *ValidIngredientStateIngredient) GetIngredient() *ValidIngredient {
	if x != nil {
		return x.Ingredient
	}
	return nil
}

type ValidIngredientStateIngredientCreationRequestInput struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Notes                  string                 `protobuf:"bytes,1,opt,name=Notes,proto3" json:"Notes,omitempty"`
	ValidIngredientStateID string                 `protobuf:"bytes,2,opt,name=ValidIngredientStateID,proto3" json:"ValidIngredientStateID,omitempty"`
	ValidIngredientID      string                 `protobuf:"bytes,3,opt,name=ValidIngredientID,proto3" json:"ValidIngredientID,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ValidIngredientStateIngredientCreationRequestInput) Reset() {
	*x = ValidIngredientStateIngredientCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientStateIngredientCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientStateIngredientCreationRequestInput) ProtoMessage() {}

func (x *ValidIngredientStateIngredientCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientStateIngredientCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidIngredientStateIngredientCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{17}
}

func (x *ValidIngredientStateIngredientCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidIngredientStateIngredientCreationRequestInput) GetValidIngredientStateID() string {
	if x != nil {
		return x.ValidIngredientStateID
	}
	return ""
}

func (x *ValidIngredientStateIngredientCreationRequestInput) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

type ValidIngredientStateIngredientUpdateRequestInput struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Notes                  string                 `protobuf:"bytes,1,opt,name=Notes,proto3" json:"Notes,omitempty"`
	ValidIngredientStateID string                 `protobuf:"bytes,2,opt,name=ValidIngredientStateID,proto3" json:"ValidIngredientStateID,omitempty"`
	ValidIngredientID      string                 `protobuf:"bytes,3,opt,name=ValidIngredientID,proto3" json:"ValidIngredientID,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ValidIngredientStateIngredientUpdateRequestInput) Reset() {
	*x = ValidIngredientStateIngredientUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientStateIngredientUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientStateIngredientUpdateRequestInput) ProtoMessage() {}

func (x *ValidIngredientStateIngredientUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientStateIngredientUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ValidIngredientStateIngredientUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{18}
}

func (x *ValidIngredientStateIngredientUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidIngredientStateIngredientUpdateRequestInput) GetValidIngredientStateID() string {
	if x != nil {
		return x.ValidIngredientStateID
	}
	return ""
}

func (x *ValidIngredientStateIngredientUpdateRequestInput) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

type ValidIngredientStateUpdateRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Slug          string                 `protobuf:"bytes,2,opt,name=Slug,proto3" json:"Slug,omitempty"`
	PastTense     string                 `protobuf:"bytes,3,opt,name=PastTense,proto3" json:"PastTense,omitempty"`
	Description   string                 `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	AttributeType string                 `protobuf:"bytes,5,opt,name=AttributeType,proto3" json:"AttributeType,omitempty"`
	IconPath      string                 `protobuf:"bytes,6,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidIngredientStateUpdateRequestInput) Reset() {
	*x = ValidIngredientStateUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientStateUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientStateUpdateRequestInput) ProtoMessage() {}

func (x *ValidIngredientStateUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientStateUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ValidIngredientStateUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{19}
}

func (x *ValidIngredientStateUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidIngredientStateUpdateRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidIngredientStateUpdateRequestInput) GetPastTense() string {
	if x != nil {
		return x.PastTense
	}
	return ""
}

func (x *ValidIngredientStateUpdateRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidIngredientStateUpdateRequestInput) GetAttributeType() string {
	if x != nil {
		return x.AttributeType
	}
	return ""
}

func (x *ValidIngredientStateUpdateRequestInput) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

type ValidIngredientUpdateRequestInput struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	StorageTemperatureInCelsius *OptionalFloat32Range  `protobuf:"bytes,20,opt,name=StorageTemperatureInCelsius,proto3" json:"StorageTemperatureInCelsius,omitempty"`
	PluralName                  string                 `protobuf:"bytes,17,opt,name=PluralName,proto3" json:"PluralName,omitempty"`
	Name                        string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Description                 string                 `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	Warning                     string                 `protobuf:"bytes,3,opt,name=Warning,proto3" json:"Warning,omitempty"`
	IconPath                    string                 `protobuf:"bytes,4,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	ShoppingSuggestions         string                 `protobuf:"bytes,24,opt,name=ShoppingSuggestions,proto3" json:"ShoppingSuggestions,omitempty"`
	Slug                        string                 `protobuf:"bytes,22,opt,name=Slug,proto3" json:"Slug,omitempty"`
	StorageInstructions         string                 `protobuf:"bytes,21,opt,name=StorageInstructions,proto3" json:"StorageInstructions,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
	ContainsEgg                 bool `protobuf:"varint,8,opt,name=ContainsEgg,proto3" json:"ContainsEgg,omitempty"`
	ContainsAlcohol             bool `protobuf:"varint,23,opt,name=ContainsAlcohol,proto3" json:"ContainsAlcohol,omitempty"`
	AnimalFlesh                 bool `protobuf:"varint,14,opt,name=AnimalFlesh,proto3" json:"AnimalFlesh,omitempty"`
	IsLiquid                    bool `protobuf:"varint,15,opt,name=IsLiquid,proto3" json:"IsLiquid,omitempty"`
	ContainsSoy                 bool `protobuf:"varint,16,opt,name=ContainsSoy,proto3" json:"ContainsSoy,omitempty"`
	ContainsFish                bool `protobuf:"varint,12,opt,name=ContainsFish,proto3" json:"ContainsFish,omitempty"`
	AnimalDerived               bool `protobuf:"varint,18,opt,name=AnimalDerived,proto3" json:"AnimalDerived,omitempty"`
	RestrictToPreparations      bool `protobuf:"varint,19,opt,name=RestrictToPreparations,proto3" json:"RestrictToPreparations,omitempty"`
	ContainsSesame              bool `protobuf:"varint,11,opt,name=ContainsSesame,proto3" json:"ContainsSesame,omitempty"`
	ContainsShellfish           bool `protobuf:"varint,10,opt,name=ContainsShellfish,proto3" json:"ContainsShellfish,omitempty"`
	ContainsWheat               bool `protobuf:"varint,9,opt,name=ContainsWheat,proto3" json:"ContainsWheat,omitempty"`
	ContainsGluten              bool `protobuf:"varint,13,opt,name=ContainsGluten,proto3" json:"ContainsGluten,omitempty"`
	ContainsTreeNut             bool `protobuf:"varint,7,opt,name=ContainsTreeNut,proto3" json:"ContainsTreeNut,omitempty"`
	IsStarch                    bool `protobuf:"varint,25,opt,name=IsStarch,proto3" json:"IsStarch,omitempty"`
	IsProtein                   bool `protobuf:"varint,26,opt,name=IsProtein,proto3" json:"IsProtein,omitempty"`
	IsGrain                     bool `protobuf:"varint,27,opt,name=IsGrain,proto3" json:"IsGrain,omitempty"`
	IsFruit                     bool `protobuf:"varint,28,opt,name=IsFruit,proto3" json:"IsFruit,omitempty"`
	IsSalt                      bool `protobuf:"varint,29,opt,name=IsSalt,proto3" json:"IsSalt,omitempty"`
	IsFat                       bool `protobuf:"varint,30,opt,name=IsFat,proto3" json:"IsFat,omitempty"`
	IsAcid                      bool `protobuf:"varint,31,opt,name=IsAcid,proto3" json:"IsAcid,omitempty"`
	IsHeat                      bool `protobuf:"varint,32,opt,name=IsHeat,proto3" json:"IsHeat,omitempty"`
	ContainsPeanut              bool `protobuf:"varint,6,opt,name=ContainsPeanut,proto3" json:"ContainsPeanut,omitempty"`
	ContainsDairy               bool `protobuf:"varint,5,opt,name=ContainsDairy,proto3" json:"ContainsDairy,omitempty"`
}

func (x *ValidIngredientUpdateRequestInput) Reset() {
	*x = ValidIngredientUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientUpdateRequestInput) ProtoMessage() {}

func (x *ValidIngredientUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ValidIngredientUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{20}
}

func (x *ValidIngredientUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidIngredientUpdateRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidIngredientUpdateRequestInput) GetWarning() string {
	if x != nil {
		return x.Warning
	}
	return ""
}

func (x *ValidIngredientUpdateRequestInput) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidIngredientUpdateRequestInput) GetContainsDairy() bool {
	if x != nil {
		return x.ContainsDairy
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetContainsPeanut() bool {
	if x != nil {
		return x.ContainsPeanut
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetContainsTreeNut() bool {
	if x != nil {
		return x.ContainsTreeNut
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetContainsEgg() bool {
	if x != nil {
		return x.ContainsEgg
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetContainsWheat() bool {
	if x != nil {
		return x.ContainsWheat
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetContainsShellfish() bool {
	if x != nil {
		return x.ContainsShellfish
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetContainsSesame() bool {
	if x != nil {
		return x.ContainsSesame
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetContainsFish() bool {
	if x != nil {
		return x.ContainsFish
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetContainsGluten() bool {
	if x != nil {
		return x.ContainsGluten
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetAnimalFlesh() bool {
	if x != nil {
		return x.AnimalFlesh
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetIsLiquid() bool {
	if x != nil {
		return x.IsLiquid
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetContainsSoy() bool {
	if x != nil {
		return x.ContainsSoy
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetPluralName() string {
	if x != nil {
		return x.PluralName
	}
	return ""
}

func (x *ValidIngredientUpdateRequestInput) GetAnimalDerived() bool {
	if x != nil {
		return x.AnimalDerived
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetRestrictToPreparations() bool {
	if x != nil {
		return x.RestrictToPreparations
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetStorageTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.StorageTemperatureInCelsius
	}
	return nil
}

func (x *ValidIngredientUpdateRequestInput) GetStorageInstructions() string {
	if x != nil {
		return x.StorageInstructions
	}
	return ""
}

func (x *ValidIngredientUpdateRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidIngredientUpdateRequestInput) GetContainsAlcohol() bool {
	if x != nil {
		return x.ContainsAlcohol
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetShoppingSuggestions() string {
	if x != nil {
		return x.ShoppingSuggestions
	}
	return ""
}

func (x *ValidIngredientUpdateRequestInput) GetIsStarch() bool {
	if x != nil {
		return x.IsStarch
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetIsProtein() bool {
	if x != nil {
		return x.IsProtein
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetIsGrain() bool {
	if x != nil {
		return x.IsGrain
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetIsFruit() bool {
	if x != nil {
		return x.IsFruit
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetIsSalt() bool {
	if x != nil {
		return x.IsSalt
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetIsFat() bool {
	if x != nil {
		return x.IsFat
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetIsAcid() bool {
	if x != nil {
		return x.IsAcid
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetIsHeat() bool {
	if x != nil {
		return x.IsHeat
	}
	return false
}

type ValidInstrument struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt                      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	LastUpdatedAt                  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	ArchivedAt                     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	Name                           string                 `protobuf:"bytes,6,opt,name=Name,proto3" json:"Name,omitempty"`
	ID                             string                 `protobuf:"bytes,5,opt,name=ID,proto3" json:"ID,omitempty"`
	IconPath                       string                 `protobuf:"bytes,4,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	PluralName                     string                 `protobuf:"bytes,7,opt,name=PluralName,proto3" json:"PluralName,omitempty"`
	Description                    string                 `protobuf:"bytes,8,opt,name=Description,proto3" json:"Description,omitempty"`
	Slug                           string                 `protobuf:"bytes,9,opt,name=Slug,proto3" json:"Slug,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
	DisplayInSummaryLists          bool `protobuf:"varint,10,opt,name=DisplayInSummaryLists,proto3" json:"DisplayInSummaryLists,omitempty"`
	IncludeInGeneratedInstructions bool `protobuf:"varint,11,opt,name=IncludeInGeneratedInstructions,proto3" json:"IncludeInGeneratedInstructions,omitempty"`
	UsableForStorage               bool `protobuf:"varint,12,opt,name=UsableForStorage,proto3" json:"UsableForStorage,omitempty"`
}

func (x *ValidInstrument) Reset() {
	*x = ValidInstrument{}
	mi := &file_messages_eating_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidInstrument) ProtoMessage() {}

func (x *ValidInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidInstrument.ProtoReflect.Descriptor instead.
func (*ValidInstrument) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{21}
}

func (x *ValidInstrument) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidInstrument) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidInstrument) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidInstrument) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidInstrument) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidInstrument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidInstrument) GetPluralName() string {
	if x != nil {
		return x.PluralName
	}
	return ""
}

func (x *ValidInstrument) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidInstrument) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidInstrument) GetDisplayInSummaryLists() bool {
	if x != nil {
		return x.DisplayInSummaryLists
	}
	return false
}

func (x *ValidInstrument) GetIncludeInGeneratedInstructions() bool {
	if x != nil {
		return x.IncludeInGeneratedInstructions
	}
	return false
}

func (x *ValidInstrument) GetUsableForStorage() bool {
	if x != nil {
		return x.UsableForStorage
	}
	return false
}

type ValidInstrumentCreationRequestInput struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	Name                           string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	PluralName                     string                 `protobuf:"bytes,2,opt,name=PluralName,proto3" json:"PluralName,omitempty"`
	Description                    string                 `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	IconPath                       string                 `protobuf:"bytes,4,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	Slug                           string                 `protobuf:"bytes,5,opt,name=Slug,proto3" json:"Slug,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
	DisplayInSummaryLists          bool `protobuf:"varint,6,opt,name=DisplayInSummaryLists,proto3" json:"DisplayInSummaryLists,omitempty"`
	IncludeInGeneratedInstructions bool `protobuf:"varint,7,opt,name=IncludeInGeneratedInstructions,proto3" json:"IncludeInGeneratedInstructions,omitempty"`
	UsableForStorage               bool `protobuf:"varint,8,opt,name=UsableForStorage,proto3" json:"UsableForStorage,omitempty"`
}

func (x *ValidInstrumentCreationRequestInput) Reset() {
	*x = ValidInstrumentCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidInstrumentCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidInstrumentCreationRequestInput) ProtoMessage() {}

func (x *ValidInstrumentCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidInstrumentCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidInstrumentCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{22}
}

func (x *ValidInstrumentCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidInstrumentCreationRequestInput) GetPluralName() string {
	if x != nil {
		return x.PluralName
	}
	return ""
}

func (x *ValidInstrumentCreationRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidInstrumentCreationRequestInput) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidInstrumentCreationRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidInstrumentCreationRequestInput) GetDisplayInSummaryLists() bool {
	if x != nil {
		return x.DisplayInSummaryLists
	}
	return false
}

func (x *ValidInstrumentCreationRequestInput) GetIncludeInGeneratedInstructions() bool {
	if x != nil {
		return x.IncludeInGeneratedInstructions
	}
	return false
}

func (x *ValidInstrumentCreationRequestInput) GetUsableForStorage() bool {
	if x != nil {
		return x.UsableForStorage
	}
	return false
}

type ValidInstrumentUpdateRequestInput struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	Name                           string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	PluralName                     string                 `protobuf:"bytes,2,opt,name=PluralName,proto3" json:"PluralName,omitempty"`
	Description                    string                 `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	IconPath                       string                 `protobuf:"bytes,4,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	Slug                           string                 `protobuf:"bytes,5,opt,name=Slug,proto3" json:"Slug,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
	UsableForStorage               bool `protobuf:"varint,6,opt,name=UsableForStorage,proto3" json:"UsableForStorage,omitempty"`
	DisplayInSummaryLists          bool `protobuf:"varint,7,opt,name=DisplayInSummaryLists,proto3" json:"DisplayInSummaryLists,omitempty"`
	IncludeInGeneratedInstructions bool `protobuf:"varint,8,opt,name=IncludeInGeneratedInstructions,proto3" json:"IncludeInGeneratedInstructions,omitempty"`
}

func (x *ValidInstrumentUpdateRequestInput) Reset() {
	*x = ValidInstrumentUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidInstrumentUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidInstrumentUpdateRequestInput) ProtoMessage() {}

func (x *ValidInstrumentUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidInstrumentUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ValidInstrumentUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{23}
}

func (x *ValidInstrumentUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidInstrumentUpdateRequestInput) GetPluralName() string {
	if x != nil {
		return x.PluralName
	}
	return ""
}

func (x *ValidInstrumentUpdateRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidInstrumentUpdateRequestInput) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidInstrumentUpdateRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidInstrumentUpdateRequestInput) GetUsableForStorage() bool {
	if x != nil {
		return x.UsableForStorage
	}
	return false
}

func (x *ValidInstrumentUpdateRequestInput) GetDisplayInSummaryLists() bool {
	if x != nil {
		return x.DisplayInSummaryLists
	}
	return false
}

func (x *ValidInstrumentUpdateRequestInput) GetIncludeInGeneratedInstructions() bool {
	if x != nil {
		return x.IncludeInGeneratedInstructions
	}
	return false
}

type ValidMeasurementUnit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	LastUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	ArchivedAt    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	PluralName    string                 `protobuf:"bytes,8,opt,name=PluralName,proto3" json:"PluralName,omitempty"`
	IconPath      string                 `protobuf:"bytes,5,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	ID            string                 `protobuf:"bytes,6,opt,name=ID,proto3" json:"ID,omitempty"`
	Description   string                 `protobuf:"bytes,7,opt,name=Description,proto3" json:"Description,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	Slug          string                 `protobuf:"bytes,9,opt,name=Slug,proto3" json:"Slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
	Volumetric    bool `protobuf:"varint,10,opt,name=Volumetric,proto3" json:"Volumetric,omitempty"`
	Universal     bool `protobuf:"varint,11,opt,name=Universal,proto3" json:"Universal,omitempty"`
	Metric        bool `protobuf:"varint,12,opt,name=Metric,proto3" json:"Metric,omitempty"`
	Imperial      bool `protobuf:"varint,13,opt,name=Imperial,proto3" json:"Imperial,omitempty"`
}

func (x *ValidMeasurementUnit) Reset() {
	*x = ValidMeasurementUnit{}
	mi := &file_messages_eating_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidMeasurementUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidMeasurementUnit) ProtoMessage() {}

func (x *ValidMeasurementUnit) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidMeasurementUnit.ProtoReflect.Descriptor instead.
func (*ValidMeasurementUnit) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{24}
}

func (x *ValidMeasurementUnit) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidMeasurementUnit) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidMeasurementUnit) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidMeasurementUnit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidMeasurementUnit) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidMeasurementUnit) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidMeasurementUnit) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidMeasurementUnit) GetPluralName() string {
	if x != nil {
		return x.PluralName
	}
	return ""
}

func (x *ValidMeasurementUnit) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidMeasurementUnit) GetVolumetric() bool {
	if x != nil {
		return x.Volumetric
	}
	return false
}

func (x *ValidMeasurementUnit) GetUniversal() bool {
	if x != nil {
		return x.Universal
	}
	return false
}

func (x *ValidMeasurementUnit) GetMetric() bool {
	if x != nil {
		return x.Metric
	}
	return false
}

func (x *ValidMeasurementUnit) GetImperial() bool {
	if x != nil {
		return x.Imperial
	}
	return false
}

type ValidMeasurementUnitConversion struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	LastUpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	ArchivedAt        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	OnlyForIngredient *ValidIngredient       `protobuf:"bytes,4,opt,name=OnlyForIngredient,proto3" json:"OnlyForIngredient,omitempty"`
	From              *ValidMeasurementUnit  `protobuf:"bytes,7,opt,name=From,proto3" json:"From,omitempty"`
	To                *ValidMeasurementUnit  `protobuf:"bytes,8,opt,name=To,proto3" json:"To,omitempty"`
	Notes             string                 `protobuf:"bytes,5,opt,name=Notes,proto3" json:"Notes,omitempty"`
	ID                string                 `protobuf:"bytes,6,opt,name=ID,proto3" json:"ID,omitempty"`
	unknownFields     protoimpl.UnknownFields
	Modifier          float32 `protobuf:"fixed32,9,opt,name=Modifier,proto3" json:"Modifier,omitempty"`
	sizeCache         protoimpl.SizeCache
}

func (x *ValidMeasurementUnitConversion) Reset() {
	*x = ValidMeasurementUnitConversion{}
	mi := &file_messages_eating_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidMeasurementUnitConversion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidMeasurementUnitConversion) ProtoMessage() {}

func (x *ValidMeasurementUnitConversion) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidMeasurementUnitConversion.ProtoReflect.Descriptor instead.
func (*ValidMeasurementUnitConversion) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{25}
}

func (x *ValidMeasurementUnitConversion) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidMeasurementUnitConversion) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidMeasurementUnitConversion) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidMeasurementUnitConversion) GetOnlyForIngredient() *ValidIngredient {
	if x != nil {
		return x.OnlyForIngredient
	}
	return nil
}

func (x *ValidMeasurementUnitConversion) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidMeasurementUnitConversion) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidMeasurementUnitConversion) GetFrom() *ValidMeasurementUnit {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ValidMeasurementUnitConversion) GetTo() *ValidMeasurementUnit {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *ValidMeasurementUnitConversion) GetModifier() float32 {
	if x != nil {
		return x.Modifier
	}
	return 0
}

type ValidMeasurementUnitConversionCreationRequestInput struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OnlyForIngredient string                 `protobuf:"bytes,1,opt,name=OnlyForIngredient,proto3" json:"OnlyForIngredient,omitempty"`
	From              string                 `protobuf:"bytes,2,opt,name=From,proto3" json:"From,omitempty"`
	To                string                 `protobuf:"bytes,3,opt,name=To,proto3" json:"To,omitempty"`
	Notes             string                 `protobuf:"bytes,4,opt,name=Notes,proto3" json:"Notes,omitempty"`
	unknownFields     protoimpl.UnknownFields
	Modifier          float32 `protobuf:"fixed32,5,opt,name=Modifier,proto3" json:"Modifier,omitempty"`
	sizeCache         protoimpl.SizeCache
}

func (x *ValidMeasurementUnitConversionCreationRequestInput) Reset() {
	*x = ValidMeasurementUnitConversionCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidMeasurementUnitConversionCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidMeasurementUnitConversionCreationRequestInput) ProtoMessage() {}

func (x *ValidMeasurementUnitConversionCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidMeasurementUnitConversionCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidMeasurementUnitConversionCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{26}
}

func (x *ValidMeasurementUnitConversionCreationRequestInput) GetOnlyForIngredient() string {
	if x != nil {
		return x.OnlyForIngredient
	}
	return ""
}

func (x *ValidMeasurementUnitConversionCreationRequestInput) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ValidMeasurementUnitConversionCreationRequestInput) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *ValidMeasurementUnitConversionCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidMeasurementUnitConversionCreationRequestInput) GetModifier() float32 {
	if x != nil {
		return x.Modifier
	}
	return 0
}

type ValidMeasurementUnitConversionUpdateRequestInput struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	From              string                 `protobuf:"bytes,1,opt,name=From,proto3" json:"From,omitempty"`
	To                string                 `protobuf:"bytes,2,opt,name=To,proto3" json:"To,omitempty"`
	OnlyForIngredient string                 `protobuf:"bytes,3,opt,name=OnlyForIngredient,proto3" json:"OnlyForIngredient,omitempty"`
	Notes             string                 `protobuf:"bytes,5,opt,name=Notes,proto3" json:"Notes,omitempty"`
	unknownFields     protoimpl.UnknownFields
	Modifier          float32 `protobuf:"fixed32,4,opt,name=Modifier,proto3" json:"Modifier,omitempty"`
	sizeCache         protoimpl.SizeCache
}

func (x *ValidMeasurementUnitConversionUpdateRequestInput) Reset() {
	*x = ValidMeasurementUnitConversionUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidMeasurementUnitConversionUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidMeasurementUnitConversionUpdateRequestInput) ProtoMessage() {}

func (x *ValidMeasurementUnitConversionUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidMeasurementUnitConversionUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ValidMeasurementUnitConversionUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{27}
}

func (x *ValidMeasurementUnitConversionUpdateRequestInput) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ValidMeasurementUnitConversionUpdateRequestInput) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *ValidMeasurementUnitConversionUpdateRequestInput) GetOnlyForIngredient() string {
	if x != nil {
		return x.OnlyForIngredient
	}
	return ""
}

func (x *ValidMeasurementUnitConversionUpdateRequestInput) GetModifier() float32 {
	if x != nil {
		return x.Modifier
	}
	return 0
}

func (x *ValidMeasurementUnitConversionUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

type ValidMeasurementUnitCreationRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	IconPath      string                 `protobuf:"bytes,3,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	PluralName    string                 `protobuf:"bytes,4,opt,name=PluralName,proto3" json:"PluralName,omitempty"`
	Slug          string                 `protobuf:"bytes,5,opt,name=Slug,proto3" json:"Slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
	Volumetric    bool `protobuf:"varint,6,opt,name=Volumetric,proto3" json:"Volumetric,omitempty"`
	Universal     bool `protobuf:"varint,7,opt,name=Universal,proto3" json:"Universal,omitempty"`
	Metric        bool `protobuf:"varint,8,opt,name=Metric,proto3" json:"Metric,omitempty"`
	Imperial      bool `protobuf:"varint,9,opt,name=Imperial,proto3" json:"Imperial,omitempty"`
}

func (x *ValidMeasurementUnitCreationRequestInput) Reset() {
	*x = ValidMeasurementUnitCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidMeasurementUnitCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidMeasurementUnitCreationRequestInput) ProtoMessage() {}

func (x *ValidMeasurementUnitCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidMeasurementUnitCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidMeasurementUnitCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{28}
}

func (x *ValidMeasurementUnitCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidMeasurementUnitCreationRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidMeasurementUnitCreationRequestInput) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidMeasurementUnitCreationRequestInput) GetPluralName() string {
	if x != nil {
		return x.PluralName
	}
	return ""
}

func (x *ValidMeasurementUnitCreationRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidMeasurementUnitCreationRequestInput) GetVolumetric() bool {
	if x != nil {
		return x.Volumetric
	}
	return false
}

func (x *ValidMeasurementUnitCreationRequestInput) GetUniversal() bool {
	if x != nil {
		return x.Universal
	}
	return false
}

func (x *ValidMeasurementUnitCreationRequestInput) GetMetric() bool {
	if x != nil {
		return x.Metric
	}
	return false
}

func (x *ValidMeasurementUnitCreationRequestInput) GetImperial() bool {
	if x != nil {
		return x.Imperial
	}
	return false
}

type ValidMeasurementUnitUpdateRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	IconPath      string                 `protobuf:"bytes,3,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	PluralName    string                 `protobuf:"bytes,8,opt,name=PluralName,proto3" json:"PluralName,omitempty"`
	Slug          string                 `protobuf:"bytes,9,opt,name=Slug,proto3" json:"Slug,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
	Volumetric    bool `protobuf:"varint,4,opt,name=Volumetric,proto3" json:"Volumetric,omitempty"`
	Universal     bool `protobuf:"varint,5,opt,name=Universal,proto3" json:"Universal,omitempty"`
	Metric        bool `protobuf:"varint,6,opt,name=Metric,proto3" json:"Metric,omitempty"`
	Imperial      bool `protobuf:"varint,7,opt,name=Imperial,proto3" json:"Imperial,omitempty"`
}

func (x *ValidMeasurementUnitUpdateRequestInput) Reset() {
	*x = ValidMeasurementUnitUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidMeasurementUnitUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidMeasurementUnitUpdateRequestInput) ProtoMessage() {}

func (x *ValidMeasurementUnitUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidMeasurementUnitUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ValidMeasurementUnitUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{29}
}

func (x *ValidMeasurementUnitUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidMeasurementUnitUpdateRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidMeasurementUnitUpdateRequestInput) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidMeasurementUnitUpdateRequestInput) GetVolumetric() bool {
	if x != nil {
		return x.Volumetric
	}
	return false
}

func (x *ValidMeasurementUnitUpdateRequestInput) GetUniversal() bool {
	if x != nil {
		return x.Universal
	}
	return false
}

func (x *ValidMeasurementUnitUpdateRequestInput) GetMetric() bool {
	if x != nil {
		return x.Metric
	}
	return false
}

func (x *ValidMeasurementUnitUpdateRequestInput) GetImperial() bool {
	if x != nil {
		return x.Imperial
	}
	return false
}

func (x *ValidMeasurementUnitUpdateRequestInput) GetPluralName() string {
	if x != nil {
		return x.PluralName
	}
	return ""
}

func (x *ValidMeasurementUnitUpdateRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type ValidPreparation struct {
	state                       protoimpl.MessageState      `protogen:"open.v1"`
	CreatedAt                   *timestamppb.Timestamp      `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	InstrumentCount             *Uint16RangeWithOptionalMax `protobuf:"bytes,2,opt,name=InstrumentCount,proto3" json:"InstrumentCount,omitempty"`
	IngredientCount             *Uint16RangeWithOptionalMax `protobuf:"bytes,3,opt,name=IngredientCount,proto3" json:"IngredientCount,omitempty"`
	VesselCount                 *Uint16RangeWithOptionalMax `protobuf:"bytes,4,opt,name=VesselCount,proto3" json:"VesselCount,omitempty"`
	ArchivedAt                  *timestamppb.Timestamp      `protobuf:"bytes,5,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	LastUpdatedAt               *timestamppb.Timestamp      `protobuf:"bytes,6,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	Name                        string                      `protobuf:"bytes,10,opt,name=Name,proto3" json:"Name,omitempty"`
	ID                          string                      `protobuf:"bytes,9,opt,name=ID,proto3" json:"ID,omitempty"`
	IconPath                    string                      `protobuf:"bytes,7,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	Description                 string                      `protobuf:"bytes,11,opt,name=Description,proto3" json:"Description,omitempty"`
	Slug                        string                      `protobuf:"bytes,12,opt,name=Slug,proto3" json:"Slug,omitempty"`
	PastTense                   string                      `protobuf:"bytes,8,opt,name=PastTense,proto3" json:"PastTense,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
	TemperatureRequired         bool `protobuf:"varint,14,opt,name=TemperatureRequired,proto3" json:"TemperatureRequired,omitempty"`
	ConditionExpressionRequired bool `protobuf:"varint,16,opt,name=ConditionExpressionRequired,proto3" json:"ConditionExpressionRequired,omitempty"`
	ConsumesVessel              bool `protobuf:"varint,17,opt,name=ConsumesVessel,proto3" json:"ConsumesVessel,omitempty"`
	OnlyForVessels              bool `protobuf:"varint,18,opt,name=OnlyForVessels,proto3" json:"OnlyForVessels,omitempty"`
	YieldsNothing               bool `protobuf:"varint,19,opt,name=YieldsNothing,proto3" json:"YieldsNothing,omitempty"`
	TimeEstimateRequired        bool `protobuf:"varint,15,opt,name=TimeEstimateRequired,proto3" json:"TimeEstimateRequired,omitempty"`
	RestrictToIngredients       bool `protobuf:"varint,13,opt,name=RestrictToIngredients,proto3" json:"RestrictToIngredients,omitempty"`
}

func (x *ValidPreparation) Reset() {
	*x = ValidPreparation{}
	mi := &file_messages_eating_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidPreparation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidPreparation) ProtoMessage() {}

func (x *ValidPreparation) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidPreparation.ProtoReflect.Descriptor instead.
func (*ValidPreparation) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{30}
}

func (x *ValidPreparation) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidPreparation) GetInstrumentCount() *Uint16RangeWithOptionalMax {
	if x != nil {
		return x.InstrumentCount
	}
	return nil
}

func (x *ValidPreparation) GetIngredientCount() *Uint16RangeWithOptionalMax {
	if x != nil {
		return x.IngredientCount
	}
	return nil
}

func (x *ValidPreparation) GetVesselCount() *Uint16RangeWithOptionalMax {
	if x != nil {
		return x.VesselCount
	}
	return nil
}

func (x *ValidPreparation) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidPreparation) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidPreparation) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidPreparation) GetPastTense() string {
	if x != nil {
		return x.PastTense
	}
	return ""
}

func (x *ValidPreparation) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidPreparation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidPreparation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidPreparation) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidPreparation) GetRestrictToIngredients() bool {
	if x != nil {
		return x.RestrictToIngredients
	}
	return false
}

func (x *ValidPreparation) GetTemperatureRequired() bool {
	if x != nil {
		return x.TemperatureRequired
	}
	return false
}

func (x *ValidPreparation) GetTimeEstimateRequired() bool {
	if x != nil {
		return x.TimeEstimateRequired
	}
	return false
}

func (x *ValidPreparation) GetConditionExpressionRequired() bool {
	if x != nil {
		return x.ConditionExpressionRequired
	}
	return false
}

func (x *ValidPreparation) GetConsumesVessel() bool {
	if x != nil {
		return x.ConsumesVessel
	}
	return false
}

func (x *ValidPreparation) GetOnlyForVessels() bool {
	if x != nil {
		return x.OnlyForVessels
	}
	return false
}

func (x *ValidPreparation) GetYieldsNothing() bool {
	if x != nil {
		return x.YieldsNothing
	}
	return false
}

type ValidPreparationCreationRequestInput struct {
	state                       protoimpl.MessageState      `protogen:"open.v1"`
	InstrumentCount             *Uint16RangeWithOptionalMax `protobuf:"bytes,1,opt,name=InstrumentCount,proto3" json:"InstrumentCount,omitempty"`
	IngredientCount             *Uint16RangeWithOptionalMax `protobuf:"bytes,2,opt,name=IngredientCount,proto3" json:"IngredientCount,omitempty"`
	VesselCount                 *Uint16RangeWithOptionalMax `protobuf:"bytes,3,opt,name=VesselCount,proto3" json:"VesselCount,omitempty"`
	Description                 string                      `protobuf:"bytes,8,opt,name=Description,proto3" json:"Description,omitempty"`
	PastTense                   string                      `protobuf:"bytes,5,opt,name=PastTense,proto3" json:"PastTense,omitempty"`
	Slug                        string                      `protobuf:"bytes,6,opt,name=Slug,proto3" json:"Slug,omitempty"`
	Name                        string                      `protobuf:"bytes,7,opt,name=Name,proto3" json:"Name,omitempty"`
	IconPath                    string                      `protobuf:"bytes,4,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
	ConditionExpressionRequired bool `protobuf:"varint,11,opt,name=ConditionExpressionRequired,proto3" json:"ConditionExpressionRequired,omitempty"`
	ConsumesVessel              bool `protobuf:"varint,12,opt,name=ConsumesVessel,proto3" json:"ConsumesVessel,omitempty"`
	OnlyForVessels              bool `protobuf:"varint,13,opt,name=OnlyForVessels,proto3" json:"OnlyForVessels,omitempty"`
	RestrictToIngredients       bool `protobuf:"varint,14,opt,name=RestrictToIngredients,proto3" json:"RestrictToIngredients,omitempty"`
	YieldsNothing               bool `protobuf:"varint,15,opt,name=YieldsNothing,proto3" json:"YieldsNothing,omitempty"`
	TimeEstimateRequired        bool `protobuf:"varint,10,opt,name=TimeEstimateRequired,proto3" json:"TimeEstimateRequired,omitempty"`
	TemperatureRequired         bool `protobuf:"varint,9,opt,name=TemperatureRequired,proto3" json:"TemperatureRequired,omitempty"`
}

func (x *ValidPreparationCreationRequestInput) Reset() {
	*x = ValidPreparationCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidPreparationCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidPreparationCreationRequestInput) ProtoMessage() {}

func (x *ValidPreparationCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidPreparationCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidPreparationCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{31}
}

func (x *ValidPreparationCreationRequestInput) GetInstrumentCount() *Uint16RangeWithOptionalMax {
	if x != nil {
		return x.InstrumentCount
	}
	return nil
}

func (x *ValidPreparationCreationRequestInput) GetIngredientCount() *Uint16RangeWithOptionalMax {
	if x != nil {
		return x.IngredientCount
	}
	return nil
}

func (x *ValidPreparationCreationRequestInput) GetVesselCount() *Uint16RangeWithOptionalMax {
	if x != nil {
		return x.VesselCount
	}
	return nil
}

func (x *ValidPreparationCreationRequestInput) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidPreparationCreationRequestInput) GetPastTense() string {
	if x != nil {
		return x.PastTense
	}
	return ""
}

func (x *ValidPreparationCreationRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidPreparationCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidPreparationCreationRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidPreparationCreationRequestInput) GetTemperatureRequired() bool {
	if x != nil {
		return x.TemperatureRequired
	}
	return false
}

func (x *ValidPreparationCreationRequestInput) GetTimeEstimateRequired() bool {
	if x != nil {
		return x.TimeEstimateRequired
	}
	return false
}

func (x *ValidPreparationCreationRequestInput) GetConditionExpressionRequired() bool {
	if x != nil {
		return x.ConditionExpressionRequired
	}
	return false
}

func (x *ValidPreparationCreationRequestInput) GetConsumesVessel() bool {
	if x != nil {
		return x.ConsumesVessel
	}
	return false
}

func (x *ValidPreparationCreationRequestInput) GetOnlyForVessels() bool {
	if x != nil {
		return x.OnlyForVessels
	}
	return false
}

func (x *ValidPreparationCreationRequestInput) GetRestrictToIngredients() bool {
	if x != nil {
		return x.RestrictToIngredients
	}
	return false
}

func (x *ValidPreparationCreationRequestInput) GetYieldsNothing() bool {
	if x != nil {
		return x.YieldsNothing
	}
	return false
}

type ValidPreparationInstrument struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	LastUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	ArchivedAt    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	ID            string                 `protobuf:"bytes,4,opt,name=ID,proto3" json:"ID,omitempty"`
	Notes         string                 `protobuf:"bytes,5,opt,name=Notes,proto3" json:"Notes,omitempty"`
	Instrument    *ValidInstrument       `protobuf:"bytes,6,opt,name=Instrument,proto3" json:"Instrument,omitempty"`
	Preparation   *ValidPreparation      `protobuf:"bytes,7,opt,name=Preparation,proto3" json:"Preparation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidPreparationInstrument) Reset() {
	*x = ValidPreparationInstrument{}
	mi := &file_messages_eating_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidPreparationInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidPreparationInstrument) ProtoMessage() {}

func (x *ValidPreparationInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidPreparationInstrument.ProtoReflect.Descriptor instead.
func (*ValidPreparationInstrument) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{32}
}

func (x *ValidPreparationInstrument) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidPreparationInstrument) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidPreparationInstrument) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidPreparationInstrument) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidPreparationInstrument) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidPreparationInstrument) GetInstrument() *ValidInstrument {
	if x != nil {
		return x.Instrument
	}
	return nil
}

func (x *ValidPreparationInstrument) GetPreparation() *ValidPreparation {
	if x != nil {
		return x.Preparation
	}
	return nil
}

type ValidPreparationInstrumentCreationRequestInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Notes              string                 `protobuf:"bytes,1,opt,name=Notes,proto3" json:"Notes,omitempty"`
	ValidPreparationID string                 `protobuf:"bytes,2,opt,name=ValidPreparationID,proto3" json:"ValidPreparationID,omitempty"`
	ValidInstrumentID  string                 `protobuf:"bytes,3,opt,name=ValidInstrumentID,proto3" json:"ValidInstrumentID,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ValidPreparationInstrumentCreationRequestInput) Reset() {
	*x = ValidPreparationInstrumentCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidPreparationInstrumentCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidPreparationInstrumentCreationRequestInput) ProtoMessage() {}

func (x *ValidPreparationInstrumentCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidPreparationInstrumentCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidPreparationInstrumentCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{33}
}

func (x *ValidPreparationInstrumentCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidPreparationInstrumentCreationRequestInput) GetValidPreparationID() string {
	if x != nil {
		return x.ValidPreparationID
	}
	return ""
}

func (x *ValidPreparationInstrumentCreationRequestInput) GetValidInstrumentID() string {
	if x != nil {
		return x.ValidInstrumentID
	}
	return ""
}

type ValidPreparationInstrumentUpdateRequestInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Notes              string                 `protobuf:"bytes,1,opt,name=Notes,proto3" json:"Notes,omitempty"`
	ValidPreparationID string                 `protobuf:"bytes,2,opt,name=ValidPreparationID,proto3" json:"ValidPreparationID,omitempty"`
	ValidInstrumentID  string                 `protobuf:"bytes,3,opt,name=ValidInstrumentID,proto3" json:"ValidInstrumentID,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ValidPreparationInstrumentUpdateRequestInput) Reset() {
	*x = ValidPreparationInstrumentUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidPreparationInstrumentUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidPreparationInstrumentUpdateRequestInput) ProtoMessage() {}

func (x *ValidPreparationInstrumentUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidPreparationInstrumentUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ValidPreparationInstrumentUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{34}
}

func (x *ValidPreparationInstrumentUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidPreparationInstrumentUpdateRequestInput) GetValidPreparationID() string {
	if x != nil {
		return x.ValidPreparationID
	}
	return ""
}

func (x *ValidPreparationInstrumentUpdateRequestInput) GetValidInstrumentID() string {
	if x != nil {
		return x.ValidInstrumentID
	}
	return ""
}

type ValidPreparationUpdateRequestInput struct {
	state                       protoimpl.MessageState                        `protogen:"open.v1"`
	InstrumentCount             *Uint16RangeWithOptionalMaxUpdateRequestInput `protobuf:"bytes,1,opt,name=InstrumentCount,proto3" json:"InstrumentCount,omitempty"`
	IngredientCount             *Uint16RangeWithOptionalMaxUpdateRequestInput `protobuf:"bytes,2,opt,name=IngredientCount,proto3" json:"IngredientCount,omitempty"`
	VesselCount                 *Uint16RangeWithOptionalMaxUpdateRequestInput `protobuf:"bytes,3,opt,name=VesselCount,proto3" json:"VesselCount,omitempty"`
	Slug                        string                                        `protobuf:"bytes,8,opt,name=Slug,proto3" json:"Slug,omitempty"`
	Description                 string                                        `protobuf:"bytes,5,opt,name=Description,proto3" json:"Description,omitempty"`
	IconPath                    string                                        `protobuf:"bytes,6,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	Name                        string                                        `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	PastTense                   string                                        `protobuf:"bytes,10,opt,name=PastTense,proto3" json:"PastTense,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
	TemperatureRequired         bool `protobuf:"varint,11,opt,name=TemperatureRequired,proto3" json:"TemperatureRequired,omitempty"`
	TimeEstimateRequired        bool `protobuf:"varint,12,opt,name=TimeEstimateRequired,proto3" json:"TimeEstimateRequired,omitempty"`
	ConditionExpressionRequired bool `protobuf:"varint,13,opt,name=ConditionExpressionRequired,proto3" json:"ConditionExpressionRequired,omitempty"`
	ConsumesVessel              bool `protobuf:"varint,14,opt,name=ConsumesVessel,proto3" json:"ConsumesVessel,omitempty"`
	OnlyForVessels              bool `protobuf:"varint,15,opt,name=OnlyForVessels,proto3" json:"OnlyForVessels,omitempty"`
	RestrictToIngredients       bool `protobuf:"varint,9,opt,name=RestrictToIngredients,proto3" json:"RestrictToIngredients,omitempty"`
	YieldsNothing               bool `protobuf:"varint,7,opt,name=YieldsNothing,proto3" json:"YieldsNothing,omitempty"`
}

func (x *ValidPreparationUpdateRequestInput) Reset() {
	*x = ValidPreparationUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidPreparationUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidPreparationUpdateRequestInput) ProtoMessage() {}

func (x *ValidPreparationUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidPreparationUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ValidPreparationUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{35}
}

func (x *ValidPreparationUpdateRequestInput) GetInstrumentCount() *Uint16RangeWithOptionalMaxUpdateRequestInput {
	if x != nil {
		return x.InstrumentCount
	}
	return nil
}

func (x *ValidPreparationUpdateRequestInput) GetIngredientCount() *Uint16RangeWithOptionalMaxUpdateRequestInput {
	if x != nil {
		return x.IngredientCount
	}
	return nil
}

func (x *ValidPreparationUpdateRequestInput) GetVesselCount() *Uint16RangeWithOptionalMaxUpdateRequestInput {
	if x != nil {
		return x.VesselCount
	}
	return nil
}

func (x *ValidPreparationUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidPreparationUpdateRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidPreparationUpdateRequestInput) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidPreparationUpdateRequestInput) GetYieldsNothing() bool {
	if x != nil {
		return x.YieldsNothing
	}
	return false
}

func (x *ValidPreparationUpdateRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidPreparationUpdateRequestInput) GetRestrictToIngredients() bool {
	if x != nil {
		return x.RestrictToIngredients
	}
	return false
}

func (x *ValidPreparationUpdateRequestInput) GetPastTense() string {
	if x != nil {
		return x.PastTense
	}
	return ""
}

func (x *ValidPreparationUpdateRequestInput) GetTemperatureRequired() bool {
	if x != nil {
		return x.TemperatureRequired
	}
	return false
}

func (x *ValidPreparationUpdateRequestInput) GetTimeEstimateRequired() bool {
	if x != nil {
		return x.TimeEstimateRequired
	}
	return false
}

func (x *ValidPreparationUpdateRequestInput) GetConditionExpressionRequired() bool {
	if x != nil {
		return x.ConditionExpressionRequired
	}
	return false
}

func (x *ValidPreparationUpdateRequestInput) GetConsumesVessel() bool {
	if x != nil {
		return x.ConsumesVessel
	}
	return false
}

func (x *ValidPreparationUpdateRequestInput) GetOnlyForVessels() bool {
	if x != nil {
		return x.OnlyForVessels
	}
	return false
}

type ValidPreparationVessel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	LastUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	ArchivedAt    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	ID            string                 `protobuf:"bytes,4,opt,name=ID,proto3" json:"ID,omitempty"`
	Notes         string                 `protobuf:"bytes,5,opt,name=Notes,proto3" json:"Notes,omitempty"`
	Preparation   *ValidPreparation      `protobuf:"bytes,6,opt,name=Preparation,proto3" json:"Preparation,omitempty"`
	Vessel        *ValidVessel           `protobuf:"bytes,7,opt,name=Vessel,proto3" json:"Vessel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidPreparationVessel) Reset() {
	*x = ValidPreparationVessel{}
	mi := &file_messages_eating_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidPreparationVessel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidPreparationVessel) ProtoMessage() {}

func (x *ValidPreparationVessel) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidPreparationVessel.ProtoReflect.Descriptor instead.
func (*ValidPreparationVessel) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{36}
}

func (x *ValidPreparationVessel) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidPreparationVessel) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidPreparationVessel) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidPreparationVessel) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidPreparationVessel) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidPreparationVessel) GetPreparation() *ValidPreparation {
	if x != nil {
		return x.Preparation
	}
	return nil
}

func (x *ValidPreparationVessel) GetVessel() *ValidVessel {
	if x != nil {
		return x.Vessel
	}
	return nil
}

type ValidPreparationVesselCreationRequestInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Notes              string                 `protobuf:"bytes,1,opt,name=Notes,proto3" json:"Notes,omitempty"`
	ValidPreparationID string                 `protobuf:"bytes,2,opt,name=ValidPreparationID,proto3" json:"ValidPreparationID,omitempty"`
	ValidVesselID      string                 `protobuf:"bytes,3,opt,name=ValidVesselID,proto3" json:"ValidVesselID,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ValidPreparationVesselCreationRequestInput) Reset() {
	*x = ValidPreparationVesselCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidPreparationVesselCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidPreparationVesselCreationRequestInput) ProtoMessage() {}

func (x *ValidPreparationVesselCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidPreparationVesselCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidPreparationVesselCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{37}
}

func (x *ValidPreparationVesselCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidPreparationVesselCreationRequestInput) GetValidPreparationID() string {
	if x != nil {
		return x.ValidPreparationID
	}
	return ""
}

func (x *ValidPreparationVesselCreationRequestInput) GetValidVesselID() string {
	if x != nil {
		return x.ValidVesselID
	}
	return ""
}

type ValidPreparationVesselUpdateRequestInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Notes              string                 `protobuf:"bytes,1,opt,name=Notes,proto3" json:"Notes,omitempty"`
	ValidPreparationID string                 `protobuf:"bytes,2,opt,name=ValidPreparationID,proto3" json:"ValidPreparationID,omitempty"`
	ValidVesselID      string                 `protobuf:"bytes,3,opt,name=ValidVesselID,proto3" json:"ValidVesselID,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ValidPreparationVesselUpdateRequestInput) Reset() {
	*x = ValidPreparationVesselUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidPreparationVesselUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidPreparationVesselUpdateRequestInput) ProtoMessage() {}

func (x *ValidPreparationVesselUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidPreparationVesselUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ValidPreparationVesselUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{38}
}

func (x *ValidPreparationVesselUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidPreparationVesselUpdateRequestInput) GetValidPreparationID() string {
	if x != nil {
		return x.ValidPreparationID
	}
	return ""
}

func (x *ValidPreparationVesselUpdateRequestInput) GetValidVesselID() string {
	if x != nil {
		return x.ValidVesselID
	}
	return ""
}

type ValidVessel struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt                      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	ArchivedAt                     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	LastUpdatedAt                  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	CapacityUnit                   *ValidMeasurementUnit  `protobuf:"bytes,4,opt,name=CapacityUnit,proto3" json:"CapacityUnit,omitempty"`
	Shape                          string                 `protobuf:"bytes,10,opt,name=Shape,proto3" json:"Shape,omitempty"`
	Description                    string                 `protobuf:"bytes,7,opt,name=Description,proto3" json:"Description,omitempty"`
	Name                           string                 `protobuf:"bytes,8,opt,name=Name,proto3" json:"Name,omitempty"`
	Slug                           string                 `protobuf:"bytes,9,opt,name=Slug,proto3" json:"Slug,omitempty"`
	IconPath                       string                 `protobuf:"bytes,5,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	ID                             string                 `protobuf:"bytes,11,opt,name=ID,proto3" json:"ID,omitempty"`
	PluralName                     string                 `protobuf:"bytes,6,opt,name=PluralName,proto3" json:"PluralName,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	WidthInMillimeters             float32 `protobuf:"fixed32,12,opt,name=WidthInMillimeters,proto3" json:"WidthInMillimeters,omitempty"`
	HeightInMillimeters            float32 `protobuf:"fixed32,14,opt,name=HeightInMillimeters,proto3" json:"HeightInMillimeters,omitempty"`
	Capacity                       float32 `protobuf:"fixed32,15,opt,name=Capacity,proto3" json:"Capacity,omitempty"`
	LengthInMillimeters            float32 `protobuf:"fixed32,13,opt,name=LengthInMillimeters,proto3" json:"LengthInMillimeters,omitempty"`
	sizeCache                      protoimpl.SizeCache
	IncludeInGeneratedInstructions bool `protobuf:"varint,16,opt,name=IncludeInGeneratedInstructions,proto3" json:"IncludeInGeneratedInstructions,omitempty"`
	DisplayInSummaryLists          bool `protobuf:"varint,17,opt,name=DisplayInSummaryLists,proto3" json:"DisplayInSummaryLists,omitempty"`
	UsableForStorage               bool `protobuf:"varint,18,opt,name=UsableForStorage,proto3" json:"UsableForStorage,omitempty"`
}

func (x *ValidVessel) Reset() {
	*x = ValidVessel{}
	mi := &file_messages_eating_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidVessel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidVessel) ProtoMessage() {}

func (x *ValidVessel) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidVessel.ProtoReflect.Descriptor instead.
func (*ValidVessel) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{39}
}

func (x *ValidVessel) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidVessel) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidVessel) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidVessel) GetCapacityUnit() *ValidMeasurementUnit {
	if x != nil {
		return x.CapacityUnit
	}
	return nil
}

func (x *ValidVessel) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidVessel) GetPluralName() string {
	if x != nil {
		return x.PluralName
	}
	return ""
}

func (x *ValidVessel) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidVessel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidVessel) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidVessel) GetShape() string {
	if x != nil {
		return x.Shape
	}
	return ""
}

func (x *ValidVessel) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidVessel) GetWidthInMillimeters() float32 {
	if x != nil {
		return x.WidthInMillimeters
	}
	return 0
}

func (x *ValidVessel) GetLengthInMillimeters() float32 {
	if x != nil {
		return x.LengthInMillimeters
	}
	return 0
}

func (x *ValidVessel) GetHeightInMillimeters() float32 {
	if x != nil {
		return x.HeightInMillimeters
	}
	return 0
}

func (x *ValidVessel) GetCapacity() float32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *ValidVessel) GetIncludeInGeneratedInstructions() bool {
	if x != nil {
		return x.IncludeInGeneratedInstructions
	}
	return false
}

func (x *ValidVessel) GetDisplayInSummaryLists() bool {
	if x != nil {
		return x.DisplayInSummaryLists
	}
	return false
}

func (x *ValidVessel) GetUsableForStorage() bool {
	if x != nil {
		return x.UsableForStorage
	}
	return false
}

type ValidVesselCreationRequestInput struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	CapacityUnitID                 string                 `protobuf:"bytes,1,opt,name=CapacityUnitID,proto3" json:"CapacityUnitID,omitempty"`
	Shape                          string                 `protobuf:"bytes,2,opt,name=Shape,proto3" json:"Shape,omitempty"`
	IconPath                       string                 `protobuf:"bytes,3,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	PluralName                     string                 `protobuf:"bytes,4,opt,name=PluralName,proto3" json:"PluralName,omitempty"`
	Name                           string                 `protobuf:"bytes,5,opt,name=Name,proto3" json:"Name,omitempty"`
	Description                    string                 `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"`
	Slug                           string                 `protobuf:"bytes,7,opt,name=Slug,proto3" json:"Slug,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	LengthInMillimeters            float32 `protobuf:"fixed32,8,opt,name=LengthInMillimeters,proto3" json:"LengthInMillimeters,omitempty"`
	Capacity                       float32 `protobuf:"fixed32,10,opt,name=Capacity,proto3" json:"Capacity,omitempty"`
	WidthInMillimeters             float32 `protobuf:"fixed32,11,opt,name=WidthInMillimeters,proto3" json:"WidthInMillimeters,omitempty"`
	HeightInMillimeters            float32 `protobuf:"fixed32,9,opt,name=HeightInMillimeters,proto3" json:"HeightInMillimeters,omitempty"`
	sizeCache                      protoimpl.SizeCache
	UsableForStorage               bool `protobuf:"varint,12,opt,name=UsableForStorage,proto3" json:"UsableForStorage,omitempty"`
	IncludeInGeneratedInstructions bool `protobuf:"varint,13,opt,name=IncludeInGeneratedInstructions,proto3" json:"IncludeInGeneratedInstructions,omitempty"`
	DisplayInSummaryLists          bool `protobuf:"varint,14,opt,name=DisplayInSummaryLists,proto3" json:"DisplayInSummaryLists,omitempty"`
}

func (x *ValidVesselCreationRequestInput) Reset() {
	*x = ValidVesselCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidVesselCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidVesselCreationRequestInput) ProtoMessage() {}

func (x *ValidVesselCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidVesselCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidVesselCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{40}
}

func (x *ValidVesselCreationRequestInput) GetCapacityUnitID() string {
	if x != nil {
		return x.CapacityUnitID
	}
	return ""
}

func (x *ValidVesselCreationRequestInput) GetShape() string {
	if x != nil {
		return x.Shape
	}
	return ""
}

func (x *ValidVesselCreationRequestInput) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidVesselCreationRequestInput) GetPluralName() string {
	if x != nil {
		return x.PluralName
	}
	return ""
}

func (x *ValidVesselCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidVesselCreationRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidVesselCreationRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidVesselCreationRequestInput) GetLengthInMillimeters() float32 {
	if x != nil {
		return x.LengthInMillimeters
	}
	return 0
}

func (x *ValidVesselCreationRequestInput) GetHeightInMillimeters() float32 {
	if x != nil {
		return x.HeightInMillimeters
	}
	return 0
}

func (x *ValidVesselCreationRequestInput) GetCapacity() float32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *ValidVesselCreationRequestInput) GetWidthInMillimeters() float32 {
	if x != nil {
		return x.WidthInMillimeters
	}
	return 0
}

func (x *ValidVesselCreationRequestInput) GetUsableForStorage() bool {
	if x != nil {
		return x.UsableForStorage
	}
	return false
}

func (x *ValidVesselCreationRequestInput) GetIncludeInGeneratedInstructions() bool {
	if x != nil {
		return x.IncludeInGeneratedInstructions
	}
	return false
}

func (x *ValidVesselCreationRequestInput) GetDisplayInSummaryLists() bool {
	if x != nil {
		return x.DisplayInSummaryLists
	}
	return false
}

type ValidVesselUpdateRequestInput struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	CapacityUnitID                 string                 `protobuf:"bytes,10,opt,name=CapacityUnitID,proto3" json:"CapacityUnitID,omitempty"`
	Name                           string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	PluralName                     string                 `protobuf:"bytes,2,opt,name=PluralName,proto3" json:"PluralName,omitempty"`
	Description                    string                 `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	IconPath                       string                 `protobuf:"bytes,4,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	Slug                           string                 `protobuf:"bytes,6,opt,name=Slug,proto3" json:"Slug,omitempty"`
	Shape                          string                 `protobuf:"bytes,14,opt,name=Shape,proto3" json:"Shape,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	LengthInMillimeters            float32 `protobuf:"fixed32,12,opt,name=LengthInMillimeters,proto3" json:"LengthInMillimeters,omitempty"`
	Capacity                       float32 `protobuf:"fixed32,9,opt,name=Capacity,proto3" json:"Capacity,omitempty"`
	WidthInMillimeters             float32 `protobuf:"fixed32,11,opt,name=WidthInMillimeters,proto3" json:"WidthInMillimeters,omitempty"`
	HeightInMillimeters            float32 `protobuf:"fixed32,13,opt,name=HeightInMillimeters,proto3" json:"HeightInMillimeters,omitempty"`
	sizeCache                      protoimpl.SizeCache
	IncludeInGeneratedInstructions bool `protobuf:"varint,8,opt,name=IncludeInGeneratedInstructions,proto3" json:"IncludeInGeneratedInstructions,omitempty"`
	DisplayInSummaryLists          bool `protobuf:"varint,7,opt,name=DisplayInSummaryLists,proto3" json:"DisplayInSummaryLists,omitempty"`
	UsableForStorage               bool `protobuf:"varint,5,opt,name=UsableForStorage,proto3" json:"UsableForStorage,omitempty"`
}

func (x *ValidVesselUpdateRequestInput) Reset() {
	*x = ValidVesselUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidVesselUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidVesselUpdateRequestInput) ProtoMessage() {}

func (x *ValidVesselUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidVesselUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ValidVesselUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{41}
}

func (x *ValidVesselUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidVesselUpdateRequestInput) GetPluralName() string {
	if x != nil {
		return x.PluralName
	}
	return ""
}

func (x *ValidVesselUpdateRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidVesselUpdateRequestInput) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidVesselUpdateRequestInput) GetUsableForStorage() bool {
	if x != nil {
		return x.UsableForStorage
	}
	return false
}

func (x *ValidVesselUpdateRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidVesselUpdateRequestInput) GetDisplayInSummaryLists() bool {
	if x != nil {
		return x.DisplayInSummaryLists
	}
	return false
}

func (x *ValidVesselUpdateRequestInput) GetIncludeInGeneratedInstructions() bool {
	if x != nil {
		return x.IncludeInGeneratedInstructions
	}
	return false
}

func (x *ValidVesselUpdateRequestInput) GetCapacity() float32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *ValidVesselUpdateRequestInput) GetCapacityUnitID() string {
	if x != nil {
		return x.CapacityUnitID
	}
	return ""
}

func (x *ValidVesselUpdateRequestInput) GetWidthInMillimeters() float32 {
	if x != nil {
		return x.WidthInMillimeters
	}
	return 0
}

func (x *ValidVesselUpdateRequestInput) GetLengthInMillimeters() float32 {
	if x != nil {
		return x.LengthInMillimeters
	}
	return 0
}

func (x *ValidVesselUpdateRequestInput) GetHeightInMillimeters() float32 {
	if x != nil {
		return x.HeightInMillimeters
	}
	return 0
}

func (x *ValidVesselUpdateRequestInput) GetShape() string {
	if x != nil {
		return x.Shape
	}
	return ""
}

type UserIngredientPreference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	LastUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	ArchivedAt    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	Ingredient    *ValidIngredient       `protobuf:"bytes,7,opt,name=Ingredient,proto3" json:"Ingredient,omitempty"`
	ID            string                 `protobuf:"bytes,4,opt,name=ID,proto3" json:"ID,omitempty"`
	Notes         string                 `protobuf:"bytes,5,opt,name=Notes,proto3" json:"Notes,omitempty"`
	BelongsToUser string                 `protobuf:"bytes,6,opt,name=BelongsToUser,proto3" json:"BelongsToUser,omitempty"`
	unknownFields protoimpl.UnknownFields
	Rating        int32 `protobuf:"varint,8,opt,name=Rating,proto3" json:"Rating,omitempty"`
	sizeCache     protoimpl.SizeCache
	Allergy       bool `protobuf:"varint,9,opt,name=Allergy,proto3" json:"Allergy,omitempty"`
}

func (x *UserIngredientPreference) Reset() {
	*x = UserIngredientPreference{}
	mi := &file_messages_eating_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserIngredientPreference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIngredientPreference) ProtoMessage() {}

func (x *UserIngredientPreference) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIngredientPreference.ProtoReflect.Descriptor instead.
func (*UserIngredientPreference) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{42}
}

func (x *UserIngredientPreference) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UserIngredientPreference) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *UserIngredientPreference) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *UserIngredientPreference) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UserIngredientPreference) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *UserIngredientPreference) GetBelongsToUser() string {
	if x != nil {
		return x.BelongsToUser
	}
	return ""
}

func (x *UserIngredientPreference) GetIngredient() *ValidIngredient {
	if x != nil {
		return x.Ingredient
	}
	return nil
}

func (x *UserIngredientPreference) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *UserIngredientPreference) GetAllergy() bool {
	if x != nil {
		return x.Allergy
	}
	return false
}

type UserIngredientPreferenceCreationRequestInput struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientGroupID string                 `protobuf:"bytes,1,opt,name=ValidIngredientGroupID,proto3" json:"ValidIngredientGroupID,omitempty"`
	ValidIngredientID      string                 `protobuf:"bytes,2,opt,name=ValidIngredientID,proto3" json:"ValidIngredientID,omitempty"`
	Notes                  string                 `protobuf:"bytes,3,opt,name=Notes,proto3" json:"Notes,omitempty"`
	unknownFields          protoimpl.UnknownFields
	Rating                 int32 `protobuf:"varint,4,opt,name=Rating,proto3" json:"Rating,omitempty"`
	sizeCache              protoimpl.SizeCache
	Allergy                bool `protobuf:"varint,5,opt,name=Allergy,proto3" json:"Allergy,omitempty"`
}

func (x *UserIngredientPreferenceCreationRequestInput) Reset() {
	*x = UserIngredientPreferenceCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserIngredientPreferenceCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIngredientPreferenceCreationRequestInput) ProtoMessage() {}

func (x *UserIngredientPreferenceCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIngredientPreferenceCreationRequestInput.ProtoReflect.Descriptor instead.
func (*UserIngredientPreferenceCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{43}
}

func (x *UserIngredientPreferenceCreationRequestInput) GetValidIngredientGroupID() string {
	if x != nil {
		return x.ValidIngredientGroupID
	}
	return ""
}

func (x *UserIngredientPreferenceCreationRequestInput) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

func (x *UserIngredientPreferenceCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *UserIngredientPreferenceCreationRequestInput) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *UserIngredientPreferenceCreationRequestInput) GetAllergy() bool {
	if x != nil {
		return x.Allergy
	}
	return false
}

type UserIngredientPreferenceUpdateRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Notes         string                 `protobuf:"bytes,1,opt,name=Notes,proto3" json:"Notes,omitempty"`
	IngredientID  string                 `protobuf:"bytes,2,opt,name=IngredientID,proto3" json:"IngredientID,omitempty"`
	unknownFields protoimpl.UnknownFields
	Rating        int32 `protobuf:"varint,3,opt,name=Rating,proto3" json:"Rating,omitempty"`
	sizeCache     protoimpl.SizeCache
	Allergy       bool `protobuf:"varint,4,opt,name=Allergy,proto3" json:"Allergy,omitempty"`
}

func (x *UserIngredientPreferenceUpdateRequestInput) Reset() {
	*x = UserIngredientPreferenceUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserIngredientPreferenceUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIngredientPreferenceUpdateRequestInput) ProtoMessage() {}

func (x *UserIngredientPreferenceUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIngredientPreferenceUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*UserIngredientPreferenceUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{44}
}

func (x *UserIngredientPreferenceUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *UserIngredientPreferenceUpdateRequestInput) GetIngredientID() string {
	if x != nil {
		return x.IngredientID
	}
	return ""
}

func (x *UserIngredientPreferenceUpdateRequestInput) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *UserIngredientPreferenceUpdateRequestInput) GetAllergy() bool {
	if x != nil {
		return x.Allergy
	}
	return false
}

// ArchiveValidIngredient
type ArchiveValidIngredientRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientID string                 `protobuf:"bytes,1,opt,name=validIngredientID,proto3" json:"validIngredientID,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ArchiveValidIngredientRequest) Reset() {
	*x = ArchiveValidIngredientRequest{}
	mi := &file_messages_eating_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidIngredientRequest) ProtoMessage() {}

func (x *ArchiveValidIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidIngredientRequest.ProtoReflect.Descriptor instead.
func (*ArchiveValidIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{45}
}

func (x *ArchiveValidIngredientRequest) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

type ArchiveValidIngredientResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveValidIngredientResponse) Reset() {
	*x = ArchiveValidIngredientResponse{}
	mi := &file_messages_eating_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidIngredientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidIngredientResponse) ProtoMessage() {}

func (x *ArchiveValidIngredientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidIngredientResponse.ProtoReflect.Descriptor instead.
func (*ArchiveValidIngredientResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{46}
}

// ArchiveValidIngredientGroup
type ArchiveValidIngredientGroupRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientGroupID string                 `protobuf:"bytes,1,opt,name=validIngredientGroupID,proto3" json:"validIngredientGroupID,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ArchiveValidIngredientGroupRequest) Reset() {
	*x = ArchiveValidIngredientGroupRequest{}
	mi := &file_messages_eating_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidIngredientGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidIngredientGroupRequest) ProtoMessage() {}

func (x *ArchiveValidIngredientGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidIngredientGroupRequest.ProtoReflect.Descriptor instead.
func (*ArchiveValidIngredientGroupRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{47}
}

func (x *ArchiveValidIngredientGroupRequest) GetValidIngredientGroupID() string {
	if x != nil {
		return x.ValidIngredientGroupID
	}
	return ""
}

type ArchiveValidIngredientGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveValidIngredientGroupResponse) Reset() {
	*x = ArchiveValidIngredientGroupResponse{}
	mi := &file_messages_eating_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidIngredientGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidIngredientGroupResponse) ProtoMessage() {}

func (x *ArchiveValidIngredientGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidIngredientGroupResponse.ProtoReflect.Descriptor instead.
func (*ArchiveValidIngredientGroupResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{48}
}

// ArchiveValidIngredientMeasurementUnit
type ArchiveValidIngredientMeasurementUnitRequest struct {
	state                            protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientMeasurementUnitID string                 `protobuf:"bytes,1,opt,name=validIngredientMeasurementUnitID,proto3" json:"validIngredientMeasurementUnitID,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *ArchiveValidIngredientMeasurementUnitRequest) Reset() {
	*x = ArchiveValidIngredientMeasurementUnitRequest{}
	mi := &file_messages_eating_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidIngredientMeasurementUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidIngredientMeasurementUnitRequest) ProtoMessage() {}

func (x *ArchiveValidIngredientMeasurementUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidIngredientMeasurementUnitRequest.ProtoReflect.Descriptor instead.
func (*ArchiveValidIngredientMeasurementUnitRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{49}
}

func (x *ArchiveValidIngredientMeasurementUnitRequest) GetValidIngredientMeasurementUnitID() string {
	if x != nil {
		return x.ValidIngredientMeasurementUnitID
	}
	return ""
}

type ArchiveValidIngredientMeasurementUnitResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveValidIngredientMeasurementUnitResponse) Reset() {
	*x = ArchiveValidIngredientMeasurementUnitResponse{}
	mi := &file_messages_eating_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidIngredientMeasurementUnitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidIngredientMeasurementUnitResponse) ProtoMessage() {}

func (x *ArchiveValidIngredientMeasurementUnitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidIngredientMeasurementUnitResponse.ProtoReflect.Descriptor instead.
func (*ArchiveValidIngredientMeasurementUnitResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{50}
}

// ArchiveValidIngredientPreparation
type ArchiveValidIngredientPreparationRequest struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientPreparationID string                 `protobuf:"bytes,1,opt,name=validIngredientPreparationID,proto3" json:"validIngredientPreparationID,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *ArchiveValidIngredientPreparationRequest) Reset() {
	*x = ArchiveValidIngredientPreparationRequest{}
	mi := &file_messages_eating_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidIngredientPreparationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidIngredientPreparationRequest) ProtoMessage() {}

func (x *ArchiveValidIngredientPreparationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidIngredientPreparationRequest.ProtoReflect.Descriptor instead.
func (*ArchiveValidIngredientPreparationRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{51}
}

func (x *ArchiveValidIngredientPreparationRequest) GetValidIngredientPreparationID() string {
	if x != nil {
		return x.ValidIngredientPreparationID
	}
	return ""
}

type ArchiveValidIngredientPreparationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveValidIngredientPreparationResponse) Reset() {
	*x = ArchiveValidIngredientPreparationResponse{}
	mi := &file_messages_eating_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidIngredientPreparationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidIngredientPreparationResponse) ProtoMessage() {}

func (x *ArchiveValidIngredientPreparationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidIngredientPreparationResponse.ProtoReflect.Descriptor instead.
func (*ArchiveValidIngredientPreparationResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{52}
}

// ArchiveValidIngredientState
type ArchiveValidIngredientStateRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientStateID string                 `protobuf:"bytes,1,opt,name=validIngredientStateID,proto3" json:"validIngredientStateID,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ArchiveValidIngredientStateRequest) Reset() {
	*x = ArchiveValidIngredientStateRequest{}
	mi := &file_messages_eating_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidIngredientStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidIngredientStateRequest) ProtoMessage() {}

func (x *ArchiveValidIngredientStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidIngredientStateRequest.ProtoReflect.Descriptor instead.
func (*ArchiveValidIngredientStateRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{53}
}

func (x *ArchiveValidIngredientStateRequest) GetValidIngredientStateID() string {
	if x != nil {
		return x.ValidIngredientStateID
	}
	return ""
}

type ArchiveValidIngredientStateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveValidIngredientStateResponse) Reset() {
	*x = ArchiveValidIngredientStateResponse{}
	mi := &file_messages_eating_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidIngredientStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidIngredientStateResponse) ProtoMessage() {}

func (x *ArchiveValidIngredientStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidIngredientStateResponse.ProtoReflect.Descriptor instead.
func (*ArchiveValidIngredientStateResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{54}
}

// ArchiveValidIngredientStateIngredient
type ArchiveValidIngredientStateIngredientRequest struct {
	state                            protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientStateIngredientID string                 `protobuf:"bytes,1,opt,name=validIngredientStateIngredientID,proto3" json:"validIngredientStateIngredientID,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *ArchiveValidIngredientStateIngredientRequest) Reset() {
	*x = ArchiveValidIngredientStateIngredientRequest{}
	mi := &file_messages_eating_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidIngredientStateIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidIngredientStateIngredientRequest) ProtoMessage() {}

func (x *ArchiveValidIngredientStateIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidIngredientStateIngredientRequest.ProtoReflect.Descriptor instead.
func (*ArchiveValidIngredientStateIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{55}
}

func (x *ArchiveValidIngredientStateIngredientRequest) GetValidIngredientStateIngredientID() string {
	if x != nil {
		return x.ValidIngredientStateIngredientID
	}
	return ""
}

type ArchiveValidIngredientStateIngredientResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveValidIngredientStateIngredientResponse) Reset() {
	*x = ArchiveValidIngredientStateIngredientResponse{}
	mi := &file_messages_eating_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidIngredientStateIngredientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidIngredientStateIngredientResponse) ProtoMessage() {}

func (x *ArchiveValidIngredientStateIngredientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidIngredientStateIngredientResponse.ProtoReflect.Descriptor instead.
func (*ArchiveValidIngredientStateIngredientResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{56}
}

// ArchiveValidInstrument
type ArchiveValidInstrumentRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ValidInstrumentID string                 `protobuf:"bytes,1,opt,name=validInstrumentID,proto3" json:"validInstrumentID,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ArchiveValidInstrumentRequest) Reset() {
	*x = ArchiveValidInstrumentRequest{}
	mi := &file_messages_eating_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidInstrumentRequest) ProtoMessage() {}

func (x *ArchiveValidInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidInstrumentRequest.ProtoReflect.Descriptor instead.
func (*ArchiveValidInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{57}
}

func (x *ArchiveValidInstrumentRequest) GetValidInstrumentID() string {
	if x != nil {
		return x.ValidInstrumentID
	}
	return ""
}

type ArchiveValidInstrumentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveValidInstrumentResponse) Reset() {
	*x = ArchiveValidInstrumentResponse{}
	mi := &file_messages_eating_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidInstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidInstrumentResponse) ProtoMessage() {}

func (x *ArchiveValidInstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidInstrumentResponse.ProtoReflect.Descriptor instead.
func (*ArchiveValidInstrumentResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{58}
}

// ArchiveValidMeasurementUnit
type ArchiveValidMeasurementUnitRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ValidMeasurementUnitID string                 `protobuf:"bytes,1,opt,name=validMeasurementUnitID,proto3" json:"validMeasurementUnitID,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ArchiveValidMeasurementUnitRequest) Reset() {
	*x = ArchiveValidMeasurementUnitRequest{}
	mi := &file_messages_eating_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidMeasurementUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidMeasurementUnitRequest) ProtoMessage() {}

func (x *ArchiveValidMeasurementUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidMeasurementUnitRequest.ProtoReflect.Descriptor instead.
func (*ArchiveValidMeasurementUnitRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{59}
}

func (x *ArchiveValidMeasurementUnitRequest) GetValidMeasurementUnitID() string {
	if x != nil {
		return x.ValidMeasurementUnitID
	}
	return ""
}

type ArchiveValidMeasurementUnitResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveValidMeasurementUnitResponse) Reset() {
	*x = ArchiveValidMeasurementUnitResponse{}
	mi := &file_messages_eating_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidMeasurementUnitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidMeasurementUnitResponse) ProtoMessage() {}

func (x *ArchiveValidMeasurementUnitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidMeasurementUnitResponse.ProtoReflect.Descriptor instead.
func (*ArchiveValidMeasurementUnitResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{60}
}

// ArchiveValidMeasurementUnitConversion
type ArchiveValidMeasurementUnitConversionRequest struct {
	state                            protoimpl.MessageState `protogen:"open.v1"`
	ValidMeasurementUnitConversionID string                 `protobuf:"bytes,1,opt,name=validMeasurementUnitConversionID,proto3" json:"validMeasurementUnitConversionID,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *ArchiveValidMeasurementUnitConversionRequest) Reset() {
	*x = ArchiveValidMeasurementUnitConversionRequest{}
	mi := &file_messages_eating_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidMeasurementUnitConversionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidMeasurementUnitConversionRequest) ProtoMessage() {}

func (x *ArchiveValidMeasurementUnitConversionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidMeasurementUnitConversionRequest.ProtoReflect.Descriptor instead.
func (*ArchiveValidMeasurementUnitConversionRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{61}
}

func (x *ArchiveValidMeasurementUnitConversionRequest) GetValidMeasurementUnitConversionID() string {
	if x != nil {
		return x.ValidMeasurementUnitConversionID
	}
	return ""
}

type ArchiveValidMeasurementUnitConversionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveValidMeasurementUnitConversionResponse) Reset() {
	*x = ArchiveValidMeasurementUnitConversionResponse{}
	mi := &file_messages_eating_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidMeasurementUnitConversionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidMeasurementUnitConversionResponse) ProtoMessage() {}

func (x *ArchiveValidMeasurementUnitConversionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidMeasurementUnitConversionResponse.ProtoReflect.Descriptor instead.
func (*ArchiveValidMeasurementUnitConversionResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{62}
}

// ArchiveValidPreparation
type ArchiveValidPreparationRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ValidPreparationID string                 `protobuf:"bytes,1,opt,name=validPreparationID,proto3" json:"validPreparationID,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ArchiveValidPreparationRequest) Reset() {
	*x = ArchiveValidPreparationRequest{}
	mi := &file_messages_eating_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidPreparationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidPreparationRequest) ProtoMessage() {}

func (x *ArchiveValidPreparationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidPreparationRequest.ProtoReflect.Descriptor instead.
func (*ArchiveValidPreparationRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{63}
}

func (x *ArchiveValidPreparationRequest) GetValidPreparationID() string {
	if x != nil {
		return x.ValidPreparationID
	}
	return ""
}

type ArchiveValidPreparationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveValidPreparationResponse) Reset() {
	*x = ArchiveValidPreparationResponse{}
	mi := &file_messages_eating_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidPreparationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidPreparationResponse) ProtoMessage() {}

func (x *ArchiveValidPreparationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidPreparationResponse.ProtoReflect.Descriptor instead.
func (*ArchiveValidPreparationResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{64}
}

// ArchiveValidPreparationInstrument
type ArchiveValidPreparationInstrumentRequest struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	ValidPreparationInstrumentID string                 `protobuf:"bytes,1,opt,name=validPreparationInstrumentID,proto3" json:"validPreparationInstrumentID,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *ArchiveValidPreparationInstrumentRequest) Reset() {
	*x = ArchiveValidPreparationInstrumentRequest{}
	mi := &file_messages_eating_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidPreparationInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidPreparationInstrumentRequest) ProtoMessage() {}

func (x *ArchiveValidPreparationInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidPreparationInstrumentRequest.ProtoReflect.Descriptor instead.
func (*ArchiveValidPreparationInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{65}
}

func (x *ArchiveValidPreparationInstrumentRequest) GetValidPreparationInstrumentID() string {
	if x != nil {
		return x.ValidPreparationInstrumentID
	}
	return ""
}

type ArchiveValidPreparationInstrumentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveValidPreparationInstrumentResponse) Reset() {
	*x = ArchiveValidPreparationInstrumentResponse{}
	mi := &file_messages_eating_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidPreparationInstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidPreparationInstrumentResponse) ProtoMessage() {}

func (x *ArchiveValidPreparationInstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidPreparationInstrumentResponse.ProtoReflect.Descriptor instead.
func (*ArchiveValidPreparationInstrumentResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{66}
}

// ArchiveValidPreparationVessel
type ArchiveValidPreparationVesselRequest struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	ValidPreparationVesselID string                 `protobuf:"bytes,1,opt,name=validPreparationVesselID,proto3" json:"validPreparationVesselID,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ArchiveValidPreparationVesselRequest) Reset() {
	*x = ArchiveValidPreparationVesselRequest{}
	mi := &file_messages_eating_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidPreparationVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidPreparationVesselRequest) ProtoMessage() {}

func (x *ArchiveValidPreparationVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidPreparationVesselRequest.ProtoReflect.Descriptor instead.
func (*ArchiveValidPreparationVesselRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{67}
}

func (x *ArchiveValidPreparationVesselRequest) GetValidPreparationVesselID() string {
	if x != nil {
		return x.ValidPreparationVesselID
	}
	return ""
}

type ArchiveValidPreparationVesselResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveValidPreparationVesselResponse) Reset() {
	*x = ArchiveValidPreparationVesselResponse{}
	mi := &file_messages_eating_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidPreparationVesselResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidPreparationVesselResponse) ProtoMessage() {}

func (x *ArchiveValidPreparationVesselResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidPreparationVesselResponse.ProtoReflect.Descriptor instead.
func (*ArchiveValidPreparationVesselResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{68}
}

// ArchiveValidVessel
type ArchiveValidVesselRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveValidVesselRequest) Reset() {
	*x = ArchiveValidVesselRequest{}
	mi := &file_messages_eating_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidVesselRequest) ProtoMessage() {}

func (x *ArchiveValidVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidVesselRequest.ProtoReflect.Descriptor instead.
func (*ArchiveValidVesselRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{69}
}

type ArchiveValidVesselResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveValidVesselResponse) Reset() {
	*x = ArchiveValidVesselResponse{}
	mi := &file_messages_eating_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidVesselResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidVesselResponse) ProtoMessage() {}

func (x *ArchiveValidVesselResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidVesselResponse.ProtoReflect.Descriptor instead.
func (*ArchiveValidVesselResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{70}
}

// CreateValidIngredient
type CreateValidIngredientRequest struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	StorageTemperatureInCelsius *OptionalFloat32Range  `protobuf:"bytes,1,opt,name=StorageTemperatureInCelsius,proto3" json:"StorageTemperatureInCelsius,omitempty"`
	Warning                     string                 `protobuf:"bytes,2,opt,name=Warning,proto3" json:"Warning,omitempty"`
	IconPath                    string                 `protobuf:"bytes,3,opt,name=IconPath,proto3" json:"IconPath,omitempty"`
	PluralName                  string                 `protobuf:"bytes,4,opt,name=PluralName,proto3" json:"PluralName,omitempty"`
	StorageInstructions         string                 `protobuf:"bytes,5,opt,name=StorageInstructions,proto3" json:"StorageInstructions,omitempty"`
	Name                        string                 `protobuf:"bytes,6,opt,name=Name,proto3" json:"Name,omitempty"`
	Description                 string                 `protobuf:"bytes,7,opt,name=Description,proto3" json:"Description,omitempty"`
	Slug                        string                 `protobuf:"bytes,8,opt,name=Slug,proto3" json:"Slug,omitempty"`
	ShoppingSuggestions         string                 `protobuf:"bytes,9,opt,name=ShoppingSuggestions,proto3" json:"ShoppingSuggestions,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
	ContainsPeanut              bool `protobuf:"varint,16,opt,name=ContainsPeanut,proto3" json:"ContainsPeanut,omitempty"`
	ContainsAlcohol             bool `protobuf:"varint,23,opt,name=ContainsAlcohol,proto3" json:"ContainsAlcohol,omitempty"`
	IsLiquid                    bool `protobuf:"varint,14,opt,name=IsLiquid,proto3" json:"IsLiquid,omitempty"`
	ContainsSoy                 bool `protobuf:"varint,15,opt,name=ContainsSoy,proto3" json:"ContainsSoy,omitempty"`
	AnimalFlesh                 bool `protobuf:"varint,12,opt,name=AnimalFlesh,proto3" json:"AnimalFlesh,omitempty"`
	AnimalDerived               bool `protobuf:"varint,17,opt,name=AnimalDerived,proto3" json:"AnimalDerived,omitempty"`
	RestrictToPreparations      bool `protobuf:"varint,18,opt,name=RestrictToPreparations,proto3" json:"RestrictToPreparations,omitempty"`
	ContainsDairy               bool `protobuf:"varint,19,opt,name=ContainsDairy,proto3" json:"ContainsDairy,omitempty"`
	ContainsSesame              bool `protobuf:"varint,20,opt,name=ContainsSesame,proto3" json:"ContainsSesame,omitempty"`
	ContainsTreeNut             bool `protobuf:"varint,21,opt,name=ContainsTreeNut,proto3" json:"ContainsTreeNut,omitempty"`
	ContainsWheat               bool `protobuf:"varint,22,opt,name=ContainsWheat,proto3" json:"ContainsWheat,omitempty"`
	ContainsEgg                 bool `protobuf:"varint,13,opt,name=ContainsEgg,proto3" json:"ContainsEgg,omitempty"`
	ContainsGluten              bool `protobuf:"varint,24,opt,name=ContainsGluten,proto3" json:"ContainsGluten,omitempty"`
	IsStarch                    bool `protobuf:"varint,25,opt,name=IsStarch,proto3" json:"IsStarch,omitempty"`
	IsProtein                   bool `protobuf:"varint,26,opt,name=IsProtein,proto3" json:"IsProtein,omitempty"`
	IsGrain                     bool `protobuf:"varint,27,opt,name=IsGrain,proto3" json:"IsGrain,omitempty"`
	IsFruit                     bool `protobuf:"varint,28,opt,name=IsFruit,proto3" json:"IsFruit,omitempty"`
	IsSalt                      bool `protobuf:"varint,29,opt,name=IsSalt,proto3" json:"IsSalt,omitempty"`
	IsFat                       bool `protobuf:"varint,30,opt,name=IsFat,proto3" json:"IsFat,omitempty"`
	IsAcid                      bool `protobuf:"varint,31,opt,name=IsAcid,proto3" json:"IsAcid,omitempty"`
	IsHeat                      bool `protobuf:"varint,32,opt,name=IsHeat,proto3" json:"IsHeat,omitempty"`
	ContainsShellfish           bool `protobuf:"varint,11,opt,name=ContainsShellfish,proto3" json:"ContainsShellfish,omitempty"`
	ContainsFish                bool `protobuf:"varint,10,opt,name=ContainsFish,proto3" json:"ContainsFish,omitempty"`
}

func (x *CreateValidIngredientRequest) Reset() {
	*x = CreateValidIngredientRequest{}
	mi := &file_messages_eating_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValidIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidIngredientRequest) ProtoMessage() {}

func (x *CreateValidIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidIngredientRequest.ProtoReflect.Descriptor instead.
func (*CreateValidIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{71}
}

func (x *CreateValidIngredientRequest) GetStorageTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.StorageTemperatureInCelsius
	}
	return nil
}

func (x *CreateValidIngredientRequest) GetWarning() string {
	if x != nil {
		return x.Warning
	}
	return ""
}

func (x *CreateValidIngredientRequest) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *CreateValidIngredientRequest) GetPluralName() string {
	if x != nil {
		return x.PluralName
	}
	return ""
}

func (x *CreateValidIngredientRequest) GetStorageInstructions() string {
	if x != nil {
		return x.StorageInstructions
	}
	return ""
}

func (x *CreateValidIngredientRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateValidIngredientRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateValidIngredientRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *CreateValidIngredientRequest) GetShoppingSuggestions() string {
	if x != nil {
		return x.ShoppingSuggestions
	}
	return ""
}

func (x *CreateValidIngredientRequest) GetContainsFish() bool {
	if x != nil {
		return x.ContainsFish
	}
	return false
}

func (x *CreateValidIngredientRequest) GetContainsShellfish() bool {
	if x != nil {
		return x.ContainsShellfish
	}
	return false
}

func (x *CreateValidIngredientRequest) GetAnimalFlesh() bool {
	if x != nil {
		return x.AnimalFlesh
	}
	return false
}

func (x *CreateValidIngredientRequest) GetContainsEgg() bool {
	if x != nil {
		return x.ContainsEgg
	}
	return false
}

func (x *CreateValidIngredientRequest) GetIsLiquid() bool {
	if x != nil {
		return x.IsLiquid
	}
	return false
}

func (x *CreateValidIngredientRequest) GetContainsSoy() bool {
	if x != nil {
		return x.ContainsSoy
	}
	return false
}

func (x *CreateValidIngredientRequest) GetContainsPeanut() bool {
	if x != nil {
		return x.ContainsPeanut
	}
	return false
}

func (x *CreateValidIngredientRequest) GetAnimalDerived() bool {
	if x != nil {
		return x.AnimalDerived
	}
	return false
}

func (x *CreateValidIngredientRequest) GetRestrictToPreparations() bool {
	if x != nil {
		return x.RestrictToPreparations
	}
	return false
}

func (x *CreateValidIngredientRequest) GetContainsDairy() bool {
	if x != nil {
		return x.ContainsDairy
	}
	return false
}

func (x *CreateValidIngredientRequest) GetContainsSesame() bool {
	if x != nil {
		return x.ContainsSesame
	}
	return false
}

func (x *CreateValidIngredientRequest) GetContainsTreeNut() bool {
	if x != nil {
		return x.ContainsTreeNut
	}
	return false
}

func (x *CreateValidIngredientRequest) GetContainsWheat() bool {
	if x != nil {
		return x.ContainsWheat
	}
	return false
}

func (x *CreateValidIngredientRequest) GetContainsAlcohol() bool {
	if x != nil {
		return x.ContainsAlcohol
	}
	return false
}

func (x *CreateValidIngredientRequest) GetContainsGluten() bool {
	if x != nil {
		return x.ContainsGluten
	}
	return false
}

func (x *CreateValidIngredientRequest) GetIsStarch() bool {
	if x != nil {
		return x.IsStarch
	}
	return false
}

func (x *CreateValidIngredientRequest) GetIsProtein() bool {
	if x != nil {
		return x.IsProtein
	}
	return false
}

func (x *CreateValidIngredientRequest) GetIsGrain() bool {
	if x != nil {
		return x.IsGrain
	}
	return false
}

func (x *CreateValidIngredientRequest) GetIsFruit() bool {
	if x != nil {
		return x.IsFruit
	}
	return false
}

func (x *CreateValidIngredientRequest) GetIsSalt() bool {
	if x != nil {
		return x.IsSalt
	}
	return false
}

func (x *CreateValidIngredientRequest) GetIsFat() bool {
	if x != nil {
		return x.IsFat
	}
	return false
}

func (x *CreateValidIngredientRequest) GetIsAcid() bool {
	if x != nil {
		return x.IsAcid
	}
	return false
}

func (x *CreateValidIngredientRequest) GetIsHeat() bool {
	if x != nil {
		return x.IsHeat
	}
	return false
}

type CreateValidIngredientResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *ValidIngredient       `protobuf:"bytes,2,opt,name=Result,proto3" json:"Result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateValidIngredientResponse) Reset() {
	*x = CreateValidIngredientResponse{}
	mi := &file_messages_eating_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValidIngredientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidIngredientResponse) ProtoMessage() {}

func (x *CreateValidIngredientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidIngredientResponse.ProtoReflect.Descriptor instead.
func (*CreateValidIngredientResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{72}
}

func (x *CreateValidIngredientResponse) GetResult() *ValidIngredient {
	if x != nil {
		return x.Result
	}
	return nil
}

// CreateValidIngredientGroup
type CreateValidIngredientGroupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateValidIngredientGroupRequest) Reset() {
	*x = CreateValidIngredientGroupRequest{}
	mi := &file_messages_eating_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValidIngredientGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidIngredientGroupRequest) ProtoMessage() {}

func (x *CreateValidIngredientGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidIngredientGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateValidIngredientGroupRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{73}
}

type CreateValidIngredientGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateValidIngredientGroupResponse) Reset() {
	*x = CreateValidIngredientGroupResponse{}
	mi := &file_messages_eating_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValidIngredientGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidIngredientGroupResponse) ProtoMessage() {}

func (x *CreateValidIngredientGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidIngredientGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateValidIngredientGroupResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{74}
}

// CreateValidIngredientMeasurementUnit
type CreateValidIngredientMeasurementUnitRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateValidIngredientMeasurementUnitRequest) Reset() {
	*x = CreateValidIngredientMeasurementUnitRequest{}
	mi := &file_messages_eating_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValidIngredientMeasurementUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidIngredientMeasurementUnitRequest) ProtoMessage() {}

func (x *CreateValidIngredientMeasurementUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidIngredientMeasurementUnitRequest.ProtoReflect.Descriptor instead.
func (*CreateValidIngredientMeasurementUnitRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{75}
}

type CreateValidIngredientMeasurementUnitResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateValidIngredientMeasurementUnitResponse) Reset() {
	*x = CreateValidIngredientMeasurementUnitResponse{}
	mi := &file_messages_eating_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValidIngredientMeasurementUnitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidIngredientMeasurementUnitResponse) ProtoMessage() {}

func (x *CreateValidIngredientMeasurementUnitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidIngredientMeasurementUnitResponse.ProtoReflect.Descriptor instead.
func (*CreateValidIngredientMeasurementUnitResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{76}
}

// CreateValidIngredientPreparation
type CreateValidIngredientPreparationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateValidIngredientPreparationRequest) Reset() {
	*x = CreateValidIngredientPreparationRequest{}
	mi := &file_messages_eating_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValidIngredientPreparationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidIngredientPreparationRequest) ProtoMessage() {}

func (x *CreateValidIngredientPreparationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidIngredientPreparationRequest.ProtoReflect.Descriptor instead.
func (*CreateValidIngredientPreparationRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{77}
}

type CreateValidIngredientPreparationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateValidIngredientPreparationResponse) Reset() {
	*x = CreateValidIngredientPreparationResponse{}
	mi := &file_messages_eating_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValidIngredientPreparationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidIngredientPreparationResponse) ProtoMessage() {}

func (x *CreateValidIngredientPreparationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidIngredientPreparationResponse.ProtoReflect.Descriptor instead.
func (*CreateValidIngredientPreparationResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{78}
}

// CreateValidIngredientState
type CreateValidIngredientStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateValidIngredientStateRequest) Reset() {
	*x = CreateValidIngredientStateRequest{}
	mi := &file_messages_eating_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValidIngredientStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidIngredientStateRequest) ProtoMessage() {}

func (x *CreateValidIngredientStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidIngredientStateRequest.ProtoReflect.Descriptor instead.
func (*CreateValidIngredientStateRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{79}
}

type CreateValidIngredientStateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateValidIngredientStateResponse) Reset() {
	*x = CreateValidIngredientStateResponse{}
	mi := &file_messages_eating_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValidIngredientStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidIngredientStateResponse) ProtoMessage() {}

func (x *CreateValidIngredientStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidIngredientStateResponse.ProtoReflect.Descriptor instead.
func (*CreateValidIngredientStateResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{80}
}

// CreateValidIngredientStateIngredient
type CreateValidIngredientStateIngredientRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateValidIngredientStateIngredientRequest) Reset() {
	*x = CreateValidIngredientStateIngredientRequest{}
	mi := &file_messages_eating_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValidIngredientStateIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidIngredientStateIngredientRequest) ProtoMessage() {}

func (x *CreateValidIngredientStateIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidIngredientStateIngredientRequest.ProtoReflect.Descriptor instead.
func (*CreateValidIngredientStateIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{81}
}

type CreateValidIngredientStateIngredientResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateValidIngredientStateIngredientResponse) Reset() {
	*x = CreateValidIngredientStateIngredientResponse{}
	mi := &file_messages_eating_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValidIngredientStateIngredientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidIngredientStateIngredientResponse) ProtoMessage() {}

func (x *CreateValidIngredientStateIngredientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidIngredientStateIngredientResponse.ProtoReflect.Descriptor instead.
func (*CreateValidIngredientStateIngredientResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{82}
}

// CreateValidInstrument
type CreateValidInstrumentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateValidInstrumentRequest) Reset() {
	*x = CreateValidInstrumentRequest{}
	mi := &file_messages_eating_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValidInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidInstrumentRequest) ProtoMessage() {}

func (x *CreateValidInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidInstrumentRequest.ProtoReflect.Descriptor instead.
func (*CreateValidInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{83}
}

type CreateValidInstrumentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateValidInstrumentResponse) Reset() {
	*x = CreateValidInstrumentResponse{}
	mi := &file_messages_eating_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValidInstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidInstrumentResponse) ProtoMessage() {}

func (x *CreateValidInstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidInstrumentResponse.ProtoReflect.Descriptor instead.
func (*CreateValidInstrumentResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{84}
}

// CreateValidMeasurementUnit
type CreateValidMeasurementUnitRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateValidMeasurementUnitRequest) Reset() {
	*x = CreateValidMeasurementUnitRequest{}
	mi := &file_messages_eating_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValidMeasurementUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidMeasurementUnitRequest) ProtoMessage() {}

func (x *CreateValidMeasurementUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidMeasurementUnitRequest.ProtoReflect.Descriptor instead.
func (*CreateValidMeasurementUnitRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{85}
}

type CreateValidMeasurementUnitResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateValidMeasurementUnitResponse) Reset() {
	*x = CreateValidMeasurementUnitResponse{}
	mi := &file_messages_eating_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValidMeasurementUnitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidMeasurementUnitResponse) ProtoMessage() {}

func (x *CreateValidMeasurementUnitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidMeasurementUnitResponse.ProtoReflect.Descriptor instead.
func (*CreateValidMeasurementUnitResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{86}
}

// CreateValidMeasurementUnitConversion
type CreateValidMeasurementUnitConversionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateValidMeasurementUnitConversionRequest) Reset() {
	*x = CreateValidMeasurementUnitConversionRequest{}
	mi := &file_messages_eating_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValidMeasurementUnitConversionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidMeasurementUnitConversionRequest) ProtoMessage() {}

func (x *CreateValidMeasurementUnitConversionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidMeasurementUnitConversionRequest.ProtoReflect.Descriptor instead.
func (*CreateValidMeasurementUnitConversionRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{87}
}

type CreateValidMeasurementUnitConversionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateValidMeasurementUnitConversionResponse) Reset() {
	*x = CreateValidMeasurementUnitConversionResponse{}
	mi := &file_messages_eating_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValidMeasurementUnitConversionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidMeasurementUnitConversionResponse) ProtoMessage() {}

func (x *CreateValidMeasurementUnitConversionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidMeasurementUnitConversionResponse.ProtoReflect.Descriptor instead.
func (*CreateValidMeasurementUnitConversionResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{88}
}

// CreateValidPreparation
type CreateValidPreparationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateValidPreparationRequest) Reset() {
	*x = CreateValidPreparationRequest{}
	mi := &file_messages_eating_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValidPreparationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidPreparationRequest) ProtoMessage() {}

func (x *CreateValidPreparationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidPreparationRequest.ProtoReflect.Descriptor instead.
func (*CreateValidPreparationRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{89}
}

type CreateValidPreparationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateValidPreparationResponse) Reset() {
	*x = CreateValidPreparationResponse{}
	mi := &file_messages_eating_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValidPreparationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidPreparationResponse) ProtoMessage() {}

func (x *CreateValidPreparationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidPreparationResponse.ProtoReflect.Descriptor instead.
func (*CreateValidPreparationResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{90}
}

// CreateValidPreparationInstrument
type CreateValidPreparationInstrumentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateValidPreparationInstrumentRequest) Reset() {
	*x = CreateValidPreparationInstrumentRequest{}
	mi := &file_messages_eating_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValidPreparationInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidPreparationInstrumentRequest) ProtoMessage() {}

func (x *CreateValidPreparationInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidPreparationInstrumentRequest.ProtoReflect.Descriptor instead.
func (*CreateValidPreparationInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{91}
}

type CreateValidPreparationInstrumentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateValidPreparationInstrumentResponse) Reset() {
	*x = CreateValidPreparationInstrumentResponse{}
	mi := &file_messages_eating_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValidPreparationInstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidPreparationInstrumentResponse) ProtoMessage() {}

func (x *CreateValidPreparationInstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidPreparationInstrumentResponse.ProtoReflect.Descriptor instead.
func (*CreateValidPreparationInstrumentResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{92}
}

// CreateValidPreparationVessel
type CreateValidPreparationVesselRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateValidPreparationVesselRequest) Reset() {
	*x = CreateValidPreparationVesselRequest{}
	mi := &file_messages_eating_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValidPreparationVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidPreparationVesselRequest) ProtoMessage() {}

func (x *CreateValidPreparationVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidPreparationVesselRequest.ProtoReflect.Descriptor instead.
func (*CreateValidPreparationVesselRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{93}
}

type CreateValidPreparationVesselResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateValidPreparationVesselResponse) Reset() {
	*x = CreateValidPreparationVesselResponse{}
	mi := &file_messages_eating_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValidPreparationVesselResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidPreparationVesselResponse) ProtoMessage() {}

func (x *CreateValidPreparationVesselResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidPreparationVesselResponse.ProtoReflect.Descriptor instead.
func (*CreateValidPreparationVesselResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{94}
}

// CreateValidVessel
type CreateValidVesselRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateValidVesselRequest) Reset() {
	*x = CreateValidVesselRequest{}
	mi := &file_messages_eating_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValidVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidVesselRequest) ProtoMessage() {}

func (x *CreateValidVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidVesselRequest.ProtoReflect.Descriptor instead.
func (*CreateValidVesselRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{95}
}

type CreateValidVesselResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateValidVesselResponse) Reset() {
	*x = CreateValidVesselResponse{}
	mi := &file_messages_eating_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateValidVesselResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateValidVesselResponse) ProtoMessage() {}

func (x *CreateValidVesselResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateValidVesselResponse.ProtoReflect.Descriptor instead.
func (*CreateValidVesselResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{96}
}

// GetRandomValidIngredient
type GetRandomValidIngredientRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRandomValidIngredientRequest) Reset() {
	*x = GetRandomValidIngredientRequest{}
	mi := &file_messages_eating_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRandomValidIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRandomValidIngredientRequest) ProtoMessage() {}

func (x *GetRandomValidIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRandomValidIngredientRequest.ProtoReflect.Descriptor instead.
func (*GetRandomValidIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{97}
}

type GetRandomValidIngredientResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *ValidIngredient       `protobuf:"bytes,2,opt,name=Result,proto3" json:"Result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRandomValidIngredientResponse) Reset() {
	*x = GetRandomValidIngredientResponse{}
	mi := &file_messages_eating_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRandomValidIngredientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRandomValidIngredientResponse) ProtoMessage() {}

func (x *GetRandomValidIngredientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRandomValidIngredientResponse.ProtoReflect.Descriptor instead.
func (*GetRandomValidIngredientResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{98}
}

func (x *GetRandomValidIngredientResponse) GetResult() *ValidIngredient {
	if x != nil {
		return x.Result
	}
	return nil
}

// GetRandomValidInstrument
type GetRandomValidInstrumentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRandomValidInstrumentRequest) Reset() {
	*x = GetRandomValidInstrumentRequest{}
	mi := &file_messages_eating_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRandomValidInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRandomValidInstrumentRequest) ProtoMessage() {}

func (x *GetRandomValidInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRandomValidInstrumentRequest.ProtoReflect.Descriptor instead.
func (*GetRandomValidInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{99}
}

type GetRandomValidInstrumentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRandomValidInstrumentResponse) Reset() {
	*x = GetRandomValidInstrumentResponse{}
	mi := &file_messages_eating_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRandomValidInstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRandomValidInstrumentResponse) ProtoMessage() {}

func (x *GetRandomValidInstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRandomValidInstrumentResponse.ProtoReflect.Descriptor instead.
func (*GetRandomValidInstrumentResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{100}
}

// GetRandomValidPreparation
type GetRandomValidPreparationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRandomValidPreparationRequest) Reset() {
	*x = GetRandomValidPreparationRequest{}
	mi := &file_messages_eating_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRandomValidPreparationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRandomValidPreparationRequest) ProtoMessage() {}

func (x *GetRandomValidPreparationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRandomValidPreparationRequest.ProtoReflect.Descriptor instead.
func (*GetRandomValidPreparationRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{101}
}

type GetRandomValidPreparationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRandomValidPreparationResponse) Reset() {
	*x = GetRandomValidPreparationResponse{}
	mi := &file_messages_eating_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRandomValidPreparationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRandomValidPreparationResponse) ProtoMessage() {}

func (x *GetRandomValidPreparationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRandomValidPreparationResponse.ProtoReflect.Descriptor instead.
func (*GetRandomValidPreparationResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{102}
}

// GetRandomValidVessel
type GetRandomValidVesselRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRandomValidVesselRequest) Reset() {
	*x = GetRandomValidVesselRequest{}
	mi := &file_messages_eating_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRandomValidVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRandomValidVesselRequest) ProtoMessage() {}

func (x *GetRandomValidVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRandomValidVesselRequest.ProtoReflect.Descriptor instead.
func (*GetRandomValidVesselRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{103}
}

type GetRandomValidVesselResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRandomValidVesselResponse) Reset() {
	*x = GetRandomValidVesselResponse{}
	mi := &file_messages_eating_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRandomValidVesselResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRandomValidVesselResponse) ProtoMessage() {}

func (x *GetRandomValidVesselResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRandomValidVesselResponse.ProtoReflect.Descriptor instead.
func (*GetRandomValidVesselResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{104}
}

// GetValidIngredient
type GetValidIngredientRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientID string                 `protobuf:"bytes,1,opt,name=validIngredientID,proto3" json:"validIngredientID,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetValidIngredientRequest) Reset() {
	*x = GetValidIngredientRequest{}
	mi := &file_messages_eating_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientRequest) ProtoMessage() {}

func (x *GetValidIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{105}
}

func (x *GetValidIngredientRequest) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

type GetValidIngredientResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *ValidIngredient       `protobuf:"bytes,2,opt,name=Result,proto3" json:"Result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientResponse) Reset() {
	*x = GetValidIngredientResponse{}
	mi := &file_messages_eating_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientResponse) ProtoMessage() {}

func (x *GetValidIngredientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientResponse.ProtoReflect.Descriptor instead.
func (*GetValidIngredientResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{106}
}

func (x *GetValidIngredientResponse) GetResult() *ValidIngredient {
	if x != nil {
		return x.Result
	}
	return nil
}

// GetValidIngredientGroup
type GetValidIngredientGroupRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientGroupID string                 `protobuf:"bytes,1,opt,name=validIngredientGroupID,proto3" json:"validIngredientGroupID,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetValidIngredientGroupRequest) Reset() {
	*x = GetValidIngredientGroupRequest{}
	mi := &file_messages_eating_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientGroupRequest) ProtoMessage() {}

func (x *GetValidIngredientGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientGroupRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientGroupRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{107}
}

func (x *GetValidIngredientGroupRequest) GetValidIngredientGroupID() string {
	if x != nil {
		return x.ValidIngredientGroupID
	}
	return ""
}

type GetValidIngredientGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientGroupResponse) Reset() {
	*x = GetValidIngredientGroupResponse{}
	mi := &file_messages_eating_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientGroupResponse) ProtoMessage() {}

func (x *GetValidIngredientGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientGroupResponse.ProtoReflect.Descriptor instead.
func (*GetValidIngredientGroupResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{108}
}

// GetValidIngredientGroups
type GetValidIngredientGroupsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientGroupsRequest) Reset() {
	*x = GetValidIngredientGroupsRequest{}
	mi := &file_messages_eating_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientGroupsRequest) ProtoMessage() {}

func (x *GetValidIngredientGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientGroupsRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientGroupsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{109}
}

func (x *GetValidIngredientGroupsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetValidIngredientGroupsResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Filter        *QueryFilter            `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidIngredientGroup `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientGroupsResponse) Reset() {
	*x = GetValidIngredientGroupsResponse{}
	mi := &file_messages_eating_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientGroupsResponse) ProtoMessage() {}

func (x *GetValidIngredientGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientGroupsResponse.ProtoReflect.Descriptor instead.
func (*GetValidIngredientGroupsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{110}
}

func (x *GetValidIngredientGroupsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidIngredientGroupsResponse) GetResults() []*ValidIngredientGroup {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetValidIngredientMeasurementUnit
type GetValidIngredientMeasurementUnitRequest struct {
	state                            protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientMeasurementUnitID string                 `protobuf:"bytes,1,opt,name=validIngredientMeasurementUnitID,proto3" json:"validIngredientMeasurementUnitID,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *GetValidIngredientMeasurementUnitRequest) Reset() {
	*x = GetValidIngredientMeasurementUnitRequest{}
	mi := &file_messages_eating_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientMeasurementUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientMeasurementUnitRequest) ProtoMessage() {}

func (x *GetValidIngredientMeasurementUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientMeasurementUnitRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientMeasurementUnitRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{111}
}

func (x *GetValidIngredientMeasurementUnitRequest) GetValidIngredientMeasurementUnitID() string {
	if x != nil {
		return x.ValidIngredientMeasurementUnitID
	}
	return ""
}

type GetValidIngredientMeasurementUnitResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientMeasurementUnitResponse) Reset() {
	*x = GetValidIngredientMeasurementUnitResponse{}
	mi := &file_messages_eating_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientMeasurementUnitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientMeasurementUnitResponse) ProtoMessage() {}

func (x *GetValidIngredientMeasurementUnitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientMeasurementUnitResponse.ProtoReflect.Descriptor instead.
func (*GetValidIngredientMeasurementUnitResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{112}
}

// GetValidIngredientMeasurementUnits
type GetValidIngredientMeasurementUnitsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientMeasurementUnitsRequest) Reset() {
	*x = GetValidIngredientMeasurementUnitsRequest{}
	mi := &file_messages_eating_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientMeasurementUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientMeasurementUnitsRequest) ProtoMessage() {}

func (x *GetValidIngredientMeasurementUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientMeasurementUnitsRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientMeasurementUnitsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{113}
}

func (x *GetValidIngredientMeasurementUnitsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetValidIngredientMeasurementUnitsResponse struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Filter        *QueryFilter                      `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidIngredientMeasurementUnit `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientMeasurementUnitsResponse) Reset() {
	*x = GetValidIngredientMeasurementUnitsResponse{}
	mi := &file_messages_eating_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientMeasurementUnitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientMeasurementUnitsResponse) ProtoMessage() {}

func (x *GetValidIngredientMeasurementUnitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientMeasurementUnitsResponse.ProtoReflect.Descriptor instead.
func (*GetValidIngredientMeasurementUnitsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{114}
}

func (x *GetValidIngredientMeasurementUnitsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidIngredientMeasurementUnitsResponse) GetResults() []*ValidIngredientMeasurementUnit {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetValidIngredientMeasurementUnitsByIngredient
type GetValidIngredientMeasurementUnitsByIngredientRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Filter            *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	ValidIngredientID string                 `protobuf:"bytes,2,opt,name=validIngredientID,proto3" json:"validIngredientID,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetValidIngredientMeasurementUnitsByIngredientRequest) Reset() {
	*x = GetValidIngredientMeasurementUnitsByIngredientRequest{}
	mi := &file_messages_eating_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientMeasurementUnitsByIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientMeasurementUnitsByIngredientRequest) ProtoMessage() {}

func (x *GetValidIngredientMeasurementUnitsByIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientMeasurementUnitsByIngredientRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientMeasurementUnitsByIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{115}
}

func (x *GetValidIngredientMeasurementUnitsByIngredientRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidIngredientMeasurementUnitsByIngredientRequest) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

type GetValidIngredientMeasurementUnitsByIngredientResponse struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Filter        *QueryFilter                      `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidMeasurementUnitConversion `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientMeasurementUnitsByIngredientResponse) Reset() {
	*x = GetValidIngredientMeasurementUnitsByIngredientResponse{}
	mi := &file_messages_eating_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientMeasurementUnitsByIngredientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientMeasurementUnitsByIngredientResponse) ProtoMessage() {}

func (x *GetValidIngredientMeasurementUnitsByIngredientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientMeasurementUnitsByIngredientResponse.ProtoReflect.Descriptor instead.
func (*GetValidIngredientMeasurementUnitsByIngredientResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{116}
}

func (x *GetValidIngredientMeasurementUnitsByIngredientResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidIngredientMeasurementUnitsByIngredientResponse) GetResults() []*ValidMeasurementUnitConversion {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetValidIngredientMeasurementUnitsByMeasurementUnit
type GetValidIngredientMeasurementUnitsByMeasurementUnitRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Filter                 *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	ValidMeasurementUnitID string                 `protobuf:"bytes,2,opt,name=validMeasurementUnitID,proto3" json:"validMeasurementUnitID,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetValidIngredientMeasurementUnitsByMeasurementUnitRequest) Reset() {
	*x = GetValidIngredientMeasurementUnitsByMeasurementUnitRequest{}
	mi := &file_messages_eating_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientMeasurementUnitsByMeasurementUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientMeasurementUnitsByMeasurementUnitRequest) ProtoMessage() {}

func (x *GetValidIngredientMeasurementUnitsByMeasurementUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientMeasurementUnitsByMeasurementUnitRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientMeasurementUnitsByMeasurementUnitRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{117}
}

func (x *GetValidIngredientMeasurementUnitsByMeasurementUnitRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidIngredientMeasurementUnitsByMeasurementUnitRequest) GetValidMeasurementUnitID() string {
	if x != nil {
		return x.ValidMeasurementUnitID
	}
	return ""
}

type GetValidIngredientMeasurementUnitsByMeasurementUnitResponse struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Filter        *QueryFilter                      `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidIngredientMeasurementUnit `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientMeasurementUnitsByMeasurementUnitResponse) Reset() {
	*x = GetValidIngredientMeasurementUnitsByMeasurementUnitResponse{}
	mi := &file_messages_eating_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientMeasurementUnitsByMeasurementUnitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientMeasurementUnitsByMeasurementUnitResponse) ProtoMessage() {}

func (x *GetValidIngredientMeasurementUnitsByMeasurementUnitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientMeasurementUnitsByMeasurementUnitResponse.ProtoReflect.Descriptor instead.
func (*GetValidIngredientMeasurementUnitsByMeasurementUnitResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{118}
}

func (x *GetValidIngredientMeasurementUnitsByMeasurementUnitResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidIngredientMeasurementUnitsByMeasurementUnitResponse) GetResults() []*ValidIngredientMeasurementUnit {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetValidIngredientPreparation
type GetValidIngredientPreparationRequest struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientPreparationID string                 `protobuf:"bytes,1,opt,name=validIngredientPreparationID,proto3" json:"validIngredientPreparationID,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *GetValidIngredientPreparationRequest) Reset() {
	*x = GetValidIngredientPreparationRequest{}
	mi := &file_messages_eating_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientPreparationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientPreparationRequest) ProtoMessage() {}

func (x *GetValidIngredientPreparationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientPreparationRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientPreparationRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{119}
}

func (x *GetValidIngredientPreparationRequest) GetValidIngredientPreparationID() string {
	if x != nil {
		return x.ValidIngredientPreparationID
	}
	return ""
}

type GetValidIngredientPreparationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientPreparationResponse) Reset() {
	*x = GetValidIngredientPreparationResponse{}
	mi := &file_messages_eating_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientPreparationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientPreparationResponse) ProtoMessage() {}

func (x *GetValidIngredientPreparationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientPreparationResponse.ProtoReflect.Descriptor instead.
func (*GetValidIngredientPreparationResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{120}
}

// GetValidIngredientPreparations
type GetValidIngredientPreparationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientPreparationsRequest) Reset() {
	*x = GetValidIngredientPreparationsRequest{}
	mi := &file_messages_eating_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientPreparationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientPreparationsRequest) ProtoMessage() {}

func (x *GetValidIngredientPreparationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientPreparationsRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientPreparationsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{121}
}

func (x *GetValidIngredientPreparationsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetValidIngredientPreparationsResponse struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Filter        *QueryFilter                  `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidIngredientPreparation `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientPreparationsResponse) Reset() {
	*x = GetValidIngredientPreparationsResponse{}
	mi := &file_messages_eating_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientPreparationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientPreparationsResponse) ProtoMessage() {}

func (x *GetValidIngredientPreparationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientPreparationsResponse.ProtoReflect.Descriptor instead.
func (*GetValidIngredientPreparationsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{122}
}

func (x *GetValidIngredientPreparationsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidIngredientPreparationsResponse) GetResults() []*ValidIngredientPreparation {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetValidIngredientPreparationsByIngredient
type GetValidIngredientPreparationsByIngredientRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Filter            *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	ValidIngredientID string                 `protobuf:"bytes,2,opt,name=validIngredientID,proto3" json:"validIngredientID,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetValidIngredientPreparationsByIngredientRequest) Reset() {
	*x = GetValidIngredientPreparationsByIngredientRequest{}
	mi := &file_messages_eating_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientPreparationsByIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientPreparationsByIngredientRequest) ProtoMessage() {}

func (x *GetValidIngredientPreparationsByIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientPreparationsByIngredientRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientPreparationsByIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{123}
}

func (x *GetValidIngredientPreparationsByIngredientRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidIngredientPreparationsByIngredientRequest) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

type GetValidIngredientPreparationsByIngredientResponse struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Filter        *QueryFilter                  `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidIngredientPreparation `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientPreparationsByIngredientResponse) Reset() {
	*x = GetValidIngredientPreparationsByIngredientResponse{}
	mi := &file_messages_eating_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientPreparationsByIngredientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientPreparationsByIngredientResponse) ProtoMessage() {}

func (x *GetValidIngredientPreparationsByIngredientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientPreparationsByIngredientResponse.ProtoReflect.Descriptor instead.
func (*GetValidIngredientPreparationsByIngredientResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{124}
}

func (x *GetValidIngredientPreparationsByIngredientResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidIngredientPreparationsByIngredientResponse) GetResults() []*ValidIngredientPreparation {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetValidIngredientPreparationsByPreparation
type GetValidIngredientPreparationsByPreparationRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Filter             *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	ValidPreparationID string                 `protobuf:"bytes,2,opt,name=ValidPreparationID,proto3" json:"ValidPreparationID,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetValidIngredientPreparationsByPreparationRequest) Reset() {
	*x = GetValidIngredientPreparationsByPreparationRequest{}
	mi := &file_messages_eating_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientPreparationsByPreparationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientPreparationsByPreparationRequest) ProtoMessage() {}

func (x *GetValidIngredientPreparationsByPreparationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientPreparationsByPreparationRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientPreparationsByPreparationRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{125}
}

func (x *GetValidIngredientPreparationsByPreparationRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidIngredientPreparationsByPreparationRequest) GetValidPreparationID() string {
	if x != nil {
		return x.ValidPreparationID
	}
	return ""
}

type GetValidIngredientPreparationsByPreparationResponse struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Filter        *QueryFilter                  `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidIngredientPreparation `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientPreparationsByPreparationResponse) Reset() {
	*x = GetValidIngredientPreparationsByPreparationResponse{}
	mi := &file_messages_eating_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientPreparationsByPreparationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientPreparationsByPreparationResponse) ProtoMessage() {}

func (x *GetValidIngredientPreparationsByPreparationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientPreparationsByPreparationResponse.ProtoReflect.Descriptor instead.
func (*GetValidIngredientPreparationsByPreparationResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{126}
}

func (x *GetValidIngredientPreparationsByPreparationResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidIngredientPreparationsByPreparationResponse) GetResults() []*ValidIngredientPreparation {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetValidIngredientState
type GetValidIngredientStateRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientStateID string                 `protobuf:"bytes,1,opt,name=validIngredientStateID,proto3" json:"validIngredientStateID,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetValidIngredientStateRequest) Reset() {
	*x = GetValidIngredientStateRequest{}
	mi := &file_messages_eating_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientStateRequest) ProtoMessage() {}

func (x *GetValidIngredientStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientStateRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientStateRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{127}
}

func (x *GetValidIngredientStateRequest) GetValidIngredientStateID() string {
	if x != nil {
		return x.ValidIngredientStateID
	}
	return ""
}

type GetValidIngredientStateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientStateResponse) Reset() {
	*x = GetValidIngredientStateResponse{}
	mi := &file_messages_eating_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientStateResponse) ProtoMessage() {}

func (x *GetValidIngredientStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientStateResponse.ProtoReflect.Descriptor instead.
func (*GetValidIngredientStateResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{128}
}

// GetValidIngredientStateIngredient
type GetValidIngredientStateIngredientRequest struct {
	state                            protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientStateIngredientID string                 `protobuf:"bytes,1,opt,name=validIngredientStateIngredientID,proto3" json:"validIngredientStateIngredientID,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *GetValidIngredientStateIngredientRequest) Reset() {
	*x = GetValidIngredientStateIngredientRequest{}
	mi := &file_messages_eating_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientStateIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientStateIngredientRequest) ProtoMessage() {}

func (x *GetValidIngredientStateIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientStateIngredientRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientStateIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{129}
}

func (x *GetValidIngredientStateIngredientRequest) GetValidIngredientStateIngredientID() string {
	if x != nil {
		return x.ValidIngredientStateIngredientID
	}
	return ""
}

type GetValidIngredientStateIngredientResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientStateIngredientResponse) Reset() {
	*x = GetValidIngredientStateIngredientResponse{}
	mi := &file_messages_eating_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientStateIngredientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientStateIngredientResponse) ProtoMessage() {}

func (x *GetValidIngredientStateIngredientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientStateIngredientResponse.ProtoReflect.Descriptor instead.
func (*GetValidIngredientStateIngredientResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{130}
}

// GetValidIngredientStateIngredients
type GetValidIngredientStateIngredientsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientStateIngredientsRequest) Reset() {
	*x = GetValidIngredientStateIngredientsRequest{}
	mi := &file_messages_eating_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientStateIngredientsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientStateIngredientsRequest) ProtoMessage() {}

func (x *GetValidIngredientStateIngredientsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientStateIngredientsRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientStateIngredientsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{131}
}

func (x *GetValidIngredientStateIngredientsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetValidIngredientStateIngredientsResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Filter        *QueryFilter            `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Result        []*ValidIngredientState `protobuf:"bytes,2,rep,name=Result,proto3" json:"Result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientStateIngredientsResponse) Reset() {
	*x = GetValidIngredientStateIngredientsResponse{}
	mi := &file_messages_eating_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientStateIngredientsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientStateIngredientsResponse) ProtoMessage() {}

func (x *GetValidIngredientStateIngredientsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientStateIngredientsResponse.ProtoReflect.Descriptor instead.
func (*GetValidIngredientStateIngredientsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{132}
}

func (x *GetValidIngredientStateIngredientsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidIngredientStateIngredientsResponse) GetResult() []*ValidIngredientState {
	if x != nil {
		return x.Result
	}
	return nil
}

// GetValidIngredientStateIngredientsByIngredient
type GetValidIngredientStateIngredientsByIngredientRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Filter            *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	ValidIngredientID string                 `protobuf:"bytes,2,opt,name=validIngredientID,proto3" json:"validIngredientID,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetValidIngredientStateIngredientsByIngredientRequest) Reset() {
	*x = GetValidIngredientStateIngredientsByIngredientRequest{}
	mi := &file_messages_eating_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientStateIngredientsByIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientStateIngredientsByIngredientRequest) ProtoMessage() {}

func (x *GetValidIngredientStateIngredientsByIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientStateIngredientsByIngredientRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientStateIngredientsByIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{133}
}

func (x *GetValidIngredientStateIngredientsByIngredientRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidIngredientStateIngredientsByIngredientRequest) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

type GetValidIngredientStateIngredientsByIngredientResponse struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Filter        *QueryFilter                      `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidIngredientStateIngredient `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientStateIngredientsByIngredientResponse) Reset() {
	*x = GetValidIngredientStateIngredientsByIngredientResponse{}
	mi := &file_messages_eating_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientStateIngredientsByIngredientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientStateIngredientsByIngredientResponse) ProtoMessage() {}

func (x *GetValidIngredientStateIngredientsByIngredientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientStateIngredientsByIngredientResponse.ProtoReflect.Descriptor instead.
func (*GetValidIngredientStateIngredientsByIngredientResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{134}
}

func (x *GetValidIngredientStateIngredientsByIngredientResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidIngredientStateIngredientsByIngredientResponse) GetResults() []*ValidIngredientStateIngredient {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetValidIngredientStateIngredientsByIngredientState
type GetValidIngredientStateIngredientsByIngredientStateRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Filter                 *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	ValidIngredientStateID string                 `protobuf:"bytes,2,opt,name=validIngredientStateID,proto3" json:"validIngredientStateID,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetValidIngredientStateIngredientsByIngredientStateRequest) Reset() {
	*x = GetValidIngredientStateIngredientsByIngredientStateRequest{}
	mi := &file_messages_eating_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientStateIngredientsByIngredientStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientStateIngredientsByIngredientStateRequest) ProtoMessage() {}

func (x *GetValidIngredientStateIngredientsByIngredientStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientStateIngredientsByIngredientStateRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientStateIngredientsByIngredientStateRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{135}
}

func (x *GetValidIngredientStateIngredientsByIngredientStateRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidIngredientStateIngredientsByIngredientStateRequest) GetValidIngredientStateID() string {
	if x != nil {
		return x.ValidIngredientStateID
	}
	return ""
}

type GetValidIngredientStateIngredientsByIngredientStateResponse struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Filter        *QueryFilter                      `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidIngredientStateIngredient `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientStateIngredientsByIngredientStateResponse) Reset() {
	*x = GetValidIngredientStateIngredientsByIngredientStateResponse{}
	mi := &file_messages_eating_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientStateIngredientsByIngredientStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientStateIngredientsByIngredientStateResponse) ProtoMessage() {}

func (x *GetValidIngredientStateIngredientsByIngredientStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientStateIngredientsByIngredientStateResponse.ProtoReflect.Descriptor instead.
func (*GetValidIngredientStateIngredientsByIngredientStateResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{136}
}

func (x *GetValidIngredientStateIngredientsByIngredientStateResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidIngredientStateIngredientsByIngredientStateResponse) GetResults() []*ValidIngredientStateIngredient {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetValidIngredientStates
type GetValidIngredientStatesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientStatesRequest) Reset() {
	*x = GetValidIngredientStatesRequest{}
	mi := &file_messages_eating_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientStatesRequest) ProtoMessage() {}

func (x *GetValidIngredientStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientStatesRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientStatesRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{137}
}

func (x *GetValidIngredientStatesRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetValidIngredientStatesResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Filter        *QueryFilter            `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidIngredientState `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientStatesResponse) Reset() {
	*x = GetValidIngredientStatesResponse{}
	mi := &file_messages_eating_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientStatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientStatesResponse) ProtoMessage() {}

func (x *GetValidIngredientStatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientStatesResponse.ProtoReflect.Descriptor instead.
func (*GetValidIngredientStatesResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{138}
}

func (x *GetValidIngredientStatesResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidIngredientStatesResponse) GetResults() []*ValidIngredientState {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetValidIngredients
type GetValidIngredientsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientsRequest) Reset() {
	*x = GetValidIngredientsRequest{}
	mi := &file_messages_eating_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientsRequest) ProtoMessage() {}

func (x *GetValidIngredientsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientsRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{139}
}

func (x *GetValidIngredientsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetValidIngredientsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidIngredient     `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientsResponse) Reset() {
	*x = GetValidIngredientsResponse{}
	mi := &file_messages_eating_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientsResponse) ProtoMessage() {}

func (x *GetValidIngredientsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientsResponse.ProtoReflect.Descriptor instead.
func (*GetValidIngredientsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{140}
}

func (x *GetValidIngredientsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidIngredientsResponse) GetResults() []*ValidIngredient {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetValidInstrument
type GetValidInstrumentRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ValidInstrumentID string                 `protobuf:"bytes,1,opt,name=validInstrumentID,proto3" json:"validInstrumentID,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetValidInstrumentRequest) Reset() {
	*x = GetValidInstrumentRequest{}
	mi := &file_messages_eating_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidInstrumentRequest) ProtoMessage() {}

func (x *GetValidInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidInstrumentRequest.ProtoReflect.Descriptor instead.
func (*GetValidInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{141}
}

func (x *GetValidInstrumentRequest) GetValidInstrumentID() string {
	if x != nil {
		return x.ValidInstrumentID
	}
	return ""
}

type GetValidInstrumentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidInstrumentResponse) Reset() {
	*x = GetValidInstrumentResponse{}
	mi := &file_messages_eating_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidInstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidInstrumentResponse) ProtoMessage() {}

func (x *GetValidInstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidInstrumentResponse.ProtoReflect.Descriptor instead.
func (*GetValidInstrumentResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{142}
}

// GetValidInstruments
type GetValidInstrumentsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidInstrumentsRequest) Reset() {
	*x = GetValidInstrumentsRequest{}
	mi := &file_messages_eating_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidInstrumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidInstrumentsRequest) ProtoMessage() {}

func (x *GetValidInstrumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidInstrumentsRequest.ProtoReflect.Descriptor instead.
func (*GetValidInstrumentsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{143}
}

func (x *GetValidInstrumentsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetValidInstrumentsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidInstrument     `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidInstrumentsResponse) Reset() {
	*x = GetValidInstrumentsResponse{}
	mi := &file_messages_eating_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidInstrumentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidInstrumentsResponse) ProtoMessage() {}

func (x *GetValidInstrumentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidInstrumentsResponse.ProtoReflect.Descriptor instead.
func (*GetValidInstrumentsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{144}
}

func (x *GetValidInstrumentsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidInstrumentsResponse) GetResults() []*ValidInstrument {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetValidMeasurementUnit
type GetValidMeasurementUnitRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ValidMeasurementUnitID string                 `protobuf:"bytes,1,opt,name=validMeasurementUnitID,proto3" json:"validMeasurementUnitID,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetValidMeasurementUnitRequest) Reset() {
	*x = GetValidMeasurementUnitRequest{}
	mi := &file_messages_eating_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidMeasurementUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidMeasurementUnitRequest) ProtoMessage() {}

func (x *GetValidMeasurementUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidMeasurementUnitRequest.ProtoReflect.Descriptor instead.
func (*GetValidMeasurementUnitRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{145}
}

func (x *GetValidMeasurementUnitRequest) GetValidMeasurementUnitID() string {
	if x != nil {
		return x.ValidMeasurementUnitID
	}
	return ""
}

type GetValidMeasurementUnitResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidMeasurementUnitResponse) Reset() {
	*x = GetValidMeasurementUnitResponse{}
	mi := &file_messages_eating_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidMeasurementUnitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidMeasurementUnitResponse) ProtoMessage() {}

func (x *GetValidMeasurementUnitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidMeasurementUnitResponse.ProtoReflect.Descriptor instead.
func (*GetValidMeasurementUnitResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{146}
}

// GetValidMeasurementUnitConversion
type GetValidMeasurementUnitConversionRequest struct {
	state                            protoimpl.MessageState `protogen:"open.v1"`
	ValidMeasurementUnitConversionID string                 `protobuf:"bytes,1,opt,name=validMeasurementUnitConversionID,proto3" json:"validMeasurementUnitConversionID,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *GetValidMeasurementUnitConversionRequest) Reset() {
	*x = GetValidMeasurementUnitConversionRequest{}
	mi := &file_messages_eating_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidMeasurementUnitConversionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidMeasurementUnitConversionRequest) ProtoMessage() {}

func (x *GetValidMeasurementUnitConversionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidMeasurementUnitConversionRequest.ProtoReflect.Descriptor instead.
func (*GetValidMeasurementUnitConversionRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{147}
}

func (x *GetValidMeasurementUnitConversionRequest) GetValidMeasurementUnitConversionID() string {
	if x != nil {
		return x.ValidMeasurementUnitConversionID
	}
	return ""
}

type GetValidMeasurementUnitConversionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidMeasurementUnitConversionResponse) Reset() {
	*x = GetValidMeasurementUnitConversionResponse{}
	mi := &file_messages_eating_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidMeasurementUnitConversionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidMeasurementUnitConversionResponse) ProtoMessage() {}

func (x *GetValidMeasurementUnitConversionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidMeasurementUnitConversionResponse.ProtoReflect.Descriptor instead.
func (*GetValidMeasurementUnitConversionResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{148}
}

// GetValidMeasurementUnitConversionsFromUnit
type GetValidMeasurementUnitConversionsFromUnitRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Filter                 *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	ValidMeasurementUnitID string                 `protobuf:"bytes,2,opt,name=validMeasurementUnitID,proto3" json:"validMeasurementUnitID,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetValidMeasurementUnitConversionsFromUnitRequest) Reset() {
	*x = GetValidMeasurementUnitConversionsFromUnitRequest{}
	mi := &file_messages_eating_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidMeasurementUnitConversionsFromUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidMeasurementUnitConversionsFromUnitRequest) ProtoMessage() {}

func (x *GetValidMeasurementUnitConversionsFromUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidMeasurementUnitConversionsFromUnitRequest.ProtoReflect.Descriptor instead.
func (*GetValidMeasurementUnitConversionsFromUnitRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{149}
}

func (x *GetValidMeasurementUnitConversionsFromUnitRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidMeasurementUnitConversionsFromUnitRequest) GetValidMeasurementUnitID() string {
	if x != nil {
		return x.ValidMeasurementUnitID
	}
	return ""
}

type GetValidMeasurementUnitConversionsFromUnitResponse struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Filter        *QueryFilter                      `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidMeasurementUnitConversion `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidMeasurementUnitConversionsFromUnitResponse) Reset() {
	*x = GetValidMeasurementUnitConversionsFromUnitResponse{}
	mi := &file_messages_eating_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidMeasurementUnitConversionsFromUnitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidMeasurementUnitConversionsFromUnitResponse) ProtoMessage() {}

func (x *GetValidMeasurementUnitConversionsFromUnitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidMeasurementUnitConversionsFromUnitResponse.ProtoReflect.Descriptor instead.
func (*GetValidMeasurementUnitConversionsFromUnitResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{150}
}

func (x *GetValidMeasurementUnitConversionsFromUnitResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidMeasurementUnitConversionsFromUnitResponse) GetResults() []*ValidMeasurementUnitConversion {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetValidMeasurementUnitConversionsToUnit
type GetValidMeasurementUnitConversionsToUnitRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Filter                 *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	ValidMeasurementUnitID string                 `protobuf:"bytes,2,opt,name=validMeasurementUnitID,proto3" json:"validMeasurementUnitID,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetValidMeasurementUnitConversionsToUnitRequest) Reset() {
	*x = GetValidMeasurementUnitConversionsToUnitRequest{}
	mi := &file_messages_eating_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidMeasurementUnitConversionsToUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidMeasurementUnitConversionsToUnitRequest) ProtoMessage() {}

func (x *GetValidMeasurementUnitConversionsToUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidMeasurementUnitConversionsToUnitRequest.ProtoReflect.Descriptor instead.
func (*GetValidMeasurementUnitConversionsToUnitRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{151}
}

func (x *GetValidMeasurementUnitConversionsToUnitRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidMeasurementUnitConversionsToUnitRequest) GetValidMeasurementUnitID() string {
	if x != nil {
		return x.ValidMeasurementUnitID
	}
	return ""
}

type GetValidMeasurementUnitConversionsToUnitResponse struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Filter        *QueryFilter                      `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidMeasurementUnitConversion `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidMeasurementUnitConversionsToUnitResponse) Reset() {
	*x = GetValidMeasurementUnitConversionsToUnitResponse{}
	mi := &file_messages_eating_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidMeasurementUnitConversionsToUnitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidMeasurementUnitConversionsToUnitResponse) ProtoMessage() {}

func (x *GetValidMeasurementUnitConversionsToUnitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidMeasurementUnitConversionsToUnitResponse.ProtoReflect.Descriptor instead.
func (*GetValidMeasurementUnitConversionsToUnitResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{152}
}

func (x *GetValidMeasurementUnitConversionsToUnitResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidMeasurementUnitConversionsToUnitResponse) GetResults() []*ValidMeasurementUnitConversion {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetValidMeasurementUnits
type GetValidMeasurementUnitsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidMeasurementUnitsRequest) Reset() {
	*x = GetValidMeasurementUnitsRequest{}
	mi := &file_messages_eating_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidMeasurementUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidMeasurementUnitsRequest) ProtoMessage() {}

func (x *GetValidMeasurementUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidMeasurementUnitsRequest.ProtoReflect.Descriptor instead.
func (*GetValidMeasurementUnitsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{153}
}

func (x *GetValidMeasurementUnitsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetValidMeasurementUnitsResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Filter        *QueryFilter            `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidMeasurementUnit `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidMeasurementUnitsResponse) Reset() {
	*x = GetValidMeasurementUnitsResponse{}
	mi := &file_messages_eating_proto_msgTypes[154]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidMeasurementUnitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidMeasurementUnitsResponse) ProtoMessage() {}

func (x *GetValidMeasurementUnitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[154]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidMeasurementUnitsResponse.ProtoReflect.Descriptor instead.
func (*GetValidMeasurementUnitsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{154}
}

func (x *GetValidMeasurementUnitsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidMeasurementUnitsResponse) GetResults() []*ValidMeasurementUnit {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetValidPreparation
type GetValidPreparationRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ValidPreparationID string                 `protobuf:"bytes,1,opt,name=validPreparationID,proto3" json:"validPreparationID,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetValidPreparationRequest) Reset() {
	*x = GetValidPreparationRequest{}
	mi := &file_messages_eating_proto_msgTypes[155]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationRequest) ProtoMessage() {}

func (x *GetValidPreparationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[155]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationRequest.ProtoReflect.Descriptor instead.
func (*GetValidPreparationRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{155}
}

func (x *GetValidPreparationRequest) GetValidPreparationID() string {
	if x != nil {
		return x.ValidPreparationID
	}
	return ""
}

type GetValidPreparationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidPreparationResponse) Reset() {
	*x = GetValidPreparationResponse{}
	mi := &file_messages_eating_proto_msgTypes[156]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationResponse) ProtoMessage() {}

func (x *GetValidPreparationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[156]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationResponse.ProtoReflect.Descriptor instead.
func (*GetValidPreparationResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{156}
}

// GetValidPreparationInstrument
type GetValidPreparationInstrumentRequest struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	ValidPreparationInstrumentID string                 `protobuf:"bytes,1,opt,name=validPreparationInstrumentID,proto3" json:"validPreparationInstrumentID,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *GetValidPreparationInstrumentRequest) Reset() {
	*x = GetValidPreparationInstrumentRequest{}
	mi := &file_messages_eating_proto_msgTypes[157]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationInstrumentRequest) ProtoMessage() {}

func (x *GetValidPreparationInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[157]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationInstrumentRequest.ProtoReflect.Descriptor instead.
func (*GetValidPreparationInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{157}
}

func (x *GetValidPreparationInstrumentRequest) GetValidPreparationInstrumentID() string {
	if x != nil {
		return x.ValidPreparationInstrumentID
	}
	return ""
}

type GetValidPreparationInstrumentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidPreparationInstrumentResponse) Reset() {
	*x = GetValidPreparationInstrumentResponse{}
	mi := &file_messages_eating_proto_msgTypes[158]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationInstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationInstrumentResponse) ProtoMessage() {}

func (x *GetValidPreparationInstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[158]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationInstrumentResponse.ProtoReflect.Descriptor instead.
func (*GetValidPreparationInstrumentResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{158}
}

// GetValidPreparationInstruments
type GetValidPreparationInstrumentsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidPreparationInstrumentsRequest) Reset() {
	*x = GetValidPreparationInstrumentsRequest{}
	mi := &file_messages_eating_proto_msgTypes[159]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationInstrumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationInstrumentsRequest) ProtoMessage() {}

func (x *GetValidPreparationInstrumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[159]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationInstrumentsRequest.ProtoReflect.Descriptor instead.
func (*GetValidPreparationInstrumentsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{159}
}

func (x *GetValidPreparationInstrumentsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetValidPreparationInstrumentsResponse struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Filter        *QueryFilter                  `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidPreparationInstrument `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidPreparationInstrumentsResponse) Reset() {
	*x = GetValidPreparationInstrumentsResponse{}
	mi := &file_messages_eating_proto_msgTypes[160]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationInstrumentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationInstrumentsResponse) ProtoMessage() {}

func (x *GetValidPreparationInstrumentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[160]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationInstrumentsResponse.ProtoReflect.Descriptor instead.
func (*GetValidPreparationInstrumentsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{160}
}

func (x *GetValidPreparationInstrumentsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidPreparationInstrumentsResponse) GetResults() []*ValidPreparationInstrument {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetValidPreparationInstrumentsByInstrument
type GetValidPreparationInstrumentsByInstrumentRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Filter            *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	ValidInstrumentID string                 `protobuf:"bytes,2,opt,name=validInstrumentID,proto3" json:"validInstrumentID,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetValidPreparationInstrumentsByInstrumentRequest) Reset() {
	*x = GetValidPreparationInstrumentsByInstrumentRequest{}
	mi := &file_messages_eating_proto_msgTypes[161]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationInstrumentsByInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationInstrumentsByInstrumentRequest) ProtoMessage() {}

func (x *GetValidPreparationInstrumentsByInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[161]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationInstrumentsByInstrumentRequest.ProtoReflect.Descriptor instead.
func (*GetValidPreparationInstrumentsByInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{161}
}

func (x *GetValidPreparationInstrumentsByInstrumentRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidPreparationInstrumentsByInstrumentRequest) GetValidInstrumentID() string {
	if x != nil {
		return x.ValidInstrumentID
	}
	return ""
}

type GetValidPreparationInstrumentsByInstrumentResponse struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Filter        *QueryFilter                  `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidPreparationInstrument `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidPreparationInstrumentsByInstrumentResponse) Reset() {
	*x = GetValidPreparationInstrumentsByInstrumentResponse{}
	mi := &file_messages_eating_proto_msgTypes[162]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationInstrumentsByInstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationInstrumentsByInstrumentResponse) ProtoMessage() {}

func (x *GetValidPreparationInstrumentsByInstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[162]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationInstrumentsByInstrumentResponse.ProtoReflect.Descriptor instead.
func (*GetValidPreparationInstrumentsByInstrumentResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{162}
}

func (x *GetValidPreparationInstrumentsByInstrumentResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidPreparationInstrumentsByInstrumentResponse) GetResults() []*ValidPreparationInstrument {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetValidPreparationInstrumentsByPreparation
type GetValidPreparationInstrumentsByPreparationRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Filter             *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	ValidPreparationID string                 `protobuf:"bytes,2,opt,name=validPreparationID,proto3" json:"validPreparationID,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetValidPreparationInstrumentsByPreparationRequest) Reset() {
	*x = GetValidPreparationInstrumentsByPreparationRequest{}
	mi := &file_messages_eating_proto_msgTypes[163]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationInstrumentsByPreparationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationInstrumentsByPreparationRequest) ProtoMessage() {}

func (x *GetValidPreparationInstrumentsByPreparationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[163]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationInstrumentsByPreparationRequest.ProtoReflect.Descriptor instead.
func (*GetValidPreparationInstrumentsByPreparationRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{163}
}

func (x *GetValidPreparationInstrumentsByPreparationRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidPreparationInstrumentsByPreparationRequest) GetValidPreparationID() string {
	if x != nil {
		return x.ValidPreparationID
	}
	return ""
}

type GetValidPreparationInstrumentsByPreparationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidPreparationInstrumentsByPreparationResponse) Reset() {
	*x = GetValidPreparationInstrumentsByPreparationResponse{}
	mi := &file_messages_eating_proto_msgTypes[164]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationInstrumentsByPreparationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationInstrumentsByPreparationResponse) ProtoMessage() {}

func (x *GetValidPreparationInstrumentsByPreparationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[164]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationInstrumentsByPreparationResponse.ProtoReflect.Descriptor instead.
func (*GetValidPreparationInstrumentsByPreparationResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{164}
}

// GetValidPreparationVessel
type GetValidPreparationVesselRequest struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	ValidPreparationVesselID string                 `protobuf:"bytes,1,opt,name=validPreparationVesselID,proto3" json:"validPreparationVesselID,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *GetValidPreparationVesselRequest) Reset() {
	*x = GetValidPreparationVesselRequest{}
	mi := &file_messages_eating_proto_msgTypes[165]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationVesselRequest) ProtoMessage() {}

func (x *GetValidPreparationVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[165]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationVesselRequest.ProtoReflect.Descriptor instead.
func (*GetValidPreparationVesselRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{165}
}

func (x *GetValidPreparationVesselRequest) GetValidPreparationVesselID() string {
	if x != nil {
		return x.ValidPreparationVesselID
	}
	return ""
}

type GetValidPreparationVesselResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidPreparationVesselResponse) Reset() {
	*x = GetValidPreparationVesselResponse{}
	mi := &file_messages_eating_proto_msgTypes[166]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationVesselResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationVesselResponse) ProtoMessage() {}

func (x *GetValidPreparationVesselResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[166]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationVesselResponse.ProtoReflect.Descriptor instead.
func (*GetValidPreparationVesselResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{166}
}

// GetValidPreparationVessels
type GetValidPreparationVesselsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidPreparationVesselsRequest) Reset() {
	*x = GetValidPreparationVesselsRequest{}
	mi := &file_messages_eating_proto_msgTypes[167]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationVesselsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationVesselsRequest) ProtoMessage() {}

func (x *GetValidPreparationVesselsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[167]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationVesselsRequest.ProtoReflect.Descriptor instead.
func (*GetValidPreparationVesselsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{167}
}

func (x *GetValidPreparationVesselsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetValidPreparationVesselsResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Filter        *QueryFilter              `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Result        []*ValidPreparationVessel `protobuf:"bytes,2,rep,name=Result,proto3" json:"Result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidPreparationVesselsResponse) Reset() {
	*x = GetValidPreparationVesselsResponse{}
	mi := &file_messages_eating_proto_msgTypes[168]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationVesselsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationVesselsResponse) ProtoMessage() {}

func (x *GetValidPreparationVesselsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[168]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationVesselsResponse.ProtoReflect.Descriptor instead.
func (*GetValidPreparationVesselsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{168}
}

func (x *GetValidPreparationVesselsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidPreparationVesselsResponse) GetResult() []*ValidPreparationVessel {
	if x != nil {
		return x.Result
	}
	return nil
}

// GetValidPreparationVesselsByPreparation
type GetValidPreparationVesselsByPreparationRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Filter             *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	ValidPreparationID string                 `protobuf:"bytes,2,opt,name=validPreparationID,proto3" json:"validPreparationID,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetValidPreparationVesselsByPreparationRequest) Reset() {
	*x = GetValidPreparationVesselsByPreparationRequest{}
	mi := &file_messages_eating_proto_msgTypes[169]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationVesselsByPreparationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationVesselsByPreparationRequest) ProtoMessage() {}

func (x *GetValidPreparationVesselsByPreparationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[169]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationVesselsByPreparationRequest.ProtoReflect.Descriptor instead.
func (*GetValidPreparationVesselsByPreparationRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{169}
}

func (x *GetValidPreparationVesselsByPreparationRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidPreparationVesselsByPreparationRequest) GetValidPreparationID() string {
	if x != nil {
		return x.ValidPreparationID
	}
	return ""
}

type GetValidPreparationVesselsByPreparationResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Filter        *QueryFilter              `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidPreparationVessel `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidPreparationVesselsByPreparationResponse) Reset() {
	*x = GetValidPreparationVesselsByPreparationResponse{}
	mi := &file_messages_eating_proto_msgTypes[170]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationVesselsByPreparationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationVesselsByPreparationResponse) ProtoMessage() {}

func (x *GetValidPreparationVesselsByPreparationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[170]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationVesselsByPreparationResponse.ProtoReflect.Descriptor instead.
func (*GetValidPreparationVesselsByPreparationResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{170}
}

func (x *GetValidPreparationVesselsByPreparationResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidPreparationVesselsByPreparationResponse) GetResults() []*ValidPreparationVessel {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetValidPreparationVesselsByVessel
type GetValidPreparationVesselsByVesselRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	ValidVesselID string                 `protobuf:"bytes,2,opt,name=validVesselID,proto3" json:"validVesselID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidPreparationVesselsByVesselRequest) Reset() {
	*x = GetValidPreparationVesselsByVesselRequest{}
	mi := &file_messages_eating_proto_msgTypes[171]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationVesselsByVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationVesselsByVesselRequest) ProtoMessage() {}

func (x *GetValidPreparationVesselsByVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[171]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationVesselsByVesselRequest.ProtoReflect.Descriptor instead.
func (*GetValidPreparationVesselsByVesselRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{171}
}

func (x *GetValidPreparationVesselsByVesselRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidPreparationVesselsByVesselRequest) GetValidVesselID() string {
	if x != nil {
		return x.ValidVesselID
	}
	return ""
}

type GetValidPreparationVesselsByVesselResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Filter        *QueryFilter              `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidPreparationVessel `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidPreparationVesselsByVesselResponse) Reset() {
	*x = GetValidPreparationVesselsByVesselResponse{}
	mi := &file_messages_eating_proto_msgTypes[172]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationVesselsByVesselResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationVesselsByVesselResponse) ProtoMessage() {}

func (x *GetValidPreparationVesselsByVesselResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[172]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationVesselsByVesselResponse.ProtoReflect.Descriptor instead.
func (*GetValidPreparationVesselsByVesselResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{172}
}

func (x *GetValidPreparationVesselsByVesselResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidPreparationVesselsByVesselResponse) GetResults() []*ValidPreparationVessel {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetValidPreparations
type GetValidPreparationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidPreparationsRequest) Reset() {
	*x = GetValidPreparationsRequest{}
	mi := &file_messages_eating_proto_msgTypes[173]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationsRequest) ProtoMessage() {}

func (x *GetValidPreparationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[173]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationsRequest.ProtoReflect.Descriptor instead.
func (*GetValidPreparationsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{173}
}

func (x *GetValidPreparationsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetValidPreparationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidPreparation    `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidPreparationsResponse) Reset() {
	*x = GetValidPreparationsResponse{}
	mi := &file_messages_eating_proto_msgTypes[174]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationsResponse) ProtoMessage() {}

func (x *GetValidPreparationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[174]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationsResponse.ProtoReflect.Descriptor instead.
func (*GetValidPreparationsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{174}
}

func (x *GetValidPreparationsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidPreparationsResponse) GetResults() []*ValidPreparation {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetValidVessel
type GetValidVesselRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ValidVesselID string                 `protobuf:"bytes,1,opt,name=validVesselID,proto3" json:"validVesselID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidVesselRequest) Reset() {
	*x = GetValidVesselRequest{}
	mi := &file_messages_eating_proto_msgTypes[175]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidVesselRequest) ProtoMessage() {}

func (x *GetValidVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[175]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidVesselRequest.ProtoReflect.Descriptor instead.
func (*GetValidVesselRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{175}
}

func (x *GetValidVesselRequest) GetValidVesselID() string {
	if x != nil {
		return x.ValidVesselID
	}
	return ""
}

type GetValidVesselResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidVesselResponse) Reset() {
	*x = GetValidVesselResponse{}
	mi := &file_messages_eating_proto_msgTypes[176]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidVesselResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidVesselResponse) ProtoMessage() {}

func (x *GetValidVesselResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[176]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidVesselResponse.ProtoReflect.Descriptor instead.
func (*GetValidVesselResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{176}
}

// GetValidVessels
type GetValidVesselsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidVesselsRequest) Reset() {
	*x = GetValidVesselsRequest{}
	mi := &file_messages_eating_proto_msgTypes[177]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidVesselsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidVesselsRequest) ProtoMessage() {}

func (x *GetValidVesselsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[177]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidVesselsRequest.ProtoReflect.Descriptor instead.
func (*GetValidVesselsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{177}
}

func (x *GetValidVesselsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetValidVesselsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidVessel         `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidVesselsResponse) Reset() {
	*x = GetValidVesselsResponse{}
	mi := &file_messages_eating_proto_msgTypes[178]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidVesselsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidVesselsResponse) ProtoMessage() {}

func (x *GetValidVesselsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[178]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidVesselsResponse.ProtoReflect.Descriptor instead.
func (*GetValidVesselsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{178}
}

func (x *GetValidVesselsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidVesselsResponse) GetResults() []*ValidVessel {
	if x != nil {
		return x.Results
	}
	return nil
}

// SearchForValidIngredientGroups
type SearchForValidIngredientGroupsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Query         string                 `protobuf:"bytes,2,opt,name=Query,proto3" json:"Query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForValidIngredientGroupsRequest) Reset() {
	*x = SearchForValidIngredientGroupsRequest{}
	mi := &file_messages_eating_proto_msgTypes[179]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForValidIngredientGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForValidIngredientGroupsRequest) ProtoMessage() {}

func (x *SearchForValidIngredientGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[179]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForValidIngredientGroupsRequest.ProtoReflect.Descriptor instead.
func (*SearchForValidIngredientGroupsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{179}
}

func (x *SearchForValidIngredientGroupsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForValidIngredientGroupsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type SearchForValidIngredientGroupsResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Filter        *QueryFilter            `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidIngredientGroup `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForValidIngredientGroupsResponse) Reset() {
	*x = SearchForValidIngredientGroupsResponse{}
	mi := &file_messages_eating_proto_msgTypes[180]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForValidIngredientGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForValidIngredientGroupsResponse) ProtoMessage() {}

func (x *SearchForValidIngredientGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[180]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForValidIngredientGroupsResponse.ProtoReflect.Descriptor instead.
func (*SearchForValidIngredientGroupsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{180}
}

func (x *SearchForValidIngredientGroupsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForValidIngredientGroupsResponse) GetResults() []*ValidIngredientGroup {
	if x != nil {
		return x.Results
	}
	return nil
}

// SearchForValidIngredientStates
type SearchForValidIngredientStatesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Query         string                 `protobuf:"bytes,2,opt,name=Query,proto3" json:"Query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForValidIngredientStatesRequest) Reset() {
	*x = SearchForValidIngredientStatesRequest{}
	mi := &file_messages_eating_proto_msgTypes[181]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForValidIngredientStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForValidIngredientStatesRequest) ProtoMessage() {}

func (x *SearchForValidIngredientStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[181]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForValidIngredientStatesRequest.ProtoReflect.Descriptor instead.
func (*SearchForValidIngredientStatesRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{181}
}

func (x *SearchForValidIngredientStatesRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForValidIngredientStatesRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type SearchForValidIngredientStatesResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Filter        *QueryFilter            `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidIngredientState `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForValidIngredientStatesResponse) Reset() {
	*x = SearchForValidIngredientStatesResponse{}
	mi := &file_messages_eating_proto_msgTypes[182]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForValidIngredientStatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForValidIngredientStatesResponse) ProtoMessage() {}

func (x *SearchForValidIngredientStatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[182]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForValidIngredientStatesResponse.ProtoReflect.Descriptor instead.
func (*SearchForValidIngredientStatesResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{182}
}

func (x *SearchForValidIngredientStatesResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForValidIngredientStatesResponse) GetResults() []*ValidIngredientState {
	if x != nil {
		return x.Results
	}
	return nil
}

// SearchForValidIngredients
type SearchForValidIngredientsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Query         string                 `protobuf:"bytes,2,opt,name=Query,proto3" json:"Query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForValidIngredientsRequest) Reset() {
	*x = SearchForValidIngredientsRequest{}
	mi := &file_messages_eating_proto_msgTypes[183]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForValidIngredientsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForValidIngredientsRequest) ProtoMessage() {}

func (x *SearchForValidIngredientsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[183]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForValidIngredientsRequest.ProtoReflect.Descriptor instead.
func (*SearchForValidIngredientsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{183}
}

func (x *SearchForValidIngredientsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForValidIngredientsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type SearchForValidIngredientsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidIngredient     `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForValidIngredientsResponse) Reset() {
	*x = SearchForValidIngredientsResponse{}
	mi := &file_messages_eating_proto_msgTypes[184]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForValidIngredientsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForValidIngredientsResponse) ProtoMessage() {}

func (x *SearchForValidIngredientsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[184]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForValidIngredientsResponse.ProtoReflect.Descriptor instead.
func (*SearchForValidIngredientsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{184}
}

func (x *SearchForValidIngredientsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForValidIngredientsResponse) GetResults() []*ValidIngredient {
	if x != nil {
		return x.Results
	}
	return nil
}

// SearchForValidInstruments
type SearchForValidInstrumentsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Query         string                 `protobuf:"bytes,2,opt,name=Query,proto3" json:"Query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForValidInstrumentsRequest) Reset() {
	*x = SearchForValidInstrumentsRequest{}
	mi := &file_messages_eating_proto_msgTypes[185]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForValidInstrumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForValidInstrumentsRequest) ProtoMessage() {}

func (x *SearchForValidInstrumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[185]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForValidInstrumentsRequest.ProtoReflect.Descriptor instead.
func (*SearchForValidInstrumentsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{185}
}

func (x *SearchForValidInstrumentsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForValidInstrumentsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type SearchForValidInstrumentsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidInstrument     `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForValidInstrumentsResponse) Reset() {
	*x = SearchForValidInstrumentsResponse{}
	mi := &file_messages_eating_proto_msgTypes[186]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForValidInstrumentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForValidInstrumentsResponse) ProtoMessage() {}

func (x *SearchForValidInstrumentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[186]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForValidInstrumentsResponse.ProtoReflect.Descriptor instead.
func (*SearchForValidInstrumentsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{186}
}

func (x *SearchForValidInstrumentsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForValidInstrumentsResponse) GetResults() []*ValidInstrument {
	if x != nil {
		return x.Results
	}
	return nil
}

// SearchForValidMeasurementUnits
type SearchForValidMeasurementUnitsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Query         string                 `protobuf:"bytes,2,opt,name=Query,proto3" json:"Query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForValidMeasurementUnitsRequest) Reset() {
	*x = SearchForValidMeasurementUnitsRequest{}
	mi := &file_messages_eating_proto_msgTypes[187]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForValidMeasurementUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForValidMeasurementUnitsRequest) ProtoMessage() {}

func (x *SearchForValidMeasurementUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[187]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForValidMeasurementUnitsRequest.ProtoReflect.Descriptor instead.
func (*SearchForValidMeasurementUnitsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{187}
}

func (x *SearchForValidMeasurementUnitsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForValidMeasurementUnitsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type SearchForValidMeasurementUnitsResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Filter        *QueryFilter            `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidMeasurementUnit `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForValidMeasurementUnitsResponse) Reset() {
	*x = SearchForValidMeasurementUnitsResponse{}
	mi := &file_messages_eating_proto_msgTypes[188]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForValidMeasurementUnitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForValidMeasurementUnitsResponse) ProtoMessage() {}

func (x *SearchForValidMeasurementUnitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[188]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForValidMeasurementUnitsResponse.ProtoReflect.Descriptor instead.
func (*SearchForValidMeasurementUnitsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{188}
}

func (x *SearchForValidMeasurementUnitsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForValidMeasurementUnitsResponse) GetResults() []*ValidMeasurementUnit {
	if x != nil {
		return x.Results
	}
	return nil
}

// SearchForValidPreparations
type SearchForValidPreparationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Query         string                 `protobuf:"bytes,2,opt,name=Query,proto3" json:"Query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForValidPreparationsRequest) Reset() {
	*x = SearchForValidPreparationsRequest{}
	mi := &file_messages_eating_proto_msgTypes[189]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForValidPreparationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForValidPreparationsRequest) ProtoMessage() {}

func (x *SearchForValidPreparationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[189]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForValidPreparationsRequest.ProtoReflect.Descriptor instead.
func (*SearchForValidPreparationsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{189}
}

func (x *SearchForValidPreparationsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForValidPreparationsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type SearchForValidPreparationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidPreparation    `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForValidPreparationsResponse) Reset() {
	*x = SearchForValidPreparationsResponse{}
	mi := &file_messages_eating_proto_msgTypes[190]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForValidPreparationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForValidPreparationsResponse) ProtoMessage() {}

func (x *SearchForValidPreparationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[190]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForValidPreparationsResponse.ProtoReflect.Descriptor instead.
func (*SearchForValidPreparationsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{190}
}

func (x *SearchForValidPreparationsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForValidPreparationsResponse) GetResults() []*ValidPreparation {
	if x != nil {
		return x.Results
	}
	return nil
}

// SearchForValidVessels
type SearchForValidVesselsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Query         string                 `protobuf:"bytes,2,opt,name=Query,proto3" json:"Query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForValidVesselsRequest) Reset() {
	*x = SearchForValidVesselsRequest{}
	mi := &file_messages_eating_proto_msgTypes[191]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForValidVesselsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForValidVesselsRequest) ProtoMessage() {}

func (x *SearchForValidVesselsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[191]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForValidVesselsRequest.ProtoReflect.Descriptor instead.
func (*SearchForValidVesselsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{191}
}

func (x *SearchForValidVesselsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForValidVesselsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type SearchForValidVesselsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidVessel         `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForValidVesselsResponse) Reset() {
	*x = SearchForValidVesselsResponse{}
	mi := &file_messages_eating_proto_msgTypes[192]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForValidVesselsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForValidVesselsResponse) ProtoMessage() {}

func (x *SearchForValidVesselsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[192]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForValidVesselsResponse.ProtoReflect.Descriptor instead.
func (*SearchForValidVesselsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{192}
}

func (x *SearchForValidVesselsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForValidVesselsResponse) GetResults() []*ValidVessel {
	if x != nil {
		return x.Results
	}
	return nil
}

// SearchValidIngredientsByPreparation
type SearchValidIngredientsByPreparationRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Filter             *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Query              string                 `protobuf:"bytes,2,opt,name=Query,proto3" json:"Query,omitempty"`
	ValidPreparationID string                 `protobuf:"bytes,3,opt,name=validPreparationID,proto3" json:"validPreparationID,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SearchValidIngredientsByPreparationRequest) Reset() {
	*x = SearchValidIngredientsByPreparationRequest{}
	mi := &file_messages_eating_proto_msgTypes[193]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchValidIngredientsByPreparationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchValidIngredientsByPreparationRequest) ProtoMessage() {}

func (x *SearchValidIngredientsByPreparationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[193]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchValidIngredientsByPreparationRequest.ProtoReflect.Descriptor instead.
func (*SearchValidIngredientsByPreparationRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{193}
}

func (x *SearchValidIngredientsByPreparationRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchValidIngredientsByPreparationRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchValidIngredientsByPreparationRequest) GetValidPreparationID() string {
	if x != nil {
		return x.ValidPreparationID
	}
	return ""
}

type SearchValidIngredientsByPreparationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidIngredient     `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchValidIngredientsByPreparationResponse) Reset() {
	*x = SearchValidIngredientsByPreparationResponse{}
	mi := &file_messages_eating_proto_msgTypes[194]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchValidIngredientsByPreparationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchValidIngredientsByPreparationResponse) ProtoMessage() {}

func (x *SearchValidIngredientsByPreparationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[194]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchValidIngredientsByPreparationResponse.ProtoReflect.Descriptor instead.
func (*SearchValidIngredientsByPreparationResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{194}
}

func (x *SearchValidIngredientsByPreparationResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchValidIngredientsByPreparationResponse) GetResults() []*ValidIngredient {
	if x != nil {
		return x.Results
	}
	return nil
}

// SearchValidMeasurementUnitsByIngredient
type SearchValidMeasurementUnitsByIngredientRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Filter            *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Query             string                 `protobuf:"bytes,2,opt,name=Query,proto3" json:"Query,omitempty"`
	ValidIngredientID string                 `protobuf:"bytes,3,opt,name=validIngredientID,proto3" json:"validIngredientID,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SearchValidMeasurementUnitsByIngredientRequest) Reset() {
	*x = SearchValidMeasurementUnitsByIngredientRequest{}
	mi := &file_messages_eating_proto_msgTypes[195]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchValidMeasurementUnitsByIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchValidMeasurementUnitsByIngredientRequest) ProtoMessage() {}

func (x *SearchValidMeasurementUnitsByIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[195]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchValidMeasurementUnitsByIngredientRequest.ProtoReflect.Descriptor instead.
func (*SearchValidMeasurementUnitsByIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{195}
}

func (x *SearchValidMeasurementUnitsByIngredientRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchValidMeasurementUnitsByIngredientRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchValidMeasurementUnitsByIngredientRequest) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

type SearchValidMeasurementUnitsByIngredientResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Filter        *QueryFilter            `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*ValidMeasurementUnit `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchValidMeasurementUnitsByIngredientResponse) Reset() {
	*x = SearchValidMeasurementUnitsByIngredientResponse{}
	mi := &file_messages_eating_proto_msgTypes[196]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchValidMeasurementUnitsByIngredientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchValidMeasurementUnitsByIngredientResponse) ProtoMessage() {}

func (x *SearchValidMeasurementUnitsByIngredientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[196]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchValidMeasurementUnitsByIngredientResponse.ProtoReflect.Descriptor instead.
func (*SearchValidMeasurementUnitsByIngredientResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{196}
}

func (x *SearchValidMeasurementUnitsByIngredientResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchValidMeasurementUnitsByIngredientResponse) GetResults() []*ValidMeasurementUnit {
	if x != nil {
		return x.Results
	}
	return nil
}

// UpdateValidIngredient
type UpdateValidIngredientRequest struct {
	state             protoimpl.MessageState             `protogen:"open.v1"`
	ValidIngredientID string                             `protobuf:"bytes,1,opt,name=validIngredientID,proto3" json:"validIngredientID,omitempty"`
	Input             *ValidIngredientUpdateRequestInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UpdateValidIngredientRequest) Reset() {
	*x = UpdateValidIngredientRequest{}
	mi := &file_messages_eating_proto_msgTypes[197]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidIngredientRequest) ProtoMessage() {}

func (x *UpdateValidIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[197]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidIngredientRequest.ProtoReflect.Descriptor instead.
func (*UpdateValidIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{197}
}

func (x *UpdateValidIngredientRequest) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

func (x *UpdateValidIngredientRequest) GetInput() *ValidIngredientUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateValidIngredientResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateValidIngredientResponse) Reset() {
	*x = UpdateValidIngredientResponse{}
	mi := &file_messages_eating_proto_msgTypes[198]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidIngredientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidIngredientResponse) ProtoMessage() {}

func (x *UpdateValidIngredientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[198]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidIngredientResponse.ProtoReflect.Descriptor instead.
func (*UpdateValidIngredientResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{198}
}

// UpdateValidIngredientGroup
type UpdateValidIngredientGroupRequest struct {
	state                  protoimpl.MessageState                  `protogen:"open.v1"`
	ValidIngredientGroupID string                                  `protobuf:"bytes,1,opt,name=validIngredientGroupID,proto3" json:"validIngredientGroupID,omitempty"`
	Input                  *ValidIngredientGroupUpdateRequestInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateValidIngredientGroupRequest) Reset() {
	*x = UpdateValidIngredientGroupRequest{}
	mi := &file_messages_eating_proto_msgTypes[199]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidIngredientGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidIngredientGroupRequest) ProtoMessage() {}

func (x *UpdateValidIngredientGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[199]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidIngredientGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateValidIngredientGroupRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{199}
}

func (x *UpdateValidIngredientGroupRequest) GetValidIngredientGroupID() string {
	if x != nil {
		return x.ValidIngredientGroupID
	}
	return ""
}

func (x *UpdateValidIngredientGroupRequest) GetInput() *ValidIngredientGroupUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateValidIngredientGroupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateValidIngredientGroupResponse) Reset() {
	*x = UpdateValidIngredientGroupResponse{}
	mi := &file_messages_eating_proto_msgTypes[200]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidIngredientGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidIngredientGroupResponse) ProtoMessage() {}

func (x *UpdateValidIngredientGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[200]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidIngredientGroupResponse.ProtoReflect.Descriptor instead.
func (*UpdateValidIngredientGroupResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{200}
}

// UpdateValidIngredientMeasurementUnit
type UpdateValidIngredientMeasurementUnitRequest struct {
	state                            protoimpl.MessageState                            `protogen:"open.v1"`
	ValidIngredientMeasurementUnitID string                                            `protobuf:"bytes,1,opt,name=validIngredientMeasurementUnitID,proto3" json:"validIngredientMeasurementUnitID,omitempty"`
	Input                            *ValidIngredientMeasurementUnitUpdateRequestInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *UpdateValidIngredientMeasurementUnitRequest) Reset() {
	*x = UpdateValidIngredientMeasurementUnitRequest{}
	mi := &file_messages_eating_proto_msgTypes[201]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidIngredientMeasurementUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidIngredientMeasurementUnitRequest) ProtoMessage() {}

func (x *UpdateValidIngredientMeasurementUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[201]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidIngredientMeasurementUnitRequest.ProtoReflect.Descriptor instead.
func (*UpdateValidIngredientMeasurementUnitRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{201}
}

func (x *UpdateValidIngredientMeasurementUnitRequest) GetValidIngredientMeasurementUnitID() string {
	if x != nil {
		return x.ValidIngredientMeasurementUnitID
	}
	return ""
}

func (x *UpdateValidIngredientMeasurementUnitRequest) GetInput() *ValidIngredientMeasurementUnitUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateValidIngredientMeasurementUnitResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateValidIngredientMeasurementUnitResponse) Reset() {
	*x = UpdateValidIngredientMeasurementUnitResponse{}
	mi := &file_messages_eating_proto_msgTypes[202]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidIngredientMeasurementUnitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidIngredientMeasurementUnitResponse) ProtoMessage() {}

func (x *UpdateValidIngredientMeasurementUnitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[202]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidIngredientMeasurementUnitResponse.ProtoReflect.Descriptor instead.
func (*UpdateValidIngredientMeasurementUnitResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{202}
}

// UpdateValidIngredientPreparation
type UpdateValidIngredientPreparationRequest struct {
	state                        protoimpl.MessageState                        `protogen:"open.v1"`
	ValidIngredientPreparationID string                                        `protobuf:"bytes,1,opt,name=validIngredientPreparationID,proto3" json:"validIngredientPreparationID,omitempty"`
	Input                        *ValidIngredientPreparationUpdateRequestInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *UpdateValidIngredientPreparationRequest) Reset() {
	*x = UpdateValidIngredientPreparationRequest{}
	mi := &file_messages_eating_proto_msgTypes[203]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidIngredientPreparationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidIngredientPreparationRequest) ProtoMessage() {}

func (x *UpdateValidIngredientPreparationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[203]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidIngredientPreparationRequest.ProtoReflect.Descriptor instead.
func (*UpdateValidIngredientPreparationRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{203}
}

func (x *UpdateValidIngredientPreparationRequest) GetValidIngredientPreparationID() string {
	if x != nil {
		return x.ValidIngredientPreparationID
	}
	return ""
}

func (x *UpdateValidIngredientPreparationRequest) GetInput() *ValidIngredientPreparationUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateValidIngredientPreparationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateValidIngredientPreparationResponse) Reset() {
	*x = UpdateValidIngredientPreparationResponse{}
	mi := &file_messages_eating_proto_msgTypes[204]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidIngredientPreparationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidIngredientPreparationResponse) ProtoMessage() {}

func (x *UpdateValidIngredientPreparationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[204]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidIngredientPreparationResponse.ProtoReflect.Descriptor instead.
func (*UpdateValidIngredientPreparationResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{204}
}

// UpdateValidIngredientState
type UpdateValidIngredientStateRequest struct {
	state                  protoimpl.MessageState                  `protogen:"open.v1"`
	ValidIngredientStateID string                                  `protobuf:"bytes,1,opt,name=validIngredientStateID,proto3" json:"validIngredientStateID,omitempty"`
	Input                  *ValidIngredientStateUpdateRequestInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateValidIngredientStateRequest) Reset() {
	*x = UpdateValidIngredientStateRequest{}
	mi := &file_messages_eating_proto_msgTypes[205]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidIngredientStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidIngredientStateRequest) ProtoMessage() {}

func (x *UpdateValidIngredientStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[205]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidIngredientStateRequest.ProtoReflect.Descriptor instead.
func (*UpdateValidIngredientStateRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{205}
}

func (x *UpdateValidIngredientStateRequest) GetValidIngredientStateID() string {
	if x != nil {
		return x.ValidIngredientStateID
	}
	return ""
}

func (x *UpdateValidIngredientStateRequest) GetInput() *ValidIngredientStateUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateValidIngredientStateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateValidIngredientStateResponse) Reset() {
	*x = UpdateValidIngredientStateResponse{}
	mi := &file_messages_eating_proto_msgTypes[206]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidIngredientStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidIngredientStateResponse) ProtoMessage() {}

func (x *UpdateValidIngredientStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[206]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidIngredientStateResponse.ProtoReflect.Descriptor instead.
func (*UpdateValidIngredientStateResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{206}
}

// UpdateValidIngredientStateIngredient
type UpdateValidIngredientStateIngredientRequest struct {
	state                            protoimpl.MessageState                            `protogen:"open.v1"`
	ValidIngredientStateIngredientID string                                            `protobuf:"bytes,1,opt,name=validIngredientStateIngredientID,proto3" json:"validIngredientStateIngredientID,omitempty"`
	Input                            *ValidIngredientStateIngredientUpdateRequestInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *UpdateValidIngredientStateIngredientRequest) Reset() {
	*x = UpdateValidIngredientStateIngredientRequest{}
	mi := &file_messages_eating_proto_msgTypes[207]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidIngredientStateIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidIngredientStateIngredientRequest) ProtoMessage() {}

func (x *UpdateValidIngredientStateIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[207]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidIngredientStateIngredientRequest.ProtoReflect.Descriptor instead.
func (*UpdateValidIngredientStateIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{207}
}

func (x *UpdateValidIngredientStateIngredientRequest) GetValidIngredientStateIngredientID() string {
	if x != nil {
		return x.ValidIngredientStateIngredientID
	}
	return ""
}

func (x *UpdateValidIngredientStateIngredientRequest) GetInput() *ValidIngredientStateIngredientUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateValidIngredientStateIngredientResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateValidIngredientStateIngredientResponse) Reset() {
	*x = UpdateValidIngredientStateIngredientResponse{}
	mi := &file_messages_eating_proto_msgTypes[208]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidIngredientStateIngredientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidIngredientStateIngredientResponse) ProtoMessage() {}

func (x *UpdateValidIngredientStateIngredientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[208]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidIngredientStateIngredientResponse.ProtoReflect.Descriptor instead.
func (*UpdateValidIngredientStateIngredientResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{208}
}

// UpdateValidInstrument
type UpdateValidInstrumentRequest struct {
	state             protoimpl.MessageState             `protogen:"open.v1"`
	ValidInstrumentID string                             `protobuf:"bytes,1,opt,name=validInstrumentID,proto3" json:"validInstrumentID,omitempty"`
	Input             *ValidInstrumentUpdateRequestInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UpdateValidInstrumentRequest) Reset() {
	*x = UpdateValidInstrumentRequest{}
	mi := &file_messages_eating_proto_msgTypes[209]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidInstrumentRequest) ProtoMessage() {}

func (x *UpdateValidInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[209]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidInstrumentRequest.ProtoReflect.Descriptor instead.
func (*UpdateValidInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{209}
}

func (x *UpdateValidInstrumentRequest) GetValidInstrumentID() string {
	if x != nil {
		return x.ValidInstrumentID
	}
	return ""
}

func (x *UpdateValidInstrumentRequest) GetInput() *ValidInstrumentUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateValidInstrumentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateValidInstrumentResponse) Reset() {
	*x = UpdateValidInstrumentResponse{}
	mi := &file_messages_eating_proto_msgTypes[210]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidInstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidInstrumentResponse) ProtoMessage() {}

func (x *UpdateValidInstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[210]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidInstrumentResponse.ProtoReflect.Descriptor instead.
func (*UpdateValidInstrumentResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{210}
}

// UpdateValidMeasurementUnit
type UpdateValidMeasurementUnitRequest struct {
	state                  protoimpl.MessageState                  `protogen:"open.v1"`
	ValidMeasurementUnitID string                                  `protobuf:"bytes,1,opt,name=validMeasurementUnitID,proto3" json:"validMeasurementUnitID,omitempty"`
	Input                  *ValidMeasurementUnitUpdateRequestInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateValidMeasurementUnitRequest) Reset() {
	*x = UpdateValidMeasurementUnitRequest{}
	mi := &file_messages_eating_proto_msgTypes[211]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidMeasurementUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidMeasurementUnitRequest) ProtoMessage() {}

func (x *UpdateValidMeasurementUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[211]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidMeasurementUnitRequest.ProtoReflect.Descriptor instead.
func (*UpdateValidMeasurementUnitRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{211}
}

func (x *UpdateValidMeasurementUnitRequest) GetValidMeasurementUnitID() string {
	if x != nil {
		return x.ValidMeasurementUnitID
	}
	return ""
}

func (x *UpdateValidMeasurementUnitRequest) GetInput() *ValidMeasurementUnitUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateValidMeasurementUnitResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateValidMeasurementUnitResponse) Reset() {
	*x = UpdateValidMeasurementUnitResponse{}
	mi := &file_messages_eating_proto_msgTypes[212]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidMeasurementUnitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidMeasurementUnitResponse) ProtoMessage() {}

func (x *UpdateValidMeasurementUnitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[212]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidMeasurementUnitResponse.ProtoReflect.Descriptor instead.
func (*UpdateValidMeasurementUnitResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{212}
}

// UpdateValidMeasurementUnitConversion
type UpdateValidMeasurementUnitConversionRequest struct {
	state                            protoimpl.MessageState                            `protogen:"open.v1"`
	ValidMeasurementUnitConversionID string                                            `protobuf:"bytes,1,opt,name=validMeasurementUnitConversionID,proto3" json:"validMeasurementUnitConversionID,omitempty"`
	Input                            *ValidMeasurementUnitConversionUpdateRequestInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *UpdateValidMeasurementUnitConversionRequest) Reset() {
	*x = UpdateValidMeasurementUnitConversionRequest{}
	mi := &file_messages_eating_proto_msgTypes[213]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidMeasurementUnitConversionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidMeasurementUnitConversionRequest) ProtoMessage() {}

func (x *UpdateValidMeasurementUnitConversionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[213]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidMeasurementUnitConversionRequest.ProtoReflect.Descriptor instead.
func (*UpdateValidMeasurementUnitConversionRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{213}
}

func (x *UpdateValidMeasurementUnitConversionRequest) GetValidMeasurementUnitConversionID() string {
	if x != nil {
		return x.ValidMeasurementUnitConversionID
	}
	return ""
}

func (x *UpdateValidMeasurementUnitConversionRequest) GetInput() *ValidMeasurementUnitConversionUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateValidMeasurementUnitConversionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateValidMeasurementUnitConversionResponse) Reset() {
	*x = UpdateValidMeasurementUnitConversionResponse{}
	mi := &file_messages_eating_proto_msgTypes[214]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidMeasurementUnitConversionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidMeasurementUnitConversionResponse) ProtoMessage() {}

func (x *UpdateValidMeasurementUnitConversionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[214]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidMeasurementUnitConversionResponse.ProtoReflect.Descriptor instead.
func (*UpdateValidMeasurementUnitConversionResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{214}
}

// UpdateValidPreparation
type UpdateValidPreparationRequest struct {
	state              protoimpl.MessageState              `protogen:"open.v1"`
	ValidPreparationID string                              `protobuf:"bytes,1,opt,name=validPreparationID,proto3" json:"validPreparationID,omitempty"`
	Input              *ValidPreparationUpdateRequestInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpdateValidPreparationRequest) Reset() {
	*x = UpdateValidPreparationRequest{}
	mi := &file_messages_eating_proto_msgTypes[215]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidPreparationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidPreparationRequest) ProtoMessage() {}

func (x *UpdateValidPreparationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[215]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidPreparationRequest.ProtoReflect.Descriptor instead.
func (*UpdateValidPreparationRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{215}
}

func (x *UpdateValidPreparationRequest) GetValidPreparationID() string {
	if x != nil {
		return x.ValidPreparationID
	}
	return ""
}

func (x *UpdateValidPreparationRequest) GetInput() *ValidPreparationUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateValidPreparationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateValidPreparationResponse) Reset() {
	*x = UpdateValidPreparationResponse{}
	mi := &file_messages_eating_proto_msgTypes[216]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidPreparationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidPreparationResponse) ProtoMessage() {}

func (x *UpdateValidPreparationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[216]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidPreparationResponse.ProtoReflect.Descriptor instead.
func (*UpdateValidPreparationResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{216}
}

// UpdateValidPreparationInstrument
type UpdateValidPreparationInstrumentRequest struct {
	state                        protoimpl.MessageState                        `protogen:"open.v1"`
	ValidPreparationInstrumentID string                                        `protobuf:"bytes,1,opt,name=validPreparationInstrumentID,proto3" json:"validPreparationInstrumentID,omitempty"`
	Input                        *ValidPreparationInstrumentUpdateRequestInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *UpdateValidPreparationInstrumentRequest) Reset() {
	*x = UpdateValidPreparationInstrumentRequest{}
	mi := &file_messages_eating_proto_msgTypes[217]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidPreparationInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidPreparationInstrumentRequest) ProtoMessage() {}

func (x *UpdateValidPreparationInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[217]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidPreparationInstrumentRequest.ProtoReflect.Descriptor instead.
func (*UpdateValidPreparationInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{217}
}

func (x *UpdateValidPreparationInstrumentRequest) GetValidPreparationInstrumentID() string {
	if x != nil {
		return x.ValidPreparationInstrumentID
	}
	return ""
}

func (x *UpdateValidPreparationInstrumentRequest) GetInput() *ValidPreparationInstrumentUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateValidPreparationInstrumentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateValidPreparationInstrumentResponse) Reset() {
	*x = UpdateValidPreparationInstrumentResponse{}
	mi := &file_messages_eating_proto_msgTypes[218]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidPreparationInstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidPreparationInstrumentResponse) ProtoMessage() {}

func (x *UpdateValidPreparationInstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[218]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidPreparationInstrumentResponse.ProtoReflect.Descriptor instead.
func (*UpdateValidPreparationInstrumentResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{218}
}

// UpdateValidPreparationVessel
type UpdateValidPreparationVesselRequest struct {
	state                    protoimpl.MessageState                    `protogen:"open.v1"`
	ValidPreparationVesselID string                                    `protobuf:"bytes,1,opt,name=validPreparationVesselID,proto3" json:"validPreparationVesselID,omitempty"`
	Input                    *ValidPreparationVesselUpdateRequestInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *UpdateValidPreparationVesselRequest) Reset() {
	*x = UpdateValidPreparationVesselRequest{}
	mi := &file_messages_eating_proto_msgTypes[219]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidPreparationVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidPreparationVesselRequest) ProtoMessage() {}

func (x *UpdateValidPreparationVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[219]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidPreparationVesselRequest.ProtoReflect.Descriptor instead.
func (*UpdateValidPreparationVesselRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{219}
}

func (x *UpdateValidPreparationVesselRequest) GetValidPreparationVesselID() string {
	if x != nil {
		return x.ValidPreparationVesselID
	}
	return ""
}

func (x *UpdateValidPreparationVesselRequest) GetInput() *ValidPreparationVesselUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateValidPreparationVesselResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateValidPreparationVesselResponse) Reset() {
	*x = UpdateValidPreparationVesselResponse{}
	mi := &file_messages_eating_proto_msgTypes[220]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidPreparationVesselResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidPreparationVesselResponse) ProtoMessage() {}

func (x *UpdateValidPreparationVesselResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[220]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidPreparationVesselResponse.ProtoReflect.Descriptor instead.
func (*UpdateValidPreparationVesselResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{220}
}

// UpdateValidVessel
type UpdateValidVesselRequest struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	ValidVesselID string                         `protobuf:"bytes,1,opt,name=validVesselID,proto3" json:"validVesselID,omitempty"`
	Input         *ValidVesselUpdateRequestInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateValidVesselRequest) Reset() {
	*x = UpdateValidVesselRequest{}
	mi := &file_messages_eating_proto_msgTypes[221]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidVesselRequest) ProtoMessage() {}

func (x *UpdateValidVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[221]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidVesselRequest.ProtoReflect.Descriptor instead.
func (*UpdateValidVesselRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{221}
}

func (x *UpdateValidVesselRequest) GetValidVesselID() string {
	if x != nil {
		return x.ValidVesselID
	}
	return ""
}

func (x *UpdateValidVesselRequest) GetInput() *ValidVesselUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateValidVesselResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateValidVesselResponse) Reset() {
	*x = UpdateValidVesselResponse{}
	mi := &file_messages_eating_proto_msgTypes[222]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidVesselResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidVesselResponse) ProtoMessage() {}

func (x *UpdateValidVesselResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[222]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidVesselResponse.ProtoReflect.Descriptor instead.
func (*UpdateValidVesselResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{222}
}

// ArchiveUserIngredientPreference
type ArchiveUserIngredientPreferenceRequest struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	UserIngredientPreferenceID string                 `protobuf:"bytes,1,opt,name=userIngredientPreferenceID,proto3" json:"userIngredientPreferenceID,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *ArchiveUserIngredientPreferenceRequest) Reset() {
	*x = ArchiveUserIngredientPreferenceRequest{}
	mi := &file_messages_eating_proto_msgTypes[223]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveUserIngredientPreferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveUserIngredientPreferenceRequest) ProtoMessage() {}

func (x *ArchiveUserIngredientPreferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[223]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveUserIngredientPreferenceRequest.ProtoReflect.Descriptor instead.
func (*ArchiveUserIngredientPreferenceRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{223}
}

func (x *ArchiveUserIngredientPreferenceRequest) GetUserIngredientPreferenceID() string {
	if x != nil {
		return x.UserIngredientPreferenceID
	}
	return ""
}

type ArchiveUserIngredientPreferenceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveUserIngredientPreferenceResponse) Reset() {
	*x = ArchiveUserIngredientPreferenceResponse{}
	mi := &file_messages_eating_proto_msgTypes[224]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveUserIngredientPreferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveUserIngredientPreferenceResponse) ProtoMessage() {}

func (x *ArchiveUserIngredientPreferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[224]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveUserIngredientPreferenceResponse.ProtoReflect.Descriptor instead.
func (*ArchiveUserIngredientPreferenceResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{224}
}

// CreateUserIngredientPreference
type CreateUserIngredientPreferenceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserIngredientPreferenceRequest) Reset() {
	*x = CreateUserIngredientPreferenceRequest{}
	mi := &file_messages_eating_proto_msgTypes[225]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserIngredientPreferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserIngredientPreferenceRequest) ProtoMessage() {}

func (x *CreateUserIngredientPreferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[225]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserIngredientPreferenceRequest.ProtoReflect.Descriptor instead.
func (*CreateUserIngredientPreferenceRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{225}
}

type CreateUserIngredientPreferenceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateUserIngredientPreferenceResponse) Reset() {
	*x = CreateUserIngredientPreferenceResponse{}
	mi := &file_messages_eating_proto_msgTypes[226]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateUserIngredientPreferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserIngredientPreferenceResponse) ProtoMessage() {}

func (x *CreateUserIngredientPreferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[226]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserIngredientPreferenceResponse.ProtoReflect.Descriptor instead.
func (*CreateUserIngredientPreferenceResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{226}
}

// GetUserIngredientPreferences
type GetUserIngredientPreferencesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserIngredientPreferencesRequest) Reset() {
	*x = GetUserIngredientPreferencesRequest{}
	mi := &file_messages_eating_proto_msgTypes[227]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserIngredientPreferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserIngredientPreferencesRequest) ProtoMessage() {}

func (x *GetUserIngredientPreferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[227]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserIngredientPreferencesRequest.ProtoReflect.Descriptor instead.
func (*GetUserIngredientPreferencesRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{227}
}

func (x *GetUserIngredientPreferencesRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetUserIngredientPreferencesResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Filter        *QueryFilter                `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*UserIngredientPreference `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserIngredientPreferencesResponse) Reset() {
	*x = GetUserIngredientPreferencesResponse{}
	mi := &file_messages_eating_proto_msgTypes[228]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserIngredientPreferencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserIngredientPreferencesResponse) ProtoMessage() {}

func (x *GetUserIngredientPreferencesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[228]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserIngredientPreferencesResponse.ProtoReflect.Descriptor instead.
func (*GetUserIngredientPreferencesResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{228}
}

func (x *GetUserIngredientPreferencesResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetUserIngredientPreferencesResponse) GetResults() []*UserIngredientPreference {
	if x != nil {
		return x.Results
	}
	return nil
}

// UpdateUserIngredientPreference
type UpdateUserIngredientPreferenceRequest struct {
	state                      protoimpl.MessageState                      `protogen:"open.v1"`
	UserIngredientPreferenceID string                                      `protobuf:"bytes,1,opt,name=userIngredientPreferenceID,proto3" json:"userIngredientPreferenceID,omitempty"`
	Input                      *UserIngredientPreferenceUpdateRequestInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *UpdateUserIngredientPreferenceRequest) Reset() {
	*x = UpdateUserIngredientPreferenceRequest{}
	mi := &file_messages_eating_proto_msgTypes[229]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserIngredientPreferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserIngredientPreferenceRequest) ProtoMessage() {}

func (x *UpdateUserIngredientPreferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[229]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserIngredientPreferenceRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserIngredientPreferenceRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{229}
}

func (x *UpdateUserIngredientPreferenceRequest) GetUserIngredientPreferenceID() string {
	if x != nil {
		return x.UserIngredientPreferenceID
	}
	return ""
}

func (x *UpdateUserIngredientPreferenceRequest) GetInput() *UserIngredientPreferenceUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateUserIngredientPreferenceResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserIngredientPreferenceResponse) Reset() {
	*x = UpdateUserIngredientPreferenceResponse{}
	mi := &file_messages_eating_proto_msgTypes[230]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserIngredientPreferenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserIngredientPreferenceResponse) ProtoMessage() {}

func (x *UpdateUserIngredientPreferenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[230]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserIngredientPreferenceResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserIngredientPreferenceResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{230}
}

type Recipe struct {
	EstimatedPortions   *Float32RangeWithOptionalMax `protobuf:"bytes,5,opt,name=EstimatedPortions,proto3" json:"EstimatedPortions,omitempty"`
	CreatedAt           *timestamppb.Timestamp       `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	state               protoimpl.MessageState       `protogen:"open.v1"`
	LastUpdatedAt       *timestamppb.Timestamp       `protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	ArchivedAt          *timestamppb.Timestamp       `protobuf:"bytes,4,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	ID                  string                       `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	YieldsComponentType string                       `protobuf:"bytes,14,opt,name=YieldsComponentType,proto3" json:"YieldsComponentType,omitempty"`
	Description         string                       `protobuf:"bytes,7,opt,name=Description,proto3" json:"Description,omitempty"`
	Name                string                       `protobuf:"bytes,8,opt,name=Name,proto3" json:"Name,omitempty"`
	PortionName         string                       `protobuf:"bytes,9,opt,name=PortionName,proto3" json:"PortionName,omitempty"`
	InspiredByRecipeID  string                       `protobuf:"bytes,2,opt,name=InspiredByRecipeID,proto3" json:"InspiredByRecipeID,omitempty"`
	CreatedByUser       string                       `protobuf:"bytes,11,opt,name=CreatedByUser,proto3" json:"CreatedByUser,omitempty"`
	Source              string                       `protobuf:"bytes,12,opt,name=Source,proto3" json:"Source,omitempty"`
	Slug                string                       `protobuf:"bytes,13,opt,name=Slug,proto3" json:"Slug,omitempty"`
	PluralPortionName   string                       `protobuf:"bytes,6,opt,name=PluralPortionName,proto3" json:"PluralPortionName,omitempty"`
	PrepTasks           []*RecipePrepTask            `protobuf:"bytes,15,rep,name=PrepTasks,proto3" json:"PrepTasks,omitempty"`
	Steps               []*RecipeStep                `protobuf:"bytes,16,rep,name=Steps,proto3" json:"Steps,omitempty"`
	Media               []*RecipeMedia               `protobuf:"bytes,17,rep,name=Media,proto3" json:"Media,omitempty"`
	SupportingRecipes   []*Recipe                    `protobuf:"bytes,18,rep,name=SupportingRecipes,proto3" json:"SupportingRecipes,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
	SealOfApproval      bool `protobuf:"varint,19,opt,name=SealOfApproval,proto3" json:"SealOfApproval,omitempty"`
	EligibleForMeals    bool `protobuf:"varint,20,opt,name=EligibleForMeals,proto3" json:"EligibleForMeals,omitempty"`
}

func (x *Recipe) Reset() {
	*x = Recipe{}
	mi := &file_messages_eating_proto_msgTypes[231]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Recipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recipe) ProtoMessage() {}

func (x *Recipe) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[231]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recipe.ProtoReflect.Descriptor instead.
func (*Recipe) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{231}
}

func (x *Recipe) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Recipe) GetInspiredByRecipeID() string {
	if x != nil {
		return x.InspiredByRecipeID
	}
	return ""
}

func (x *Recipe) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *Recipe) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *Recipe) GetEstimatedPortions() *Float32RangeWithOptionalMax {
	if x != nil {
		return x.EstimatedPortions
	}
	return nil
}

func (x *Recipe) GetPluralPortionName() string {
	if x != nil {
		return x.PluralPortionName
	}
	return ""
}

func (x *Recipe) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Recipe) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Recipe) GetPortionName() string {
	if x != nil {
		return x.PortionName
	}
	return ""
}

func (x *Recipe) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Recipe) GetCreatedByUser() string {
	if x != nil {
		return x.CreatedByUser
	}
	return ""
}

func (x *Recipe) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Recipe) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Recipe) GetYieldsComponentType() string {
	if x != nil {
		return x.YieldsComponentType
	}
	return ""
}

func (x *Recipe) GetPrepTasks() []*RecipePrepTask {
	if x != nil {
		return x.PrepTasks
	}
	return nil
}

func (x *Recipe) GetSteps() []*RecipeStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *Recipe) GetMedia() []*RecipeMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *Recipe) GetSupportingRecipes() []*Recipe {
	if x != nil {
		return x.SupportingRecipes
	}
	return nil
}

func (x *Recipe) GetSealOfApproval() bool {
	if x != nil {
		return x.SealOfApproval
	}
	return false
}

func (x *Recipe) GetEligibleForMeals() bool {
	if x != nil {
		return x.EligibleForMeals
	}
	return false
}

type RecipeCreationRequestInput struct {
	state               protoimpl.MessageState                            `protogen:"open.v1"`
	EstimatedPortions   *Float32RangeWithOptionalMax                      `protobuf:"bytes,9,opt,name=EstimatedPortions,proto3" json:"EstimatedPortions,omitempty"`
	YieldsComponentType string                                            `protobuf:"bytes,8,opt,name=YieldsComponentType,proto3" json:"YieldsComponentType,omitempty"`
	InspiredByRecipeID  string                                            `protobuf:"bytes,1,opt,name=InspiredByRecipeID,proto3" json:"InspiredByRecipeID,omitempty"`
	Description         string                                            `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	PluralPortionName   string                                            `protobuf:"bytes,5,opt,name=PluralPortionName,proto3" json:"PluralPortionName,omitempty"`
	PortionName         string                                            `protobuf:"bytes,6,opt,name=PortionName,proto3" json:"PortionName,omitempty"`
	Slug                string                                            `protobuf:"bytes,7,opt,name=Slug,proto3" json:"Slug,omitempty"`
	Name                string                                            `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Source              string                                            `protobuf:"bytes,3,opt,name=Source,proto3" json:"Source,omitempty"`
	PrepTasks           []*RecipePrepTaskWithinRecipeCreationRequestInput `protobuf:"bytes,10,rep,name=PrepTasks,proto3" json:"PrepTasks,omitempty"`
	Steps               []*RecipeStepCreationRequestInput                 `protobuf:"bytes,11,rep,name=Steps,proto3" json:"Steps,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
	AlsoCreateMeal      bool `protobuf:"varint,12,opt,name=AlsoCreateMeal,proto3" json:"AlsoCreateMeal,omitempty"`
	SealOfApproval      bool `protobuf:"varint,13,opt,name=SealOfApproval,proto3" json:"SealOfApproval,omitempty"`
	EligibleForMeals    bool `protobuf:"varint,14,opt,name=EligibleForMeals,proto3" json:"EligibleForMeals,omitempty"`
}

func (x *RecipeCreationRequestInput) Reset() {
	*x = RecipeCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[232]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeCreationRequestInput) ProtoMessage() {}

func (x *RecipeCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[232]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{232}
}

func (x *RecipeCreationRequestInput) GetInspiredByRecipeID() string {
	if x != nil {
		return x.InspiredByRecipeID
	}
	return ""
}

func (x *RecipeCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeCreationRequestInput) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *RecipeCreationRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RecipeCreationRequestInput) GetPluralPortionName() string {
	if x != nil {
		return x.PluralPortionName
	}
	return ""
}

func (x *RecipeCreationRequestInput) GetPortionName() string {
	if x != nil {
		return x.PortionName
	}
	return ""
}

func (x *RecipeCreationRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *RecipeCreationRequestInput) GetYieldsComponentType() string {
	if x != nil {
		return x.YieldsComponentType
	}
	return ""
}

func (x *RecipeCreationRequestInput) GetEstimatedPortions() *Float32RangeWithOptionalMax {
	if x != nil {
		return x.EstimatedPortions
	}
	return nil
}

func (x *RecipeCreationRequestInput) GetPrepTasks() []*RecipePrepTaskWithinRecipeCreationRequestInput {
	if x != nil {
		return x.PrepTasks
	}
	return nil
}

func (x *RecipeCreationRequestInput) GetSteps() []*RecipeStepCreationRequestInput {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *RecipeCreationRequestInput) GetAlsoCreateMeal() bool {
	if x != nil {
		return x.AlsoCreateMeal
	}
	return false
}

func (x *RecipeCreationRequestInput) GetSealOfApproval() bool {
	if x != nil {
		return x.SealOfApproval
	}
	return false
}

func (x *RecipeCreationRequestInput) GetEligibleForMeals() bool {
	if x != nil {
		return x.EligibleForMeals
	}
	return false
}

type RecipeMedia struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	ArchivedAt          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	LastUpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	BelongsToRecipeStep string                 `protobuf:"bytes,6,opt,name=BelongsToRecipeStep,proto3" json:"BelongsToRecipeStep,omitempty"`
	BelongsToRecipe     string                 `protobuf:"bytes,5,opt,name=BelongsToRecipe,proto3" json:"BelongsToRecipe,omitempty"`
	ID                  string                 `protobuf:"bytes,4,opt,name=ID,proto3" json:"ID,omitempty"`
	MimeType            string                 `protobuf:"bytes,7,opt,name=MimeType,proto3" json:"MimeType,omitempty"`
	InternalPath        string                 `protobuf:"bytes,8,opt,name=InternalPath,proto3" json:"InternalPath,omitempty"`
	ExternalPath        string                 `protobuf:"bytes,9,opt,name=ExternalPath,proto3" json:"ExternalPath,omitempty"`
	unknownFields       protoimpl.UnknownFields
	Index               uint32 `protobuf:"varint,10,opt,name=Index,proto3" json:"Index,omitempty"`
	sizeCache           protoimpl.SizeCache
}

func (x *RecipeMedia) Reset() {
	*x = RecipeMedia{}
	mi := &file_messages_eating_proto_msgTypes[233]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeMedia) ProtoMessage() {}

func (x *RecipeMedia) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[233]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeMedia.ProtoReflect.Descriptor instead.
func (*RecipeMedia) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{233}
}

func (x *RecipeMedia) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RecipeMedia) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *RecipeMedia) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *RecipeMedia) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RecipeMedia) GetBelongsToRecipe() string {
	if x != nil {
		return x.BelongsToRecipe
	}
	return ""
}

func (x *RecipeMedia) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeMedia) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *RecipeMedia) GetInternalPath() string {
	if x != nil {
		return x.InternalPath
	}
	return ""
}

func (x *RecipeMedia) GetExternalPath() string {
	if x != nil {
		return x.ExternalPath
	}
	return ""
}

func (x *RecipeMedia) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type RecipeMediaCreationRequestInput struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	BelongsToRecipe     string                 `protobuf:"bytes,1,opt,name=BelongsToRecipe,proto3" json:"BelongsToRecipe,omitempty"`
	BelongsToRecipeStep string                 `protobuf:"bytes,2,opt,name=BelongsToRecipeStep,proto3" json:"BelongsToRecipeStep,omitempty"`
	MimeType            string                 `protobuf:"bytes,3,opt,name=MimeType,proto3" json:"MimeType,omitempty"`
	InternalPath        string                 `protobuf:"bytes,4,opt,name=InternalPath,proto3" json:"InternalPath,omitempty"`
	ExternalPath        string                 `protobuf:"bytes,5,opt,name=ExternalPath,proto3" json:"ExternalPath,omitempty"`
	unknownFields       protoimpl.UnknownFields
	Index               uint32 `protobuf:"varint,6,opt,name=Index,proto3" json:"Index,omitempty"`
	sizeCache           protoimpl.SizeCache
}

func (x *RecipeMediaCreationRequestInput) Reset() {
	*x = RecipeMediaCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[234]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeMediaCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeMediaCreationRequestInput) ProtoMessage() {}

func (x *RecipeMediaCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[234]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeMediaCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeMediaCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{234}
}

func (x *RecipeMediaCreationRequestInput) GetBelongsToRecipe() string {
	if x != nil {
		return x.BelongsToRecipe
	}
	return ""
}

func (x *RecipeMediaCreationRequestInput) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeMediaCreationRequestInput) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *RecipeMediaCreationRequestInput) GetInternalPath() string {
	if x != nil {
		return x.InternalPath
	}
	return ""
}

func (x *RecipeMediaCreationRequestInput) GetExternalPath() string {
	if x != nil {
		return x.ExternalPath
	}
	return ""
}

func (x *RecipeMediaCreationRequestInput) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type RecipeMediaUpdateRequestInput struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	BelongsToRecipe     string                 `protobuf:"bytes,1,opt,name=BelongsToRecipe,proto3" json:"BelongsToRecipe,omitempty"`
	BelongsToRecipeStep string                 `protobuf:"bytes,2,opt,name=BelongsToRecipeStep,proto3" json:"BelongsToRecipeStep,omitempty"`
	MimeType            string                 `protobuf:"bytes,3,opt,name=MimeType,proto3" json:"MimeType,omitempty"`
	InternalPath        string                 `protobuf:"bytes,4,opt,name=InternalPath,proto3" json:"InternalPath,omitempty"`
	ExternalPath        string                 `protobuf:"bytes,5,opt,name=ExternalPath,proto3" json:"ExternalPath,omitempty"`
	unknownFields       protoimpl.UnknownFields
	Index               uint32 `protobuf:"varint,6,opt,name=Index,proto3" json:"Index,omitempty"`
	sizeCache           protoimpl.SizeCache
}

func (x *RecipeMediaUpdateRequestInput) Reset() {
	*x = RecipeMediaUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[235]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeMediaUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeMediaUpdateRequestInput) ProtoMessage() {}

func (x *RecipeMediaUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[235]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeMediaUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeMediaUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{235}
}

func (x *RecipeMediaUpdateRequestInput) GetBelongsToRecipe() string {
	if x != nil {
		return x.BelongsToRecipe
	}
	return ""
}

func (x *RecipeMediaUpdateRequestInput) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeMediaUpdateRequestInput) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *RecipeMediaUpdateRequestInput) GetInternalPath() string {
	if x != nil {
		return x.InternalPath
	}
	return ""
}

func (x *RecipeMediaUpdateRequestInput) GetExternalPath() string {
	if x != nil {
		return x.ExternalPath
	}
	return ""
}

func (x *RecipeMediaUpdateRequestInput) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type RecipePrepTask struct {
	state                           protoimpl.MessageState      `protogen:"open.v1"`
	CreatedAt                       *timestamppb.Timestamp      `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	StorageTemperatureInCelsius     *OptionalFloat32Range       `protobuf:"bytes,2,opt,name=StorageTemperatureInCelsius,proto3" json:"StorageTemperatureInCelsius,omitempty"`
	TimeBufferBeforeRecipeInSeconds *Uint32RangeWithOptionalMax `protobuf:"bytes,3,opt,name=TimeBufferBeforeRecipeInSeconds,proto3" json:"TimeBufferBeforeRecipeInSeconds,omitempty"`
	ArchivedAt                      *timestamppb.Timestamp      `protobuf:"bytes,4,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	LastUpdatedAt                   *timestamppb.Timestamp      `protobuf:"bytes,5,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	BelongsToRecipe                 string                      `protobuf:"bytes,8,opt,name=BelongsToRecipe,proto3" json:"BelongsToRecipe,omitempty"`
	StorageType                     string                      `protobuf:"bytes,7,opt,name=StorageType,proto3" json:"StorageType,omitempty"`
	ID                              string                      `protobuf:"bytes,6,opt,name=ID,proto3" json:"ID,omitempty"`
	ExplicitStorageInstructions     string                      `protobuf:"bytes,9,opt,name=ExplicitStorageInstructions,proto3" json:"ExplicitStorageInstructions,omitempty"`
	Notes                           string                      `protobuf:"bytes,10,opt,name=Notes,proto3" json:"Notes,omitempty"`
	Name                            string                      `protobuf:"bytes,11,opt,name=Name,proto3" json:"Name,omitempty"`
	Description                     string                      `protobuf:"bytes,12,opt,name=Description,proto3" json:"Description,omitempty"`
	TaskSteps                       []*RecipePrepTaskStep       `protobuf:"bytes,13,rep,name=TaskSteps,proto3" json:"TaskSteps,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
	Optional                        bool `protobuf:"varint,14,opt,name=Optional,proto3" json:"Optional,omitempty"`
}

func (x *RecipePrepTask) Reset() {
	*x = RecipePrepTask{}
	mi := &file_messages_eating_proto_msgTypes[236]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipePrepTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipePrepTask) ProtoMessage() {}

func (x *RecipePrepTask) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[236]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipePrepTask.ProtoReflect.Descriptor instead.
func (*RecipePrepTask) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{236}
}

func (x *RecipePrepTask) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RecipePrepTask) GetStorageTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.StorageTemperatureInCelsius
	}
	return nil
}

func (x *RecipePrepTask) GetTimeBufferBeforeRecipeInSeconds() *Uint32RangeWithOptionalMax {
	if x != nil {
		return x.TimeBufferBeforeRecipeInSeconds
	}
	return nil
}

func (x *RecipePrepTask) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *RecipePrepTask) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *RecipePrepTask) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RecipePrepTask) GetStorageType() string {
	if x != nil {
		return x.StorageType
	}
	return ""
}

func (x *RecipePrepTask) GetBelongsToRecipe() string {
	if x != nil {
		return x.BelongsToRecipe
	}
	return ""
}

func (x *RecipePrepTask) GetExplicitStorageInstructions() string {
	if x != nil {
		return x.ExplicitStorageInstructions
	}
	return ""
}

func (x *RecipePrepTask) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipePrepTask) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipePrepTask) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RecipePrepTask) GetTaskSteps() []*RecipePrepTaskStep {
	if x != nil {
		return x.TaskSteps
	}
	return nil
}

func (x *RecipePrepTask) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

type RecipePrepTaskCreationRequestInput struct {
	state                           protoimpl.MessageState                    `protogen:"open.v1"`
	StorageTemperatureInCelsius     *OptionalFloat32Range                     `protobuf:"bytes,1,opt,name=StorageTemperatureInCelsius,proto3" json:"StorageTemperatureInCelsius,omitempty"`
	TimeBufferBeforeRecipeInSeconds *Uint32RangeWithOptionalMax               `protobuf:"bytes,2,opt,name=TimeBufferBeforeRecipeInSeconds,proto3" json:"TimeBufferBeforeRecipeInSeconds,omitempty"`
	Name                            string                                    `protobuf:"bytes,6,opt,name=Name,proto3" json:"Name,omitempty"`
	ExplicitStorageInstructions     string                                    `protobuf:"bytes,4,opt,name=ExplicitStorageInstructions,proto3" json:"ExplicitStorageInstructions,omitempty"`
	Notes                           string                                    `protobuf:"bytes,5,opt,name=Notes,proto3" json:"Notes,omitempty"`
	StorageType                     string                                    `protobuf:"bytes,3,opt,name=StorageType,proto3" json:"StorageType,omitempty"`
	Description                     string                                    `protobuf:"bytes,7,opt,name=Description,proto3" json:"Description,omitempty"`
	BelongsToRecipe                 string                                    `protobuf:"bytes,8,opt,name=BelongsToRecipe,proto3" json:"BelongsToRecipe,omitempty"`
	RecipeSteps                     []*RecipePrepTaskStepCreationRequestInput `protobuf:"bytes,9,rep,name=RecipeSteps,proto3" json:"RecipeSteps,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
	Optional                        bool `protobuf:"varint,10,opt,name=Optional,proto3" json:"Optional,omitempty"`
}

func (x *RecipePrepTaskCreationRequestInput) Reset() {
	*x = RecipePrepTaskCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[237]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipePrepTaskCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipePrepTaskCreationRequestInput) ProtoMessage() {}

func (x *RecipePrepTaskCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[237]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipePrepTaskCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipePrepTaskCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{237}
}

func (x *RecipePrepTaskCreationRequestInput) GetStorageTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.StorageTemperatureInCelsius
	}
	return nil
}

func (x *RecipePrepTaskCreationRequestInput) GetTimeBufferBeforeRecipeInSeconds() *Uint32RangeWithOptionalMax {
	if x != nil {
		return x.TimeBufferBeforeRecipeInSeconds
	}
	return nil
}

func (x *RecipePrepTaskCreationRequestInput) GetStorageType() string {
	if x != nil {
		return x.StorageType
	}
	return ""
}

func (x *RecipePrepTaskCreationRequestInput) GetExplicitStorageInstructions() string {
	if x != nil {
		return x.ExplicitStorageInstructions
	}
	return ""
}

func (x *RecipePrepTaskCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipePrepTaskCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipePrepTaskCreationRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RecipePrepTaskCreationRequestInput) GetBelongsToRecipe() string {
	if x != nil {
		return x.BelongsToRecipe
	}
	return ""
}

func (x *RecipePrepTaskCreationRequestInput) GetRecipeSteps() []*RecipePrepTaskStepCreationRequestInput {
	if x != nil {
		return x.RecipeSteps
	}
	return nil
}

func (x *RecipePrepTaskCreationRequestInput) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

type RecipePrepTaskStep struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	ID                      string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	BelongsToRecipeStep     string                 `protobuf:"bytes,2,opt,name=BelongsToRecipeStep,proto3" json:"BelongsToRecipeStep,omitempty"`
	BelongsToRecipePrepTask string                 `protobuf:"bytes,3,opt,name=BelongsToRecipePrepTask,proto3" json:"BelongsToRecipePrepTask,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
	SatisfiesRecipeStep     bool `protobuf:"varint,4,opt,name=SatisfiesRecipeStep,proto3" json:"SatisfiesRecipeStep,omitempty"`
}

func (x *RecipePrepTaskStep) Reset() {
	*x = RecipePrepTaskStep{}
	mi := &file_messages_eating_proto_msgTypes[238]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipePrepTaskStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipePrepTaskStep) ProtoMessage() {}

func (x *RecipePrepTaskStep) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[238]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipePrepTaskStep.ProtoReflect.Descriptor instead.
func (*RecipePrepTaskStep) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{238}
}

func (x *RecipePrepTaskStep) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RecipePrepTaskStep) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipePrepTaskStep) GetBelongsToRecipePrepTask() string {
	if x != nil {
		return x.BelongsToRecipePrepTask
	}
	return ""
}

func (x *RecipePrepTaskStep) GetSatisfiesRecipeStep() bool {
	if x != nil {
		return x.SatisfiesRecipeStep
	}
	return false
}

type RecipePrepTaskStepCreationRequestInput struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	BelongsToRecipeStep string                 `protobuf:"bytes,1,opt,name=BelongsToRecipeStep,proto3" json:"BelongsToRecipeStep,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
	SatisfiesRecipeStep bool `protobuf:"varint,2,opt,name=SatisfiesRecipeStep,proto3" json:"SatisfiesRecipeStep,omitempty"`
}

func (x *RecipePrepTaskStepCreationRequestInput) Reset() {
	*x = RecipePrepTaskStepCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[239]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipePrepTaskStepCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipePrepTaskStepCreationRequestInput) ProtoMessage() {}

func (x *RecipePrepTaskStepCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[239]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipePrepTaskStepCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipePrepTaskStepCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{239}
}

func (x *RecipePrepTaskStepCreationRequestInput) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipePrepTaskStepCreationRequestInput) GetSatisfiesRecipeStep() bool {
	if x != nil {
		return x.SatisfiesRecipeStep
	}
	return false
}

type RecipePrepTaskStepUpdateRequestInput struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	BelongsToRecipeStep     string                 `protobuf:"bytes,2,opt,name=BelongsToRecipeStep,proto3" json:"BelongsToRecipeStep,omitempty"`
	BelongsToRecipePrepTask string                 `protobuf:"bytes,3,opt,name=BelongsToRecipePrepTask,proto3" json:"BelongsToRecipePrepTask,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
	SatisfiesRecipeStep     bool `protobuf:"varint,1,opt,name=SatisfiesRecipeStep,proto3" json:"SatisfiesRecipeStep,omitempty"`
}

func (x *RecipePrepTaskStepUpdateRequestInput) Reset() {
	*x = RecipePrepTaskStepUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[240]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipePrepTaskStepUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipePrepTaskStepUpdateRequestInput) ProtoMessage() {}

func (x *RecipePrepTaskStepUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[240]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipePrepTaskStepUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*RecipePrepTaskStepUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{240}
}

func (x *RecipePrepTaskStepUpdateRequestInput) GetSatisfiesRecipeStep() bool {
	if x != nil {
		return x.SatisfiesRecipeStep
	}
	return false
}

func (x *RecipePrepTaskStepUpdateRequestInput) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipePrepTaskStepUpdateRequestInput) GetBelongsToRecipePrepTask() string {
	if x != nil {
		return x.BelongsToRecipePrepTask
	}
	return ""
}

type RecipePrepTaskStepWithinRecipeCreationRequestInput struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	unknownFields            protoimpl.UnknownFields
	BelongsToRecipeStepIndex uint32 `protobuf:"varint,1,opt,name=BelongsToRecipeStepIndex,proto3" json:"BelongsToRecipeStepIndex,omitempty"`
	sizeCache                protoimpl.SizeCache
	SatisfiesRecipeStep      bool `protobuf:"varint,2,opt,name=SatisfiesRecipeStep,proto3" json:"SatisfiesRecipeStep,omitempty"`
}

func (x *RecipePrepTaskStepWithinRecipeCreationRequestInput) Reset() {
	*x = RecipePrepTaskStepWithinRecipeCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[241]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipePrepTaskStepWithinRecipeCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipePrepTaskStepWithinRecipeCreationRequestInput) ProtoMessage() {}

func (x *RecipePrepTaskStepWithinRecipeCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[241]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipePrepTaskStepWithinRecipeCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipePrepTaskStepWithinRecipeCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{241}
}

func (x *RecipePrepTaskStepWithinRecipeCreationRequestInput) GetBelongsToRecipeStepIndex() uint32 {
	if x != nil {
		return x.BelongsToRecipeStepIndex
	}
	return 0
}

func (x *RecipePrepTaskStepWithinRecipeCreationRequestInput) GetSatisfiesRecipeStep() bool {
	if x != nil {
		return x.SatisfiesRecipeStep
	}
	return false
}

type RecipePrepTaskUpdateRequestInput struct {
	state                           protoimpl.MessageState                        `protogen:"open.v1"`
	TimeBufferBeforeRecipeInSeconds *Uint32RangeWithOptionalMaxUpdateRequestInput `protobuf:"bytes,8,opt,name=TimeBufferBeforeRecipeInSeconds,proto3" json:"TimeBufferBeforeRecipeInSeconds,omitempty"`
	StorageTemperatureInCelsius     *OptionalFloat32Range                         `protobuf:"bytes,7,opt,name=StorageTemperatureInCelsius,proto3" json:"StorageTemperatureInCelsius,omitempty"`
	Description                     string                                        `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"`
	Name                            string                                        `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	StorageType                     string                                        `protobuf:"bytes,3,opt,name=StorageType,proto3" json:"StorageType,omitempty"`
	ExplicitStorageInstructions     string                                        `protobuf:"bytes,2,opt,name=ExplicitStorageInstructions,proto3" json:"ExplicitStorageInstructions,omitempty"`
	Notes                           string                                        `protobuf:"bytes,1,opt,name=Notes,proto3" json:"Notes,omitempty"`
	BelongsToRecipe                 string                                        `protobuf:"bytes,9,opt,name=BelongsToRecipe,proto3" json:"BelongsToRecipe,omitempty"`
	TaskSteps                       []*RecipePrepTaskStepUpdateRequestInput       `protobuf:"bytes,10,rep,name=TaskSteps,proto3" json:"TaskSteps,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
	Optional                        bool `protobuf:"varint,5,opt,name=Optional,proto3" json:"Optional,omitempty"`
}

func (x *RecipePrepTaskUpdateRequestInput) Reset() {
	*x = RecipePrepTaskUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[242]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipePrepTaskUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipePrepTaskUpdateRequestInput) ProtoMessage() {}

func (x *RecipePrepTaskUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[242]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipePrepTaskUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*RecipePrepTaskUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{242}
}

func (x *RecipePrepTaskUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipePrepTaskUpdateRequestInput) GetExplicitStorageInstructions() string {
	if x != nil {
		return x.ExplicitStorageInstructions
	}
	return ""
}

func (x *RecipePrepTaskUpdateRequestInput) GetStorageType() string {
	if x != nil {
		return x.StorageType
	}
	return ""
}

func (x *RecipePrepTaskUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipePrepTaskUpdateRequestInput) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *RecipePrepTaskUpdateRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RecipePrepTaskUpdateRequestInput) GetStorageTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.StorageTemperatureInCelsius
	}
	return nil
}

func (x *RecipePrepTaskUpdateRequestInput) GetTimeBufferBeforeRecipeInSeconds() *Uint32RangeWithOptionalMaxUpdateRequestInput {
	if x != nil {
		return x.TimeBufferBeforeRecipeInSeconds
	}
	return nil
}

func (x *RecipePrepTaskUpdateRequestInput) GetBelongsToRecipe() string {
	if x != nil {
		return x.BelongsToRecipe
	}
	return ""
}

func (x *RecipePrepTaskUpdateRequestInput) GetTaskSteps() []*RecipePrepTaskStepUpdateRequestInput {
	if x != nil {
		return x.TaskSteps
	}
	return nil
}

type RecipePrepTaskWithinRecipeCreationRequestInput struct {
	state                           protoimpl.MessageState                                `protogen:"open.v1"`
	StorageTemperatureInCelsius     *OptionalFloat32Range                                 `protobuf:"bytes,1,opt,name=StorageTemperatureInCelsius,proto3" json:"StorageTemperatureInCelsius,omitempty"`
	TimeBufferBeforeRecipeInSeconds *Uint32RangeWithOptionalMax                           `protobuf:"bytes,2,opt,name=TimeBufferBeforeRecipeInSeconds,proto3" json:"TimeBufferBeforeRecipeInSeconds,omitempty"`
	ExplicitStorageInstructions     string                                                `protobuf:"bytes,6,opt,name=ExplicitStorageInstructions,proto3" json:"ExplicitStorageInstructions,omitempty"`
	Name                            string                                                `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	Description                     string                                                `protobuf:"bytes,5,opt,name=Description,proto3" json:"Description,omitempty"`
	StorageType                     string                                                `protobuf:"bytes,3,opt,name=StorageType,proto3" json:"StorageType,omitempty"`
	Notes                           string                                                `protobuf:"bytes,7,opt,name=Notes,proto3" json:"Notes,omitempty"`
	BelongsToRecipe                 string                                                `protobuf:"bytes,8,opt,name=BelongsToRecipe,proto3" json:"BelongsToRecipe,omitempty"`
	RecipeSteps                     []*RecipePrepTaskStepWithinRecipeCreationRequestInput `protobuf:"bytes,9,rep,name=RecipeSteps,proto3" json:"RecipeSteps,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
	Optional                        bool `protobuf:"varint,10,opt,name=Optional,proto3" json:"Optional,omitempty"`
}

func (x *RecipePrepTaskWithinRecipeCreationRequestInput) Reset() {
	*x = RecipePrepTaskWithinRecipeCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[243]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipePrepTaskWithinRecipeCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipePrepTaskWithinRecipeCreationRequestInput) ProtoMessage() {}

func (x *RecipePrepTaskWithinRecipeCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[243]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipePrepTaskWithinRecipeCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipePrepTaskWithinRecipeCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{243}
}

func (x *RecipePrepTaskWithinRecipeCreationRequestInput) GetStorageTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.StorageTemperatureInCelsius
	}
	return nil
}

func (x *RecipePrepTaskWithinRecipeCreationRequestInput) GetTimeBufferBeforeRecipeInSeconds() *Uint32RangeWithOptionalMax {
	if x != nil {
		return x.TimeBufferBeforeRecipeInSeconds
	}
	return nil
}

func (x *RecipePrepTaskWithinRecipeCreationRequestInput) GetStorageType() string {
	if x != nil {
		return x.StorageType
	}
	return ""
}

func (x *RecipePrepTaskWithinRecipeCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipePrepTaskWithinRecipeCreationRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RecipePrepTaskWithinRecipeCreationRequestInput) GetExplicitStorageInstructions() string {
	if x != nil {
		return x.ExplicitStorageInstructions
	}
	return ""
}

func (x *RecipePrepTaskWithinRecipeCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipePrepTaskWithinRecipeCreationRequestInput) GetBelongsToRecipe() string {
	if x != nil {
		return x.BelongsToRecipe
	}
	return ""
}

func (x *RecipePrepTaskWithinRecipeCreationRequestInput) GetRecipeSteps() []*RecipePrepTaskStepWithinRecipeCreationRequestInput {
	if x != nil {
		return x.RecipeSteps
	}
	return nil
}

func (x *RecipePrepTaskWithinRecipeCreationRequestInput) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

type RecipeRating struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	LastUpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	ArchivedAt    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	RecipeID      string                 `protobuf:"bytes,6,opt,name=RecipeID,proto3" json:"RecipeID,omitempty"`
	ID            string                 `protobuf:"bytes,5,opt,name=ID,proto3" json:"ID,omitempty"`
	Notes         string                 `protobuf:"bytes,4,opt,name=Notes,proto3" json:"Notes,omitempty"`
	ByUser        string                 `protobuf:"bytes,7,opt,name=ByUser,proto3" json:"ByUser,omitempty"`
	unknownFields protoimpl.UnknownFields
	Taste         float32 `protobuf:"fixed32,8,opt,name=Taste,proto3" json:"Taste,omitempty"`
	Instructions  float32 `protobuf:"fixed32,9,opt,name=Instructions,proto3" json:"Instructions,omitempty"`
	Overall       float32 `protobuf:"fixed32,10,opt,name=Overall,proto3" json:"Overall,omitempty"`
	Cleanup       float32 `protobuf:"fixed32,11,opt,name=Cleanup,proto3" json:"Cleanup,omitempty"`
	Difficulty    float32 `protobuf:"fixed32,12,opt,name=Difficulty,proto3" json:"Difficulty,omitempty"`
	sizeCache     protoimpl.SizeCache
}

func (x *RecipeRating) Reset() {
	*x = RecipeRating{}
	mi := &file_messages_eating_proto_msgTypes[244]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeRating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeRating) ProtoMessage() {}

func (x *RecipeRating) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[244]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeRating.ProtoReflect.Descriptor instead.
func (*RecipeRating) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{244}
}

func (x *RecipeRating) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RecipeRating) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *RecipeRating) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *RecipeRating) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeRating) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RecipeRating) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *RecipeRating) GetByUser() string {
	if x != nil {
		return x.ByUser
	}
	return ""
}

func (x *RecipeRating) GetTaste() float32 {
	if x != nil {
		return x.Taste
	}
	return 0
}

func (x *RecipeRating) GetInstructions() float32 {
	if x != nil {
		return x.Instructions
	}
	return 0
}

func (x *RecipeRating) GetOverall() float32 {
	if x != nil {
		return x.Overall
	}
	return 0
}

func (x *RecipeRating) GetCleanup() float32 {
	if x != nil {
		return x.Cleanup
	}
	return 0
}

func (x *RecipeRating) GetDifficulty() float32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

type RecipeRatingCreationRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecipeID      string                 `protobuf:"bytes,1,opt,name=RecipeID,proto3" json:"RecipeID,omitempty"`
	Notes         string                 `protobuf:"bytes,2,opt,name=Notes,proto3" json:"Notes,omitempty"`
	ByUser        string                 `protobuf:"bytes,3,opt,name=ByUser,proto3" json:"ByUser,omitempty"`
	unknownFields protoimpl.UnknownFields
	Taste         float32 `protobuf:"fixed32,4,opt,name=Taste,proto3" json:"Taste,omitempty"`
	Difficulty    float32 `protobuf:"fixed32,5,opt,name=Difficulty,proto3" json:"Difficulty,omitempty"`
	Cleanup       float32 `protobuf:"fixed32,6,opt,name=Cleanup,proto3" json:"Cleanup,omitempty"`
	Instructions  float32 `protobuf:"fixed32,7,opt,name=Instructions,proto3" json:"Instructions,omitempty"`
	Overall       float32 `protobuf:"fixed32,8,opt,name=Overall,proto3" json:"Overall,omitempty"`
	sizeCache     protoimpl.SizeCache
}

func (x *RecipeRatingCreationRequestInput) Reset() {
	*x = RecipeRatingCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[245]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeRatingCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeRatingCreationRequestInput) ProtoMessage() {}

func (x *RecipeRatingCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[245]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeRatingCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeRatingCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{245}
}

func (x *RecipeRatingCreationRequestInput) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *RecipeRatingCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeRatingCreationRequestInput) GetByUser() string {
	if x != nil {
		return x.ByUser
	}
	return ""
}

func (x *RecipeRatingCreationRequestInput) GetTaste() float32 {
	if x != nil {
		return x.Taste
	}
	return 0
}

func (x *RecipeRatingCreationRequestInput) GetDifficulty() float32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *RecipeRatingCreationRequestInput) GetCleanup() float32 {
	if x != nil {
		return x.Cleanup
	}
	return 0
}

func (x *RecipeRatingCreationRequestInput) GetInstructions() float32 {
	if x != nil {
		return x.Instructions
	}
	return 0
}

func (x *RecipeRatingCreationRequestInput) GetOverall() float32 {
	if x != nil {
		return x.Overall
	}
	return 0
}

type RecipeRatingUpdateRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecipeID      string                 `protobuf:"bytes,1,opt,name=RecipeID,proto3" json:"RecipeID,omitempty"`
	Notes         string                 `protobuf:"bytes,7,opt,name=Notes,proto3" json:"Notes,omitempty"`
	ByUser        string                 `protobuf:"bytes,8,opt,name=ByUser,proto3" json:"ByUser,omitempty"`
	unknownFields protoimpl.UnknownFields
	Taste         float32 `protobuf:"fixed32,2,opt,name=Taste,proto3" json:"Taste,omitempty"`
	Difficulty    float32 `protobuf:"fixed32,3,opt,name=Difficulty,proto3" json:"Difficulty,omitempty"`
	Cleanup       float32 `protobuf:"fixed32,4,opt,name=Cleanup,proto3" json:"Cleanup,omitempty"`
	Instructions  float32 `protobuf:"fixed32,5,opt,name=Instructions,proto3" json:"Instructions,omitempty"`
	Overall       float32 `protobuf:"fixed32,6,opt,name=Overall,proto3" json:"Overall,omitempty"`
	sizeCache     protoimpl.SizeCache
}

func (x *RecipeRatingUpdateRequestInput) Reset() {
	*x = RecipeRatingUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[246]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeRatingUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeRatingUpdateRequestInput) ProtoMessage() {}

func (x *RecipeRatingUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[246]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeRatingUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeRatingUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{246}
}

func (x *RecipeRatingUpdateRequestInput) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *RecipeRatingUpdateRequestInput) GetTaste() float32 {
	if x != nil {
		return x.Taste
	}
	return 0
}

func (x *RecipeRatingUpdateRequestInput) GetDifficulty() float32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *RecipeRatingUpdateRequestInput) GetCleanup() float32 {
	if x != nil {
		return x.Cleanup
	}
	return 0
}

func (x *RecipeRatingUpdateRequestInput) GetInstructions() float32 {
	if x != nil {
		return x.Instructions
	}
	return 0
}

func (x *RecipeRatingUpdateRequestInput) GetOverall() float32 {
	if x != nil {
		return x.Overall
	}
	return 0
}

func (x *RecipeRatingUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeRatingUpdateRequestInput) GetByUser() string {
	if x != nil {
		return x.ByUser
	}
	return ""
}

type RecipeStep struct {
	state                   protoimpl.MessageState           `protogen:"open.v1"`
	CreatedAt               *timestamppb.Timestamp           `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	EstimatedTimeInSeconds  *OptionalUint32Range             `protobuf:"bytes,2,opt,name=EstimatedTimeInSeconds,proto3" json:"EstimatedTimeInSeconds,omitempty"`
	TemperatureInCelsius    *OptionalFloat32Range            `protobuf:"bytes,3,opt,name=TemperatureInCelsius,proto3" json:"TemperatureInCelsius,omitempty"`
	ArchivedAt              *timestamppb.Timestamp           `protobuf:"bytes,4,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	LastUpdatedAt           *timestamppb.Timestamp           `protobuf:"bytes,5,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	Preparation             *ValidPreparation                `protobuf:"bytes,17,opt,name=Preparation,proto3" json:"Preparation,omitempty"`
	ExplicitInstructions    string                           `protobuf:"bytes,10,opt,name=ExplicitInstructions,proto3" json:"ExplicitInstructions,omitempty"`
	BelongsToRecipe         string                           `protobuf:"bytes,6,opt,name=BelongsToRecipe,proto3" json:"BelongsToRecipe,omitempty"`
	Notes                   string                           `protobuf:"bytes,9,opt,name=Notes,proto3" json:"Notes,omitempty"`
	ConditionExpression     string                           `protobuf:"bytes,7,opt,name=ConditionExpression,proto3" json:"ConditionExpression,omitempty"`
	ID                      string                           `protobuf:"bytes,8,opt,name=ID,proto3" json:"ID,omitempty"`
	Media                   []*RecipeMedia                   `protobuf:"bytes,11,rep,name=Media,proto3" json:"Media,omitempty"`
	Instruments             []*RecipeStepInstrument          `protobuf:"bytes,13,rep,name=Instruments,proto3" json:"Instruments,omitempty"`
	Vessels                 []*RecipeStepVessel              `protobuf:"bytes,14,rep,name=Vessels,proto3" json:"Vessels,omitempty"`
	CompletionConditions    []*RecipeStepCompletionCondition `protobuf:"bytes,15,rep,name=CompletionConditions,proto3" json:"CompletionConditions,omitempty"`
	Ingredients             []*RecipeStepIngredient          `protobuf:"bytes,16,rep,name=Ingredients,proto3" json:"Ingredients,omitempty"`
	Products                []*RecipeStepProduct             `protobuf:"bytes,12,rep,name=Products,proto3" json:"Products,omitempty"`
	unknownFields           protoimpl.UnknownFields
	Index                   uint32 `protobuf:"varint,18,opt,name=Index,proto3" json:"Index,omitempty"`
	sizeCache               protoimpl.SizeCache
	Optional                bool `protobuf:"varint,19,opt,name=Optional,proto3" json:"Optional,omitempty"`
	StartTimerAutomatically bool `protobuf:"varint,20,opt,name=StartTimerAutomatically,proto3" json:"StartTimerAutomatically,omitempty"`
}

func (x *RecipeStep) Reset() {
	*x = RecipeStep{}
	mi := &file_messages_eating_proto_msgTypes[247]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStep) ProtoMessage() {}

func (x *RecipeStep) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[247]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStep.ProtoReflect.Descriptor instead.
func (*RecipeStep) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{247}
}

func (x *RecipeStep) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RecipeStep) GetEstimatedTimeInSeconds() *OptionalUint32Range {
	if x != nil {
		return x.EstimatedTimeInSeconds
	}
	return nil
}

func (x *RecipeStep) GetTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.TemperatureInCelsius
	}
	return nil
}

func (x *RecipeStep) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *RecipeStep) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *RecipeStep) GetBelongsToRecipe() string {
	if x != nil {
		return x.BelongsToRecipe
	}
	return ""
}

func (x *RecipeStep) GetConditionExpression() string {
	if x != nil {
		return x.ConditionExpression
	}
	return ""
}

func (x *RecipeStep) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RecipeStep) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeStep) GetExplicitInstructions() string {
	if x != nil {
		return x.ExplicitInstructions
	}
	return ""
}

func (x *RecipeStep) GetMedia() []*RecipeMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *RecipeStep) GetProducts() []*RecipeStepProduct {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *RecipeStep) GetInstruments() []*RecipeStepInstrument {
	if x != nil {
		return x.Instruments
	}
	return nil
}

func (x *RecipeStep) GetVessels() []*RecipeStepVessel {
	if x != nil {
		return x.Vessels
	}
	return nil
}

func (x *RecipeStep) GetCompletionConditions() []*RecipeStepCompletionCondition {
	if x != nil {
		return x.CompletionConditions
	}
	return nil
}

func (x *RecipeStep) GetIngredients() []*RecipeStepIngredient {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

func (x *RecipeStep) GetPreparation() *ValidPreparation {
	if x != nil {
		return x.Preparation
	}
	return nil
}

func (x *RecipeStep) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RecipeStep) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *RecipeStep) GetStartTimerAutomatically() bool {
	if x != nil {
		return x.StartTimerAutomatically
	}
	return false
}

type RecipeStepCompletionCondition struct {
	state               protoimpl.MessageState                     `protogen:"open.v1"`
	CreatedAt           *timestamppb.Timestamp                     `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	ArchivedAt          *timestamppb.Timestamp                     `protobuf:"bytes,2,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	LastUpdatedAt       *timestamppb.Timestamp                     `protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	IngredientState     *ValidIngredientState                      `protobuf:"bytes,4,opt,name=IngredientState,proto3" json:"IngredientState,omitempty"`
	ID                  string                                     `protobuf:"bytes,5,opt,name=ID,proto3" json:"ID,omitempty"`
	BelongsToRecipeStep string                                     `protobuf:"bytes,6,opt,name=BelongsToRecipeStep,proto3" json:"BelongsToRecipeStep,omitempty"`
	Notes               string                                     `protobuf:"bytes,7,opt,name=Notes,proto3" json:"Notes,omitempty"`
	Ingredients         []*RecipeStepCompletionConditionIngredient `protobuf:"bytes,8,rep,name=Ingredients,proto3" json:"Ingredients,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
	Optional            bool `protobuf:"varint,9,opt,name=Optional,proto3" json:"Optional,omitempty"`
}

func (x *RecipeStepCompletionCondition) Reset() {
	*x = RecipeStepCompletionCondition{}
	mi := &file_messages_eating_proto_msgTypes[248]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepCompletionCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepCompletionCondition) ProtoMessage() {}

func (x *RecipeStepCompletionCondition) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[248]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepCompletionCondition.ProtoReflect.Descriptor instead.
func (*RecipeStepCompletionCondition) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{248}
}

func (x *RecipeStepCompletionCondition) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RecipeStepCompletionCondition) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *RecipeStepCompletionCondition) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *RecipeStepCompletionCondition) GetIngredientState() *ValidIngredientState {
	if x != nil {
		return x.IngredientState
	}
	return nil
}

func (x *RecipeStepCompletionCondition) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RecipeStepCompletionCondition) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeStepCompletionCondition) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeStepCompletionCondition) GetIngredients() []*RecipeStepCompletionConditionIngredient {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

func (x *RecipeStepCompletionCondition) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

type RecipeStepCompletionConditionCreationRequestInput struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	IngredientStateID   string                 `protobuf:"bytes,1,opt,name=IngredientStateID,proto3" json:"IngredientStateID,omitempty"`
	BelongsToRecipeStep string                 `protobuf:"bytes,2,opt,name=BelongsToRecipeStep,proto3" json:"BelongsToRecipeStep,omitempty"`
	Notes               string                 `protobuf:"bytes,3,opt,name=Notes,proto3" json:"Notes,omitempty"`
	Ingredients         []uint64               `protobuf:"varint,4,rep,packed,name=Ingredients,proto3" json:"Ingredients,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
	Optional            bool `protobuf:"varint,5,opt,name=Optional,proto3" json:"Optional,omitempty"`
}

func (x *RecipeStepCompletionConditionCreationRequestInput) Reset() {
	*x = RecipeStepCompletionConditionCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[249]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepCompletionConditionCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepCompletionConditionCreationRequestInput) ProtoMessage() {}

func (x *RecipeStepCompletionConditionCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[249]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepCompletionConditionCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepCompletionConditionCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{249}
}

func (x *RecipeStepCompletionConditionCreationRequestInput) GetIngredientStateID() string {
	if x != nil {
		return x.IngredientStateID
	}
	return ""
}

func (x *RecipeStepCompletionConditionCreationRequestInput) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeStepCompletionConditionCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeStepCompletionConditionCreationRequestInput) GetIngredients() []uint64 {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

func (x *RecipeStepCompletionConditionCreationRequestInput) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

type RecipeStepCompletionConditionForExistingRecipeCreationRequestInput struct {
	state               protoimpl.MessageState                     `protogen:"open.v1"`
	IngredientStateID   string                                     `protobuf:"bytes,1,opt,name=IngredientStateID,proto3" json:"IngredientStateID,omitempty"`
	BelongsToRecipeStep string                                     `protobuf:"bytes,2,opt,name=BelongsToRecipeStep,proto3" json:"BelongsToRecipeStep,omitempty"`
	Notes               string                                     `protobuf:"bytes,3,opt,name=Notes,proto3" json:"Notes,omitempty"`
	Ingredients         []*RecipeStepCompletionConditionIngredient `protobuf:"bytes,4,rep,name=Ingredients,proto3" json:"Ingredients,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
	Optional            bool `protobuf:"varint,5,opt,name=Optional,proto3" json:"Optional,omitempty"`
}

func (x *RecipeStepCompletionConditionForExistingRecipeCreationRequestInput) Reset() {
	*x = RecipeStepCompletionConditionForExistingRecipeCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[250]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepCompletionConditionForExistingRecipeCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepCompletionConditionForExistingRecipeCreationRequestInput) ProtoMessage() {}

func (x *RecipeStepCompletionConditionForExistingRecipeCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[250]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepCompletionConditionForExistingRecipeCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepCompletionConditionForExistingRecipeCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{250}
}

func (x *RecipeStepCompletionConditionForExistingRecipeCreationRequestInput) GetIngredientStateID() string {
	if x != nil {
		return x.IngredientStateID
	}
	return ""
}

func (x *RecipeStepCompletionConditionForExistingRecipeCreationRequestInput) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeStepCompletionConditionForExistingRecipeCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeStepCompletionConditionForExistingRecipeCreationRequestInput) GetIngredients() []*RecipeStepCompletionConditionIngredient {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

func (x *RecipeStepCompletionConditionForExistingRecipeCreationRequestInput) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

type RecipeStepCompletionConditionIngredient struct {
	state                                  protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt                              *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	ArchivedAt                             *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	LastUpdatedAt                          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	ID                                     string                 `protobuf:"bytes,4,opt,name=ID,proto3" json:"ID,omitempty"`
	BelongsToRecipeStepCompletionCondition string                 `protobuf:"bytes,5,opt,name=BelongsToRecipeStepCompletionCondition,proto3" json:"BelongsToRecipeStepCompletionCondition,omitempty"`
	RecipeStepIngredient                   string                 `protobuf:"bytes,6,opt,name=RecipeStepIngredient,proto3" json:"RecipeStepIngredient,omitempty"`
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *RecipeStepCompletionConditionIngredient) Reset() {
	*x = RecipeStepCompletionConditionIngredient{}
	mi := &file_messages_eating_proto_msgTypes[251]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepCompletionConditionIngredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepCompletionConditionIngredient) ProtoMessage() {}

func (x *RecipeStepCompletionConditionIngredient) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[251]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepCompletionConditionIngredient.ProtoReflect.Descriptor instead.
func (*RecipeStepCompletionConditionIngredient) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{251}
}

func (x *RecipeStepCompletionConditionIngredient) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RecipeStepCompletionConditionIngredient) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *RecipeStepCompletionConditionIngredient) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *RecipeStepCompletionConditionIngredient) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RecipeStepCompletionConditionIngredient) GetBelongsToRecipeStepCompletionCondition() string {
	if x != nil {
		return x.BelongsToRecipeStepCompletionCondition
	}
	return ""
}

func (x *RecipeStepCompletionConditionIngredient) GetRecipeStepIngredient() string {
	if x != nil {
		return x.RecipeStepIngredient
	}
	return ""
}

type RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	RecipeStepIngredient string                 `protobuf:"bytes,1,opt,name=RecipeStepIngredient,proto3" json:"RecipeStepIngredient,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput) Reset() {
	*x = RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[252]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput) ProtoMessage() {}

func (x *RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[252]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{252}
}

func (x *RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput) GetRecipeStepIngredient() string {
	if x != nil {
		return x.RecipeStepIngredient
	}
	return ""
}

type RecipeStepCompletionConditionUpdateRequestInput struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	IngredientStateID   string                 `protobuf:"bytes,1,opt,name=IngredientStateID,proto3" json:"IngredientStateID,omitempty"`
	BelongsToRecipeStep string                 `protobuf:"bytes,2,opt,name=BelongsToRecipeStep,proto3" json:"BelongsToRecipeStep,omitempty"`
	Notes               string                 `protobuf:"bytes,3,opt,name=Notes,proto3" json:"Notes,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
	Optional            bool `protobuf:"varint,4,opt,name=Optional,proto3" json:"Optional,omitempty"`
}

func (x *RecipeStepCompletionConditionUpdateRequestInput) Reset() {
	*x = RecipeStepCompletionConditionUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[253]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepCompletionConditionUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepCompletionConditionUpdateRequestInput) ProtoMessage() {}

func (x *RecipeStepCompletionConditionUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[253]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepCompletionConditionUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepCompletionConditionUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{253}
}

func (x *RecipeStepCompletionConditionUpdateRequestInput) GetIngredientStateID() string {
	if x != nil {
		return x.IngredientStateID
	}
	return ""
}

func (x *RecipeStepCompletionConditionUpdateRequestInput) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeStepCompletionConditionUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeStepCompletionConditionUpdateRequestInput) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

type RecipeStepCreationRequestInput struct {
	state                   protoimpl.MessageState                               `protogen:"open.v1"`
	EstimatedTimeInSeconds  *OptionalUint32Range                                 `protobuf:"bytes,1,opt,name=EstimatedTimeInSeconds,proto3" json:"EstimatedTimeInSeconds,omitempty"`
	TemperatureInCelsius    *OptionalFloat32Range                                `protobuf:"bytes,2,opt,name=TemperatureInCelsius,proto3" json:"TemperatureInCelsius,omitempty"`
	PreparationID           string                                               `protobuf:"bytes,3,opt,name=PreparationID,proto3" json:"PreparationID,omitempty"`
	Notes                   string                                               `protobuf:"bytes,4,opt,name=Notes,proto3" json:"Notes,omitempty"`
	ConditionExpression     string                                               `protobuf:"bytes,5,opt,name=ConditionExpression,proto3" json:"ConditionExpression,omitempty"`
	ExplicitInstructions    string                                               `protobuf:"bytes,6,opt,name=ExplicitInstructions,proto3" json:"ExplicitInstructions,omitempty"`
	Vessels                 []*RecipeStepVesselCreationRequestInput              `protobuf:"bytes,8,rep,name=Vessels,proto3" json:"Vessels,omitempty"`
	Instruments             []*RecipeStepInstrumentCreationRequestInput          `protobuf:"bytes,7,rep,name=Instruments,proto3" json:"Instruments,omitempty"`
	Products                []*RecipeStepProductCreationRequestInput             `protobuf:"bytes,9,rep,name=Products,proto3" json:"Products,omitempty"`
	Ingredients             []*RecipeStepIngredientCreationRequestInput          `protobuf:"bytes,10,rep,name=Ingredients,proto3" json:"Ingredients,omitempty"`
	CompletionConditions    []*RecipeStepCompletionConditionCreationRequestInput `protobuf:"bytes,11,rep,name=CompletionConditions,proto3" json:"CompletionConditions,omitempty"`
	unknownFields           protoimpl.UnknownFields
	Index                   uint32 `protobuf:"varint,12,opt,name=Index,proto3" json:"Index,omitempty"`
	sizeCache               protoimpl.SizeCache
	Optional                bool `protobuf:"varint,13,opt,name=Optional,proto3" json:"Optional,omitempty"`
	StartTimerAutomatically bool `protobuf:"varint,14,opt,name=StartTimerAutomatically,proto3" json:"StartTimerAutomatically,omitempty"`
}

func (x *RecipeStepCreationRequestInput) Reset() {
	*x = RecipeStepCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[254]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepCreationRequestInput) ProtoMessage() {}

func (x *RecipeStepCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[254]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{254}
}

func (x *RecipeStepCreationRequestInput) GetEstimatedTimeInSeconds() *OptionalUint32Range {
	if x != nil {
		return x.EstimatedTimeInSeconds
	}
	return nil
}

func (x *RecipeStepCreationRequestInput) GetTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.TemperatureInCelsius
	}
	return nil
}

func (x *RecipeStepCreationRequestInput) GetPreparationID() string {
	if x != nil {
		return x.PreparationID
	}
	return ""
}

func (x *RecipeStepCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeStepCreationRequestInput) GetConditionExpression() string {
	if x != nil {
		return x.ConditionExpression
	}
	return ""
}

func (x *RecipeStepCreationRequestInput) GetExplicitInstructions() string {
	if x != nil {
		return x.ExplicitInstructions
	}
	return ""
}

func (x *RecipeStepCreationRequestInput) GetInstruments() []*RecipeStepInstrumentCreationRequestInput {
	if x != nil {
		return x.Instruments
	}
	return nil
}

func (x *RecipeStepCreationRequestInput) GetVessels() []*RecipeStepVesselCreationRequestInput {
	if x != nil {
		return x.Vessels
	}
	return nil
}

func (x *RecipeStepCreationRequestInput) GetProducts() []*RecipeStepProductCreationRequestInput {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *RecipeStepCreationRequestInput) GetIngredients() []*RecipeStepIngredientCreationRequestInput {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

func (x *RecipeStepCreationRequestInput) GetCompletionConditions() []*RecipeStepCompletionConditionCreationRequestInput {
	if x != nil {
		return x.CompletionConditions
	}
	return nil
}

func (x *RecipeStepCreationRequestInput) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RecipeStepCreationRequestInput) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *RecipeStepCreationRequestInput) GetStartTimerAutomatically() bool {
	if x != nil {
		return x.StartTimerAutomatically
	}
	return false
}

type RecipeStepIngredient struct {
	MeasurementUnit           *ValidMeasurementUnit        `protobuf:"bytes,15,opt,name=MeasurementUnit,proto3" json:"MeasurementUnit,omitempty"`
	CreatedAt                 *timestamppb.Timestamp       `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Quantity                  *Float32RangeWithOptionalMax `protobuf:"bytes,14,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	ArchivedAt                *timestamppb.Timestamp       `protobuf:"bytes,3,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	Ingredient                *ValidIngredient             `protobuf:"bytes,4,opt,name=Ingredient,proto3" json:"Ingredient,omitempty"`
	LastUpdatedAt             *timestamppb.Timestamp       `protobuf:"bytes,5,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	state                     protoimpl.MessageState       `protogen:"open.v1"`
	RecipeStepProductID       string                       `protobuf:"bytes,8,opt,name=RecipeStepProductID,proto3" json:"RecipeStepProductID,omitempty"`
	BelongsToRecipeStep       string                       `protobuf:"bytes,9,opt,name=BelongsToRecipeStep,proto3" json:"BelongsToRecipeStep,omitempty"`
	IngredientNotes           string                       `protobuf:"bytes,12,opt,name=IngredientNotes,proto3" json:"IngredientNotes,omitempty"`
	QuantityNotes             string                       `protobuf:"bytes,11,opt,name=QuantityNotes,proto3" json:"QuantityNotes,omitempty"`
	ID                        string                       `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                      string                       `protobuf:"bytes,13,opt,name=Name,proto3" json:"Name,omitempty"`
	RecipeStepProductRecipeID string                       `protobuf:"bytes,2,opt,name=RecipeStepProductRecipeID,proto3" json:"RecipeStepProductRecipeID,omitempty"`
	unknownFields             protoimpl.UnknownFields
	VesselIndex               uint32  `protobuf:"varint,6,opt,name=VesselIndex,proto3" json:"VesselIndex,omitempty"`
	OptionIndex               uint32  `protobuf:"varint,16,opt,name=OptionIndex,proto3" json:"OptionIndex,omitempty"`
	ProductPercentageToUse    float32 `protobuf:"fixed32,7,opt,name=ProductPercentageToUse,proto3" json:"ProductPercentageToUse,omitempty"`
	sizeCache                 protoimpl.SizeCache
	Optional                  bool `protobuf:"varint,17,opt,name=Optional,proto3" json:"Optional,omitempty"`
	ToTaste                   bool `protobuf:"varint,18,opt,name=ToTaste,proto3" json:"ToTaste,omitempty"`
}

func (x *RecipeStepIngredient) Reset() {
	*x = RecipeStepIngredient{}
	mi := &file_messages_eating_proto_msgTypes[255]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepIngredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepIngredient) ProtoMessage() {}

func (x *RecipeStepIngredient) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[255]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepIngredient.ProtoReflect.Descriptor instead.
func (*RecipeStepIngredient) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{255}
}

func (x *RecipeStepIngredient) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RecipeStepIngredient) GetRecipeStepProductRecipeID() string {
	if x != nil {
		return x.RecipeStepProductRecipeID
	}
	return ""
}

func (x *RecipeStepIngredient) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *RecipeStepIngredient) GetIngredient() *ValidIngredient {
	if x != nil {
		return x.Ingredient
	}
	return nil
}

func (x *RecipeStepIngredient) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *RecipeStepIngredient) GetVesselIndex() uint32 {
	if x != nil {
		return x.VesselIndex
	}
	return 0
}

func (x *RecipeStepIngredient) GetProductPercentageToUse() float32 {
	if x != nil {
		return x.ProductPercentageToUse
	}
	return 0
}

func (x *RecipeStepIngredient) GetRecipeStepProductID() string {
	if x != nil {
		return x.RecipeStepProductID
	}
	return ""
}

func (x *RecipeStepIngredient) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeStepIngredient) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RecipeStepIngredient) GetQuantityNotes() string {
	if x != nil {
		return x.QuantityNotes
	}
	return ""
}

func (x *RecipeStepIngredient) GetIngredientNotes() string {
	if x != nil {
		return x.IngredientNotes
	}
	return ""
}

func (x *RecipeStepIngredient) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeStepIngredient) GetQuantity() *Float32RangeWithOptionalMax {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *RecipeStepIngredient) GetMeasurementUnit() *ValidMeasurementUnit {
	if x != nil {
		return x.MeasurementUnit
	}
	return nil
}

func (x *RecipeStepIngredient) GetOptionIndex() uint32 {
	if x != nil {
		return x.OptionIndex
	}
	return 0
}

func (x *RecipeStepIngredient) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *RecipeStepIngredient) GetToTaste() bool {
	if x != nil {
		return x.ToTaste
	}
	return false
}

type RecipeStepIngredientCreationRequestInput struct {
	Quantity                        *Float32RangeWithOptionalMax `protobuf:"bytes,11,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	state                           protoimpl.MessageState       `protogen:"open.v1"`
	IngredientID                    string                       `protobuf:"bytes,1,opt,name=IngredientID,proto3" json:"IngredientID,omitempty"`
	RecipeStepProductRecipeID       string                       `protobuf:"bytes,6,opt,name=RecipeStepProductRecipeID,proto3" json:"RecipeStepProductRecipeID,omitempty"`
	IngredientNotes                 string                       `protobuf:"bytes,7,opt,name=IngredientNotes,proto3" json:"IngredientNotes,omitempty"`
	MeasurementUnitID               string                       `protobuf:"bytes,8,opt,name=MeasurementUnitID,proto3" json:"MeasurementUnitID,omitempty"`
	Name                            string                       `protobuf:"bytes,9,opt,name=Name,proto3" json:"Name,omitempty"`
	QuantityNotes                   string                       `protobuf:"bytes,10,opt,name=QuantityNotes,proto3" json:"QuantityNotes,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	ProductOfRecipeStepIndex        uint64  `protobuf:"varint,2,opt,name=ProductOfRecipeStepIndex,proto3" json:"ProductOfRecipeStepIndex,omitempty"`
	ProductOfRecipeStepProductIndex uint64  `protobuf:"varint,3,opt,name=ProductOfRecipeStepProductIndex,proto3" json:"ProductOfRecipeStepProductIndex,omitempty"`
	VesselIndex                     uint32  `protobuf:"varint,4,opt,name=VesselIndex,proto3" json:"VesselIndex,omitempty"`
	OptionIndex                     uint32  `protobuf:"varint,12,opt,name=OptionIndex,proto3" json:"OptionIndex,omitempty"`
	ProductPercentageToUse          float32 `protobuf:"fixed32,5,opt,name=ProductPercentageToUse,proto3" json:"ProductPercentageToUse,omitempty"`
	sizeCache                       protoimpl.SizeCache
	Optional                        bool `protobuf:"varint,13,opt,name=Optional,proto3" json:"Optional,omitempty"`
	ToTaste                         bool `protobuf:"varint,14,opt,name=ToTaste,proto3" json:"ToTaste,omitempty"`
}

func (x *RecipeStepIngredientCreationRequestInput) Reset() {
	*x = RecipeStepIngredientCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[256]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepIngredientCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepIngredientCreationRequestInput) ProtoMessage() {}

func (x *RecipeStepIngredientCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[256]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepIngredientCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepIngredientCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{256}
}

func (x *RecipeStepIngredientCreationRequestInput) GetIngredientID() string {
	if x != nil {
		return x.IngredientID
	}
	return ""
}

func (x *RecipeStepIngredientCreationRequestInput) GetProductOfRecipeStepIndex() uint64 {
	if x != nil {
		return x.ProductOfRecipeStepIndex
	}
	return 0
}

func (x *RecipeStepIngredientCreationRequestInput) GetProductOfRecipeStepProductIndex() uint64 {
	if x != nil {
		return x.ProductOfRecipeStepProductIndex
	}
	return 0
}

func (x *RecipeStepIngredientCreationRequestInput) GetVesselIndex() uint32 {
	if x != nil {
		return x.VesselIndex
	}
	return 0
}

func (x *RecipeStepIngredientCreationRequestInput) GetProductPercentageToUse() float32 {
	if x != nil {
		return x.ProductPercentageToUse
	}
	return 0
}

func (x *RecipeStepIngredientCreationRequestInput) GetRecipeStepProductRecipeID() string {
	if x != nil {
		return x.RecipeStepProductRecipeID
	}
	return ""
}

func (x *RecipeStepIngredientCreationRequestInput) GetIngredientNotes() string {
	if x != nil {
		return x.IngredientNotes
	}
	return ""
}

func (x *RecipeStepIngredientCreationRequestInput) GetMeasurementUnitID() string {
	if x != nil {
		return x.MeasurementUnitID
	}
	return ""
}

func (x *RecipeStepIngredientCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeStepIngredientCreationRequestInput) GetQuantityNotes() string {
	if x != nil {
		return x.QuantityNotes
	}
	return ""
}

func (x *RecipeStepIngredientCreationRequestInput) GetQuantity() *Float32RangeWithOptionalMax {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *RecipeStepIngredientCreationRequestInput) GetOptionIndex() uint32 {
	if x != nil {
		return x.OptionIndex
	}
	return 0
}

func (x *RecipeStepIngredientCreationRequestInput) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *RecipeStepIngredientCreationRequestInput) GetToTaste() bool {
	if x != nil {
		return x.ToTaste
	}
	return false
}

type RecipeStepIngredientUpdateRequestInput struct {
	state                     protoimpl.MessageState                         `protogen:"open.v1"`
	Quantity                  *Float32RangeWithOptionalMaxUpdateRequestInput `protobuf:"bytes,9,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	Name                      string                                         `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	RecipeStepProductID       string                                         `protobuf:"bytes,2,opt,name=RecipeStepProductID,proto3" json:"RecipeStepProductID,omitempty"`
	MeasurementUnitID         string                                         `protobuf:"bytes,5,opt,name=MeasurementUnitID,proto3" json:"MeasurementUnitID,omitempty"`
	QuantityNotes             string                                         `protobuf:"bytes,6,opt,name=QuantityNotes,proto3" json:"QuantityNotes,omitempty"`
	IngredientNotes           string                                         `protobuf:"bytes,7,opt,name=IngredientNotes,proto3" json:"IngredientNotes,omitempty"`
	BelongsToRecipeStep       string                                         `protobuf:"bytes,8,opt,name=BelongsToRecipeStep,proto3" json:"BelongsToRecipeStep,omitempty"`
	IngredientID              string                                         `protobuf:"bytes,1,opt,name=IngredientID,proto3" json:"IngredientID,omitempty"`
	RecipeStepProductRecipeID string                                         `protobuf:"bytes,14,opt,name=RecipeStepProductRecipeID,proto3" json:"RecipeStepProductRecipeID,omitempty"`
	unknownFields             protoimpl.UnknownFields
	OptionIndex               uint32 `protobuf:"varint,10,opt,name=OptionIndex,proto3" json:"OptionIndex,omitempty"`
	VesselIndex               uint32 `protobuf:"varint,11,opt,name=VesselIndex,proto3" json:"VesselIndex,omitempty"`
	sizeCache                 protoimpl.SizeCache
	ProductPercentageToUse    float32 `protobuf:"fixed32,13,opt,name=ProductPercentageToUse,proto3" json:"ProductPercentageToUse,omitempty"`
	Optional                  bool    `protobuf:"varint,4,opt,name=Optional,proto3" json:"Optional,omitempty"`
	ToTaste                   bool    `protobuf:"varint,12,opt,name=ToTaste,proto3" json:"ToTaste,omitempty"`
}

func (x *RecipeStepIngredientUpdateRequestInput) Reset() {
	*x = RecipeStepIngredientUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[257]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepIngredientUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepIngredientUpdateRequestInput) ProtoMessage() {}

func (x *RecipeStepIngredientUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[257]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepIngredientUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepIngredientUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{257}
}

func (x *RecipeStepIngredientUpdateRequestInput) GetIngredientID() string {
	if x != nil {
		return x.IngredientID
	}
	return ""
}

func (x *RecipeStepIngredientUpdateRequestInput) GetRecipeStepProductID() string {
	if x != nil {
		return x.RecipeStepProductID
	}
	return ""
}

func (x *RecipeStepIngredientUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeStepIngredientUpdateRequestInput) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *RecipeStepIngredientUpdateRequestInput) GetMeasurementUnitID() string {
	if x != nil {
		return x.MeasurementUnitID
	}
	return ""
}

func (x *RecipeStepIngredientUpdateRequestInput) GetQuantityNotes() string {
	if x != nil {
		return x.QuantityNotes
	}
	return ""
}

func (x *RecipeStepIngredientUpdateRequestInput) GetIngredientNotes() string {
	if x != nil {
		return x.IngredientNotes
	}
	return ""
}

func (x *RecipeStepIngredientUpdateRequestInput) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeStepIngredientUpdateRequestInput) GetQuantity() *Float32RangeWithOptionalMaxUpdateRequestInput {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *RecipeStepIngredientUpdateRequestInput) GetOptionIndex() uint32 {
	if x != nil {
		return x.OptionIndex
	}
	return 0
}

func (x *RecipeStepIngredientUpdateRequestInput) GetVesselIndex() uint32 {
	if x != nil {
		return x.VesselIndex
	}
	return 0
}

func (x *RecipeStepIngredientUpdateRequestInput) GetToTaste() bool {
	if x != nil {
		return x.ToTaste
	}
	return false
}

func (x *RecipeStepIngredientUpdateRequestInput) GetProductPercentageToUse() float32 {
	if x != nil {
		return x.ProductPercentageToUse
	}
	return 0
}

func (x *RecipeStepIngredientUpdateRequestInput) GetRecipeStepProductRecipeID() string {
	if x != nil {
		return x.RecipeStepProductRecipeID
	}
	return ""
}

type RecipeStepInstrument struct {
	state               protoimpl.MessageState      `protogen:"open.v1"`
	CreatedAt           *timestamppb.Timestamp      `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Instrument          *ValidInstrument            `protobuf:"bytes,2,opt,name=Instrument,proto3" json:"Instrument,omitempty"`
	LastUpdatedAt       *timestamppb.Timestamp      `protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	Quantity            *Uint32RangeWithOptionalMax `protobuf:"bytes,10,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	ArchivedAt          *timestamppb.Timestamp      `protobuf:"bytes,5,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	BelongsToRecipeStep string                      `protobuf:"bytes,8,opt,name=BelongsToRecipeStep,proto3" json:"BelongsToRecipeStep,omitempty"`
	Name                string                      `protobuf:"bytes,7,opt,name=Name,proto3" json:"Name,omitempty"`
	Notes               string                      `protobuf:"bytes,6,opt,name=Notes,proto3" json:"Notes,omitempty"`
	ID                  string                      `protobuf:"bytes,9,opt,name=ID,proto3" json:"ID,omitempty"`
	RecipeStepProductID string                      `protobuf:"bytes,4,opt,name=RecipeStepProductID,proto3" json:"RecipeStepProductID,omitempty"`
	unknownFields       protoimpl.UnknownFields
	OptionIndex         uint32 `protobuf:"varint,11,opt,name=OptionIndex,proto3" json:"OptionIndex,omitempty"`
	PreferenceRank      uint32 `protobuf:"varint,12,opt,name=PreferenceRank,proto3" json:"PreferenceRank,omitempty"`
	sizeCache           protoimpl.SizeCache
	Optional            bool `protobuf:"varint,13,opt,name=Optional,proto3" json:"Optional,omitempty"`
}

func (x *RecipeStepInstrument) Reset() {
	*x = RecipeStepInstrument{}
	mi := &file_messages_eating_proto_msgTypes[258]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepInstrument) ProtoMessage() {}

func (x *RecipeStepInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[258]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepInstrument.ProtoReflect.Descriptor instead.
func (*RecipeStepInstrument) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{258}
}

func (x *RecipeStepInstrument) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RecipeStepInstrument) GetInstrument() *ValidInstrument {
	if x != nil {
		return x.Instrument
	}
	return nil
}

func (x *RecipeStepInstrument) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *RecipeStepInstrument) GetRecipeStepProductID() string {
	if x != nil {
		return x.RecipeStepProductID
	}
	return ""
}

func (x *RecipeStepInstrument) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *RecipeStepInstrument) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeStepInstrument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeStepInstrument) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeStepInstrument) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RecipeStepInstrument) GetQuantity() *Uint32RangeWithOptionalMax {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *RecipeStepInstrument) GetOptionIndex() uint32 {
	if x != nil {
		return x.OptionIndex
	}
	return 0
}

func (x *RecipeStepInstrument) GetPreferenceRank() uint32 {
	if x != nil {
		return x.PreferenceRank
	}
	return 0
}

func (x *RecipeStepInstrument) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

type RecipeStepInstrumentCreationRequestInput struct {
	state                           protoimpl.MessageState      `protogen:"open.v1"`
	Quantity                        *Uint32RangeWithOptionalMax `protobuf:"bytes,5,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	Name                            string                      `protobuf:"bytes,7,opt,name=Name,proto3" json:"Name,omitempty"`
	InstrumentID                    string                      `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	RecipeStepProductID             string                      `protobuf:"bytes,2,opt,name=RecipeStepProductID,proto3" json:"RecipeStepProductID,omitempty"`
	Notes                           string                      `protobuf:"bytes,6,opt,name=Notes,proto3" json:"Notes,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	ProductOfRecipeStepIndex        uint64 `protobuf:"varint,3,opt,name=ProductOfRecipeStepIndex,proto3" json:"ProductOfRecipeStepIndex,omitempty"`
	ProductOfRecipeStepProductIndex uint64 `protobuf:"varint,4,opt,name=ProductOfRecipeStepProductIndex,proto3" json:"ProductOfRecipeStepProductIndex,omitempty"`
	OptionIndex                     uint32 `protobuf:"varint,8,opt,name=OptionIndex,proto3" json:"OptionIndex,omitempty"`
	PreferenceRank                  uint32 `protobuf:"varint,10,opt,name=PreferenceRank,proto3" json:"PreferenceRank,omitempty"`
	sizeCache                       protoimpl.SizeCache
	Optional                        bool `protobuf:"varint,9,opt,name=Optional,proto3" json:"Optional,omitempty"`
}

func (x *RecipeStepInstrumentCreationRequestInput) Reset() {
	*x = RecipeStepInstrumentCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[259]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepInstrumentCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepInstrumentCreationRequestInput) ProtoMessage() {}

func (x *RecipeStepInstrumentCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[259]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepInstrumentCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepInstrumentCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{259}
}

func (x *RecipeStepInstrumentCreationRequestInput) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *RecipeStepInstrumentCreationRequestInput) GetRecipeStepProductID() string {
	if x != nil {
		return x.RecipeStepProductID
	}
	return ""
}

func (x *RecipeStepInstrumentCreationRequestInput) GetProductOfRecipeStepIndex() uint64 {
	if x != nil {
		return x.ProductOfRecipeStepIndex
	}
	return 0
}

func (x *RecipeStepInstrumentCreationRequestInput) GetProductOfRecipeStepProductIndex() uint64 {
	if x != nil {
		return x.ProductOfRecipeStepProductIndex
	}
	return 0
}

func (x *RecipeStepInstrumentCreationRequestInput) GetQuantity() *Uint32RangeWithOptionalMax {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *RecipeStepInstrumentCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeStepInstrumentCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeStepInstrumentCreationRequestInput) GetOptionIndex() uint32 {
	if x != nil {
		return x.OptionIndex
	}
	return 0
}

func (x *RecipeStepInstrumentCreationRequestInput) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *RecipeStepInstrumentCreationRequestInput) GetPreferenceRank() uint32 {
	if x != nil {
		return x.PreferenceRank
	}
	return 0
}

type RecipeStepInstrumentUpdateRequestInput struct {
	state               protoimpl.MessageState                        `protogen:"open.v1"`
	Quantity            *Uint32RangeWithOptionalMaxUpdateRequestInput `protobuf:"bytes,9,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	InstrumentID        string                                        `protobuf:"bytes,1,opt,name=InstrumentID,proto3" json:"InstrumentID,omitempty"`
	RecipeStepProductID string                                        `protobuf:"bytes,2,opt,name=RecipeStepProductID,proto3" json:"RecipeStepProductID,omitempty"`
	Notes               string                                        `protobuf:"bytes,3,opt,name=Notes,proto3" json:"Notes,omitempty"`
	BelongsToRecipeStep string                                        `protobuf:"bytes,5,opt,name=BelongsToRecipeStep,proto3" json:"BelongsToRecipeStep,omitempty"`
	Name                string                                        `protobuf:"bytes,6,opt,name=Name,proto3" json:"Name,omitempty"`
	unknownFields       protoimpl.UnknownFields
	PreferenceRank      uint32 `protobuf:"varint,4,opt,name=PreferenceRank,proto3" json:"PreferenceRank,omitempty"`
	OptionIndex         uint32 `protobuf:"varint,8,opt,name=OptionIndex,proto3" json:"OptionIndex,omitempty"`
	sizeCache           protoimpl.SizeCache
	Optional            bool `protobuf:"varint,7,opt,name=Optional,proto3" json:"Optional,omitempty"`
}

func (x *RecipeStepInstrumentUpdateRequestInput) Reset() {
	*x = RecipeStepInstrumentUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[260]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepInstrumentUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepInstrumentUpdateRequestInput) ProtoMessage() {}

func (x *RecipeStepInstrumentUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[260]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepInstrumentUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepInstrumentUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{260}
}

func (x *RecipeStepInstrumentUpdateRequestInput) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *RecipeStepInstrumentUpdateRequestInput) GetRecipeStepProductID() string {
	if x != nil {
		return x.RecipeStepProductID
	}
	return ""
}

func (x *RecipeStepInstrumentUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeStepInstrumentUpdateRequestInput) GetPreferenceRank() uint32 {
	if x != nil {
		return x.PreferenceRank
	}
	return 0
}

func (x *RecipeStepInstrumentUpdateRequestInput) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeStepInstrumentUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeStepInstrumentUpdateRequestInput) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *RecipeStepInstrumentUpdateRequestInput) GetOptionIndex() uint32 {
	if x != nil {
		return x.OptionIndex
	}
	return 0
}

func (x *RecipeStepInstrumentUpdateRequestInput) GetQuantity() *Uint32RangeWithOptionalMaxUpdateRequestInput {
	if x != nil {
		return x.Quantity
	}
	return nil
}

type RecipeStepProduct struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt                   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	StorageTemperatureInCelsius *OptionalFloat32Range  `protobuf:"bytes,2,opt,name=StorageTemperatureInCelsius,proto3" json:"StorageTemperatureInCelsius,omitempty"`
	StorageDurationInSeconds    *OptionalUint32Range   `protobuf:"bytes,3,opt,name=StorageDurationInSeconds,proto3" json:"StorageDurationInSeconds,omitempty"`
	Quantity                    *OptionalFloat32Range  `protobuf:"bytes,4,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	ArchivedAt                  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	LastUpdatedAt               *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	MeasurementUnit             *ValidMeasurementUnit  `protobuf:"bytes,7,opt,name=MeasurementUnit,proto3" json:"MeasurementUnit,omitempty"`
	BelongsToRecipeStep         string                 `protobuf:"bytes,10,opt,name=BelongsToRecipeStep,proto3" json:"BelongsToRecipeStep,omitempty"`
	Name                        string                 `protobuf:"bytes,9,opt,name=Name,proto3" json:"Name,omitempty"`
	Type                        string                 `protobuf:"bytes,11,opt,name=Type,proto3" json:"Type,omitempty"`
	ID                          string                 `protobuf:"bytes,12,opt,name=ID,proto3" json:"ID,omitempty"`
	StorageInstructions         string                 `protobuf:"bytes,13,opt,name=StorageInstructions,proto3" json:"StorageInstructions,omitempty"`
	QuantityNotes               string                 `protobuf:"bytes,14,opt,name=QuantityNotes,proto3" json:"QuantityNotes,omitempty"`
	unknownFields               protoimpl.UnknownFields
	ContainedInVesselIndex      uint32 `protobuf:"varint,8,opt,name=ContainedInVesselIndex,proto3" json:"ContainedInVesselIndex,omitempty"`
	Index                       uint32 `protobuf:"varint,15,opt,name=Index,proto3" json:"Index,omitempty"`
	sizeCache                   protoimpl.SizeCache
	IsWaste                     bool `protobuf:"varint,16,opt,name=IsWaste,proto3" json:"IsWaste,omitempty"`
	IsLiquid                    bool `protobuf:"varint,17,opt,name=IsLiquid,proto3" json:"IsLiquid,omitempty"`
	Compostable                 bool `protobuf:"varint,18,opt,name=Compostable,proto3" json:"Compostable,omitempty"`
}

func (x *RecipeStepProduct) Reset() {
	*x = RecipeStepProduct{}
	mi := &file_messages_eating_proto_msgTypes[261]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepProduct) ProtoMessage() {}

func (x *RecipeStepProduct) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[261]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepProduct.ProtoReflect.Descriptor instead.
func (*RecipeStepProduct) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{261}
}

func (x *RecipeStepProduct) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RecipeStepProduct) GetStorageTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.StorageTemperatureInCelsius
	}
	return nil
}

func (x *RecipeStepProduct) GetStorageDurationInSeconds() *OptionalUint32Range {
	if x != nil {
		return x.StorageDurationInSeconds
	}
	return nil
}

func (x *RecipeStepProduct) GetQuantity() *OptionalFloat32Range {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *RecipeStepProduct) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *RecipeStepProduct) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *RecipeStepProduct) GetMeasurementUnit() *ValidMeasurementUnit {
	if x != nil {
		return x.MeasurementUnit
	}
	return nil
}

func (x *RecipeStepProduct) GetContainedInVesselIndex() uint32 {
	if x != nil {
		return x.ContainedInVesselIndex
	}
	return 0
}

func (x *RecipeStepProduct) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeStepProduct) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeStepProduct) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RecipeStepProduct) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RecipeStepProduct) GetStorageInstructions() string {
	if x != nil {
		return x.StorageInstructions
	}
	return ""
}

func (x *RecipeStepProduct) GetQuantityNotes() string {
	if x != nil {
		return x.QuantityNotes
	}
	return ""
}

func (x *RecipeStepProduct) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RecipeStepProduct) GetIsWaste() bool {
	if x != nil {
		return x.IsWaste
	}
	return false
}

func (x *RecipeStepProduct) GetIsLiquid() bool {
	if x != nil {
		return x.IsLiquid
	}
	return false
}

func (x *RecipeStepProduct) GetCompostable() bool {
	if x != nil {
		return x.Compostable
	}
	return false
}

type RecipeStepProductCreationRequestInput struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	StorageTemperatureInCelsius *OptionalFloat32Range  `protobuf:"bytes,1,opt,name=StorageTemperatureInCelsius,proto3" json:"StorageTemperatureInCelsius,omitempty"`
	StorageDurationInSeconds    *OptionalUint32Range   `protobuf:"bytes,2,opt,name=StorageDurationInSeconds,proto3" json:"StorageDurationInSeconds,omitempty"`
	Quantity                    *OptionalFloat32Range  `protobuf:"bytes,3,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	StorageInstructions         string                 `protobuf:"bytes,8,opt,name=StorageInstructions,proto3" json:"StorageInstructions,omitempty"`
	QuantityNotes               string                 `protobuf:"bytes,6,opt,name=QuantityNotes,proto3" json:"QuantityNotes,omitempty"`
	Name                        string                 `protobuf:"bytes,7,opt,name=Name,proto3" json:"Name,omitempty"`
	MeasurementUnitID           string                 `protobuf:"bytes,4,opt,name=MeasurementUnitID,proto3" json:"MeasurementUnitID,omitempty"`
	Type                        string                 `protobuf:"bytes,9,opt,name=Type,proto3" json:"Type,omitempty"`
	unknownFields               protoimpl.UnknownFields
	ContainedInVesselIndex      uint32 `protobuf:"varint,5,opt,name=ContainedInVesselIndex,proto3" json:"ContainedInVesselIndex,omitempty"`
	Index                       uint32 `protobuf:"varint,10,opt,name=Index,proto3" json:"Index,omitempty"`
	sizeCache                   protoimpl.SizeCache
	Compostable                 bool `protobuf:"varint,11,opt,name=Compostable,proto3" json:"Compostable,omitempty"`
	IsLiquid                    bool `protobuf:"varint,12,opt,name=IsLiquid,proto3" json:"IsLiquid,omitempty"`
	IsWaste                     bool `protobuf:"varint,13,opt,name=IsWaste,proto3" json:"IsWaste,omitempty"`
}

func (x *RecipeStepProductCreationRequestInput) Reset() {
	*x = RecipeStepProductCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[262]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepProductCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepProductCreationRequestInput) ProtoMessage() {}

func (x *RecipeStepProductCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[262]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepProductCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepProductCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{262}
}

func (x *RecipeStepProductCreationRequestInput) GetStorageTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.StorageTemperatureInCelsius
	}
	return nil
}

func (x *RecipeStepProductCreationRequestInput) GetStorageDurationInSeconds() *OptionalUint32Range {
	if x != nil {
		return x.StorageDurationInSeconds
	}
	return nil
}

func (x *RecipeStepProductCreationRequestInput) GetQuantity() *OptionalFloat32Range {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *RecipeStepProductCreationRequestInput) GetMeasurementUnitID() string {
	if x != nil {
		return x.MeasurementUnitID
	}
	return ""
}

func (x *RecipeStepProductCreationRequestInput) GetContainedInVesselIndex() uint32 {
	if x != nil {
		return x.ContainedInVesselIndex
	}
	return 0
}

func (x *RecipeStepProductCreationRequestInput) GetQuantityNotes() string {
	if x != nil {
		return x.QuantityNotes
	}
	return ""
}

func (x *RecipeStepProductCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeStepProductCreationRequestInput) GetStorageInstructions() string {
	if x != nil {
		return x.StorageInstructions
	}
	return ""
}

func (x *RecipeStepProductCreationRequestInput) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RecipeStepProductCreationRequestInput) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RecipeStepProductCreationRequestInput) GetCompostable() bool {
	if x != nil {
		return x.Compostable
	}
	return false
}

func (x *RecipeStepProductCreationRequestInput) GetIsLiquid() bool {
	if x != nil {
		return x.IsLiquid
	}
	return false
}

func (x *RecipeStepProductCreationRequestInput) GetIsWaste() bool {
	if x != nil {
		return x.IsWaste
	}
	return false
}

type RecipeStepProductUpdateRequestInput struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	Quantity                    *OptionalFloat32Range  `protobuf:"bytes,8,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	StorageDurationInSeconds    *OptionalUint32Range   `protobuf:"bytes,7,opt,name=StorageDurationInSeconds,proto3" json:"StorageDurationInSeconds,omitempty"`
	StorageTemperatureInCelsius *OptionalFloat32Range  `protobuf:"bytes,6,opt,name=StorageTemperatureInCelsius,proto3" json:"StorageTemperatureInCelsius,omitempty"`
	QuantityNotes               string                 `protobuf:"bytes,4,opt,name=QuantityNotes,proto3" json:"QuantityNotes,omitempty"`
	BelongsToRecipeStep         string                 `protobuf:"bytes,5,opt,name=BelongsToRecipeStep,proto3" json:"BelongsToRecipeStep,omitempty"`
	MeasurementUnitID           string                 `protobuf:"bytes,3,opt,name=MeasurementUnitID,proto3" json:"MeasurementUnitID,omitempty"`
	Type                        string                 `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Name                        string                 `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	StorageInstructions         string                 `protobuf:"bytes,10,opt,name=StorageInstructions,proto3" json:"StorageInstructions,omitempty"`
	unknownFields               protoimpl.UnknownFields
	Index                       uint32 `protobuf:"varint,13,opt,name=Index,proto3" json:"Index,omitempty"`
	ContainedInVesselIndex      uint32 `protobuf:"varint,14,opt,name=ContainedInVesselIndex,proto3" json:"ContainedInVesselIndex,omitempty"`
	sizeCache                   protoimpl.SizeCache
	Compostable                 bool `protobuf:"varint,9,opt,name=Compostable,proto3" json:"Compostable,omitempty"`
	IsLiquid                    bool `protobuf:"varint,11,opt,name=IsLiquid,proto3" json:"IsLiquid,omitempty"`
	IsWaste                     bool `protobuf:"varint,12,opt,name=IsWaste,proto3" json:"IsWaste,omitempty"`
}

func (x *RecipeStepProductUpdateRequestInput) Reset() {
	*x = RecipeStepProductUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[263]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepProductUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepProductUpdateRequestInput) ProtoMessage() {}

func (x *RecipeStepProductUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[263]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepProductUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepProductUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{263}
}

func (x *RecipeStepProductUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeStepProductUpdateRequestInput) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RecipeStepProductUpdateRequestInput) GetMeasurementUnitID() string {
	if x != nil {
		return x.MeasurementUnitID
	}
	return ""
}

func (x *RecipeStepProductUpdateRequestInput) GetQuantityNotes() string {
	if x != nil {
		return x.QuantityNotes
	}
	return ""
}

func (x *RecipeStepProductUpdateRequestInput) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeStepProductUpdateRequestInput) GetStorageTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.StorageTemperatureInCelsius
	}
	return nil
}

func (x *RecipeStepProductUpdateRequestInput) GetStorageDurationInSeconds() *OptionalUint32Range {
	if x != nil {
		return x.StorageDurationInSeconds
	}
	return nil
}

func (x *RecipeStepProductUpdateRequestInput) GetQuantity() *OptionalFloat32Range {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *RecipeStepProductUpdateRequestInput) GetCompostable() bool {
	if x != nil {
		return x.Compostable
	}
	return false
}

func (x *RecipeStepProductUpdateRequestInput) GetStorageInstructions() string {
	if x != nil {
		return x.StorageInstructions
	}
	return ""
}

func (x *RecipeStepProductUpdateRequestInput) GetIsLiquid() bool {
	if x != nil {
		return x.IsLiquid
	}
	return false
}

func (x *RecipeStepProductUpdateRequestInput) GetIsWaste() bool {
	if x != nil {
		return x.IsWaste
	}
	return false
}

func (x *RecipeStepProductUpdateRequestInput) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RecipeStepProductUpdateRequestInput) GetContainedInVesselIndex() uint32 {
	if x != nil {
		return x.ContainedInVesselIndex
	}
	return 0
}

type RecipeStepUpdateRequestInput struct {
	EstimatedTimeInSeconds  *OptionalUint32Range   `protobuf:"bytes,1,opt,name=EstimatedTimeInSeconds,proto3" json:"EstimatedTimeInSeconds,omitempty"`
	TemperatureInCelsius    *OptionalFloat32Range  `protobuf:"bytes,2,opt,name=TemperatureInCelsius,proto3" json:"TemperatureInCelsius,omitempty"`
	Preparation             *ValidPreparation      `protobuf:"bytes,4,opt,name=Preparation,proto3" json:"Preparation,omitempty"`
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Notes                   string                 `protobuf:"bytes,3,opt,name=Notes,proto3" json:"Notes,omitempty"`
	ExplicitInstructions    string                 `protobuf:"bytes,7,opt,name=ExplicitInstructions,proto3" json:"ExplicitInstructions,omitempty"`
	ConditionExpression     string                 `protobuf:"bytes,8,opt,name=ConditionExpression,proto3" json:"ConditionExpression,omitempty"`
	BelongsToRecipe         string                 `protobuf:"bytes,10,opt,name=BelongsToRecipe,proto3" json:"BelongsToRecipe,omitempty"`
	unknownFields           protoimpl.UnknownFields
	Index                   uint32 `protobuf:"varint,5,opt,name=Index,proto3" json:"Index,omitempty"`
	sizeCache               protoimpl.SizeCache
	Optional                bool `protobuf:"varint,6,opt,name=Optional,proto3" json:"Optional,omitempty"`
	StartTimerAutomatically bool `protobuf:"varint,9,opt,name=StartTimerAutomatically,proto3" json:"StartTimerAutomatically,omitempty"`
}

func (x *RecipeStepUpdateRequestInput) Reset() {
	*x = RecipeStepUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[264]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepUpdateRequestInput) ProtoMessage() {}

func (x *RecipeStepUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[264]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{264}
}

func (x *RecipeStepUpdateRequestInput) GetEstimatedTimeInSeconds() *OptionalUint32Range {
	if x != nil {
		return x.EstimatedTimeInSeconds
	}
	return nil
}

func (x *RecipeStepUpdateRequestInput) GetTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.TemperatureInCelsius
	}
	return nil
}

func (x *RecipeStepUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeStepUpdateRequestInput) GetPreparation() *ValidPreparation {
	if x != nil {
		return x.Preparation
	}
	return nil
}

func (x *RecipeStepUpdateRequestInput) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RecipeStepUpdateRequestInput) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *RecipeStepUpdateRequestInput) GetExplicitInstructions() string {
	if x != nil {
		return x.ExplicitInstructions
	}
	return ""
}

func (x *RecipeStepUpdateRequestInput) GetConditionExpression() string {
	if x != nil {
		return x.ConditionExpression
	}
	return ""
}

func (x *RecipeStepUpdateRequestInput) GetStartTimerAutomatically() bool {
	if x != nil {
		return x.StartTimerAutomatically
	}
	return false
}

func (x *RecipeStepUpdateRequestInput) GetBelongsToRecipe() string {
	if x != nil {
		return x.BelongsToRecipe
	}
	return ""
}

type RecipeStepVessel struct {
	Vessel               *ValidVessel                `protobuf:"bytes,6,opt,name=Vessel,proto3" json:"Vessel,omitempty"`
	CreatedAt            *timestamppb.Timestamp      `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Quantity             *Uint16RangeWithOptionalMax `protobuf:"bytes,2,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	LastUpdatedAt        *timestamppb.Timestamp      `protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	ArchivedAt           *timestamppb.Timestamp      `protobuf:"bytes,4,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	state                protoimpl.MessageState      `protogen:"open.v1"`
	VesselPreposition    string                      `protobuf:"bytes,10,opt,name=VesselPreposition,proto3" json:"VesselPreposition,omitempty"`
	Notes                string                      `protobuf:"bytes,8,opt,name=Notes,proto3" json:"Notes,omitempty"`
	RecipeStepProductID  string                      `protobuf:"bytes,5,opt,name=RecipeStepProductID,proto3" json:"RecipeStepProductID,omitempty"`
	BelongsToRecipeStep  string                      `protobuf:"bytes,9,opt,name=BelongsToRecipeStep,proto3" json:"BelongsToRecipeStep,omitempty"`
	ID                   string                      `protobuf:"bytes,7,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                 string                      `protobuf:"bytes,11,opt,name=Name,proto3" json:"Name,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
	UnavailableAfterStep bool `protobuf:"varint,12,opt,name=UnavailableAfterStep,proto3" json:"UnavailableAfterStep,omitempty"`
}

func (x *RecipeStepVessel) Reset() {
	*x = RecipeStepVessel{}
	mi := &file_messages_eating_proto_msgTypes[265]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepVessel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepVessel) ProtoMessage() {}

func (x *RecipeStepVessel) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[265]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepVessel.ProtoReflect.Descriptor instead.
func (*RecipeStepVessel) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{265}
}

func (x *RecipeStepVessel) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RecipeStepVessel) GetQuantity() *Uint16RangeWithOptionalMax {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *RecipeStepVessel) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *RecipeStepVessel) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *RecipeStepVessel) GetRecipeStepProductID() string {
	if x != nil {
		return x.RecipeStepProductID
	}
	return ""
}

func (x *RecipeStepVessel) GetVessel() *ValidVessel {
	if x != nil {
		return x.Vessel
	}
	return nil
}

func (x *RecipeStepVessel) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RecipeStepVessel) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeStepVessel) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeStepVessel) GetVesselPreposition() string {
	if x != nil {
		return x.VesselPreposition
	}
	return ""
}

func (x *RecipeStepVessel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeStepVessel) GetUnavailableAfterStep() bool {
	if x != nil {
		return x.UnavailableAfterStep
	}
	return false
}

type RecipeStepVesselCreationRequestInput struct {
	state                           protoimpl.MessageState      `protogen:"open.v1"`
	Quantity                        *Uint16RangeWithOptionalMax `protobuf:"bytes,5,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	RecipeStepProductID             string                      `protobuf:"bytes,1,opt,name=RecipeStepProductID,proto3" json:"RecipeStepProductID,omitempty"`
	VesselID                        string                      `protobuf:"bytes,4,opt,name=VesselID,proto3" json:"VesselID,omitempty"`
	Name                            string                      `protobuf:"bytes,6,opt,name=Name,proto3" json:"Name,omitempty"`
	Notes                           string                      `protobuf:"bytes,7,opt,name=Notes,proto3" json:"Notes,omitempty"`
	VesselPreposition               string                      `protobuf:"bytes,8,opt,name=VesselPreposition,proto3" json:"VesselPreposition,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	ProductOfRecipeStepIndex        uint64 `protobuf:"varint,2,opt,name=ProductOfRecipeStepIndex,proto3" json:"ProductOfRecipeStepIndex,omitempty"`
	ProductOfRecipeStepProductIndex uint64 `protobuf:"varint,3,opt,name=ProductOfRecipeStepProductIndex,proto3" json:"ProductOfRecipeStepProductIndex,omitempty"`
	sizeCache                       protoimpl.SizeCache
	UnavailableAfterStep            bool `protobuf:"varint,9,opt,name=UnavailableAfterStep,proto3" json:"UnavailableAfterStep,omitempty"`
}

func (x *RecipeStepVesselCreationRequestInput) Reset() {
	*x = RecipeStepVesselCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[266]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepVesselCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepVesselCreationRequestInput) ProtoMessage() {}

func (x *RecipeStepVesselCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[266]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepVesselCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepVesselCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{266}
}

func (x *RecipeStepVesselCreationRequestInput) GetRecipeStepProductID() string {
	if x != nil {
		return x.RecipeStepProductID
	}
	return ""
}

func (x *RecipeStepVesselCreationRequestInput) GetProductOfRecipeStepIndex() uint64 {
	if x != nil {
		return x.ProductOfRecipeStepIndex
	}
	return 0
}

func (x *RecipeStepVesselCreationRequestInput) GetProductOfRecipeStepProductIndex() uint64 {
	if x != nil {
		return x.ProductOfRecipeStepProductIndex
	}
	return 0
}

func (x *RecipeStepVesselCreationRequestInput) GetVesselID() string {
	if x != nil {
		return x.VesselID
	}
	return ""
}

func (x *RecipeStepVesselCreationRequestInput) GetQuantity() *Uint16RangeWithOptionalMax {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *RecipeStepVesselCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeStepVesselCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeStepVesselCreationRequestInput) GetVesselPreposition() string {
	if x != nil {
		return x.VesselPreposition
	}
	return ""
}

func (x *RecipeStepVesselCreationRequestInput) GetUnavailableAfterStep() bool {
	if x != nil {
		return x.UnavailableAfterStep
	}
	return false
}

type RecipeStepVesselUpdateRequestInput struct {
	state                protoimpl.MessageState                        `protogen:"open.v1"`
	Quantity             *Uint16RangeWithOptionalMaxUpdateRequestInput `protobuf:"bytes,6,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	RecipeStepProductID  string                                        `protobuf:"bytes,1,opt,name=RecipeStepProductID,proto3" json:"RecipeStepProductID,omitempty"`
	Name                 string                                        `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Notes                string                                        `protobuf:"bytes,3,opt,name=Notes,proto3" json:"Notes,omitempty"`
	BelongsToRecipeStep  string                                        `protobuf:"bytes,4,opt,name=BelongsToRecipeStep,proto3" json:"BelongsToRecipeStep,omitempty"`
	VesselID             string                                        `protobuf:"bytes,5,opt,name=VesselID,proto3" json:"VesselID,omitempty"`
	VesselPreposition    string                                        `protobuf:"bytes,7,opt,name=VesselPreposition,proto3" json:"VesselPreposition,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
	UnavailableAfterStep bool `protobuf:"varint,8,opt,name=UnavailableAfterStep,proto3" json:"UnavailableAfterStep,omitempty"`
}

func (x *RecipeStepVesselUpdateRequestInput) Reset() {
	*x = RecipeStepVesselUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[267]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepVesselUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepVesselUpdateRequestInput) ProtoMessage() {}

func (x *RecipeStepVesselUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[267]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepVesselUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepVesselUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{267}
}

func (x *RecipeStepVesselUpdateRequestInput) GetRecipeStepProductID() string {
	if x != nil {
		return x.RecipeStepProductID
	}
	return ""
}

func (x *RecipeStepVesselUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeStepVesselUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeStepVesselUpdateRequestInput) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeStepVesselUpdateRequestInput) GetVesselID() string {
	if x != nil {
		return x.VesselID
	}
	return ""
}

func (x *RecipeStepVesselUpdateRequestInput) GetQuantity() *Uint16RangeWithOptionalMaxUpdateRequestInput {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *RecipeStepVesselUpdateRequestInput) GetVesselPreposition() string {
	if x != nil {
		return x.VesselPreposition
	}
	return ""
}

func (x *RecipeStepVesselUpdateRequestInput) GetUnavailableAfterStep() bool {
	if x != nil {
		return x.UnavailableAfterStep
	}
	return false
}

type RecipeUpdateRequestInput struct {
	EstimatedPortions   *Float32RangeWithOptionalMaxUpdateRequestInput `protobuf:"bytes,7,opt,name=EstimatedPortions,proto3" json:"EstimatedPortions,omitempty"`
	state               protoimpl.MessageState                         `protogen:"open.v1"`
	PluralPortionName   string                                         `protobuf:"bytes,9,opt,name=PluralPortionName,proto3" json:"PluralPortionName,omitempty"`
	Source              string                                         `protobuf:"bytes,3,opt,name=Source,proto3" json:"Source,omitempty"`
	Description         string                                         `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	InspiredByRecipeID  string                                         `protobuf:"bytes,5,opt,name=InspiredByRecipeID,proto3" json:"InspiredByRecipeID,omitempty"`
	Slug                string                                         `protobuf:"bytes,2,opt,name=Slug,proto3" json:"Slug,omitempty"`
	PortionName         string                                         `protobuf:"bytes,8,opt,name=PortionName,proto3" json:"PortionName,omitempty"`
	Name                string                                         `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	YieldsComponentType string                                         `protobuf:"bytes,11,opt,name=YieldsComponentType,proto3" json:"YieldsComponentType,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
	SealOfApproval      bool `protobuf:"varint,6,opt,name=SealOfApproval,proto3" json:"SealOfApproval,omitempty"`
	EligibleForMeals    bool `protobuf:"varint,10,opt,name=EligibleForMeals,proto3" json:"EligibleForMeals,omitempty"`
}

func (x *RecipeUpdateRequestInput) Reset() {
	*x = RecipeUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[268]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeUpdateRequestInput) ProtoMessage() {}

func (x *RecipeUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[268]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{268}
}

func (x *RecipeUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeUpdateRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *RecipeUpdateRequestInput) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *RecipeUpdateRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RecipeUpdateRequestInput) GetInspiredByRecipeID() string {
	if x != nil {
		return x.InspiredByRecipeID
	}
	return ""
}

func (x *RecipeUpdateRequestInput) GetSealOfApproval() bool {
	if x != nil {
		return x.SealOfApproval
	}
	return false
}

func (x *RecipeUpdateRequestInput) GetEstimatedPortions() *Float32RangeWithOptionalMaxUpdateRequestInput {
	if x != nil {
		return x.EstimatedPortions
	}
	return nil
}

func (x *RecipeUpdateRequestInput) GetPortionName() string {
	if x != nil {
		return x.PortionName
	}
	return ""
}

func (x *RecipeUpdateRequestInput) GetPluralPortionName() string {
	if x != nil {
		return x.PluralPortionName
	}
	return ""
}

func (x *RecipeUpdateRequestInput) GetEligibleForMeals() bool {
	if x != nil {
		return x.EligibleForMeals
	}
	return false
}

func (x *RecipeUpdateRequestInput) GetYieldsComponentType() string {
	if x != nil {
		return x.YieldsComponentType
	}
	return ""
}

// ArchiveRecipe
type ArchiveRecipeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecipeID      string                 `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveRecipeRequest) Reset() {
	*x = ArchiveRecipeRequest{}
	mi := &file_messages_eating_proto_msgTypes[269]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipeRequest) ProtoMessage() {}

func (x *ArchiveRecipeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[269]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipeRequest.ProtoReflect.Descriptor instead.
func (*ArchiveRecipeRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{269}
}

func (x *ArchiveRecipeRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

type ArchiveRecipeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveRecipeResponse) Reset() {
	*x = ArchiveRecipeResponse{}
	mi := &file_messages_eating_proto_msgTypes[270]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipeResponse) ProtoMessage() {}

func (x *ArchiveRecipeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[270]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipeResponse.ProtoReflect.Descriptor instead.
func (*ArchiveRecipeResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{270}
}

// ArchiveRecipePrepTask
type ArchiveRecipePrepTaskRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	RecipeID         string                 `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipePrepTaskID string                 `protobuf:"bytes,2,opt,name=recipePrepTaskID,proto3" json:"recipePrepTaskID,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ArchiveRecipePrepTaskRequest) Reset() {
	*x = ArchiveRecipePrepTaskRequest{}
	mi := &file_messages_eating_proto_msgTypes[271]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipePrepTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipePrepTaskRequest) ProtoMessage() {}

func (x *ArchiveRecipePrepTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[271]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipePrepTaskRequest.ProtoReflect.Descriptor instead.
func (*ArchiveRecipePrepTaskRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{271}
}

func (x *ArchiveRecipePrepTaskRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *ArchiveRecipePrepTaskRequest) GetRecipePrepTaskID() string {
	if x != nil {
		return x.RecipePrepTaskID
	}
	return ""
}

type ArchiveRecipePrepTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveRecipePrepTaskResponse) Reset() {
	*x = ArchiveRecipePrepTaskResponse{}
	mi := &file_messages_eating_proto_msgTypes[272]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipePrepTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipePrepTaskResponse) ProtoMessage() {}

func (x *ArchiveRecipePrepTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[272]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipePrepTaskResponse.ProtoReflect.Descriptor instead.
func (*ArchiveRecipePrepTaskResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{272}
}

// ArchiveRecipeRating
type ArchiveRecipeRatingRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RecipeID       string                 `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeRatingID string                 `protobuf:"bytes,2,opt,name=recipeRatingID,proto3" json:"recipeRatingID,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ArchiveRecipeRatingRequest) Reset() {
	*x = ArchiveRecipeRatingRequest{}
	mi := &file_messages_eating_proto_msgTypes[273]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipeRatingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipeRatingRequest) ProtoMessage() {}

func (x *ArchiveRecipeRatingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[273]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipeRatingRequest.ProtoReflect.Descriptor instead.
func (*ArchiveRecipeRatingRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{273}
}

func (x *ArchiveRecipeRatingRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *ArchiveRecipeRatingRequest) GetRecipeRatingID() string {
	if x != nil {
		return x.RecipeRatingID
	}
	return ""
}

type ArchiveRecipeRatingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveRecipeRatingResponse) Reset() {
	*x = ArchiveRecipeRatingResponse{}
	mi := &file_messages_eating_proto_msgTypes[274]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipeRatingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipeRatingResponse) ProtoMessage() {}

func (x *ArchiveRecipeRatingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[274]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipeRatingResponse.ProtoReflect.Descriptor instead.
func (*ArchiveRecipeRatingResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{274}
}

// ArchiveRecipeStep
type ArchiveRecipeStepRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecipeID      string                 `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID  string                 `protobuf:"bytes,2,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveRecipeStepRequest) Reset() {
	*x = ArchiveRecipeStepRequest{}
	mi := &file_messages_eating_proto_msgTypes[275]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipeStepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipeStepRequest) ProtoMessage() {}

func (x *ArchiveRecipeStepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[275]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipeStepRequest.ProtoReflect.Descriptor instead.
func (*ArchiveRecipeStepRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{275}
}

func (x *ArchiveRecipeStepRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *ArchiveRecipeStepRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

type ArchiveRecipeStepResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveRecipeStepResponse) Reset() {
	*x = ArchiveRecipeStepResponse{}
	mi := &file_messages_eating_proto_msgTypes[276]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipeStepResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipeStepResponse) ProtoMessage() {}

func (x *ArchiveRecipeStepResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[276]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipeStepResponse.ProtoReflect.Descriptor instead.
func (*ArchiveRecipeStepResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{276}
}

// ArchiveRecipeStepCompletionCondition
type ArchiveRecipeStepCompletionConditionRequest struct {
	state                           protoimpl.MessageState `protogen:"open.v1"`
	RecipeID                        string                 `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID                    string                 `protobuf:"bytes,2,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	RecipeStepCompletionConditionID string                 `protobuf:"bytes,3,opt,name=recipeStepCompletionConditionID,proto3" json:"recipeStepCompletionConditionID,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *ArchiveRecipeStepCompletionConditionRequest) Reset() {
	*x = ArchiveRecipeStepCompletionConditionRequest{}
	mi := &file_messages_eating_proto_msgTypes[277]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipeStepCompletionConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipeStepCompletionConditionRequest) ProtoMessage() {}

func (x *ArchiveRecipeStepCompletionConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[277]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipeStepCompletionConditionRequest.ProtoReflect.Descriptor instead.
func (*ArchiveRecipeStepCompletionConditionRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{277}
}

func (x *ArchiveRecipeStepCompletionConditionRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *ArchiveRecipeStepCompletionConditionRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *ArchiveRecipeStepCompletionConditionRequest) GetRecipeStepCompletionConditionID() string {
	if x != nil {
		return x.RecipeStepCompletionConditionID
	}
	return ""
}

type ArchiveRecipeStepCompletionConditionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveRecipeStepCompletionConditionResponse) Reset() {
	*x = ArchiveRecipeStepCompletionConditionResponse{}
	mi := &file_messages_eating_proto_msgTypes[278]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipeStepCompletionConditionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipeStepCompletionConditionResponse) ProtoMessage() {}

func (x *ArchiveRecipeStepCompletionConditionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[278]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipeStepCompletionConditionResponse.ProtoReflect.Descriptor instead.
func (*ArchiveRecipeStepCompletionConditionResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{278}
}

// ArchiveRecipeStepIngredient
type ArchiveRecipeStepIngredientRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	RecipeID               string                 `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID           string                 `protobuf:"bytes,2,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	RecipeStepIngredientID string                 `protobuf:"bytes,3,opt,name=recipeStepIngredientID,proto3" json:"recipeStepIngredientID,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ArchiveRecipeStepIngredientRequest) Reset() {
	*x = ArchiveRecipeStepIngredientRequest{}
	mi := &file_messages_eating_proto_msgTypes[279]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipeStepIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipeStepIngredientRequest) ProtoMessage() {}

func (x *ArchiveRecipeStepIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[279]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipeStepIngredientRequest.ProtoReflect.Descriptor instead.
func (*ArchiveRecipeStepIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{279}
}

func (x *ArchiveRecipeStepIngredientRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *ArchiveRecipeStepIngredientRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *ArchiveRecipeStepIngredientRequest) GetRecipeStepIngredientID() string {
	if x != nil {
		return x.RecipeStepIngredientID
	}
	return ""
}

type ArchiveRecipeStepIngredientResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveRecipeStepIngredientResponse) Reset() {
	*x = ArchiveRecipeStepIngredientResponse{}
	mi := &file_messages_eating_proto_msgTypes[280]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipeStepIngredientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipeStepIngredientResponse) ProtoMessage() {}

func (x *ArchiveRecipeStepIngredientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[280]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipeStepIngredientResponse.ProtoReflect.Descriptor instead.
func (*ArchiveRecipeStepIngredientResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{280}
}

// ArchiveRecipeStepInstrument
type ArchiveRecipeStepInstrumentRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	RecipeID               string                 `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID           string                 `protobuf:"bytes,2,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	RecipeStepInstrumentID string                 `protobuf:"bytes,3,opt,name=recipeStepInstrumentID,proto3" json:"recipeStepInstrumentID,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ArchiveRecipeStepInstrumentRequest) Reset() {
	*x = ArchiveRecipeStepInstrumentRequest{}
	mi := &file_messages_eating_proto_msgTypes[281]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipeStepInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipeStepInstrumentRequest) ProtoMessage() {}

func (x *ArchiveRecipeStepInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[281]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipeStepInstrumentRequest.ProtoReflect.Descriptor instead.
func (*ArchiveRecipeStepInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{281}
}

func (x *ArchiveRecipeStepInstrumentRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *ArchiveRecipeStepInstrumentRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *ArchiveRecipeStepInstrumentRequest) GetRecipeStepInstrumentID() string {
	if x != nil {
		return x.RecipeStepInstrumentID
	}
	return ""
}

type ArchiveRecipeStepInstrumentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveRecipeStepInstrumentResponse) Reset() {
	*x = ArchiveRecipeStepInstrumentResponse{}
	mi := &file_messages_eating_proto_msgTypes[282]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipeStepInstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipeStepInstrumentResponse) ProtoMessage() {}

func (x *ArchiveRecipeStepInstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[282]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipeStepInstrumentResponse.ProtoReflect.Descriptor instead.
func (*ArchiveRecipeStepInstrumentResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{282}
}

// ArchiveRecipeStepProduct
type ArchiveRecipeStepProductRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	RecipeID            string                 `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID        string                 `protobuf:"bytes,2,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	RecipeStepProductID string                 `protobuf:"bytes,3,opt,name=recipeStepProductID,proto3" json:"recipeStepProductID,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ArchiveRecipeStepProductRequest) Reset() {
	*x = ArchiveRecipeStepProductRequest{}
	mi := &file_messages_eating_proto_msgTypes[283]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipeStepProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipeStepProductRequest) ProtoMessage() {}

func (x *ArchiveRecipeStepProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[283]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipeStepProductRequest.ProtoReflect.Descriptor instead.
func (*ArchiveRecipeStepProductRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{283}
}

func (x *ArchiveRecipeStepProductRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *ArchiveRecipeStepProductRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *ArchiveRecipeStepProductRequest) GetRecipeStepProductID() string {
	if x != nil {
		return x.RecipeStepProductID
	}
	return ""
}

type ArchiveRecipeStepProductResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveRecipeStepProductResponse) Reset() {
	*x = ArchiveRecipeStepProductResponse{}
	mi := &file_messages_eating_proto_msgTypes[284]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipeStepProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipeStepProductResponse) ProtoMessage() {}

func (x *ArchiveRecipeStepProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[284]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipeStepProductResponse.ProtoReflect.Descriptor instead.
func (*ArchiveRecipeStepProductResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{284}
}

// ArchiveRecipeStepVessel
type ArchiveRecipeStepVesselRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	RecipeID           string                 `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID       string                 `protobuf:"bytes,2,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	RecipeStepVesselID string                 `protobuf:"bytes,3,opt,name=recipeStepVesselID,proto3" json:"recipeStepVesselID,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ArchiveRecipeStepVesselRequest) Reset() {
	*x = ArchiveRecipeStepVesselRequest{}
	mi := &file_messages_eating_proto_msgTypes[285]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipeStepVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipeStepVesselRequest) ProtoMessage() {}

func (x *ArchiveRecipeStepVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[285]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipeStepVesselRequest.ProtoReflect.Descriptor instead.
func (*ArchiveRecipeStepVesselRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{285}
}

func (x *ArchiveRecipeStepVesselRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *ArchiveRecipeStepVesselRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *ArchiveRecipeStepVesselRequest) GetRecipeStepVesselID() string {
	if x != nil {
		return x.RecipeStepVesselID
	}
	return ""
}

type ArchiveRecipeStepVesselResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveRecipeStepVesselResponse) Reset() {
	*x = ArchiveRecipeStepVesselResponse{}
	mi := &file_messages_eating_proto_msgTypes[286]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipeStepVesselResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipeStepVesselResponse) ProtoMessage() {}

func (x *ArchiveRecipeStepVesselResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[286]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipeStepVesselResponse.ProtoReflect.Descriptor instead.
func (*ArchiveRecipeStepVesselResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{286}
}

// CloneRecipe
type CloneRecipeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecipeID      string                 `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloneRecipeRequest) Reset() {
	*x = CloneRecipeRequest{}
	mi := &file_messages_eating_proto_msgTypes[287]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloneRecipeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneRecipeRequest) ProtoMessage() {}

func (x *CloneRecipeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[287]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneRecipeRequest.ProtoReflect.Descriptor instead.
func (*CloneRecipeRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{287}
}

func (x *CloneRecipeRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

type CloneRecipeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        *Recipe                `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloneRecipeResponse) Reset() {
	*x = CloneRecipeResponse{}
	mi := &file_messages_eating_proto_msgTypes[288]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloneRecipeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneRecipeResponse) ProtoMessage() {}

func (x *CloneRecipeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[288]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneRecipeResponse.ProtoReflect.Descriptor instead.
func (*CloneRecipeResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{288}
}

func (x *CloneRecipeResponse) GetResult() *Recipe {
	if x != nil {
		return x.Result
	}
	return nil
}

// CreateRecipe
type CreateRecipeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipeRequest) Reset() {
	*x = CreateRecipeRequest{}
	mi := &file_messages_eating_proto_msgTypes[289]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeRequest) ProtoMessage() {}

func (x *CreateRecipeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[289]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeRequest.ProtoReflect.Descriptor instead.
func (*CreateRecipeRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{289}
}

type CreateRecipeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipeResponse) Reset() {
	*x = CreateRecipeResponse{}
	mi := &file_messages_eating_proto_msgTypes[290]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeResponse) ProtoMessage() {}

func (x *CreateRecipeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[290]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeResponse.ProtoReflect.Descriptor instead.
func (*CreateRecipeResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{290}
}

// CreateRecipePrepTask
type CreateRecipePrepTaskRequest struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	RecipeID      string                              `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	Input         *RecipePrepTaskCreationRequestInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipePrepTaskRequest) Reset() {
	*x = CreateRecipePrepTaskRequest{}
	mi := &file_messages_eating_proto_msgTypes[291]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipePrepTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipePrepTaskRequest) ProtoMessage() {}

func (x *CreateRecipePrepTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[291]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipePrepTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateRecipePrepTaskRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{291}
}

func (x *CreateRecipePrepTaskRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *CreateRecipePrepTaskRequest) GetInput() *RecipePrepTaskCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type CreateRecipePrepTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipePrepTaskResponse) Reset() {
	*x = CreateRecipePrepTaskResponse{}
	mi := &file_messages_eating_proto_msgTypes[292]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipePrepTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipePrepTaskResponse) ProtoMessage() {}

func (x *CreateRecipePrepTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[292]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipePrepTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateRecipePrepTaskResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{292}
}

// CreateRecipeRating
type CreateRecipeRatingRequest struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	RecipeID      string                            `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	Input         *RecipeRatingCreationRequestInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipeRatingRequest) Reset() {
	*x = CreateRecipeRatingRequest{}
	mi := &file_messages_eating_proto_msgTypes[293]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipeRatingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeRatingRequest) ProtoMessage() {}

func (x *CreateRecipeRatingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[293]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeRatingRequest.ProtoReflect.Descriptor instead.
func (*CreateRecipeRatingRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{293}
}

func (x *CreateRecipeRatingRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *CreateRecipeRatingRequest) GetInput() *RecipeRatingCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type CreateRecipeRatingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipeRatingResponse) Reset() {
	*x = CreateRecipeRatingResponse{}
	mi := &file_messages_eating_proto_msgTypes[294]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipeRatingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeRatingResponse) ProtoMessage() {}

func (x *CreateRecipeRatingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[294]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeRatingResponse.ProtoReflect.Descriptor instead.
func (*CreateRecipeRatingResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{294}
}

// CreateRecipeStep
type CreateRecipeStepRequest struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	RecipeID      string                          `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	Input         *RecipeStepCreationRequestInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipeStepRequest) Reset() {
	*x = CreateRecipeStepRequest{}
	mi := &file_messages_eating_proto_msgTypes[295]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipeStepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeStepRequest) ProtoMessage() {}

func (x *CreateRecipeStepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[295]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeStepRequest.ProtoReflect.Descriptor instead.
func (*CreateRecipeStepRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{295}
}

func (x *CreateRecipeStepRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *CreateRecipeStepRequest) GetInput() *RecipeStepCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type CreateRecipeStepResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipeStepResponse) Reset() {
	*x = CreateRecipeStepResponse{}
	mi := &file_messages_eating_proto_msgTypes[296]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipeStepResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeStepResponse) ProtoMessage() {}

func (x *CreateRecipeStepResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[296]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeStepResponse.ProtoReflect.Descriptor instead.
func (*CreateRecipeStepResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{296}
}

// CreateRecipeStepCompletionCondition
type CreateRecipeStepCompletionConditionRequest struct {
	state         protoimpl.MessageState                                              `protogen:"open.v1"`
	RecipeID      string                                                              `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID  string                                                              `protobuf:"bytes,2,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	Input         *RecipeStepCompletionConditionForExistingRecipeCreationRequestInput `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipeStepCompletionConditionRequest) Reset() {
	*x = CreateRecipeStepCompletionConditionRequest{}
	mi := &file_messages_eating_proto_msgTypes[297]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipeStepCompletionConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeStepCompletionConditionRequest) ProtoMessage() {}

func (x *CreateRecipeStepCompletionConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[297]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeStepCompletionConditionRequest.ProtoReflect.Descriptor instead.
func (*CreateRecipeStepCompletionConditionRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{297}
}

func (x *CreateRecipeStepCompletionConditionRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *CreateRecipeStepCompletionConditionRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *CreateRecipeStepCompletionConditionRequest) GetInput() *RecipeStepCompletionConditionForExistingRecipeCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type CreateRecipeStepCompletionConditionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipeStepCompletionConditionResponse) Reset() {
	*x = CreateRecipeStepCompletionConditionResponse{}
	mi := &file_messages_eating_proto_msgTypes[298]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipeStepCompletionConditionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeStepCompletionConditionResponse) ProtoMessage() {}

func (x *CreateRecipeStepCompletionConditionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[298]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeStepCompletionConditionResponse.ProtoReflect.Descriptor instead.
func (*CreateRecipeStepCompletionConditionResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{298}
}

// CreateRecipeStepIngredient
type CreateRecipeStepIngredientRequest struct {
	state         protoimpl.MessageState                    `protogen:"open.v1"`
	RecipeID      string                                    `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID  string                                    `protobuf:"bytes,2,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	Input         *RecipeStepIngredientCreationRequestInput `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipeStepIngredientRequest) Reset() {
	*x = CreateRecipeStepIngredientRequest{}
	mi := &file_messages_eating_proto_msgTypes[299]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipeStepIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeStepIngredientRequest) ProtoMessage() {}

func (x *CreateRecipeStepIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[299]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeStepIngredientRequest.ProtoReflect.Descriptor instead.
func (*CreateRecipeStepIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{299}
}

func (x *CreateRecipeStepIngredientRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *CreateRecipeStepIngredientRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *CreateRecipeStepIngredientRequest) GetInput() *RecipeStepIngredientCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type CreateRecipeStepIngredientResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipeStepIngredientResponse) Reset() {
	*x = CreateRecipeStepIngredientResponse{}
	mi := &file_messages_eating_proto_msgTypes[300]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipeStepIngredientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeStepIngredientResponse) ProtoMessage() {}

func (x *CreateRecipeStepIngredientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[300]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeStepIngredientResponse.ProtoReflect.Descriptor instead.
func (*CreateRecipeStepIngredientResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{300}
}

// CreateRecipeStepInstrument
type CreateRecipeStepInstrumentRequest struct {
	state         protoimpl.MessageState                    `protogen:"open.v1"`
	RecipeID      string                                    `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID  string                                    `protobuf:"bytes,2,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	Input         *RecipeStepInstrumentCreationRequestInput `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipeStepInstrumentRequest) Reset() {
	*x = CreateRecipeStepInstrumentRequest{}
	mi := &file_messages_eating_proto_msgTypes[301]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipeStepInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeStepInstrumentRequest) ProtoMessage() {}

func (x *CreateRecipeStepInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[301]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeStepInstrumentRequest.ProtoReflect.Descriptor instead.
func (*CreateRecipeStepInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{301}
}

func (x *CreateRecipeStepInstrumentRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *CreateRecipeStepInstrumentRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *CreateRecipeStepInstrumentRequest) GetInput() *RecipeStepInstrumentCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type CreateRecipeStepInstrumentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipeStepInstrumentResponse) Reset() {
	*x = CreateRecipeStepInstrumentResponse{}
	mi := &file_messages_eating_proto_msgTypes[302]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipeStepInstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeStepInstrumentResponse) ProtoMessage() {}

func (x *CreateRecipeStepInstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[302]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeStepInstrumentResponse.ProtoReflect.Descriptor instead.
func (*CreateRecipeStepInstrumentResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{302}
}

// CreateRecipeStepProduct
type CreateRecipeStepProductRequest struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	RecipeID      string                                 `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID  string                                 `protobuf:"bytes,2,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	Input         *RecipeStepProductCreationRequestInput `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipeStepProductRequest) Reset() {
	*x = CreateRecipeStepProductRequest{}
	mi := &file_messages_eating_proto_msgTypes[303]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipeStepProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeStepProductRequest) ProtoMessage() {}

func (x *CreateRecipeStepProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[303]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeStepProductRequest.ProtoReflect.Descriptor instead.
func (*CreateRecipeStepProductRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{303}
}

func (x *CreateRecipeStepProductRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *CreateRecipeStepProductRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *CreateRecipeStepProductRequest) GetInput() *RecipeStepProductCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type CreateRecipeStepProductResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipeStepProductResponse) Reset() {
	*x = CreateRecipeStepProductResponse{}
	mi := &file_messages_eating_proto_msgTypes[304]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipeStepProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeStepProductResponse) ProtoMessage() {}

func (x *CreateRecipeStepProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[304]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeStepProductResponse.ProtoReflect.Descriptor instead.
func (*CreateRecipeStepProductResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{304}
}

// CreateRecipeStepVessel
type CreateRecipeStepVesselRequest struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	RecipeID      string                                `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID  string                                `protobuf:"bytes,2,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	Input         *RecipeStepVesselCreationRequestInput `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipeStepVesselRequest) Reset() {
	*x = CreateRecipeStepVesselRequest{}
	mi := &file_messages_eating_proto_msgTypes[305]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipeStepVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeStepVesselRequest) ProtoMessage() {}

func (x *CreateRecipeStepVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[305]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeStepVesselRequest.ProtoReflect.Descriptor instead.
func (*CreateRecipeStepVesselRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{305}
}

func (x *CreateRecipeStepVesselRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *CreateRecipeStepVesselRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *CreateRecipeStepVesselRequest) GetInput() *RecipeStepVesselCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type CreateRecipeStepVesselResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipeStepVesselResponse) Reset() {
	*x = CreateRecipeStepVesselResponse{}
	mi := &file_messages_eating_proto_msgTypes[306]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipeStepVesselResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeStepVesselResponse) ProtoMessage() {}

func (x *CreateRecipeStepVesselResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[306]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeStepVesselResponse.ProtoReflect.Descriptor instead.
func (*CreateRecipeStepVesselResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{306}
}

// GetMermaidDiagramForRecipe
type GetMermaidDiagramForRecipeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecipeID      string                 `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMermaidDiagramForRecipeRequest) Reset() {
	*x = GetMermaidDiagramForRecipeRequest{}
	mi := &file_messages_eating_proto_msgTypes[307]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMermaidDiagramForRecipeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMermaidDiagramForRecipeRequest) ProtoMessage() {}

func (x *GetMermaidDiagramForRecipeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[307]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMermaidDiagramForRecipeRequest.ProtoReflect.Descriptor instead.
func (*GetMermaidDiagramForRecipeRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{307}
}

func (x *GetMermaidDiagramForRecipeRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

type GetMermaidDiagramForRecipeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      string                 `protobuf:"bytes,2,opt,name=Response,proto3" json:"Response,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMermaidDiagramForRecipeResponse) Reset() {
	*x = GetMermaidDiagramForRecipeResponse{}
	mi := &file_messages_eating_proto_msgTypes[308]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMermaidDiagramForRecipeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMermaidDiagramForRecipeResponse) ProtoMessage() {}

func (x *GetMermaidDiagramForRecipeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[308]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMermaidDiagramForRecipeResponse.ProtoReflect.Descriptor instead.
func (*GetMermaidDiagramForRecipeResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{308}
}

func (x *GetMermaidDiagramForRecipeResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

// GetRecipe
type GetRecipeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecipeID      string                 `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeRequest) Reset() {
	*x = GetRecipeRequest{}
	mi := &file_messages_eating_proto_msgTypes[309]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeRequest) ProtoMessage() {}

func (x *GetRecipeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[309]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{309}
}

func (x *GetRecipeRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

type GetRecipeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeResponse) Reset() {
	*x = GetRecipeResponse{}
	mi := &file_messages_eating_proto_msgTypes[310]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeResponse) ProtoMessage() {}

func (x *GetRecipeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[310]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeResponse.ProtoReflect.Descriptor instead.
func (*GetRecipeResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{310}
}

// GetRecipeMealPlanTasks
type GetRecipeMealPlanTasksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecipeID      string                 `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeMealPlanTasksRequest) Reset() {
	*x = GetRecipeMealPlanTasksRequest{}
	mi := &file_messages_eating_proto_msgTypes[311]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeMealPlanTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeMealPlanTasksRequest) ProtoMessage() {}

func (x *GetRecipeMealPlanTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[311]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeMealPlanTasksRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeMealPlanTasksRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{311}
}

func (x *GetRecipeMealPlanTasksRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

type GetRecipeMealPlanTasksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeMealPlanTasksResponse) Reset() {
	*x = GetRecipeMealPlanTasksResponse{}
	mi := &file_messages_eating_proto_msgTypes[312]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeMealPlanTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeMealPlanTasksResponse) ProtoMessage() {}

func (x *GetRecipeMealPlanTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[312]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeMealPlanTasksResponse.ProtoReflect.Descriptor instead.
func (*GetRecipeMealPlanTasksResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{312}
}

// GetRecipePrepTask
type GetRecipePrepTaskRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	RecipeID         string                 `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipePrepTaskID string                 `protobuf:"bytes,2,opt,name=recipePrepTaskID,proto3" json:"recipePrepTaskID,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetRecipePrepTaskRequest) Reset() {
	*x = GetRecipePrepTaskRequest{}
	mi := &file_messages_eating_proto_msgTypes[313]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipePrepTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipePrepTaskRequest) ProtoMessage() {}

func (x *GetRecipePrepTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[313]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipePrepTaskRequest.ProtoReflect.Descriptor instead.
func (*GetRecipePrepTaskRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{313}
}

func (x *GetRecipePrepTaskRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *GetRecipePrepTaskRequest) GetRecipePrepTaskID() string {
	if x != nil {
		return x.RecipePrepTaskID
	}
	return ""
}

type GetRecipePrepTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipePrepTaskResponse) Reset() {
	*x = GetRecipePrepTaskResponse{}
	mi := &file_messages_eating_proto_msgTypes[314]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipePrepTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipePrepTaskResponse) ProtoMessage() {}

func (x *GetRecipePrepTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[314]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipePrepTaskResponse.ProtoReflect.Descriptor instead.
func (*GetRecipePrepTaskResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{314}
}

// GetRecipePrepTasks
type GetRecipePrepTasksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	RecipeID      string                 `protobuf:"bytes,2,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipePrepTasksRequest) Reset() {
	*x = GetRecipePrepTasksRequest{}
	mi := &file_messages_eating_proto_msgTypes[315]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipePrepTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipePrepTasksRequest) ProtoMessage() {}

func (x *GetRecipePrepTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[315]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipePrepTasksRequest.ProtoReflect.Descriptor instead.
func (*GetRecipePrepTasksRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{315}
}

func (x *GetRecipePrepTasksRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetRecipePrepTasksRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

type GetRecipePrepTasksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*RecipePrepTask      `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipePrepTasksResponse) Reset() {
	*x = GetRecipePrepTasksResponse{}
	mi := &file_messages_eating_proto_msgTypes[316]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipePrepTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipePrepTasksResponse) ProtoMessage() {}

func (x *GetRecipePrepTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[316]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipePrepTasksResponse.ProtoReflect.Descriptor instead.
func (*GetRecipePrepTasksResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{316}
}

func (x *GetRecipePrepTasksResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetRecipePrepTasksResponse) GetResults() []*RecipePrepTask {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetRecipeRating
type GetRecipeRatingRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RecipeID       string                 `protobuf:"bytes,1,opt,name=RecipeID,proto3" json:"RecipeID,omitempty"`
	RecipeRatingID string                 `protobuf:"bytes,2,opt,name=RecipeRatingID,proto3" json:"RecipeRatingID,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetRecipeRatingRequest) Reset() {
	*x = GetRecipeRatingRequest{}
	mi := &file_messages_eating_proto_msgTypes[317]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeRatingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeRatingRequest) ProtoMessage() {}

func (x *GetRecipeRatingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[317]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeRatingRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeRatingRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{317}
}

func (x *GetRecipeRatingRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *GetRecipeRatingRequest) GetRecipeRatingID() string {
	if x != nil {
		return x.RecipeRatingID
	}
	return ""
}

type GetRecipeRatingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeRatingResponse) Reset() {
	*x = GetRecipeRatingResponse{}
	mi := &file_messages_eating_proto_msgTypes[318]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeRatingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeRatingResponse) ProtoMessage() {}

func (x *GetRecipeRatingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[318]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeRatingResponse.ProtoReflect.Descriptor instead.
func (*GetRecipeRatingResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{318}
}

// GetRecipeRatingsForRecipe
type GetRecipeRatingsForRecipeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	RecipeID      string                 `protobuf:"bytes,2,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeRatingsForRecipeRequest) Reset() {
	*x = GetRecipeRatingsForRecipeRequest{}
	mi := &file_messages_eating_proto_msgTypes[319]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeRatingsForRecipeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeRatingsForRecipeRequest) ProtoMessage() {}

func (x *GetRecipeRatingsForRecipeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[319]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeRatingsForRecipeRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeRatingsForRecipeRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{319}
}

func (x *GetRecipeRatingsForRecipeRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetRecipeRatingsForRecipeRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

type GetRecipeRatingsForRecipeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*RecipeRating        `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeRatingsForRecipeResponse) Reset() {
	*x = GetRecipeRatingsForRecipeResponse{}
	mi := &file_messages_eating_proto_msgTypes[320]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeRatingsForRecipeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeRatingsForRecipeResponse) ProtoMessage() {}

func (x *GetRecipeRatingsForRecipeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[320]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeRatingsForRecipeResponse.ProtoReflect.Descriptor instead.
func (*GetRecipeRatingsForRecipeResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{320}
}

func (x *GetRecipeRatingsForRecipeResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetRecipeRatingsForRecipeResponse) GetResults() []*RecipeRating {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetRecipeStep
type GetRecipeStepRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecipeID      string                 `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID  string                 `protobuf:"bytes,2,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeStepRequest) Reset() {
	*x = GetRecipeStepRequest{}
	mi := &file_messages_eating_proto_msgTypes[321]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepRequest) ProtoMessage() {}

func (x *GetRecipeStepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[321]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeStepRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{321}
}

func (x *GetRecipeStepRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *GetRecipeStepRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

type GetRecipeStepResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeStepResponse) Reset() {
	*x = GetRecipeStepResponse{}
	mi := &file_messages_eating_proto_msgTypes[322]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepResponse) ProtoMessage() {}

func (x *GetRecipeStepResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[322]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepResponse.ProtoReflect.Descriptor instead.
func (*GetRecipeStepResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{322}
}

// GetRecipeStepCompletionCondition
type GetRecipeStepCompletionConditionRequest struct {
	state                           protoimpl.MessageState `protogen:"open.v1"`
	RecipeID                        string                 `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID                    string                 `protobuf:"bytes,2,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	RecipeStepCompletionConditionID string                 `protobuf:"bytes,3,opt,name=recipeStepCompletionConditionID,proto3" json:"recipeStepCompletionConditionID,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *GetRecipeStepCompletionConditionRequest) Reset() {
	*x = GetRecipeStepCompletionConditionRequest{}
	mi := &file_messages_eating_proto_msgTypes[323]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepCompletionConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepCompletionConditionRequest) ProtoMessage() {}

func (x *GetRecipeStepCompletionConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[323]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepCompletionConditionRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeStepCompletionConditionRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{323}
}

func (x *GetRecipeStepCompletionConditionRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *GetRecipeStepCompletionConditionRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *GetRecipeStepCompletionConditionRequest) GetRecipeStepCompletionConditionID() string {
	if x != nil {
		return x.RecipeStepCompletionConditionID
	}
	return ""
}

type GetRecipeStepCompletionConditionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeStepCompletionConditionResponse) Reset() {
	*x = GetRecipeStepCompletionConditionResponse{}
	mi := &file_messages_eating_proto_msgTypes[324]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepCompletionConditionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepCompletionConditionResponse) ProtoMessage() {}

func (x *GetRecipeStepCompletionConditionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[324]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepCompletionConditionResponse.ProtoReflect.Descriptor instead.
func (*GetRecipeStepCompletionConditionResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{324}
}

// GetRecipeStepCompletionConditions
type GetRecipeStepCompletionConditionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	RecipeID      string                 `protobuf:"bytes,2,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID  string                 `protobuf:"bytes,3,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeStepCompletionConditionsRequest) Reset() {
	*x = GetRecipeStepCompletionConditionsRequest{}
	mi := &file_messages_eating_proto_msgTypes[325]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepCompletionConditionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepCompletionConditionsRequest) ProtoMessage() {}

func (x *GetRecipeStepCompletionConditionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[325]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepCompletionConditionsRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeStepCompletionConditionsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{325}
}

func (x *GetRecipeStepCompletionConditionsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetRecipeStepCompletionConditionsRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *GetRecipeStepCompletionConditionsRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

type GetRecipeStepCompletionConditionsResponse struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Filter        *QueryFilter                     `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*RecipeStepCompletionCondition `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeStepCompletionConditionsResponse) Reset() {
	*x = GetRecipeStepCompletionConditionsResponse{}
	mi := &file_messages_eating_proto_msgTypes[326]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepCompletionConditionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepCompletionConditionsResponse) ProtoMessage() {}

func (x *GetRecipeStepCompletionConditionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[326]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepCompletionConditionsResponse.ProtoReflect.Descriptor instead.
func (*GetRecipeStepCompletionConditionsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{326}
}

func (x *GetRecipeStepCompletionConditionsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetRecipeStepCompletionConditionsResponse) GetResults() []*RecipeStepCompletionCondition {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetRecipeStepIngredient
type GetRecipeStepIngredientRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	RecipeID               string                 `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID           string                 `protobuf:"bytes,2,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	RecipeStepIngredientID string                 `protobuf:"bytes,3,opt,name=recipeStepIngredientID,proto3" json:"recipeStepIngredientID,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetRecipeStepIngredientRequest) Reset() {
	*x = GetRecipeStepIngredientRequest{}
	mi := &file_messages_eating_proto_msgTypes[327]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepIngredientRequest) ProtoMessage() {}

func (x *GetRecipeStepIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[327]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepIngredientRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeStepIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{327}
}

func (x *GetRecipeStepIngredientRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *GetRecipeStepIngredientRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *GetRecipeStepIngredientRequest) GetRecipeStepIngredientID() string {
	if x != nil {
		return x.RecipeStepIngredientID
	}
	return ""
}

type GetRecipeStepIngredientResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeStepIngredientResponse) Reset() {
	*x = GetRecipeStepIngredientResponse{}
	mi := &file_messages_eating_proto_msgTypes[328]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepIngredientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepIngredientResponse) ProtoMessage() {}

func (x *GetRecipeStepIngredientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[328]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepIngredientResponse.ProtoReflect.Descriptor instead.
func (*GetRecipeStepIngredientResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{328}
}

// GetRecipeStepIngredients
type GetRecipeStepIngredientsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	RecipeID      string                 `protobuf:"bytes,2,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID  string                 `protobuf:"bytes,3,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeStepIngredientsRequest) Reset() {
	*x = GetRecipeStepIngredientsRequest{}
	mi := &file_messages_eating_proto_msgTypes[329]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepIngredientsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepIngredientsRequest) ProtoMessage() {}

func (x *GetRecipeStepIngredientsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[329]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepIngredientsRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeStepIngredientsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{329}
}

func (x *GetRecipeStepIngredientsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetRecipeStepIngredientsRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *GetRecipeStepIngredientsRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

type GetRecipeStepIngredientsResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Filter        *QueryFilter            `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*RecipeStepIngredient `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeStepIngredientsResponse) Reset() {
	*x = GetRecipeStepIngredientsResponse{}
	mi := &file_messages_eating_proto_msgTypes[330]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepIngredientsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepIngredientsResponse) ProtoMessage() {}

func (x *GetRecipeStepIngredientsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[330]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepIngredientsResponse.ProtoReflect.Descriptor instead.
func (*GetRecipeStepIngredientsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{330}
}

func (x *GetRecipeStepIngredientsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetRecipeStepIngredientsResponse) GetResults() []*RecipeStepIngredient {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetRecipeStepInstrument
type GetRecipeStepInstrumentRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	RecipeID               string                 `protobuf:"bytes,1,opt,name=RecipeID,proto3" json:"RecipeID,omitempty"`
	RecipeStepID           string                 `protobuf:"bytes,2,opt,name=RecipeStepID,proto3" json:"RecipeStepID,omitempty"`
	RecipeStepInstrumentID string                 `protobuf:"bytes,3,opt,name=RecipeStepInstrumentID,proto3" json:"RecipeStepInstrumentID,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetRecipeStepInstrumentRequest) Reset() {
	*x = GetRecipeStepInstrumentRequest{}
	mi := &file_messages_eating_proto_msgTypes[331]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepInstrumentRequest) ProtoMessage() {}

func (x *GetRecipeStepInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[331]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepInstrumentRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeStepInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{331}
}

func (x *GetRecipeStepInstrumentRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *GetRecipeStepInstrumentRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *GetRecipeStepInstrumentRequest) GetRecipeStepInstrumentID() string {
	if x != nil {
		return x.RecipeStepInstrumentID
	}
	return ""
}

type GetRecipeStepInstrumentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeStepInstrumentResponse) Reset() {
	*x = GetRecipeStepInstrumentResponse{}
	mi := &file_messages_eating_proto_msgTypes[332]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepInstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepInstrumentResponse) ProtoMessage() {}

func (x *GetRecipeStepInstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[332]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepInstrumentResponse.ProtoReflect.Descriptor instead.
func (*GetRecipeStepInstrumentResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{332}
}

// GetRecipeStepInstruments
type GetRecipeStepInstrumentsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	RecipeID      string                 `protobuf:"bytes,2,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID  string                 `protobuf:"bytes,3,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeStepInstrumentsRequest) Reset() {
	*x = GetRecipeStepInstrumentsRequest{}
	mi := &file_messages_eating_proto_msgTypes[333]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepInstrumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepInstrumentsRequest) ProtoMessage() {}

func (x *GetRecipeStepInstrumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[333]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepInstrumentsRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeStepInstrumentsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{333}
}

func (x *GetRecipeStepInstrumentsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetRecipeStepInstrumentsRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *GetRecipeStepInstrumentsRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

type GetRecipeStepInstrumentsResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Filter        *QueryFilter            `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*RecipeStepInstrument `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeStepInstrumentsResponse) Reset() {
	*x = GetRecipeStepInstrumentsResponse{}
	mi := &file_messages_eating_proto_msgTypes[334]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepInstrumentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepInstrumentsResponse) ProtoMessage() {}

func (x *GetRecipeStepInstrumentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[334]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepInstrumentsResponse.ProtoReflect.Descriptor instead.
func (*GetRecipeStepInstrumentsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{334}
}

func (x *GetRecipeStepInstrumentsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetRecipeStepInstrumentsResponse) GetResults() []*RecipeStepInstrument {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetRecipeStepProduct
type GetRecipeStepProductRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	RecipeID            string                 `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID        string                 `protobuf:"bytes,2,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	RecipeStepProductID string                 `protobuf:"bytes,3,opt,name=recipeStepProductID,proto3" json:"recipeStepProductID,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetRecipeStepProductRequest) Reset() {
	*x = GetRecipeStepProductRequest{}
	mi := &file_messages_eating_proto_msgTypes[335]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepProductRequest) ProtoMessage() {}

func (x *GetRecipeStepProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[335]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepProductRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeStepProductRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{335}
}

func (x *GetRecipeStepProductRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *GetRecipeStepProductRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *GetRecipeStepProductRequest) GetRecipeStepProductID() string {
	if x != nil {
		return x.RecipeStepProductID
	}
	return ""
}

type GetRecipeStepProductResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeStepProductResponse) Reset() {
	*x = GetRecipeStepProductResponse{}
	mi := &file_messages_eating_proto_msgTypes[336]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepProductResponse) ProtoMessage() {}

func (x *GetRecipeStepProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[336]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepProductResponse.ProtoReflect.Descriptor instead.
func (*GetRecipeStepProductResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{336}
}

// GetRecipeStepProducts
type GetRecipeStepProductsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	RecipeID      string                 `protobuf:"bytes,2,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID  string                 `protobuf:"bytes,3,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeStepProductsRequest) Reset() {
	*x = GetRecipeStepProductsRequest{}
	mi := &file_messages_eating_proto_msgTypes[337]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepProductsRequest) ProtoMessage() {}

func (x *GetRecipeStepProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[337]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepProductsRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeStepProductsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{337}
}

func (x *GetRecipeStepProductsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetRecipeStepProductsRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *GetRecipeStepProductsRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

type GetRecipeStepProductsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*RecipeStepProduct   `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeStepProductsResponse) Reset() {
	*x = GetRecipeStepProductsResponse{}
	mi := &file_messages_eating_proto_msgTypes[338]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepProductsResponse) ProtoMessage() {}

func (x *GetRecipeStepProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[338]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepProductsResponse.ProtoReflect.Descriptor instead.
func (*GetRecipeStepProductsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{338}
}

func (x *GetRecipeStepProductsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetRecipeStepProductsResponse) GetResults() []*RecipeStepProduct {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetRecipeStepVessel
type GetRecipeStepVesselRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	RecipeID           string                 `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID       string                 `protobuf:"bytes,2,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	RecipeStepVesselID string                 `protobuf:"bytes,3,opt,name=recipeStepVesselID,proto3" json:"recipeStepVesselID,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetRecipeStepVesselRequest) Reset() {
	*x = GetRecipeStepVesselRequest{}
	mi := &file_messages_eating_proto_msgTypes[339]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepVesselRequest) ProtoMessage() {}

func (x *GetRecipeStepVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[339]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepVesselRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeStepVesselRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{339}
}

func (x *GetRecipeStepVesselRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *GetRecipeStepVesselRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *GetRecipeStepVesselRequest) GetRecipeStepVesselID() string {
	if x != nil {
		return x.RecipeStepVesselID
	}
	return ""
}

type GetRecipeStepVesselResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeStepVesselResponse) Reset() {
	*x = GetRecipeStepVesselResponse{}
	mi := &file_messages_eating_proto_msgTypes[340]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepVesselResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepVesselResponse) ProtoMessage() {}

func (x *GetRecipeStepVesselResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[340]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepVesselResponse.ProtoReflect.Descriptor instead.
func (*GetRecipeStepVesselResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{340}
}

// GetRecipeStepVessels
type GetRecipeStepVesselsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	RecipeID      string                 `protobuf:"bytes,2,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID  string                 `protobuf:"bytes,3,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeStepVesselsRequest) Reset() {
	*x = GetRecipeStepVesselsRequest{}
	mi := &file_messages_eating_proto_msgTypes[341]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepVesselsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepVesselsRequest) ProtoMessage() {}

func (x *GetRecipeStepVesselsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[341]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepVesselsRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeStepVesselsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{341}
}

func (x *GetRecipeStepVesselsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetRecipeStepVesselsRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *GetRecipeStepVesselsRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

type GetRecipeStepVesselsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*RecipeStepVessel    `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeStepVesselsResponse) Reset() {
	*x = GetRecipeStepVesselsResponse{}
	mi := &file_messages_eating_proto_msgTypes[342]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepVesselsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepVesselsResponse) ProtoMessage() {}

func (x *GetRecipeStepVesselsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[342]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepVesselsResponse.ProtoReflect.Descriptor instead.
func (*GetRecipeStepVesselsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{342}
}

func (x *GetRecipeStepVesselsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetRecipeStepVesselsResponse) GetResults() []*RecipeStepVessel {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetRecipeSteps
type GetRecipeStepsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	RecipeID      string                 `protobuf:"bytes,2,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeStepsRequest) Reset() {
	*x = GetRecipeStepsRequest{}
	mi := &file_messages_eating_proto_msgTypes[343]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepsRequest) ProtoMessage() {}

func (x *GetRecipeStepsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[343]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepsRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeStepsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{343}
}

func (x *GetRecipeStepsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetRecipeStepsRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

type GetRecipeStepsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*RecipeStep          `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeStepsResponse) Reset() {
	*x = GetRecipeStepsResponse{}
	mi := &file_messages_eating_proto_msgTypes[344]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepsResponse) ProtoMessage() {}

func (x *GetRecipeStepsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[344]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepsResponse.ProtoReflect.Descriptor instead.
func (*GetRecipeStepsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{344}
}

func (x *GetRecipeStepsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetRecipeStepsResponse) GetResults() []*RecipeStep {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetRecipes
type GetRecipesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipesRequest) Reset() {
	*x = GetRecipesRequest{}
	mi := &file_messages_eating_proto_msgTypes[345]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipesRequest) ProtoMessage() {}

func (x *GetRecipesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[345]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipesRequest.ProtoReflect.Descriptor instead.
func (*GetRecipesRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{345}
}

func (x *GetRecipesRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetRecipesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*Recipe              `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipesResponse) Reset() {
	*x = GetRecipesResponse{}
	mi := &file_messages_eating_proto_msgTypes[346]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipesResponse) ProtoMessage() {}

func (x *GetRecipesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[346]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipesResponse.ProtoReflect.Descriptor instead.
func (*GetRecipesResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{346}
}

func (x *GetRecipesResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetRecipesResponse) GetResults() []*Recipe {
	if x != nil {
		return x.Results
	}
	return nil
}

// SearchForRecipes
type SearchForRecipesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Query         string                 `protobuf:"bytes,2,opt,name=Query,proto3" json:"Query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForRecipesRequest) Reset() {
	*x = SearchForRecipesRequest{}
	mi := &file_messages_eating_proto_msgTypes[347]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForRecipesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForRecipesRequest) ProtoMessage() {}

func (x *SearchForRecipesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[347]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForRecipesRequest.ProtoReflect.Descriptor instead.
func (*SearchForRecipesRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{347}
}

func (x *SearchForRecipesRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForRecipesRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type SearchForRecipesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Result        []*Recipe              `protobuf:"bytes,2,rep,name=Result,proto3" json:"Result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForRecipesResponse) Reset() {
	*x = SearchForRecipesResponse{}
	mi := &file_messages_eating_proto_msgTypes[348]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForRecipesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForRecipesResponse) ProtoMessage() {}

func (x *SearchForRecipesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[348]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForRecipesResponse.ProtoReflect.Descriptor instead.
func (*SearchForRecipesResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{348}
}

func (x *SearchForRecipesResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForRecipesResponse) GetResult() []*Recipe {
	if x != nil {
		return x.Result
	}
	return nil
}

// UpdateRecipe
type UpdateRecipeRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	RecipeID      string                    `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	Input         *RecipeUpdateRequestInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRecipeRequest) Reset() {
	*x = UpdateRecipeRequest{}
	mi := &file_messages_eating_proto_msgTypes[349]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeRequest) ProtoMessage() {}

func (x *UpdateRecipeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[349]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecipeRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{349}
}

func (x *UpdateRecipeRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *UpdateRecipeRequest) GetInput() *RecipeUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateRecipeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRecipeResponse) Reset() {
	*x = UpdateRecipeResponse{}
	mi := &file_messages_eating_proto_msgTypes[350]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeResponse) ProtoMessage() {}

func (x *UpdateRecipeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[350]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeResponse.ProtoReflect.Descriptor instead.
func (*UpdateRecipeResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{350}
}

// UpdateRecipePrepTask
type UpdateRecipePrepTaskRequest struct {
	state            protoimpl.MessageState            `protogen:"open.v1"`
	RecipeID         string                            `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipePrepTaskID string                            `protobuf:"bytes,2,opt,name=recipePrepTaskID,proto3" json:"recipePrepTaskID,omitempty"`
	Input            *RecipePrepTaskUpdateRequestInput `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UpdateRecipePrepTaskRequest) Reset() {
	*x = UpdateRecipePrepTaskRequest{}
	mi := &file_messages_eating_proto_msgTypes[351]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipePrepTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipePrepTaskRequest) ProtoMessage() {}

func (x *UpdateRecipePrepTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[351]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipePrepTaskRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecipePrepTaskRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{351}
}

func (x *UpdateRecipePrepTaskRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *UpdateRecipePrepTaskRequest) GetRecipePrepTaskID() string {
	if x != nil {
		return x.RecipePrepTaskID
	}
	return ""
}

func (x *UpdateRecipePrepTaskRequest) GetInput() *RecipePrepTaskUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateRecipePrepTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRecipePrepTaskResponse) Reset() {
	*x = UpdateRecipePrepTaskResponse{}
	mi := &file_messages_eating_proto_msgTypes[352]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipePrepTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipePrepTaskResponse) ProtoMessage() {}

func (x *UpdateRecipePrepTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[352]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipePrepTaskResponse.ProtoReflect.Descriptor instead.
func (*UpdateRecipePrepTaskResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{352}
}

// UpdateRecipeRating
type UpdateRecipeRatingRequest struct {
	state          protoimpl.MessageState          `protogen:"open.v1"`
	RecipeID       string                          `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeRatingID string                          `protobuf:"bytes,2,opt,name=recipeRatingID,proto3" json:"recipeRatingID,omitempty"`
	Input          *RecipeRatingUpdateRequestInput `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateRecipeRatingRequest) Reset() {
	*x = UpdateRecipeRatingRequest{}
	mi := &file_messages_eating_proto_msgTypes[353]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipeRatingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeRatingRequest) ProtoMessage() {}

func (x *UpdateRecipeRatingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[353]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeRatingRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecipeRatingRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{353}
}

func (x *UpdateRecipeRatingRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *UpdateRecipeRatingRequest) GetRecipeRatingID() string {
	if x != nil {
		return x.RecipeRatingID
	}
	return ""
}

func (x *UpdateRecipeRatingRequest) GetInput() *RecipeRatingUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateRecipeRatingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRecipeRatingResponse) Reset() {
	*x = UpdateRecipeRatingResponse{}
	mi := &file_messages_eating_proto_msgTypes[354]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipeRatingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeRatingResponse) ProtoMessage() {}

func (x *UpdateRecipeRatingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[354]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeRatingResponse.ProtoReflect.Descriptor instead.
func (*UpdateRecipeRatingResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{354}
}

// UpdateRecipeStep
type UpdateRecipeStepRequest struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	RecipeID      string                        `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID  string                        `protobuf:"bytes,2,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	Input         *RecipeStepUpdateRequestInput `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRecipeStepRequest) Reset() {
	*x = UpdateRecipeStepRequest{}
	mi := &file_messages_eating_proto_msgTypes[355]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipeStepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeStepRequest) ProtoMessage() {}

func (x *UpdateRecipeStepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[355]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeStepRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecipeStepRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{355}
}

func (x *UpdateRecipeStepRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *UpdateRecipeStepRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *UpdateRecipeStepRequest) GetInput() *RecipeStepUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateRecipeStepResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRecipeStepResponse) Reset() {
	*x = UpdateRecipeStepResponse{}
	mi := &file_messages_eating_proto_msgTypes[356]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipeStepResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeStepResponse) ProtoMessage() {}

func (x *UpdateRecipeStepResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[356]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeStepResponse.ProtoReflect.Descriptor instead.
func (*UpdateRecipeStepResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{356}
}

// UpdateRecipeStepCompletionCondition
type UpdateRecipeStepCompletionConditionRequest struct {
	state                           protoimpl.MessageState                           `protogen:"open.v1"`
	RecipeID                        string                                           `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID                    string                                           `protobuf:"bytes,2,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	RecipeStepCompletionConditionID string                                           `protobuf:"bytes,3,opt,name=recipeStepCompletionConditionID,proto3" json:"recipeStepCompletionConditionID,omitempty"`
	Input                           *RecipeStepCompletionConditionUpdateRequestInput `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *UpdateRecipeStepCompletionConditionRequest) Reset() {
	*x = UpdateRecipeStepCompletionConditionRequest{}
	mi := &file_messages_eating_proto_msgTypes[357]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipeStepCompletionConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeStepCompletionConditionRequest) ProtoMessage() {}

func (x *UpdateRecipeStepCompletionConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[357]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeStepCompletionConditionRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecipeStepCompletionConditionRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{357}
}

func (x *UpdateRecipeStepCompletionConditionRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *UpdateRecipeStepCompletionConditionRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *UpdateRecipeStepCompletionConditionRequest) GetRecipeStepCompletionConditionID() string {
	if x != nil {
		return x.RecipeStepCompletionConditionID
	}
	return ""
}

func (x *UpdateRecipeStepCompletionConditionRequest) GetInput() *RecipeStepCompletionConditionUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateRecipeStepCompletionConditionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRecipeStepCompletionConditionResponse) Reset() {
	*x = UpdateRecipeStepCompletionConditionResponse{}
	mi := &file_messages_eating_proto_msgTypes[358]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipeStepCompletionConditionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeStepCompletionConditionResponse) ProtoMessage() {}

func (x *UpdateRecipeStepCompletionConditionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[358]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeStepCompletionConditionResponse.ProtoReflect.Descriptor instead.
func (*UpdateRecipeStepCompletionConditionResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{358}
}

// UpdateRecipeStepIngredient
type UpdateRecipeStepIngredientRequest struct {
	state                  protoimpl.MessageState                  `protogen:"open.v1"`
	RecipeID               string                                  `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID           string                                  `protobuf:"bytes,2,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	RecipeStepIngredientID string                                  `protobuf:"bytes,3,opt,name=recipeStepIngredientID,proto3" json:"recipeStepIngredientID,omitempty"`
	Input                  *RecipeStepIngredientUpdateRequestInput `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateRecipeStepIngredientRequest) Reset() {
	*x = UpdateRecipeStepIngredientRequest{}
	mi := &file_messages_eating_proto_msgTypes[359]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipeStepIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeStepIngredientRequest) ProtoMessage() {}

func (x *UpdateRecipeStepIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[359]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeStepIngredientRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecipeStepIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{359}
}

func (x *UpdateRecipeStepIngredientRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *UpdateRecipeStepIngredientRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *UpdateRecipeStepIngredientRequest) GetRecipeStepIngredientID() string {
	if x != nil {
		return x.RecipeStepIngredientID
	}
	return ""
}

func (x *UpdateRecipeStepIngredientRequest) GetInput() *RecipeStepIngredientUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateRecipeStepIngredientResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRecipeStepIngredientResponse) Reset() {
	*x = UpdateRecipeStepIngredientResponse{}
	mi := &file_messages_eating_proto_msgTypes[360]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipeStepIngredientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeStepIngredientResponse) ProtoMessage() {}

func (x *UpdateRecipeStepIngredientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[360]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeStepIngredientResponse.ProtoReflect.Descriptor instead.
func (*UpdateRecipeStepIngredientResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{360}
}

// UpdateRecipeStepInstrument
type UpdateRecipeStepInstrumentRequest struct {
	state                  protoimpl.MessageState                  `protogen:"open.v1"`
	RecipeID               string                                  `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID           string                                  `protobuf:"bytes,2,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	RecipeStepInstrumentID string                                  `protobuf:"bytes,3,opt,name=recipeStepInstrumentID,proto3" json:"recipeStepInstrumentID,omitempty"`
	Input                  *RecipeStepInstrumentUpdateRequestInput `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateRecipeStepInstrumentRequest) Reset() {
	*x = UpdateRecipeStepInstrumentRequest{}
	mi := &file_messages_eating_proto_msgTypes[361]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipeStepInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeStepInstrumentRequest) ProtoMessage() {}

func (x *UpdateRecipeStepInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[361]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeStepInstrumentRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecipeStepInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{361}
}

func (x *UpdateRecipeStepInstrumentRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *UpdateRecipeStepInstrumentRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *UpdateRecipeStepInstrumentRequest) GetRecipeStepInstrumentID() string {
	if x != nil {
		return x.RecipeStepInstrumentID
	}
	return ""
}

func (x *UpdateRecipeStepInstrumentRequest) GetInput() *RecipeStepInstrumentUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateRecipeStepInstrumentResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRecipeStepInstrumentResponse) Reset() {
	*x = UpdateRecipeStepInstrumentResponse{}
	mi := &file_messages_eating_proto_msgTypes[362]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipeStepInstrumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeStepInstrumentResponse) ProtoMessage() {}

func (x *UpdateRecipeStepInstrumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[362]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeStepInstrumentResponse.ProtoReflect.Descriptor instead.
func (*UpdateRecipeStepInstrumentResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{362}
}

// UpdateRecipeStepProduct
type UpdateRecipeStepProductRequest struct {
	state               protoimpl.MessageState               `protogen:"open.v1"`
	RecipeID            string                               `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID        string                               `protobuf:"bytes,2,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	RecipeStepProductID string                               `protobuf:"bytes,3,opt,name=recipeStepProductID,proto3" json:"recipeStepProductID,omitempty"`
	Input               *RecipeStepProductUpdateRequestInput `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *UpdateRecipeStepProductRequest) Reset() {
	*x = UpdateRecipeStepProductRequest{}
	mi := &file_messages_eating_proto_msgTypes[363]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipeStepProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeStepProductRequest) ProtoMessage() {}

func (x *UpdateRecipeStepProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[363]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeStepProductRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecipeStepProductRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{363}
}

func (x *UpdateRecipeStepProductRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *UpdateRecipeStepProductRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *UpdateRecipeStepProductRequest) GetRecipeStepProductID() string {
	if x != nil {
		return x.RecipeStepProductID
	}
	return ""
}

func (x *UpdateRecipeStepProductRequest) GetInput() *RecipeStepProductUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateRecipeStepProductResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRecipeStepProductResponse) Reset() {
	*x = UpdateRecipeStepProductResponse{}
	mi := &file_messages_eating_proto_msgTypes[364]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipeStepProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeStepProductResponse) ProtoMessage() {}

func (x *UpdateRecipeStepProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[364]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeStepProductResponse.ProtoReflect.Descriptor instead.
func (*UpdateRecipeStepProductResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{364}
}

// UpdateRecipeStepVessel
type UpdateRecipeStepVesselRequest struct {
	state              protoimpl.MessageState              `protogen:"open.v1"`
	RecipeID           string                              `protobuf:"bytes,1,opt,name=recipeID,proto3" json:"recipeID,omitempty"`
	RecipeStepID       string                              `protobuf:"bytes,2,opt,name=recipeStepID,proto3" json:"recipeStepID,omitempty"`
	RecipeStepVesselID string                              `protobuf:"bytes,3,opt,name=recipeStepVesselID,proto3" json:"recipeStepVesselID,omitempty"`
	Input              *RecipeStepVesselUpdateRequestInput `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpdateRecipeStepVesselRequest) Reset() {
	*x = UpdateRecipeStepVesselRequest{}
	mi := &file_messages_eating_proto_msgTypes[365]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipeStepVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeStepVesselRequest) ProtoMessage() {}

func (x *UpdateRecipeStepVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[365]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeStepVesselRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecipeStepVesselRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{365}
}

func (x *UpdateRecipeStepVesselRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *UpdateRecipeStepVesselRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *UpdateRecipeStepVesselRequest) GetRecipeStepVesselID() string {
	if x != nil {
		return x.RecipeStepVesselID
	}
	return ""
}

func (x *UpdateRecipeStepVesselRequest) GetInput() *RecipeStepVesselUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateRecipeStepVesselResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRecipeStepVesselResponse) Reset() {
	*x = UpdateRecipeStepVesselResponse{}
	mi := &file_messages_eating_proto_msgTypes[366]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipeStepVesselResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeStepVesselResponse) ProtoMessage() {}

func (x *UpdateRecipeStepVesselResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[366]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeStepVesselResponse.ProtoReflect.Descriptor instead.
func (*UpdateRecipeStepVesselResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{366}
}

type InitializeMealPlanGroceryListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HouseholdID   string                 `protobuf:"bytes,1,opt,name=HouseholdID,proto3" json:"HouseholdID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitializeMealPlanGroceryListRequest) Reset() {
	*x = InitializeMealPlanGroceryListRequest{}
	mi := &file_messages_eating_proto_msgTypes[367]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitializeMealPlanGroceryListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeMealPlanGroceryListRequest) ProtoMessage() {}

func (x *InitializeMealPlanGroceryListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[367]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeMealPlanGroceryListRequest.ProtoReflect.Descriptor instead.
func (*InitializeMealPlanGroceryListRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{367}
}

func (x *InitializeMealPlanGroceryListRequest) GetHouseholdID() string {
	if x != nil {
		return x.HouseholdID
	}
	return ""
}

type InitializeMealPlanGroceryListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
	Success       bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *InitializeMealPlanGroceryListResponse) Reset() {
	*x = InitializeMealPlanGroceryListResponse{}
	mi := &file_messages_eating_proto_msgTypes[368]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitializeMealPlanGroceryListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeMealPlanGroceryListResponse) ProtoMessage() {}

func (x *InitializeMealPlanGroceryListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[368]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeMealPlanGroceryListResponse.ProtoReflect.Descriptor instead.
func (*InitializeMealPlanGroceryListResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{368}
}

func (x *InitializeMealPlanGroceryListResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type Meal struct {
	state                protoimpl.MessageState       `protogen:"open.v1"`
	CreatedAt            *timestamppb.Timestamp       `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	ArchivedAt           *timestamppb.Timestamp       `protobuf:"bytes,2,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	LastUpdatedAt        *timestamppb.Timestamp       `protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	EstimatedPortions    *Float32RangeWithOptionalMax `protobuf:"bytes,4,opt,name=EstimatedPortions,proto3" json:"EstimatedPortions,omitempty"`
	Description          string                       `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"`
	ID                   string                       `protobuf:"bytes,5,opt,name=ID,proto3" json:"ID,omitempty"`
	CreatedByUser        string                       `protobuf:"bytes,7,opt,name=CreatedByUser,proto3" json:"CreatedByUser,omitempty"`
	Name                 string                       `protobuf:"bytes,8,opt,name=Name,proto3" json:"Name,omitempty"`
	Components           []*MealComponent             `protobuf:"bytes,9,rep,name=Components,proto3" json:"Components,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
	EligibleForMealPlans bool `protobuf:"varint,10,opt,name=EligibleForMealPlans,proto3" json:"EligibleForMealPlans,omitempty"`
}

func (x *Meal) Reset() {
	*x = Meal{}
	mi := &file_messages_eating_proto_msgTypes[369]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Meal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meal) ProtoMessage() {}

func (x *Meal) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[369]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meal.ProtoReflect.Descriptor instead.
func (*Meal) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{369}
}

func (x *Meal) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Meal) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *Meal) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *Meal) GetEstimatedPortions() *Float32RangeWithOptionalMax {
	if x != nil {
		return x.EstimatedPortions
	}
	return nil
}

func (x *Meal) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Meal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Meal) GetCreatedByUser() string {
	if x != nil {
		return x.CreatedByUser
	}
	return ""
}

func (x *Meal) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Meal) GetComponents() []*MealComponent {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *Meal) GetEligibleForMealPlans() bool {
	if x != nil {
		return x.EligibleForMealPlans
	}
	return false
}

type MealComponent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Recipe        *Recipe                `protobuf:"bytes,2,opt,name=Recipe,proto3" json:"Recipe,omitempty"`
	ComponentType string                 `protobuf:"bytes,1,opt,name=ComponentType,proto3" json:"ComponentType,omitempty"`
	unknownFields protoimpl.UnknownFields
	RecipeScale   float32 `protobuf:"fixed32,3,opt,name=RecipeScale,proto3" json:"RecipeScale,omitempty"`
	sizeCache     protoimpl.SizeCache
}

func (x *MealComponent) Reset() {
	*x = MealComponent{}
	mi := &file_messages_eating_proto_msgTypes[370]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealComponent) ProtoMessage() {}

func (x *MealComponent) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[370]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealComponent.ProtoReflect.Descriptor instead.
func (*MealComponent) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{370}
}

func (x *MealComponent) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *MealComponent) GetRecipe() *Recipe {
	if x != nil {
		return x.Recipe
	}
	return nil
}

func (x *MealComponent) GetRecipeScale() float32 {
	if x != nil {
		return x.RecipeScale
	}
	return 0
}

type MealComponentCreationRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecipeID      string                 `protobuf:"bytes,1,opt,name=RecipeID,proto3" json:"RecipeID,omitempty"`
	ComponentType string                 `protobuf:"bytes,2,opt,name=ComponentType,proto3" json:"ComponentType,omitempty"`
	unknownFields protoimpl.UnknownFields
	RecipeScale   float32 `protobuf:"fixed32,3,opt,name=RecipeScale,proto3" json:"RecipeScale,omitempty"`
	sizeCache     protoimpl.SizeCache
}

func (x *MealComponentCreationRequestInput) Reset() {
	*x = MealComponentCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[371]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealComponentCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealComponentCreationRequestInput) ProtoMessage() {}

func (x *MealComponentCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[371]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealComponentCreationRequestInput.ProtoReflect.Descriptor instead.
func (*MealComponentCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{371}
}

func (x *MealComponentCreationRequestInput) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *MealComponentCreationRequestInput) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *MealComponentCreationRequestInput) GetRecipeScale() float32 {
	if x != nil {
		return x.RecipeScale
	}
	return 0
}

type MealComponentUpdateRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecipeID      string                 `protobuf:"bytes,1,opt,name=RecipeID,proto3" json:"RecipeID,omitempty"`
	ComponentType string                 `protobuf:"bytes,2,opt,name=ComponentType,proto3" json:"ComponentType,omitempty"`
	unknownFields protoimpl.UnknownFields
	RecipeScale   float32 `protobuf:"fixed32,3,opt,name=RecipeScale,proto3" json:"RecipeScale,omitempty"`
	sizeCache     protoimpl.SizeCache
}

func (x *MealComponentUpdateRequestInput) Reset() {
	*x = MealComponentUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[372]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealComponentUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealComponentUpdateRequestInput) ProtoMessage() {}

func (x *MealComponentUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[372]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealComponentUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*MealComponentUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{372}
}

func (x *MealComponentUpdateRequestInput) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *MealComponentUpdateRequestInput) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *MealComponentUpdateRequestInput) GetRecipeScale() float32 {
	if x != nil {
		return x.RecipeScale
	}
	return 0
}

type MealCreationRequestInput struct {
	state                protoimpl.MessageState               `protogen:"open.v1"`
	EstimatedPortions    *Float32RangeWithOptionalMax         `protobuf:"bytes,1,opt,name=EstimatedPortions,proto3" json:"EstimatedPortions,omitempty"`
	Name                 string                               `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description          string                               `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Components           []*MealComponentCreationRequestInput `protobuf:"bytes,4,rep,name=Components,proto3" json:"Components,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
	EligibleForMealPlans bool `protobuf:"varint,5,opt,name=EligibleForMealPlans,proto3" json:"EligibleForMealPlans,omitempty"`
}

func (x *MealCreationRequestInput) Reset() {
	*x = MealCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[373]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealCreationRequestInput) ProtoMessage() {}

func (x *MealCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[373]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealCreationRequestInput.ProtoReflect.Descriptor instead.
func (*MealCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{373}
}

func (x *MealCreationRequestInput) GetEstimatedPortions() *Float32RangeWithOptionalMax {
	if x != nil {
		return x.EstimatedPortions
	}
	return nil
}

func (x *MealCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MealCreationRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MealCreationRequestInput) GetComponents() []*MealComponentCreationRequestInput {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *MealCreationRequestInput) GetEligibleForMealPlans() bool {
	if x != nil {
		return x.EligibleForMealPlans
	}
	return false
}

type MealPlan struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt              *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	VotingDeadline         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=VotingDeadline,proto3" json:"VotingDeadline,omitempty"`
	ArchivedAt             *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	LastUpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	ElectionMethod         string                 `protobuf:"bytes,8,opt,name=ElectionMethod,proto3" json:"ElectionMethod,omitempty"`
	Status                 string                 `protobuf:"bytes,6,opt,name=Status,proto3" json:"Status,omitempty"`
	Notes                  string                 `protobuf:"bytes,7,opt,name=Notes,proto3" json:"Notes,omitempty"`
	ID                     string                 `protobuf:"bytes,5,opt,name=ID,proto3" json:"ID,omitempty"`
	BelongsToHousehold     string                 `protobuf:"bytes,9,opt,name=BelongsToHousehold,proto3" json:"BelongsToHousehold,omitempty"`
	CreatedByUser          string                 `protobuf:"bytes,10,opt,name=CreatedByUser,proto3" json:"CreatedByUser,omitempty"`
	Events                 []*MealPlanEvent       `protobuf:"bytes,11,rep,name=Events,proto3" json:"Events,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
	GroceryListInitialized bool `protobuf:"varint,12,opt,name=GroceryListInitialized,proto3" json:"GroceryListInitialized,omitempty"`
	TasksCreated           bool `protobuf:"varint,13,opt,name=TasksCreated,proto3" json:"TasksCreated,omitempty"`
}

func (x *MealPlan) Reset() {
	*x = MealPlan{}
	mi := &file_messages_eating_proto_msgTypes[374]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlan) ProtoMessage() {}

func (x *MealPlan) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[374]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlan.ProtoReflect.Descriptor instead.
func (*MealPlan) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{374}
}

func (x *MealPlan) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MealPlan) GetVotingDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.VotingDeadline
	}
	return nil
}

func (x *MealPlan) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *MealPlan) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *MealPlan) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MealPlan) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MealPlan) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MealPlan) GetElectionMethod() string {
	if x != nil {
		return x.ElectionMethod
	}
	return ""
}

func (x *MealPlan) GetBelongsToHousehold() string {
	if x != nil {
		return x.BelongsToHousehold
	}
	return ""
}

func (x *MealPlan) GetCreatedByUser() string {
	if x != nil {
		return x.CreatedByUser
	}
	return ""
}

func (x *MealPlan) GetEvents() []*MealPlanEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *MealPlan) GetGroceryListInitialized() bool {
	if x != nil {
		return x.GroceryListInitialized
	}
	return false
}

func (x *MealPlan) GetTasksCreated() bool {
	if x != nil {
		return x.TasksCreated
	}
	return false
}

type MealPlanCreationRequestInput struct {
	state          protoimpl.MessageState               `protogen:"open.v1"`
	VotingDeadline *timestamppb.Timestamp               `protobuf:"bytes,1,opt,name=VotingDeadline,proto3" json:"VotingDeadline,omitempty"`
	Notes          string                               `protobuf:"bytes,2,opt,name=Notes,proto3" json:"Notes,omitempty"`
	ElectionMethod string                               `protobuf:"bytes,3,opt,name=ElectionMethod,proto3" json:"ElectionMethod,omitempty"`
	Events         []*MealPlanEventCreationRequestInput `protobuf:"bytes,4,rep,name=Events,proto3" json:"Events,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MealPlanCreationRequestInput) Reset() {
	*x = MealPlanCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[375]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanCreationRequestInput) ProtoMessage() {}

func (x *MealPlanCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[375]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanCreationRequestInput.ProtoReflect.Descriptor instead.
func (*MealPlanCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{375}
}

func (x *MealPlanCreationRequestInput) GetVotingDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.VotingDeadline
	}
	return nil
}

func (x *MealPlanCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MealPlanCreationRequestInput) GetElectionMethod() string {
	if x != nil {
		return x.ElectionMethod
	}
	return ""
}

func (x *MealPlanCreationRequestInput) GetEvents() []*MealPlanEventCreationRequestInput {
	if x != nil {
		return x.Events
	}
	return nil
}

type MealPlanEvent struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	StartsAt          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=StartsAt,proto3" json:"StartsAt,omitempty"`
	EndsAt            *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=EndsAt,proto3" json:"EndsAt,omitempty"`
	ArchivedAt        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	LastUpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	MealName          string                 `protobuf:"bytes,6,opt,name=MealName,proto3" json:"MealName,omitempty"`
	Notes             string                 `protobuf:"bytes,7,opt,name=Notes,proto3" json:"Notes,omitempty"`
	BelongsToMealPlan string                 `protobuf:"bytes,8,opt,name=BelongsToMealPlan,proto3" json:"BelongsToMealPlan,omitempty"`
	ID                string                 `protobuf:"bytes,9,opt,name=ID,proto3" json:"ID,omitempty"`
	Options           []*MealPlanOption      `protobuf:"bytes,10,rep,name=Options,proto3" json:"Options,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MealPlanEvent) Reset() {
	*x = MealPlanEvent{}
	mi := &file_messages_eating_proto_msgTypes[376]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanEvent) ProtoMessage() {}

func (x *MealPlanEvent) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[376]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanEvent.ProtoReflect.Descriptor instead.
func (*MealPlanEvent) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{376}
}

func (x *MealPlanEvent) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MealPlanEvent) GetStartsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartsAt
	}
	return nil
}

func (x *MealPlanEvent) GetEndsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndsAt
	}
	return nil
}

func (x *MealPlanEvent) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *MealPlanEvent) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *MealPlanEvent) GetMealName() string {
	if x != nil {
		return x.MealName
	}
	return ""
}

func (x *MealPlanEvent) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MealPlanEvent) GetBelongsToMealPlan() string {
	if x != nil {
		return x.BelongsToMealPlan
	}
	return ""
}

func (x *MealPlanEvent) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MealPlanEvent) GetOptions() []*MealPlanOption {
	if x != nil {
		return x.Options
	}
	return nil
}

type MealPlanEventCreationRequestInput struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	EndsAt        *timestamppb.Timestamp                `protobuf:"bytes,1,opt,name=EndsAt,proto3" json:"EndsAt,omitempty"`
	StartsAt      *timestamppb.Timestamp                `protobuf:"bytes,2,opt,name=StartsAt,proto3" json:"StartsAt,omitempty"`
	Notes         string                                `protobuf:"bytes,3,opt,name=Notes,proto3" json:"Notes,omitempty"`
	MealName      string                                `protobuf:"bytes,4,opt,name=MealName,proto3" json:"MealName,omitempty"`
	Options       []*MealPlanOptionCreationRequestInput `protobuf:"bytes,5,rep,name=Options,proto3" json:"Options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MealPlanEventCreationRequestInput) Reset() {
	*x = MealPlanEventCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[377]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanEventCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanEventCreationRequestInput) ProtoMessage() {}

func (x *MealPlanEventCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[377]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanEventCreationRequestInput.ProtoReflect.Descriptor instead.
func (*MealPlanEventCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{377}
}

func (x *MealPlanEventCreationRequestInput) GetEndsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndsAt
	}
	return nil
}

func (x *MealPlanEventCreationRequestInput) GetStartsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartsAt
	}
	return nil
}

func (x *MealPlanEventCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MealPlanEventCreationRequestInput) GetMealName() string {
	if x != nil {
		return x.MealName
	}
	return ""
}

func (x *MealPlanEventCreationRequestInput) GetOptions() []*MealPlanOptionCreationRequestInput {
	if x != nil {
		return x.Options
	}
	return nil
}

type MealPlanEventUpdateRequestInput struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Notes             string                 `protobuf:"bytes,1,opt,name=Notes,proto3" json:"Notes,omitempty"`
	StartsAt          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=StartsAt,proto3" json:"StartsAt,omitempty"`
	MealName          string                 `protobuf:"bytes,3,opt,name=MealName,proto3" json:"MealName,omitempty"`
	EndsAt            *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=EndsAt,proto3" json:"EndsAt,omitempty"`
	BelongsToMealPlan string                 `protobuf:"bytes,5,opt,name=BelongsToMealPlan,proto3" json:"BelongsToMealPlan,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MealPlanEventUpdateRequestInput) Reset() {
	*x = MealPlanEventUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[378]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanEventUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanEventUpdateRequestInput) ProtoMessage() {}

func (x *MealPlanEventUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[378]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanEventUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*MealPlanEventUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{378}
}

func (x *MealPlanEventUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MealPlanEventUpdateRequestInput) GetStartsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartsAt
	}
	return nil
}

func (x *MealPlanEventUpdateRequestInput) GetMealName() string {
	if x != nil {
		return x.MealName
	}
	return ""
}

func (x *MealPlanEventUpdateRequestInput) GetEndsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndsAt
	}
	return nil
}

func (x *MealPlanEventUpdateRequestInput) GetBelongsToMealPlan() string {
	if x != nil {
		return x.BelongsToMealPlan
	}
	return ""
}

type MealPlanGroceryListItem struct {
	QuantityNeeded           *Float32RangeWithOptionalMax `protobuf:"bytes,12,opt,name=QuantityNeeded,proto3" json:"QuantityNeeded,omitempty"`
	CreatedAt                *timestamppb.Timestamp       `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Ingredient               *ValidIngredient             `protobuf:"bytes,14,opt,name=Ingredient,proto3" json:"Ingredient,omitempty"`
	MeasurementUnit          *ValidMeasurementUnit        `protobuf:"bytes,13,opt,name=MeasurementUnit,proto3" json:"MeasurementUnit,omitempty"`
	state                    protoimpl.MessageState       `protogen:"open.v1"`
	ArchivedAt               *timestamppb.Timestamp       `protobuf:"bytes,5,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	LastUpdatedAt            *timestamppb.Timestamp       `protobuf:"bytes,6,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	PurchasedMeasurementUnit *ValidMeasurementUnit        `protobuf:"bytes,7,opt,name=PurchasedMeasurementUnit,proto3" json:"PurchasedMeasurementUnit,omitempty"`
	PurchasedUPC             string                       `protobuf:"bytes,4,opt,name=PurchasedUPC,proto3" json:"PurchasedUPC,omitempty"`
	Status                   string                       `protobuf:"bytes,9,opt,name=Status,proto3" json:"Status,omitempty"`
	StatusExplanation        string                       `protobuf:"bytes,10,opt,name=StatusExplanation,proto3" json:"StatusExplanation,omitempty"`
	ID                       string                       `protobuf:"bytes,11,opt,name=ID,proto3" json:"ID,omitempty"`
	BelongsToMealPlan        string                       `protobuf:"bytes,8,opt,name=BelongsToMealPlan,proto3" json:"BelongsToMealPlan,omitempty"`
	unknownFields            protoimpl.UnknownFields
	PurchasePrice            float32 `protobuf:"fixed32,3,opt,name=PurchasePrice,proto3" json:"PurchasePrice,omitempty"`
	QuantityPurchased        float32 `protobuf:"fixed32,2,opt,name=QuantityPurchased,proto3" json:"QuantityPurchased,omitempty"`
	sizeCache                protoimpl.SizeCache
}

func (x *MealPlanGroceryListItem) Reset() {
	*x = MealPlanGroceryListItem{}
	mi := &file_messages_eating_proto_msgTypes[379]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanGroceryListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanGroceryListItem) ProtoMessage() {}

func (x *MealPlanGroceryListItem) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[379]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanGroceryListItem.ProtoReflect.Descriptor instead.
func (*MealPlanGroceryListItem) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{379}
}

func (x *MealPlanGroceryListItem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MealPlanGroceryListItem) GetQuantityPurchased() float32 {
	if x != nil {
		return x.QuantityPurchased
	}
	return 0
}

func (x *MealPlanGroceryListItem) GetPurchasePrice() float32 {
	if x != nil {
		return x.PurchasePrice
	}
	return 0
}

func (x *MealPlanGroceryListItem) GetPurchasedUPC() string {
	if x != nil {
		return x.PurchasedUPC
	}
	return ""
}

func (x *MealPlanGroceryListItem) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *MealPlanGroceryListItem) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *MealPlanGroceryListItem) GetPurchasedMeasurementUnit() *ValidMeasurementUnit {
	if x != nil {
		return x.PurchasedMeasurementUnit
	}
	return nil
}

func (x *MealPlanGroceryListItem) GetBelongsToMealPlan() string {
	if x != nil {
		return x.BelongsToMealPlan
	}
	return ""
}

func (x *MealPlanGroceryListItem) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MealPlanGroceryListItem) GetStatusExplanation() string {
	if x != nil {
		return x.StatusExplanation
	}
	return ""
}

func (x *MealPlanGroceryListItem) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MealPlanGroceryListItem) GetQuantityNeeded() *Float32RangeWithOptionalMax {
	if x != nil {
		return x.QuantityNeeded
	}
	return nil
}

func (x *MealPlanGroceryListItem) GetMeasurementUnit() *ValidMeasurementUnit {
	if x != nil {
		return x.MeasurementUnit
	}
	return nil
}

func (x *MealPlanGroceryListItem) GetIngredient() *ValidIngredient {
	if x != nil {
		return x.Ingredient
	}
	return nil
}

type MealPlanGroceryListItemCreationRequestInput struct {
	state                      protoimpl.MessageState       `protogen:"open.v1"`
	QuantityNeeded             *Float32RangeWithOptionalMax `protobuf:"bytes,10,opt,name=QuantityNeeded,proto3" json:"QuantityNeeded,omitempty"`
	StatusExplanation          string                       `protobuf:"bytes,9,opt,name=StatusExplanation,proto3" json:"StatusExplanation,omitempty"`
	Status                     string                       `protobuf:"bytes,5,opt,name=Status,proto3" json:"Status,omitempty"`
	BelongsToMealPlan          string                       `protobuf:"bytes,6,opt,name=BelongsToMealPlan,proto3" json:"BelongsToMealPlan,omitempty"`
	ValidIngredientID          string                       `protobuf:"bytes,7,opt,name=ValidIngredientID,proto3" json:"ValidIngredientID,omitempty"`
	ValidMeasurementUnitID     string                       `protobuf:"bytes,8,opt,name=ValidMeasurementUnitID,proto3" json:"ValidMeasurementUnitID,omitempty"`
	PurchasedUPC               string                       `protobuf:"bytes,2,opt,name=PurchasedUPC,proto3" json:"PurchasedUPC,omitempty"`
	PurchasedMeasurementUnitID string                       `protobuf:"bytes,1,opt,name=PurchasedMeasurementUnitID,proto3" json:"PurchasedMeasurementUnitID,omitempty"`
	unknownFields              protoimpl.UnknownFields
	PurchasePrice              float32 `protobuf:"fixed32,3,opt,name=PurchasePrice,proto3" json:"PurchasePrice,omitempty"`
	QuantityPurchased          float32 `protobuf:"fixed32,4,opt,name=QuantityPurchased,proto3" json:"QuantityPurchased,omitempty"`
	sizeCache                  protoimpl.SizeCache
}

func (x *MealPlanGroceryListItemCreationRequestInput) Reset() {
	*x = MealPlanGroceryListItemCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[380]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanGroceryListItemCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanGroceryListItemCreationRequestInput) ProtoMessage() {}

func (x *MealPlanGroceryListItemCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[380]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanGroceryListItemCreationRequestInput.ProtoReflect.Descriptor instead.
func (*MealPlanGroceryListItemCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{380}
}

func (x *MealPlanGroceryListItemCreationRequestInput) GetPurchasedMeasurementUnitID() string {
	if x != nil {
		return x.PurchasedMeasurementUnitID
	}
	return ""
}

func (x *MealPlanGroceryListItemCreationRequestInput) GetPurchasedUPC() string {
	if x != nil {
		return x.PurchasedUPC
	}
	return ""
}

func (x *MealPlanGroceryListItemCreationRequestInput) GetPurchasePrice() float32 {
	if x != nil {
		return x.PurchasePrice
	}
	return 0
}

func (x *MealPlanGroceryListItemCreationRequestInput) GetQuantityPurchased() float32 {
	if x != nil {
		return x.QuantityPurchased
	}
	return 0
}

func (x *MealPlanGroceryListItemCreationRequestInput) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MealPlanGroceryListItemCreationRequestInput) GetBelongsToMealPlan() string {
	if x != nil {
		return x.BelongsToMealPlan
	}
	return ""
}

func (x *MealPlanGroceryListItemCreationRequestInput) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

func (x *MealPlanGroceryListItemCreationRequestInput) GetValidMeasurementUnitID() string {
	if x != nil {
		return x.ValidMeasurementUnitID
	}
	return ""
}

func (x *MealPlanGroceryListItemCreationRequestInput) GetStatusExplanation() string {
	if x != nil {
		return x.StatusExplanation
	}
	return ""
}

func (x *MealPlanGroceryListItemCreationRequestInput) GetQuantityNeeded() *Float32RangeWithOptionalMax {
	if x != nil {
		return x.QuantityNeeded
	}
	return nil
}

type MealPlanGroceryListItemUpdateRequestInput struct {
	state                      protoimpl.MessageState                         `protogen:"open.v1"`
	QuantityNeeded             *Float32RangeWithOptionalMaxUpdateRequestInput `protobuf:"bytes,10,opt,name=QuantityNeeded,proto3" json:"QuantityNeeded,omitempty"`
	PurchasedMeasurementUnitID string                                         `protobuf:"bytes,6,opt,name=PurchasedMeasurementUnitID,proto3" json:"PurchasedMeasurementUnitID,omitempty"`
	ValidMeasurementUnitID     string                                         `protobuf:"bytes,3,opt,name=ValidMeasurementUnitID,proto3" json:"ValidMeasurementUnitID,omitempty"`
	StatusExplanation          string                                         `protobuf:"bytes,4,opt,name=StatusExplanation,proto3" json:"StatusExplanation,omitempty"`
	ValidIngredientID          string                                         `protobuf:"bytes,2,opt,name=ValidIngredientID,proto3" json:"ValidIngredientID,omitempty"`
	PurchasedUPC               string                                         `protobuf:"bytes,7,opt,name=PurchasedUPC,proto3" json:"PurchasedUPC,omitempty"`
	Status                     string                                         `protobuf:"bytes,9,opt,name=Status,proto3" json:"Status,omitempty"`
	BelongsToMealPlan          string                                         `protobuf:"bytes,1,opt,name=BelongsToMealPlan,proto3" json:"BelongsToMealPlan,omitempty"`
	unknownFields              protoimpl.UnknownFields
	QuantityPurchased          float32 `protobuf:"fixed32,5,opt,name=QuantityPurchased,proto3" json:"QuantityPurchased,omitempty"`
	PurchasePrice              float32 `protobuf:"fixed32,8,opt,name=PurchasePrice,proto3" json:"PurchasePrice,omitempty"`
	sizeCache                  protoimpl.SizeCache
}

func (x *MealPlanGroceryListItemUpdateRequestInput) Reset() {
	*x = MealPlanGroceryListItemUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[381]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanGroceryListItemUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanGroceryListItemUpdateRequestInput) ProtoMessage() {}

func (x *MealPlanGroceryListItemUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[381]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanGroceryListItemUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*MealPlanGroceryListItemUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{381}
}

func (x *MealPlanGroceryListItemUpdateRequestInput) GetBelongsToMealPlan() string {
	if x != nil {
		return x.BelongsToMealPlan
	}
	return ""
}

func (x *MealPlanGroceryListItemUpdateRequestInput) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

func (x *MealPlanGroceryListItemUpdateRequestInput) GetValidMeasurementUnitID() string {
	if x != nil {
		return x.ValidMeasurementUnitID
	}
	return ""
}

func (x *MealPlanGroceryListItemUpdateRequestInput) GetStatusExplanation() string {
	if x != nil {
		return x.StatusExplanation
	}
	return ""
}

func (x *MealPlanGroceryListItemUpdateRequestInput) GetQuantityPurchased() float32 {
	if x != nil {
		return x.QuantityPurchased
	}
	return 0
}

func (x *MealPlanGroceryListItemUpdateRequestInput) GetPurchasedMeasurementUnitID() string {
	if x != nil {
		return x.PurchasedMeasurementUnitID
	}
	return ""
}

func (x *MealPlanGroceryListItemUpdateRequestInput) GetPurchasedUPC() string {
	if x != nil {
		return x.PurchasedUPC
	}
	return ""
}

func (x *MealPlanGroceryListItemUpdateRequestInput) GetPurchasePrice() float32 {
	if x != nil {
		return x.PurchasePrice
	}
	return 0
}

func (x *MealPlanGroceryListItemUpdateRequestInput) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MealPlanGroceryListItemUpdateRequestInput) GetQuantityNeeded() *Float32RangeWithOptionalMaxUpdateRequestInput {
	if x != nil {
		return x.QuantityNeeded
	}
	return nil
}

type MealPlanOption struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt              *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	LastUpdatedAt          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	Meal                   *Meal                  `protobuf:"bytes,10,opt,name=Meal,proto3" json:"Meal,omitempty"`
	ArchivedAt             *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	ID                     string                 `protobuf:"bytes,8,opt,name=ID,proto3" json:"ID,omitempty"`
	Notes                  string                 `protobuf:"bytes,6,opt,name=Notes,proto3" json:"Notes,omitempty"`
	BelongsToMealPlanEvent string                 `protobuf:"bytes,7,opt,name=BelongsToMealPlanEvent,proto3" json:"BelongsToMealPlanEvent,omitempty"`
	AssignedDishwasher     string                 `protobuf:"bytes,5,opt,name=AssignedDishwasher,proto3" json:"AssignedDishwasher,omitempty"`
	AssignedCook           string                 `protobuf:"bytes,3,opt,name=AssignedCook,proto3" json:"AssignedCook,omitempty"`
	Votes                  []*MealPlanOptionVote  `protobuf:"bytes,9,rep,name=Votes,proto3" json:"Votes,omitempty"`
	unknownFields          protoimpl.UnknownFields
	MealScale              float32 `protobuf:"fixed32,11,opt,name=MealScale,proto3" json:"MealScale,omitempty"`
	sizeCache              protoimpl.SizeCache
	Chosen                 bool `protobuf:"varint,12,opt,name=Chosen,proto3" json:"Chosen,omitempty"`
	TieBroken              bool `protobuf:"varint,13,opt,name=TieBroken,proto3" json:"TieBroken,omitempty"`
}

func (x *MealPlanOption) Reset() {
	*x = MealPlanOption{}
	mi := &file_messages_eating_proto_msgTypes[382]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanOption) ProtoMessage() {}

func (x *MealPlanOption) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[382]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanOption.ProtoReflect.Descriptor instead.
func (*MealPlanOption) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{382}
}

func (x *MealPlanOption) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MealPlanOption) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *MealPlanOption) GetAssignedCook() string {
	if x != nil {
		return x.AssignedCook
	}
	return ""
}

func (x *MealPlanOption) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *MealPlanOption) GetAssignedDishwasher() string {
	if x != nil {
		return x.AssignedDishwasher
	}
	return ""
}

func (x *MealPlanOption) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MealPlanOption) GetBelongsToMealPlanEvent() string {
	if x != nil {
		return x.BelongsToMealPlanEvent
	}
	return ""
}

func (x *MealPlanOption) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MealPlanOption) GetVotes() []*MealPlanOptionVote {
	if x != nil {
		return x.Votes
	}
	return nil
}

func (x *MealPlanOption) GetMeal() *Meal {
	if x != nil {
		return x.Meal
	}
	return nil
}

func (x *MealPlanOption) GetMealScale() float32 {
	if x != nil {
		return x.MealScale
	}
	return 0
}

func (x *MealPlanOption) GetChosen() bool {
	if x != nil {
		return x.Chosen
	}
	return false
}

func (x *MealPlanOption) GetTieBroken() bool {
	if x != nil {
		return x.TieBroken
	}
	return false
}

type MealPlanOptionCreationRequestInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	AssignedCook       string                 `protobuf:"bytes,1,opt,name=AssignedCook,proto3" json:"AssignedCook,omitempty"`
	AssignedDishwasher string                 `protobuf:"bytes,2,opt,name=AssignedDishwasher,proto3" json:"AssignedDishwasher,omitempty"`
	MealID             string                 `protobuf:"bytes,3,opt,name=MealID,proto3" json:"MealID,omitempty"`
	Notes              string                 `protobuf:"bytes,4,opt,name=Notes,proto3" json:"Notes,omitempty"`
	unknownFields      protoimpl.UnknownFields
	MealScale          float32 `protobuf:"fixed32,5,opt,name=MealScale,proto3" json:"MealScale,omitempty"`
	sizeCache          protoimpl.SizeCache
}

func (x *MealPlanOptionCreationRequestInput) Reset() {
	*x = MealPlanOptionCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[383]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanOptionCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanOptionCreationRequestInput) ProtoMessage() {}

func (x *MealPlanOptionCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[383]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanOptionCreationRequestInput.ProtoReflect.Descriptor instead.
func (*MealPlanOptionCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{383}
}

func (x *MealPlanOptionCreationRequestInput) GetAssignedCook() string {
	if x != nil {
		return x.AssignedCook
	}
	return ""
}

func (x *MealPlanOptionCreationRequestInput) GetAssignedDishwasher() string {
	if x != nil {
		return x.AssignedDishwasher
	}
	return ""
}

func (x *MealPlanOptionCreationRequestInput) GetMealID() string {
	if x != nil {
		return x.MealID
	}
	return ""
}

func (x *MealPlanOptionCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MealPlanOptionCreationRequestInput) GetMealScale() float32 {
	if x != nil {
		return x.MealScale
	}
	return 0
}

type MealPlanOptionUpdateRequestInput struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	MealID                 string                 `protobuf:"bytes,1,opt,name=MealID,proto3" json:"MealID,omitempty"`
	Notes                  string                 `protobuf:"bytes,2,opt,name=Notes,proto3" json:"Notes,omitempty"`
	AssignedCook           string                 `protobuf:"bytes,3,opt,name=AssignedCook,proto3" json:"AssignedCook,omitempty"`
	AssignedDishwasher     string                 `protobuf:"bytes,4,opt,name=AssignedDishwasher,proto3" json:"AssignedDishwasher,omitempty"`
	BelongsToMealPlanEvent string                 `protobuf:"bytes,6,opt,name=BelongsToMealPlanEvent,proto3" json:"BelongsToMealPlanEvent,omitempty"`
	unknownFields          protoimpl.UnknownFields
	MealScale              float32 `protobuf:"fixed32,5,opt,name=MealScale,proto3" json:"MealScale,omitempty"`
	sizeCache              protoimpl.SizeCache
}

func (x *MealPlanOptionUpdateRequestInput) Reset() {
	*x = MealPlanOptionUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[384]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanOptionUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanOptionUpdateRequestInput) ProtoMessage() {}

func (x *MealPlanOptionUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[384]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanOptionUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*MealPlanOptionUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{384}
}

func (x *MealPlanOptionUpdateRequestInput) GetMealID() string {
	if x != nil {
		return x.MealID
	}
	return ""
}

func (x *MealPlanOptionUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MealPlanOptionUpdateRequestInput) GetAssignedCook() string {
	if x != nil {
		return x.AssignedCook
	}
	return ""
}

func (x *MealPlanOptionUpdateRequestInput) GetAssignedDishwasher() string {
	if x != nil {
		return x.AssignedDishwasher
	}
	return ""
}

func (x *MealPlanOptionUpdateRequestInput) GetMealScale() float32 {
	if x != nil {
		return x.MealScale
	}
	return 0
}

func (x *MealPlanOptionUpdateRequestInput) GetBelongsToMealPlanEvent() string {
	if x != nil {
		return x.BelongsToMealPlanEvent
	}
	return ""
}

type MealPlanOptionVote struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt               *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	ArchivedAt              *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	LastUpdatedAt           *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	ID                      string                 `protobuf:"bytes,4,opt,name=ID,proto3" json:"ID,omitempty"`
	Notes                   string                 `protobuf:"bytes,5,opt,name=Notes,proto3" json:"Notes,omitempty"`
	BelongsToMealPlanOption string                 `protobuf:"bytes,6,opt,name=BelongsToMealPlanOption,proto3" json:"BelongsToMealPlanOption,omitempty"`
	ByUser                  string                 `protobuf:"bytes,7,opt,name=ByUser,proto3" json:"ByUser,omitempty"`
	unknownFields           protoimpl.UnknownFields
	Rank                    uint32 `protobuf:"varint,8,opt,name=Rank,proto3" json:"Rank,omitempty"`
	sizeCache               protoimpl.SizeCache
	Abstain                 bool `protobuf:"varint,9,opt,name=Abstain,proto3" json:"Abstain,omitempty"`
}

func (x *MealPlanOptionVote) Reset() {
	*x = MealPlanOptionVote{}
	mi := &file_messages_eating_proto_msgTypes[385]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanOptionVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanOptionVote) ProtoMessage() {}

func (x *MealPlanOptionVote) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[385]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanOptionVote.ProtoReflect.Descriptor instead.
func (*MealPlanOptionVote) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{385}
}

func (x *MealPlanOptionVote) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MealPlanOptionVote) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *MealPlanOptionVote) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *MealPlanOptionVote) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MealPlanOptionVote) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MealPlanOptionVote) GetBelongsToMealPlanOption() string {
	if x != nil {
		return x.BelongsToMealPlanOption
	}
	return ""
}

func (x *MealPlanOptionVote) GetByUser() string {
	if x != nil {
		return x.ByUser
	}
	return ""
}

func (x *MealPlanOptionVote) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *MealPlanOptionVote) GetAbstain() bool {
	if x != nil {
		return x.Abstain
	}
	return false
}

type MealPlanOptionVoteCreationInput struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	ID                      string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Notes                   string                 `protobuf:"bytes,2,opt,name=Notes,proto3" json:"Notes,omitempty"`
	ByUser                  string                 `protobuf:"bytes,3,opt,name=ByUser,proto3" json:"ByUser,omitempty"`
	BelongsToMealPlanOption string                 `protobuf:"bytes,4,opt,name=BelongsToMealPlanOption,proto3" json:"BelongsToMealPlanOption,omitempty"`
	unknownFields           protoimpl.UnknownFields
	Rank                    uint32 `protobuf:"varint,5,opt,name=Rank,proto3" json:"Rank,omitempty"`
	sizeCache               protoimpl.SizeCache
	Abstain                 bool `protobuf:"varint,6,opt,name=Abstain,proto3" json:"Abstain,omitempty"`
}

func (x *MealPlanOptionVoteCreationInput) Reset() {
	*x = MealPlanOptionVoteCreationInput{}
	mi := &file_messages_eating_proto_msgTypes[386]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanOptionVoteCreationInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanOptionVoteCreationInput) ProtoMessage() {}

func (x *MealPlanOptionVoteCreationInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[386]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanOptionVoteCreationInput.ProtoReflect.Descriptor instead.
func (*MealPlanOptionVoteCreationInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{386}
}

func (x *MealPlanOptionVoteCreationInput) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MealPlanOptionVoteCreationInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MealPlanOptionVoteCreationInput) GetByUser() string {
	if x != nil {
		return x.ByUser
	}
	return ""
}

func (x *MealPlanOptionVoteCreationInput) GetBelongsToMealPlanOption() string {
	if x != nil {
		return x.BelongsToMealPlanOption
	}
	return ""
}

func (x *MealPlanOptionVoteCreationInput) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *MealPlanOptionVoteCreationInput) GetAbstain() bool {
	if x != nil {
		return x.Abstain
	}
	return false
}

type MealPlanOptionVoteCreationRequestInput struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Votes         []*MealPlanOptionVoteCreationInput `protobuf:"bytes,1,rep,name=Votes,proto3" json:"Votes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MealPlanOptionVoteCreationRequestInput) Reset() {
	*x = MealPlanOptionVoteCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[387]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanOptionVoteCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanOptionVoteCreationRequestInput) ProtoMessage() {}

func (x *MealPlanOptionVoteCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[387]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanOptionVoteCreationRequestInput.ProtoReflect.Descriptor instead.
func (*MealPlanOptionVoteCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{387}
}

func (x *MealPlanOptionVoteCreationRequestInput) GetVotes() []*MealPlanOptionVoteCreationInput {
	if x != nil {
		return x.Votes
	}
	return nil
}

type MealPlanOptionVoteUpdateRequestInput struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Notes                   string                 `protobuf:"bytes,1,opt,name=Notes,proto3" json:"Notes,omitempty"`
	BelongsToMealPlanOption string                 `protobuf:"bytes,4,opt,name=BelongsToMealPlanOption,proto3" json:"BelongsToMealPlanOption,omitempty"`
	unknownFields           protoimpl.UnknownFields
	Rank                    uint32 `protobuf:"varint,2,opt,name=Rank,proto3" json:"Rank,omitempty"`
	sizeCache               protoimpl.SizeCache
	Abstain                 bool `protobuf:"varint,3,opt,name=Abstain,proto3" json:"Abstain,omitempty"`
}

func (x *MealPlanOptionVoteUpdateRequestInput) Reset() {
	*x = MealPlanOptionVoteUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[388]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanOptionVoteUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanOptionVoteUpdateRequestInput) ProtoMessage() {}

func (x *MealPlanOptionVoteUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[388]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanOptionVoteUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*MealPlanOptionVoteUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{388}
}

func (x *MealPlanOptionVoteUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MealPlanOptionVoteUpdateRequestInput) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *MealPlanOptionVoteUpdateRequestInput) GetAbstain() bool {
	if x != nil {
		return x.Abstain
	}
	return false
}

func (x *MealPlanOptionVoteUpdateRequestInput) GetBelongsToMealPlanOption() string {
	if x != nil {
		return x.BelongsToMealPlanOption
	}
	return ""
}

type MealPlanTask struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	RecipePrepTask      *RecipePrepTask        `protobuf:"bytes,1,opt,name=RecipePrepTask,proto3" json:"RecipePrepTask,omitempty"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	LastUpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	CompletedAt         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=CompletedAt,proto3" json:"CompletedAt,omitempty"`
	AssignedToUser      string                 `protobuf:"bytes,5,opt,name=AssignedToUser,proto3" json:"AssignedToUser,omitempty"`
	ID                  string                 `protobuf:"bytes,6,opt,name=ID,proto3" json:"ID,omitempty"`
	Status              string                 `protobuf:"bytes,7,opt,name=Status,proto3" json:"Status,omitempty"`
	CreationExplanation string                 `protobuf:"bytes,8,opt,name=CreationExplanation,proto3" json:"CreationExplanation,omitempty"`
	StatusExplanation   string                 `protobuf:"bytes,9,opt,name=StatusExplanation,proto3" json:"StatusExplanation,omitempty"`
	MealPlanOption      *MealPlanOption        `protobuf:"bytes,10,opt,name=MealPlanOption,proto3" json:"MealPlanOption,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MealPlanTask) Reset() {
	*x = MealPlanTask{}
	mi := &file_messages_eating_proto_msgTypes[389]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanTask) ProtoMessage() {}

func (x *MealPlanTask) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[389]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanTask.ProtoReflect.Descriptor instead.
func (*MealPlanTask) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{389}
}

func (x *MealPlanTask) GetRecipePrepTask() *RecipePrepTask {
	if x != nil {
		return x.RecipePrepTask
	}
	return nil
}

func (x *MealPlanTask) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MealPlanTask) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *MealPlanTask) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *MealPlanTask) GetAssignedToUser() string {
	if x != nil {
		return x.AssignedToUser
	}
	return ""
}

func (x *MealPlanTask) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MealPlanTask) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MealPlanTask) GetCreationExplanation() string {
	if x != nil {
		return x.CreationExplanation
	}
	return ""
}

func (x *MealPlanTask) GetStatusExplanation() string {
	if x != nil {
		return x.StatusExplanation
	}
	return ""
}

func (x *MealPlanTask) GetMealPlanOption() *MealPlanOption {
	if x != nil {
		return x.MealPlanOption
	}
	return nil
}

type MealPlanTaskCreationRequestInput struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	AssignedToUser      string                 `protobuf:"bytes,1,opt,name=AssignedToUser,proto3" json:"AssignedToUser,omitempty"`
	Status              string                 `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
	CreationExplanation string                 `protobuf:"bytes,3,opt,name=CreationExplanation,proto3" json:"CreationExplanation,omitempty"`
	StatusExplanation   string                 `protobuf:"bytes,4,opt,name=StatusExplanation,proto3" json:"StatusExplanation,omitempty"`
	MealPlanOptionID    string                 `protobuf:"bytes,5,opt,name=MealPlanOptionID,proto3" json:"MealPlanOptionID,omitempty"`
	RecipePrepTaskID    string                 `protobuf:"bytes,6,opt,name=RecipePrepTaskID,proto3" json:"RecipePrepTaskID,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MealPlanTaskCreationRequestInput) Reset() {
	*x = MealPlanTaskCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[390]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanTaskCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanTaskCreationRequestInput) ProtoMessage() {}

func (x *MealPlanTaskCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[390]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanTaskCreationRequestInput.ProtoReflect.Descriptor instead.
func (*MealPlanTaskCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{390}
}

func (x *MealPlanTaskCreationRequestInput) GetAssignedToUser() string {
	if x != nil {
		return x.AssignedToUser
	}
	return ""
}

func (x *MealPlanTaskCreationRequestInput) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MealPlanTaskCreationRequestInput) GetCreationExplanation() string {
	if x != nil {
		return x.CreationExplanation
	}
	return ""
}

func (x *MealPlanTaskCreationRequestInput) GetStatusExplanation() string {
	if x != nil {
		return x.StatusExplanation
	}
	return ""
}

func (x *MealPlanTaskCreationRequestInput) GetMealPlanOptionID() string {
	if x != nil {
		return x.MealPlanOptionID
	}
	return ""
}

func (x *MealPlanTaskCreationRequestInput) GetRecipePrepTaskID() string {
	if x != nil {
		return x.RecipePrepTaskID
	}
	return ""
}

type MealPlanTaskStatusChangeRequestInput struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Status            string                 `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	StatusExplanation string                 `protobuf:"bytes,2,opt,name=StatusExplanation,proto3" json:"StatusExplanation,omitempty"`
	AssignedToUser    string                 `protobuf:"bytes,3,opt,name=AssignedToUser,proto3" json:"AssignedToUser,omitempty"`
	ID                string                 `protobuf:"bytes,4,opt,name=ID,proto3" json:"ID,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MealPlanTaskStatusChangeRequestInput) Reset() {
	*x = MealPlanTaskStatusChangeRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[391]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanTaskStatusChangeRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanTaskStatusChangeRequestInput) ProtoMessage() {}

func (x *MealPlanTaskStatusChangeRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[391]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanTaskStatusChangeRequestInput.ProtoReflect.Descriptor instead.
func (*MealPlanTaskStatusChangeRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{391}
}

func (x *MealPlanTaskStatusChangeRequestInput) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MealPlanTaskStatusChangeRequestInput) GetStatusExplanation() string {
	if x != nil {
		return x.StatusExplanation
	}
	return ""
}

func (x *MealPlanTaskStatusChangeRequestInput) GetAssignedToUser() string {
	if x != nil {
		return x.AssignedToUser
	}
	return ""
}

func (x *MealPlanTaskStatusChangeRequestInput) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type MealPlanUpdateRequestInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BelongsToHousehold string                 `protobuf:"bytes,1,opt,name=BelongsToHousehold,proto3" json:"BelongsToHousehold,omitempty"`
	Notes              string                 `protobuf:"bytes,2,opt,name=Notes,proto3" json:"Notes,omitempty"`
	VotingDeadline     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=VotingDeadline,proto3" json:"VotingDeadline,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *MealPlanUpdateRequestInput) Reset() {
	*x = MealPlanUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[392]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanUpdateRequestInput) ProtoMessage() {}

func (x *MealPlanUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[392]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*MealPlanUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{392}
}

func (x *MealPlanUpdateRequestInput) GetBelongsToHousehold() string {
	if x != nil {
		return x.BelongsToHousehold
	}
	return ""
}

func (x *MealPlanUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MealPlanUpdateRequestInput) GetVotingDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.VotingDeadline
	}
	return nil
}

type MealUpdateRequestInput struct {
	state                protoimpl.MessageState                         `protogen:"open.v1"`
	EstimatedPortions    *Float32RangeWithOptionalMaxUpdateRequestInput `protobuf:"bytes,4,opt,name=EstimatedPortions,proto3" json:"EstimatedPortions,omitempty"`
	Name                 string                                         `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Description          string                                         `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	CreatedByUser        string                                         `protobuf:"bytes,3,opt,name=CreatedByUser,proto3" json:"CreatedByUser,omitempty"`
	Components           []*MealComponentUpdateRequestInput             `protobuf:"bytes,6,rep,name=Components,proto3" json:"Components,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
	EligibleForMealPlans bool `protobuf:"varint,5,opt,name=EligibleForMealPlans,proto3" json:"EligibleForMealPlans,omitempty"`
}

func (x *MealUpdateRequestInput) Reset() {
	*x = MealUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[393]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealUpdateRequestInput) ProtoMessage() {}

func (x *MealUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[393]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*MealUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{393}
}

func (x *MealUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MealUpdateRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MealUpdateRequestInput) GetCreatedByUser() string {
	if x != nil {
		return x.CreatedByUser
	}
	return ""
}

func (x *MealUpdateRequestInput) GetEstimatedPortions() *Float32RangeWithOptionalMaxUpdateRequestInput {
	if x != nil {
		return x.EstimatedPortions
	}
	return nil
}

func (x *MealUpdateRequestInput) GetEligibleForMealPlans() bool {
	if x != nil {
		return x.EligibleForMealPlans
	}
	return false
}

func (x *MealUpdateRequestInput) GetComponents() []*MealComponentUpdateRequestInput {
	if x != nil {
		return x.Components
	}
	return nil
}

// ArchiveMeal
type ArchiveMealRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MealID        string                 `protobuf:"bytes,1,opt,name=mealID,proto3" json:"mealID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveMealRequest) Reset() {
	*x = ArchiveMealRequest{}
	mi := &file_messages_eating_proto_msgTypes[394]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveMealRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveMealRequest) ProtoMessage() {}

func (x *ArchiveMealRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[394]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveMealRequest.ProtoReflect.Descriptor instead.
func (*ArchiveMealRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{394}
}

func (x *ArchiveMealRequest) GetMealID() string {
	if x != nil {
		return x.MealID
	}
	return ""
}

type ArchiveMealResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveMealResponse) Reset() {
	*x = ArchiveMealResponse{}
	mi := &file_messages_eating_proto_msgTypes[395]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveMealResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveMealResponse) ProtoMessage() {}

func (x *ArchiveMealResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[395]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveMealResponse.ProtoReflect.Descriptor instead.
func (*ArchiveMealResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{395}
}

// ArchiveMealPlan
type ArchiveMealPlanRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MealPlanID    string                 `protobuf:"bytes,1,opt,name=mealPlanID,proto3" json:"mealPlanID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveMealPlanRequest) Reset() {
	*x = ArchiveMealPlanRequest{}
	mi := &file_messages_eating_proto_msgTypes[396]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveMealPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveMealPlanRequest) ProtoMessage() {}

func (x *ArchiveMealPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[396]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveMealPlanRequest.ProtoReflect.Descriptor instead.
func (*ArchiveMealPlanRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{396}
}

func (x *ArchiveMealPlanRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

type ArchiveMealPlanResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveMealPlanResponse) Reset() {
	*x = ArchiveMealPlanResponse{}
	mi := &file_messages_eating_proto_msgTypes[397]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveMealPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveMealPlanResponse) ProtoMessage() {}

func (x *ArchiveMealPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[397]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveMealPlanResponse.ProtoReflect.Descriptor instead.
func (*ArchiveMealPlanResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{397}
}

// ArchiveMealPlanEvent
type ArchiveMealPlanEventRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	MealPlanID      string                 `protobuf:"bytes,1,opt,name=mealPlanID,proto3" json:"mealPlanID,omitempty"`
	MealPlanEventID string                 `protobuf:"bytes,2,opt,name=mealPlanEventID,proto3" json:"mealPlanEventID,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ArchiveMealPlanEventRequest) Reset() {
	*x = ArchiveMealPlanEventRequest{}
	mi := &file_messages_eating_proto_msgTypes[398]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveMealPlanEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveMealPlanEventRequest) ProtoMessage() {}

func (x *ArchiveMealPlanEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[398]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveMealPlanEventRequest.ProtoReflect.Descriptor instead.
func (*ArchiveMealPlanEventRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{398}
}

func (x *ArchiveMealPlanEventRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *ArchiveMealPlanEventRequest) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

type ArchiveMealPlanEventResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveMealPlanEventResponse) Reset() {
	*x = ArchiveMealPlanEventResponse{}
	mi := &file_messages_eating_proto_msgTypes[399]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveMealPlanEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveMealPlanEventResponse) ProtoMessage() {}

func (x *ArchiveMealPlanEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[399]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveMealPlanEventResponse.ProtoReflect.Descriptor instead.
func (*ArchiveMealPlanEventResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{399}
}

// ArchiveMealPlanGroceryListItem
type ArchiveMealPlanGroceryListItemRequest struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	MealPlanID                string                 `protobuf:"bytes,1,opt,name=mealPlanID,proto3" json:"mealPlanID,omitempty"`
	MealPlanGroceryListItemID string                 `protobuf:"bytes,2,opt,name=mealPlanGroceryListItemID,proto3" json:"mealPlanGroceryListItemID,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *ArchiveMealPlanGroceryListItemRequest) Reset() {
	*x = ArchiveMealPlanGroceryListItemRequest{}
	mi := &file_messages_eating_proto_msgTypes[400]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveMealPlanGroceryListItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveMealPlanGroceryListItemRequest) ProtoMessage() {}

func (x *ArchiveMealPlanGroceryListItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[400]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveMealPlanGroceryListItemRequest.ProtoReflect.Descriptor instead.
func (*ArchiveMealPlanGroceryListItemRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{400}
}

func (x *ArchiveMealPlanGroceryListItemRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *ArchiveMealPlanGroceryListItemRequest) GetMealPlanGroceryListItemID() string {
	if x != nil {
		return x.MealPlanGroceryListItemID
	}
	return ""
}

type ArchiveMealPlanGroceryListItemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveMealPlanGroceryListItemResponse) Reset() {
	*x = ArchiveMealPlanGroceryListItemResponse{}
	mi := &file_messages_eating_proto_msgTypes[401]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveMealPlanGroceryListItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveMealPlanGroceryListItemResponse) ProtoMessage() {}

func (x *ArchiveMealPlanGroceryListItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[401]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveMealPlanGroceryListItemResponse.ProtoReflect.Descriptor instead.
func (*ArchiveMealPlanGroceryListItemResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{401}
}

// ArchiveMealPlanOption
type ArchiveMealPlanOptionRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	MealPlanID       string                 `protobuf:"bytes,1,opt,name=MealPlanID,proto3" json:"MealPlanID,omitempty"`
	MealPlanEventID  string                 `protobuf:"bytes,2,opt,name=MealPlanEventID,proto3" json:"MealPlanEventID,omitempty"`
	MealPlanOptionID string                 `protobuf:"bytes,3,opt,name=MealPlanOptionID,proto3" json:"MealPlanOptionID,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ArchiveMealPlanOptionRequest) Reset() {
	*x = ArchiveMealPlanOptionRequest{}
	mi := &file_messages_eating_proto_msgTypes[402]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveMealPlanOptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveMealPlanOptionRequest) ProtoMessage() {}

func (x *ArchiveMealPlanOptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[402]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveMealPlanOptionRequest.ProtoReflect.Descriptor instead.
func (*ArchiveMealPlanOptionRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{402}
}

func (x *ArchiveMealPlanOptionRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *ArchiveMealPlanOptionRequest) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

func (x *ArchiveMealPlanOptionRequest) GetMealPlanOptionID() string {
	if x != nil {
		return x.MealPlanOptionID
	}
	return ""
}

type ArchiveMealPlanOptionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveMealPlanOptionResponse) Reset() {
	*x = ArchiveMealPlanOptionResponse{}
	mi := &file_messages_eating_proto_msgTypes[403]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveMealPlanOptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveMealPlanOptionResponse) ProtoMessage() {}

func (x *ArchiveMealPlanOptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[403]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveMealPlanOptionResponse.ProtoReflect.Descriptor instead.
func (*ArchiveMealPlanOptionResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{403}
}

// ArchiveMealPlanOptionVote
type ArchiveMealPlanOptionVoteRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MealPlanID           string                 `protobuf:"bytes,1,opt,name=mealPlanID,proto3" json:"mealPlanID,omitempty"`
	MealPlanEventID      string                 `protobuf:"bytes,2,opt,name=mealPlanEventID,proto3" json:"mealPlanEventID,omitempty"`
	MealPlanOptionID     string                 `protobuf:"bytes,3,opt,name=mealPlanOptionID,proto3" json:"mealPlanOptionID,omitempty"`
	MealPlanOptionVoteID string                 `protobuf:"bytes,4,opt,name=mealPlanOptionVoteID,proto3" json:"mealPlanOptionVoteID,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ArchiveMealPlanOptionVoteRequest) Reset() {
	*x = ArchiveMealPlanOptionVoteRequest{}
	mi := &file_messages_eating_proto_msgTypes[404]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveMealPlanOptionVoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveMealPlanOptionVoteRequest) ProtoMessage() {}

func (x *ArchiveMealPlanOptionVoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[404]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveMealPlanOptionVoteRequest.ProtoReflect.Descriptor instead.
func (*ArchiveMealPlanOptionVoteRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{404}
}

func (x *ArchiveMealPlanOptionVoteRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *ArchiveMealPlanOptionVoteRequest) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

func (x *ArchiveMealPlanOptionVoteRequest) GetMealPlanOptionID() string {
	if x != nil {
		return x.MealPlanOptionID
	}
	return ""
}

func (x *ArchiveMealPlanOptionVoteRequest) GetMealPlanOptionVoteID() string {
	if x != nil {
		return x.MealPlanOptionVoteID
	}
	return ""
}

type ArchiveMealPlanOptionVoteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveMealPlanOptionVoteResponse) Reset() {
	*x = ArchiveMealPlanOptionVoteResponse{}
	mi := &file_messages_eating_proto_msgTypes[405]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveMealPlanOptionVoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveMealPlanOptionVoteResponse) ProtoMessage() {}

func (x *ArchiveMealPlanOptionVoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[405]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveMealPlanOptionVoteResponse.ProtoReflect.Descriptor instead.
func (*ArchiveMealPlanOptionVoteResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{405}
}

// CreateMeal
type CreateMealRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMealRequest) Reset() {
	*x = CreateMealRequest{}
	mi := &file_messages_eating_proto_msgTypes[406]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMealRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMealRequest) ProtoMessage() {}

func (x *CreateMealRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[406]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMealRequest.ProtoReflect.Descriptor instead.
func (*CreateMealRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{406}
}

type CreateMealResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMealResponse) Reset() {
	*x = CreateMealResponse{}
	mi := &file_messages_eating_proto_msgTypes[407]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMealResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMealResponse) ProtoMessage() {}

func (x *CreateMealResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[407]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMealResponse.ProtoReflect.Descriptor instead.
func (*CreateMealResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{407}
}

// CreateMealPlan
type CreateMealPlanRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMealPlanRequest) Reset() {
	*x = CreateMealPlanRequest{}
	mi := &file_messages_eating_proto_msgTypes[408]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMealPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMealPlanRequest) ProtoMessage() {}

func (x *CreateMealPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[408]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMealPlanRequest.ProtoReflect.Descriptor instead.
func (*CreateMealPlanRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{408}
}

type CreateMealPlanResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMealPlanResponse) Reset() {
	*x = CreateMealPlanResponse{}
	mi := &file_messages_eating_proto_msgTypes[409]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMealPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMealPlanResponse) ProtoMessage() {}

func (x *CreateMealPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[409]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMealPlanResponse.ProtoReflect.Descriptor instead.
func (*CreateMealPlanResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{409}
}

// CreateMealPlanEvent
type CreateMealPlanEventRequest struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	MealPlanID    string                             `protobuf:"bytes,1,opt,name=mealPlanID,proto3" json:"mealPlanID,omitempty"`
	Input         *MealPlanEventCreationRequestInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMealPlanEventRequest) Reset() {
	*x = CreateMealPlanEventRequest{}
	mi := &file_messages_eating_proto_msgTypes[410]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMealPlanEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMealPlanEventRequest) ProtoMessage() {}

func (x *CreateMealPlanEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[410]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMealPlanEventRequest.ProtoReflect.Descriptor instead.
func (*CreateMealPlanEventRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{410}
}

func (x *CreateMealPlanEventRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *CreateMealPlanEventRequest) GetInput() *MealPlanEventCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type CreateMealPlanEventResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMealPlanEventResponse) Reset() {
	*x = CreateMealPlanEventResponse{}
	mi := &file_messages_eating_proto_msgTypes[411]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMealPlanEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMealPlanEventResponse) ProtoMessage() {}

func (x *CreateMealPlanEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[411]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMealPlanEventResponse.ProtoReflect.Descriptor instead.
func (*CreateMealPlanEventResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{411}
}

// CreateMealPlanGroceryListItem
type CreateMealPlanGroceryListItemRequest struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	MealPlanID    string                                       `protobuf:"bytes,1,opt,name=mealPlanID,proto3" json:"mealPlanID,omitempty"`
	Input         *MealPlanGroceryListItemCreationRequestInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMealPlanGroceryListItemRequest) Reset() {
	*x = CreateMealPlanGroceryListItemRequest{}
	mi := &file_messages_eating_proto_msgTypes[412]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMealPlanGroceryListItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMealPlanGroceryListItemRequest) ProtoMessage() {}

func (x *CreateMealPlanGroceryListItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[412]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMealPlanGroceryListItemRequest.ProtoReflect.Descriptor instead.
func (*CreateMealPlanGroceryListItemRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{412}
}

func (x *CreateMealPlanGroceryListItemRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *CreateMealPlanGroceryListItemRequest) GetInput() *MealPlanGroceryListItemCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type CreateMealPlanGroceryListItemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMealPlanGroceryListItemResponse) Reset() {
	*x = CreateMealPlanGroceryListItemResponse{}
	mi := &file_messages_eating_proto_msgTypes[413]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMealPlanGroceryListItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMealPlanGroceryListItemResponse) ProtoMessage() {}

func (x *CreateMealPlanGroceryListItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[413]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMealPlanGroceryListItemResponse.ProtoReflect.Descriptor instead.
func (*CreateMealPlanGroceryListItemResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{413}
}

// CreateMealPlanOption
type CreateMealPlanOptionRequest struct {
	state           protoimpl.MessageState              `protogen:"open.v1"`
	MealPlanID      string                              `protobuf:"bytes,1,opt,name=mealPlanID,proto3" json:"mealPlanID,omitempty"`
	MealPlanEventID string                              `protobuf:"bytes,2,opt,name=mealPlanEventID,proto3" json:"mealPlanEventID,omitempty"`
	Input           *MealPlanOptionCreationRequestInput `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreateMealPlanOptionRequest) Reset() {
	*x = CreateMealPlanOptionRequest{}
	mi := &file_messages_eating_proto_msgTypes[414]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMealPlanOptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMealPlanOptionRequest) ProtoMessage() {}

func (x *CreateMealPlanOptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[414]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMealPlanOptionRequest.ProtoReflect.Descriptor instead.
func (*CreateMealPlanOptionRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{414}
}

func (x *CreateMealPlanOptionRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *CreateMealPlanOptionRequest) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

func (x *CreateMealPlanOptionRequest) GetInput() *MealPlanOptionCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type CreateMealPlanOptionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMealPlanOptionResponse) Reset() {
	*x = CreateMealPlanOptionResponse{}
	mi := &file_messages_eating_proto_msgTypes[415]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMealPlanOptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMealPlanOptionResponse) ProtoMessage() {}

func (x *CreateMealPlanOptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[415]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMealPlanOptionResponse.ProtoReflect.Descriptor instead.
func (*CreateMealPlanOptionResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{415}
}

// CreateMealPlanOptionVote
type CreateMealPlanOptionVoteRequest struct {
	state           protoimpl.MessageState                  `protogen:"open.v1"`
	MealPlanID      string                                  `protobuf:"bytes,1,opt,name=mealPlanID,proto3" json:"mealPlanID,omitempty"`
	MealPlanEventID string                                  `protobuf:"bytes,2,opt,name=mealPlanEventID,proto3" json:"mealPlanEventID,omitempty"`
	Input           *MealPlanOptionVoteCreationRequestInput `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreateMealPlanOptionVoteRequest) Reset() {
	*x = CreateMealPlanOptionVoteRequest{}
	mi := &file_messages_eating_proto_msgTypes[416]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMealPlanOptionVoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMealPlanOptionVoteRequest) ProtoMessage() {}

func (x *CreateMealPlanOptionVoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[416]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMealPlanOptionVoteRequest.ProtoReflect.Descriptor instead.
func (*CreateMealPlanOptionVoteRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{416}
}

func (x *CreateMealPlanOptionVoteRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *CreateMealPlanOptionVoteRequest) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

func (x *CreateMealPlanOptionVoteRequest) GetInput() *MealPlanOptionVoteCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type CreateMealPlanOptionVoteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMealPlanOptionVoteResponse) Reset() {
	*x = CreateMealPlanOptionVoteResponse{}
	mi := &file_messages_eating_proto_msgTypes[417]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMealPlanOptionVoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMealPlanOptionVoteResponse) ProtoMessage() {}

func (x *CreateMealPlanOptionVoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[417]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMealPlanOptionVoteResponse.ProtoReflect.Descriptor instead.
func (*CreateMealPlanOptionVoteResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{417}
}

// CreateMealPlanTask
type CreateMealPlanTaskRequest struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	MealPlanID    string                            `protobuf:"bytes,1,opt,name=mealPlanID,proto3" json:"mealPlanID,omitempty"`
	Input         *MealPlanTaskCreationRequestInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMealPlanTaskRequest) Reset() {
	*x = CreateMealPlanTaskRequest{}
	mi := &file_messages_eating_proto_msgTypes[418]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMealPlanTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMealPlanTaskRequest) ProtoMessage() {}

func (x *CreateMealPlanTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[418]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMealPlanTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateMealPlanTaskRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{418}
}

func (x *CreateMealPlanTaskRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *CreateMealPlanTaskRequest) GetInput() *MealPlanTaskCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type CreateMealPlanTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMealPlanTaskResponse) Reset() {
	*x = CreateMealPlanTaskResponse{}
	mi := &file_messages_eating_proto_msgTypes[419]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMealPlanTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMealPlanTaskResponse) ProtoMessage() {}

func (x *CreateMealPlanTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[419]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMealPlanTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateMealPlanTaskResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{419}
}

// FinalizeMealPlan
type FinalizeMealPlanRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MealPlanID    string                 `protobuf:"bytes,1,opt,name=mealPlanID,proto3" json:"mealPlanID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinalizeMealPlanRequest) Reset() {
	*x = FinalizeMealPlanRequest{}
	mi := &file_messages_eating_proto_msgTypes[420]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeMealPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeMealPlanRequest) ProtoMessage() {}

func (x *FinalizeMealPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[420]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeMealPlanRequest.ProtoReflect.Descriptor instead.
func (*FinalizeMealPlanRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{420}
}

func (x *FinalizeMealPlanRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

type FinalizeMealPlanResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinalizeMealPlanResponse) Reset() {
	*x = FinalizeMealPlanResponse{}
	mi := &file_messages_eating_proto_msgTypes[421]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeMealPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeMealPlanResponse) ProtoMessage() {}

func (x *FinalizeMealPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[421]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeMealPlanResponse.ProtoReflect.Descriptor instead.
func (*FinalizeMealPlanResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{421}
}

// GetMeal
type GetMealRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MealID        string                 `protobuf:"bytes,1,opt,name=mealID,proto3" json:"mealID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealRequest) Reset() {
	*x = GetMealRequest{}
	mi := &file_messages_eating_proto_msgTypes[422]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealRequest) ProtoMessage() {}

func (x *GetMealRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[422]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealRequest.ProtoReflect.Descriptor instead.
func (*GetMealRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{422}
}

func (x *GetMealRequest) GetMealID() string {
	if x != nil {
		return x.MealID
	}
	return ""
}

type GetMealResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealResponse) Reset() {
	*x = GetMealResponse{}
	mi := &file_messages_eating_proto_msgTypes[423]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealResponse) ProtoMessage() {}

func (x *GetMealResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[423]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealResponse.ProtoReflect.Descriptor instead.
func (*GetMealResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{423}
}

// GetMealPlan
type GetMealPlanRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MealPlanID    string                 `protobuf:"bytes,1,opt,name=mealPlanID,proto3" json:"mealPlanID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealPlanRequest) Reset() {
	*x = GetMealPlanRequest{}
	mi := &file_messages_eating_proto_msgTypes[424]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanRequest) ProtoMessage() {}

func (x *GetMealPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[424]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanRequest.ProtoReflect.Descriptor instead.
func (*GetMealPlanRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{424}
}

func (x *GetMealPlanRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

type GetMealPlanResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealPlanResponse) Reset() {
	*x = GetMealPlanResponse{}
	mi := &file_messages_eating_proto_msgTypes[425]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanResponse) ProtoMessage() {}

func (x *GetMealPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[425]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanResponse.ProtoReflect.Descriptor instead.
func (*GetMealPlanResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{425}
}

// GetMealPlanEvent
type GetMealPlanEventRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	MealPlanID      string                 `protobuf:"bytes,1,opt,name=mealPlanID,proto3" json:"mealPlanID,omitempty"`
	MealPlanEventID string                 `protobuf:"bytes,2,opt,name=mealPlanEventID,proto3" json:"mealPlanEventID,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetMealPlanEventRequest) Reset() {
	*x = GetMealPlanEventRequest{}
	mi := &file_messages_eating_proto_msgTypes[426]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanEventRequest) ProtoMessage() {}

func (x *GetMealPlanEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[426]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanEventRequest.ProtoReflect.Descriptor instead.
func (*GetMealPlanEventRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{426}
}

func (x *GetMealPlanEventRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *GetMealPlanEventRequest) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

type GetMealPlanEventResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealPlanEventResponse) Reset() {
	*x = GetMealPlanEventResponse{}
	mi := &file_messages_eating_proto_msgTypes[427]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanEventResponse) ProtoMessage() {}

func (x *GetMealPlanEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[427]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanEventResponse.ProtoReflect.Descriptor instead.
func (*GetMealPlanEventResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{427}
}

// GetMealPlanEvents
type GetMealPlanEventsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	MealPlanID    string                 `protobuf:"bytes,2,opt,name=mealPlanID,proto3" json:"mealPlanID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealPlanEventsRequest) Reset() {
	*x = GetMealPlanEventsRequest{}
	mi := &file_messages_eating_proto_msgTypes[428]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanEventsRequest) ProtoMessage() {}

func (x *GetMealPlanEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[428]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanEventsRequest.ProtoReflect.Descriptor instead.
func (*GetMealPlanEventsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{428}
}

func (x *GetMealPlanEventsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetMealPlanEventsRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

type GetMealPlanEventsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*MealPlanEvent       `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealPlanEventsResponse) Reset() {
	*x = GetMealPlanEventsResponse{}
	mi := &file_messages_eating_proto_msgTypes[429]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanEventsResponse) ProtoMessage() {}

func (x *GetMealPlanEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[429]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanEventsResponse.ProtoReflect.Descriptor instead.
func (*GetMealPlanEventsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{429}
}

func (x *GetMealPlanEventsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetMealPlanEventsResponse) GetResults() []*MealPlanEvent {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetMealPlanGroceryListItem
type GetMealPlanGroceryListItemRequest struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	MealPlanID                string                 `protobuf:"bytes,1,opt,name=mealPlanID,proto3" json:"mealPlanID,omitempty"`
	MealPlanGroceryListItemID string                 `protobuf:"bytes,2,opt,name=mealPlanGroceryListItemID,proto3" json:"mealPlanGroceryListItemID,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *GetMealPlanGroceryListItemRequest) Reset() {
	*x = GetMealPlanGroceryListItemRequest{}
	mi := &file_messages_eating_proto_msgTypes[430]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanGroceryListItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanGroceryListItemRequest) ProtoMessage() {}

func (x *GetMealPlanGroceryListItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[430]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanGroceryListItemRequest.ProtoReflect.Descriptor instead.
func (*GetMealPlanGroceryListItemRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{430}
}

func (x *GetMealPlanGroceryListItemRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *GetMealPlanGroceryListItemRequest) GetMealPlanGroceryListItemID() string {
	if x != nil {
		return x.MealPlanGroceryListItemID
	}
	return ""
}

type GetMealPlanGroceryListItemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealPlanGroceryListItemResponse) Reset() {
	*x = GetMealPlanGroceryListItemResponse{}
	mi := &file_messages_eating_proto_msgTypes[431]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanGroceryListItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanGroceryListItemResponse) ProtoMessage() {}

func (x *GetMealPlanGroceryListItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[431]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanGroceryListItemResponse.ProtoReflect.Descriptor instead.
func (*GetMealPlanGroceryListItemResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{431}
}

// GetMealPlanGroceryListItemsForMealPlan
type GetMealPlanGroceryListItemsForMealPlanRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	MealPlanID    string                 `protobuf:"bytes,2,opt,name=mealPlanID,proto3" json:"mealPlanID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealPlanGroceryListItemsForMealPlanRequest) Reset() {
	*x = GetMealPlanGroceryListItemsForMealPlanRequest{}
	mi := &file_messages_eating_proto_msgTypes[432]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanGroceryListItemsForMealPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanGroceryListItemsForMealPlanRequest) ProtoMessage() {}

func (x *GetMealPlanGroceryListItemsForMealPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[432]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanGroceryListItemsForMealPlanRequest.ProtoReflect.Descriptor instead.
func (*GetMealPlanGroceryListItemsForMealPlanRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{432}
}

func (x *GetMealPlanGroceryListItemsForMealPlanRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetMealPlanGroceryListItemsForMealPlanRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

type GetMealPlanGroceryListItemsForMealPlanResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Filter        *QueryFilter               `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*MealPlanGroceryListItem `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealPlanGroceryListItemsForMealPlanResponse) Reset() {
	*x = GetMealPlanGroceryListItemsForMealPlanResponse{}
	mi := &file_messages_eating_proto_msgTypes[433]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanGroceryListItemsForMealPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanGroceryListItemsForMealPlanResponse) ProtoMessage() {}

func (x *GetMealPlanGroceryListItemsForMealPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[433]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanGroceryListItemsForMealPlanResponse.ProtoReflect.Descriptor instead.
func (*GetMealPlanGroceryListItemsForMealPlanResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{433}
}

func (x *GetMealPlanGroceryListItemsForMealPlanResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetMealPlanGroceryListItemsForMealPlanResponse) GetResults() []*MealPlanGroceryListItem {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetMealPlanOption
type GetMealPlanOptionRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	MealPlanID       string                 `protobuf:"bytes,1,opt,name=MealPlanID,proto3" json:"MealPlanID,omitempty"`
	MealPlanEventID  string                 `protobuf:"bytes,2,opt,name=MealPlanEventID,proto3" json:"MealPlanEventID,omitempty"`
	MealPlanOptionID string                 `protobuf:"bytes,3,opt,name=MealPlanOptionID,proto3" json:"MealPlanOptionID,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetMealPlanOptionRequest) Reset() {
	*x = GetMealPlanOptionRequest{}
	mi := &file_messages_eating_proto_msgTypes[434]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanOptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanOptionRequest) ProtoMessage() {}

func (x *GetMealPlanOptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[434]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanOptionRequest.ProtoReflect.Descriptor instead.
func (*GetMealPlanOptionRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{434}
}

func (x *GetMealPlanOptionRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *GetMealPlanOptionRequest) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

func (x *GetMealPlanOptionRequest) GetMealPlanOptionID() string {
	if x != nil {
		return x.MealPlanOptionID
	}
	return ""
}

type GetMealPlanOptionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealPlanOptionResponse) Reset() {
	*x = GetMealPlanOptionResponse{}
	mi := &file_messages_eating_proto_msgTypes[435]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanOptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanOptionResponse) ProtoMessage() {}

func (x *GetMealPlanOptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[435]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanOptionResponse.ProtoReflect.Descriptor instead.
func (*GetMealPlanOptionResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{435}
}

// GetMealPlanOptionVote
type GetMealPlanOptionVoteRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MealPlanID           string                 `protobuf:"bytes,1,opt,name=mealPlanID,proto3" json:"mealPlanID,omitempty"`
	MealPlanEventID      string                 `protobuf:"bytes,2,opt,name=mealPlanEventID,proto3" json:"mealPlanEventID,omitempty"`
	MealPlanOptionID     string                 `protobuf:"bytes,3,opt,name=mealPlanOptionID,proto3" json:"mealPlanOptionID,omitempty"`
	MealPlanOptionVoteID string                 `protobuf:"bytes,4,opt,name=mealPlanOptionVoteID,proto3" json:"mealPlanOptionVoteID,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetMealPlanOptionVoteRequest) Reset() {
	*x = GetMealPlanOptionVoteRequest{}
	mi := &file_messages_eating_proto_msgTypes[436]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanOptionVoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanOptionVoteRequest) ProtoMessage() {}

func (x *GetMealPlanOptionVoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[436]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanOptionVoteRequest.ProtoReflect.Descriptor instead.
func (*GetMealPlanOptionVoteRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{436}
}

func (x *GetMealPlanOptionVoteRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *GetMealPlanOptionVoteRequest) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

func (x *GetMealPlanOptionVoteRequest) GetMealPlanOptionID() string {
	if x != nil {
		return x.MealPlanOptionID
	}
	return ""
}

func (x *GetMealPlanOptionVoteRequest) GetMealPlanOptionVoteID() string {
	if x != nil {
		return x.MealPlanOptionVoteID
	}
	return ""
}

type GetMealPlanOptionVoteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealPlanOptionVoteResponse) Reset() {
	*x = GetMealPlanOptionVoteResponse{}
	mi := &file_messages_eating_proto_msgTypes[437]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanOptionVoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanOptionVoteResponse) ProtoMessage() {}

func (x *GetMealPlanOptionVoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[437]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanOptionVoteResponse.ProtoReflect.Descriptor instead.
func (*GetMealPlanOptionVoteResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{437}
}

// GetMealPlanOptionVotes
type GetMealPlanOptionVotesRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Filter           *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	MealPlanID       string                 `protobuf:"bytes,2,opt,name=mealPlanID,proto3" json:"mealPlanID,omitempty"`
	MealPlanEventID  string                 `protobuf:"bytes,3,opt,name=mealPlanEventID,proto3" json:"mealPlanEventID,omitempty"`
	MealPlanOptionID string                 `protobuf:"bytes,4,opt,name=mealPlanOptionID,proto3" json:"mealPlanOptionID,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetMealPlanOptionVotesRequest) Reset() {
	*x = GetMealPlanOptionVotesRequest{}
	mi := &file_messages_eating_proto_msgTypes[438]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanOptionVotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanOptionVotesRequest) ProtoMessage() {}

func (x *GetMealPlanOptionVotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[438]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanOptionVotesRequest.ProtoReflect.Descriptor instead.
func (*GetMealPlanOptionVotesRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{438}
}

func (x *GetMealPlanOptionVotesRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetMealPlanOptionVotesRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *GetMealPlanOptionVotesRequest) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

func (x *GetMealPlanOptionVotesRequest) GetMealPlanOptionID() string {
	if x != nil {
		return x.MealPlanOptionID
	}
	return ""
}

type GetMealPlanOptionVotesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*MealPlanOptionVote  `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealPlanOptionVotesResponse) Reset() {
	*x = GetMealPlanOptionVotesResponse{}
	mi := &file_messages_eating_proto_msgTypes[439]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanOptionVotesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanOptionVotesResponse) ProtoMessage() {}

func (x *GetMealPlanOptionVotesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[439]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanOptionVotesResponse.ProtoReflect.Descriptor instead.
func (*GetMealPlanOptionVotesResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{439}
}

func (x *GetMealPlanOptionVotesResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetMealPlanOptionVotesResponse) GetResults() []*MealPlanOptionVote {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetMealPlanOptions
type GetMealPlanOptionsRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Filter          *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	MealPlanID      string                 `protobuf:"bytes,2,opt,name=mealPlanID,proto3" json:"mealPlanID,omitempty"`
	MealPlanEventID string                 `protobuf:"bytes,3,opt,name=mealPlanEventID,proto3" json:"mealPlanEventID,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetMealPlanOptionsRequest) Reset() {
	*x = GetMealPlanOptionsRequest{}
	mi := &file_messages_eating_proto_msgTypes[440]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanOptionsRequest) ProtoMessage() {}

func (x *GetMealPlanOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[440]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanOptionsRequest.ProtoReflect.Descriptor instead.
func (*GetMealPlanOptionsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{440}
}

func (x *GetMealPlanOptionsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetMealPlanOptionsRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *GetMealPlanOptionsRequest) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

type GetMealPlanOptionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Result        []*MealPlanOption      `protobuf:"bytes,2,rep,name=Result,proto3" json:"Result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealPlanOptionsResponse) Reset() {
	*x = GetMealPlanOptionsResponse{}
	mi := &file_messages_eating_proto_msgTypes[441]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanOptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanOptionsResponse) ProtoMessage() {}

func (x *GetMealPlanOptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[441]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanOptionsResponse.ProtoReflect.Descriptor instead.
func (*GetMealPlanOptionsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{441}
}

func (x *GetMealPlanOptionsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetMealPlanOptionsResponse) GetResult() []*MealPlanOption {
	if x != nil {
		return x.Result
	}
	return nil
}

// GetMealPlanTask
type GetMealPlanTaskRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	MealPlanID     string                 `protobuf:"bytes,1,opt,name=mealPlanID,proto3" json:"mealPlanID,omitempty"`
	MealPlanTaskID string                 `protobuf:"bytes,2,opt,name=mealPlanTaskID,proto3" json:"mealPlanTaskID,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetMealPlanTaskRequest) Reset() {
	*x = GetMealPlanTaskRequest{}
	mi := &file_messages_eating_proto_msgTypes[442]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanTaskRequest) ProtoMessage() {}

func (x *GetMealPlanTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[442]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanTaskRequest.ProtoReflect.Descriptor instead.
func (*GetMealPlanTaskRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{442}
}

func (x *GetMealPlanTaskRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *GetMealPlanTaskRequest) GetMealPlanTaskID() string {
	if x != nil {
		return x.MealPlanTaskID
	}
	return ""
}

type GetMealPlanTaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealPlanTaskResponse) Reset() {
	*x = GetMealPlanTaskResponse{}
	mi := &file_messages_eating_proto_msgTypes[443]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanTaskResponse) ProtoMessage() {}

func (x *GetMealPlanTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[443]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanTaskResponse.ProtoReflect.Descriptor instead.
func (*GetMealPlanTaskResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{443}
}

// GetMealPlanTasks
type GetMealPlanTasksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	MealPlanID    string                 `protobuf:"bytes,2,opt,name=mealPlanID,proto3" json:"mealPlanID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealPlanTasksRequest) Reset() {
	*x = GetMealPlanTasksRequest{}
	mi := &file_messages_eating_proto_msgTypes[444]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanTasksRequest) ProtoMessage() {}

func (x *GetMealPlanTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[444]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanTasksRequest.ProtoReflect.Descriptor instead.
func (*GetMealPlanTasksRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{444}
}

func (x *GetMealPlanTasksRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetMealPlanTasksRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

type GetMealPlanTasksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*MealPlanTask        `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealPlanTasksResponse) Reset() {
	*x = GetMealPlanTasksResponse{}
	mi := &file_messages_eating_proto_msgTypes[445]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanTasksResponse) ProtoMessage() {}

func (x *GetMealPlanTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[445]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanTasksResponse.ProtoReflect.Descriptor instead.
func (*GetMealPlanTasksResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{445}
}

func (x *GetMealPlanTasksResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetMealPlanTasksResponse) GetResults() []*MealPlanTask {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetMealPlansForHousehold
type GetMealPlansForHouseholdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealPlansForHouseholdRequest) Reset() {
	*x = GetMealPlansForHouseholdRequest{}
	mi := &file_messages_eating_proto_msgTypes[446]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlansForHouseholdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlansForHouseholdRequest) ProtoMessage() {}

func (x *GetMealPlansForHouseholdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[446]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlansForHouseholdRequest.ProtoReflect.Descriptor instead.
func (*GetMealPlansForHouseholdRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{446}
}

func (x *GetMealPlansForHouseholdRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetMealPlansForHouseholdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*MealPlan            `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealPlansForHouseholdResponse) Reset() {
	*x = GetMealPlansForHouseholdResponse{}
	mi := &file_messages_eating_proto_msgTypes[447]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlansForHouseholdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlansForHouseholdResponse) ProtoMessage() {}

func (x *GetMealPlansForHouseholdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[447]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlansForHouseholdResponse.ProtoReflect.Descriptor instead.
func (*GetMealPlansForHouseholdResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{447}
}

func (x *GetMealPlansForHouseholdResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetMealPlansForHouseholdResponse) GetResults() []*MealPlan {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetMeals
type GetMealsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealsRequest) Reset() {
	*x = GetMealsRequest{}
	mi := &file_messages_eating_proto_msgTypes[448]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealsRequest) ProtoMessage() {}

func (x *GetMealsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[448]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealsRequest.ProtoReflect.Descriptor instead.
func (*GetMealsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{448}
}

func (x *GetMealsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetMealsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Resuls        []*Meal                `protobuf:"bytes,2,rep,name=Resuls,proto3" json:"Resuls,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealsResponse) Reset() {
	*x = GetMealsResponse{}
	mi := &file_messages_eating_proto_msgTypes[449]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealsResponse) ProtoMessage() {}

func (x *GetMealsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[449]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealsResponse.ProtoReflect.Descriptor instead.
func (*GetMealsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{449}
}

func (x *GetMealsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetMealsResponse) GetResuls() []*Meal {
	if x != nil {
		return x.Resuls
	}
	return nil
}

// RunFinalizeMealPlanWorker
type RunFinalizeMealPlanWorkerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunFinalizeMealPlanWorkerRequest) Reset() {
	*x = RunFinalizeMealPlanWorkerRequest{}
	mi := &file_messages_eating_proto_msgTypes[450]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunFinalizeMealPlanWorkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunFinalizeMealPlanWorkerRequest) ProtoMessage() {}

func (x *RunFinalizeMealPlanWorkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[450]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunFinalizeMealPlanWorkerRequest.ProtoReflect.Descriptor instead.
func (*RunFinalizeMealPlanWorkerRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{450}
}

type RunFinalizeMealPlanWorkerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunFinalizeMealPlanWorkerResponse) Reset() {
	*x = RunFinalizeMealPlanWorkerResponse{}
	mi := &file_messages_eating_proto_msgTypes[451]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunFinalizeMealPlanWorkerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunFinalizeMealPlanWorkerResponse) ProtoMessage() {}

func (x *RunFinalizeMealPlanWorkerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[451]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunFinalizeMealPlanWorkerResponse.ProtoReflect.Descriptor instead.
func (*RunFinalizeMealPlanWorkerResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{451}
}

// RunMealPlanGroceryListInitializerWorker
type RunMealPlanGroceryListInitializerWorkerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunMealPlanGroceryListInitializerWorkerRequest) Reset() {
	*x = RunMealPlanGroceryListInitializerWorkerRequest{}
	mi := &file_messages_eating_proto_msgTypes[452]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunMealPlanGroceryListInitializerWorkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunMealPlanGroceryListInitializerWorkerRequest) ProtoMessage() {}

func (x *RunMealPlanGroceryListInitializerWorkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[452]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunMealPlanGroceryListInitializerWorkerRequest.ProtoReflect.Descriptor instead.
func (*RunMealPlanGroceryListInitializerWorkerRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{452}
}

type RunMealPlanGroceryListInitializerWorkerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunMealPlanGroceryListInitializerWorkerResponse) Reset() {
	*x = RunMealPlanGroceryListInitializerWorkerResponse{}
	mi := &file_messages_eating_proto_msgTypes[453]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunMealPlanGroceryListInitializerWorkerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunMealPlanGroceryListInitializerWorkerResponse) ProtoMessage() {}

func (x *RunMealPlanGroceryListInitializerWorkerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[453]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunMealPlanGroceryListInitializerWorkerResponse.ProtoReflect.Descriptor instead.
func (*RunMealPlanGroceryListInitializerWorkerResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{453}
}

// RunMealPlanTaskCreatorWorker
type RunMealPlanTaskCreatorWorkerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunMealPlanTaskCreatorWorkerRequest) Reset() {
	*x = RunMealPlanTaskCreatorWorkerRequest{}
	mi := &file_messages_eating_proto_msgTypes[454]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunMealPlanTaskCreatorWorkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunMealPlanTaskCreatorWorkerRequest) ProtoMessage() {}

func (x *RunMealPlanTaskCreatorWorkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[454]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunMealPlanTaskCreatorWorkerRequest.ProtoReflect.Descriptor instead.
func (*RunMealPlanTaskCreatorWorkerRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{454}
}

type RunMealPlanTaskCreatorWorkerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunMealPlanTaskCreatorWorkerResponse) Reset() {
	*x = RunMealPlanTaskCreatorWorkerResponse{}
	mi := &file_messages_eating_proto_msgTypes[455]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunMealPlanTaskCreatorWorkerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunMealPlanTaskCreatorWorkerResponse) ProtoMessage() {}

func (x *RunMealPlanTaskCreatorWorkerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[455]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunMealPlanTaskCreatorWorkerResponse.ProtoReflect.Descriptor instead.
func (*RunMealPlanTaskCreatorWorkerResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{455}
}

// SearchForMeals
type SearchForMealsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Query         string                 `protobuf:"bytes,2,opt,name=Query,proto3" json:"Query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForMealsRequest) Reset() {
	*x = SearchForMealsRequest{}
	mi := &file_messages_eating_proto_msgTypes[456]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForMealsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForMealsRequest) ProtoMessage() {}

func (x *SearchForMealsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[456]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForMealsRequest.ProtoReflect.Descriptor instead.
func (*SearchForMealsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{456}
}

func (x *SearchForMealsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForMealsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type SearchForMealsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*Meal                `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForMealsResponse) Reset() {
	*x = SearchForMealsResponse{}
	mi := &file_messages_eating_proto_msgTypes[457]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForMealsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForMealsResponse) ProtoMessage() {}

func (x *SearchForMealsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[457]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForMealsResponse.ProtoReflect.Descriptor instead.
func (*SearchForMealsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{457}
}

func (x *SearchForMealsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForMealsResponse) GetResults() []*Meal {
	if x != nil {
		return x.Results
	}
	return nil
}

// UpdateMealPlan
type UpdateMealPlanRequest struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	MealPlanID    string                      `protobuf:"bytes,1,opt,name=mealPlanID,proto3" json:"mealPlanID,omitempty"`
	Input         *MealPlanUpdateRequestInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMealPlanRequest) Reset() {
	*x = UpdateMealPlanRequest{}
	mi := &file_messages_eating_proto_msgTypes[458]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMealPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMealPlanRequest) ProtoMessage() {}

func (x *UpdateMealPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[458]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMealPlanRequest.ProtoReflect.Descriptor instead.
func (*UpdateMealPlanRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{458}
}

func (x *UpdateMealPlanRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *UpdateMealPlanRequest) GetInput() *MealPlanUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateMealPlanResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMealPlanResponse) Reset() {
	*x = UpdateMealPlanResponse{}
	mi := &file_messages_eating_proto_msgTypes[459]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMealPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMealPlanResponse) ProtoMessage() {}

func (x *UpdateMealPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[459]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMealPlanResponse.ProtoReflect.Descriptor instead.
func (*UpdateMealPlanResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{459}
}

// UpdateMealPlanEvent
type UpdateMealPlanEventRequest struct {
	state           protoimpl.MessageState           `protogen:"open.v1"`
	MealPlanID      string                           `protobuf:"bytes,1,opt,name=mealPlanID,proto3" json:"mealPlanID,omitempty"`
	MealPlanEventID string                           `protobuf:"bytes,2,opt,name=mealPlanEventID,proto3" json:"mealPlanEventID,omitempty"`
	Input           *MealPlanEventUpdateRequestInput `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateMealPlanEventRequest) Reset() {
	*x = UpdateMealPlanEventRequest{}
	mi := &file_messages_eating_proto_msgTypes[460]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMealPlanEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMealPlanEventRequest) ProtoMessage() {}

func (x *UpdateMealPlanEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[460]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMealPlanEventRequest.ProtoReflect.Descriptor instead.
func (*UpdateMealPlanEventRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{460}
}

func (x *UpdateMealPlanEventRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *UpdateMealPlanEventRequest) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

func (x *UpdateMealPlanEventRequest) GetInput() *MealPlanEventUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateMealPlanEventResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMealPlanEventResponse) Reset() {
	*x = UpdateMealPlanEventResponse{}
	mi := &file_messages_eating_proto_msgTypes[461]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMealPlanEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMealPlanEventResponse) ProtoMessage() {}

func (x *UpdateMealPlanEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[461]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMealPlanEventResponse.ProtoReflect.Descriptor instead.
func (*UpdateMealPlanEventResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{461}
}

// UpdateMealPlanGroceryListItem
type UpdateMealPlanGroceryListItemRequest struct {
	state                     protoimpl.MessageState                     `protogen:"open.v1"`
	MealPlanID                string                                     `protobuf:"bytes,1,opt,name=mealPlanID,proto3" json:"mealPlanID,omitempty"`
	MealPlanGroceryListItemID string                                     `protobuf:"bytes,2,opt,name=mealPlanGroceryListItemID,proto3" json:"mealPlanGroceryListItemID,omitempty"`
	Input                     *MealPlanGroceryListItemUpdateRequestInput `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *UpdateMealPlanGroceryListItemRequest) Reset() {
	*x = UpdateMealPlanGroceryListItemRequest{}
	mi := &file_messages_eating_proto_msgTypes[462]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMealPlanGroceryListItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMealPlanGroceryListItemRequest) ProtoMessage() {}

func (x *UpdateMealPlanGroceryListItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[462]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMealPlanGroceryListItemRequest.ProtoReflect.Descriptor instead.
func (*UpdateMealPlanGroceryListItemRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{462}
}

func (x *UpdateMealPlanGroceryListItemRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *UpdateMealPlanGroceryListItemRequest) GetMealPlanGroceryListItemID() string {
	if x != nil {
		return x.MealPlanGroceryListItemID
	}
	return ""
}

func (x *UpdateMealPlanGroceryListItemRequest) GetInput() *MealPlanGroceryListItemUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateMealPlanGroceryListItemResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMealPlanGroceryListItemResponse) Reset() {
	*x = UpdateMealPlanGroceryListItemResponse{}
	mi := &file_messages_eating_proto_msgTypes[463]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMealPlanGroceryListItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMealPlanGroceryListItemResponse) ProtoMessage() {}

func (x *UpdateMealPlanGroceryListItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[463]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMealPlanGroceryListItemResponse.ProtoReflect.Descriptor instead.
func (*UpdateMealPlanGroceryListItemResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{463}
}

// UpdateMealPlanOption
type UpdateMealPlanOptionRequest struct {
	state            protoimpl.MessageState            `protogen:"open.v1"`
	MealPlanID       string                            `protobuf:"bytes,1,opt,name=mealPlanID,proto3" json:"mealPlanID,omitempty"`
	MealPlanEventID  string                            `protobuf:"bytes,2,opt,name=mealPlanEventID,proto3" json:"mealPlanEventID,omitempty"`
	MealPlanOptionID string                            `protobuf:"bytes,3,opt,name=mealPlanOptionID,proto3" json:"mealPlanOptionID,omitempty"`
	Input            *MealPlanOptionUpdateRequestInput `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UpdateMealPlanOptionRequest) Reset() {
	*x = UpdateMealPlanOptionRequest{}
	mi := &file_messages_eating_proto_msgTypes[464]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMealPlanOptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMealPlanOptionRequest) ProtoMessage() {}

func (x *UpdateMealPlanOptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[464]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMealPlanOptionRequest.ProtoReflect.Descriptor instead.
func (*UpdateMealPlanOptionRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{464}
}

func (x *UpdateMealPlanOptionRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *UpdateMealPlanOptionRequest) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

func (x *UpdateMealPlanOptionRequest) GetMealPlanOptionID() string {
	if x != nil {
		return x.MealPlanOptionID
	}
	return ""
}

func (x *UpdateMealPlanOptionRequest) GetInput() *MealPlanOptionUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateMealPlanOptionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMealPlanOptionResponse) Reset() {
	*x = UpdateMealPlanOptionResponse{}
	mi := &file_messages_eating_proto_msgTypes[465]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMealPlanOptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMealPlanOptionResponse) ProtoMessage() {}

func (x *UpdateMealPlanOptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[465]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMealPlanOptionResponse.ProtoReflect.Descriptor instead.
func (*UpdateMealPlanOptionResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{465}
}

// UpdateMealPlanOptionVote
type UpdateMealPlanOptionVoteRequest struct {
	state                protoimpl.MessageState                `protogen:"open.v1"`
	MealPlanID           string                                `protobuf:"bytes,1,opt,name=mealPlanID,proto3" json:"mealPlanID,omitempty"`
	MealPlanEventID      string                                `protobuf:"bytes,2,opt,name=mealPlanEventID,proto3" json:"mealPlanEventID,omitempty"`
	MealPlanOptionID     string                                `protobuf:"bytes,3,opt,name=mealPlanOptionID,proto3" json:"mealPlanOptionID,omitempty"`
	MealPlanOptionVoteID string                                `protobuf:"bytes,4,opt,name=mealPlanOptionVoteID,proto3" json:"mealPlanOptionVoteID,omitempty"`
	Input                *MealPlanOptionVoteUpdateRequestInput `protobuf:"bytes,5,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *UpdateMealPlanOptionVoteRequest) Reset() {
	*x = UpdateMealPlanOptionVoteRequest{}
	mi := &file_messages_eating_proto_msgTypes[466]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMealPlanOptionVoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMealPlanOptionVoteRequest) ProtoMessage() {}

func (x *UpdateMealPlanOptionVoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[466]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMealPlanOptionVoteRequest.ProtoReflect.Descriptor instead.
func (*UpdateMealPlanOptionVoteRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{466}
}

func (x *UpdateMealPlanOptionVoteRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *UpdateMealPlanOptionVoteRequest) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

func (x *UpdateMealPlanOptionVoteRequest) GetMealPlanOptionID() string {
	if x != nil {
		return x.MealPlanOptionID
	}
	return ""
}

func (x *UpdateMealPlanOptionVoteRequest) GetMealPlanOptionVoteID() string {
	if x != nil {
		return x.MealPlanOptionVoteID
	}
	return ""
}

func (x *UpdateMealPlanOptionVoteRequest) GetInput() *MealPlanOptionVoteUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateMealPlanOptionVoteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMealPlanOptionVoteResponse) Reset() {
	*x = UpdateMealPlanOptionVoteResponse{}
	mi := &file_messages_eating_proto_msgTypes[467]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMealPlanOptionVoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMealPlanOptionVoteResponse) ProtoMessage() {}

func (x *UpdateMealPlanOptionVoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[467]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMealPlanOptionVoteResponse.ProtoReflect.Descriptor instead.
func (*UpdateMealPlanOptionVoteResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{467}
}

// UpdateMealPlanTaskStatus
type UpdateMealPlanTaskStatusRequest struct {
	state          protoimpl.MessageState                `protogen:"open.v1"`
	MealPlanID     string                                `protobuf:"bytes,1,opt,name=mealPlanID,proto3" json:"mealPlanID,omitempty"`
	MealPlanTaskID string                                `protobuf:"bytes,2,opt,name=mealPlanTaskID,proto3" json:"mealPlanTaskID,omitempty"`
	Input          *MealPlanTaskStatusChangeRequestInput `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateMealPlanTaskStatusRequest) Reset() {
	*x = UpdateMealPlanTaskStatusRequest{}
	mi := &file_messages_eating_proto_msgTypes[468]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMealPlanTaskStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMealPlanTaskStatusRequest) ProtoMessage() {}

func (x *UpdateMealPlanTaskStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[468]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMealPlanTaskStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateMealPlanTaskStatusRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{468}
}

func (x *UpdateMealPlanTaskStatusRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *UpdateMealPlanTaskStatusRequest) GetMealPlanTaskID() string {
	if x != nil {
		return x.MealPlanTaskID
	}
	return ""
}

func (x *UpdateMealPlanTaskStatusRequest) GetInput() *MealPlanTaskStatusChangeRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateMealPlanTaskStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMealPlanTaskStatusResponse) Reset() {
	*x = UpdateMealPlanTaskStatusResponse{}
	mi := &file_messages_eating_proto_msgTypes[469]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMealPlanTaskStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMealPlanTaskStatusResponse) ProtoMessage() {}

func (x *UpdateMealPlanTaskStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[469]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMealPlanTaskStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateMealPlanTaskStatusResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{469}
}

type CreateMealPlanTasksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HouseholdID   string                 `protobuf:"bytes,1,opt,name=HouseholdID,proto3" json:"HouseholdID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMealPlanTasksRequest) Reset() {
	*x = CreateMealPlanTasksRequest{}
	mi := &file_messages_eating_proto_msgTypes[470]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMealPlanTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMealPlanTasksRequest) ProtoMessage() {}

func (x *CreateMealPlanTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[470]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMealPlanTasksRequest.ProtoReflect.Descriptor instead.
func (*CreateMealPlanTasksRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{470}
}

func (x *CreateMealPlanTasksRequest) GetHouseholdID() string {
	if x != nil {
		return x.HouseholdID
	}
	return ""
}

type CreateMealPlanTasksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
	Success       bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *CreateMealPlanTasksResponse) Reset() {
	*x = CreateMealPlanTasksResponse{}
	mi := &file_messages_eating_proto_msgTypes[471]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMealPlanTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMealPlanTasksResponse) ProtoMessage() {}

func (x *CreateMealPlanTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[471]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMealPlanTasksResponse.ProtoReflect.Descriptor instead.
func (*CreateMealPlanTasksResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{471}
}

func (x *CreateMealPlanTasksResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type FinalizeMealPlansRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
	ReturnCount   bool `protobuf:"varint,1,opt,name=ReturnCount,proto3" json:"ReturnCount,omitempty"`
}

func (x *FinalizeMealPlansRequest) Reset() {
	*x = FinalizeMealPlansRequest{}
	mi := &file_messages_eating_proto_msgTypes[472]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeMealPlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeMealPlansRequest) ProtoMessage() {}

func (x *FinalizeMealPlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[472]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeMealPlansRequest.ProtoReflect.Descriptor instead.
func (*FinalizeMealPlansRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{472}
}

func (x *FinalizeMealPlansRequest) GetReturnCount() bool {
	if x != nil {
		return x.ReturnCount
	}
	return false
}

type FinalizeMealPlansResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	Count         int64 `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
	sizeCache     protoimpl.SizeCache
}

func (x *FinalizeMealPlansResponse) Reset() {
	*x = FinalizeMealPlansResponse{}
	mi := &file_messages_eating_proto_msgTypes[473]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeMealPlansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeMealPlansResponse) ProtoMessage() {}

func (x *FinalizeMealPlansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[473]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeMealPlansResponse.ProtoReflect.Descriptor instead.
func (*FinalizeMealPlansResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{473}
}

func (x *FinalizeMealPlansResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// ArchiveHouseholdInstrumentOwnership
type ArchiveHouseholdInstrumentOwnershipRequest struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	HouseholdInstrumentOwnershipID string                 `protobuf:"bytes,1,opt,name=householdInstrumentOwnershipID,proto3" json:"householdInstrumentOwnershipID,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *ArchiveHouseholdInstrumentOwnershipRequest) Reset() {
	*x = ArchiveHouseholdInstrumentOwnershipRequest{}
	mi := &file_messages_eating_proto_msgTypes[474]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveHouseholdInstrumentOwnershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveHouseholdInstrumentOwnershipRequest) ProtoMessage() {}

func (x *ArchiveHouseholdInstrumentOwnershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[474]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveHouseholdInstrumentOwnershipRequest.ProtoReflect.Descriptor instead.
func (*ArchiveHouseholdInstrumentOwnershipRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{474}
}

func (x *ArchiveHouseholdInstrumentOwnershipRequest) GetHouseholdInstrumentOwnershipID() string {
	if x != nil {
		return x.HouseholdInstrumentOwnershipID
	}
	return ""
}

type ArchiveHouseholdInstrumentOwnershipResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveHouseholdInstrumentOwnershipResponse) Reset() {
	*x = ArchiveHouseholdInstrumentOwnershipResponse{}
	mi := &file_messages_eating_proto_msgTypes[475]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveHouseholdInstrumentOwnershipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveHouseholdInstrumentOwnershipResponse) ProtoMessage() {}

func (x *ArchiveHouseholdInstrumentOwnershipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[475]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveHouseholdInstrumentOwnershipResponse.ProtoReflect.Descriptor instead.
func (*ArchiveHouseholdInstrumentOwnershipResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{475}
}

// CreateHouseholdInstrumentOwnership
type CreateHouseholdInstrumentOwnershipRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateHouseholdInstrumentOwnershipRequest) Reset() {
	*x = CreateHouseholdInstrumentOwnershipRequest{}
	mi := &file_messages_eating_proto_msgTypes[476]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateHouseholdInstrumentOwnershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHouseholdInstrumentOwnershipRequest) ProtoMessage() {}

func (x *CreateHouseholdInstrumentOwnershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[476]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHouseholdInstrumentOwnershipRequest.ProtoReflect.Descriptor instead.
func (*CreateHouseholdInstrumentOwnershipRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{476}
}

type CreateHouseholdInstrumentOwnershipResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateHouseholdInstrumentOwnershipResponse) Reset() {
	*x = CreateHouseholdInstrumentOwnershipResponse{}
	mi := &file_messages_eating_proto_msgTypes[477]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateHouseholdInstrumentOwnershipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHouseholdInstrumentOwnershipResponse) ProtoMessage() {}

func (x *CreateHouseholdInstrumentOwnershipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[477]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHouseholdInstrumentOwnershipResponse.ProtoReflect.Descriptor instead.
func (*CreateHouseholdInstrumentOwnershipResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{477}
}

// GetHouseholdInstrumentOwnerships
type GetHouseholdInstrumentOwnershipsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHouseholdInstrumentOwnershipsRequest) Reset() {
	*x = GetHouseholdInstrumentOwnershipsRequest{}
	mi := &file_messages_eating_proto_msgTypes[478]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHouseholdInstrumentOwnershipsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHouseholdInstrumentOwnershipsRequest) ProtoMessage() {}

func (x *GetHouseholdInstrumentOwnershipsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[478]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHouseholdInstrumentOwnershipsRequest.ProtoReflect.Descriptor instead.
func (*GetHouseholdInstrumentOwnershipsRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{478}
}

func (x *GetHouseholdInstrumentOwnershipsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetHouseholdInstrumentOwnershipsResponse struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Filter        *QueryFilter                    `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
	Results       []*HouseholdInstrumentOwnership `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHouseholdInstrumentOwnershipsResponse) Reset() {
	*x = GetHouseholdInstrumentOwnershipsResponse{}
	mi := &file_messages_eating_proto_msgTypes[479]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHouseholdInstrumentOwnershipsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHouseholdInstrumentOwnershipsResponse) ProtoMessage() {}

func (x *GetHouseholdInstrumentOwnershipsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[479]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHouseholdInstrumentOwnershipsResponse.ProtoReflect.Descriptor instead.
func (*GetHouseholdInstrumentOwnershipsResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{479}
}

func (x *GetHouseholdInstrumentOwnershipsResponse) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetHouseholdInstrumentOwnershipsResponse) GetResults() []*HouseholdInstrumentOwnership {
	if x != nil {
		return x.Results
	}
	return nil
}

// GetHouseholdInstrumentOwnership
type GetHouseholdInstrumentOwnershipRequest struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	HouseholdInstrumentOwnershipID string                 `protobuf:"bytes,1,opt,name=householdInstrumentOwnershipID,proto3" json:"householdInstrumentOwnershipID,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *GetHouseholdInstrumentOwnershipRequest) Reset() {
	*x = GetHouseholdInstrumentOwnershipRequest{}
	mi := &file_messages_eating_proto_msgTypes[480]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHouseholdInstrumentOwnershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHouseholdInstrumentOwnershipRequest) ProtoMessage() {}

func (x *GetHouseholdInstrumentOwnershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[480]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHouseholdInstrumentOwnershipRequest.ProtoReflect.Descriptor instead.
func (*GetHouseholdInstrumentOwnershipRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{480}
}

func (x *GetHouseholdInstrumentOwnershipRequest) GetHouseholdInstrumentOwnershipID() string {
	if x != nil {
		return x.HouseholdInstrumentOwnershipID
	}
	return ""
}

type GetHouseholdInstrumentOwnershipResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHouseholdInstrumentOwnershipResponse) Reset() {
	*x = GetHouseholdInstrumentOwnershipResponse{}
	mi := &file_messages_eating_proto_msgTypes[481]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHouseholdInstrumentOwnershipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHouseholdInstrumentOwnershipResponse) ProtoMessage() {}

func (x *GetHouseholdInstrumentOwnershipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[481]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHouseholdInstrumentOwnershipResponse.ProtoReflect.Descriptor instead.
func (*GetHouseholdInstrumentOwnershipResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{481}
}

// UpdateHouseholdInstrumentOwnership
type UpdateHouseholdInstrumentOwnershipRequest struct {
	state                          protoimpl.MessageState                          `protogen:"open.v1"`
	HouseholdInstrumentOwnershipID string                                          `protobuf:"bytes,1,opt,name=householdInstrumentOwnershipID,proto3" json:"householdInstrumentOwnershipID,omitempty"`
	Input                          *HouseholdInstrumentOwnershipUpdateRequestInput `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *UpdateHouseholdInstrumentOwnershipRequest) Reset() {
	*x = UpdateHouseholdInstrumentOwnershipRequest{}
	mi := &file_messages_eating_proto_msgTypes[482]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateHouseholdInstrumentOwnershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHouseholdInstrumentOwnershipRequest) ProtoMessage() {}

func (x *UpdateHouseholdInstrumentOwnershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[482]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHouseholdInstrumentOwnershipRequest.ProtoReflect.Descriptor instead.
func (*UpdateHouseholdInstrumentOwnershipRequest) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{482}
}

func (x *UpdateHouseholdInstrumentOwnershipRequest) GetHouseholdInstrumentOwnershipID() string {
	if x != nil {
		return x.HouseholdInstrumentOwnershipID
	}
	return ""
}

func (x *UpdateHouseholdInstrumentOwnershipRequest) GetInput() *HouseholdInstrumentOwnershipUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateHouseholdInstrumentOwnershipResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateHouseholdInstrumentOwnershipResponse) Reset() {
	*x = UpdateHouseholdInstrumentOwnershipResponse{}
	mi := &file_messages_eating_proto_msgTypes[483]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateHouseholdInstrumentOwnershipResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHouseholdInstrumentOwnershipResponse) ProtoMessage() {}

func (x *UpdateHouseholdInstrumentOwnershipResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[483]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHouseholdInstrumentOwnershipResponse.ProtoReflect.Descriptor instead.
func (*UpdateHouseholdInstrumentOwnershipResponse) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{483}
}

type HouseholdInstrumentOwnership struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt          *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	ArchivedAt         *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ArchivedAt,proto3" json:"ArchivedAt,omitempty"`
	LastUpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3" json:"LastUpdatedAt,omitempty"`
	Instrument         *ValidInstrument       `protobuf:"bytes,7,opt,name=Instrument,proto3" json:"Instrument,omitempty"`
	ID                 string                 `protobuf:"bytes,4,opt,name=ID,proto3" json:"ID,omitempty"`
	Notes              string                 `protobuf:"bytes,5,opt,name=Notes,proto3" json:"Notes,omitempty"`
	BelongsToHousehold string                 `protobuf:"bytes,6,opt,name=BelongsToHousehold,proto3" json:"BelongsToHousehold,omitempty"`
	unknownFields      protoimpl.UnknownFields
	Quantity           uint32 `protobuf:"varint,8,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	sizeCache          protoimpl.SizeCache
}

func (x *HouseholdInstrumentOwnership) Reset() {
	*x = HouseholdInstrumentOwnership{}
	mi := &file_messages_eating_proto_msgTypes[484]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HouseholdInstrumentOwnership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HouseholdInstrumentOwnership) ProtoMessage() {}

func (x *HouseholdInstrumentOwnership) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[484]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HouseholdInstrumentOwnership.ProtoReflect.Descriptor instead.
func (*HouseholdInstrumentOwnership) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{484}
}

func (x *HouseholdInstrumentOwnership) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *HouseholdInstrumentOwnership) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *HouseholdInstrumentOwnership) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *HouseholdInstrumentOwnership) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *HouseholdInstrumentOwnership) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *HouseholdInstrumentOwnership) GetBelongsToHousehold() string {
	if x != nil {
		return x.BelongsToHousehold
	}
	return ""
}

func (x *HouseholdInstrumentOwnership) GetInstrument() *ValidInstrument {
	if x != nil {
		return x.Instrument
	}
	return nil
}

func (x *HouseholdInstrumentOwnership) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type HouseholdInstrumentOwnershipCreationRequestInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Notes              string                 `protobuf:"bytes,1,opt,name=Notes,proto3" json:"Notes,omitempty"`
	ValidInstrumentID  string                 `protobuf:"bytes,2,opt,name=ValidInstrumentID,proto3" json:"ValidInstrumentID,omitempty"`
	BelongsToHousehold string                 `protobuf:"bytes,3,opt,name=BelongsToHousehold,proto3" json:"BelongsToHousehold,omitempty"`
	unknownFields      protoimpl.UnknownFields
	Quantity           uint32 `protobuf:"varint,4,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	sizeCache          protoimpl.SizeCache
}

func (x *HouseholdInstrumentOwnershipCreationRequestInput) Reset() {
	*x = HouseholdInstrumentOwnershipCreationRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[485]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HouseholdInstrumentOwnershipCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HouseholdInstrumentOwnershipCreationRequestInput) ProtoMessage() {}

func (x *HouseholdInstrumentOwnershipCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[485]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HouseholdInstrumentOwnershipCreationRequestInput.ProtoReflect.Descriptor instead.
func (*HouseholdInstrumentOwnershipCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{485}
}

func (x *HouseholdInstrumentOwnershipCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *HouseholdInstrumentOwnershipCreationRequestInput) GetValidInstrumentID() string {
	if x != nil {
		return x.ValidInstrumentID
	}
	return ""
}

func (x *HouseholdInstrumentOwnershipCreationRequestInput) GetBelongsToHousehold() string {
	if x != nil {
		return x.BelongsToHousehold
	}
	return ""
}

func (x *HouseholdInstrumentOwnershipCreationRequestInput) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type HouseholdInstrumentOwnershipUpdateRequestInput struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Notes             string                 `protobuf:"bytes,1,opt,name=Notes,proto3" json:"Notes,omitempty"`
	ValidInstrumentID string                 `protobuf:"bytes,3,opt,name=ValidInstrumentID,proto3" json:"ValidInstrumentID,omitempty"`
	unknownFields     protoimpl.UnknownFields
	Quantity          uint32 `protobuf:"varint,2,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	sizeCache         protoimpl.SizeCache
}

func (x *HouseholdInstrumentOwnershipUpdateRequestInput) Reset() {
	*x = HouseholdInstrumentOwnershipUpdateRequestInput{}
	mi := &file_messages_eating_proto_msgTypes[486]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HouseholdInstrumentOwnershipUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HouseholdInstrumentOwnershipUpdateRequestInput) ProtoMessage() {}

func (x *HouseholdInstrumentOwnershipUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_eating_proto_msgTypes[486]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HouseholdInstrumentOwnershipUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*HouseholdInstrumentOwnershipUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_eating_proto_rawDescGZIP(), []int{486}
}

func (x *HouseholdInstrumentOwnershipUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *HouseholdInstrumentOwnershipUpdateRequestInput) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *HouseholdInstrumentOwnershipUpdateRequestInput) GetValidInstrumentID() string {
	if x != nil {
		return x.ValidInstrumentID
	}
	return ""
}

var File_messages_eating_proto protoreflect.FileDescriptor

var file_messages_eating_proto_rawDesc = string([]byte{
	0x0a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x03, 0x0a,
	0x18, 0x45, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x44, 0x12, 0x6a, 0x0a, 0x1d, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x52, 0x1d, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x73, 0x12, 0x2e, 0x0a, 0x09, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x09, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x73, 0x12, 0x3a, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0d,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x28, 0x0a,
	0x07, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x07,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x05, 0x4d, 0x65, 0x61, 0x6c, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x65, 0x61, 0x6c, 0x52, 0x05, 0x4d, 0x65, 0x61, 0x6c, 0x73, 0x12, 0x5e, 0x0a, 0x19, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x19, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xd3, 0x0a, 0x0a, 0x0f,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x5e, 0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43,
	0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x1b, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e,
	0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a,
	0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x68, 0x6f,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x66, 0x69, 0x73, 0x68,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
	0x53, 0x68, 0x65, 0x6c, 0x6c, 0x66, 0x69, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x4c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x4c,
	0x69, 0x71, 0x75, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x50, 0x65, 0x61, 0x6e, 0x75, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x50, 0x65, 0x61, 0x6e, 0x75, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
	0x54, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x45, 0x67, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x45, 0x67, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x68, 0x65, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x68, 0x65, 0x61, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x6f, 0x79, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x6f,
	0x79, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x44, 0x65, 0x72, 0x69, 0x76,
	0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c,
	0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x65, 0x73, 0x61, 0x6d,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x53, 0x65, 0x73, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x46, 0x69, 0x73, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x46, 0x69, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x47, 0x6c, 0x75, 0x74, 0x65, 0x6e, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x47, 0x6c, 0x75,
	0x74, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x44,
	0x61, 0x69, 0x72, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x44, 0x61, 0x69, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x6c, 0x63, 0x6f,
	0x68, 0x6f, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x46, 0x6c, 0x65,
	0x73, 0x68, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c,
	0x46, 0x6c, 0x65, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x53, 0x74, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x53, 0x74, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x49, 0x73, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x49, 0x73, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x46,
	0x72, 0x75, 0x69, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x46, 0x72,
	0x75, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x53, 0x61, 0x6c, 0x74, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49,
	0x73, 0x46, 0x61, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x46, 0x61,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x41, 0x63, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x49, 0x73, 0x41, 0x63, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x48,
	0x65, 0x61, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x48, 0x65, 0x61,
	0x74, 0x22, 0x9f, 0x09, 0x0a, 0x23, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x5e, 0x0a, 0x1b, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x1b, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x57, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x30, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x53,
	0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x46, 0x69, 0x73, 0x68, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x46, 0x69, 0x73,
	0x68, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x68, 0x65,
	0x6c, 0x6c, 0x66, 0x69, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x66, 0x69, 0x73, 0x68, 0x12,
	0x20, 0x0a, 0x0b, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x46, 0x6c, 0x65, 0x73, 0x68, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x46, 0x6c, 0x65, 0x73,
	0x68, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x45, 0x67, 0x67,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
	0x45, 0x67, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x6f, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x6f,
	0x79, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x50, 0x65, 0x61,
	0x6e, 0x75, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x50, 0x65, 0x61, 0x6e, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x6e, 0x69,
	0x6d, 0x61, 0x6c, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x36, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x44, 0x61, 0x69, 0x72, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x44, 0x61, 0x69, 0x72, 0x79, 0x12, 0x26, 0x0a,
	0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x65, 0x73, 0x61, 0x6d, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53,
	0x65, 0x73, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x68, 0x65, 0x61, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
	0x57, 0x68, 0x65, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x12,
	0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x47, 0x6c, 0x75, 0x74, 0x65,
	0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x47, 0x6c, 0x75, 0x74, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x53, 0x74, 0x61,
	0x72, 0x63, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x53, 0x74, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49,
	0x73, 0x46, 0x72, 0x75, 0x69, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73,
	0x46, 0x72, 0x75, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x53, 0x61, 0x6c, 0x74, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x49, 0x73, 0x46, 0x61, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73,
	0x46, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x41, 0x63, 0x69, 0x64, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x41, 0x63, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x49,
	0x73, 0x48, 0x65, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x48,
	0x65, 0x61, 0x74, 0x22, 0xe6, 0x02, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x20, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c,
	0x0a, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0xc6, 0x01, 0x0a,
	0x28, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75,
	0x67, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x07, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x8d, 0x02, 0x0a, 0x1a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a,
	0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x41, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x5e, 0x0a, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x72, 0x0a, 0x26, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd2, 0x03, 0x0a, 0x1e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x51, 0x0a, 0x11, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x52, 0x11, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a,
	0x0f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x0f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x83,
	0x02, 0x0a, 0x32, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x51, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61,
	0x78, 0x52, 0x11, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x22, 0x93, 0x02, 0x0a, 0x30, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x36, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x63, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62,
	0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33,
	0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x4d, 0x61, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x11, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62,
	0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xef, 0x02, 0x0a, 0x1a, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xa4, 0x01, 0x0a,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x22, 0xa2, 0x01, 0x0a, 0x2c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x88, 0x03, 0x0a, 0x14, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x73,
	0x74, 0x54, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61,
	0x73, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f,
	0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f,
	0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53,
	0x6c, 0x75, 0x67, 0x22, 0xd4, 0x01, 0x0a, 0x28, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x73, 0x74,
	0x54, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x73,
	0x74, 0x54, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x22, 0xff, 0x02, 0x0a, 0x1e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x46, 0x0a, 0x0f, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xb0, 0x01, 0x0a,
	0x32, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49,
	0x44, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22,
	0xae, 0x01, 0x0a, 0x30, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x22, 0xd2, 0x01, 0x0a, 0x26, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53,
	0x6c, 0x75, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x73,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f,
	0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f,
	0x6e, 0x50, 0x61, 0x74, 0x68, 0x22, 0x9d, 0x09, 0x0a, 0x21, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x49,
	0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49,
	0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x44, 0x61, 0x69, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x44, 0x61, 0x69, 0x72, 0x79, 0x12, 0x26, 0x0a,
	0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x50, 0x65, 0x61, 0x6e, 0x75, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x50,
	0x65, 0x61, 0x6e, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x45, 0x67, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x45, 0x67,
	0x67, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x68, 0x65,
	0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x57, 0x68, 0x65, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x66, 0x69, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x68, 0x65, 0x6c,
	0x6c, 0x66, 0x69, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x53, 0x65, 0x73, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x65, 0x73, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x46, 0x69, 0x73, 0x68, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x46, 0x69, 0x73,
	0x68, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x47, 0x6c, 0x75,
	0x74, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x47, 0x6c, 0x75, 0x74, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x6e, 0x69,
	0x6d, 0x61, 0x6c, 0x46, 0x6c, 0x65, 0x73, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x46, 0x6c, 0x65, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x49,
	0x73, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49,
	0x73, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x53, 0x6f, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x6f, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75,
	0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50,
	0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x6e, 0x69,
	0x6d, 0x61, 0x6c, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x36, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43,
	0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x1b, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e,
	0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75,
	0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x28, 0x0a,
	0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
	0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x68, 0x6f, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x53,
	0x74, 0x61, 0x72, 0x63, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x53,
	0x74, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x69, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x49, 0x73, 0x46, 0x72, 0x75, 0x69, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x49, 0x73, 0x46, 0x72, 0x75, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x53, 0x61, 0x6c,
	0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x53, 0x61, 0x6c, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x49, 0x73, 0x46, 0x61, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x49, 0x73, 0x46, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x41, 0x63, 0x69, 0x64, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x41, 0x63, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x49, 0x73, 0x48, 0x65, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49,
	0x73, 0x48, 0x65, 0x61, 0x74, 0x22, 0x89, 0x04, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x34, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x49, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49,
	0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x46, 0x0a,
	0x1e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x22, 0xd5, 0x02, 0x0a, 0x23, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x53,
	0x6c, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12,
	0x34, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x1e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x49, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0xd3, 0x02, 0x0a, 0x21, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x34, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x1e, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x49, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0xd6, 0x03, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08,
	0x49, 0x6d, 0x70, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x49, 0x6d, 0x70, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0xc1, 0x03, 0x0a, 0x1e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x45, 0x0a, 0x11, 0x4f, 0x6e, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x4f, 0x6e, 0x6c, 0x79, 0x46, 0x6f, 0x72,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x30, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x2c, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x02, 0x54, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xb8, 0x01, 0x0a,
	0x32, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x6e, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x4f, 0x6e, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x54, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xb6, 0x01, 0x0a, 0x30, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x54, 0x6f,
	0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x6e, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4f, 0x6e, 0x6c,
	0x79, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x22, 0xa2, 0x02, 0x0a, 0x28, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53,
	0x6c, 0x75, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6d, 0x70,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x6d, 0x70,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0xa0, 0x02, 0x0a, 0x26, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6d, 0x70, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x6d, 0x70, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x22, 0x94, 0x07, 0x0a, 0x10, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4d, 0x61, 0x78, 0x52, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d,
	0x61, 0x78, 0x52, 0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x52, 0x0b, 0x56, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x34, 0x0a, 0x15, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x73, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x56, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x6e, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x56, 0x65, 0x73, 0x73,
	0x65, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x4f, 0x6e, 0x6c, 0x79, 0x46,
	0x6f, 0x72, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x22,
	0xe0, 0x05, 0x0a, 0x24, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31,
	0x36, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x4d, 0x61, 0x78, 0x52, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x4d, 0x61, 0x78, 0x52, 0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x52, 0x0b, 0x56,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63,
	0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63,
	0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x73, 0x74, 0x54, 0x65,
	0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x73, 0x74, 0x54,
	0x65, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x13, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x32, 0x0a, 0x14, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x54, 0x69, 0x6d, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x73, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x12, 0x26,
	0x0a, 0x0e, 0x4f, 0x6e, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x4f, 0x6e, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x56,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x54,
	0x6f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d,
	0x59, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4e, 0x6f, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x22, 0xef, 0x02, 0x0a, 0x1a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a,
	0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x37, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2c, 0x0a,
	0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xa2, 0x01, 0x0a, 0x2c,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x22, 0x94, 0x06, 0x0a, 0x22, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x5e, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4d, 0x61, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4d, 0x61, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x0b, 0x56, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x0b, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4e, 0x6f, 0x74, 0x68, 0x69,
	0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x34, 0x0a, 0x15, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x13, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x32, 0x0a, 0x14, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x73, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x12,
	0x26, 0x0a, 0x0e, 0x4f, 0x6e, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x4f, 0x6e, 0x6c, 0x79, 0x46, 0x6f, 0x72,
	0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x22, 0xdf, 0x02, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73,
	0x65, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a,
	0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x3a, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06,
	0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x52, 0x06, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x22, 0x98, 0x01, 0x0a, 0x2a, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73,
	0x65, 0x6c, 0x49, 0x44, 0x22, 0x96, 0x01, 0x0a, 0x28, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x22, 0x8d, 0x06,
	0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x12, 0x38, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75,
	0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x53, 0x68, 0x61, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69,
	0x6c, 0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x12, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x49, 0x6e, 0x4d,
	0x69, 0x6c, 0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x13, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x49,
	0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x13, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c,
	0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x1e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x49, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x55, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0xbf, 0x04,
	0x0a, 0x1f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x68, 0x61,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x50,
	0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x49,
	0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x13, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c,
	0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x4d, 0x69,
	0x6c, 0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e,
	0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x12, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x12, 0x46, 0x0a, 0x1e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x49, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x22,
	0xbd, 0x04, 0x0a, 0x1d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x55,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53,
	0x6c, 0x75, 0x67, 0x12, 0x34, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x1e, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a,
	0x0e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e,
	0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x12, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x49,
	0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x13, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c,
	0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x4d, 0x69,
	0x6c, 0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x68, 0x61,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x68, 0x61, 0x70, 0x65, 0x22,
	0x89, 0x03, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x37, 0x0a, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x22, 0xdc, 0x01, 0x0a, 0x2c,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x36, 0x0a, 0x16,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x22, 0x98, 0x01, 0x0a, 0x2a, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x41,
	0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x41, 0x6c,
	0x6c, 0x65, 0x72, 0x67, 0x79, 0x22, 0x4d, 0x0a, 0x1d, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x22, 0x20, 0x0a, 0x1e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x0a, 0x22, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x22, 0x25, 0x0a, 0x23, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x0a, 0x2c, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x20, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0x2f, 0x0a, 0x2d, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6e, 0x0a, 0x28, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x2b, 0x0a, 0x29, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x0a, 0x22, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x49, 0x44, 0x22, 0x25, 0x0a, 0x23, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x0a, 0x2c, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x20, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x2f, 0x0a, 0x2d, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x0a, 0x1d, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x20, 0x0a, 0x1e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0x0a, 0x22, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0x25, 0x0a, 0x23, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x0a,
	0x2c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a,
	0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x2f, 0x0a, 0x2d, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x0a, 0x1e, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x21, 0x0a, 0x1f,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x6e, 0x0a, 0x28, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22,
	0x2b, 0x0a, 0x29, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x0a, 0x24,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44,
	0x22, 0x27, 0x0a, 0x25, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x0a, 0x19, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x98, 0x09, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c,
	0x73, 0x69, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x1b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65,
	0x6c, 0x73, 0x69, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x50,
	0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x68, 0x6f, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x73, 0x46, 0x69, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x46, 0x69, 0x73, 0x68, 0x12, 0x2c, 0x0a,
	0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x66, 0x69,
	0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x66, 0x69, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x41,
	0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x46, 0x6c, 0x65, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x46, 0x6c, 0x65, 0x73, 0x68, 0x12, 0x20, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x45, 0x67, 0x67, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x45, 0x67, 0x67, 0x12,
	0x1a, 0x0a, 0x08, 0x49, 0x73, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x49, 0x73, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x6f, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x6f, 0x79, 0x12, 0x26, 0x0a,
	0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x50, 0x65, 0x61, 0x6e, 0x75, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x50,
	0x65, 0x61, 0x6e, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x44,
	0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x41, 0x6e,
	0x69, 0x6d, 0x61, 0x6c, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x44,
	0x61, 0x69, 0x72, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x44, 0x61, 0x69, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x65, 0x73, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x65, 0x73, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x54, 0x72, 0x65,
	0x65, 0x4e, 0x75, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x68, 0x65, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x68, 0x65, 0x61,
	0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x6c, 0x63,
	0x6f, 0x68, 0x6f, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x47, 0x6c, 0x75, 0x74, 0x65, 0x6e, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x47, 0x6c, 0x75,
	0x74, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x53, 0x74, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x53, 0x74, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x1c, 0x0a, 0x09, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x49, 0x73, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x49, 0x73, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x46, 0x72, 0x75,
	0x69, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x46, 0x72, 0x75, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x53, 0x61, 0x6c, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x49, 0x73, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x46,
	0x61, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x46, 0x61, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x49, 0x73, 0x41, 0x63, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x49, 0x73, 0x41, 0x63, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x48, 0x65, 0x61,
	0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x48, 0x65, 0x61, 0x74, 0x22,
	0x50, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x23, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x0a, 0x2b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x2c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x0a, 0x27, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2a, 0x0a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x23, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x0a,
	0x2b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x2c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x0a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1f, 0x0a, 0x1d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x0a,
	0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x0a, 0x2b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x2c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x20, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x0a, 0x27, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2a, 0x0a, 0x28, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x25, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x26, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1a, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1b, 0x0a, 0x19,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x20,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x21, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x22, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f,
	0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x52,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x23, 0x0a, 0x21,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x1e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x49, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x4d, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x58, 0x0a, 0x1e, 0x47, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x22, 0x21, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x87, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0x76, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a,
	0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0x2b, 0x0a, 0x29, 0x47, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0x9b, 0x01, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x07,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x92,
	0x01, 0x0a, 0x35, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x22, 0xa7, 0x01, 0x0a, 0x36, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x07, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xa1, 0x01,
	0x0a, 0x3a, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x44, 0x22, 0xac, 0x01, 0x0a, 0x3b, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x40,
	0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0x6a, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x27, 0x0a, 0x25,
	0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x93, 0x01, 0x0a, 0x26,
	0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0x8e, 0x01, 0x0a, 0x31, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x22, 0x9f, 0x01, 0x0a, 0x32, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x32, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xa0, 0x01, 0x0a, 0x33, 0x47, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a,
	0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x58, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x49, 0x44, 0x22, 0x21, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x22, 0x2b, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x0a,
	0x29, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x8f, 0x01, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x35, 0x47, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x42, 0x79, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xa7,
	0x01, 0x0a, 0x36, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x3a, 0x47, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x42,
	0x79, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x22, 0xac, 0x01, 0x0a,
	0x3b, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x07, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x4e, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x87, 0x01, 0x0a, 0x20,
	0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a,
	0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x49, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0x7d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x07,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22,
	0x49, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x7d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x31, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x22, 0x58, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0x21, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x76, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x20, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x2b, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x31, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22,
	0xa3, 0x01, 0x0a, 0x32, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x2f, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0xa1,
	0x01, 0x0a, 0x30, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x40, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x22, 0x4e, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0x87, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x4c, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x1d, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x0a, 0x24, 0x47, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x42, 0x0a, 0x1c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x27, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54,
	0x0a, 0x25, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0x93, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x31, 0x47,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x9f, 0x01, 0x0a, 0x32,
	0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x3c, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x91, 0x01,
	0x0a, 0x32, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x42, 0x79, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x22, 0x35, 0x0a, 0x33, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x42, 0x79, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x18,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x22, 0x23, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x0a,
	0x21, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22,
	0x89, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73,
	0x73, 0x65, 0x6c, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x42, 0x79, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x98, 0x01, 0x0a, 0x2f,
	0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x42, 0x79, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x07,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x07, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x7e, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73,
	0x73, 0x65, 0x6c, 0x73, 0x42, 0x79, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x22, 0x93, 0x01, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x73, 0x42, 0x79, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x38, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73,
	0x73, 0x65, 0x6c, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x4a, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x7f, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x3d, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x45, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x75, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x2d, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0x6a, 0x0a, 0x25, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x8d, 0x01, 0x0a,
	0x26, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x6a, 0x0a, 0x25,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x8d, 0x01, 0x0a, 0x26, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x36, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x65, 0x0a, 0x20, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x46, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22,
	0x83, 0x01, 0x0a, 0x21, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x31, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x65, 0x0a, 0x20, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46,
	0x6f, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x83, 0x01, 0x0a,
	0x21, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x31, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x22, 0x6a, 0x0a, 0x25, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x8d,
	0x01, 0x0a, 0x26, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x66,
	0x0a, 0x21, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x85, 0x01, 0x0a, 0x22, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x46, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x07, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x61,
	0x0a, 0x1c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x22, 0x7b, 0x0a, 0x1d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x2d, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x9f,
	0x01, 0x0a, 0x2a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x2e, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x22, 0x8d, 0x01, 0x0a, 0x2b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x31, 0x0a,
	0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x22, 0xa1, 0x01, 0x0a, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x42, 0x79, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x22, 0x96, 0x01, 0x0a, 0x2f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x8d, 0x01,
	0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x3f, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x1f, 0x0a,
	0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa1,
	0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x2b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x20, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x44, 0x12, 0x4e, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x22, 0x2e, 0x0a, 0x2c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x42, 0x0a, 0x1c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x22, 0x2a, 0x0a, 0x28, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa1, 0x01, 0x0a,
	0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x22, 0x24, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x2b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x4e, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x22, 0x2e, 0x0a, 0x2c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x3f, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x22, 0x1f, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x44, 0x12, 0x44, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc9, 0x01,
	0x0a, 0x2b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a,
	0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x4e, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x2e, 0x0a, 0x2c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x1d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x20, 0x0a,
	0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xb9, 0x01, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x4a, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x2a, 0x0a, 0x28, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x46, 0x0a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x22, 0x26, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73,
	0x73, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x0a, 0x18, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x3b, 0x0a,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x68, 0x0a, 0x26, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x44, 0x22, 0x29, 0x0a, 0x27, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x0a, 0x25,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x28, 0x0a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x52, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x8f, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x07, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xb1, 0x01, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12,
	0x48, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x28, 0x0a, 0x26, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xfa, 0x06, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x49, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x64, 0x42, 0x79,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x51, 0x0a, 0x11, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x52, 0x11, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x6c, 0x75,
	0x72, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75,
	0x67, 0x12, 0x30, 0x0a, 0x13, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x59, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x09,
	0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x53, 0x74, 0x65,
	0x70, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x53, 0x74,
	0x65, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x11, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x3c,
	0x0a, 0x11, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x11, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x53, 0x65, 0x61, 0x6c, 0x4f, 0x66, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x53, 0x65, 0x61, 0x6c, 0x4f, 0x66, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x6c, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x6c, 0x73,
	0x22, 0x93, 0x05, 0x0a, 0x1a, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x2e, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x49, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x11, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c,
	0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50,
	0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75,
	0x67, 0x12, 0x30, 0x0a, 0x13, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x59, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x11, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x4d, 0x61, 0x78, 0x52, 0x11, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73,
	0x6b, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x09, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x3c, 0x0a, 0x05,
	0x53, 0x74, 0x65, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x05, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x6c,
	0x73, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x41, 0x6c, 0x73, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x6c, 0x4f, 0x66, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x53, 0x65, 0x61, 0x6c,
	0x4f, 0x66, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6c,
	0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x6c, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x4d, 0x65, 0x61, 0x6c, 0x73, 0x22, 0xab, 0x03, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x28,
	0x0a, 0x0f, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73,
	0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x65, 0x6c, 0x6f,
	0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x69,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x69,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0xf7, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x65, 0x6c, 0x6f,
	0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xf5,
	0x01, 0x0a, 0x1d, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42, 0x65, 0x6c, 0x6f, 0x6e,
	0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73,
	0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1a, 0x0a, 0x08,
	0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xd6, 0x05, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x5e, 0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33,
	0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x1b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73,
	0x69, 0x75, 0x73, 0x12, 0x6c, 0x0a, 0x1f, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78,
	0x52, 0x1f, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a,
	0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42, 0x65, 0x6c, 0x6f,
	0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x45,
	0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1b, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x65, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x52, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x65, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22,
	0xba, 0x04, 0x0a, 0x22, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x5e, 0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65,
	0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x1b, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43,
	0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x12, 0x6c, 0x0a, 0x1f, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x4d, 0x61, 0x78, 0x52, 0x1f, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x45, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54,
	0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x50,
	0x0a, 0x0b, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x0b, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0xc2, 0x01, 0x0a,
	0x12, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x65, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x38, 0x0a, 0x17, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73,
	0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54,
	0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x30, 0x0a, 0x13, 0x53, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x73, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x53, 0x61,
	0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x73, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x22, 0x8c, 0x01, 0x0a, 0x26, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70,
	0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x13,
	0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e,
	0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x30,
	0x0a, 0x13, 0x53, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x73, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x53, 0x61, 0x74,
	0x69, 0x73, 0x66, 0x69, 0x65, 0x73, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x22, 0xc4, 0x01, 0x0a, 0x24, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x61, 0x74,
	0x69, 0x73, 0x66, 0x69, 0x65, 0x73, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x53, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x30, 0x0a, 0x13, 0x42,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67,
	0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x38, 0x0a,
	0x17, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50,
	0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x22, 0xa2, 0x01, 0x0a, 0x32, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x57, 0x69,
	0x74, 0x68, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x3a,
	0x0a, 0x18, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x18, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x61,
	0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x73, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x53, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x22, 0xc4, 0x04, 0x0a,
	0x20, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x45, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x45, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a,
	0x1b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x1b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x12, 0x7e, 0x0a,
	0x1f, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x1f, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54,
	0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x65, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x65, 0x70, 0x73, 0x22, 0xd2, 0x04, 0x0a, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72,
	0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x5e, 0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65,
	0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x1b, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43,
	0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x12, 0x6c, 0x0a, 0x1f, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x4d, 0x61, 0x78, 0x52, 0x1f, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1b,
	0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1b, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54,
	0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x5c,
	0x0a, 0x0b, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x57,
	0x69, 0x74, 0x68, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x0b, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0xae, 0x03, 0x0a, 0x0c, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x61, 0x73, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x54, 0x61, 0x73, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x66,
	0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x44,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x22, 0xfa, 0x01, 0x0a, 0x20, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x61, 0x73, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x54, 0x61, 0x73, 0x74, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x4f,
	0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x22, 0xf8, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x61, 0x73, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x54, 0x61, 0x73, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44,
	0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x43, 0x6c,
	0x65, 0x61, 0x6e, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x4f, 0x76, 0x65, 0x72,
	0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x22, 0xba, 0x08, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x53, 0x0a, 0x16, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x16, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x50, 0x0a, 0x14, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e,
	0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x14, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75,
	0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a,
	0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67,
	0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x12, 0x35, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x56, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73,
	0x65, 0x6c, 0x52, 0x07, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x12, 0x59, 0x0a, 0x14, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x22, 0xe6,
	0x03, 0x0a, 0x1d, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x0f, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x30, 0x0a, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0b, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0b,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0xe7, 0x01, 0x0a, 0x31, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2c, 0x0a,
	0x11, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x42,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67,
	0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x22, 0xa9, 0x02, 0x0a, 0x42, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67,
	0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x51,
	0x0a, 0x0b, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0xfd, 0x02,
	0x0a, 0x27, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x56, 0x0a, 0x26, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x26, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x82, 0x01,
	0x0a, 0x4c, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x32,
	0x0a, 0x14, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x2f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54,
	0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0xff, 0x06, 0x0a, 0x1e, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x53, 0x0a, 0x16, 0x45,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x16, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x50, 0x0a, 0x14, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x14, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69,
	0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x30,
	0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x52, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0b, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x07, 0x56, 0x65, 0x73, 0x73,
	0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56, 0x65, 0x73,
	0x73, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x07, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73,
	0x12, 0x49, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x0b, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x0b, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x6d, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x12, 0x38, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x22, 0xd8, 0x06, 0x0a, 0x14, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3c, 0x0a,
	0x19, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x0a, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x36, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x13,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x30,
	0x0a, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x52, 0x08, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x0f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0f, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x54,
	0x6f, 0x54, 0x61, 0x73, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x54, 0x6f,
	0x54, 0x61, 0x73, 0x74, 0x65, 0x22, 0x97, 0x05, 0x0a, 0x28, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x48, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x66, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1f, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b,
	0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x36,
	0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x11, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x52, 0x08, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x74, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x74, 0x65, 0x22,
	0x85, 0x05, 0x0a, 0x26, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x30,
	0x0a, 0x13, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x0d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x30,
	0x0a, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x12, 0x51, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x56, 0x65, 0x73, 0x73,
	0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x6f, 0x54, 0x61, 0x73,
	0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x74,
	0x65, 0x12, 0x36, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x22, 0xcb, 0x04, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65, 0x6c, 0x6f,
	0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x3e, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x4d, 0x61, 0x78, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x61, 0x6e, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0xd6, 0x03, 0x0a, 0x28, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x48, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f,
	0x66, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1f, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3e,
	0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4d, 0x61, 0x78, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0x92,
	0x03, 0x0a, 0x26, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x30, 0x0a,
	0x13, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x30, 0x0a,
	0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65, 0x6c, 0x6f,
	0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x50, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x22, 0xee, 0x06, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x5e, 0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33,
	0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x1b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73,
	0x69, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x18, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x08,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x0f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0f, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x16,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x65, 0x6c, 0x6f,
	0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x30,
	0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x73, 0x57, 0x61, 0x73, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49,
	0x73, 0x57, 0x61, 0x73, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x4c, 0x69, 0x71, 0x75,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0xee, 0x04, 0x0a, 0x25, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x5e,
	0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x1b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x12, 0x57,
	0x0a, 0x18, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x18, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12,
	0x36, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x56, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x56, 0x65, 0x73, 0x73,
	0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a,
	0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x49, 0x73, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x49, 0x73, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x49,
	0x73, 0x57, 0x61, 0x73, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73,
	0x57, 0x61, 0x73, 0x74, 0x65, 0x22, 0x9e, 0x05, 0x0a, 0x23, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54,
	0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x5e, 0x0a, 0x1b, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x1b,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x18, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x18, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x49, 0x73, 0x57, 0x61, 0x73, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x49, 0x73, 0x57, 0x61, 0x73, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x36,
	0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x56, 0x65, 0x73,
	0x73, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x93, 0x04, 0x0a, 0x1c, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x53, 0x0a, 0x16, 0x45, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x16, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x14,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c,
	0x73, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x14, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x6c, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x6c, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x22, 0xb7, 0x04, 0x0a,
	0x10, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61,
	0x78, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x0d, 0x4c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a,
	0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x06, 0x56,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x52, 0x06, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x30,
	0x0a, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x12, 0x2c, 0x0a, 0x11, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x56, 0x65, 0x73,
	0x73, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x22, 0xc6, 0x03, 0x0a, 0x24, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x30, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x3a, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x66, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x66, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x48, 0x0a,
	0x1f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f,
	0x66, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x56, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x31, 0x36, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x50, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x55,
	0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x65, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x55, 0x6e, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x22,
	0x82, 0x03, 0x0a, 0x22, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44,
	0x12, 0x50, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x31, 0x36, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x56,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x32, 0x0a, 0x14, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x65, 0x70, 0x22, 0xe7, 0x03, 0x0a, 0x18, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x64, 0x42,
	0x79, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x49, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x6c, 0x4f, 0x66, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x53, 0x65, 0x61,
	0x6c, 0x4f, 0x66, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x63, 0x0a, 0x11, 0x45,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x11, 0x45,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50,
	0x6c, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x4d,
	0x65, 0x61, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x45, 0x6c, 0x69, 0x67,
	0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x13,
	0x59, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x59, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x32,
	0x0a, 0x14, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x49, 0x44, 0x22, 0x17, 0x0a, 0x15, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x0a, 0x1c, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x22, 0x1f, 0x0a, 0x1d, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x0a, 0x1a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x22, 0x1d, 0x0a, 0x1b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a, 0x0a, 0x18, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49,
	0x44, 0x22, 0x1b, 0x0a, 0x19, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb7,
	0x01, 0x0a, 0x2b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x48,
	0x0a, 0x1f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x2e, 0x0a, 0x2c, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x22, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12,
	0x36, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x25, 0x0a, 0x23, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9c,
	0x01, 0x0a, 0x22, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x25, 0x0a,
	0x23, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x1f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x22, 0x22, 0x0a, 0x20, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90,
	0x01, 0x0a, 0x1e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49,
	0x44, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49,
	0x44, 0x22, 0x21, 0x0a, 0x1f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x22, 0x3d, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x16, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7b, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12,
	0x40, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72,
	0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x77, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x73, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12,
	0x3c, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x1a, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x2a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x60, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f,
	0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x2d, 0x0a, 0x2b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x21, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12,
	0x46, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xab, 0x01,
	0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x49, 0x44, 0x12, 0x46, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xa5, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x21, 0x0a, 0x1f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa3, 0x01, 0x0a,
	0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x42,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x22, 0x20, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x6d, 0x61,
	0x69, 0x64, 0x44, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x49, 0x44, 0x22, 0x40, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x6d,
	0x61, 0x69, 0x64, 0x44, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x22, 0x20, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65,
	0x70, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22,
	0x1b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x64, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x49, 0x44, 0x22, 0x7b, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50,
	0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a,
	0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72,
	0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22,
	0x5c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x22, 0x19, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x49, 0x44, 0x22, 0x80, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x56, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44,
	0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x27, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x48, 0x0a, 0x1f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22,
	0x2a, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x28,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x49, 0x44, 0x22, 0x99, 0x01, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x3f, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0x98, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x21, 0x0a, 0x1f,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x8e, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44,
	0x22, 0x87, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x98, 0x01, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x36, 0x0a,
	0x16, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x21, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x22, 0x87, 0x01, 0x0a, 0x20, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x22, 0x1e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x49, 0x44, 0x22, 0x81, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x22, 0x1d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x49, 0x44, 0x22, 0x7f, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x22, 0x60, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x49, 0x44, 0x22, 0x73, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x07,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x40, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x6b, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x28, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x5c, 0x0a, 0x17, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x6f, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x26, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x69, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x1b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x22, 0x1e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a,
	0x0e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x95, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x3a, 0x0a,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x85, 0x02, 0x0a, 0x2a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x49, 0x44, 0x12, 0x48, 0x0a, 0x1f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x4d,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x2d, 0x0a,
	0x2b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe1, 0x01, 0x0a,
	0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x49, 0x44, 0x12, 0x36, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x22, 0x24, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x24, 0x0a, 0x22, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xd5, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x41, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x21, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x1d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x2e, 0x0a,
	0x12, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x40, 0x0a,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22,
	0x20, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x48, 0x0a, 0x24, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x6f, 0x75,
	0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x22, 0x41, 0x0a, 0x25, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xe8,
	0x03, 0x0a, 0x04, 0x4d, 0x65, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a,
	0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x51, 0x0a, 0x11, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x52,
	0x11, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72,
	0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0x7f, 0x0a, 0x0d, 0x4d, 0x65, 0x61,
	0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x26, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x52, 0x06, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x21, 0x4d,
	0x65, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x1f, 0x4d, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x22, 0xa2, 0x02, 0x0a,
	0x18, 0x4d, 0x65, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x51, 0x0a, 0x11, 0x45, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x52, 0x11, 0x45, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a,
	0x14, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x45, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x73, 0x22, 0xcd, 0x04, 0x0a, 0x08, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x38,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x56, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x56, 0x6f,
	0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3a, 0x0a, 0x0a,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x2e, 0x0a, 0x12, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x48, 0x6f, 0x75,
	0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x42, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x24, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x22, 0xe3, 0x01, 0x0a, 0x1c, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x41, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xd5, 0x03, 0x0a, 0x0d, 0x4d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x41, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x41, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x45,
	0x6e, 0x64, 0x73, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x45, 0x6e, 0x64, 0x73, 0x41, 0x74, 0x12,
	0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x4d, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x4d, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x11, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x65, 0x6c, 0x6f,
	0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x30, 0x0a,
	0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x87, 0x02, 0x0a, 0x21, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x45, 0x6e, 0x64, 0x73, 0x41, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x06, 0x45, 0x6e, 0x64, 0x73, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x73, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x41,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x65, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xed, 0x01, 0x0a, 0x1f, 0x4d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x41, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4d,
	0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d,
	0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x45, 0x6e, 0x64, 0x73, 0x41,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x06, 0x45, 0x6e, 0x64, 0x73, 0x41, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x42,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54,
	0x6f, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0xf5, 0x05, 0x0a, 0x17, 0x4d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64,
	0x55, 0x50, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x64, 0x55, 0x50, 0x43, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x58, 0x0a, 0x18, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x18, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x65, 0x6c, 0x6f,
	0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x0e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78,
	0x52, 0x0e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x12, 0x46, 0x0a, 0x0f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x22, 0x8c, 0x04, 0x0a, 0x2b, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72,
	0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x55, 0x50,
	0x43, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x64, 0x55, 0x50, 0x43, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x2c, 0x0a, 0x11, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x2c, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x36, 0x0a,
	0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78,
	0x52, 0x0e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x22, 0x9c, 0x04, 0x0a, 0x29, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f,
	0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2c,
	0x0a, 0x11, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x65, 0x6c, 0x6f, 0x6e,
	0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x2c, 0x0a, 0x11,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x11, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x12, 0x3e,
	0x0a, 0x1a, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1a, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x55, 0x50, 0x43, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x55,
	0x50, 0x43, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x5d, 0x0a, 0x0e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x0e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x22,
	0xa2, 0x04, 0x0a, 0x0e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6f, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f,
	0x6f, 0x6b, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e,
	0x0a, 0x12, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x73, 0x68, 0x77, 0x61,
	0x73, 0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x73, 0x68, 0x77, 0x61, 0x73, 0x68, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54,
	0x6f, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x05,
	0x56, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x20,
	0x0a, 0x04, 0x4d, 0x65, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x52, 0x04, 0x4d, 0x65, 0x61, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x4d, 0x65, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x65, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x54, 0x69, 0x65, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc4, 0x01, 0x0a, 0x22, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6f, 0x6b, 0x12,
	0x2e, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x73, 0x68, 0x77,
	0x61, 0x73, 0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x73, 0x68, 0x77, 0x61, 0x73, 0x68, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x4d, 0x65, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x4d, 0x65, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x4d, 0x65, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x4d, 0x65, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x20,
	0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x4d, 0x65, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6f, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f,
	0x6f, 0x6b, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x69,
	0x73, 0x68, 0x77, 0x61, 0x73, 0x68, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x73, 0x68, 0x77, 0x61, 0x73, 0x68,
	0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x4d, 0x65, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x12, 0x36, 0x0a, 0x16, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xf2, 0x02, 0x0a, 0x12, 0x4d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x12,
	0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x17, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x52,
	0x61, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x62, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x41, 0x62, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x22, 0xc7, 0x01,
	0x0a, 0x1f, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x17, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x6e,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x41, 0x62, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x41, 0x62, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x22, 0x67, 0x0a, 0x26, 0x4d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x3d, 0x0a, 0x05, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x56, 0x6f, 0x74, 0x65, 0x73,
	0x22, 0xa4, 0x01, 0x0a, 0x24, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x52,
	0x61, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x62, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x41, 0x62, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x12, 0x38, 0x0a,
	0x17, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf8, 0x03, 0x0a, 0x0c, 0x4d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3e, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x9a, 0x02, 0x0a, 0x20, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65,
	0x70, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22,
	0xa4, 0x01, 0x0a, 0x24, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0xa6, 0x01, 0x0a, 0x1a, 0x4d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73,
	0x54, 0x6f, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x48, 0x6f, 0x75, 0x73,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x56,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x22,
	0xd6, 0x02, 0x0a, 0x16, 0x4d, 0x65, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x24, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x11, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x11, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x45,
	0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x45, 0x6c, 0x69, 0x67, 0x69,
	0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12,
	0x47, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61,
	0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0a, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x2c, 0x0a, 0x12, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x65, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x65, 0x61, 0x6c, 0x49, 0x44, 0x22, 0x15, 0x0a, 0x13, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x4d, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x0a,
	0x16, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x22, 0x19, 0x0a, 0x17, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x67, 0x0a, 0x1b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x1e, 0x0a, 0x1c, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x25,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47,
	0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x19, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x44, 0x22, 0x28, 0x0a, 0x26, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x01,
	0x0a, 0x1c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x28,
	0x0a, 0x0f, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x22, 0x1f, 0x0a, 0x1d, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x20, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x32, 0x0a, 0x14, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f,
	0x74, 0x65, 0x49, 0x44, 0x22, 0x23, 0x0a, 0x21, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x14,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x18, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7d, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x3f, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x1d, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x49,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47,
	0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x27, 0x0a, 0x25, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65,
	0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x1e,
	0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb1,
	0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x22, 0x22, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7b, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x39, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x22, 0x1a, 0x0a, 0x18,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x61, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x61, 0x6c,
	0x49, 0x44, 0x22, 0x11, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x22, 0x15, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x63, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a,
	0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x1a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x67, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x22, 0x79, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x07,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x3c, 0x0a,
	0x19, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x22, 0x24, 0x0a, 0x22, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x7c, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x46, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x22,
	0x98, 0x01, 0x0a, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47,
	0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x46,
	0x6f, 0x72, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x39, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x1b, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x6f, 0x74, 0x65, 0x49, 0x44, 0x22, 0x1f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x83, 0x01, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x07, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0x92, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f,
	0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x79, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x2e, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x60, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x6d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x22, 0x77, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22,
	0x4e, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x46,
	0x6f, 0x72, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22,
	0x7b, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x46,
	0x6f, 0x72, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x3e, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x65, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x52, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x73, 0x22, 0x22, 0x0a, 0x20, 0x52, 0x75, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x23, 0x0a, 0x21, 0x52, 0x75, 0x6e, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x0a, 0x2e,
	0x52, 0x75, 0x6e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65,
	0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x31,
	0x0a, 0x2f, 0x52, 0x75, 0x6e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f,
	0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x25, 0x0a, 0x23, 0x52, 0x75, 0x6e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x26, 0x0a, 0x24, 0x52, 0x75, 0x6e, 0x4d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x5a, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x61,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x6d, 0x0a, 0x16,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65,
	0x61, 0x6c, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x71, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x18,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x3d, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x22, 0x1d, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xcd, 0x01, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x19, 0x6d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x47, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22,
	0x27, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3e,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x1e,
	0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8f,
	0x02, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10,
	0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x22, 0x22, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x12, 0x42, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x22, 0x22, 0x0a, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x48, 0x6f, 0x75,
	0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x22, 0x37, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x3c, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x31, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x74, 0x0a, 0x2a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x48, 0x6f, 0x75,
	0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x46, 0x0a, 0x1e, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x44, 0x22, 0x2d, 0x0a, 0x2b, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x0a, 0x29, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x2c, 0x0a, 0x2a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x6f,
	0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x56, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x28, 0x47,
	0x65, 0x74, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x07, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x22, 0x70, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x75, 0x73, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46,
	0x0a, 0x1e, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x49, 0x44, 0x22, 0x29, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x75,
	0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xc1, 0x01, 0x0a, 0x29, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x75, 0x73,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x46, 0x0a, 0x1e, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x44, 0x12, 0x4c, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x2c, 0x0a, 0x2a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x81, 0x03, 0x0a, 0x1c, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a,
	0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xc2, 0x01, 0x0a, 0x30, 0x48, 0x6f, 0x75, 0x73,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x2e, 0x0a, 0x12, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x48, 0x6f, 0x75,
	0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x42, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x90, 0x01, 0x0a,
	0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x42,
	0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x64, 0x6f, 0x6e, 0x65, 0x62, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2f, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_messages_eating_proto_rawDescOnce sync.Once
	file_messages_eating_proto_rawDescData []byte
)

func file_messages_eating_proto_rawDescGZIP() []byte {
	file_messages_eating_proto_rawDescOnce.Do(func() {
		file_messages_eating_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_messages_eating_proto_rawDesc), len(file_messages_eating_proto_rawDesc)))
	})
	return file_messages_eating_proto_rawDescData
}

var file_messages_eating_proto_msgTypes = make([]protoimpl.MessageInfo, 487)
var file_messages_eating_proto_goTypes = []any{
	(*EatingUserDataCollection)(nil),                                    // 0: eating.EatingUserDataCollection
	(*ValidIngredient)(nil),                                             // 1: eating.ValidIngredient
	(*ValidIngredientCreationRequestInput)(nil),                         // 2: eating.ValidIngredientCreationRequestInput
	(*ValidIngredientGroup)(nil),                                        // 3: eating.ValidIngredientGroup
	(*ValidIngredientGroupCreationRequestInput)(nil),                    // 4: eating.ValidIngredientGroupCreationRequestInput
	(*ValidIngredientGroupMember)(nil),                                  // 5: eating.ValidIngredientGroupMember
	(*ValidIngredientGroupMemberCreationRequestInput)(nil),              // 6: eating.ValidIngredientGroupMemberCreationRequestInput
	(*ValidIngredientGroupUpdateRequestInput)(nil),                      // 7: eating.ValidIngredientGroupUpdateRequestInput
	(*ValidIngredientMeasurementUnit)(nil),                              // 8: eating.ValidIngredientMeasurementUnit
	(*ValidIngredientMeasurementUnitCreationRequestInput)(nil),          // 9: eating.ValidIngredientMeasurementUnitCreationRequestInput
	(*ValidIngredientMeasurementUnitUpdateRequestInput)(nil),            // 10: eating.ValidIngredientMeasurementUnitUpdateRequestInput
	(*ValidIngredientPreparation)(nil),                                  // 11: eating.ValidIngredientPreparation
	(*ValidIngredientPreparationCreationRequestInput)(nil),              // 12: eating.ValidIngredientPreparationCreationRequestInput
	(*ValidIngredientPreparationUpdateRequestInput)(nil),                // 13: eating.ValidIngredientPreparationUpdateRequestInput
	(*ValidIngredientState)(nil),                                        // 14: eating.ValidIngredientState
	(*ValidIngredientStateCreationRequestInput)(nil),                    // 15: eating.ValidIngredientStateCreationRequestInput
	(*ValidIngredientStateIngredient)(nil),                              // 16: eating.ValidIngredientStateIngredient
	(*ValidIngredientStateIngredientCreationRequestInput)(nil),          // 17: eating.ValidIngredientStateIngredientCreationRequestInput
	(*ValidIngredientStateIngredientUpdateRequestInput)(nil),            // 18: eating.ValidIngredientStateIngredientUpdateRequestInput
	(*ValidIngredientStateUpdateRequestInput)(nil),                      // 19: eating.ValidIngredientStateUpdateRequestInput
	(*ValidIngredientUpdateRequestInput)(nil),                           // 20: eating.ValidIngredientUpdateRequestInput
	(*ValidInstrument)(nil),                                             // 21: eating.ValidInstrument
	(*ValidInstrumentCreationRequestInput)(nil),                         // 22: eating.ValidInstrumentCreationRequestInput
	(*ValidInstrumentUpdateRequestInput)(nil),                           // 23: eating.ValidInstrumentUpdateRequestInput
	(*ValidMeasurementUnit)(nil),                                        // 24: eating.ValidMeasurementUnit
	(*ValidMeasurementUnitConversion)(nil),                              // 25: eating.ValidMeasurementUnitConversion
	(*ValidMeasurementUnitConversionCreationRequestInput)(nil),          // 26: eating.ValidMeasurementUnitConversionCreationRequestInput
	(*ValidMeasurementUnitConversionUpdateRequestInput)(nil),            // 27: eating.ValidMeasurementUnitConversionUpdateRequestInput
	(*ValidMeasurementUnitCreationRequestInput)(nil),                    // 28: eating.ValidMeasurementUnitCreationRequestInput
	(*ValidMeasurementUnitUpdateRequestInput)(nil),                      // 29: eating.ValidMeasurementUnitUpdateRequestInput
	(*ValidPreparation)(nil),                                            // 30: eating.ValidPreparation
	(*ValidPreparationCreationRequestInput)(nil),                        // 31: eating.ValidPreparationCreationRequestInput
	(*ValidPreparationInstrument)(nil),                                  // 32: eating.ValidPreparationInstrument
	(*ValidPreparationInstrumentCreationRequestInput)(nil),              // 33: eating.ValidPreparationInstrumentCreationRequestInput
	(*ValidPreparationInstrumentUpdateRequestInput)(nil),                // 34: eating.ValidPreparationInstrumentUpdateRequestInput
	(*ValidPreparationUpdateRequestInput)(nil),                          // 35: eating.ValidPreparationUpdateRequestInput
	(*ValidPreparationVessel)(nil),                                      // 36: eating.ValidPreparationVessel
	(*ValidPreparationVesselCreationRequestInput)(nil),                  // 37: eating.ValidPreparationVesselCreationRequestInput
	(*ValidPreparationVesselUpdateRequestInput)(nil),                    // 38: eating.ValidPreparationVesselUpdateRequestInput
	(*ValidVessel)(nil),                                                 // 39: eating.ValidVessel
	(*ValidVesselCreationRequestInput)(nil),                             // 40: eating.ValidVesselCreationRequestInput
	(*ValidVesselUpdateRequestInput)(nil),                               // 41: eating.ValidVesselUpdateRequestInput
	(*UserIngredientPreference)(nil),                                    // 42: eating.UserIngredientPreference
	(*UserIngredientPreferenceCreationRequestInput)(nil),                // 43: eating.UserIngredientPreferenceCreationRequestInput
	(*UserIngredientPreferenceUpdateRequestInput)(nil),                  // 44: eating.UserIngredientPreferenceUpdateRequestInput
	(*ArchiveValidIngredientRequest)(nil),                               // 45: eating.ArchiveValidIngredientRequest
	(*ArchiveValidIngredientResponse)(nil),                              // 46: eating.ArchiveValidIngredientResponse
	(*ArchiveValidIngredientGroupRequest)(nil),                          // 47: eating.ArchiveValidIngredientGroupRequest
	(*ArchiveValidIngredientGroupResponse)(nil),                         // 48: eating.ArchiveValidIngredientGroupResponse
	(*ArchiveValidIngredientMeasurementUnitRequest)(nil),                // 49: eating.ArchiveValidIngredientMeasurementUnitRequest
	(*ArchiveValidIngredientMeasurementUnitResponse)(nil),               // 50: eating.ArchiveValidIngredientMeasurementUnitResponse
	(*ArchiveValidIngredientPreparationRequest)(nil),                    // 51: eating.ArchiveValidIngredientPreparationRequest
	(*ArchiveValidIngredientPreparationResponse)(nil),                   // 52: eating.ArchiveValidIngredientPreparationResponse
	(*ArchiveValidIngredientStateRequest)(nil),                          // 53: eating.ArchiveValidIngredientStateRequest
	(*ArchiveValidIngredientStateResponse)(nil),                         // 54: eating.ArchiveValidIngredientStateResponse
	(*ArchiveValidIngredientStateIngredientRequest)(nil),                // 55: eating.ArchiveValidIngredientStateIngredientRequest
	(*ArchiveValidIngredientStateIngredientResponse)(nil),               // 56: eating.ArchiveValidIngredientStateIngredientResponse
	(*ArchiveValidInstrumentRequest)(nil),                               // 57: eating.ArchiveValidInstrumentRequest
	(*ArchiveValidInstrumentResponse)(nil),                              // 58: eating.ArchiveValidInstrumentResponse
	(*ArchiveValidMeasurementUnitRequest)(nil),                          // 59: eating.ArchiveValidMeasurementUnitRequest
	(*ArchiveValidMeasurementUnitResponse)(nil),                         // 60: eating.ArchiveValidMeasurementUnitResponse
	(*ArchiveValidMeasurementUnitConversionRequest)(nil),                // 61: eating.ArchiveValidMeasurementUnitConversionRequest
	(*ArchiveValidMeasurementUnitConversionResponse)(nil),               // 62: eating.ArchiveValidMeasurementUnitConversionResponse
	(*ArchiveValidPreparationRequest)(nil),                              // 63: eating.ArchiveValidPreparationRequest
	(*ArchiveValidPreparationResponse)(nil),                             // 64: eating.ArchiveValidPreparationResponse
	(*ArchiveValidPreparationInstrumentRequest)(nil),                    // 65: eating.ArchiveValidPreparationInstrumentRequest
	(*ArchiveValidPreparationInstrumentResponse)(nil),                   // 66: eating.ArchiveValidPreparationInstrumentResponse
	(*ArchiveValidPreparationVesselRequest)(nil),                        // 67: eating.ArchiveValidPreparationVesselRequest
	(*ArchiveValidPreparationVesselResponse)(nil),                       // 68: eating.ArchiveValidPreparationVesselResponse
	(*ArchiveValidVesselRequest)(nil),                                   // 69: eating.ArchiveValidVesselRequest
	(*ArchiveValidVesselResponse)(nil),                                  // 70: eating.ArchiveValidVesselResponse
	(*CreateValidIngredientRequest)(nil),                                // 71: eating.CreateValidIngredientRequest
	(*CreateValidIngredientResponse)(nil),                               // 72: eating.CreateValidIngredientResponse
	(*CreateValidIngredientGroupRequest)(nil),                           // 73: eating.CreateValidIngredientGroupRequest
	(*CreateValidIngredientGroupResponse)(nil),                          // 74: eating.CreateValidIngredientGroupResponse
	(*CreateValidIngredientMeasurementUnitRequest)(nil),                 // 75: eating.CreateValidIngredientMeasurementUnitRequest
	(*CreateValidIngredientMeasurementUnitResponse)(nil),                // 76: eating.CreateValidIngredientMeasurementUnitResponse
	(*CreateValidIngredientPreparationRequest)(nil),                     // 77: eating.CreateValidIngredientPreparationRequest
	(*CreateValidIngredientPreparationResponse)(nil),                    // 78: eating.CreateValidIngredientPreparationResponse
	(*CreateValidIngredientStateRequest)(nil),                           // 79: eating.CreateValidIngredientStateRequest
	(*CreateValidIngredientStateResponse)(nil),                          // 80: eating.CreateValidIngredientStateResponse
	(*CreateValidIngredientStateIngredientRequest)(nil),                 // 81: eating.CreateValidIngredientStateIngredientRequest
	(*CreateValidIngredientStateIngredientResponse)(nil),                // 82: eating.CreateValidIngredientStateIngredientResponse
	(*CreateValidInstrumentRequest)(nil),                                // 83: eating.CreateValidInstrumentRequest
	(*CreateValidInstrumentResponse)(nil),                               // 84: eating.CreateValidInstrumentResponse
	(*CreateValidMeasurementUnitRequest)(nil),                           // 85: eating.CreateValidMeasurementUnitRequest
	(*CreateValidMeasurementUnitResponse)(nil),                          // 86: eating.CreateValidMeasurementUnitResponse
	(*CreateValidMeasurementUnitConversionRequest)(nil),                 // 87: eating.CreateValidMeasurementUnitConversionRequest
	(*CreateValidMeasurementUnitConversionResponse)(nil),                // 88: eating.CreateValidMeasurementUnitConversionResponse
	(*CreateValidPreparationRequest)(nil),                               // 89: eating.CreateValidPreparationRequest
	(*CreateValidPreparationResponse)(nil),                              // 90: eating.CreateValidPreparationResponse
	(*CreateValidPreparationInstrumentRequest)(nil),                     // 91: eating.CreateValidPreparationInstrumentRequest
	(*CreateValidPreparationInstrumentResponse)(nil),                    // 92: eating.CreateValidPreparationInstrumentResponse
	(*CreateValidPreparationVesselRequest)(nil),                         // 93: eating.CreateValidPreparationVesselRequest
	(*CreateValidPreparationVesselResponse)(nil),                        // 94: eating.CreateValidPreparationVesselResponse
	(*CreateValidVesselRequest)(nil),                                    // 95: eating.CreateValidVesselRequest
	(*CreateValidVesselResponse)(nil),                                   // 96: eating.CreateValidVesselResponse
	(*GetRandomValidIngredientRequest)(nil),                             // 97: eating.GetRandomValidIngredientRequest
	(*GetRandomValidIngredientResponse)(nil),                            // 98: eating.GetRandomValidIngredientResponse
	(*GetRandomValidInstrumentRequest)(nil),                             // 99: eating.GetRandomValidInstrumentRequest
	(*GetRandomValidInstrumentResponse)(nil),                            // 100: eating.GetRandomValidInstrumentResponse
	(*GetRandomValidPreparationRequest)(nil),                            // 101: eating.GetRandomValidPreparationRequest
	(*GetRandomValidPreparationResponse)(nil),                           // 102: eating.GetRandomValidPreparationResponse
	(*GetRandomValidVesselRequest)(nil),                                 // 103: eating.GetRandomValidVesselRequest
	(*GetRandomValidVesselResponse)(nil),                                // 104: eating.GetRandomValidVesselResponse
	(*GetValidIngredientRequest)(nil),                                   // 105: eating.GetValidIngredientRequest
	(*GetValidIngredientResponse)(nil),                                  // 106: eating.GetValidIngredientResponse
	(*GetValidIngredientGroupRequest)(nil),                              // 107: eating.GetValidIngredientGroupRequest
	(*GetValidIngredientGroupResponse)(nil),                             // 108: eating.GetValidIngredientGroupResponse
	(*GetValidIngredientGroupsRequest)(nil),                             // 109: eating.GetValidIngredientGroupsRequest
	(*GetValidIngredientGroupsResponse)(nil),                            // 110: eating.GetValidIngredientGroupsResponse
	(*GetValidIngredientMeasurementUnitRequest)(nil),                    // 111: eating.GetValidIngredientMeasurementUnitRequest
	(*GetValidIngredientMeasurementUnitResponse)(nil),                   // 112: eating.GetValidIngredientMeasurementUnitResponse
	(*GetValidIngredientMeasurementUnitsRequest)(nil),                   // 113: eating.GetValidIngredientMeasurementUnitsRequest
	(*GetValidIngredientMeasurementUnitsResponse)(nil),                  // 114: eating.GetValidIngredientMeasurementUnitsResponse
	(*GetValidIngredientMeasurementUnitsByIngredientRequest)(nil),       // 115: eating.GetValidIngredientMeasurementUnitsByIngredientRequest
	(*GetValidIngredientMeasurementUnitsByIngredientResponse)(nil),      // 116: eating.GetValidIngredientMeasurementUnitsByIngredientResponse
	(*GetValidIngredientMeasurementUnitsByMeasurementUnitRequest)(nil),  // 117: eating.GetValidIngredientMeasurementUnitsByMeasurementUnitRequest
	(*GetValidIngredientMeasurementUnitsByMeasurementUnitResponse)(nil), // 118: eating.GetValidIngredientMeasurementUnitsByMeasurementUnitResponse
	(*GetValidIngredientPreparationRequest)(nil),                        // 119: eating.GetValidIngredientPreparationRequest
	(*GetValidIngredientPreparationResponse)(nil),                       // 120: eating.GetValidIngredientPreparationResponse
	(*GetValidIngredientPreparationsRequest)(nil),                       // 121: eating.GetValidIngredientPreparationsRequest
	(*GetValidIngredientPreparationsResponse)(nil),                      // 122: eating.GetValidIngredientPreparationsResponse
	(*GetValidIngredientPreparationsByIngredientRequest)(nil),           // 123: eating.GetValidIngredientPreparationsByIngredientRequest
	(*GetValidIngredientPreparationsByIngredientResponse)(nil),          // 124: eating.GetValidIngredientPreparationsByIngredientResponse
	(*GetValidIngredientPreparationsByPreparationRequest)(nil),          // 125: eating.GetValidIngredientPreparationsByPreparationRequest
	(*GetValidIngredientPreparationsByPreparationResponse)(nil),         // 126: eating.GetValidIngredientPreparationsByPreparationResponse
	(*GetValidIngredientStateRequest)(nil),                              // 127: eating.GetValidIngredientStateRequest
	(*GetValidIngredientStateResponse)(nil),                             // 128: eating.GetValidIngredientStateResponse
	(*GetValidIngredientStateIngredientRequest)(nil),                    // 129: eating.GetValidIngredientStateIngredientRequest
	(*GetValidIngredientStateIngredientResponse)(nil),                   // 130: eating.GetValidIngredientStateIngredientResponse
	(*GetValidIngredientStateIngredientsRequest)(nil),                   // 131: eating.GetValidIngredientStateIngredientsRequest
	(*GetValidIngredientStateIngredientsResponse)(nil),                  // 132: eating.GetValidIngredientStateIngredientsResponse
	(*GetValidIngredientStateIngredientsByIngredientRequest)(nil),       // 133: eating.GetValidIngredientStateIngredientsByIngredientRequest
	(*GetValidIngredientStateIngredientsByIngredientResponse)(nil),      // 134: eating.GetValidIngredientStateIngredientsByIngredientResponse
	(*GetValidIngredientStateIngredientsByIngredientStateRequest)(nil),  // 135: eating.GetValidIngredientStateIngredientsByIngredientStateRequest
	(*GetValidIngredientStateIngredientsByIngredientStateResponse)(nil), // 136: eating.GetValidIngredientStateIngredientsByIngredientStateResponse
	(*GetValidIngredientStatesRequest)(nil),                             // 137: eating.GetValidIngredientStatesRequest
	(*GetValidIngredientStatesResponse)(nil),                            // 138: eating.GetValidIngredientStatesResponse
	(*GetValidIngredientsRequest)(nil),                                  // 139: eating.GetValidIngredientsRequest
	(*GetValidIngredientsResponse)(nil),                                 // 140: eating.GetValidIngredientsResponse
	(*GetValidInstrumentRequest)(nil),                                   // 141: eating.GetValidInstrumentRequest
	(*GetValidInstrumentResponse)(nil),                                  // 142: eating.GetValidInstrumentResponse
	(*GetValidInstrumentsRequest)(nil),                                  // 143: eating.GetValidInstrumentsRequest
	(*GetValidInstrumentsResponse)(nil),                                 // 144: eating.GetValidInstrumentsResponse
	(*GetValidMeasurementUnitRequest)(nil),                              // 145: eating.GetValidMeasurementUnitRequest
	(*GetValidMeasurementUnitResponse)(nil),                             // 146: eating.GetValidMeasurementUnitResponse
	(*GetValidMeasurementUnitConversionRequest)(nil),                    // 147: eating.GetValidMeasurementUnitConversionRequest
	(*GetValidMeasurementUnitConversionResponse)(nil),                   // 148: eating.GetValidMeasurementUnitConversionResponse
	(*GetValidMeasurementUnitConversionsFromUnitRequest)(nil),           // 149: eating.GetValidMeasurementUnitConversionsFromUnitRequest
	(*GetValidMeasurementUnitConversionsFromUnitResponse)(nil),          // 150: eating.GetValidMeasurementUnitConversionsFromUnitResponse
	(*GetValidMeasurementUnitConversionsToUnitRequest)(nil),             // 151: eating.GetValidMeasurementUnitConversionsToUnitRequest
	(*GetValidMeasurementUnitConversionsToUnitResponse)(nil),            // 152: eating.GetValidMeasurementUnitConversionsToUnitResponse
	(*GetValidMeasurementUnitsRequest)(nil),                             // 153: eating.GetValidMeasurementUnitsRequest
	(*GetValidMeasurementUnitsResponse)(nil),                            // 154: eating.GetValidMeasurementUnitsResponse
	(*GetValidPreparationRequest)(nil),                                  // 155: eating.GetValidPreparationRequest
	(*GetValidPreparationResponse)(nil),                                 // 156: eating.GetValidPreparationResponse
	(*GetValidPreparationInstrumentRequest)(nil),                        // 157: eating.GetValidPreparationInstrumentRequest
	(*GetValidPreparationInstrumentResponse)(nil),                       // 158: eating.GetValidPreparationInstrumentResponse
	(*GetValidPreparationInstrumentsRequest)(nil),                       // 159: eating.GetValidPreparationInstrumentsRequest
	(*GetValidPreparationInstrumentsResponse)(nil),                      // 160: eating.GetValidPreparationInstrumentsResponse
	(*GetValidPreparationInstrumentsByInstrumentRequest)(nil),           // 161: eating.GetValidPreparationInstrumentsByInstrumentRequest
	(*GetValidPreparationInstrumentsByInstrumentResponse)(nil),          // 162: eating.GetValidPreparationInstrumentsByInstrumentResponse
	(*GetValidPreparationInstrumentsByPreparationRequest)(nil),          // 163: eating.GetValidPreparationInstrumentsByPreparationRequest
	(*GetValidPreparationInstrumentsByPreparationResponse)(nil),         // 164: eating.GetValidPreparationInstrumentsByPreparationResponse
	(*GetValidPreparationVesselRequest)(nil),                            // 165: eating.GetValidPreparationVesselRequest
	(*GetValidPreparationVesselResponse)(nil),                           // 166: eating.GetValidPreparationVesselResponse
	(*GetValidPreparationVesselsRequest)(nil),                           // 167: eating.GetValidPreparationVesselsRequest
	(*GetValidPreparationVesselsResponse)(nil),                          // 168: eating.GetValidPreparationVesselsResponse
	(*GetValidPreparationVesselsByPreparationRequest)(nil),              // 169: eating.GetValidPreparationVesselsByPreparationRequest
	(*GetValidPreparationVesselsByPreparationResponse)(nil),             // 170: eating.GetValidPreparationVesselsByPreparationResponse
	(*GetValidPreparationVesselsByVesselRequest)(nil),                   // 171: eating.GetValidPreparationVesselsByVesselRequest
	(*GetValidPreparationVesselsByVesselResponse)(nil),                  // 172: eating.GetValidPreparationVesselsByVesselResponse
	(*GetValidPreparationsRequest)(nil),                                 // 173: eating.GetValidPreparationsRequest
	(*GetValidPreparationsResponse)(nil),                                // 174: eating.GetValidPreparationsResponse
	(*GetValidVesselRequest)(nil),                                       // 175: eating.GetValidVesselRequest
	(*GetValidVesselResponse)(nil),                                      // 176: eating.GetValidVesselResponse
	(*GetValidVesselsRequest)(nil),                                      // 177: eating.GetValidVesselsRequest
	(*GetValidVesselsResponse)(nil),                                     // 178: eating.GetValidVesselsResponse
	(*SearchForValidIngredientGroupsRequest)(nil),                       // 179: eating.SearchForValidIngredientGroupsRequest
	(*SearchForValidIngredientGroupsResponse)(nil),                      // 180: eating.SearchForValidIngredientGroupsResponse
	(*SearchForValidIngredientStatesRequest)(nil),                       // 181: eating.SearchForValidIngredientStatesRequest
	(*SearchForValidIngredientStatesResponse)(nil),                      // 182: eating.SearchForValidIngredientStatesResponse
	(*SearchForValidIngredientsRequest)(nil),                            // 183: eating.SearchForValidIngredientsRequest
	(*SearchForValidIngredientsResponse)(nil),                           // 184: eating.SearchForValidIngredientsResponse
	(*SearchForValidInstrumentsRequest)(nil),                            // 185: eating.SearchForValidInstrumentsRequest
	(*SearchForValidInstrumentsResponse)(nil),                           // 186: eating.SearchForValidInstrumentsResponse
	(*SearchForValidMeasurementUnitsRequest)(nil),                       // 187: eating.SearchForValidMeasurementUnitsRequest
	(*SearchForValidMeasurementUnitsResponse)(nil),                      // 188: eating.SearchForValidMeasurementUnitsResponse
	(*SearchForValidPreparationsRequest)(nil),                           // 189: eating.SearchForValidPreparationsRequest
	(*SearchForValidPreparationsResponse)(nil),                          // 190: eating.SearchForValidPreparationsResponse
	(*SearchForValidVesselsRequest)(nil),                                // 191: eating.SearchForValidVesselsRequest
	(*SearchForValidVesselsResponse)(nil),                               // 192: eating.SearchForValidVesselsResponse
	(*SearchValidIngredientsByPreparationRequest)(nil),                  // 193: eating.SearchValidIngredientsByPreparationRequest
	(*SearchValidIngredientsByPreparationResponse)(nil),                 // 194: eating.SearchValidIngredientsByPreparationResponse
	(*SearchValidMeasurementUnitsByIngredientRequest)(nil),              // 195: eating.SearchValidMeasurementUnitsByIngredientRequest
	(*SearchValidMeasurementUnitsByIngredientResponse)(nil),             // 196: eating.SearchValidMeasurementUnitsByIngredientResponse
	(*UpdateValidIngredientRequest)(nil),                                // 197: eating.UpdateValidIngredientRequest
	(*UpdateValidIngredientResponse)(nil),                               // 198: eating.UpdateValidIngredientResponse
	(*UpdateValidIngredientGroupRequest)(nil),                           // 199: eating.UpdateValidIngredientGroupRequest
	(*UpdateValidIngredientGroupResponse)(nil),                          // 200: eating.UpdateValidIngredientGroupResponse
	(*UpdateValidIngredientMeasurementUnitRequest)(nil),                 // 201: eating.UpdateValidIngredientMeasurementUnitRequest
	(*UpdateValidIngredientMeasurementUnitResponse)(nil),                // 202: eating.UpdateValidIngredientMeasurementUnitResponse
	(*UpdateValidIngredientPreparationRequest)(nil),                     // 203: eating.UpdateValidIngredientPreparationRequest
	(*UpdateValidIngredientPreparationResponse)(nil),                    // 204: eating.UpdateValidIngredientPreparationResponse
	(*UpdateValidIngredientStateRequest)(nil),                           // 205: eating.UpdateValidIngredientStateRequest
	(*UpdateValidIngredientStateResponse)(nil),                          // 206: eating.UpdateValidIngredientStateResponse
	(*UpdateValidIngredientStateIngredientRequest)(nil),                 // 207: eating.UpdateValidIngredientStateIngredientRequest
	(*UpdateValidIngredientStateIngredientResponse)(nil),                // 208: eating.UpdateValidIngredientStateIngredientResponse
	(*UpdateValidInstrumentRequest)(nil),                                // 209: eating.UpdateValidInstrumentRequest
	(*UpdateValidInstrumentResponse)(nil),                               // 210: eating.UpdateValidInstrumentResponse
	(*UpdateValidMeasurementUnitRequest)(nil),                           // 211: eating.UpdateValidMeasurementUnitRequest
	(*UpdateValidMeasurementUnitResponse)(nil),                          // 212: eating.UpdateValidMeasurementUnitResponse
	(*UpdateValidMeasurementUnitConversionRequest)(nil),                 // 213: eating.UpdateValidMeasurementUnitConversionRequest
	(*UpdateValidMeasurementUnitConversionResponse)(nil),                // 214: eating.UpdateValidMeasurementUnitConversionResponse
	(*UpdateValidPreparationRequest)(nil),                               // 215: eating.UpdateValidPreparationRequest
	(*UpdateValidPreparationResponse)(nil),                              // 216: eating.UpdateValidPreparationResponse
	(*UpdateValidPreparationInstrumentRequest)(nil),                     // 217: eating.UpdateValidPreparationInstrumentRequest
	(*UpdateValidPreparationInstrumentResponse)(nil),                    // 218: eating.UpdateValidPreparationInstrumentResponse
	(*UpdateValidPreparationVesselRequest)(nil),                         // 219: eating.UpdateValidPreparationVesselRequest
	(*UpdateValidPreparationVesselResponse)(nil),                        // 220: eating.UpdateValidPreparationVesselResponse
	(*UpdateValidVesselRequest)(nil),                                    // 221: eating.UpdateValidVesselRequest
	(*UpdateValidVesselResponse)(nil),                                   // 222: eating.UpdateValidVesselResponse
	(*ArchiveUserIngredientPreferenceRequest)(nil),                      // 223: eating.ArchiveUserIngredientPreferenceRequest
	(*ArchiveUserIngredientPreferenceResponse)(nil),                     // 224: eating.ArchiveUserIngredientPreferenceResponse
	(*CreateUserIngredientPreferenceRequest)(nil),                       // 225: eating.CreateUserIngredientPreferenceRequest
	(*CreateUserIngredientPreferenceResponse)(nil),                      // 226: eating.CreateUserIngredientPreferenceResponse
	(*GetUserIngredientPreferencesRequest)(nil),                         // 227: eating.GetUserIngredientPreferencesRequest
	(*GetUserIngredientPreferencesResponse)(nil),                        // 228: eating.GetUserIngredientPreferencesResponse
	(*UpdateUserIngredientPreferenceRequest)(nil),                       // 229: eating.UpdateUserIngredientPreferenceRequest
	(*UpdateUserIngredientPreferenceResponse)(nil),                      // 230: eating.UpdateUserIngredientPreferenceResponse
	(*Recipe)(nil),                                                                       // 231: eating.Recipe
	(*RecipeCreationRequestInput)(nil),                                                   // 232: eating.RecipeCreationRequestInput
	(*RecipeMedia)(nil),                                                                  // 233: eating.RecipeMedia
	(*RecipeMediaCreationRequestInput)(nil),                                              // 234: eating.RecipeMediaCreationRequestInput
	(*RecipeMediaUpdateRequestInput)(nil),                                                // 235: eating.RecipeMediaUpdateRequestInput
	(*RecipePrepTask)(nil),                                                               // 236: eating.RecipePrepTask
	(*RecipePrepTaskCreationRequestInput)(nil),                                           // 237: eating.RecipePrepTaskCreationRequestInput
	(*RecipePrepTaskStep)(nil),                                                           // 238: eating.RecipePrepTaskStep
	(*RecipePrepTaskStepCreationRequestInput)(nil),                                       // 239: eating.RecipePrepTaskStepCreationRequestInput
	(*RecipePrepTaskStepUpdateRequestInput)(nil),                                         // 240: eating.RecipePrepTaskStepUpdateRequestInput
	(*RecipePrepTaskStepWithinRecipeCreationRequestInput)(nil),                           // 241: eating.RecipePrepTaskStepWithinRecipeCreationRequestInput
	(*RecipePrepTaskUpdateRequestInput)(nil),                                             // 242: eating.RecipePrepTaskUpdateRequestInput
	(*RecipePrepTaskWithinRecipeCreationRequestInput)(nil),                               // 243: eating.RecipePrepTaskWithinRecipeCreationRequestInput
	(*RecipeRating)(nil),                                                                 // 244: eating.RecipeRating
	(*RecipeRatingCreationRequestInput)(nil),                                             // 245: eating.RecipeRatingCreationRequestInput
	(*RecipeRatingUpdateRequestInput)(nil),                                               // 246: eating.RecipeRatingUpdateRequestInput
	(*RecipeStep)(nil),                                                                   // 247: eating.RecipeStep
	(*RecipeStepCompletionCondition)(nil),                                                // 248: eating.RecipeStepCompletionCondition
	(*RecipeStepCompletionConditionCreationRequestInput)(nil),                            // 249: eating.RecipeStepCompletionConditionCreationRequestInput
	(*RecipeStepCompletionConditionForExistingRecipeCreationRequestInput)(nil),           // 250: eating.RecipeStepCompletionConditionForExistingRecipeCreationRequestInput
	(*RecipeStepCompletionConditionIngredient)(nil),                                      // 251: eating.RecipeStepCompletionConditionIngredient
	(*RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput)(nil), // 252: eating.RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput
	(*RecipeStepCompletionConditionUpdateRequestInput)(nil),                              // 253: eating.RecipeStepCompletionConditionUpdateRequestInput
	(*RecipeStepCreationRequestInput)(nil),                                               // 254: eating.RecipeStepCreationRequestInput
	(*RecipeStepIngredient)(nil),                                                         // 255: eating.RecipeStepIngredient
	(*RecipeStepIngredientCreationRequestInput)(nil),                                     // 256: eating.RecipeStepIngredientCreationRequestInput
	(*RecipeStepIngredientUpdateRequestInput)(nil),                                       // 257: eating.RecipeStepIngredientUpdateRequestInput
	(*RecipeStepInstrument)(nil),                                                         // 258: eating.RecipeStepInstrument
	(*RecipeStepInstrumentCreationRequestInput)(nil),                                     // 259: eating.RecipeStepInstrumentCreationRequestInput
	(*RecipeStepInstrumentUpdateRequestInput)(nil),                                       // 260: eating.RecipeStepInstrumentUpdateRequestInput
	(*RecipeStepProduct)(nil),                                                            // 261: eating.RecipeStepProduct
	(*RecipeStepProductCreationRequestInput)(nil),                                        // 262: eating.RecipeStepProductCreationRequestInput
	(*RecipeStepProductUpdateRequestInput)(nil),                                          // 263: eating.RecipeStepProductUpdateRequestInput
	(*RecipeStepUpdateRequestInput)(nil),                                                 // 264: eating.RecipeStepUpdateRequestInput
	(*RecipeStepVessel)(nil),                                                             // 265: eating.RecipeStepVessel
	(*RecipeStepVesselCreationRequestInput)(nil),                                         // 266: eating.RecipeStepVesselCreationRequestInput
	(*RecipeStepVesselUpdateRequestInput)(nil),                                           // 267: eating.RecipeStepVesselUpdateRequestInput
	(*RecipeUpdateRequestInput)(nil),                                                     // 268: eating.RecipeUpdateRequestInput
	(*ArchiveRecipeRequest)(nil),                                                         // 269: eating.ArchiveRecipeRequest
	(*ArchiveRecipeResponse)(nil),                                                        // 270: eating.ArchiveRecipeResponse
	(*ArchiveRecipePrepTaskRequest)(nil),                                                 // 271: eating.ArchiveRecipePrepTaskRequest
	(*ArchiveRecipePrepTaskResponse)(nil),                                                // 272: eating.ArchiveRecipePrepTaskResponse
	(*ArchiveRecipeRatingRequest)(nil),                                                   // 273: eating.ArchiveRecipeRatingRequest
	(*ArchiveRecipeRatingResponse)(nil),                                                  // 274: eating.ArchiveRecipeRatingResponse
	(*ArchiveRecipeStepRequest)(nil),                                                     // 275: eating.ArchiveRecipeStepRequest
	(*ArchiveRecipeStepResponse)(nil),                                                    // 276: eating.ArchiveRecipeStepResponse
	(*ArchiveRecipeStepCompletionConditionRequest)(nil),                                  // 277: eating.ArchiveRecipeStepCompletionConditionRequest
	(*ArchiveRecipeStepCompletionConditionResponse)(nil),                                 // 278: eating.ArchiveRecipeStepCompletionConditionResponse
	(*ArchiveRecipeStepIngredientRequest)(nil),                                           // 279: eating.ArchiveRecipeStepIngredientRequest
	(*ArchiveRecipeStepIngredientResponse)(nil),                                          // 280: eating.ArchiveRecipeStepIngredientResponse
	(*ArchiveRecipeStepInstrumentRequest)(nil),                                           // 281: eating.ArchiveRecipeStepInstrumentRequest
	(*ArchiveRecipeStepInstrumentResponse)(nil),                                          // 282: eating.ArchiveRecipeStepInstrumentResponse
	(*ArchiveRecipeStepProductRequest)(nil),                                              // 283: eating.ArchiveRecipeStepProductRequest
	(*ArchiveRecipeStepProductResponse)(nil),                                             // 284: eating.ArchiveRecipeStepProductResponse
	(*ArchiveRecipeStepVesselRequest)(nil),                                               // 285: eating.ArchiveRecipeStepVesselRequest
	(*ArchiveRecipeStepVesselResponse)(nil),                                              // 286: eating.ArchiveRecipeStepVesselResponse
	(*CloneRecipeRequest)(nil),                                                           // 287: eating.CloneRecipeRequest
	(*CloneRecipeResponse)(nil),                                                          // 288: eating.CloneRecipeResponse
	(*CreateRecipeRequest)(nil),                                                          // 289: eating.CreateRecipeRequest
	(*CreateRecipeResponse)(nil),                                                         // 290: eating.CreateRecipeResponse
	(*CreateRecipePrepTaskRequest)(nil),                                                  // 291: eating.CreateRecipePrepTaskRequest
	(*CreateRecipePrepTaskResponse)(nil),                                                 // 292: eating.CreateRecipePrepTaskResponse
	(*CreateRecipeRatingRequest)(nil),                                                    // 293: eating.CreateRecipeRatingRequest
	(*CreateRecipeRatingResponse)(nil),                                                   // 294: eating.CreateRecipeRatingResponse
	(*CreateRecipeStepRequest)(nil),                                                      // 295: eating.CreateRecipeStepRequest
	(*CreateRecipeStepResponse)(nil),                                                     // 296: eating.CreateRecipeStepResponse
	(*CreateRecipeStepCompletionConditionRequest)(nil),                                   // 297: eating.CreateRecipeStepCompletionConditionRequest
	(*CreateRecipeStepCompletionConditionResponse)(nil),                                  // 298: eating.CreateRecipeStepCompletionConditionResponse
	(*CreateRecipeStepIngredientRequest)(nil),                                            // 299: eating.CreateRecipeStepIngredientRequest
	(*CreateRecipeStepIngredientResponse)(nil),                                           // 300: eating.CreateRecipeStepIngredientResponse
	(*CreateRecipeStepInstrumentRequest)(nil),                                            // 301: eating.CreateRecipeStepInstrumentRequest
	(*CreateRecipeStepInstrumentResponse)(nil),                                           // 302: eating.CreateRecipeStepInstrumentResponse
	(*CreateRecipeStepProductRequest)(nil),                                               // 303: eating.CreateRecipeStepProductRequest
	(*CreateRecipeStepProductResponse)(nil),                                              // 304: eating.CreateRecipeStepProductResponse
	(*CreateRecipeStepVesselRequest)(nil),                                                // 305: eating.CreateRecipeStepVesselRequest
	(*CreateRecipeStepVesselResponse)(nil),                                               // 306: eating.CreateRecipeStepVesselResponse
	(*GetMermaidDiagramForRecipeRequest)(nil),                                            // 307: eating.GetMermaidDiagramForRecipeRequest
	(*GetMermaidDiagramForRecipeResponse)(nil),                                           // 308: eating.GetMermaidDiagramForRecipeResponse
	(*GetRecipeRequest)(nil),                                                             // 309: eating.GetRecipeRequest
	(*GetRecipeResponse)(nil),                                                            // 310: eating.GetRecipeResponse
	(*GetRecipeMealPlanTasksRequest)(nil),                                                // 311: eating.GetRecipeMealPlanTasksRequest
	(*GetRecipeMealPlanTasksResponse)(nil),                                               // 312: eating.GetRecipeMealPlanTasksResponse
	(*GetRecipePrepTaskRequest)(nil),                                                     // 313: eating.GetRecipePrepTaskRequest
	(*GetRecipePrepTaskResponse)(nil),                                                    // 314: eating.GetRecipePrepTaskResponse
	(*GetRecipePrepTasksRequest)(nil),                                                    // 315: eating.GetRecipePrepTasksRequest
	(*GetRecipePrepTasksResponse)(nil),                                                   // 316: eating.GetRecipePrepTasksResponse
	(*GetRecipeRatingRequest)(nil),                                                       // 317: eating.GetRecipeRatingRequest
	(*GetRecipeRatingResponse)(nil),                                                      // 318: eating.GetRecipeRatingResponse
	(*GetRecipeRatingsForRecipeRequest)(nil),                                             // 319: eating.GetRecipeRatingsForRecipeRequest
	(*GetRecipeRatingsForRecipeResponse)(nil),                                            // 320: eating.GetRecipeRatingsForRecipeResponse
	(*GetRecipeStepRequest)(nil),                                                         // 321: eating.GetRecipeStepRequest
	(*GetRecipeStepResponse)(nil),                                                        // 322: eating.GetRecipeStepResponse
	(*GetRecipeStepCompletionConditionRequest)(nil),                                      // 323: eating.GetRecipeStepCompletionConditionRequest
	(*GetRecipeStepCompletionConditionResponse)(nil),                                     // 324: eating.GetRecipeStepCompletionConditionResponse
	(*GetRecipeStepCompletionConditionsRequest)(nil),                                     // 325: eating.GetRecipeStepCompletionConditionsRequest
	(*GetRecipeStepCompletionConditionsResponse)(nil),                                    // 326: eating.GetRecipeStepCompletionConditionsResponse
	(*GetRecipeStepIngredientRequest)(nil),                                               // 327: eating.GetRecipeStepIngredientRequest
	(*GetRecipeStepIngredientResponse)(nil),                                              // 328: eating.GetRecipeStepIngredientResponse
	(*GetRecipeStepIngredientsRequest)(nil),                                              // 329: eating.GetRecipeStepIngredientsRequest
	(*GetRecipeStepIngredientsResponse)(nil),                                             // 330: eating.GetRecipeStepIngredientsResponse
	(*GetRecipeStepInstrumentRequest)(nil),                                               // 331: eating.GetRecipeStepInstrumentRequest
	(*GetRecipeStepInstrumentResponse)(nil),                                              // 332: eating.GetRecipeStepInstrumentResponse
	(*GetRecipeStepInstrumentsRequest)(nil),                                              // 333: eating.GetRecipeStepInstrumentsRequest
	(*GetRecipeStepInstrumentsResponse)(nil),                                             // 334: eating.GetRecipeStepInstrumentsResponse
	(*GetRecipeStepProductRequest)(nil),                                                  // 335: eating.GetRecipeStepProductRequest
	(*GetRecipeStepProductResponse)(nil),                                                 // 336: eating.GetRecipeStepProductResponse
	(*GetRecipeStepProductsRequest)(nil),                                                 // 337: eating.GetRecipeStepProductsRequest
	(*GetRecipeStepProductsResponse)(nil),                                                // 338: eating.GetRecipeStepProductsResponse
	(*GetRecipeStepVesselRequest)(nil),                                                   // 339: eating.GetRecipeStepVesselRequest
	(*GetRecipeStepVesselResponse)(nil),                                                  // 340: eating.GetRecipeStepVesselResponse
	(*GetRecipeStepVesselsRequest)(nil),                                                  // 341: eating.GetRecipeStepVesselsRequest
	(*GetRecipeStepVesselsResponse)(nil),                                                 // 342: eating.GetRecipeStepVesselsResponse
	(*GetRecipeStepsRequest)(nil),                                                        // 343: eating.GetRecipeStepsRequest
	(*GetRecipeStepsResponse)(nil),                                                       // 344: eating.GetRecipeStepsResponse
	(*GetRecipesRequest)(nil),                                                            // 345: eating.GetRecipesRequest
	(*GetRecipesResponse)(nil),                                                           // 346: eating.GetRecipesResponse
	(*SearchForRecipesRequest)(nil),                                                      // 347: eating.SearchForRecipesRequest
	(*SearchForRecipesResponse)(nil),                                                     // 348: eating.SearchForRecipesResponse
	(*UpdateRecipeRequest)(nil),                                                          // 349: eating.UpdateRecipeRequest
	(*UpdateRecipeResponse)(nil),                                                         // 350: eating.UpdateRecipeResponse
	(*UpdateRecipePrepTaskRequest)(nil),                                                  // 351: eating.UpdateRecipePrepTaskRequest
	(*UpdateRecipePrepTaskResponse)(nil),                                                 // 352: eating.UpdateRecipePrepTaskResponse
	(*UpdateRecipeRatingRequest)(nil),                                                    // 353: eating.UpdateRecipeRatingRequest
	(*UpdateRecipeRatingResponse)(nil),                                                   // 354: eating.UpdateRecipeRatingResponse
	(*UpdateRecipeStepRequest)(nil),                                                      // 355: eating.UpdateRecipeStepRequest
	(*UpdateRecipeStepResponse)(nil),                                                     // 356: eating.UpdateRecipeStepResponse
	(*UpdateRecipeStepCompletionConditionRequest)(nil),                                   // 357: eating.UpdateRecipeStepCompletionConditionRequest
	(*UpdateRecipeStepCompletionConditionResponse)(nil),                                  // 358: eating.UpdateRecipeStepCompletionConditionResponse
	(*UpdateRecipeStepIngredientRequest)(nil),                                            // 359: eating.UpdateRecipeStepIngredientRequest
	(*UpdateRecipeStepIngredientResponse)(nil),                                           // 360: eating.UpdateRecipeStepIngredientResponse
	(*UpdateRecipeStepInstrumentRequest)(nil),                                            // 361: eating.UpdateRecipeStepInstrumentRequest
	(*UpdateRecipeStepInstrumentResponse)(nil),                                           // 362: eating.UpdateRecipeStepInstrumentResponse
	(*UpdateRecipeStepProductRequest)(nil),                                               // 363: eating.UpdateRecipeStepProductRequest
	(*UpdateRecipeStepProductResponse)(nil),                                              // 364: eating.UpdateRecipeStepProductResponse
	(*UpdateRecipeStepVesselRequest)(nil),                                                // 365: eating.UpdateRecipeStepVesselRequest
	(*UpdateRecipeStepVesselResponse)(nil),                                               // 366: eating.UpdateRecipeStepVesselResponse
	(*InitializeMealPlanGroceryListRequest)(nil),                                         // 367: eating.InitializeMealPlanGroceryListRequest
	(*InitializeMealPlanGroceryListResponse)(nil),                                        // 368: eating.InitializeMealPlanGroceryListResponse
	(*Meal)(nil),          // 369: eating.Meal
	(*MealComponent)(nil), // 370: eating.MealComponent
	(*MealComponentCreationRequestInput)(nil),                // 371: eating.MealComponentCreationRequestInput
	(*MealComponentUpdateRequestInput)(nil),                  // 372: eating.MealComponentUpdateRequestInput
	(*MealCreationRequestInput)(nil),                         // 373: eating.MealCreationRequestInput
	(*MealPlan)(nil),                                         // 374: eating.MealPlan
	(*MealPlanCreationRequestInput)(nil),                     // 375: eating.MealPlanCreationRequestInput
	(*MealPlanEvent)(nil),                                    // 376: eating.MealPlanEvent
	(*MealPlanEventCreationRequestInput)(nil),                // 377: eating.MealPlanEventCreationRequestInput
	(*MealPlanEventUpdateRequestInput)(nil),                  // 378: eating.MealPlanEventUpdateRequestInput
	(*MealPlanGroceryListItem)(nil),                          // 379: eating.MealPlanGroceryListItem
	(*MealPlanGroceryListItemCreationRequestInput)(nil),      // 380: eating.MealPlanGroceryListItemCreationRequestInput
	(*MealPlanGroceryListItemUpdateRequestInput)(nil),        // 381: eating.MealPlanGroceryListItemUpdateRequestInput
	(*MealPlanOption)(nil),                                   // 382: eating.MealPlanOption
	(*MealPlanOptionCreationRequestInput)(nil),               // 383: eating.MealPlanOptionCreationRequestInput
	(*MealPlanOptionUpdateRequestInput)(nil),                 // 384: eating.MealPlanOptionUpdateRequestInput
	(*MealPlanOptionVote)(nil),                               // 385: eating.MealPlanOptionVote
	(*MealPlanOptionVoteCreationInput)(nil),                  // 386: eating.MealPlanOptionVoteCreationInput
	(*MealPlanOptionVoteCreationRequestInput)(nil),           // 387: eating.MealPlanOptionVoteCreationRequestInput
	(*MealPlanOptionVoteUpdateRequestInput)(nil),             // 388: eating.MealPlanOptionVoteUpdateRequestInput
	(*MealPlanTask)(nil),                                     // 389: eating.MealPlanTask
	(*MealPlanTaskCreationRequestInput)(nil),                 // 390: eating.MealPlanTaskCreationRequestInput
	(*MealPlanTaskStatusChangeRequestInput)(nil),             // 391: eating.MealPlanTaskStatusChangeRequestInput
	(*MealPlanUpdateRequestInput)(nil),                       // 392: eating.MealPlanUpdateRequestInput
	(*MealUpdateRequestInput)(nil),                           // 393: eating.MealUpdateRequestInput
	(*ArchiveMealRequest)(nil),                               // 394: eating.ArchiveMealRequest
	(*ArchiveMealResponse)(nil),                              // 395: eating.ArchiveMealResponse
	(*ArchiveMealPlanRequest)(nil),                           // 396: eating.ArchiveMealPlanRequest
	(*ArchiveMealPlanResponse)(nil),                          // 397: eating.ArchiveMealPlanResponse
	(*ArchiveMealPlanEventRequest)(nil),                      // 398: eating.ArchiveMealPlanEventRequest
	(*ArchiveMealPlanEventResponse)(nil),                     // 399: eating.ArchiveMealPlanEventResponse
	(*ArchiveMealPlanGroceryListItemRequest)(nil),            // 400: eating.ArchiveMealPlanGroceryListItemRequest
	(*ArchiveMealPlanGroceryListItemResponse)(nil),           // 401: eating.ArchiveMealPlanGroceryListItemResponse
	(*ArchiveMealPlanOptionRequest)(nil),                     // 402: eating.ArchiveMealPlanOptionRequest
	(*ArchiveMealPlanOptionResponse)(nil),                    // 403: eating.ArchiveMealPlanOptionResponse
	(*ArchiveMealPlanOptionVoteRequest)(nil),                 // 404: eating.ArchiveMealPlanOptionVoteRequest
	(*ArchiveMealPlanOptionVoteResponse)(nil),                // 405: eating.ArchiveMealPlanOptionVoteResponse
	(*CreateMealRequest)(nil),                                // 406: eating.CreateMealRequest
	(*CreateMealResponse)(nil),                               // 407: eating.CreateMealResponse
	(*CreateMealPlanRequest)(nil),                            // 408: eating.CreateMealPlanRequest
	(*CreateMealPlanResponse)(nil),                           // 409: eating.CreateMealPlanResponse
	(*CreateMealPlanEventRequest)(nil),                       // 410: eating.CreateMealPlanEventRequest
	(*CreateMealPlanEventResponse)(nil),                      // 411: eating.CreateMealPlanEventResponse
	(*CreateMealPlanGroceryListItemRequest)(nil),             // 412: eating.CreateMealPlanGroceryListItemRequest
	(*CreateMealPlanGroceryListItemResponse)(nil),            // 413: eating.CreateMealPlanGroceryListItemResponse
	(*CreateMealPlanOptionRequest)(nil),                      // 414: eating.CreateMealPlanOptionRequest
	(*CreateMealPlanOptionResponse)(nil),                     // 415: eating.CreateMealPlanOptionResponse
	(*CreateMealPlanOptionVoteRequest)(nil),                  // 416: eating.CreateMealPlanOptionVoteRequest
	(*CreateMealPlanOptionVoteResponse)(nil),                 // 417: eating.CreateMealPlanOptionVoteResponse
	(*CreateMealPlanTaskRequest)(nil),                        // 418: eating.CreateMealPlanTaskRequest
	(*CreateMealPlanTaskResponse)(nil),                       // 419: eating.CreateMealPlanTaskResponse
	(*FinalizeMealPlanRequest)(nil),                          // 420: eating.FinalizeMealPlanRequest
	(*FinalizeMealPlanResponse)(nil),                         // 421: eating.FinalizeMealPlanResponse
	(*GetMealRequest)(nil),                                   // 422: eating.GetMealRequest
	(*GetMealResponse)(nil),                                  // 423: eating.GetMealResponse
	(*GetMealPlanRequest)(nil),                               // 424: eating.GetMealPlanRequest
	(*GetMealPlanResponse)(nil),                              // 425: eating.GetMealPlanResponse
	(*GetMealPlanEventRequest)(nil),                          // 426: eating.GetMealPlanEventRequest
	(*GetMealPlanEventResponse)(nil),                         // 427: eating.GetMealPlanEventResponse
	(*GetMealPlanEventsRequest)(nil),                         // 428: eating.GetMealPlanEventsRequest
	(*GetMealPlanEventsResponse)(nil),                        // 429: eating.GetMealPlanEventsResponse
	(*GetMealPlanGroceryListItemRequest)(nil),                // 430: eating.GetMealPlanGroceryListItemRequest
	(*GetMealPlanGroceryListItemResponse)(nil),               // 431: eating.GetMealPlanGroceryListItemResponse
	(*GetMealPlanGroceryListItemsForMealPlanRequest)(nil),    // 432: eating.GetMealPlanGroceryListItemsForMealPlanRequest
	(*GetMealPlanGroceryListItemsForMealPlanResponse)(nil),   // 433: eating.GetMealPlanGroceryListItemsForMealPlanResponse
	(*GetMealPlanOptionRequest)(nil),                         // 434: eating.GetMealPlanOptionRequest
	(*GetMealPlanOptionResponse)(nil),                        // 435: eating.GetMealPlanOptionResponse
	(*GetMealPlanOptionVoteRequest)(nil),                     // 436: eating.GetMealPlanOptionVoteRequest
	(*GetMealPlanOptionVoteResponse)(nil),                    // 437: eating.GetMealPlanOptionVoteResponse
	(*GetMealPlanOptionVotesRequest)(nil),                    // 438: eating.GetMealPlanOptionVotesRequest
	(*GetMealPlanOptionVotesResponse)(nil),                   // 439: eating.GetMealPlanOptionVotesResponse
	(*GetMealPlanOptionsRequest)(nil),                        // 440: eating.GetMealPlanOptionsRequest
	(*GetMealPlanOptionsResponse)(nil),                       // 441: eating.GetMealPlanOptionsResponse
	(*GetMealPlanTaskRequest)(nil),                           // 442: eating.GetMealPlanTaskRequest
	(*GetMealPlanTaskResponse)(nil),                          // 443: eating.GetMealPlanTaskResponse
	(*GetMealPlanTasksRequest)(nil),                          // 444: eating.GetMealPlanTasksRequest
	(*GetMealPlanTasksResponse)(nil),                         // 445: eating.GetMealPlanTasksResponse
	(*GetMealPlansForHouseholdRequest)(nil),                  // 446: eating.GetMealPlansForHouseholdRequest
	(*GetMealPlansForHouseholdResponse)(nil),                 // 447: eating.GetMealPlansForHouseholdResponse
	(*GetMealsRequest)(nil),                                  // 448: eating.GetMealsRequest
	(*GetMealsResponse)(nil),                                 // 449: eating.GetMealsResponse
	(*RunFinalizeMealPlanWorkerRequest)(nil),                 // 450: eating.RunFinalizeMealPlanWorkerRequest
	(*RunFinalizeMealPlanWorkerResponse)(nil),                // 451: eating.RunFinalizeMealPlanWorkerResponse
	(*RunMealPlanGroceryListInitializerWorkerRequest)(nil),   // 452: eating.RunMealPlanGroceryListInitializerWorkerRequest
	(*RunMealPlanGroceryListInitializerWorkerResponse)(nil),  // 453: eating.RunMealPlanGroceryListInitializerWorkerResponse
	(*RunMealPlanTaskCreatorWorkerRequest)(nil),              // 454: eating.RunMealPlanTaskCreatorWorkerRequest
	(*RunMealPlanTaskCreatorWorkerResponse)(nil),             // 455: eating.RunMealPlanTaskCreatorWorkerResponse
	(*SearchForMealsRequest)(nil),                            // 456: eating.SearchForMealsRequest
	(*SearchForMealsResponse)(nil),                           // 457: eating.SearchForMealsResponse
	(*UpdateMealPlanRequest)(nil),                            // 458: eating.UpdateMealPlanRequest
	(*UpdateMealPlanResponse)(nil),                           // 459: eating.UpdateMealPlanResponse
	(*UpdateMealPlanEventRequest)(nil),                       // 460: eating.UpdateMealPlanEventRequest
	(*UpdateMealPlanEventResponse)(nil),                      // 461: eating.UpdateMealPlanEventResponse
	(*UpdateMealPlanGroceryListItemRequest)(nil),             // 462: eating.UpdateMealPlanGroceryListItemRequest
	(*UpdateMealPlanGroceryListItemResponse)(nil),            // 463: eating.UpdateMealPlanGroceryListItemResponse
	(*UpdateMealPlanOptionRequest)(nil),                      // 464: eating.UpdateMealPlanOptionRequest
	(*UpdateMealPlanOptionResponse)(nil),                     // 465: eating.UpdateMealPlanOptionResponse
	(*UpdateMealPlanOptionVoteRequest)(nil),                  // 466: eating.UpdateMealPlanOptionVoteRequest
	(*UpdateMealPlanOptionVoteResponse)(nil),                 // 467: eating.UpdateMealPlanOptionVoteResponse
	(*UpdateMealPlanTaskStatusRequest)(nil),                  // 468: eating.UpdateMealPlanTaskStatusRequest
	(*UpdateMealPlanTaskStatusResponse)(nil),                 // 469: eating.UpdateMealPlanTaskStatusResponse
	(*CreateMealPlanTasksRequest)(nil),                       // 470: eating.CreateMealPlanTasksRequest
	(*CreateMealPlanTasksResponse)(nil),                      // 471: eating.CreateMealPlanTasksResponse
	(*FinalizeMealPlansRequest)(nil),                         // 472: eating.FinalizeMealPlansRequest
	(*FinalizeMealPlansResponse)(nil),                        // 473: eating.FinalizeMealPlansResponse
	(*ArchiveHouseholdInstrumentOwnershipRequest)(nil),       // 474: eating.ArchiveHouseholdInstrumentOwnershipRequest
	(*ArchiveHouseholdInstrumentOwnershipResponse)(nil),      // 475: eating.ArchiveHouseholdInstrumentOwnershipResponse
	(*CreateHouseholdInstrumentOwnershipRequest)(nil),        // 476: eating.CreateHouseholdInstrumentOwnershipRequest
	(*CreateHouseholdInstrumentOwnershipResponse)(nil),       // 477: eating.CreateHouseholdInstrumentOwnershipResponse
	(*GetHouseholdInstrumentOwnershipsRequest)(nil),          // 478: eating.GetHouseholdInstrumentOwnershipsRequest
	(*GetHouseholdInstrumentOwnershipsResponse)(nil),         // 479: eating.GetHouseholdInstrumentOwnershipsResponse
	(*GetHouseholdInstrumentOwnershipRequest)(nil),           // 480: eating.GetHouseholdInstrumentOwnershipRequest
	(*GetHouseholdInstrumentOwnershipResponse)(nil),          // 481: eating.GetHouseholdInstrumentOwnershipResponse
	(*UpdateHouseholdInstrumentOwnershipRequest)(nil),        // 482: eating.UpdateHouseholdInstrumentOwnershipRequest
	(*UpdateHouseholdInstrumentOwnershipResponse)(nil),       // 483: eating.UpdateHouseholdInstrumentOwnershipResponse
	(*HouseholdInstrumentOwnership)(nil),                     // 484: eating.HouseholdInstrumentOwnership
	(*HouseholdInstrumentOwnershipCreationRequestInput)(nil), // 485: eating.HouseholdInstrumentOwnershipCreationRequestInput
	(*HouseholdInstrumentOwnershipUpdateRequestInput)(nil),   // 486: eating.HouseholdInstrumentOwnershipUpdateRequestInput
	(*timestamppb.Timestamp)(nil),                            // 487: google.protobuf.Timestamp
	(*OptionalFloat32Range)(nil),                             // 488: eating.OptionalFloat32Range
	(*Float32RangeWithOptionalMax)(nil),                      // 489: eating.Float32RangeWithOptionalMax
	(*Float32RangeWithOptionalMaxUpdateRequestInput)(nil),    // 490: eating.Float32RangeWithOptionalMaxUpdateRequestInput
	(*Uint16RangeWithOptionalMax)(nil),                       // 491: eating.Uint16RangeWithOptionalMax
	(*Uint16RangeWithOptionalMaxUpdateRequestInput)(nil),     // 492: eating.Uint16RangeWithOptionalMaxUpdateRequestInput
	(*QueryFilter)(nil),                                      // 493: eating.QueryFilter
	(*Uint32RangeWithOptionalMax)(nil),                       // 494: eating.Uint32RangeWithOptionalMax
	(*Uint32RangeWithOptionalMaxUpdateRequestInput)(nil),     // 495: eating.Uint32RangeWithOptionalMaxUpdateRequestInput
	(*OptionalUint32Range)(nil),                              // 496: eating.OptionalUint32Range
}
var file_messages_eating_proto_depIdxs = []int32{
	484, // 0: eating.EatingUserDataCollection.HouseholdInstrumentOwnerships:type_name -> eating.HouseholdInstrumentOwnership
	374, // 1: eating.EatingUserDataCollection.MealPlans:type_name -> eating.MealPlan
	244, // 2: eating.EatingUserDataCollection.RecipeRatings:type_name -> eating.RecipeRating
	231, // 3: eating.EatingUserDataCollection.Recipes:type_name -> eating.Recipe
	369, // 4: eating.EatingUserDataCollection.Meals:type_name -> eating.Meal
	42,  // 5: eating.EatingUserDataCollection.UserIngredientPreferences:type_name -> eating.UserIngredientPreference
	487, // 6: eating.ValidIngredient.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 7: eating.ValidIngredient.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	487, // 8: eating.ValidIngredient.ArchivedAt:type_name -> google.protobuf.Timestamp
	488, // 9: eating.ValidIngredient.StorageTemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	488, // 10: eating.ValidIngredientCreationRequestInput.StorageTemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	487, // 11: eating.ValidIngredientGroup.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 12: eating.ValidIngredientGroup.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	487, // 13: eating.ValidIngredientGroup.ArchivedAt:type_name -> google.protobuf.Timestamp
	5,   // 14: eating.ValidIngredientGroup.Members:type_name -> eating.ValidIngredientGroupMember
	6,   // 15: eating.ValidIngredientGroupCreationRequestInput.Members:type_name -> eating.ValidIngredientGroupMemberCreationRequestInput
	487, // 16: eating.ValidIngredientGroupMember.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 17: eating.ValidIngredientGroupMember.ArchivedAt:type_name -> google.protobuf.Timestamp
	1,   // 18: eating.ValidIngredientGroupMember.ValidIngredient:type_name -> eating.ValidIngredient
	487, // 19: eating.ValidIngredientMeasurementUnit.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 20: eating.ValidIngredientMeasurementUnit.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	487, // 21: eating.ValidIngredientMeasurementUnit.ArchivedAt:type_name -> google.protobuf.Timestamp
	489, // 22: eating.ValidIngredientMeasurementUnit.AllowableQuantity:type_name -> eating.Float32RangeWithOptionalMax
	24,  // 23: eating.ValidIngredientMeasurementUnit.MeasurementUnit:type_name -> eating.ValidMeasurementUnit
	1,   // 24: eating.ValidIngredientMeasurementUnit.Ingredient:type_name -> eating.ValidIngredient
	489, // 25: eating.ValidIngredientMeasurementUnitCreationRequestInput.AllowableQuantity:type_name -> eating.Float32RangeWithOptionalMax
	490, // 26: eating.ValidIngredientMeasurementUnitUpdateRequestInput.AllowableQuantity:type_name -> eating.Float32RangeWithOptionalMaxUpdateRequestInput
	487, // 27: eating.ValidIngredientPreparation.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 28: eating.ValidIngredientPreparation.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	487, // 29: eating.ValidIngredientPreparation.ArchivedAt:type_name -> google.protobuf.Timestamp
	30,  // 30: eating.ValidIngredientPreparation.Preparation:type_name -> eating.ValidPreparation
	1,   // 31: eating.ValidIngredientPreparation.Ingredient:type_name -> eating.ValidIngredient
	487, // 32: eating.ValidIngredientState.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 33: eating.ValidIngredientState.ArchivedAt:type_name -> google.protobuf.Timestamp
	487, // 34: eating.ValidIngredientState.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	487, // 35: eating.ValidIngredientStateIngredient.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 36: eating.ValidIngredientStateIngredient.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	487, // 37: eating.ValidIngredientStateIngredient.ArchivedAt:type_name -> google.protobuf.Timestamp
	14,  // 38: eating.ValidIngredientStateIngredient.IngredientState:type_name -> eating.ValidIngredientState
	1,   // 39: eating.ValidIngredientStateIngredient.Ingredient:type_name -> eating.ValidIngredient
	488, // 40: eating.ValidIngredientUpdateRequestInput.StorageTemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	487, // 41: eating.ValidInstrument.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 42: eating.ValidInstrument.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	487, // 43: eating.ValidInstrument.ArchivedAt:type_name -> google.protobuf.Timestamp
	487, // 44: eating.ValidMeasurementUnit.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 45: eating.ValidMeasurementUnit.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	487, // 46: eating.ValidMeasurementUnit.ArchivedAt:type_name -> google.protobuf.Timestamp
	487, // 47: eating.ValidMeasurementUnitConversion.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 48: eating.ValidMeasurementUnitConversion.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	487, // 49: eating.ValidMeasurementUnitConversion.ArchivedAt:type_name -> google.protobuf.Timestamp
	1,   // 50: eating.ValidMeasurementUnitConversion.OnlyForIngredient:type_name -> eating.ValidIngredient
	24,  // 51: eating.ValidMeasurementUnitConversion.From:type_name -> eating.ValidMeasurementUnit
	24,  // 52: eating.ValidMeasurementUnitConversion.To:type_name -> eating.ValidMeasurementUnit
	487, // 53: eating.ValidPreparation.CreatedAt:type_name -> google.protobuf.Timestamp
	491, // 54: eating.ValidPreparation.InstrumentCount:type_name -> eating.Uint16RangeWithOptionalMax
	491, // 55: eating.ValidPreparation.IngredientCount:type_name -> eating.Uint16RangeWithOptionalMax
	491, // 56: eating.ValidPreparation.VesselCount:type_name -> eating.Uint16RangeWithOptionalMax
	487, // 57: eating.ValidPreparation.ArchivedAt:type_name -> google.protobuf.Timestamp
	487, // 58: eating.ValidPreparation.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	491, // 59: eating.ValidPreparationCreationRequestInput.InstrumentCount:type_name -> eating.Uint16RangeWithOptionalMax
	491, // 60: eating.ValidPreparationCreationRequestInput.IngredientCount:type_name -> eating.Uint16RangeWithOptionalMax
	491, // 61: eating.ValidPreparationCreationRequestInput.VesselCount:type_name -> eating.Uint16RangeWithOptionalMax
	487, // 62: eating.ValidPreparationInstrument.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 63: eating.ValidPreparationInstrument.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	487, // 64: eating.ValidPreparationInstrument.ArchivedAt:type_name -> google.protobuf.Timestamp
	21,  // 65: eating.ValidPreparationInstrument.Instrument:type_name -> eating.ValidInstrument
	30,  // 66: eating.ValidPreparationInstrument.Preparation:type_name -> eating.ValidPreparation
	492, // 67: eating.ValidPreparationUpdateRequestInput.InstrumentCount:type_name -> eating.Uint16RangeWithOptionalMaxUpdateRequestInput
	492, // 68: eating.ValidPreparationUpdateRequestInput.IngredientCount:type_name -> eating.Uint16RangeWithOptionalMaxUpdateRequestInput
	492, // 69: eating.ValidPreparationUpdateRequestInput.VesselCount:type_name -> eating.Uint16RangeWithOptionalMaxUpdateRequestInput
	487, // 70: eating.ValidPreparationVessel.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 71: eating.ValidPreparationVessel.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	487, // 72: eating.ValidPreparationVessel.ArchivedAt:type_name -> google.protobuf.Timestamp
	30,  // 73: eating.ValidPreparationVessel.Preparation:type_name -> eating.ValidPreparation
	39,  // 74: eating.ValidPreparationVessel.Vessel:type_name -> eating.ValidVessel
	487, // 75: eating.ValidVessel.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 76: eating.ValidVessel.ArchivedAt:type_name -> google.protobuf.Timestamp
	487, // 77: eating.ValidVessel.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	24,  // 78: eating.ValidVessel.CapacityUnit:type_name -> eating.ValidMeasurementUnit
	487, // 79: eating.UserIngredientPreference.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 80: eating.UserIngredientPreference.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	487, // 81: eating.UserIngredientPreference.ArchivedAt:type_name -> google.protobuf.Timestamp
	1,   // 82: eating.UserIngredientPreference.Ingredient:type_name -> eating.ValidIngredient
	488, // 83: eating.CreateValidIngredientRequest.StorageTemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	1,   // 84: eating.CreateValidIngredientResponse.Result:type_name -> eating.ValidIngredient
	1,   // 85: eating.GetRandomValidIngredientResponse.Result:type_name -> eating.ValidIngredient
	1,   // 86: eating.GetValidIngredientResponse.Result:type_name -> eating.ValidIngredient
	493, // 87: eating.GetValidIngredientGroupsRequest.Filter:type_name -> eating.QueryFilter
	493, // 88: eating.GetValidIngredientGroupsResponse.Filter:type_name -> eating.QueryFilter
	3,   // 89: eating.GetValidIngredientGroupsResponse.Results:type_name -> eating.ValidIngredientGroup
	493, // 90: eating.GetValidIngredientMeasurementUnitsRequest.Filter:type_name -> eating.QueryFilter
	493, // 91: eating.GetValidIngredientMeasurementUnitsResponse.Filter:type_name -> eating.QueryFilter
	8,   // 92: eating.GetValidIngredientMeasurementUnitsResponse.Results:type_name -> eating.ValidIngredientMeasurementUnit
	493, // 93: eating.GetValidIngredientMeasurementUnitsByIngredientRequest.Filter:type_name -> eating.QueryFilter
	493, // 94: eating.GetValidIngredientMeasurementUnitsByIngredientResponse.Filter:type_name -> eating.QueryFilter
	25,  // 95: eating.GetValidIngredientMeasurementUnitsByIngredientResponse.Results:type_name -> eating.ValidMeasurementUnitConversion
	493, // 96: eating.GetValidIngredientMeasurementUnitsByMeasurementUnitRequest.Filter:type_name -> eating.QueryFilter
	493, // 97: eating.GetValidIngredientMeasurementUnitsByMeasurementUnitResponse.Filter:type_name -> eating.QueryFilter
	8,   // 98: eating.GetValidIngredientMeasurementUnitsByMeasurementUnitResponse.Results:type_name -> eating.ValidIngredientMeasurementUnit
	493, // 99: eating.GetValidIngredientPreparationsRequest.Filter:type_name -> eating.QueryFilter
	493, // 100: eating.GetValidIngredientPreparationsResponse.Filter:type_name -> eating.QueryFilter
	11,  // 101: eating.GetValidIngredientPreparationsResponse.Results:type_name -> eating.ValidIngredientPreparation
	493, // 102: eating.GetValidIngredientPreparationsByIngredientRequest.Filter:type_name -> eating.QueryFilter
	493, // 103: eating.GetValidIngredientPreparationsByIngredientResponse.Filter:type_name -> eating.QueryFilter
	11,  // 104: eating.GetValidIngredientPreparationsByIngredientResponse.Results:type_name -> eating.ValidIngredientPreparation
	493, // 105: eating.GetValidIngredientPreparationsByPreparationRequest.Filter:type_name -> eating.QueryFilter
	493, // 106: eating.GetValidIngredientPreparationsByPreparationResponse.Filter:type_name -> eating.QueryFilter
	11,  // 107: eating.GetValidIngredientPreparationsByPreparationResponse.Results:type_name -> eating.ValidIngredientPreparation
	493, // 108: eating.GetValidIngredientStateIngredientsRequest.Filter:type_name -> eating.QueryFilter
	493, // 109: eating.GetValidIngredientStateIngredientsResponse.Filter:type_name -> eating.QueryFilter
	14,  // 110: eating.GetValidIngredientStateIngredientsResponse.Result:type_name -> eating.ValidIngredientState
	493, // 111: eating.GetValidIngredientStateIngredientsByIngredientRequest.Filter:type_name -> eating.QueryFilter
	493, // 112: eating.GetValidIngredientStateIngredientsByIngredientResponse.Filter:type_name -> eating.QueryFilter
	16,  // 113: eating.GetValidIngredientStateIngredientsByIngredientResponse.Results:type_name -> eating.ValidIngredientStateIngredient
	493, // 114: eating.GetValidIngredientStateIngredientsByIngredientStateRequest.Filter:type_name -> eating.QueryFilter
	493, // 115: eating.GetValidIngredientStateIngredientsByIngredientStateResponse.Filter:type_name -> eating.QueryFilter
	16,  // 116: eating.GetValidIngredientStateIngredientsByIngredientStateResponse.Results:type_name -> eating.ValidIngredientStateIngredient
	493, // 117: eating.GetValidIngredientStatesRequest.Filter:type_name -> eating.QueryFilter
	493, // 118: eating.GetValidIngredientStatesResponse.Filter:type_name -> eating.QueryFilter
	14,  // 119: eating.GetValidIngredientStatesResponse.Results:type_name -> eating.ValidIngredientState
	493, // 120: eating.GetValidIngredientsRequest.Filter:type_name -> eating.QueryFilter
	493, // 121: eating.GetValidIngredientsResponse.Filter:type_name -> eating.QueryFilter
	1,   // 122: eating.GetValidIngredientsResponse.Results:type_name -> eating.ValidIngredient
	493, // 123: eating.GetValidInstrumentsRequest.Filter:type_name -> eating.QueryFilter
	493, // 124: eating.GetValidInstrumentsResponse.Filter:type_name -> eating.QueryFilter
	21,  // 125: eating.GetValidInstrumentsResponse.Results:type_name -> eating.ValidInstrument
	493, // 126: eating.GetValidMeasurementUnitConversionsFromUnitRequest.Filter:type_name -> eating.QueryFilter
	493, // 127: eating.GetValidMeasurementUnitConversionsFromUnitResponse.Filter:type_name -> eating.QueryFilter
	25,  // 128: eating.GetValidMeasurementUnitConversionsFromUnitResponse.Results:type_name -> eating.ValidMeasurementUnitConversion
	493, // 129: eating.GetValidMeasurementUnitConversionsToUnitRequest.Filter:type_name -> eating.QueryFilter
	493, // 130: eating.GetValidMeasurementUnitConversionsToUnitResponse.Filter:type_name -> eating.QueryFilter
	25,  // 131: eating.GetValidMeasurementUnitConversionsToUnitResponse.Results:type_name -> eating.ValidMeasurementUnitConversion
	493, // 132: eating.GetValidMeasurementUnitsRequest.Filter:type_name -> eating.QueryFilter
	493, // 133: eating.GetValidMeasurementUnitsResponse.Filter:type_name -> eating.QueryFilter
	24,  // 134: eating.GetValidMeasurementUnitsResponse.Results:type_name -> eating.ValidMeasurementUnit
	493, // 135: eating.GetValidPreparationInstrumentsRequest.Filter:type_name -> eating.QueryFilter
	493, // 136: eating.GetValidPreparationInstrumentsResponse.Filter:type_name -> eating.QueryFilter
	32,  // 137: eating.GetValidPreparationInstrumentsResponse.Results:type_name -> eating.ValidPreparationInstrument
	493, // 138: eating.GetValidPreparationInstrumentsByInstrumentRequest.Filter:type_name -> eating.QueryFilter
	493, // 139: eating.GetValidPreparationInstrumentsByInstrumentResponse.Filter:type_name -> eating.QueryFilter
	32,  // 140: eating.GetValidPreparationInstrumentsByInstrumentResponse.Results:type_name -> eating.ValidPreparationInstrument
	493, // 141: eating.GetValidPreparationInstrumentsByPreparationRequest.Filter:type_name -> eating.QueryFilter
	493, // 142: eating.GetValidPreparationVesselsRequest.Filter:type_name -> eating.QueryFilter
	493, // 143: eating.GetValidPreparationVesselsResponse.Filter:type_name -> eating.QueryFilter
	36,  // 144: eating.GetValidPreparationVesselsResponse.Result:type_name -> eating.ValidPreparationVessel
	493, // 145: eating.GetValidPreparationVesselsByPreparationRequest.Filter:type_name -> eating.QueryFilter
	493, // 146: eating.GetValidPreparationVesselsByPreparationResponse.Filter:type_name -> eating.QueryFilter
	36,  // 147: eating.GetValidPreparationVesselsByPreparationResponse.Results:type_name -> eating.ValidPreparationVessel
	493, // 148: eating.GetValidPreparationVesselsByVesselRequest.Filter:type_name -> eating.QueryFilter
	493, // 149: eating.GetValidPreparationVesselsByVesselResponse.Filter:type_name -> eating.QueryFilter
	36,  // 150: eating.GetValidPreparationVesselsByVesselResponse.Results:type_name -> eating.ValidPreparationVessel
	493, // 151: eating.GetValidPreparationsRequest.Filter:type_name -> eating.QueryFilter
	493, // 152: eating.GetValidPreparationsResponse.Filter:type_name -> eating.QueryFilter
	30,  // 153: eating.GetValidPreparationsResponse.Results:type_name -> eating.ValidPreparation
	493, // 154: eating.GetValidVesselsRequest.Filter:type_name -> eating.QueryFilter
	493, // 155: eating.GetValidVesselsResponse.Filter:type_name -> eating.QueryFilter
	39,  // 156: eating.GetValidVesselsResponse.Results:type_name -> eating.ValidVessel
	493, // 157: eating.SearchForValidIngredientGroupsRequest.Filter:type_name -> eating.QueryFilter
	493, // 158: eating.SearchForValidIngredientGroupsResponse.Filter:type_name -> eating.QueryFilter
	3,   // 159: eating.SearchForValidIngredientGroupsResponse.Results:type_name -> eating.ValidIngredientGroup
	493, // 160: eating.SearchForValidIngredientStatesRequest.Filter:type_name -> eating.QueryFilter
	493, // 161: eating.SearchForValidIngredientStatesResponse.Filter:type_name -> eating.QueryFilter
	14,  // 162: eating.SearchForValidIngredientStatesResponse.Results:type_name -> eating.ValidIngredientState
	493, // 163: eating.SearchForValidIngredientsRequest.Filter:type_name -> eating.QueryFilter
	493, // 164: eating.SearchForValidIngredientsResponse.Filter:type_name -> eating.QueryFilter
	1,   // 165: eating.SearchForValidIngredientsResponse.Results:type_name -> eating.ValidIngredient
	493, // 166: eating.SearchForValidInstrumentsRequest.Filter:type_name -> eating.QueryFilter
	493, // 167: eating.SearchForValidInstrumentsResponse.Filter:type_name -> eating.QueryFilter
	21,  // 168: eating.SearchForValidInstrumentsResponse.Results:type_name -> eating.ValidInstrument
	493, // 169: eating.SearchForValidMeasurementUnitsRequest.Filter:type_name -> eating.QueryFilter
	493, // 170: eating.SearchForValidMeasurementUnitsResponse.Filter:type_name -> eating.QueryFilter
	24,  // 171: eating.SearchForValidMeasurementUnitsResponse.Results:type_name -> eating.ValidMeasurementUnit
	493, // 172: eating.SearchForValidPreparationsRequest.Filter:type_name -> eating.QueryFilter
	493, // 173: eating.SearchForValidPreparationsResponse.Filter:type_name -> eating.QueryFilter
	30,  // 174: eating.SearchForValidPreparationsResponse.Results:type_name -> eating.ValidPreparation
	493, // 175: eating.SearchForValidVesselsRequest.Filter:type_name -> eating.QueryFilter
	493, // 176: eating.SearchForValidVesselsResponse.Filter:type_name -> eating.QueryFilter
	39,  // 177: eating.SearchForValidVesselsResponse.Results:type_name -> eating.ValidVessel
	493, // 178: eating.SearchValidIngredientsByPreparationRequest.Filter:type_name -> eating.QueryFilter
	493, // 179: eating.SearchValidIngredientsByPreparationResponse.Filter:type_name -> eating.QueryFilter
	1,   // 180: eating.SearchValidIngredientsByPreparationResponse.Results:type_name -> eating.ValidIngredient
	493, // 181: eating.SearchValidMeasurementUnitsByIngredientRequest.Filter:type_name -> eating.QueryFilter
	493, // 182: eating.SearchValidMeasurementUnitsByIngredientResponse.Filter:type_name -> eating.QueryFilter
	24,  // 183: eating.SearchValidMeasurementUnitsByIngredientResponse.Results:type_name -> eating.ValidMeasurementUnit
	20,  // 184: eating.UpdateValidIngredientRequest.input:type_name -> eating.ValidIngredientUpdateRequestInput
	7,   // 185: eating.UpdateValidIngredientGroupRequest.input:type_name -> eating.ValidIngredientGroupUpdateRequestInput
	10,  // 186: eating.UpdateValidIngredientMeasurementUnitRequest.input:type_name -> eating.ValidIngredientMeasurementUnitUpdateRequestInput
	13,  // 187: eating.UpdateValidIngredientPreparationRequest.input:type_name -> eating.ValidIngredientPreparationUpdateRequestInput
	19,  // 188: eating.UpdateValidIngredientStateRequest.input:type_name -> eating.ValidIngredientStateUpdateRequestInput
	18,  // 189: eating.UpdateValidIngredientStateIngredientRequest.input:type_name -> eating.ValidIngredientStateIngredientUpdateRequestInput
	23,  // 190: eating.UpdateValidInstrumentRequest.input:type_name -> eating.ValidInstrumentUpdateRequestInput
	29,  // 191: eating.UpdateValidMeasurementUnitRequest.input:type_name -> eating.ValidMeasurementUnitUpdateRequestInput
	27,  // 192: eating.UpdateValidMeasurementUnitConversionRequest.input:type_name -> eating.ValidMeasurementUnitConversionUpdateRequestInput
	35,  // 193: eating.UpdateValidPreparationRequest.input:type_name -> eating.ValidPreparationUpdateRequestInput
	34,  // 194: eating.UpdateValidPreparationInstrumentRequest.input:type_name -> eating.ValidPreparationInstrumentUpdateRequestInput
	38,  // 195: eating.UpdateValidPreparationVesselRequest.input:type_name -> eating.ValidPreparationVesselUpdateRequestInput
	41,  // 196: eating.UpdateValidVesselRequest.input:type_name -> eating.ValidVesselUpdateRequestInput
	493, // 197: eating.GetUserIngredientPreferencesRequest.Filter:type_name -> eating.QueryFilter
	493, // 198: eating.GetUserIngredientPreferencesResponse.Filter:type_name -> eating.QueryFilter
	42,  // 199: eating.GetUserIngredientPreferencesResponse.Results:type_name -> eating.UserIngredientPreference
	44,  // 200: eating.UpdateUserIngredientPreferenceRequest.input:type_name -> eating.UserIngredientPreferenceUpdateRequestInput
	487, // 201: eating.Recipe.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 202: eating.Recipe.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	487, // 203: eating.Recipe.ArchivedAt:type_name -> google.protobuf.Timestamp
	489, // 204: eating.Recipe.EstimatedPortions:type_name -> eating.Float32RangeWithOptionalMax
	236, // 205: eating.Recipe.PrepTasks:type_name -> eating.RecipePrepTask
	247, // 206: eating.Recipe.Steps:type_name -> eating.RecipeStep
	233, // 207: eating.Recipe.Media:type_name -> eating.RecipeMedia
	231, // 208: eating.Recipe.SupportingRecipes:type_name -> eating.Recipe
	489, // 209: eating.RecipeCreationRequestInput.EstimatedPortions:type_name -> eating.Float32RangeWithOptionalMax
	243, // 210: eating.RecipeCreationRequestInput.PrepTasks:type_name -> eating.RecipePrepTaskWithinRecipeCreationRequestInput
	254, // 211: eating.RecipeCreationRequestInput.Steps:type_name -> eating.RecipeStepCreationRequestInput
	487, // 212: eating.RecipeMedia.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 213: eating.RecipeMedia.ArchivedAt:type_name -> google.protobuf.Timestamp
	487, // 214: eating.RecipeMedia.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	487, // 215: eating.RecipePrepTask.CreatedAt:type_name -> google.protobuf.Timestamp
	488, // 216: eating.RecipePrepTask.StorageTemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	494, // 217: eating.RecipePrepTask.TimeBufferBeforeRecipeInSeconds:type_name -> eating.Uint32RangeWithOptionalMax
	487, // 218: eating.RecipePrepTask.ArchivedAt:type_name -> google.protobuf.Timestamp
	487, // 219: eating.RecipePrepTask.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	238, // 220: eating.RecipePrepTask.TaskSteps:type_name -> eating.RecipePrepTaskStep
	488, // 221: eating.RecipePrepTaskCreationRequestInput.StorageTemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	494, // 222: eating.RecipePrepTaskCreationRequestInput.TimeBufferBeforeRecipeInSeconds:type_name -> eating.Uint32RangeWithOptionalMax
	239, // 223: eating.RecipePrepTaskCreationRequestInput.RecipeSteps:type_name -> eating.RecipePrepTaskStepCreationRequestInput
	488, // 224: eating.RecipePrepTaskUpdateRequestInput.StorageTemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	495, // 225: eating.RecipePrepTaskUpdateRequestInput.TimeBufferBeforeRecipeInSeconds:type_name -> eating.Uint32RangeWithOptionalMaxUpdateRequestInput
	240, // 226: eating.RecipePrepTaskUpdateRequestInput.TaskSteps:type_name -> eating.RecipePrepTaskStepUpdateRequestInput
	488, // 227: eating.RecipePrepTaskWithinRecipeCreationRequestInput.StorageTemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	494, // 228: eating.RecipePrepTaskWithinRecipeCreationRequestInput.TimeBufferBeforeRecipeInSeconds:type_name -> eating.Uint32RangeWithOptionalMax
	241, // 229: eating.RecipePrepTaskWithinRecipeCreationRequestInput.RecipeSteps:type_name -> eating.RecipePrepTaskStepWithinRecipeCreationRequestInput
	487, // 230: eating.RecipeRating.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 231: eating.RecipeRating.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	487, // 232: eating.RecipeRating.ArchivedAt:type_name -> google.protobuf.Timestamp
	487, // 233: eating.RecipeStep.CreatedAt:type_name -> google.protobuf.Timestamp
	496, // 234: eating.RecipeStep.EstimatedTimeInSeconds:type_name -> eating.OptionalUint32Range
	488, // 235: eating.RecipeStep.TemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	487, // 236: eating.RecipeStep.ArchivedAt:type_name -> google.protobuf.Timestamp
	487, // 237: eating.RecipeStep.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	233, // 238: eating.RecipeStep.Media:type_name -> eating.RecipeMedia
	261, // 239: eating.RecipeStep.Products:type_name -> eating.RecipeStepProduct
	258, // 240: eating.RecipeStep.Instruments:type_name -> eating.RecipeStepInstrument
	265, // 241: eating.RecipeStep.Vessels:type_name -> eating.RecipeStepVessel
	248, // 242: eating.RecipeStep.CompletionConditions:type_name -> eating.RecipeStepCompletionCondition
	255, // 243: eating.RecipeStep.Ingredients:type_name -> eating.RecipeStepIngredient
	30,  // 244: eating.RecipeStep.Preparation:type_name -> eating.ValidPreparation
	487, // 245: eating.RecipeStepCompletionCondition.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 246: eating.RecipeStepCompletionCondition.ArchivedAt:type_name -> google.protobuf.Timestamp
	487, // 247: eating.RecipeStepCompletionCondition.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	14,  // 248: eating.RecipeStepCompletionCondition.IngredientState:type_name -> eating.ValidIngredientState
	251, // 249: eating.RecipeStepCompletionCondition.Ingredients:type_name -> eating.RecipeStepCompletionConditionIngredient
	251, // 250: eating.RecipeStepCompletionConditionForExistingRecipeCreationRequestInput.Ingredients:type_name -> eating.RecipeStepCompletionConditionIngredient
	487, // 251: eating.RecipeStepCompletionConditionIngredient.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 252: eating.RecipeStepCompletionConditionIngredient.ArchivedAt:type_name -> google.protobuf.Timestamp
	487, // 253: eating.RecipeStepCompletionConditionIngredient.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	496, // 254: eating.RecipeStepCreationRequestInput.EstimatedTimeInSeconds:type_name -> eating.OptionalUint32Range
	488, // 255: eating.RecipeStepCreationRequestInput.TemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	259, // 256: eating.RecipeStepCreationRequestInput.Instruments:type_name -> eating.RecipeStepInstrumentCreationRequestInput
	266, // 257: eating.RecipeStepCreationRequestInput.Vessels:type_name -> eating.RecipeStepVesselCreationRequestInput
	262, // 258: eating.RecipeStepCreationRequestInput.Products:type_name -> eating.RecipeStepProductCreationRequestInput
	256, // 259: eating.RecipeStepCreationRequestInput.Ingredients:type_name -> eating.RecipeStepIngredientCreationRequestInput
	249, // 260: eating.RecipeStepCreationRequestInput.CompletionConditions:type_name -> eating.RecipeStepCompletionConditionCreationRequestInput
	487, // 261: eating.RecipeStepIngredient.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 262: eating.RecipeStepIngredient.ArchivedAt:type_name -> google.protobuf.Timestamp
	1,   // 263: eating.RecipeStepIngredient.Ingredient:type_name -> eating.ValidIngredient
	487, // 264: eating.RecipeStepIngredient.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	489, // 265: eating.RecipeStepIngredient.Quantity:type_name -> eating.Float32RangeWithOptionalMax
	24,  // 266: eating.RecipeStepIngredient.MeasurementUnit:type_name -> eating.ValidMeasurementUnit
	489, // 267: eating.RecipeStepIngredientCreationRequestInput.Quantity:type_name -> eating.Float32RangeWithOptionalMax
	490, // 268: eating.RecipeStepIngredientUpdateRequestInput.Quantity:type_name -> eating.Float32RangeWithOptionalMaxUpdateRequestInput
	487, // 269: eating.RecipeStepInstrument.CreatedAt:type_name -> google.protobuf.Timestamp
	21,  // 270: eating.RecipeStepInstrument.Instrument:type_name -> eating.ValidInstrument
	487, // 271: eating.RecipeStepInstrument.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	487, // 272: eating.RecipeStepInstrument.ArchivedAt:type_name -> google.protobuf.Timestamp
	494, // 273: eating.RecipeStepInstrument.Quantity:type_name -> eating.Uint32RangeWithOptionalMax
	494, // 274: eating.RecipeStepInstrumentCreationRequestInput.Quantity:type_name -> eating.Uint32RangeWithOptionalMax
	495, // 275: eating.RecipeStepInstrumentUpdateRequestInput.Quantity:type_name -> eating.Uint32RangeWithOptionalMaxUpdateRequestInput
	487, // 276: eating.RecipeStepProduct.CreatedAt:type_name -> google.protobuf.Timestamp
	488, // 277: eating.RecipeStepProduct.StorageTemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	496, // 278: eating.RecipeStepProduct.StorageDurationInSeconds:type_name -> eating.OptionalUint32Range
	488, // 279: eating.RecipeStepProduct.Quantity:type_name -> eating.OptionalFloat32Range
	487, // 280: eating.RecipeStepProduct.ArchivedAt:type_name -> google.protobuf.Timestamp
	487, // 281: eating.RecipeStepProduct.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	24,  // 282: eating.RecipeStepProduct.MeasurementUnit:type_name -> eating.ValidMeasurementUnit
	488, // 283: eating.RecipeStepProductCreationRequestInput.StorageTemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	496, // 284: eating.RecipeStepProductCreationRequestInput.StorageDurationInSeconds:type_name -> eating.OptionalUint32Range
	488, // 285: eating.RecipeStepProductCreationRequestInput.Quantity:type_name -> eating.OptionalFloat32Range
	488, // 286: eating.RecipeStepProductUpdateRequestInput.StorageTemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	496, // 287: eating.RecipeStepProductUpdateRequestInput.StorageDurationInSeconds:type_name -> eating.OptionalUint32Range
	488, // 288: eating.RecipeStepProductUpdateRequestInput.Quantity:type_name -> eating.OptionalFloat32Range
	496, // 289: eating.RecipeStepUpdateRequestInput.EstimatedTimeInSeconds:type_name -> eating.OptionalUint32Range
	488, // 290: eating.RecipeStepUpdateRequestInput.TemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	30,  // 291: eating.RecipeStepUpdateRequestInput.Preparation:type_name -> eating.ValidPreparation
	487, // 292: eating.RecipeStepVessel.CreatedAt:type_name -> google.protobuf.Timestamp
	491, // 293: eating.RecipeStepVessel.Quantity:type_name -> eating.Uint16RangeWithOptionalMax
	487, // 294: eating.RecipeStepVessel.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	487, // 295: eating.RecipeStepVessel.ArchivedAt:type_name -> google.protobuf.Timestamp
	39,  // 296: eating.RecipeStepVessel.Vessel:type_name -> eating.ValidVessel
	491, // 297: eating.RecipeStepVesselCreationRequestInput.Quantity:type_name -> eating.Uint16RangeWithOptionalMax
	492, // 298: eating.RecipeStepVesselUpdateRequestInput.Quantity:type_name -> eating.Uint16RangeWithOptionalMaxUpdateRequestInput
	490, // 299: eating.RecipeUpdateRequestInput.EstimatedPortions:type_name -> eating.Float32RangeWithOptionalMaxUpdateRequestInput
	231, // 300: eating.CloneRecipeResponse.Result:type_name -> eating.Recipe
	237, // 301: eating.CreateRecipePrepTaskRequest.input:type_name -> eating.RecipePrepTaskCreationRequestInput
	245, // 302: eating.CreateRecipeRatingRequest.input:type_name -> eating.RecipeRatingCreationRequestInput
	254, // 303: eating.CreateRecipeStepRequest.input:type_name -> eating.RecipeStepCreationRequestInput
	250, // 304: eating.CreateRecipeStepCompletionConditionRequest.input:type_name -> eating.RecipeStepCompletionConditionForExistingRecipeCreationRequestInput
	256, // 305: eating.CreateRecipeStepIngredientRequest.input:type_name -> eating.RecipeStepIngredientCreationRequestInput
	259, // 306: eating.CreateRecipeStepInstrumentRequest.input:type_name -> eating.RecipeStepInstrumentCreationRequestInput
	262, // 307: eating.CreateRecipeStepProductRequest.input:type_name -> eating.RecipeStepProductCreationRequestInput
	266, // 308: eating.CreateRecipeStepVesselRequest.input:type_name -> eating.RecipeStepVesselCreationRequestInput
	493, // 309: eating.GetRecipePrepTasksRequest.Filter:type_name -> eating.QueryFilter
	493, // 310: eating.GetRecipePrepTasksResponse.Filter:type_name -> eating.QueryFilter
	236, // 311: eating.GetRecipePrepTasksResponse.Results:type_name -> eating.RecipePrepTask
	493, // 312: eating.GetRecipeRatingsForRecipeRequest.Filter:type_name -> eating.QueryFilter
	493, // 313: eating.GetRecipeRatingsForRecipeResponse.Filter:type_name -> eating.QueryFilter
	244, // 314: eating.GetRecipeRatingsForRecipeResponse.Results:type_name -> eating.RecipeRating
	493, // 315: eating.GetRecipeStepCompletionConditionsRequest.Filter:type_name -> eating.QueryFilter
	493, // 316: eating.GetRecipeStepCompletionConditionsResponse.Filter:type_name -> eating.QueryFilter
	248, // 317: eating.GetRecipeStepCompletionConditionsResponse.Results:type_name -> eating.RecipeStepCompletionCondition
	493, // 318: eating.GetRecipeStepIngredientsRequest.Filter:type_name -> eating.QueryFilter
	493, // 319: eating.GetRecipeStepIngredientsResponse.Filter:type_name -> eating.QueryFilter
	255, // 320: eating.GetRecipeStepIngredientsResponse.Results:type_name -> eating.RecipeStepIngredient
	493, // 321: eating.GetRecipeStepInstrumentsRequest.Filter:type_name -> eating.QueryFilter
	493, // 322: eating.GetRecipeStepInstrumentsResponse.Filter:type_name -> eating.QueryFilter
	258, // 323: eating.GetRecipeStepInstrumentsResponse.Results:type_name -> eating.RecipeStepInstrument
	493, // 324: eating.GetRecipeStepProductsRequest.Filter:type_name -> eating.QueryFilter
	493, // 325: eating.GetRecipeStepProductsResponse.Filter:type_name -> eating.QueryFilter
	261, // 326: eating.GetRecipeStepProductsResponse.Results:type_name -> eating.RecipeStepProduct
	493, // 327: eating.GetRecipeStepVesselsRequest.Filter:type_name -> eating.QueryFilter
	493, // 328: eating.GetRecipeStepVesselsResponse.Filter:type_name -> eating.QueryFilter
	265, // 329: eating.GetRecipeStepVesselsResponse.Results:type_name -> eating.RecipeStepVessel
	493, // 330: eating.GetRecipeStepsRequest.Filter:type_name -> eating.QueryFilter
	493, // 331: eating.GetRecipeStepsResponse.Filter:type_name -> eating.QueryFilter
	247, // 332: eating.GetRecipeStepsResponse.Results:type_name -> eating.RecipeStep
	493, // 333: eating.GetRecipesRequest.Filter:type_name -> eating.QueryFilter
	493, // 334: eating.GetRecipesResponse.Filter:type_name -> eating.QueryFilter
	231, // 335: eating.GetRecipesResponse.Results:type_name -> eating.Recipe
	493, // 336: eating.SearchForRecipesRequest.Filter:type_name -> eating.QueryFilter
	493, // 337: eating.SearchForRecipesResponse.Filter:type_name -> eating.QueryFilter
	231, // 338: eating.SearchForRecipesResponse.Result:type_name -> eating.Recipe
	268, // 339: eating.UpdateRecipeRequest.input:type_name -> eating.RecipeUpdateRequestInput
	242, // 340: eating.UpdateRecipePrepTaskRequest.input:type_name -> eating.RecipePrepTaskUpdateRequestInput
	246, // 341: eating.UpdateRecipeRatingRequest.input:type_name -> eating.RecipeRatingUpdateRequestInput
	264, // 342: eating.UpdateRecipeStepRequest.input:type_name -> eating.RecipeStepUpdateRequestInput
	253, // 343: eating.UpdateRecipeStepCompletionConditionRequest.input:type_name -> eating.RecipeStepCompletionConditionUpdateRequestInput
	257, // 344: eating.UpdateRecipeStepIngredientRequest.input:type_name -> eating.RecipeStepIngredientUpdateRequestInput
	260, // 345: eating.UpdateRecipeStepInstrumentRequest.input:type_name -> eating.RecipeStepInstrumentUpdateRequestInput
	263, // 346: eating.UpdateRecipeStepProductRequest.input:type_name -> eating.RecipeStepProductUpdateRequestInput
	267, // 347: eating.UpdateRecipeStepVesselRequest.input:type_name -> eating.RecipeStepVesselUpdateRequestInput
	487, // 348: eating.Meal.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 349: eating.Meal.ArchivedAt:type_name -> google.protobuf.Timestamp
	487, // 350: eating.Meal.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	489, // 351: eating.Meal.EstimatedPortions:type_name -> eating.Float32RangeWithOptionalMax
	370, // 352: eating.Meal.Components:type_name -> eating.MealComponent
	231, // 353: eating.MealComponent.Recipe:type_name -> eating.Recipe
	489, // 354: eating.MealCreationRequestInput.EstimatedPortions:type_name -> eating.Float32RangeWithOptionalMax
	371, // 355: eating.MealCreationRequestInput.Components:type_name -> eating.MealComponentCreationRequestInput
	487, // 356: eating.MealPlan.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 357: eating.MealPlan.VotingDeadline:type_name -> google.protobuf.Timestamp
	487, // 358: eating.MealPlan.ArchivedAt:type_name -> google.protobuf.Timestamp
	487, // 359: eating.MealPlan.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	376, // 360: eating.MealPlan.Events:type_name -> eating.MealPlanEvent
	487, // 361: eating.MealPlanCreationRequestInput.VotingDeadline:type_name -> google.protobuf.Timestamp
	377, // 362: eating.MealPlanCreationRequestInput.Events:type_name -> eating.MealPlanEventCreationRequestInput
	487, // 363: eating.MealPlanEvent.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 364: eating.MealPlanEvent.StartsAt:type_name -> google.protobuf.Timestamp
	487, // 365: eating.MealPlanEvent.EndsAt:type_name -> google.protobuf.Timestamp
	487, // 366: eating.MealPlanEvent.ArchivedAt:type_name -> google.protobuf.Timestamp
	487, // 367: eating.MealPlanEvent.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	382, // 368: eating.MealPlanEvent.Options:type_name -> eating.MealPlanOption
	487, // 369: eating.MealPlanEventCreationRequestInput.EndsAt:type_name -> google.protobuf.Timestamp
	487, // 370: eating.MealPlanEventCreationRequestInput.StartsAt:type_name -> google.protobuf.Timestamp
	383, // 371: eating.MealPlanEventCreationRequestInput.Options:type_name -> eating.MealPlanOptionCreationRequestInput
	487, // 372: eating.MealPlanEventUpdateRequestInput.StartsAt:type_name -> google.protobuf.Timestamp
	487, // 373: eating.MealPlanEventUpdateRequestInput.EndsAt:type_name -> google.protobuf.Timestamp
	487, // 374: eating.MealPlanGroceryListItem.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 375: eating.MealPlanGroceryListItem.ArchivedAt:type_name -> google.protobuf.Timestamp
	487, // 376: eating.MealPlanGroceryListItem.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	24,  // 377: eating.MealPlanGroceryListItem.PurchasedMeasurementUnit:type_name -> eating.ValidMeasurementUnit
	489, // 378: eating.MealPlanGroceryListItem.QuantityNeeded:type_name -> eating.Float32RangeWithOptionalMax
	24,  // 379: eating.MealPlanGroceryListItem.MeasurementUnit:type_name -> eating.ValidMeasurementUnit
	1,   // 380: eating.MealPlanGroceryListItem.Ingredient:type_name -> eating.ValidIngredient
	489, // 381: eating.MealPlanGroceryListItemCreationRequestInput.QuantityNeeded:type_name -> eating.Float32RangeWithOptionalMax
	490, // 382: eating.MealPlanGroceryListItemUpdateRequestInput.QuantityNeeded:type_name -> eating.Float32RangeWithOptionalMaxUpdateRequestInput
	487, // 383: eating.MealPlanOption.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 384: eating.MealPlanOption.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	487, // 385: eating.MealPlanOption.ArchivedAt:type_name -> google.protobuf.Timestamp
	385, // 386: eating.MealPlanOption.Votes:type_name -> eating.MealPlanOptionVote
	369, // 387: eating.MealPlanOption.Meal:type_name -> eating.Meal
	487, // 388: eating.MealPlanOptionVote.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 389: eating.MealPlanOptionVote.ArchivedAt:type_name -> google.protobuf.Timestamp
	487, // 390: eating.MealPlanOptionVote.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	386, // 391: eating.MealPlanOptionVoteCreationRequestInput.Votes:type_name -> eating.MealPlanOptionVoteCreationInput
	236, // 392: eating.MealPlanTask.RecipePrepTask:type_name -> eating.RecipePrepTask
	487, // 393: eating.MealPlanTask.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 394: eating.MealPlanTask.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	487, // 395: eating.MealPlanTask.CompletedAt:type_name -> google.protobuf.Timestamp
	382, // 396: eating.MealPlanTask.MealPlanOption:type_name -> eating.MealPlanOption
	487, // 397: eating.MealPlanUpdateRequestInput.VotingDeadline:type_name -> google.protobuf.Timestamp
	490, // 398: eating.MealUpdateRequestInput.EstimatedPortions:type_name -> eating.Float32RangeWithOptionalMaxUpdateRequestInput
	372, // 399: eating.MealUpdateRequestInput.Components:type_name -> eating.MealComponentUpdateRequestInput
	377, // 400: eating.CreateMealPlanEventRequest.input:type_name -> eating.MealPlanEventCreationRequestInput
	380, // 401: eating.CreateMealPlanGroceryListItemRequest.input:type_name -> eating.MealPlanGroceryListItemCreationRequestInput
	383, // 402: eating.CreateMealPlanOptionRequest.input:type_name -> eating.MealPlanOptionCreationRequestInput
	387, // 403: eating.CreateMealPlanOptionVoteRequest.input:type_name -> eating.MealPlanOptionVoteCreationRequestInput
	390, // 404: eating.CreateMealPlanTaskRequest.input:type_name -> eating.MealPlanTaskCreationRequestInput
	493, // 405: eating.GetMealPlanEventsRequest.Filter:type_name -> eating.QueryFilter
	493, // 406: eating.GetMealPlanEventsResponse.Filter:type_name -> eating.QueryFilter
	376, // 407: eating.GetMealPlanEventsResponse.Results:type_name -> eating.MealPlanEvent
	493, // 408: eating.GetMealPlanGroceryListItemsForMealPlanRequest.Filter:type_name -> eating.QueryFilter
	493, // 409: eating.GetMealPlanGroceryListItemsForMealPlanResponse.Filter:type_name -> eating.QueryFilter
	379, // 410: eating.GetMealPlanGroceryListItemsForMealPlanResponse.Results:type_name -> eating.MealPlanGroceryListItem
	493, // 411: eating.GetMealPlanOptionVotesRequest.Filter:type_name -> eating.QueryFilter
	493, // 412: eating.GetMealPlanOptionVotesResponse.Filter:type_name -> eating.QueryFilter
	385, // 413: eating.GetMealPlanOptionVotesResponse.Results:type_name -> eating.MealPlanOptionVote
	493, // 414: eating.GetMealPlanOptionsRequest.Filter:type_name -> eating.QueryFilter
	493, // 415: eating.GetMealPlanOptionsResponse.Filter:type_name -> eating.QueryFilter
	382, // 416: eating.GetMealPlanOptionsResponse.Result:type_name -> eating.MealPlanOption
	493, // 417: eating.GetMealPlanTasksRequest.Filter:type_name -> eating.QueryFilter
	493, // 418: eating.GetMealPlanTasksResponse.Filter:type_name -> eating.QueryFilter
	389, // 419: eating.GetMealPlanTasksResponse.Results:type_name -> eating.MealPlanTask
	493, // 420: eating.GetMealPlansForHouseholdRequest.Filter:type_name -> eating.QueryFilter
	493, // 421: eating.GetMealPlansForHouseholdResponse.Filter:type_name -> eating.QueryFilter
	374, // 422: eating.GetMealPlansForHouseholdResponse.Results:type_name -> eating.MealPlan
	493, // 423: eating.GetMealsRequest.Filter:type_name -> eating.QueryFilter
	493, // 424: eating.GetMealsResponse.Filter:type_name -> eating.QueryFilter
	369, // 425: eating.GetMealsResponse.Resuls:type_name -> eating.Meal
	493, // 426: eating.SearchForMealsRequest.Filter:type_name -> eating.QueryFilter
	493, // 427: eating.SearchForMealsResponse.Filter:type_name -> eating.QueryFilter
	369, // 428: eating.SearchForMealsResponse.Results:type_name -> eating.Meal
	392, // 429: eating.UpdateMealPlanRequest.input:type_name -> eating.MealPlanUpdateRequestInput
	378, // 430: eating.UpdateMealPlanEventRequest.input:type_name -> eating.MealPlanEventUpdateRequestInput
	381, // 431: eating.UpdateMealPlanGroceryListItemRequest.input:type_name -> eating.MealPlanGroceryListItemUpdateRequestInput
	384, // 432: eating.UpdateMealPlanOptionRequest.input:type_name -> eating.MealPlanOptionUpdateRequestInput
	388, // 433: eating.UpdateMealPlanOptionVoteRequest.input:type_name -> eating.MealPlanOptionVoteUpdateRequestInput
	391, // 434: eating.UpdateMealPlanTaskStatusRequest.input:type_name -> eating.MealPlanTaskStatusChangeRequestInput
	493, // 435: eating.GetHouseholdInstrumentOwnershipsRequest.Filter:type_name -> eating.QueryFilter
	493, // 436: eating.GetHouseholdInstrumentOwnershipsResponse.Filter:type_name -> eating.QueryFilter
	484, // 437: eating.GetHouseholdInstrumentOwnershipsResponse.Results:type_name -> eating.HouseholdInstrumentOwnership
	486, // 438: eating.UpdateHouseholdInstrumentOwnershipRequest.input:type_name -> eating.HouseholdInstrumentOwnershipUpdateRequestInput
	487, // 439: eating.HouseholdInstrumentOwnership.CreatedAt:type_name -> google.protobuf.Timestamp
	487, // 440: eating.HouseholdInstrumentOwnership.ArchivedAt:type_name -> google.protobuf.Timestamp
	487, // 441: eating.HouseholdInstrumentOwnership.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	21,  // 442: eating.HouseholdInstrumentOwnership.Instrument:type_name -> eating.ValidInstrument
	443, // [443:443] is the sub-list for method output_type
	443, // [443:443] is the sub-list for method input_type
	443, // [443:443] is the sub-list for extension type_name
	443, // [443:443] is the sub-list for extension extendee
	0,   // [0:443] is the sub-list for field type_name
}

func init() { file_messages_eating_proto_init() }
func file_messages_eating_proto_init() {
	if File_messages_eating_proto != nil {
		return
	}
	file_messages_common_proto_init()
	file_messages_core_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_messages_eating_proto_rawDesc), len(file_messages_eating_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   487,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_eating_proto_goTypes,
		DependencyIndexes: file_messages_eating_proto_depIdxs,
		MessageInfos:      file_messages_eating_proto_msgTypes,
	}.Build()
	File_messages_eating_proto = out.File
	file_messages_eating_proto_goTypes = nil
	file_messages_eating_proto_depIdxs = nil
}
