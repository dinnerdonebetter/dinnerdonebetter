// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.3
// source: messages.proto

package messages

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         *string                `json:"Query,omitempty"      protobuf:"bytes,1,opt,name=Query,proto3,oneof"`
	PageSize      *uint32                `json:"PageSize,omitempty"   protobuf:"varint,2,opt,name=PageSize,proto3,oneof"`
	NextCursor    *string                `json:"NextCursor,omitempty" protobuf:"bytes,3,opt,name=NextCursor,proto3,oneof"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryFilter) Reset() {
	*x = QueryFilter{}
	mi := &file_messages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFilter) ProtoMessage() {}

func (x *QueryFilter) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFilter.ProtoReflect.Descriptor instead.
func (*QueryFilter) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{0}
}

func (x *QueryFilter) GetQuery() string {
	if x != nil && x.Query != nil {
		return *x.Query
	}
	return ""
}

func (x *QueryFilter) GetPageSize() uint32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *QueryFilter) GetNextCursor() string {
	if x != nil && x.NextCursor != nil {
		return *x.NextCursor
	}
	return ""
}

type ArbitraryQueueMessageRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QueueName     string                 `json:"QueueName,omitempty" protobuf:"bytes,1,opt,name=QueueName,proto3"`
	Body          string                 `json:"Body,omitempty"      protobuf:"bytes,2,opt,name=Body,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArbitraryQueueMessageRequestInput) Reset() {
	*x = ArbitraryQueueMessageRequestInput{}
	mi := &file_messages_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArbitraryQueueMessageRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArbitraryQueueMessageRequestInput) ProtoMessage() {}

func (x *ArbitraryQueueMessageRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArbitraryQueueMessageRequestInput.ProtoReflect.Descriptor instead.
func (*ArbitraryQueueMessageRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{1}
}

func (x *ArbitraryQueueMessageRequestInput) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

func (x *ArbitraryQueueMessageRequestInput) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type ArbitraryQueueMessageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
	Success       bool `json:"Success,omitempty" protobuf:"varint,1,opt,name=Success,proto3"`
}

func (x *ArbitraryQueueMessageResponse) Reset() {
	*x = ArbitraryQueueMessageResponse{}
	mi := &file_messages_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArbitraryQueueMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArbitraryQueueMessageResponse) ProtoMessage() {}

func (x *ArbitraryQueueMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArbitraryQueueMessageResponse.ProtoReflect.Descriptor instead.
func (*ArbitraryQueueMessageResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{2}
}

func (x *ArbitraryQueueMessageResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type AuditLogEntry struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt          *timestamppb.Timestamp `json:"CreatedAt,omitempty"          protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	Changes            map[string]*ChangeLog  `json:"Changes,omitempty"            protobuf:"bytes,2,rep,name=Changes,proto3"            protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BelongsToHousehold string                 `json:"BelongsToHousehold,omitempty" protobuf:"bytes,3,opt,name=BelongsToHousehold,proto3"`
	ID                 string                 `json:"ID,omitempty"                 protobuf:"bytes,4,opt,name=ID,proto3"`
	ResourceType       string                 `json:"ResourceType,omitempty"       protobuf:"bytes,5,opt,name=ResourceType,proto3"`
	RelevantID         string                 `json:"RelevantID,omitempty"         protobuf:"bytes,6,opt,name=RelevantID,proto3"`
	EventType          string                 `json:"EventType,omitempty"          protobuf:"bytes,7,opt,name=EventType,proto3"`
	BelongsToUser      string                 `json:"BelongsToUser,omitempty"      protobuf:"bytes,8,opt,name=BelongsToUser,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AuditLogEntry) Reset() {
	*x = AuditLogEntry{}
	mi := &file_messages_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogEntry) ProtoMessage() {}

func (x *AuditLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogEntry.ProtoReflect.Descriptor instead.
func (*AuditLogEntry) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{3}
}

func (x *AuditLogEntry) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *AuditLogEntry) GetChanges() map[string]*ChangeLog {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *AuditLogEntry) GetBelongsToHousehold() string {
	if x != nil {
		return x.BelongsToHousehold
	}
	return ""
}

func (x *AuditLogEntry) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *AuditLogEntry) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *AuditLogEntry) GetRelevantID() string {
	if x != nil {
		return x.RelevantID
	}
	return ""
}

func (x *AuditLogEntry) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *AuditLogEntry) GetBelongsToUser() string {
	if x != nil {
		return x.BelongsToUser
	}
	return ""
}

type AvatarUpdateInput struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Base64EncodedData string                 `json:"Base64EncodedData,omitempty" protobuf:"bytes,1,opt,name=Base64EncodedData,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AvatarUpdateInput) Reset() {
	*x = AvatarUpdateInput{}
	mi := &file_messages_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AvatarUpdateInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarUpdateInput) ProtoMessage() {}

func (x *AvatarUpdateInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarUpdateInput.ProtoReflect.Descriptor instead.
func (*AvatarUpdateInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{4}
}

func (x *AvatarUpdateInput) GetBase64EncodedData() string {
	if x != nil {
		return x.Base64EncodedData
	}
	return ""
}

type ChangeActiveHouseholdInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HouseholdID   string                 `json:"HouseholdID,omitempty" protobuf:"bytes,1,opt,name=HouseholdID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeActiveHouseholdInput) Reset() {
	*x = ChangeActiveHouseholdInput{}
	mi := &file_messages_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeActiveHouseholdInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeActiveHouseholdInput) ProtoMessage() {}

func (x *ChangeActiveHouseholdInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeActiveHouseholdInput.ProtoReflect.Descriptor instead.
func (*ChangeActiveHouseholdInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{5}
}

func (x *ChangeActiveHouseholdInput) GetHouseholdID() string {
	if x != nil {
		return x.HouseholdID
	}
	return ""
}

type ChangeLog struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OldValue      string                 `json:"OldValue,omitempty" protobuf:"bytes,1,opt,name=OldValue,proto3"`
	NewValue      string                 `json:"NewValue,omitempty" protobuf:"bytes,2,opt,name=NewValue,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeLog) Reset() {
	*x = ChangeLog{}
	mi := &file_messages_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeLog) ProtoMessage() {}

func (x *ChangeLog) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeLog.ProtoReflect.Descriptor instead.
func (*ChangeLog) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{6}
}

func (x *ChangeLog) GetOldValue() string {
	if x != nil {
		return x.OldValue
	}
	return ""
}

func (x *ChangeLog) GetNewValue() string {
	if x != nil {
		return x.NewValue
	}
	return ""
}

type CoreUserDataCollection struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// map<string, Webhook> Webhooks = 1;
	// map<string, ServiceSettingConfiguration> ServiceSettingConfigurations = 2;
	// map<string, AuditLogEntry> AuditLogEntries = 3;
	ReceivedInvites                  []*HouseholdInvitation         `json:"ReceivedInvites,omitempty"                  protobuf:"bytes,4,rep,name=ReceivedInvites,proto3"`
	SentInvites                      []*HouseholdInvitation         `json:"SentInvites,omitempty"                      protobuf:"bytes,5,rep,name=SentInvites,proto3"`
	UserServiceSettingConfigurations []*ServiceSettingConfiguration `json:"UserServiceSettingConfigurations,omitempty" protobuf:"bytes,6,rep,name=UserServiceSettingConfigurations,proto3"`
	UserAuditLogEntries              []*AuditLogEntry               `json:"UserAuditLogEntries,omitempty"              protobuf:"bytes,7,rep,name=UserAuditLogEntries,proto3"`
	Households                       []*Household                   `json:"Households,omitempty"                       protobuf:"bytes,8,rep,name=Households,proto3"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *CoreUserDataCollection) Reset() {
	*x = CoreUserDataCollection{}
	mi := &file_messages_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoreUserDataCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreUserDataCollection) ProtoMessage() {}

func (x *CoreUserDataCollection) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreUserDataCollection.ProtoReflect.Descriptor instead.
func (*CoreUserDataCollection) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{7}
}

func (x *CoreUserDataCollection) GetReceivedInvites() []*HouseholdInvitation {
	if x != nil {
		return x.ReceivedInvites
	}
	return nil
}

func (x *CoreUserDataCollection) GetSentInvites() []*HouseholdInvitation {
	if x != nil {
		return x.SentInvites
	}
	return nil
}

func (x *CoreUserDataCollection) GetUserServiceSettingConfigurations() []*ServiceSettingConfiguration {
	if x != nil {
		return x.UserServiceSettingConfigurations
	}
	return nil
}

func (x *CoreUserDataCollection) GetUserAuditLogEntries() []*AuditLogEntry {
	if x != nil {
		return x.UserAuditLogEntries
	}
	return nil
}

func (x *CoreUserDataCollection) GetHouseholds() []*Household {
	if x != nil {
		return x.Households
	}
	return nil
}

type CreateMealPlanTasksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HouseholdID   string                 `json:"HouseholdID,omitempty" protobuf:"bytes,1,opt,name=HouseholdID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMealPlanTasksRequest) Reset() {
	*x = CreateMealPlanTasksRequest{}
	mi := &file_messages_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMealPlanTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMealPlanTasksRequest) ProtoMessage() {}

func (x *CreateMealPlanTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMealPlanTasksRequest.ProtoReflect.Descriptor instead.
func (*CreateMealPlanTasksRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{8}
}

func (x *CreateMealPlanTasksRequest) GetHouseholdID() string {
	if x != nil {
		return x.HouseholdID
	}
	return ""
}

type CreateMealPlanTasksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
	Success       bool `json:"Success,omitempty" protobuf:"varint,1,opt,name=Success,proto3"`
}

func (x *CreateMealPlanTasksResponse) Reset() {
	*x = CreateMealPlanTasksResponse{}
	mi := &file_messages_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMealPlanTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMealPlanTasksResponse) ProtoMessage() {}

func (x *CreateMealPlanTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMealPlanTasksResponse.ProtoReflect.Descriptor instead.
func (*CreateMealPlanTasksResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{9}
}

func (x *CreateMealPlanTasksResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DataChangeMessage struct {
	state                            protoimpl.MessageState          `protogen:"open.v1"`
	RequestID                        string                          `json:"RequestID,omitempty"                        protobuf:"bytes,1,opt,name=RequestID,proto3"`
	HouseholdInvitation              *HouseholdInvitation            `json:"HouseholdInvitation,omitempty"              protobuf:"bytes,2,opt,name=HouseholdInvitation,proto3"`
	ValidMeasurementUnitConversion   *ValidMeasurementUnitConversion `json:"ValidMeasurementUnitConversion,omitempty"   protobuf:"bytes,3,opt,name=ValidMeasurementUnitConversion,proto3"`
	ValidInstrument                  *ValidInstrument                `json:"ValidInstrument,omitempty"                  protobuf:"bytes,4,opt,name=ValidInstrument,proto3"`
	ValidIngredient                  *ValidIngredient                `json:"ValidIngredient,omitempty"                  protobuf:"bytes,5,opt,name=ValidIngredient,proto3"`
	ValidIngredientGroup             *ValidIngredientGroup           `json:"ValidIngredientGroup,omitempty"             protobuf:"bytes,6,opt,name=ValidIngredientGroup,proto3"`
	ValidPreparation                 *ValidPreparation               `json:"ValidPreparation,omitempty"                 protobuf:"bytes,7,opt,name=ValidPreparation,proto3"`
	ValidIngredientState             *ValidIngredientState           `json:"ValidIngredientState,omitempty"             protobuf:"bytes,8,opt,name=ValidIngredientState,proto3"`
	MealPlanGroceryListItem          *MealPlanGroceryListItem        `json:"MealPlanGroceryListItem,omitempty"          protobuf:"bytes,9,opt,name=MealPlanGroceryListItem,proto3"`
	Meal                             *Meal                           `json:"Meal,omitempty"                             protobuf:"bytes,10,opt,name=Meal,proto3"`
	Context                          map[string]*anypb.Any           `json:"Context,omitempty"                          protobuf:"bytes,11,rep,name=Context,proto3"                          protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Recipe                           *Recipe                         `json:"Recipe,omitempty"                           protobuf:"bytes,12,opt,name=Recipe,proto3"`
	RecipePrepTask                   *RecipePrepTask                 `json:"RecipePrepTask,omitempty"                   protobuf:"bytes,13,opt,name=RecipePrepTask,proto3"`
	RecipePrepTaskStep               *RecipePrepTaskStep             `json:"RecipePrepTaskStep,omitempty"               protobuf:"bytes,14,opt,name=RecipePrepTaskStep,proto3"`
	RecipeStep                       *RecipeStep                     `json:"RecipeStep,omitempty"                       protobuf:"bytes,15,opt,name=RecipeStep,proto3"`
	RecipeStepProduct                *RecipeStepProduct              `json:"RecipeStepProduct,omitempty"                protobuf:"bytes,16,opt,name=RecipeStepProduct,proto3"`
	RecipeStepInstrument             *RecipeStepInstrument           `json:"RecipeStepInstrument,omitempty"             protobuf:"bytes,17,opt,name=RecipeStepInstrument,proto3"`
	RecipeStepIngredient             *RecipeStepIngredient           `json:"RecipeStepIngredient,omitempty"             protobuf:"bytes,18,opt,name=RecipeStepIngredient,proto3"`
	MealPlan                         *MealPlan                       `json:"MealPlan,omitempty"                         protobuf:"bytes,19,opt,name=MealPlan,proto3"`
	MealPlanTask                     *MealPlanTask                   `json:"MealPlanTask,omitempty"                     protobuf:"bytes,20,opt,name=MealPlanTask,proto3"`
	MealPlanEvent                    *MealPlanEvent                  `json:"MealPlanEvent,omitempty"                    protobuf:"bytes,21,opt,name=MealPlanEvent,proto3"`
	Household                        *Household                      `json:"Household,omitempty"                        protobuf:"bytes,22,opt,name=Household,proto3"`
	MealPlanOption                   *MealPlanOption                 `json:"MealPlanOption,omitempty"                   protobuf:"bytes,23,opt,name=MealPlanOption,proto3"`
	ValidIngredientMeasurementUnit   *ValidIngredientMeasurementUnit `json:"ValidIngredientMeasurementUnit,omitempty"   protobuf:"bytes,24,opt,name=ValidIngredientMeasurementUnit,proto3"`
	MealPlanOptionVote               *MealPlanOptionVote             `json:"MealPlanOptionVote,omitempty"               protobuf:"bytes,25,opt,name=MealPlanOptionVote,proto3"`
	ValidPreparationInstrument       *ValidPreparationInstrument     `json:"ValidPreparationInstrument,omitempty"       protobuf:"bytes,26,opt,name=ValidPreparationInstrument,proto3"`
	Webhook                          *Webhook                        `json:"Webhook,omitempty"                          protobuf:"bytes,27,opt,name=Webhook,proto3"`
	ValidIngredientPreparation       *ValidIngredientPreparation     `json:"ValidIngredientPreparation,omitempty"       protobuf:"bytes,28,opt,name=ValidIngredientPreparation,proto3"`
	ValidMeasurementUnit             *ValidMeasurementUnit           `json:"ValidMeasurementUnit,omitempty"             protobuf:"bytes,29,opt,name=ValidMeasurementUnit,proto3"`
	UserMembership                   *HouseholdUserMembership        `json:"UserMembership,omitempty"                   protobuf:"bytes,30,opt,name=UserMembership,proto3"`
	RecipeStepCompletionCondition    *RecipeStepCompletionCondition  `json:"RecipeStepCompletionCondition,omitempty"    protobuf:"bytes,31,opt,name=RecipeStepCompletionCondition,proto3"`
	RecipeStepVessel                 *RecipeStepVessel               `json:"RecipeStepVessel,omitempty"                 protobuf:"bytes,32,opt,name=RecipeStepVessel,proto3"`
	PasswordResetToken               *PasswordResetToken             `json:"PasswordResetToken,omitempty"               protobuf:"bytes,33,opt,name=PasswordResetToken,proto3"`
	ValidIngredientStateIngredient   *ValidIngredientStateIngredient `json:"ValidIngredientStateIngredient,omitempty"   protobuf:"bytes,34,opt,name=ValidIngredientStateIngredient,proto3"`
	ServiceSetting                   *ServiceSetting                 `json:"ServiceSetting,omitempty"                   protobuf:"bytes,35,opt,name=ServiceSetting,proto3"`
	ServiceSettingConfiguration      *ServiceSettingConfiguration    `json:"ServiceSettingConfiguration,omitempty"      protobuf:"bytes,36,opt,name=ServiceSettingConfiguration,proto3"`
	HouseholdInstrumentOwnership     *HouseholdInstrumentOwnership   `json:"HouseholdInstrumentOwnership,omitempty"     protobuf:"bytes,37,opt,name=HouseholdInstrumentOwnership,proto3"`
	RecipeRating                     *RecipeRating                   `json:"RecipeRating,omitempty"                     protobuf:"bytes,38,opt,name=RecipeRating,proto3"`
	ValidVessel                      *ValidVessel                    `json:"ValidVessel,omitempty"                      protobuf:"bytes,39,opt,name=ValidVessel,proto3"`
	ValidPreparationVessel           *ValidPreparationVessel         `json:"ValidPreparationVessel,omitempty"           protobuf:"bytes,40,opt,name=ValidPreparationVessel,proto3"`
	UserNotification                 *UserNotification               `json:"UserNotification,omitempty"                 protobuf:"bytes,41,opt,name=UserNotification,proto3"`
	UserNotificationID               string                          `json:"UserNotificationID,omitempty"               protobuf:"bytes,42,opt,name=UserNotificationID,proto3"`
	RecipeStepVesselID               string                          `json:"RecipeStepVesselID,omitempty"               protobuf:"bytes,43,opt,name=RecipeStepVesselID,proto3"`
	HouseholdInvitationID            string                          `json:"HouseholdInvitationID,omitempty"            protobuf:"bytes,44,opt,name=HouseholdInvitationID,proto3"`
	UserID                           string                          `json:"UserID,omitempty"                           protobuf:"bytes,45,opt,name=UserID,proto3"`
	HouseholdID                      string                          `json:"HouseholdID,omitempty"                      protobuf:"bytes,46,opt,name=HouseholdID,proto3"`
	ValidMeasurementUnitID           string                          `json:"ValidMeasurementUnitID,omitempty"           protobuf:"bytes,47,opt,name=ValidMeasurementUnitID,proto3"`
	ValidPreparationInstrumentID     string                          `json:"ValidPreparationInstrumentID,omitempty"     protobuf:"bytes,48,opt,name=ValidPreparationInstrumentID,proto3"`
	MealPlanOptionVoteID             string                          `json:"MealPlanOptionVoteID,omitempty"             protobuf:"bytes,49,opt,name=MealPlanOptionVoteID,proto3"`
	ValidIngredientMeasurementUnitID string                          `json:"ValidIngredientMeasurementUnitID,omitempty" protobuf:"bytes,50,opt,name=ValidIngredientMeasurementUnitID,proto3"`
	MealPlanOptionID                 string                          `json:"MealPlanOptionID,omitempty"                 protobuf:"bytes,51,opt,name=MealPlanOptionID,proto3"`
	MealPlanID                       string                          `json:"MealPlanID,omitempty"                       protobuf:"bytes,52,opt,name=MealPlanID,proto3"`
	MealPlanTaskID                   string                          `json:"MealPlanTaskID,omitempty"                   protobuf:"bytes,53,opt,name=MealPlanTaskID,proto3"`
	RecipeStepID                     string                          `json:"RecipeStepID,omitempty"                     protobuf:"bytes,54,opt,name=RecipeStepID,proto3"`
	RecipePrepTaskID                 string                          `json:"RecipePrepTaskID,omitempty"                 protobuf:"bytes,55,opt,name=RecipePrepTaskID,proto3"`
	RecipeID                         string                          `json:"RecipeID,omitempty"                         protobuf:"bytes,56,opt,name=RecipeID,proto3"`
	RecipeMediaID                    string                          `json:"RecipeMediaID,omitempty"                    protobuf:"bytes,57,opt,name=RecipeMediaID,proto3"`
	MealID                           string                          `json:"MealID,omitempty"                           protobuf:"bytes,58,opt,name=MealID,proto3"`
	MealPlanGroceryListItemID        string                          `json:"MealPlanGroceryListItemID,omitempty"        protobuf:"bytes,59,opt,name=MealPlanGroceryListItemID,proto3"`
	EventType                        string                          `json:"EventType,omitempty"                        protobuf:"bytes,60,opt,name=EventType,proto3"`
	ValidIngredientStateIngredientID string                          `json:"ValidIngredientStateIngredientID,omitempty" protobuf:"bytes,61,opt,name=ValidIngredientStateIngredientID,proto3"`
	ValidMeasurementUnitConversionID string                          `json:"ValidMeasurementUnitConversionID,omitempty" protobuf:"bytes,62,opt,name=ValidMeasurementUnitConversionID,proto3"`
	ValidIngredientStateID           string                          `json:"ValidIngredientStateID,omitempty"           protobuf:"bytes,63,opt,name=ValidIngredientStateID,proto3"`
	ValidIngredientGroupID           string                          `json:"ValidIngredientGroupID,omitempty"           protobuf:"bytes,64,opt,name=ValidIngredientGroupID,proto3"`
	MealPlanEventID                  string                          `json:"MealPlanEventID,omitempty"                  protobuf:"bytes,65,opt,name=MealPlanEventID,proto3"`
	EmailVerificationToken           string                          `json:"EmailVerificationToken,omitempty"           protobuf:"bytes,66,opt,name=EmailVerificationToken,proto3"`
	UserIngredientPreferenceID       string                          `json:"UserIngredientPreferenceID,omitempty"       protobuf:"bytes,67,opt,name=UserIngredientPreferenceID,proto3"`
	HouseholdInstrumentOwnershipID   string                          `json:"HouseholdInstrumentOwnershipID,omitempty"   protobuf:"bytes,68,opt,name=HouseholdInstrumentOwnershipID,proto3"`
	RecipeRatingID                   string                          `json:"RecipeRatingID,omitempty"                   protobuf:"bytes,69,opt,name=RecipeRatingID,proto3"`
	OAuth2ClientID                   string                          `json:"OAuth2ClientID,omitempty"                   protobuf:"bytes,70,opt,name=OAuth2ClientID,proto3"`
	UserIngredientPreferences        []*UserIngredientPreference     `json:"UserIngredientPreferences,omitempty"        protobuf:"bytes,71,rep,name=UserIngredientPreferences,proto3"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *DataChangeMessage) Reset() {
	*x = DataChangeMessage{}
	mi := &file_messages_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataChangeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataChangeMessage) ProtoMessage() {}

func (x *DataChangeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataChangeMessage.ProtoReflect.Descriptor instead.
func (*DataChangeMessage) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{10}
}

func (x *DataChangeMessage) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *DataChangeMessage) GetHouseholdInvitation() *HouseholdInvitation {
	if x != nil {
		return x.HouseholdInvitation
	}
	return nil
}

func (x *DataChangeMessage) GetValidMeasurementUnitConversion() *ValidMeasurementUnitConversion {
	if x != nil {
		return x.ValidMeasurementUnitConversion
	}
	return nil
}

func (x *DataChangeMessage) GetValidInstrument() *ValidInstrument {
	if x != nil {
		return x.ValidInstrument
	}
	return nil
}

func (x *DataChangeMessage) GetValidIngredient() *ValidIngredient {
	if x != nil {
		return x.ValidIngredient
	}
	return nil
}

func (x *DataChangeMessage) GetValidIngredientGroup() *ValidIngredientGroup {
	if x != nil {
		return x.ValidIngredientGroup
	}
	return nil
}

func (x *DataChangeMessage) GetValidPreparation() *ValidPreparation {
	if x != nil {
		return x.ValidPreparation
	}
	return nil
}

func (x *DataChangeMessage) GetValidIngredientState() *ValidIngredientState {
	if x != nil {
		return x.ValidIngredientState
	}
	return nil
}

func (x *DataChangeMessage) GetMealPlanGroceryListItem() *MealPlanGroceryListItem {
	if x != nil {
		return x.MealPlanGroceryListItem
	}
	return nil
}

func (x *DataChangeMessage) GetMeal() *Meal {
	if x != nil {
		return x.Meal
	}
	return nil
}

func (x *DataChangeMessage) GetContext() map[string]*anypb.Any {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *DataChangeMessage) GetRecipe() *Recipe {
	if x != nil {
		return x.Recipe
	}
	return nil
}

func (x *DataChangeMessage) GetRecipePrepTask() *RecipePrepTask {
	if x != nil {
		return x.RecipePrepTask
	}
	return nil
}

func (x *DataChangeMessage) GetRecipePrepTaskStep() *RecipePrepTaskStep {
	if x != nil {
		return x.RecipePrepTaskStep
	}
	return nil
}

func (x *DataChangeMessage) GetRecipeStep() *RecipeStep {
	if x != nil {
		return x.RecipeStep
	}
	return nil
}

func (x *DataChangeMessage) GetRecipeStepProduct() *RecipeStepProduct {
	if x != nil {
		return x.RecipeStepProduct
	}
	return nil
}

func (x *DataChangeMessage) GetRecipeStepInstrument() *RecipeStepInstrument {
	if x != nil {
		return x.RecipeStepInstrument
	}
	return nil
}

func (x *DataChangeMessage) GetRecipeStepIngredient() *RecipeStepIngredient {
	if x != nil {
		return x.RecipeStepIngredient
	}
	return nil
}

func (x *DataChangeMessage) GetMealPlan() *MealPlan {
	if x != nil {
		return x.MealPlan
	}
	return nil
}

func (x *DataChangeMessage) GetMealPlanTask() *MealPlanTask {
	if x != nil {
		return x.MealPlanTask
	}
	return nil
}

func (x *DataChangeMessage) GetMealPlanEvent() *MealPlanEvent {
	if x != nil {
		return x.MealPlanEvent
	}
	return nil
}

func (x *DataChangeMessage) GetHousehold() *Household {
	if x != nil {
		return x.Household
	}
	return nil
}

func (x *DataChangeMessage) GetMealPlanOption() *MealPlanOption {
	if x != nil {
		return x.MealPlanOption
	}
	return nil
}

func (x *DataChangeMessage) GetValidIngredientMeasurementUnit() *ValidIngredientMeasurementUnit {
	if x != nil {
		return x.ValidIngredientMeasurementUnit
	}
	return nil
}

func (x *DataChangeMessage) GetMealPlanOptionVote() *MealPlanOptionVote {
	if x != nil {
		return x.MealPlanOptionVote
	}
	return nil
}

func (x *DataChangeMessage) GetValidPreparationInstrument() *ValidPreparationInstrument {
	if x != nil {
		return x.ValidPreparationInstrument
	}
	return nil
}

func (x *DataChangeMessage) GetWebhook() *Webhook {
	if x != nil {
		return x.Webhook
	}
	return nil
}

func (x *DataChangeMessage) GetValidIngredientPreparation() *ValidIngredientPreparation {
	if x != nil {
		return x.ValidIngredientPreparation
	}
	return nil
}

func (x *DataChangeMessage) GetValidMeasurementUnit() *ValidMeasurementUnit {
	if x != nil {
		return x.ValidMeasurementUnit
	}
	return nil
}

func (x *DataChangeMessage) GetUserMembership() *HouseholdUserMembership {
	if x != nil {
		return x.UserMembership
	}
	return nil
}

func (x *DataChangeMessage) GetRecipeStepCompletionCondition() *RecipeStepCompletionCondition {
	if x != nil {
		return x.RecipeStepCompletionCondition
	}
	return nil
}

func (x *DataChangeMessage) GetRecipeStepVessel() *RecipeStepVessel {
	if x != nil {
		return x.RecipeStepVessel
	}
	return nil
}

func (x *DataChangeMessage) GetPasswordResetToken() *PasswordResetToken {
	if x != nil {
		return x.PasswordResetToken
	}
	return nil
}

func (x *DataChangeMessage) GetValidIngredientStateIngredient() *ValidIngredientStateIngredient {
	if x != nil {
		return x.ValidIngredientStateIngredient
	}
	return nil
}

func (x *DataChangeMessage) GetServiceSetting() *ServiceSetting {
	if x != nil {
		return x.ServiceSetting
	}
	return nil
}

func (x *DataChangeMessage) GetServiceSettingConfiguration() *ServiceSettingConfiguration {
	if x != nil {
		return x.ServiceSettingConfiguration
	}
	return nil
}

func (x *DataChangeMessage) GetHouseholdInstrumentOwnership() *HouseholdInstrumentOwnership {
	if x != nil {
		return x.HouseholdInstrumentOwnership
	}
	return nil
}

func (x *DataChangeMessage) GetRecipeRating() *RecipeRating {
	if x != nil {
		return x.RecipeRating
	}
	return nil
}

func (x *DataChangeMessage) GetValidVessel() *ValidVessel {
	if x != nil {
		return x.ValidVessel
	}
	return nil
}

func (x *DataChangeMessage) GetValidPreparationVessel() *ValidPreparationVessel {
	if x != nil {
		return x.ValidPreparationVessel
	}
	return nil
}

func (x *DataChangeMessage) GetUserNotification() *UserNotification {
	if x != nil {
		return x.UserNotification
	}
	return nil
}

func (x *DataChangeMessage) GetUserNotificationID() string {
	if x != nil {
		return x.UserNotificationID
	}
	return ""
}

func (x *DataChangeMessage) GetRecipeStepVesselID() string {
	if x != nil {
		return x.RecipeStepVesselID
	}
	return ""
}

func (x *DataChangeMessage) GetHouseholdInvitationID() string {
	if x != nil {
		return x.HouseholdInvitationID
	}
	return ""
}

func (x *DataChangeMessage) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *DataChangeMessage) GetHouseholdID() string {
	if x != nil {
		return x.HouseholdID
	}
	return ""
}

func (x *DataChangeMessage) GetValidMeasurementUnitID() string {
	if x != nil {
		return x.ValidMeasurementUnitID
	}
	return ""
}

func (x *DataChangeMessage) GetValidPreparationInstrumentID() string {
	if x != nil {
		return x.ValidPreparationInstrumentID
	}
	return ""
}

func (x *DataChangeMessage) GetMealPlanOptionVoteID() string {
	if x != nil {
		return x.MealPlanOptionVoteID
	}
	return ""
}

func (x *DataChangeMessage) GetValidIngredientMeasurementUnitID() string {
	if x != nil {
		return x.ValidIngredientMeasurementUnitID
	}
	return ""
}

func (x *DataChangeMessage) GetMealPlanOptionID() string {
	if x != nil {
		return x.MealPlanOptionID
	}
	return ""
}

func (x *DataChangeMessage) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *DataChangeMessage) GetMealPlanTaskID() string {
	if x != nil {
		return x.MealPlanTaskID
	}
	return ""
}

func (x *DataChangeMessage) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *DataChangeMessage) GetRecipePrepTaskID() string {
	if x != nil {
		return x.RecipePrepTaskID
	}
	return ""
}

func (x *DataChangeMessage) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *DataChangeMessage) GetRecipeMediaID() string {
	if x != nil {
		return x.RecipeMediaID
	}
	return ""
}

func (x *DataChangeMessage) GetMealID() string {
	if x != nil {
		return x.MealID
	}
	return ""
}

func (x *DataChangeMessage) GetMealPlanGroceryListItemID() string {
	if x != nil {
		return x.MealPlanGroceryListItemID
	}
	return ""
}

func (x *DataChangeMessage) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *DataChangeMessage) GetValidIngredientStateIngredientID() string {
	if x != nil {
		return x.ValidIngredientStateIngredientID
	}
	return ""
}

func (x *DataChangeMessage) GetValidMeasurementUnitConversionID() string {
	if x != nil {
		return x.ValidMeasurementUnitConversionID
	}
	return ""
}

func (x *DataChangeMessage) GetValidIngredientStateID() string {
	if x != nil {
		return x.ValidIngredientStateID
	}
	return ""
}

func (x *DataChangeMessage) GetValidIngredientGroupID() string {
	if x != nil {
		return x.ValidIngredientGroupID
	}
	return ""
}

func (x *DataChangeMessage) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

func (x *DataChangeMessage) GetEmailVerificationToken() string {
	if x != nil {
		return x.EmailVerificationToken
	}
	return ""
}

func (x *DataChangeMessage) GetUserIngredientPreferenceID() string {
	if x != nil {
		return x.UserIngredientPreferenceID
	}
	return ""
}

func (x *DataChangeMessage) GetHouseholdInstrumentOwnershipID() string {
	if x != nil {
		return x.HouseholdInstrumentOwnershipID
	}
	return ""
}

func (x *DataChangeMessage) GetRecipeRatingID() string {
	if x != nil {
		return x.RecipeRatingID
	}
	return ""
}

func (x *DataChangeMessage) GetOAuth2ClientID() string {
	if x != nil {
		return x.OAuth2ClientID
	}
	return ""
}

func (x *DataChangeMessage) GetUserIngredientPreferences() []*UserIngredientPreference {
	if x != nil {
		return x.UserIngredientPreferences
	}
	return nil
}

type DataDeletionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
	Successful    bool `json:"Successful,omitempty" protobuf:"varint,1,opt,name=Successful,proto3"`
}

func (x *DataDeletionResponse) Reset() {
	*x = DataDeletionResponse{}
	mi := &file_messages_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataDeletionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataDeletionResponse) ProtoMessage() {}

func (x *DataDeletionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataDeletionResponse.ProtoReflect.Descriptor instead.
func (*DataDeletionResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{11}
}

func (x *DataDeletionResponse) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

type EatingUserDataCollection struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// map[string][]HouseholdInstrumentOwnership HouseholdInstrumentOwnerships = 1;
	// map[string][]MealPlan MealPlans = 2;
	ReportID                  string                      `json:"ReportID,omitempty"                  protobuf:"bytes,3,opt,name=ReportID,proto3"`
	RecipeRatings             []*RecipeRating             `json:"RecipeRatings,omitempty"             protobuf:"bytes,4,rep,name=RecipeRatings,proto3"`
	Recipes                   []*Recipe                   `json:"Recipes,omitempty"                   protobuf:"bytes,5,rep,name=Recipes,proto3"`
	Meals                     []*Meal                     `json:"Meals,omitempty"                     protobuf:"bytes,6,rep,name=Meals,proto3"`
	UserIngredientPreferences []*UserIngredientPreference `json:"UserIngredientPreferences,omitempty" protobuf:"bytes,7,rep,name=UserIngredientPreferences,proto3"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *EatingUserDataCollection) Reset() {
	*x = EatingUserDataCollection{}
	mi := &file_messages_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EatingUserDataCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EatingUserDataCollection) ProtoMessage() {}

func (x *EatingUserDataCollection) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EatingUserDataCollection.ProtoReflect.Descriptor instead.
func (*EatingUserDataCollection) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{12}
}

func (x *EatingUserDataCollection) GetReportID() string {
	if x != nil {
		return x.ReportID
	}
	return ""
}

func (x *EatingUserDataCollection) GetRecipeRatings() []*RecipeRating {
	if x != nil {
		return x.RecipeRatings
	}
	return nil
}

func (x *EatingUserDataCollection) GetRecipes() []*Recipe {
	if x != nil {
		return x.Recipes
	}
	return nil
}

func (x *EatingUserDataCollection) GetMeals() []*Meal {
	if x != nil {
		return x.Meals
	}
	return nil
}

func (x *EatingUserDataCollection) GetUserIngredientPreferences() []*UserIngredientPreference {
	if x != nil {
		return x.UserIngredientPreferences
	}
	return nil
}

type EmailAddressVerificationRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `json:"Token,omitempty" protobuf:"bytes,1,opt,name=Token,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmailAddressVerificationRequestInput) Reset() {
	*x = EmailAddressVerificationRequestInput{}
	mi := &file_messages_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmailAddressVerificationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailAddressVerificationRequestInput) ProtoMessage() {}

func (x *EmailAddressVerificationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailAddressVerificationRequestInput.ProtoReflect.Descriptor instead.
func (*EmailAddressVerificationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{13}
}

func (x *EmailAddressVerificationRequestInput) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type FinalizeMealPlansRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
	ReturnCount   bool `json:"ReturnCount,omitempty" protobuf:"varint,1,opt,name=ReturnCount,proto3"`
}

func (x *FinalizeMealPlansRequest) Reset() {
	*x = FinalizeMealPlansRequest{}
	mi := &file_messages_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeMealPlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeMealPlansRequest) ProtoMessage() {}

func (x *FinalizeMealPlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeMealPlansRequest.ProtoReflect.Descriptor instead.
func (*FinalizeMealPlansRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{14}
}

func (x *FinalizeMealPlansRequest) GetReturnCount() bool {
	if x != nil {
		return x.ReturnCount
	}
	return false
}

type FinalizeMealPlansResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	Count         int64 `json:"Count,omitempty" protobuf:"varint,1,opt,name=Count,proto3"`
	sizeCache     protoimpl.SizeCache
}

func (x *FinalizeMealPlansResponse) Reset() {
	*x = FinalizeMealPlansResponse{}
	mi := &file_messages_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeMealPlansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeMealPlansResponse) ProtoMessage() {}

func (x *FinalizeMealPlansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeMealPlansResponse.ProtoReflect.Descriptor instead.
func (*FinalizeMealPlansResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{15}
}

func (x *FinalizeMealPlansResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type FinalizedMealPlanDatabaseResult struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	MealPlanID       string                 `json:"MealPlanID,omitempty"       protobuf:"bytes,1,opt,name=MealPlanID,proto3"`
	MealPlanEventID  string                 `json:"MealPlanEventID,omitempty"  protobuf:"bytes,2,opt,name=MealPlanEventID,proto3"`
	MealPlanOptionID string                 `json:"MealPlanOptionID,omitempty" protobuf:"bytes,3,opt,name=MealPlanOptionID,proto3"`
	MealID           string                 `json:"MealID,omitempty"           protobuf:"bytes,4,opt,name=MealID,proto3"`
	RecipeIDs        []string               `json:"RecipeIDs,omitempty"        protobuf:"bytes,5,rep,name=RecipeIDs,proto3"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *FinalizedMealPlanDatabaseResult) Reset() {
	*x = FinalizedMealPlanDatabaseResult{}
	mi := &file_messages_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizedMealPlanDatabaseResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizedMealPlanDatabaseResult) ProtoMessage() {}

func (x *FinalizedMealPlanDatabaseResult) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizedMealPlanDatabaseResult.ProtoReflect.Descriptor instead.
func (*FinalizedMealPlanDatabaseResult) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{16}
}

func (x *FinalizedMealPlanDatabaseResult) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *FinalizedMealPlanDatabaseResult) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

func (x *FinalizedMealPlanDatabaseResult) GetMealPlanOptionID() string {
	if x != nil {
		return x.MealPlanOptionID
	}
	return ""
}

func (x *FinalizedMealPlanDatabaseResult) GetMealID() string {
	if x != nil {
		return x.MealID
	}
	return ""
}

func (x *FinalizedMealPlanDatabaseResult) GetRecipeIDs() []string {
	if x != nil {
		return x.RecipeIDs
	}
	return nil
}

type Float32RangeWithOptionalMax struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	Max           float32 `json:"Max,omitempty" protobuf:"fixed32,1,opt,name=Max,proto3"`
	Min           float32 `json:"Min,omitempty" protobuf:"fixed32,2,opt,name=Min,proto3"`
	sizeCache     protoimpl.SizeCache
}

func (x *Float32RangeWithOptionalMax) Reset() {
	*x = Float32RangeWithOptionalMax{}
	mi := &file_messages_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Float32RangeWithOptionalMax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Float32RangeWithOptionalMax) ProtoMessage() {}

func (x *Float32RangeWithOptionalMax) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Float32RangeWithOptionalMax.ProtoReflect.Descriptor instead.
func (*Float32RangeWithOptionalMax) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{17}
}

func (x *Float32RangeWithOptionalMax) GetMax() float32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *Float32RangeWithOptionalMax) GetMin() float32 {
	if x != nil {
		return x.Min
	}
	return 0
}

type Float32RangeWithOptionalMaxUpdateRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	Min           float32 `json:"Min,omitempty" protobuf:"fixed32,1,opt,name=Min,proto3"`
	Max           float32 `json:"Max,omitempty" protobuf:"fixed32,2,opt,name=Max,proto3"`
	sizeCache     protoimpl.SizeCache
}

func (x *Float32RangeWithOptionalMaxUpdateRequestInput) Reset() {
	*x = Float32RangeWithOptionalMaxUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Float32RangeWithOptionalMaxUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Float32RangeWithOptionalMaxUpdateRequestInput) ProtoMessage() {}

func (x *Float32RangeWithOptionalMaxUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Float32RangeWithOptionalMaxUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*Float32RangeWithOptionalMaxUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{18}
}

func (x *Float32RangeWithOptionalMaxUpdateRequestInput) GetMin() float32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Float32RangeWithOptionalMaxUpdateRequestInput) GetMax() float32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type Household struct {
	ArchivedAt                 *timestamppb.Timestamp             `json:"ArchivedAt,omitempty"                 protobuf:"bytes,4,opt,name=ArchivedAt,proto3"`
	CreatedAt                  *timestamppb.Timestamp             `json:"CreatedAt,omitempty"                  protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	state                      protoimpl.MessageState             `protogen:"open.v1"`
	LastUpdatedAt              *timestamppb.Timestamp             `json:"LastUpdatedAt,omitempty"              protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3"`
	PaymentProcessorCustomerID string                             `json:"PaymentProcessorCustomerID,omitempty" protobuf:"bytes,15,opt,name=PaymentProcessorCustomerID,proto3"`
	BillingStatus              string                             `json:"BillingStatus,omitempty"              protobuf:"bytes,13,opt,name=BillingStatus,proto3"`
	WebhookEncryptionKey       string                             `json:"WebhookEncryptionKey,omitempty"       protobuf:"bytes,19,opt,name=WebhookEncryptionKey,proto3"`
	State                      string                             `json:"State,omitempty"                      protobuf:"bytes,7,opt,name=State,proto3"`
	ContactPhone               string                             `json:"ContactPhone,omitempty"               protobuf:"bytes,8,opt,name=ContactPhone,proto3"`
	City                       string                             `json:"City,omitempty"                       protobuf:"bytes,9,opt,name=City,proto3"`
	AddressLine1               string                             `json:"AddressLine1,omitempty"               protobuf:"bytes,10,opt,name=AddressLine1,proto3"`
	ZipCode                    string                             `json:"ZipCode,omitempty"                    protobuf:"bytes,11,opt,name=ZipCode,proto3"`
	Country                    string                             `json:"Country,omitempty"                    protobuf:"bytes,12,opt,name=Country,proto3"`
	Name                       string                             `json:"Name,omitempty"                       protobuf:"bytes,18,opt,name=Name,proto3"`
	AddressLine2               string                             `json:"AddressLine2,omitempty"               protobuf:"bytes,14,opt,name=AddressLine2,proto3"`
	SubscriptionPlanID         string                             `json:"SubscriptionPlanID,omitempty"         protobuf:"bytes,2,opt,name=SubscriptionPlanID,proto3"`
	BelongsToUser              string                             `json:"BelongsToUser,omitempty"              protobuf:"bytes,16,opt,name=BelongsToUser,proto3"`
	ID                         string                             `json:"ID,omitempty"                         protobuf:"bytes,17,opt,name=ID,proto3"`
	Members                    []*HouseholdUserMembershipWithUser `json:"Members,omitempty"                    protobuf:"bytes,20,rep,name=Members,proto3"`
	unknownFields              protoimpl.UnknownFields
	Longitude                  float32 `json:"Longitude,omitempty" protobuf:"fixed32,5,opt,name=Longitude,proto3"`
	Latitude                   float32 `json:"Latitude,omitempty"  protobuf:"fixed32,6,opt,name=Latitude,proto3"`
	sizeCache                  protoimpl.SizeCache
}

func (x *Household) Reset() {
	*x = Household{}
	mi := &file_messages_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Household) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Household) ProtoMessage() {}

func (x *Household) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Household.ProtoReflect.Descriptor instead.
func (*Household) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{19}
}

func (x *Household) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Household) GetSubscriptionPlanID() string {
	if x != nil {
		return x.SubscriptionPlanID
	}
	return ""
}

func (x *Household) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *Household) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *Household) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Household) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Household) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Household) GetContactPhone() string {
	if x != nil {
		return x.ContactPhone
	}
	return ""
}

func (x *Household) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Household) GetAddressLine1() string {
	if x != nil {
		return x.AddressLine1
	}
	return ""
}

func (x *Household) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *Household) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Household) GetBillingStatus() string {
	if x != nil {
		return x.BillingStatus
	}
	return ""
}

func (x *Household) GetAddressLine2() string {
	if x != nil {
		return x.AddressLine2
	}
	return ""
}

func (x *Household) GetPaymentProcessorCustomerID() string {
	if x != nil {
		return x.PaymentProcessorCustomerID
	}
	return ""
}

func (x *Household) GetBelongsToUser() string {
	if x != nil {
		return x.BelongsToUser
	}
	return ""
}

func (x *Household) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Household) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Household) GetWebhookEncryptionKey() string {
	if x != nil {
		return x.WebhookEncryptionKey
	}
	return ""
}

func (x *Household) GetMembers() []*HouseholdUserMembershipWithUser {
	if x != nil {
		return x.Members
	}
	return nil
}

type HouseholdCreationRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AddressLine2  string                 `json:"AddressLine2,omitempty" protobuf:"bytes,6,opt,name=AddressLine2,proto3"`
	Name          string                 `json:"Name,omitempty"         protobuf:"bytes,3,opt,name=Name,proto3"`
	ContactPhone  string                 `json:"ContactPhone,omitempty" protobuf:"bytes,4,opt,name=ContactPhone,proto3"`
	AddressLine1  string                 `json:"AddressLine1,omitempty" protobuf:"bytes,5,opt,name=AddressLine1,proto3"`
	City          string                 `json:"City,omitempty"         protobuf:"bytes,7,opt,name=City,proto3"`
	State         string                 `json:"State,omitempty"        protobuf:"bytes,8,opt,name=State,proto3"`
	ZipCode       string                 `json:"ZipCode,omitempty"      protobuf:"bytes,9,opt,name=ZipCode,proto3"`
	Country       string                 `json:"Country,omitempty"      protobuf:"bytes,10,opt,name=Country,proto3"`
	unknownFields protoimpl.UnknownFields
	Longitude     float32 `json:"Longitude,omitempty" protobuf:"fixed32,2,opt,name=Longitude,proto3"`
	Latitude      float32 `json:"Latitude,omitempty"  protobuf:"fixed32,1,opt,name=Latitude,proto3"`
	sizeCache     protoimpl.SizeCache
}

func (x *HouseholdCreationRequestInput) Reset() {
	*x = HouseholdCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HouseholdCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HouseholdCreationRequestInput) ProtoMessage() {}

func (x *HouseholdCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HouseholdCreationRequestInput.ProtoReflect.Descriptor instead.
func (*HouseholdCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{20}
}

func (x *HouseholdCreationRequestInput) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *HouseholdCreationRequestInput) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *HouseholdCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HouseholdCreationRequestInput) GetContactPhone() string {
	if x != nil {
		return x.ContactPhone
	}
	return ""
}

func (x *HouseholdCreationRequestInput) GetAddressLine1() string {
	if x != nil {
		return x.AddressLine1
	}
	return ""
}

func (x *HouseholdCreationRequestInput) GetAddressLine2() string {
	if x != nil {
		return x.AddressLine2
	}
	return ""
}

func (x *HouseholdCreationRequestInput) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *HouseholdCreationRequestInput) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *HouseholdCreationRequestInput) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *HouseholdCreationRequestInput) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type HouseholdInstrumentOwnership struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt          *timestamppb.Timestamp `json:"CreatedAt,omitempty"          protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	ArchivedAt         *timestamppb.Timestamp `json:"ArchivedAt,omitempty"         protobuf:"bytes,2,opt,name=ArchivedAt,proto3"`
	LastUpdatedAt      *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty"      protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3"`
	Instrument         *ValidInstrument       `json:"Instrument,omitempty"         protobuf:"bytes,7,opt,name=Instrument,proto3"`
	ID                 string                 `json:"ID,omitempty"                 protobuf:"bytes,4,opt,name=ID,proto3"`
	Notes              string                 `json:"Notes,omitempty"              protobuf:"bytes,5,opt,name=Notes,proto3"`
	BelongsToHousehold string                 `json:"BelongsToHousehold,omitempty" protobuf:"bytes,6,opt,name=BelongsToHousehold,proto3"`
	unknownFields      protoimpl.UnknownFields
	Quantity           uint32 `json:"Quantity,omitempty" protobuf:"varint,8,opt,name=Quantity,proto3"`
	sizeCache          protoimpl.SizeCache
}

func (x *HouseholdInstrumentOwnership) Reset() {
	*x = HouseholdInstrumentOwnership{}
	mi := &file_messages_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HouseholdInstrumentOwnership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HouseholdInstrumentOwnership) ProtoMessage() {}

func (x *HouseholdInstrumentOwnership) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HouseholdInstrumentOwnership.ProtoReflect.Descriptor instead.
func (*HouseholdInstrumentOwnership) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{21}
}

func (x *HouseholdInstrumentOwnership) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *HouseholdInstrumentOwnership) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *HouseholdInstrumentOwnership) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *HouseholdInstrumentOwnership) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *HouseholdInstrumentOwnership) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *HouseholdInstrumentOwnership) GetBelongsToHousehold() string {
	if x != nil {
		return x.BelongsToHousehold
	}
	return ""
}

func (x *HouseholdInstrumentOwnership) GetInstrument() *ValidInstrument {
	if x != nil {
		return x.Instrument
	}
	return nil
}

func (x *HouseholdInstrumentOwnership) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type HouseholdInstrumentOwnershipCreationRequestInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Notes              string                 `json:"Notes,omitempty"              protobuf:"bytes,1,opt,name=Notes,proto3"`
	ValidInstrumentID  string                 `json:"ValidInstrumentID,omitempty"  protobuf:"bytes,2,opt,name=ValidInstrumentID,proto3"`
	BelongsToHousehold string                 `json:"BelongsToHousehold,omitempty" protobuf:"bytes,3,opt,name=BelongsToHousehold,proto3"`
	unknownFields      protoimpl.UnknownFields
	Quantity           uint32 `json:"Quantity,omitempty" protobuf:"varint,4,opt,name=Quantity,proto3"`
	sizeCache          protoimpl.SizeCache
}

func (x *HouseholdInstrumentOwnershipCreationRequestInput) Reset() {
	*x = HouseholdInstrumentOwnershipCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HouseholdInstrumentOwnershipCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HouseholdInstrumentOwnershipCreationRequestInput) ProtoMessage() {}

func (x *HouseholdInstrumentOwnershipCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HouseholdInstrumentOwnershipCreationRequestInput.ProtoReflect.Descriptor instead.
func (*HouseholdInstrumentOwnershipCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{22}
}

func (x *HouseholdInstrumentOwnershipCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *HouseholdInstrumentOwnershipCreationRequestInput) GetValidInstrumentID() string {
	if x != nil {
		return x.ValidInstrumentID
	}
	return ""
}

func (x *HouseholdInstrumentOwnershipCreationRequestInput) GetBelongsToHousehold() string {
	if x != nil {
		return x.BelongsToHousehold
	}
	return ""
}

func (x *HouseholdInstrumentOwnershipCreationRequestInput) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type HouseholdInstrumentOwnershipUpdateRequestInput struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Notes             string                 `json:"Notes,omitempty"             protobuf:"bytes,1,opt,name=Notes,proto3"`
	ValidInstrumentID string                 `json:"ValidInstrumentID,omitempty" protobuf:"bytes,3,opt,name=ValidInstrumentID,proto3"`
	unknownFields     protoimpl.UnknownFields
	Quantity          uint32 `json:"Quantity,omitempty" protobuf:"varint,2,opt,name=Quantity,proto3"`
	sizeCache         protoimpl.SizeCache
}

func (x *HouseholdInstrumentOwnershipUpdateRequestInput) Reset() {
	*x = HouseholdInstrumentOwnershipUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HouseholdInstrumentOwnershipUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HouseholdInstrumentOwnershipUpdateRequestInput) ProtoMessage() {}

func (x *HouseholdInstrumentOwnershipUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HouseholdInstrumentOwnershipUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*HouseholdInstrumentOwnershipUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{23}
}

func (x *HouseholdInstrumentOwnershipUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *HouseholdInstrumentOwnershipUpdateRequestInput) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *HouseholdInstrumentOwnershipUpdateRequestInput) GetValidInstrumentID() string {
	if x != nil {
		return x.ValidInstrumentID
	}
	return ""
}

type HouseholdInvitation struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt            *timestamppb.Timestamp `json:"CreatedAt,omitempty"            protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	LastUpdatedAt        *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty"        protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3"`
	ArchivedAt           *timestamppb.Timestamp `json:"ArchivedAt,omitempty"           protobuf:"bytes,3,opt,name=ArchivedAt,proto3"`
	ToUser               string                 `json:"ToUser,omitempty"               protobuf:"bytes,4,opt,name=ToUser,proto3"`
	Status               string                 `json:"Status,omitempty"               protobuf:"bytes,5,opt,name=Status,proto3"`
	ToEmail              string                 `json:"ToEmail,omitempty"              protobuf:"bytes,6,opt,name=ToEmail,proto3"`
	StatusNote           string                 `json:"StatusNote,omitempty"           protobuf:"bytes,7,opt,name=StatusNote,proto3"`
	Token                string                 `json:"Token,omitempty"                protobuf:"bytes,8,opt,name=Token,proto3"`
	ID                   string                 `json:"ID,omitempty"                   protobuf:"bytes,9,opt,name=ID,proto3"`
	Note                 string                 `json:"Note,omitempty"                 protobuf:"bytes,10,opt,name=Note,proto3"`
	ToName               string                 `json:"ToName,omitempty"               protobuf:"bytes,11,opt,name=ToName,proto3"`
	ExpiresAt            *timestamppb.Timestamp `json:"ExpiresAt,omitempty"            protobuf:"bytes,12,opt,name=ExpiresAt,proto3"`
	DestinationHousehold *Household             `json:"DestinationHousehold,omitempty" protobuf:"bytes,13,opt,name=DestinationHousehold,proto3"`
	FromUser             *User                  `json:"FromUser,omitempty"             protobuf:"bytes,14,opt,name=FromUser,proto3"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *HouseholdInvitation) Reset() {
	*x = HouseholdInvitation{}
	mi := &file_messages_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HouseholdInvitation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HouseholdInvitation) ProtoMessage() {}

func (x *HouseholdInvitation) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HouseholdInvitation.ProtoReflect.Descriptor instead.
func (*HouseholdInvitation) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{24}
}

func (x *HouseholdInvitation) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *HouseholdInvitation) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *HouseholdInvitation) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *HouseholdInvitation) GetToUser() string {
	if x != nil {
		return x.ToUser
	}
	return ""
}

func (x *HouseholdInvitation) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HouseholdInvitation) GetToEmail() string {
	if x != nil {
		return x.ToEmail
	}
	return ""
}

func (x *HouseholdInvitation) GetStatusNote() string {
	if x != nil {
		return x.StatusNote
	}
	return ""
}

func (x *HouseholdInvitation) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *HouseholdInvitation) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *HouseholdInvitation) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *HouseholdInvitation) GetToName() string {
	if x != nil {
		return x.ToName
	}
	return ""
}

func (x *HouseholdInvitation) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *HouseholdInvitation) GetDestinationHousehold() *Household {
	if x != nil {
		return x.DestinationHousehold
	}
	return nil
}

func (x *HouseholdInvitation) GetFromUser() *User {
	if x != nil {
		return x.FromUser
	}
	return nil
}

type HouseholdInvitationCreationRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ExpiresAt     *timestamppb.Timestamp `json:"ExpiresAt,omitempty" protobuf:"bytes,1,opt,name=ExpiresAt,proto3"`
	Note          string                 `json:"Note,omitempty"      protobuf:"bytes,2,opt,name=Note,proto3"`
	ToEmail       string                 `json:"ToEmail,omitempty"   protobuf:"bytes,3,opt,name=ToEmail,proto3"`
	ToName        string                 `json:"ToName,omitempty"    protobuf:"bytes,4,opt,name=ToName,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HouseholdInvitationCreationRequestInput) Reset() {
	*x = HouseholdInvitationCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HouseholdInvitationCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HouseholdInvitationCreationRequestInput) ProtoMessage() {}

func (x *HouseholdInvitationCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HouseholdInvitationCreationRequestInput.ProtoReflect.Descriptor instead.
func (*HouseholdInvitationCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{25}
}

func (x *HouseholdInvitationCreationRequestInput) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *HouseholdInvitationCreationRequestInput) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *HouseholdInvitationCreationRequestInput) GetToEmail() string {
	if x != nil {
		return x.ToEmail
	}
	return ""
}

func (x *HouseholdInvitationCreationRequestInput) GetToName() string {
	if x != nil {
		return x.ToName
	}
	return ""
}

type HouseholdInvitationUpdateRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `json:"Token,omitempty" protobuf:"bytes,1,opt,name=Token,proto3"`
	Note          string                 `json:"Note,omitempty"  protobuf:"bytes,2,opt,name=Note,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HouseholdInvitationUpdateRequestInput) Reset() {
	*x = HouseholdInvitationUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HouseholdInvitationUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HouseholdInvitationUpdateRequestInput) ProtoMessage() {}

func (x *HouseholdInvitationUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HouseholdInvitationUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*HouseholdInvitationUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{26}
}

func (x *HouseholdInvitationUpdateRequestInput) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *HouseholdInvitationUpdateRequestInput) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

type HouseholdOwnershipTransferInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reason        string                 `json:"Reason,omitempty"       protobuf:"bytes,1,opt,name=Reason,proto3"`
	CurrentOwner  string                 `json:"CurrentOwner,omitempty" protobuf:"bytes,2,opt,name=CurrentOwner,proto3"`
	NewOwner      string                 `json:"NewOwner,omitempty"     protobuf:"bytes,3,opt,name=NewOwner,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HouseholdOwnershipTransferInput) Reset() {
	*x = HouseholdOwnershipTransferInput{}
	mi := &file_messages_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HouseholdOwnershipTransferInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HouseholdOwnershipTransferInput) ProtoMessage() {}

func (x *HouseholdOwnershipTransferInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HouseholdOwnershipTransferInput.ProtoReflect.Descriptor instead.
func (*HouseholdOwnershipTransferInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{27}
}

func (x *HouseholdOwnershipTransferInput) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *HouseholdOwnershipTransferInput) GetCurrentOwner() string {
	if x != nil {
		return x.CurrentOwner
	}
	return ""
}

func (x *HouseholdOwnershipTransferInput) GetNewOwner() string {
	if x != nil {
		return x.NewOwner
	}
	return ""
}

type HouseholdUpdateRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	State         string                 `json:"State,omitempty"         protobuf:"bytes,6,opt,name=State,proto3"`
	ContactPhone  string                 `json:"ContactPhone,omitempty"  protobuf:"bytes,2,opt,name=ContactPhone,proto3"`
	AddressLine1  string                 `json:"AddressLine1,omitempty"  protobuf:"bytes,3,opt,name=AddressLine1,proto3"`
	AddressLine2  string                 `json:"AddressLine2,omitempty"  protobuf:"bytes,4,opt,name=AddressLine2,proto3"`
	City          string                 `json:"City,omitempty"          protobuf:"bytes,5,opt,name=City,proto3"`
	Name          string                 `json:"Name,omitempty"          protobuf:"bytes,1,opt,name=Name,proto3"`
	ZipCode       string                 `json:"ZipCode,omitempty"       protobuf:"bytes,7,opt,name=ZipCode,proto3"`
	Country       string                 `json:"Country,omitempty"       protobuf:"bytes,8,opt,name=Country,proto3"`
	BelongsToUser string                 `json:"BelongsToUser,omitempty" protobuf:"bytes,11,opt,name=BelongsToUser,proto3"`
	unknownFields protoimpl.UnknownFields
	Latitude      float32 `json:"Latitude,omitempty"  protobuf:"fixed32,9,opt,name=Latitude,proto3"`
	Longitude     float32 `json:"Longitude,omitempty" protobuf:"fixed32,10,opt,name=Longitude,proto3"`
	sizeCache     protoimpl.SizeCache
}

func (x *HouseholdUpdateRequestInput) Reset() {
	*x = HouseholdUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HouseholdUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HouseholdUpdateRequestInput) ProtoMessage() {}

func (x *HouseholdUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HouseholdUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*HouseholdUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{28}
}

func (x *HouseholdUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HouseholdUpdateRequestInput) GetContactPhone() string {
	if x != nil {
		return x.ContactPhone
	}
	return ""
}

func (x *HouseholdUpdateRequestInput) GetAddressLine1() string {
	if x != nil {
		return x.AddressLine1
	}
	return ""
}

func (x *HouseholdUpdateRequestInput) GetAddressLine2() string {
	if x != nil {
		return x.AddressLine2
	}
	return ""
}

func (x *HouseholdUpdateRequestInput) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *HouseholdUpdateRequestInput) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *HouseholdUpdateRequestInput) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *HouseholdUpdateRequestInput) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *HouseholdUpdateRequestInput) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *HouseholdUpdateRequestInput) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *HouseholdUpdateRequestInput) GetBelongsToUser() string {
	if x != nil {
		return x.BelongsToUser
	}
	return ""
}

type HouseholdUserMembership struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt          *timestamppb.Timestamp `json:"CreatedAt,omitempty"          protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	LastUpdatedAt      *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty"      protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3"`
	ArchivedAt         *timestamppb.Timestamp `json:"ArchivedAt,omitempty"         protobuf:"bytes,3,opt,name=ArchivedAt,proto3"`
	ID                 string                 `json:"ID,omitempty"                 protobuf:"bytes,4,opt,name=ID,proto3"`
	BelongsToUser      string                 `json:"BelongsToUser,omitempty"      protobuf:"bytes,5,opt,name=BelongsToUser,proto3"`
	BelongsToHousehold string                 `json:"BelongsToHousehold,omitempty" protobuf:"bytes,6,opt,name=BelongsToHousehold,proto3"`
	HouseholdRole      string                 `json:"HouseholdRole,omitempty"      protobuf:"bytes,7,opt,name=HouseholdRole,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
	DefaultHousehold   bool `json:"DefaultHousehold,omitempty" protobuf:"varint,8,opt,name=DefaultHousehold,proto3"`
}

func (x *HouseholdUserMembership) Reset() {
	*x = HouseholdUserMembership{}
	mi := &file_messages_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HouseholdUserMembership) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HouseholdUserMembership) ProtoMessage() {}

func (x *HouseholdUserMembership) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HouseholdUserMembership.ProtoReflect.Descriptor instead.
func (*HouseholdUserMembership) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{29}
}

func (x *HouseholdUserMembership) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *HouseholdUserMembership) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *HouseholdUserMembership) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *HouseholdUserMembership) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *HouseholdUserMembership) GetBelongsToUser() string {
	if x != nil {
		return x.BelongsToUser
	}
	return ""
}

func (x *HouseholdUserMembership) GetBelongsToHousehold() string {
	if x != nil {
		return x.BelongsToHousehold
	}
	return ""
}

func (x *HouseholdUserMembership) GetHouseholdRole() string {
	if x != nil {
		return x.HouseholdRole
	}
	return ""
}

func (x *HouseholdUserMembership) GetDefaultHousehold() bool {
	if x != nil {
		return x.DefaultHousehold
	}
	return false
}

type HouseholdUserMembershipWithUser struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt          *timestamppb.Timestamp `json:"CreatedAt,omitempty"          protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	LastUpdatedAt      *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty"      protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3"`
	BelongsToUser      *User                  `json:"BelongsToUser,omitempty"      protobuf:"bytes,3,opt,name=BelongsToUser,proto3"`
	ArchivedAt         *timestamppb.Timestamp `json:"ArchivedAt,omitempty"         protobuf:"bytes,4,opt,name=ArchivedAt,proto3"`
	ID                 string                 `json:"ID,omitempty"                 protobuf:"bytes,5,opt,name=ID,proto3"`
	BelongsToHousehold string                 `json:"BelongsToHousehold,omitempty" protobuf:"bytes,6,opt,name=BelongsToHousehold,proto3"`
	HouseholdRole      string                 `json:"HouseholdRole,omitempty"      protobuf:"bytes,7,opt,name=HouseholdRole,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
	DefaultHousehold   bool `json:"DefaultHousehold,omitempty" protobuf:"varint,8,opt,name=DefaultHousehold,proto3"`
}

func (x *HouseholdUserMembershipWithUser) Reset() {
	*x = HouseholdUserMembershipWithUser{}
	mi := &file_messages_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HouseholdUserMembershipWithUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HouseholdUserMembershipWithUser) ProtoMessage() {}

func (x *HouseholdUserMembershipWithUser) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HouseholdUserMembershipWithUser.ProtoReflect.Descriptor instead.
func (*HouseholdUserMembershipWithUser) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{30}
}

func (x *HouseholdUserMembershipWithUser) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *HouseholdUserMembershipWithUser) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *HouseholdUserMembershipWithUser) GetBelongsToUser() *User {
	if x != nil {
		return x.BelongsToUser
	}
	return nil
}

func (x *HouseholdUserMembershipWithUser) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *HouseholdUserMembershipWithUser) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *HouseholdUserMembershipWithUser) GetBelongsToHousehold() string {
	if x != nil {
		return x.BelongsToHousehold
	}
	return ""
}

func (x *HouseholdUserMembershipWithUser) GetHouseholdRole() string {
	if x != nil {
		return x.HouseholdRole
	}
	return ""
}

func (x *HouseholdUserMembershipWithUser) GetDefaultHousehold() bool {
	if x != nil {
		return x.DefaultHousehold
	}
	return false
}

type InitializeMealPlanGroceryListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HouseholdID   string                 `json:"HouseholdID,omitempty" protobuf:"bytes,1,opt,name=HouseholdID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitializeMealPlanGroceryListRequest) Reset() {
	*x = InitializeMealPlanGroceryListRequest{}
	mi := &file_messages_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitializeMealPlanGroceryListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeMealPlanGroceryListRequest) ProtoMessage() {}

func (x *InitializeMealPlanGroceryListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeMealPlanGroceryListRequest.ProtoReflect.Descriptor instead.
func (*InitializeMealPlanGroceryListRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{31}
}

func (x *InitializeMealPlanGroceryListRequest) GetHouseholdID() string {
	if x != nil {
		return x.HouseholdID
	}
	return ""
}

type InitializeMealPlanGroceryListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
	Success       bool `json:"Success,omitempty" protobuf:"varint,1,opt,name=Success,proto3"`
}

func (x *InitializeMealPlanGroceryListResponse) Reset() {
	*x = InitializeMealPlanGroceryListResponse{}
	mi := &file_messages_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitializeMealPlanGroceryListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeMealPlanGroceryListResponse) ProtoMessage() {}

func (x *InitializeMealPlanGroceryListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeMealPlanGroceryListResponse.ProtoReflect.Descriptor instead.
func (*InitializeMealPlanGroceryListResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{32}
}

func (x *InitializeMealPlanGroceryListResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type Meal struct {
	state                protoimpl.MessageState       `protogen:"open.v1"`
	CreatedAt            *timestamppb.Timestamp       `json:"CreatedAt,omitempty"         protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	ArchivedAt           *timestamppb.Timestamp       `json:"ArchivedAt,omitempty"        protobuf:"bytes,2,opt,name=ArchivedAt,proto3"`
	LastUpdatedAt        *timestamppb.Timestamp       `json:"LastUpdatedAt,omitempty"     protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3"`
	EstimatedPortions    *Float32RangeWithOptionalMax `json:"EstimatedPortions,omitempty" protobuf:"bytes,4,opt,name=EstimatedPortions,proto3"`
	Description          string                       `json:"Description,omitempty"       protobuf:"bytes,6,opt,name=Description,proto3"`
	ID                   string                       `json:"ID,omitempty"                protobuf:"bytes,5,opt,name=ID,proto3"`
	CreatedByUser        string                       `json:"CreatedByUser,omitempty"     protobuf:"bytes,7,opt,name=CreatedByUser,proto3"`
	Name                 string                       `json:"Name,omitempty"              protobuf:"bytes,8,opt,name=Name,proto3"`
	Components           []*MealComponent             `json:"Components,omitempty"        protobuf:"bytes,9,rep,name=Components,proto3"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
	EligibleForMealPlans bool `json:"EligibleForMealPlans,omitempty" protobuf:"varint,10,opt,name=EligibleForMealPlans,proto3"`
}

func (x *Meal) Reset() {
	*x = Meal{}
	mi := &file_messages_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Meal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meal) ProtoMessage() {}

func (x *Meal) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meal.ProtoReflect.Descriptor instead.
func (*Meal) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{33}
}

func (x *Meal) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Meal) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *Meal) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *Meal) GetEstimatedPortions() *Float32RangeWithOptionalMax {
	if x != nil {
		return x.EstimatedPortions
	}
	return nil
}

func (x *Meal) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Meal) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Meal) GetCreatedByUser() string {
	if x != nil {
		return x.CreatedByUser
	}
	return ""
}

func (x *Meal) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Meal) GetComponents() []*MealComponent {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *Meal) GetEligibleForMealPlans() bool {
	if x != nil {
		return x.EligibleForMealPlans
	}
	return false
}

type MealComponent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Recipe        *Recipe                `json:"Recipe,omitempty"        protobuf:"bytes,2,opt,name=Recipe,proto3"`
	ComponentType string                 `json:"ComponentType,omitempty" protobuf:"bytes,1,opt,name=ComponentType,proto3"`
	unknownFields protoimpl.UnknownFields
	RecipeScale   float32 `json:"RecipeScale,omitempty" protobuf:"fixed32,3,opt,name=RecipeScale,proto3"`
	sizeCache     protoimpl.SizeCache
}

func (x *MealComponent) Reset() {
	*x = MealComponent{}
	mi := &file_messages_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealComponent) ProtoMessage() {}

func (x *MealComponent) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealComponent.ProtoReflect.Descriptor instead.
func (*MealComponent) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{34}
}

func (x *MealComponent) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *MealComponent) GetRecipe() *Recipe {
	if x != nil {
		return x.Recipe
	}
	return nil
}

func (x *MealComponent) GetRecipeScale() float32 {
	if x != nil {
		return x.RecipeScale
	}
	return 0
}

type MealComponentCreationRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecipeID      string                 `json:"RecipeID,omitempty"      protobuf:"bytes,1,opt,name=RecipeID,proto3"`
	ComponentType string                 `json:"ComponentType,omitempty" protobuf:"bytes,2,opt,name=ComponentType,proto3"`
	unknownFields protoimpl.UnknownFields
	RecipeScale   float32 `json:"RecipeScale,omitempty" protobuf:"fixed32,3,opt,name=RecipeScale,proto3"`
	sizeCache     protoimpl.SizeCache
}

func (x *MealComponentCreationRequestInput) Reset() {
	*x = MealComponentCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealComponentCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealComponentCreationRequestInput) ProtoMessage() {}

func (x *MealComponentCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealComponentCreationRequestInput.ProtoReflect.Descriptor instead.
func (*MealComponentCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{35}
}

func (x *MealComponentCreationRequestInput) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *MealComponentCreationRequestInput) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *MealComponentCreationRequestInput) GetRecipeScale() float32 {
	if x != nil {
		return x.RecipeScale
	}
	return 0
}

type MealComponentUpdateRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecipeID      string                 `json:"RecipeID,omitempty"      protobuf:"bytes,1,opt,name=RecipeID,proto3"`
	ComponentType string                 `json:"ComponentType,omitempty" protobuf:"bytes,2,opt,name=ComponentType,proto3"`
	unknownFields protoimpl.UnknownFields
	RecipeScale   float32 `json:"RecipeScale,omitempty" protobuf:"fixed32,3,opt,name=RecipeScale,proto3"`
	sizeCache     protoimpl.SizeCache
}

func (x *MealComponentUpdateRequestInput) Reset() {
	*x = MealComponentUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealComponentUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealComponentUpdateRequestInput) ProtoMessage() {}

func (x *MealComponentUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealComponentUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*MealComponentUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{36}
}

func (x *MealComponentUpdateRequestInput) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *MealComponentUpdateRequestInput) GetComponentType() string {
	if x != nil {
		return x.ComponentType
	}
	return ""
}

func (x *MealComponentUpdateRequestInput) GetRecipeScale() float32 {
	if x != nil {
		return x.RecipeScale
	}
	return 0
}

type MealCreationRequestInput struct {
	state                protoimpl.MessageState               `protogen:"open.v1"`
	EstimatedPortions    *Float32RangeWithOptionalMax         `json:"EstimatedPortions,omitempty" protobuf:"bytes,1,opt,name=EstimatedPortions,proto3"`
	Name                 string                               `json:"Name,omitempty"              protobuf:"bytes,2,opt,name=Name,proto3"`
	Description          string                               `json:"Description,omitempty"       protobuf:"bytes,3,opt,name=Description,proto3"`
	Components           []*MealComponentCreationRequestInput `json:"Components,omitempty"        protobuf:"bytes,4,rep,name=Components,proto3"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
	EligibleForMealPlans bool `json:"EligibleForMealPlans,omitempty" protobuf:"varint,5,opt,name=EligibleForMealPlans,proto3"`
}

func (x *MealCreationRequestInput) Reset() {
	*x = MealCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealCreationRequestInput) ProtoMessage() {}

func (x *MealCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealCreationRequestInput.ProtoReflect.Descriptor instead.
func (*MealCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{37}
}

func (x *MealCreationRequestInput) GetEstimatedPortions() *Float32RangeWithOptionalMax {
	if x != nil {
		return x.EstimatedPortions
	}
	return nil
}

func (x *MealCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MealCreationRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MealCreationRequestInput) GetComponents() []*MealComponentCreationRequestInput {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *MealCreationRequestInput) GetEligibleForMealPlans() bool {
	if x != nil {
		return x.EligibleForMealPlans
	}
	return false
}

type MealPlan struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt              *timestamppb.Timestamp `json:"CreatedAt,omitempty"          protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	VotingDeadline         *timestamppb.Timestamp `json:"VotingDeadline,omitempty"     protobuf:"bytes,2,opt,name=VotingDeadline,proto3"`
	ArchivedAt             *timestamppb.Timestamp `json:"ArchivedAt,omitempty"         protobuf:"bytes,3,opt,name=ArchivedAt,proto3"`
	LastUpdatedAt          *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty"      protobuf:"bytes,4,opt,name=LastUpdatedAt,proto3"`
	ElectionMethod         string                 `json:"ElectionMethod,omitempty"     protobuf:"bytes,8,opt,name=ElectionMethod,proto3"`
	Status                 string                 `json:"Status,omitempty"             protobuf:"bytes,6,opt,name=Status,proto3"`
	Notes                  string                 `json:"Notes,omitempty"              protobuf:"bytes,7,opt,name=Notes,proto3"`
	ID                     string                 `json:"ID,omitempty"                 protobuf:"bytes,5,opt,name=ID,proto3"`
	BelongsToHousehold     string                 `json:"BelongsToHousehold,omitempty" protobuf:"bytes,9,opt,name=BelongsToHousehold,proto3"`
	CreatedByUser          string                 `json:"CreatedByUser,omitempty"      protobuf:"bytes,10,opt,name=CreatedByUser,proto3"`
	Events                 []*MealPlanEvent       `json:"Events,omitempty"             protobuf:"bytes,11,rep,name=Events,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
	GroceryListInitialized bool `json:"GroceryListInitialized,omitempty" protobuf:"varint,12,opt,name=GroceryListInitialized,proto3"`
	TasksCreated           bool `json:"TasksCreated,omitempty"           protobuf:"varint,13,opt,name=TasksCreated,proto3"`
}

func (x *MealPlan) Reset() {
	*x = MealPlan{}
	mi := &file_messages_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlan) ProtoMessage() {}

func (x *MealPlan) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlan.ProtoReflect.Descriptor instead.
func (*MealPlan) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{38}
}

func (x *MealPlan) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MealPlan) GetVotingDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.VotingDeadline
	}
	return nil
}

func (x *MealPlan) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *MealPlan) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *MealPlan) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MealPlan) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MealPlan) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MealPlan) GetElectionMethod() string {
	if x != nil {
		return x.ElectionMethod
	}
	return ""
}

func (x *MealPlan) GetBelongsToHousehold() string {
	if x != nil {
		return x.BelongsToHousehold
	}
	return ""
}

func (x *MealPlan) GetCreatedByUser() string {
	if x != nil {
		return x.CreatedByUser
	}
	return ""
}

func (x *MealPlan) GetEvents() []*MealPlanEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *MealPlan) GetGroceryListInitialized() bool {
	if x != nil {
		return x.GroceryListInitialized
	}
	return false
}

func (x *MealPlan) GetTasksCreated() bool {
	if x != nil {
		return x.TasksCreated
	}
	return false
}

type MealPlanCreationRequestInput struct {
	state          protoimpl.MessageState               `protogen:"open.v1"`
	VotingDeadline *timestamppb.Timestamp               `json:"VotingDeadline,omitempty" protobuf:"bytes,1,opt,name=VotingDeadline,proto3"`
	Notes          string                               `json:"Notes,omitempty"          protobuf:"bytes,2,opt,name=Notes,proto3"`
	ElectionMethod string                               `json:"ElectionMethod,omitempty" protobuf:"bytes,3,opt,name=ElectionMethod,proto3"`
	Events         []*MealPlanEventCreationRequestInput `json:"Events,omitempty"         protobuf:"bytes,4,rep,name=Events,proto3"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MealPlanCreationRequestInput) Reset() {
	*x = MealPlanCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanCreationRequestInput) ProtoMessage() {}

func (x *MealPlanCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanCreationRequestInput.ProtoReflect.Descriptor instead.
func (*MealPlanCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{39}
}

func (x *MealPlanCreationRequestInput) GetVotingDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.VotingDeadline
	}
	return nil
}

func (x *MealPlanCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MealPlanCreationRequestInput) GetElectionMethod() string {
	if x != nil {
		return x.ElectionMethod
	}
	return ""
}

func (x *MealPlanCreationRequestInput) GetEvents() []*MealPlanEventCreationRequestInput {
	if x != nil {
		return x.Events
	}
	return nil
}

type MealPlanEvent struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt         *timestamppb.Timestamp `json:"CreatedAt,omitempty"         protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	StartsAt          *timestamppb.Timestamp `json:"StartsAt,omitempty"          protobuf:"bytes,2,opt,name=StartsAt,proto3"`
	EndsAt            *timestamppb.Timestamp `json:"EndsAt,omitempty"            protobuf:"bytes,3,opt,name=EndsAt,proto3"`
	ArchivedAt        *timestamppb.Timestamp `json:"ArchivedAt,omitempty"        protobuf:"bytes,4,opt,name=ArchivedAt,proto3"`
	LastUpdatedAt     *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty"     protobuf:"bytes,5,opt,name=LastUpdatedAt,proto3"`
	MealName          string                 `json:"MealName,omitempty"          protobuf:"bytes,6,opt,name=MealName,proto3"`
	Notes             string                 `json:"Notes,omitempty"             protobuf:"bytes,7,opt,name=Notes,proto3"`
	BelongsToMealPlan string                 `json:"BelongsToMealPlan,omitempty" protobuf:"bytes,8,opt,name=BelongsToMealPlan,proto3"`
	ID                string                 `json:"ID,omitempty"                protobuf:"bytes,9,opt,name=ID,proto3"`
	Options           []*MealPlanOption      `json:"Options,omitempty"           protobuf:"bytes,10,rep,name=Options,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MealPlanEvent) Reset() {
	*x = MealPlanEvent{}
	mi := &file_messages_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanEvent) ProtoMessage() {}

func (x *MealPlanEvent) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanEvent.ProtoReflect.Descriptor instead.
func (*MealPlanEvent) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{40}
}

func (x *MealPlanEvent) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MealPlanEvent) GetStartsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartsAt
	}
	return nil
}

func (x *MealPlanEvent) GetEndsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndsAt
	}
	return nil
}

func (x *MealPlanEvent) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *MealPlanEvent) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *MealPlanEvent) GetMealName() string {
	if x != nil {
		return x.MealName
	}
	return ""
}

func (x *MealPlanEvent) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MealPlanEvent) GetBelongsToMealPlan() string {
	if x != nil {
		return x.BelongsToMealPlan
	}
	return ""
}

func (x *MealPlanEvent) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MealPlanEvent) GetOptions() []*MealPlanOption {
	if x != nil {
		return x.Options
	}
	return nil
}

type MealPlanEventCreationRequestInput struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	EndsAt        *timestamppb.Timestamp                `json:"EndsAt,omitempty"   protobuf:"bytes,1,opt,name=EndsAt,proto3"`
	StartsAt      *timestamppb.Timestamp                `json:"StartsAt,omitempty" protobuf:"bytes,2,opt,name=StartsAt,proto3"`
	Notes         string                                `json:"Notes,omitempty"    protobuf:"bytes,3,opt,name=Notes,proto3"`
	MealName      string                                `json:"MealName,omitempty" protobuf:"bytes,4,opt,name=MealName,proto3"`
	Options       []*MealPlanOptionCreationRequestInput `json:"Options,omitempty"  protobuf:"bytes,5,rep,name=Options,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MealPlanEventCreationRequestInput) Reset() {
	*x = MealPlanEventCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanEventCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanEventCreationRequestInput) ProtoMessage() {}

func (x *MealPlanEventCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanEventCreationRequestInput.ProtoReflect.Descriptor instead.
func (*MealPlanEventCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{41}
}

func (x *MealPlanEventCreationRequestInput) GetEndsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndsAt
	}
	return nil
}

func (x *MealPlanEventCreationRequestInput) GetStartsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartsAt
	}
	return nil
}

func (x *MealPlanEventCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MealPlanEventCreationRequestInput) GetMealName() string {
	if x != nil {
		return x.MealName
	}
	return ""
}

func (x *MealPlanEventCreationRequestInput) GetOptions() []*MealPlanOptionCreationRequestInput {
	if x != nil {
		return x.Options
	}
	return nil
}

type MealPlanEventUpdateRequestInput struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Notes             string                 `json:"Notes,omitempty"             protobuf:"bytes,1,opt,name=Notes,proto3"`
	StartsAt          *timestamppb.Timestamp `json:"StartsAt,omitempty"          protobuf:"bytes,2,opt,name=StartsAt,proto3"`
	MealName          string                 `json:"MealName,omitempty"          protobuf:"bytes,3,opt,name=MealName,proto3"`
	EndsAt            *timestamppb.Timestamp `json:"EndsAt,omitempty"            protobuf:"bytes,4,opt,name=EndsAt,proto3"`
	BelongsToMealPlan string                 `json:"BelongsToMealPlan,omitempty" protobuf:"bytes,5,opt,name=BelongsToMealPlan,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MealPlanEventUpdateRequestInput) Reset() {
	*x = MealPlanEventUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanEventUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanEventUpdateRequestInput) ProtoMessage() {}

func (x *MealPlanEventUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanEventUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*MealPlanEventUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{42}
}

func (x *MealPlanEventUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MealPlanEventUpdateRequestInput) GetStartsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartsAt
	}
	return nil
}

func (x *MealPlanEventUpdateRequestInput) GetMealName() string {
	if x != nil {
		return x.MealName
	}
	return ""
}

func (x *MealPlanEventUpdateRequestInput) GetEndsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EndsAt
	}
	return nil
}

func (x *MealPlanEventUpdateRequestInput) GetBelongsToMealPlan() string {
	if x != nil {
		return x.BelongsToMealPlan
	}
	return ""
}

type MealPlanGroceryListItem struct {
	QuantityNeeded           *Float32RangeWithOptionalMax `json:"QuantityNeeded,omitempty"           protobuf:"bytes,12,opt,name=QuantityNeeded,proto3"`
	CreatedAt                *timestamppb.Timestamp       `json:"CreatedAt,omitempty"                protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	Ingredient               *ValidIngredient             `json:"Ingredient,omitempty"               protobuf:"bytes,14,opt,name=Ingredient,proto3"`
	MeasurementUnit          *ValidMeasurementUnit        `json:"MeasurementUnit,omitempty"          protobuf:"bytes,13,opt,name=MeasurementUnit,proto3"`
	state                    protoimpl.MessageState       `protogen:"open.v1"`
	ArchivedAt               *timestamppb.Timestamp       `json:"ArchivedAt,omitempty"               protobuf:"bytes,5,opt,name=ArchivedAt,proto3"`
	LastUpdatedAt            *timestamppb.Timestamp       `json:"LastUpdatedAt,omitempty"            protobuf:"bytes,6,opt,name=LastUpdatedAt,proto3"`
	PurchasedMeasurementUnit *ValidMeasurementUnit        `json:"PurchasedMeasurementUnit,omitempty" protobuf:"bytes,7,opt,name=PurchasedMeasurementUnit,proto3"`
	PurchasedUPC             string                       `json:"PurchasedUPC,omitempty"             protobuf:"bytes,4,opt,name=PurchasedUPC,proto3"`
	Status                   string                       `json:"Status,omitempty"                   protobuf:"bytes,9,opt,name=Status,proto3"`
	StatusExplanation        string                       `json:"StatusExplanation,omitempty"        protobuf:"bytes,10,opt,name=StatusExplanation,proto3"`
	ID                       string                       `json:"ID,omitempty"                       protobuf:"bytes,11,opt,name=ID,proto3"`
	BelongsToMealPlan        string                       `json:"BelongsToMealPlan,omitempty"        protobuf:"bytes,8,opt,name=BelongsToMealPlan,proto3"`
	unknownFields            protoimpl.UnknownFields
	PurchasePrice            float32 `json:"PurchasePrice,omitempty"     protobuf:"fixed32,3,opt,name=PurchasePrice,proto3"`
	QuantityPurchased        float32 `json:"QuantityPurchased,omitempty" protobuf:"fixed32,2,opt,name=QuantityPurchased,proto3"`
	sizeCache                protoimpl.SizeCache
}

func (x *MealPlanGroceryListItem) Reset() {
	*x = MealPlanGroceryListItem{}
	mi := &file_messages_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanGroceryListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanGroceryListItem) ProtoMessage() {}

func (x *MealPlanGroceryListItem) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanGroceryListItem.ProtoReflect.Descriptor instead.
func (*MealPlanGroceryListItem) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{43}
}

func (x *MealPlanGroceryListItem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MealPlanGroceryListItem) GetQuantityPurchased() float32 {
	if x != nil {
		return x.QuantityPurchased
	}
	return 0
}

func (x *MealPlanGroceryListItem) GetPurchasePrice() float32 {
	if x != nil {
		return x.PurchasePrice
	}
	return 0
}

func (x *MealPlanGroceryListItem) GetPurchasedUPC() string {
	if x != nil {
		return x.PurchasedUPC
	}
	return ""
}

func (x *MealPlanGroceryListItem) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *MealPlanGroceryListItem) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *MealPlanGroceryListItem) GetPurchasedMeasurementUnit() *ValidMeasurementUnit {
	if x != nil {
		return x.PurchasedMeasurementUnit
	}
	return nil
}

func (x *MealPlanGroceryListItem) GetBelongsToMealPlan() string {
	if x != nil {
		return x.BelongsToMealPlan
	}
	return ""
}

func (x *MealPlanGroceryListItem) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MealPlanGroceryListItem) GetStatusExplanation() string {
	if x != nil {
		return x.StatusExplanation
	}
	return ""
}

func (x *MealPlanGroceryListItem) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MealPlanGroceryListItem) GetQuantityNeeded() *Float32RangeWithOptionalMax {
	if x != nil {
		return x.QuantityNeeded
	}
	return nil
}

func (x *MealPlanGroceryListItem) GetMeasurementUnit() *ValidMeasurementUnit {
	if x != nil {
		return x.MeasurementUnit
	}
	return nil
}

func (x *MealPlanGroceryListItem) GetIngredient() *ValidIngredient {
	if x != nil {
		return x.Ingredient
	}
	return nil
}

type MealPlanGroceryListItemCreationRequestInput struct {
	state                      protoimpl.MessageState       `protogen:"open.v1"`
	QuantityNeeded             *Float32RangeWithOptionalMax `json:"QuantityNeeded,omitempty"             protobuf:"bytes,10,opt,name=QuantityNeeded,proto3"`
	StatusExplanation          string                       `json:"StatusExplanation,omitempty"          protobuf:"bytes,9,opt,name=StatusExplanation,proto3"`
	Status                     string                       `json:"Status,omitempty"                     protobuf:"bytes,5,opt,name=Status,proto3"`
	BelongsToMealPlan          string                       `json:"BelongsToMealPlan,omitempty"          protobuf:"bytes,6,opt,name=BelongsToMealPlan,proto3"`
	ValidIngredientID          string                       `json:"ValidIngredientID,omitempty"          protobuf:"bytes,7,opt,name=ValidIngredientID,proto3"`
	ValidMeasurementUnitID     string                       `json:"ValidMeasurementUnitID,omitempty"     protobuf:"bytes,8,opt,name=ValidMeasurementUnitID,proto3"`
	PurchasedUPC               string                       `json:"PurchasedUPC,omitempty"               protobuf:"bytes,2,opt,name=PurchasedUPC,proto3"`
	PurchasedMeasurementUnitID string                       `json:"PurchasedMeasurementUnitID,omitempty" protobuf:"bytes,1,opt,name=PurchasedMeasurementUnitID,proto3"`
	unknownFields              protoimpl.UnknownFields
	PurchasePrice              float32 `json:"PurchasePrice,omitempty"     protobuf:"fixed32,3,opt,name=PurchasePrice,proto3"`
	QuantityPurchased          float32 `json:"QuantityPurchased,omitempty" protobuf:"fixed32,4,opt,name=QuantityPurchased,proto3"`
	sizeCache                  protoimpl.SizeCache
}

func (x *MealPlanGroceryListItemCreationRequestInput) Reset() {
	*x = MealPlanGroceryListItemCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanGroceryListItemCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanGroceryListItemCreationRequestInput) ProtoMessage() {}

func (x *MealPlanGroceryListItemCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanGroceryListItemCreationRequestInput.ProtoReflect.Descriptor instead.
func (*MealPlanGroceryListItemCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{44}
}

func (x *MealPlanGroceryListItemCreationRequestInput) GetPurchasedMeasurementUnitID() string {
	if x != nil {
		return x.PurchasedMeasurementUnitID
	}
	return ""
}

func (x *MealPlanGroceryListItemCreationRequestInput) GetPurchasedUPC() string {
	if x != nil {
		return x.PurchasedUPC
	}
	return ""
}

func (x *MealPlanGroceryListItemCreationRequestInput) GetPurchasePrice() float32 {
	if x != nil {
		return x.PurchasePrice
	}
	return 0
}

func (x *MealPlanGroceryListItemCreationRequestInput) GetQuantityPurchased() float32 {
	if x != nil {
		return x.QuantityPurchased
	}
	return 0
}

func (x *MealPlanGroceryListItemCreationRequestInput) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MealPlanGroceryListItemCreationRequestInput) GetBelongsToMealPlan() string {
	if x != nil {
		return x.BelongsToMealPlan
	}
	return ""
}

func (x *MealPlanGroceryListItemCreationRequestInput) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

func (x *MealPlanGroceryListItemCreationRequestInput) GetValidMeasurementUnitID() string {
	if x != nil {
		return x.ValidMeasurementUnitID
	}
	return ""
}

func (x *MealPlanGroceryListItemCreationRequestInput) GetStatusExplanation() string {
	if x != nil {
		return x.StatusExplanation
	}
	return ""
}

func (x *MealPlanGroceryListItemCreationRequestInput) GetQuantityNeeded() *Float32RangeWithOptionalMax {
	if x != nil {
		return x.QuantityNeeded
	}
	return nil
}

type MealPlanGroceryListItemUpdateRequestInput struct {
	state                      protoimpl.MessageState                         `protogen:"open.v1"`
	QuantityNeeded             *Float32RangeWithOptionalMaxUpdateRequestInput `json:"QuantityNeeded,omitempty"             protobuf:"bytes,10,opt,name=QuantityNeeded,proto3"`
	PurchasedMeasurementUnitID string                                         `json:"PurchasedMeasurementUnitID,omitempty" protobuf:"bytes,6,opt,name=PurchasedMeasurementUnitID,proto3"`
	ValidMeasurementUnitID     string                                         `json:"ValidMeasurementUnitID,omitempty"     protobuf:"bytes,3,opt,name=ValidMeasurementUnitID,proto3"`
	StatusExplanation          string                                         `json:"StatusExplanation,omitempty"          protobuf:"bytes,4,opt,name=StatusExplanation,proto3"`
	ValidIngredientID          string                                         `json:"ValidIngredientID,omitempty"          protobuf:"bytes,2,opt,name=ValidIngredientID,proto3"`
	PurchasedUPC               string                                         `json:"PurchasedUPC,omitempty"               protobuf:"bytes,7,opt,name=PurchasedUPC,proto3"`
	Status                     string                                         `json:"Status,omitempty"                     protobuf:"bytes,9,opt,name=Status,proto3"`
	BelongsToMealPlan          string                                         `json:"BelongsToMealPlan,omitempty"          protobuf:"bytes,1,opt,name=BelongsToMealPlan,proto3"`
	unknownFields              protoimpl.UnknownFields
	QuantityPurchased          float32 `json:"QuantityPurchased,omitempty" protobuf:"fixed32,5,opt,name=QuantityPurchased,proto3"`
	PurchasePrice              float32 `json:"PurchasePrice,omitempty"     protobuf:"fixed32,8,opt,name=PurchasePrice,proto3"`
	sizeCache                  protoimpl.SizeCache
}

func (x *MealPlanGroceryListItemUpdateRequestInput) Reset() {
	*x = MealPlanGroceryListItemUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanGroceryListItemUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanGroceryListItemUpdateRequestInput) ProtoMessage() {}

func (x *MealPlanGroceryListItemUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanGroceryListItemUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*MealPlanGroceryListItemUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{45}
}

func (x *MealPlanGroceryListItemUpdateRequestInput) GetBelongsToMealPlan() string {
	if x != nil {
		return x.BelongsToMealPlan
	}
	return ""
}

func (x *MealPlanGroceryListItemUpdateRequestInput) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

func (x *MealPlanGroceryListItemUpdateRequestInput) GetValidMeasurementUnitID() string {
	if x != nil {
		return x.ValidMeasurementUnitID
	}
	return ""
}

func (x *MealPlanGroceryListItemUpdateRequestInput) GetStatusExplanation() string {
	if x != nil {
		return x.StatusExplanation
	}
	return ""
}

func (x *MealPlanGroceryListItemUpdateRequestInput) GetQuantityPurchased() float32 {
	if x != nil {
		return x.QuantityPurchased
	}
	return 0
}

func (x *MealPlanGroceryListItemUpdateRequestInput) GetPurchasedMeasurementUnitID() string {
	if x != nil {
		return x.PurchasedMeasurementUnitID
	}
	return ""
}

func (x *MealPlanGroceryListItemUpdateRequestInput) GetPurchasedUPC() string {
	if x != nil {
		return x.PurchasedUPC
	}
	return ""
}

func (x *MealPlanGroceryListItemUpdateRequestInput) GetPurchasePrice() float32 {
	if x != nil {
		return x.PurchasePrice
	}
	return 0
}

func (x *MealPlanGroceryListItemUpdateRequestInput) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MealPlanGroceryListItemUpdateRequestInput) GetQuantityNeeded() *Float32RangeWithOptionalMaxUpdateRequestInput {
	if x != nil {
		return x.QuantityNeeded
	}
	return nil
}

type MealPlanOption struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt              *timestamppb.Timestamp `json:"CreatedAt,omitempty"              protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	LastUpdatedAt          *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty"          protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3"`
	Meal                   *Meal                  `json:"Meal,omitempty"                   protobuf:"bytes,10,opt,name=Meal,proto3"`
	ArchivedAt             *timestamppb.Timestamp `json:"ArchivedAt,omitempty"             protobuf:"bytes,4,opt,name=ArchivedAt,proto3"`
	ID                     string                 `json:"ID,omitempty"                     protobuf:"bytes,8,opt,name=ID,proto3"`
	Notes                  string                 `json:"Notes,omitempty"                  protobuf:"bytes,6,opt,name=Notes,proto3"`
	BelongsToMealPlanEvent string                 `json:"BelongsToMealPlanEvent,omitempty" protobuf:"bytes,7,opt,name=BelongsToMealPlanEvent,proto3"`
	AssignedDishwasher     string                 `json:"AssignedDishwasher,omitempty"     protobuf:"bytes,5,opt,name=AssignedDishwasher,proto3"`
	AssignedCook           string                 `json:"AssignedCook,omitempty"           protobuf:"bytes,3,opt,name=AssignedCook,proto3"`
	Votes                  []*MealPlanOptionVote  `json:"Votes,omitempty"                  protobuf:"bytes,9,rep,name=Votes,proto3"`
	unknownFields          protoimpl.UnknownFields
	MealScale              float32 `json:"MealScale,omitempty" protobuf:"fixed32,11,opt,name=MealScale,proto3"`
	sizeCache              protoimpl.SizeCache
	Chosen                 bool `json:"Chosen,omitempty"    protobuf:"varint,12,opt,name=Chosen,proto3"`
	TieBroken              bool `json:"TieBroken,omitempty" protobuf:"varint,13,opt,name=TieBroken,proto3"`
}

func (x *MealPlanOption) Reset() {
	*x = MealPlanOption{}
	mi := &file_messages_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanOption) ProtoMessage() {}

func (x *MealPlanOption) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanOption.ProtoReflect.Descriptor instead.
func (*MealPlanOption) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{46}
}

func (x *MealPlanOption) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MealPlanOption) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *MealPlanOption) GetAssignedCook() string {
	if x != nil {
		return x.AssignedCook
	}
	return ""
}

func (x *MealPlanOption) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *MealPlanOption) GetAssignedDishwasher() string {
	if x != nil {
		return x.AssignedDishwasher
	}
	return ""
}

func (x *MealPlanOption) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MealPlanOption) GetBelongsToMealPlanEvent() string {
	if x != nil {
		return x.BelongsToMealPlanEvent
	}
	return ""
}

func (x *MealPlanOption) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MealPlanOption) GetVotes() []*MealPlanOptionVote {
	if x != nil {
		return x.Votes
	}
	return nil
}

func (x *MealPlanOption) GetMeal() *Meal {
	if x != nil {
		return x.Meal
	}
	return nil
}

func (x *MealPlanOption) GetMealScale() float32 {
	if x != nil {
		return x.MealScale
	}
	return 0
}

func (x *MealPlanOption) GetChosen() bool {
	if x != nil {
		return x.Chosen
	}
	return false
}

func (x *MealPlanOption) GetTieBroken() bool {
	if x != nil {
		return x.TieBroken
	}
	return false
}

type MealPlanOptionCreationRequestInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	AssignedCook       string                 `json:"AssignedCook,omitempty"       protobuf:"bytes,1,opt,name=AssignedCook,proto3"`
	AssignedDishwasher string                 `json:"AssignedDishwasher,omitempty" protobuf:"bytes,2,opt,name=AssignedDishwasher,proto3"`
	MealID             string                 `json:"MealID,omitempty"             protobuf:"bytes,3,opt,name=MealID,proto3"`
	Notes              string                 `json:"Notes,omitempty"              protobuf:"bytes,4,opt,name=Notes,proto3"`
	unknownFields      protoimpl.UnknownFields
	MealScale          float32 `json:"MealScale,omitempty" protobuf:"fixed32,5,opt,name=MealScale,proto3"`
	sizeCache          protoimpl.SizeCache
}

func (x *MealPlanOptionCreationRequestInput) Reset() {
	*x = MealPlanOptionCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanOptionCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanOptionCreationRequestInput) ProtoMessage() {}

func (x *MealPlanOptionCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanOptionCreationRequestInput.ProtoReflect.Descriptor instead.
func (*MealPlanOptionCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{47}
}

func (x *MealPlanOptionCreationRequestInput) GetAssignedCook() string {
	if x != nil {
		return x.AssignedCook
	}
	return ""
}

func (x *MealPlanOptionCreationRequestInput) GetAssignedDishwasher() string {
	if x != nil {
		return x.AssignedDishwasher
	}
	return ""
}

func (x *MealPlanOptionCreationRequestInput) GetMealID() string {
	if x != nil {
		return x.MealID
	}
	return ""
}

func (x *MealPlanOptionCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MealPlanOptionCreationRequestInput) GetMealScale() float32 {
	if x != nil {
		return x.MealScale
	}
	return 0
}

type MealPlanOptionUpdateRequestInput struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	MealID                 string                 `json:"MealID,omitempty"                 protobuf:"bytes,1,opt,name=MealID,proto3"`
	Notes                  string                 `json:"Notes,omitempty"                  protobuf:"bytes,2,opt,name=Notes,proto3"`
	AssignedCook           string                 `json:"AssignedCook,omitempty"           protobuf:"bytes,3,opt,name=AssignedCook,proto3"`
	AssignedDishwasher     string                 `json:"AssignedDishwasher,omitempty"     protobuf:"bytes,4,opt,name=AssignedDishwasher,proto3"`
	BelongsToMealPlanEvent string                 `json:"BelongsToMealPlanEvent,omitempty" protobuf:"bytes,6,opt,name=BelongsToMealPlanEvent,proto3"`
	unknownFields          protoimpl.UnknownFields
	MealScale              float32 `json:"MealScale,omitempty" protobuf:"fixed32,5,opt,name=MealScale,proto3"`
	sizeCache              protoimpl.SizeCache
}

func (x *MealPlanOptionUpdateRequestInput) Reset() {
	*x = MealPlanOptionUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanOptionUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanOptionUpdateRequestInput) ProtoMessage() {}

func (x *MealPlanOptionUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanOptionUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*MealPlanOptionUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{48}
}

func (x *MealPlanOptionUpdateRequestInput) GetMealID() string {
	if x != nil {
		return x.MealID
	}
	return ""
}

func (x *MealPlanOptionUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MealPlanOptionUpdateRequestInput) GetAssignedCook() string {
	if x != nil {
		return x.AssignedCook
	}
	return ""
}

func (x *MealPlanOptionUpdateRequestInput) GetAssignedDishwasher() string {
	if x != nil {
		return x.AssignedDishwasher
	}
	return ""
}

func (x *MealPlanOptionUpdateRequestInput) GetMealScale() float32 {
	if x != nil {
		return x.MealScale
	}
	return 0
}

func (x *MealPlanOptionUpdateRequestInput) GetBelongsToMealPlanEvent() string {
	if x != nil {
		return x.BelongsToMealPlanEvent
	}
	return ""
}

type MealPlanOptionVote struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt               *timestamppb.Timestamp `json:"CreatedAt,omitempty"               protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	ArchivedAt              *timestamppb.Timestamp `json:"ArchivedAt,omitempty"              protobuf:"bytes,2,opt,name=ArchivedAt,proto3"`
	LastUpdatedAt           *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty"           protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3"`
	ID                      string                 `json:"ID,omitempty"                      protobuf:"bytes,4,opt,name=ID,proto3"`
	Notes                   string                 `json:"Notes,omitempty"                   protobuf:"bytes,5,opt,name=Notes,proto3"`
	BelongsToMealPlanOption string                 `json:"BelongsToMealPlanOption,omitempty" protobuf:"bytes,6,opt,name=BelongsToMealPlanOption,proto3"`
	ByUser                  string                 `json:"ByUser,omitempty"                  protobuf:"bytes,7,opt,name=ByUser,proto3"`
	unknownFields           protoimpl.UnknownFields
	Rank                    uint32 `json:"Rank,omitempty" protobuf:"varint,8,opt,name=Rank,proto3"`
	sizeCache               protoimpl.SizeCache
	Abstain                 bool `json:"Abstain,omitempty" protobuf:"varint,9,opt,name=Abstain,proto3"`
}

func (x *MealPlanOptionVote) Reset() {
	*x = MealPlanOptionVote{}
	mi := &file_messages_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanOptionVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanOptionVote) ProtoMessage() {}

func (x *MealPlanOptionVote) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanOptionVote.ProtoReflect.Descriptor instead.
func (*MealPlanOptionVote) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{49}
}

func (x *MealPlanOptionVote) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MealPlanOptionVote) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *MealPlanOptionVote) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *MealPlanOptionVote) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MealPlanOptionVote) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MealPlanOptionVote) GetBelongsToMealPlanOption() string {
	if x != nil {
		return x.BelongsToMealPlanOption
	}
	return ""
}

func (x *MealPlanOptionVote) GetByUser() string {
	if x != nil {
		return x.ByUser
	}
	return ""
}

func (x *MealPlanOptionVote) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *MealPlanOptionVote) GetAbstain() bool {
	if x != nil {
		return x.Abstain
	}
	return false
}

type MealPlanOptionVoteCreationInput struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	ID                      string                 `json:"ID,omitempty"                      protobuf:"bytes,1,opt,name=ID,proto3"`
	Notes                   string                 `json:"Notes,omitempty"                   protobuf:"bytes,2,opt,name=Notes,proto3"`
	ByUser                  string                 `json:"ByUser,omitempty"                  protobuf:"bytes,3,opt,name=ByUser,proto3"`
	BelongsToMealPlanOption string                 `json:"BelongsToMealPlanOption,omitempty" protobuf:"bytes,4,opt,name=BelongsToMealPlanOption,proto3"`
	unknownFields           protoimpl.UnknownFields
	Rank                    uint32 `json:"Rank,omitempty" protobuf:"varint,5,opt,name=Rank,proto3"`
	sizeCache               protoimpl.SizeCache
	Abstain                 bool `json:"Abstain,omitempty" protobuf:"varint,6,opt,name=Abstain,proto3"`
}

func (x *MealPlanOptionVoteCreationInput) Reset() {
	*x = MealPlanOptionVoteCreationInput{}
	mi := &file_messages_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanOptionVoteCreationInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanOptionVoteCreationInput) ProtoMessage() {}

func (x *MealPlanOptionVoteCreationInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanOptionVoteCreationInput.ProtoReflect.Descriptor instead.
func (*MealPlanOptionVoteCreationInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{50}
}

func (x *MealPlanOptionVoteCreationInput) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MealPlanOptionVoteCreationInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MealPlanOptionVoteCreationInput) GetByUser() string {
	if x != nil {
		return x.ByUser
	}
	return ""
}

func (x *MealPlanOptionVoteCreationInput) GetBelongsToMealPlanOption() string {
	if x != nil {
		return x.BelongsToMealPlanOption
	}
	return ""
}

func (x *MealPlanOptionVoteCreationInput) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *MealPlanOptionVoteCreationInput) GetAbstain() bool {
	if x != nil {
		return x.Abstain
	}
	return false
}

type MealPlanOptionVoteCreationRequestInput struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Votes         []*MealPlanOptionVoteCreationInput `json:"Votes,omitempty" protobuf:"bytes,1,rep,name=Votes,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MealPlanOptionVoteCreationRequestInput) Reset() {
	*x = MealPlanOptionVoteCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanOptionVoteCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanOptionVoteCreationRequestInput) ProtoMessage() {}

func (x *MealPlanOptionVoteCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanOptionVoteCreationRequestInput.ProtoReflect.Descriptor instead.
func (*MealPlanOptionVoteCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{51}
}

func (x *MealPlanOptionVoteCreationRequestInput) GetVotes() []*MealPlanOptionVoteCreationInput {
	if x != nil {
		return x.Votes
	}
	return nil
}

type MealPlanOptionVoteUpdateRequestInput struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Notes                   string                 `json:"Notes,omitempty"                   protobuf:"bytes,1,opt,name=Notes,proto3"`
	BelongsToMealPlanOption string                 `json:"BelongsToMealPlanOption,omitempty" protobuf:"bytes,4,opt,name=BelongsToMealPlanOption,proto3"`
	unknownFields           protoimpl.UnknownFields
	Rank                    uint32 `json:"Rank,omitempty" protobuf:"varint,2,opt,name=Rank,proto3"`
	sizeCache               protoimpl.SizeCache
	Abstain                 bool `json:"Abstain,omitempty" protobuf:"varint,3,opt,name=Abstain,proto3"`
}

func (x *MealPlanOptionVoteUpdateRequestInput) Reset() {
	*x = MealPlanOptionVoteUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanOptionVoteUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanOptionVoteUpdateRequestInput) ProtoMessage() {}

func (x *MealPlanOptionVoteUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanOptionVoteUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*MealPlanOptionVoteUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{52}
}

func (x *MealPlanOptionVoteUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MealPlanOptionVoteUpdateRequestInput) GetRank() uint32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *MealPlanOptionVoteUpdateRequestInput) GetAbstain() bool {
	if x != nil {
		return x.Abstain
	}
	return false
}

func (x *MealPlanOptionVoteUpdateRequestInput) GetBelongsToMealPlanOption() string {
	if x != nil {
		return x.BelongsToMealPlanOption
	}
	return ""
}

type MealPlanTask struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	RecipePrepTask      *RecipePrepTask        `json:"RecipePrepTask,omitempty"      protobuf:"bytes,1,opt,name=RecipePrepTask,proto3"`
	CreatedAt           *timestamppb.Timestamp `json:"CreatedAt,omitempty"           protobuf:"bytes,2,opt,name=CreatedAt,proto3"`
	LastUpdatedAt       *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty"       protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3"`
	CompletedAt         *timestamppb.Timestamp `json:"CompletedAt,omitempty"         protobuf:"bytes,4,opt,name=CompletedAt,proto3"`
	AssignedToUser      string                 `json:"AssignedToUser,omitempty"      protobuf:"bytes,5,opt,name=AssignedToUser,proto3"`
	ID                  string                 `json:"ID,omitempty"                  protobuf:"bytes,6,opt,name=ID,proto3"`
	Status              string                 `json:"Status,omitempty"              protobuf:"bytes,7,opt,name=Status,proto3"`
	CreationExplanation string                 `json:"CreationExplanation,omitempty" protobuf:"bytes,8,opt,name=CreationExplanation,proto3"`
	StatusExplanation   string                 `json:"StatusExplanation,omitempty"   protobuf:"bytes,9,opt,name=StatusExplanation,proto3"`
	MealPlanOption      *MealPlanOption        `json:"MealPlanOption,omitempty"      protobuf:"bytes,10,opt,name=MealPlanOption,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MealPlanTask) Reset() {
	*x = MealPlanTask{}
	mi := &file_messages_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanTask) ProtoMessage() {}

func (x *MealPlanTask) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanTask.ProtoReflect.Descriptor instead.
func (*MealPlanTask) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{53}
}

func (x *MealPlanTask) GetRecipePrepTask() *RecipePrepTask {
	if x != nil {
		return x.RecipePrepTask
	}
	return nil
}

func (x *MealPlanTask) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MealPlanTask) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *MealPlanTask) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *MealPlanTask) GetAssignedToUser() string {
	if x != nil {
		return x.AssignedToUser
	}
	return ""
}

func (x *MealPlanTask) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *MealPlanTask) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MealPlanTask) GetCreationExplanation() string {
	if x != nil {
		return x.CreationExplanation
	}
	return ""
}

func (x *MealPlanTask) GetStatusExplanation() string {
	if x != nil {
		return x.StatusExplanation
	}
	return ""
}

func (x *MealPlanTask) GetMealPlanOption() *MealPlanOption {
	if x != nil {
		return x.MealPlanOption
	}
	return nil
}

type MealPlanTaskCreationRequestInput struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	AssignedToUser      string                 `json:"AssignedToUser,omitempty"      protobuf:"bytes,1,opt,name=AssignedToUser,proto3"`
	Status              string                 `json:"Status,omitempty"              protobuf:"bytes,2,opt,name=Status,proto3"`
	CreationExplanation string                 `json:"CreationExplanation,omitempty" protobuf:"bytes,3,opt,name=CreationExplanation,proto3"`
	StatusExplanation   string                 `json:"StatusExplanation,omitempty"   protobuf:"bytes,4,opt,name=StatusExplanation,proto3"`
	MealPlanOptionID    string                 `json:"MealPlanOptionID,omitempty"    protobuf:"bytes,5,opt,name=MealPlanOptionID,proto3"`
	RecipePrepTaskID    string                 `json:"RecipePrepTaskID,omitempty"    protobuf:"bytes,6,opt,name=RecipePrepTaskID,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MealPlanTaskCreationRequestInput) Reset() {
	*x = MealPlanTaskCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanTaskCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanTaskCreationRequestInput) ProtoMessage() {}

func (x *MealPlanTaskCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanTaskCreationRequestInput.ProtoReflect.Descriptor instead.
func (*MealPlanTaskCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{54}
}

func (x *MealPlanTaskCreationRequestInput) GetAssignedToUser() string {
	if x != nil {
		return x.AssignedToUser
	}
	return ""
}

func (x *MealPlanTaskCreationRequestInput) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MealPlanTaskCreationRequestInput) GetCreationExplanation() string {
	if x != nil {
		return x.CreationExplanation
	}
	return ""
}

func (x *MealPlanTaskCreationRequestInput) GetStatusExplanation() string {
	if x != nil {
		return x.StatusExplanation
	}
	return ""
}

func (x *MealPlanTaskCreationRequestInput) GetMealPlanOptionID() string {
	if x != nil {
		return x.MealPlanOptionID
	}
	return ""
}

func (x *MealPlanTaskCreationRequestInput) GetRecipePrepTaskID() string {
	if x != nil {
		return x.RecipePrepTaskID
	}
	return ""
}

type MealPlanTaskDatabaseCreationEstimate struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	CreationExplanation string                 `json:"CreationExplanation,omitempty" protobuf:"bytes,1,opt,name=CreationExplanation,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MealPlanTaskDatabaseCreationEstimate) Reset() {
	*x = MealPlanTaskDatabaseCreationEstimate{}
	mi := &file_messages_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanTaskDatabaseCreationEstimate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanTaskDatabaseCreationEstimate) ProtoMessage() {}

func (x *MealPlanTaskDatabaseCreationEstimate) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanTaskDatabaseCreationEstimate.ProtoReflect.Descriptor instead.
func (*MealPlanTaskDatabaseCreationEstimate) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{55}
}

func (x *MealPlanTaskDatabaseCreationEstimate) GetCreationExplanation() string {
	if x != nil {
		return x.CreationExplanation
	}
	return ""
}

type MealPlanTaskStatusChangeRequestInput struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Status            string                 `json:"Status,omitempty"            protobuf:"bytes,1,opt,name=Status,proto3"`
	StatusExplanation string                 `json:"StatusExplanation,omitempty" protobuf:"bytes,2,opt,name=StatusExplanation,proto3"`
	AssignedToUser    string                 `json:"AssignedToUser,omitempty"    protobuf:"bytes,3,opt,name=AssignedToUser,proto3"`
	ID                string                 `json:"ID,omitempty"                protobuf:"bytes,4,opt,name=ID,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MealPlanTaskStatusChangeRequestInput) Reset() {
	*x = MealPlanTaskStatusChangeRequestInput{}
	mi := &file_messages_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanTaskStatusChangeRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanTaskStatusChangeRequestInput) ProtoMessage() {}

func (x *MealPlanTaskStatusChangeRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanTaskStatusChangeRequestInput.ProtoReflect.Descriptor instead.
func (*MealPlanTaskStatusChangeRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{56}
}

func (x *MealPlanTaskStatusChangeRequestInput) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MealPlanTaskStatusChangeRequestInput) GetStatusExplanation() string {
	if x != nil {
		return x.StatusExplanation
	}
	return ""
}

func (x *MealPlanTaskStatusChangeRequestInput) GetAssignedToUser() string {
	if x != nil {
		return x.AssignedToUser
	}
	return ""
}

func (x *MealPlanTaskStatusChangeRequestInput) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type MealPlanUpdateRequestInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	BelongsToHousehold string                 `json:"BelongsToHousehold,omitempty" protobuf:"bytes,1,opt,name=BelongsToHousehold,proto3"`
	Notes              string                 `json:"Notes,omitempty"              protobuf:"bytes,2,opt,name=Notes,proto3"`
	VotingDeadline     *timestamppb.Timestamp `json:"VotingDeadline,omitempty"     protobuf:"bytes,3,opt,name=VotingDeadline,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *MealPlanUpdateRequestInput) Reset() {
	*x = MealPlanUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealPlanUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealPlanUpdateRequestInput) ProtoMessage() {}

func (x *MealPlanUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealPlanUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*MealPlanUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{57}
}

func (x *MealPlanUpdateRequestInput) GetBelongsToHousehold() string {
	if x != nil {
		return x.BelongsToHousehold
	}
	return ""
}

func (x *MealPlanUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *MealPlanUpdateRequestInput) GetVotingDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.VotingDeadline
	}
	return nil
}

type MealUpdateRequestInput struct {
	state                protoimpl.MessageState                         `protogen:"open.v1"`
	EstimatedPortions    *Float32RangeWithOptionalMaxUpdateRequestInput `json:"EstimatedPortions,omitempty" protobuf:"bytes,4,opt,name=EstimatedPortions,proto3"`
	Name                 string                                         `json:"Name,omitempty"              protobuf:"bytes,1,opt,name=Name,proto3"`
	Description          string                                         `json:"Description,omitempty"       protobuf:"bytes,2,opt,name=Description,proto3"`
	CreatedByUser        string                                         `json:"CreatedByUser,omitempty"     protobuf:"bytes,3,opt,name=CreatedByUser,proto3"`
	Components           []*MealComponentUpdateRequestInput             `json:"Components,omitempty"        protobuf:"bytes,6,rep,name=Components,proto3"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
	EligibleForMealPlans bool `json:"EligibleForMealPlans,omitempty" protobuf:"varint,5,opt,name=EligibleForMealPlans,proto3"`
}

func (x *MealUpdateRequestInput) Reset() {
	*x = MealUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MealUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MealUpdateRequestInput) ProtoMessage() {}

func (x *MealUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MealUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*MealUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{58}
}

func (x *MealUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MealUpdateRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *MealUpdateRequestInput) GetCreatedByUser() string {
	if x != nil {
		return x.CreatedByUser
	}
	return ""
}

func (x *MealUpdateRequestInput) GetEstimatedPortions() *Float32RangeWithOptionalMaxUpdateRequestInput {
	if x != nil {
		return x.EstimatedPortions
	}
	return nil
}

func (x *MealUpdateRequestInput) GetEligibleForMealPlans() bool {
	if x != nil {
		return x.EligibleForMealPlans
	}
	return false
}

func (x *MealUpdateRequestInput) GetComponents() []*MealComponentUpdateRequestInput {
	if x != nil {
		return x.Components
	}
	return nil
}

type MissingVote struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventID       string                 `json:"EventID,omitempty"  protobuf:"bytes,1,opt,name=EventID,proto3"`
	OptionID      string                 `json:"OptionID,omitempty" protobuf:"bytes,2,opt,name=OptionID,proto3"`
	UserID        string                 `json:"UserID,omitempty"   protobuf:"bytes,3,opt,name=UserID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MissingVote) Reset() {
	*x = MissingVote{}
	mi := &file_messages_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MissingVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissingVote) ProtoMessage() {}

func (x *MissingVote) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissingVote.ProtoReflect.Descriptor instead.
func (*MissingVote) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{59}
}

func (x *MissingVote) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *MissingVote) GetOptionID() string {
	if x != nil {
		return x.OptionID
	}
	return ""
}

func (x *MissingVote) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type ModifyUserPermissionsInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reason        string                 `json:"Reason,omitempty"  protobuf:"bytes,1,opt,name=Reason,proto3"`
	NewRole       string                 `json:"NewRole,omitempty" protobuf:"bytes,2,opt,name=NewRole,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModifyUserPermissionsInput) Reset() {
	*x = ModifyUserPermissionsInput{}
	mi := &file_messages_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyUserPermissionsInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyUserPermissionsInput) ProtoMessage() {}

func (x *ModifyUserPermissionsInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyUserPermissionsInput.ProtoReflect.Descriptor instead.
func (*ModifyUserPermissionsInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{60}
}

func (x *ModifyUserPermissionsInput) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *ModifyUserPermissionsInput) GetNewRole() string {
	if x != nil {
		return x.NewRole
	}
	return ""
}

type NamedID struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ID            string                 `json:"ID,omitempty"   protobuf:"bytes,1,opt,name=ID,proto3"`
	Name          string                 `json:"Name,omitempty" protobuf:"bytes,2,opt,name=Name,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NamedID) Reset() {
	*x = NamedID{}
	mi := &file_messages_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamedID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedID) ProtoMessage() {}

func (x *NamedID) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedID.ProtoReflect.Descriptor instead.
func (*NamedID) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{61}
}

func (x *NamedID) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *NamedID) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type OAuth2Client struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp `json:"CreatedAt,omitempty"    protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	ArchivedAt    *timestamppb.Timestamp `json:"ArchivedAt,omitempty"   protobuf:"bytes,2,opt,name=ArchivedAt,proto3"`
	Name          string                 `json:"Name,omitempty"         protobuf:"bytes,3,opt,name=Name,proto3"`
	Description   string                 `json:"Description,omitempty"  protobuf:"bytes,4,opt,name=Description,proto3"`
	ClientID      string                 `json:"ClientID,omitempty"     protobuf:"bytes,5,opt,name=ClientID,proto3"`
	ID            string                 `json:"ID,omitempty"           protobuf:"bytes,6,opt,name=ID,proto3"`
	ClientSecret  string                 `json:"ClientSecret,omitempty" protobuf:"bytes,7,opt,name=ClientSecret,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OAuth2Client) Reset() {
	*x = OAuth2Client{}
	mi := &file_messages_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OAuth2Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuth2Client) ProtoMessage() {}

func (x *OAuth2Client) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuth2Client.ProtoReflect.Descriptor instead.
func (*OAuth2Client) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{62}
}

func (x *OAuth2Client) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OAuth2Client) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *OAuth2Client) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OAuth2Client) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OAuth2Client) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *OAuth2Client) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *OAuth2Client) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

type OAuth2ClientCreationRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `json:"Name,omitempty"        protobuf:"bytes,1,opt,name=Name,proto3"`
	Description   string                 `json:"Description,omitempty" protobuf:"bytes,2,opt,name=Description,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OAuth2ClientCreationRequestInput) Reset() {
	*x = OAuth2ClientCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OAuth2ClientCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuth2ClientCreationRequestInput) ProtoMessage() {}

func (x *OAuth2ClientCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuth2ClientCreationRequestInput.ProtoReflect.Descriptor instead.
func (*OAuth2ClientCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{63}
}

func (x *OAuth2ClientCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OAuth2ClientCreationRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type OAuth2ClientCreationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientID      string                 `json:"ClientID,omitempty"     protobuf:"bytes,1,opt,name=ClientID,proto3"`
	ClientSecret  string                 `json:"ClientSecret,omitempty" protobuf:"bytes,2,opt,name=ClientSecret,proto3"`
	Name          string                 `json:"Name,omitempty"         protobuf:"bytes,3,opt,name=Name,proto3"`
	Description   string                 `json:"Description,omitempty"  protobuf:"bytes,4,opt,name=Description,proto3"`
	ID            string                 `json:"ID,omitempty"           protobuf:"bytes,5,opt,name=ID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OAuth2ClientCreationResponse) Reset() {
	*x = OAuth2ClientCreationResponse{}
	mi := &file_messages_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OAuth2ClientCreationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuth2ClientCreationResponse) ProtoMessage() {}

func (x *OAuth2ClientCreationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuth2ClientCreationResponse.ProtoReflect.Descriptor instead.
func (*OAuth2ClientCreationResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{64}
}

func (x *OAuth2ClientCreationResponse) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *OAuth2ClientCreationResponse) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *OAuth2ClientCreationResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OAuth2ClientCreationResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OAuth2ClientCreationResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type OAuth2ClientToken struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	RefreshCreatedAt    *timestamppb.Timestamp `json:"RefreshCreatedAt,omitempty"    protobuf:"bytes,1,opt,name=RefreshCreatedAt,proto3"`
	AccessCreatedAt     *timestamppb.Timestamp `json:"AccessCreatedAt,omitempty"     protobuf:"bytes,2,opt,name=AccessCreatedAt,proto3"`
	CodeCreatedAt       *timestamppb.Timestamp `json:"CodeCreatedAt,omitempty"       protobuf:"bytes,3,opt,name=CodeCreatedAt,proto3"`
	RedirectURI         string                 `json:"RedirectURI,omitempty"         protobuf:"bytes,4,opt,name=RedirectURI,proto3"`
	Scope               string                 `json:"Scope,omitempty"               protobuf:"bytes,5,opt,name=Scope,proto3"`
	Code                string                 `json:"Code,omitempty"                protobuf:"bytes,6,opt,name=Code,proto3"`
	CodeChallenge       string                 `json:"CodeChallenge,omitempty"       protobuf:"bytes,7,opt,name=CodeChallenge,proto3"`
	CodeChallengeMethod string                 `json:"CodeChallengeMethod,omitempty" protobuf:"bytes,8,opt,name=CodeChallengeMethod,proto3"`
	BelongsToUser       string                 `json:"BelongsToUser,omitempty"       protobuf:"bytes,9,opt,name=BelongsToUser,proto3"`
	Access              string                 `json:"Access,omitempty"              protobuf:"bytes,10,opt,name=Access,proto3"`
	ClientID            string                 `json:"ClientID,omitempty"            protobuf:"bytes,11,opt,name=ClientID,proto3"`
	Refresh             string                 `json:"Refresh,omitempty"             protobuf:"bytes,12,opt,name=Refresh,proto3"`
	ID                  string                 `json:"ID,omitempty"                  protobuf:"bytes,13,opt,name=ID,proto3"`
	CodeExpiresAt       *durationpb.Duration   `json:"CodeExpiresAt,omitempty"       protobuf:"bytes,14,opt,name=CodeExpiresAt,proto3"`
	AccessExpiresAt     *durationpb.Duration   `json:"AccessExpiresAt,omitempty"     protobuf:"bytes,15,opt,name=AccessExpiresAt,proto3"`
	RefreshExpiresAt    *durationpb.Duration   `json:"RefreshExpiresAt,omitempty"    protobuf:"bytes,16,opt,name=RefreshExpiresAt,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *OAuth2ClientToken) Reset() {
	*x = OAuth2ClientToken{}
	mi := &file_messages_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OAuth2ClientToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OAuth2ClientToken) ProtoMessage() {}

func (x *OAuth2ClientToken) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OAuth2ClientToken.ProtoReflect.Descriptor instead.
func (*OAuth2ClientToken) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{65}
}

func (x *OAuth2ClientToken) GetRefreshCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RefreshCreatedAt
	}
	return nil
}

func (x *OAuth2ClientToken) GetAccessCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AccessCreatedAt
	}
	return nil
}

func (x *OAuth2ClientToken) GetCodeCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CodeCreatedAt
	}
	return nil
}

func (x *OAuth2ClientToken) GetRedirectURI() string {
	if x != nil {
		return x.RedirectURI
	}
	return ""
}

func (x *OAuth2ClientToken) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *OAuth2ClientToken) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *OAuth2ClientToken) GetCodeChallenge() string {
	if x != nil {
		return x.CodeChallenge
	}
	return ""
}

func (x *OAuth2ClientToken) GetCodeChallengeMethod() string {
	if x != nil {
		return x.CodeChallengeMethod
	}
	return ""
}

func (x *OAuth2ClientToken) GetBelongsToUser() string {
	if x != nil {
		return x.BelongsToUser
	}
	return ""
}

func (x *OAuth2ClientToken) GetAccess() string {
	if x != nil {
		return x.Access
	}
	return ""
}

func (x *OAuth2ClientToken) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *OAuth2ClientToken) GetRefresh() string {
	if x != nil {
		return x.Refresh
	}
	return ""
}

func (x *OAuth2ClientToken) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *OAuth2ClientToken) GetCodeExpiresAt() *durationpb.Duration {
	if x != nil {
		return x.CodeExpiresAt
	}
	return nil
}

func (x *OAuth2ClientToken) GetAccessExpiresAt() *durationpb.Duration {
	if x != nil {
		return x.AccessExpiresAt
	}
	return nil
}

func (x *OAuth2ClientToken) GetRefreshExpiresAt() *durationpb.Duration {
	if x != nil {
		return x.RefreshExpiresAt
	}
	return nil
}

type OptionalFloat32Range struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Max           *float32               `json:"Max,omitempty" protobuf:"fixed32,1,opt,name=Max,proto3,oneof"`
	Min           *float32               `json:"Min,omitempty" protobuf:"fixed32,2,opt,name=Min,proto3,oneof"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OptionalFloat32Range) Reset() {
	*x = OptionalFloat32Range{}
	mi := &file_messages_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionalFloat32Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalFloat32Range) ProtoMessage() {}

func (x *OptionalFloat32Range) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalFloat32Range.ProtoReflect.Descriptor instead.
func (*OptionalFloat32Range) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{66}
}

func (x *OptionalFloat32Range) GetMax() float32 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *OptionalFloat32Range) GetMin() float32 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

type OptionalUint32Range struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Max           *uint32                `json:"Max,omitempty" protobuf:"varint,1,opt,name=Max,proto3,oneof"`
	Min           *uint32                `json:"Min,omitempty" protobuf:"varint,2,opt,name=Min,proto3,oneof"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OptionalUint32Range) Reset() {
	*x = OptionalUint32Range{}
	mi := &file_messages_proto_msgTypes[67]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OptionalUint32Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionalUint32Range) ProtoMessage() {}

func (x *OptionalUint32Range) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[67]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionalUint32Range.ProtoReflect.Descriptor instead.
func (*OptionalUint32Range) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{67}
}

func (x *OptionalUint32Range) GetMax() uint32 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *OptionalUint32Range) GetMin() uint32 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

type PasswordResetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
	Successful    bool `json:"Successful,omitempty" protobuf:"varint,1,opt,name=Successful,proto3"`
}

func (x *PasswordResetResponse) Reset() {
	*x = PasswordResetResponse{}
	mi := &file_messages_proto_msgTypes[68]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PasswordResetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordResetResponse) ProtoMessage() {}

func (x *PasswordResetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[68]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordResetResponse.ProtoReflect.Descriptor instead.
func (*PasswordResetResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{68}
}

func (x *PasswordResetResponse) GetSuccessful() bool {
	if x != nil {
		return x.Successful
	}
	return false
}

type PasswordResetToken struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp `json:"CreatedAt,omitempty"     protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	ExpiresAt     *timestamppb.Timestamp `json:"ExpiresAt,omitempty"     protobuf:"bytes,2,opt,name=ExpiresAt,proto3"`
	RedeemedAt    *timestamppb.Timestamp `json:"RedeemedAt,omitempty"    protobuf:"bytes,3,opt,name=RedeemedAt,proto3"`
	LastUpdatedAt *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty" protobuf:"bytes,4,opt,name=LastUpdatedAt,proto3"`
	ID            string                 `json:"ID,omitempty"            protobuf:"bytes,5,opt,name=ID,proto3"`
	Token         string                 `json:"Token,omitempty"         protobuf:"bytes,6,opt,name=Token,proto3"`
	BelongsToUser string                 `json:"BelongsToUser,omitempty" protobuf:"bytes,7,opt,name=BelongsToUser,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PasswordResetToken) Reset() {
	*x = PasswordResetToken{}
	mi := &file_messages_proto_msgTypes[69]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PasswordResetToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordResetToken) ProtoMessage() {}

func (x *PasswordResetToken) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[69]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordResetToken.ProtoReflect.Descriptor instead.
func (*PasswordResetToken) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{69}
}

func (x *PasswordResetToken) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PasswordResetToken) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *PasswordResetToken) GetRedeemedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RedeemedAt
	}
	return nil
}

func (x *PasswordResetToken) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *PasswordResetToken) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PasswordResetToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *PasswordResetToken) GetBelongsToUser() string {
	if x != nil {
		return x.BelongsToUser
	}
	return ""
}

type PasswordResetTokenCreationRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EmailAddress  string                 `json:"EmailAddress,omitempty" protobuf:"bytes,1,opt,name=EmailAddress,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PasswordResetTokenCreationRequestInput) Reset() {
	*x = PasswordResetTokenCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[70]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PasswordResetTokenCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordResetTokenCreationRequestInput) ProtoMessage() {}

func (x *PasswordResetTokenCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[70]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordResetTokenCreationRequestInput.ProtoReflect.Descriptor instead.
func (*PasswordResetTokenCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{70}
}

func (x *PasswordResetTokenCreationRequestInput) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

type PasswordResetTokenRedemptionRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `json:"Token,omitempty"       protobuf:"bytes,1,opt,name=Token,proto3"`
	NewPassword   string                 `json:"NewPassword,omitempty" protobuf:"bytes,2,opt,name=NewPassword,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PasswordResetTokenRedemptionRequestInput) Reset() {
	*x = PasswordResetTokenRedemptionRequestInput{}
	mi := &file_messages_proto_msgTypes[71]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PasswordResetTokenRedemptionRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordResetTokenRedemptionRequestInput) ProtoMessage() {}

func (x *PasswordResetTokenRedemptionRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[71]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordResetTokenRedemptionRequestInput.ProtoReflect.Descriptor instead.
func (*PasswordResetTokenRedemptionRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{71}
}

func (x *PasswordResetTokenRedemptionRequestInput) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *PasswordResetTokenRedemptionRequestInput) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

type PasswordUpdateInput struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	NewPassword     string                 `json:"NewPassword,omitempty"     protobuf:"bytes,1,opt,name=NewPassword,proto3"`
	CurrentPassword string                 `json:"CurrentPassword,omitempty" protobuf:"bytes,2,opt,name=CurrentPassword,proto3"`
	TOTPToken       string                 `json:"TOTPToken,omitempty"       protobuf:"bytes,3,opt,name=TOTPToken,proto3"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PasswordUpdateInput) Reset() {
	*x = PasswordUpdateInput{}
	mi := &file_messages_proto_msgTypes[72]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PasswordUpdateInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordUpdateInput) ProtoMessage() {}

func (x *PasswordUpdateInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[72]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordUpdateInput.ProtoReflect.Descriptor instead.
func (*PasswordUpdateInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{72}
}

func (x *PasswordUpdateInput) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

func (x *PasswordUpdateInput) GetCurrentPassword() string {
	if x != nil {
		return x.CurrentPassword
	}
	return ""
}

func (x *PasswordUpdateInput) GetTOTPToken() string {
	if x != nil {
		return x.TOTPToken
	}
	return ""
}

type Recipe struct {
	EstimatedPortions   *Float32RangeWithOptionalMax `json:"EstimatedPortions,omitempty"   protobuf:"bytes,5,opt,name=EstimatedPortions,proto3"`
	CreatedAt           *timestamppb.Timestamp       `json:"CreatedAt,omitempty"           protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	state               protoimpl.MessageState       `protogen:"open.v1"`
	LastUpdatedAt       *timestamppb.Timestamp       `json:"LastUpdatedAt,omitempty"       protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3"`
	ArchivedAt          *timestamppb.Timestamp       `json:"ArchivedAt,omitempty"          protobuf:"bytes,4,opt,name=ArchivedAt,proto3"`
	ID                  string                       `json:"ID,omitempty"                  protobuf:"bytes,10,opt,name=ID,proto3"`
	YieldsComponentType string                       `json:"YieldsComponentType,omitempty" protobuf:"bytes,14,opt,name=YieldsComponentType,proto3"`
	Description         string                       `json:"Description,omitempty"         protobuf:"bytes,7,opt,name=Description,proto3"`
	Name                string                       `json:"Name,omitempty"                protobuf:"bytes,8,opt,name=Name,proto3"`
	PortionName         string                       `json:"PortionName,omitempty"         protobuf:"bytes,9,opt,name=PortionName,proto3"`
	InspiredByRecipeID  string                       `json:"InspiredByRecipeID,omitempty"  protobuf:"bytes,2,opt,name=InspiredByRecipeID,proto3"`
	CreatedByUser       string                       `json:"CreatedByUser,omitempty"       protobuf:"bytes,11,opt,name=CreatedByUser,proto3"`
	Source              string                       `json:"Source,omitempty"              protobuf:"bytes,12,opt,name=Source,proto3"`
	Slug                string                       `json:"Slug,omitempty"                protobuf:"bytes,13,opt,name=Slug,proto3"`
	PluralPortionName   string                       `json:"PluralPortionName,omitempty"   protobuf:"bytes,6,opt,name=PluralPortionName,proto3"`
	PrepTasks           []*RecipePrepTask            `json:"PrepTasks,omitempty"           protobuf:"bytes,15,rep,name=PrepTasks,proto3"`
	Steps               []*RecipeStep                `json:"Steps,omitempty"               protobuf:"bytes,16,rep,name=Steps,proto3"`
	Media               []*RecipeMedia               `json:"Media,omitempty"               protobuf:"bytes,17,rep,name=Media,proto3"`
	SupportingRecipes   []*Recipe                    `json:"SupportingRecipes,omitempty"   protobuf:"bytes,18,rep,name=SupportingRecipes,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
	SealOfApproval      bool `json:"SealOfApproval,omitempty"   protobuf:"varint,19,opt,name=SealOfApproval,proto3"`
	EligibleForMeals    bool `json:"EligibleForMeals,omitempty" protobuf:"varint,20,opt,name=EligibleForMeals,proto3"`
}

func (x *Recipe) Reset() {
	*x = Recipe{}
	mi := &file_messages_proto_msgTypes[73]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Recipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recipe) ProtoMessage() {}

func (x *Recipe) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[73]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recipe.ProtoReflect.Descriptor instead.
func (*Recipe) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{73}
}

func (x *Recipe) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Recipe) GetInspiredByRecipeID() string {
	if x != nil {
		return x.InspiredByRecipeID
	}
	return ""
}

func (x *Recipe) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *Recipe) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *Recipe) GetEstimatedPortions() *Float32RangeWithOptionalMax {
	if x != nil {
		return x.EstimatedPortions
	}
	return nil
}

func (x *Recipe) GetPluralPortionName() string {
	if x != nil {
		return x.PluralPortionName
	}
	return ""
}

func (x *Recipe) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Recipe) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Recipe) GetPortionName() string {
	if x != nil {
		return x.PortionName
	}
	return ""
}

func (x *Recipe) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Recipe) GetCreatedByUser() string {
	if x != nil {
		return x.CreatedByUser
	}
	return ""
}

func (x *Recipe) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Recipe) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Recipe) GetYieldsComponentType() string {
	if x != nil {
		return x.YieldsComponentType
	}
	return ""
}

func (x *Recipe) GetPrepTasks() []*RecipePrepTask {
	if x != nil {
		return x.PrepTasks
	}
	return nil
}

func (x *Recipe) GetSteps() []*RecipeStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *Recipe) GetMedia() []*RecipeMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *Recipe) GetSupportingRecipes() []*Recipe {
	if x != nil {
		return x.SupportingRecipes
	}
	return nil
}

func (x *Recipe) GetSealOfApproval() bool {
	if x != nil {
		return x.SealOfApproval
	}
	return false
}

func (x *Recipe) GetEligibleForMeals() bool {
	if x != nil {
		return x.EligibleForMeals
	}
	return false
}

type RecipeCreationRequestInput struct {
	state               protoimpl.MessageState                            `protogen:"open.v1"`
	EstimatedPortions   *Float32RangeWithOptionalMax                      `json:"EstimatedPortions,omitempty"   protobuf:"bytes,9,opt,name=EstimatedPortions,proto3"`
	YieldsComponentType string                                            `json:"YieldsComponentType,omitempty" protobuf:"bytes,8,opt,name=YieldsComponentType,proto3"`
	InspiredByRecipeID  string                                            `json:"InspiredByRecipeID,omitempty"  protobuf:"bytes,1,opt,name=InspiredByRecipeID,proto3"`
	Description         string                                            `json:"Description,omitempty"         protobuf:"bytes,4,opt,name=Description,proto3"`
	PluralPortionName   string                                            `json:"PluralPortionName,omitempty"   protobuf:"bytes,5,opt,name=PluralPortionName,proto3"`
	PortionName         string                                            `json:"PortionName,omitempty"         protobuf:"bytes,6,opt,name=PortionName,proto3"`
	Slug                string                                            `json:"Slug,omitempty"                protobuf:"bytes,7,opt,name=Slug,proto3"`
	Name                string                                            `json:"Name,omitempty"                protobuf:"bytes,2,opt,name=Name,proto3"`
	Source              string                                            `json:"Source,omitempty"              protobuf:"bytes,3,opt,name=Source,proto3"`
	PrepTasks           []*RecipePrepTaskWithinRecipeCreationRequestInput `json:"PrepTasks,omitempty"           protobuf:"bytes,10,rep,name=PrepTasks,proto3"`
	Steps               []*RecipeStepCreationRequestInput                 `json:"Steps,omitempty"               protobuf:"bytes,11,rep,name=Steps,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
	AlsoCreateMeal      bool `json:"AlsoCreateMeal,omitempty"   protobuf:"varint,12,opt,name=AlsoCreateMeal,proto3"`
	SealOfApproval      bool `json:"SealOfApproval,omitempty"   protobuf:"varint,13,opt,name=SealOfApproval,proto3"`
	EligibleForMeals    bool `json:"EligibleForMeals,omitempty" protobuf:"varint,14,opt,name=EligibleForMeals,proto3"`
}

func (x *RecipeCreationRequestInput) Reset() {
	*x = RecipeCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[74]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeCreationRequestInput) ProtoMessage() {}

func (x *RecipeCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[74]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{74}
}

func (x *RecipeCreationRequestInput) GetInspiredByRecipeID() string {
	if x != nil {
		return x.InspiredByRecipeID
	}
	return ""
}

func (x *RecipeCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeCreationRequestInput) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *RecipeCreationRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RecipeCreationRequestInput) GetPluralPortionName() string {
	if x != nil {
		return x.PluralPortionName
	}
	return ""
}

func (x *RecipeCreationRequestInput) GetPortionName() string {
	if x != nil {
		return x.PortionName
	}
	return ""
}

func (x *RecipeCreationRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *RecipeCreationRequestInput) GetYieldsComponentType() string {
	if x != nil {
		return x.YieldsComponentType
	}
	return ""
}

func (x *RecipeCreationRequestInput) GetEstimatedPortions() *Float32RangeWithOptionalMax {
	if x != nil {
		return x.EstimatedPortions
	}
	return nil
}

func (x *RecipeCreationRequestInput) GetPrepTasks() []*RecipePrepTaskWithinRecipeCreationRequestInput {
	if x != nil {
		return x.PrepTasks
	}
	return nil
}

func (x *RecipeCreationRequestInput) GetSteps() []*RecipeStepCreationRequestInput {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *RecipeCreationRequestInput) GetAlsoCreateMeal() bool {
	if x != nil {
		return x.AlsoCreateMeal
	}
	return false
}

func (x *RecipeCreationRequestInput) GetSealOfApproval() bool {
	if x != nil {
		return x.SealOfApproval
	}
	return false
}

func (x *RecipeCreationRequestInput) GetEligibleForMeals() bool {
	if x != nil {
		return x.EligibleForMeals
	}
	return false
}

type GetMermaidDiagramForRecipeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Response      string                 `json:"Response,omitempty" protobuf:"bytes,1,opt,name=Response,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMermaidDiagramForRecipeResponse) Reset() {
	*x = GetMermaidDiagramForRecipeResponse{}
	mi := &file_messages_proto_msgTypes[75]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMermaidDiagramForRecipeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMermaidDiagramForRecipeResponse) ProtoMessage() {}

func (x *GetMermaidDiagramForRecipeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[75]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMermaidDiagramForRecipeResponse.ProtoReflect.Descriptor instead.
func (*GetMermaidDiagramForRecipeResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{75}
}

func (x *GetMermaidDiagramForRecipeResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type RecipeMedia struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt           *timestamppb.Timestamp `json:"CreatedAt,omitempty"           protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	ArchivedAt          *timestamppb.Timestamp `json:"ArchivedAt,omitempty"          protobuf:"bytes,2,opt,name=ArchivedAt,proto3"`
	LastUpdatedAt       *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty"       protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3"`
	BelongsToRecipeStep string                 `json:"BelongsToRecipeStep,omitempty" protobuf:"bytes,6,opt,name=BelongsToRecipeStep,proto3"`
	BelongsToRecipe     string                 `json:"BelongsToRecipe,omitempty"     protobuf:"bytes,5,opt,name=BelongsToRecipe,proto3"`
	ID                  string                 `json:"ID,omitempty"                  protobuf:"bytes,4,opt,name=ID,proto3"`
	MimeType            string                 `json:"MimeType,omitempty"            protobuf:"bytes,7,opt,name=MimeType,proto3"`
	InternalPath        string                 `json:"InternalPath,omitempty"        protobuf:"bytes,8,opt,name=InternalPath,proto3"`
	ExternalPath        string                 `json:"ExternalPath,omitempty"        protobuf:"bytes,9,opt,name=ExternalPath,proto3"`
	unknownFields       protoimpl.UnknownFields
	Index               uint32 `json:"Index,omitempty" protobuf:"varint,10,opt,name=Index,proto3"`
	sizeCache           protoimpl.SizeCache
}

func (x *RecipeMedia) Reset() {
	*x = RecipeMedia{}
	mi := &file_messages_proto_msgTypes[76]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeMedia) ProtoMessage() {}

func (x *RecipeMedia) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[76]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeMedia.ProtoReflect.Descriptor instead.
func (*RecipeMedia) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{76}
}

func (x *RecipeMedia) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RecipeMedia) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *RecipeMedia) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *RecipeMedia) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RecipeMedia) GetBelongsToRecipe() string {
	if x != nil {
		return x.BelongsToRecipe
	}
	return ""
}

func (x *RecipeMedia) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeMedia) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *RecipeMedia) GetInternalPath() string {
	if x != nil {
		return x.InternalPath
	}
	return ""
}

func (x *RecipeMedia) GetExternalPath() string {
	if x != nil {
		return x.ExternalPath
	}
	return ""
}

func (x *RecipeMedia) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type RecipeMediaCreationRequestInput struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	BelongsToRecipe     string                 `json:"BelongsToRecipe,omitempty"     protobuf:"bytes,1,opt,name=BelongsToRecipe,proto3"`
	BelongsToRecipeStep string                 `json:"BelongsToRecipeStep,omitempty" protobuf:"bytes,2,opt,name=BelongsToRecipeStep,proto3"`
	MimeType            string                 `json:"MimeType,omitempty"            protobuf:"bytes,3,opt,name=MimeType,proto3"`
	InternalPath        string                 `json:"InternalPath,omitempty"        protobuf:"bytes,4,opt,name=InternalPath,proto3"`
	ExternalPath        string                 `json:"ExternalPath,omitempty"        protobuf:"bytes,5,opt,name=ExternalPath,proto3"`
	unknownFields       protoimpl.UnknownFields
	Index               uint32 `json:"Index,omitempty" protobuf:"varint,6,opt,name=Index,proto3"`
	sizeCache           protoimpl.SizeCache
}

func (x *RecipeMediaCreationRequestInput) Reset() {
	*x = RecipeMediaCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[77]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeMediaCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeMediaCreationRequestInput) ProtoMessage() {}

func (x *RecipeMediaCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[77]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeMediaCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeMediaCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{77}
}

func (x *RecipeMediaCreationRequestInput) GetBelongsToRecipe() string {
	if x != nil {
		return x.BelongsToRecipe
	}
	return ""
}

func (x *RecipeMediaCreationRequestInput) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeMediaCreationRequestInput) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *RecipeMediaCreationRequestInput) GetInternalPath() string {
	if x != nil {
		return x.InternalPath
	}
	return ""
}

func (x *RecipeMediaCreationRequestInput) GetExternalPath() string {
	if x != nil {
		return x.ExternalPath
	}
	return ""
}

func (x *RecipeMediaCreationRequestInput) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type RecipeMediaUpdateRequestInput struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	BelongsToRecipe     string                 `json:"BelongsToRecipe,omitempty"     protobuf:"bytes,1,opt,name=BelongsToRecipe,proto3"`
	BelongsToRecipeStep string                 `json:"BelongsToRecipeStep,omitempty" protobuf:"bytes,2,opt,name=BelongsToRecipeStep,proto3"`
	MimeType            string                 `json:"MimeType,omitempty"            protobuf:"bytes,3,opt,name=MimeType,proto3"`
	InternalPath        string                 `json:"InternalPath,omitempty"        protobuf:"bytes,4,opt,name=InternalPath,proto3"`
	ExternalPath        string                 `json:"ExternalPath,omitempty"        protobuf:"bytes,5,opt,name=ExternalPath,proto3"`
	unknownFields       protoimpl.UnknownFields
	Index               uint32 `json:"Index,omitempty" protobuf:"varint,6,opt,name=Index,proto3"`
	sizeCache           protoimpl.SizeCache
}

func (x *RecipeMediaUpdateRequestInput) Reset() {
	*x = RecipeMediaUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[78]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeMediaUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeMediaUpdateRequestInput) ProtoMessage() {}

func (x *RecipeMediaUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[78]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeMediaUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeMediaUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{78}
}

func (x *RecipeMediaUpdateRequestInput) GetBelongsToRecipe() string {
	if x != nil {
		return x.BelongsToRecipe
	}
	return ""
}

func (x *RecipeMediaUpdateRequestInput) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeMediaUpdateRequestInput) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *RecipeMediaUpdateRequestInput) GetInternalPath() string {
	if x != nil {
		return x.InternalPath
	}
	return ""
}

func (x *RecipeMediaUpdateRequestInput) GetExternalPath() string {
	if x != nil {
		return x.ExternalPath
	}
	return ""
}

func (x *RecipeMediaUpdateRequestInput) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type RecipePrepTask struct {
	state                           protoimpl.MessageState      `protogen:"open.v1"`
	CreatedAt                       *timestamppb.Timestamp      `json:"CreatedAt,omitempty"                       protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	StorageTemperatureInCelsius     *OptionalFloat32Range       `json:"StorageTemperatureInCelsius,omitempty"     protobuf:"bytes,2,opt,name=StorageTemperatureInCelsius,proto3"`
	TimeBufferBeforeRecipeInSeconds *Uint32RangeWithOptionalMax `json:"TimeBufferBeforeRecipeInSeconds,omitempty" protobuf:"bytes,3,opt,name=TimeBufferBeforeRecipeInSeconds,proto3"`
	ArchivedAt                      *timestamppb.Timestamp      `json:"ArchivedAt,omitempty"                      protobuf:"bytes,4,opt,name=ArchivedAt,proto3"`
	LastUpdatedAt                   *timestamppb.Timestamp      `json:"LastUpdatedAt,omitempty"                   protobuf:"bytes,5,opt,name=LastUpdatedAt,proto3"`
	BelongsToRecipe                 string                      `json:"BelongsToRecipe,omitempty"                 protobuf:"bytes,8,opt,name=BelongsToRecipe,proto3"`
	StorageType                     string                      `json:"StorageType,omitempty"                     protobuf:"bytes,7,opt,name=StorageType,proto3"`
	ID                              string                      `json:"ID,omitempty"                              protobuf:"bytes,6,opt,name=ID,proto3"`
	ExplicitStorageInstructions     string                      `json:"ExplicitStorageInstructions,omitempty"     protobuf:"bytes,9,opt,name=ExplicitStorageInstructions,proto3"`
	Notes                           string                      `json:"Notes,omitempty"                           protobuf:"bytes,10,opt,name=Notes,proto3"`
	Name                            string                      `json:"Name,omitempty"                            protobuf:"bytes,11,opt,name=Name,proto3"`
	Description                     string                      `json:"Description,omitempty"                     protobuf:"bytes,12,opt,name=Description,proto3"`
	TaskSteps                       []*RecipePrepTaskStep       `json:"TaskSteps,omitempty"                       protobuf:"bytes,13,rep,name=TaskSteps,proto3"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
	Optional                        bool `json:"Optional,omitempty" protobuf:"varint,14,opt,name=Optional,proto3"`
}

func (x *RecipePrepTask) Reset() {
	*x = RecipePrepTask{}
	mi := &file_messages_proto_msgTypes[79]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipePrepTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipePrepTask) ProtoMessage() {}

func (x *RecipePrepTask) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[79]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipePrepTask.ProtoReflect.Descriptor instead.
func (*RecipePrepTask) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{79}
}

func (x *RecipePrepTask) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RecipePrepTask) GetStorageTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.StorageTemperatureInCelsius
	}
	return nil
}

func (x *RecipePrepTask) GetTimeBufferBeforeRecipeInSeconds() *Uint32RangeWithOptionalMax {
	if x != nil {
		return x.TimeBufferBeforeRecipeInSeconds
	}
	return nil
}

func (x *RecipePrepTask) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *RecipePrepTask) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *RecipePrepTask) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RecipePrepTask) GetStorageType() string {
	if x != nil {
		return x.StorageType
	}
	return ""
}

func (x *RecipePrepTask) GetBelongsToRecipe() string {
	if x != nil {
		return x.BelongsToRecipe
	}
	return ""
}

func (x *RecipePrepTask) GetExplicitStorageInstructions() string {
	if x != nil {
		return x.ExplicitStorageInstructions
	}
	return ""
}

func (x *RecipePrepTask) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipePrepTask) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipePrepTask) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RecipePrepTask) GetTaskSteps() []*RecipePrepTaskStep {
	if x != nil {
		return x.TaskSteps
	}
	return nil
}

func (x *RecipePrepTask) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

type RecipePrepTaskCreationRequestInput struct {
	state                           protoimpl.MessageState                    `protogen:"open.v1"`
	StorageTemperatureInCelsius     *OptionalFloat32Range                     `json:"StorageTemperatureInCelsius,omitempty"     protobuf:"bytes,1,opt,name=StorageTemperatureInCelsius,proto3"`
	TimeBufferBeforeRecipeInSeconds *Uint32RangeWithOptionalMax               `json:"TimeBufferBeforeRecipeInSeconds,omitempty" protobuf:"bytes,2,opt,name=TimeBufferBeforeRecipeInSeconds,proto3"`
	Name                            string                                    `json:"Name,omitempty"                            protobuf:"bytes,6,opt,name=Name,proto3"`
	ExplicitStorageInstructions     string                                    `json:"ExplicitStorageInstructions,omitempty"     protobuf:"bytes,4,opt,name=ExplicitStorageInstructions,proto3"`
	Notes                           string                                    `json:"Notes,omitempty"                           protobuf:"bytes,5,opt,name=Notes,proto3"`
	StorageType                     string                                    `json:"StorageType,omitempty"                     protobuf:"bytes,3,opt,name=StorageType,proto3"`
	Description                     string                                    `json:"Description,omitempty"                     protobuf:"bytes,7,opt,name=Description,proto3"`
	BelongsToRecipe                 string                                    `json:"BelongsToRecipe,omitempty"                 protobuf:"bytes,8,opt,name=BelongsToRecipe,proto3"`
	RecipeSteps                     []*RecipePrepTaskStepCreationRequestInput `json:"RecipeSteps,omitempty"                     protobuf:"bytes,9,rep,name=RecipeSteps,proto3"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
	Optional                        bool `json:"Optional,omitempty" protobuf:"varint,10,opt,name=Optional,proto3"`
}

func (x *RecipePrepTaskCreationRequestInput) Reset() {
	*x = RecipePrepTaskCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[80]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipePrepTaskCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipePrepTaskCreationRequestInput) ProtoMessage() {}

func (x *RecipePrepTaskCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[80]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipePrepTaskCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipePrepTaskCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{80}
}

func (x *RecipePrepTaskCreationRequestInput) GetStorageTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.StorageTemperatureInCelsius
	}
	return nil
}

func (x *RecipePrepTaskCreationRequestInput) GetTimeBufferBeforeRecipeInSeconds() *Uint32RangeWithOptionalMax {
	if x != nil {
		return x.TimeBufferBeforeRecipeInSeconds
	}
	return nil
}

func (x *RecipePrepTaskCreationRequestInput) GetStorageType() string {
	if x != nil {
		return x.StorageType
	}
	return ""
}

func (x *RecipePrepTaskCreationRequestInput) GetExplicitStorageInstructions() string {
	if x != nil {
		return x.ExplicitStorageInstructions
	}
	return ""
}

func (x *RecipePrepTaskCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipePrepTaskCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipePrepTaskCreationRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RecipePrepTaskCreationRequestInput) GetBelongsToRecipe() string {
	if x != nil {
		return x.BelongsToRecipe
	}
	return ""
}

func (x *RecipePrepTaskCreationRequestInput) GetRecipeSteps() []*RecipePrepTaskStepCreationRequestInput {
	if x != nil {
		return x.RecipeSteps
	}
	return nil
}

func (x *RecipePrepTaskCreationRequestInput) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

type RecipePrepTaskStep struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	ID                      string                 `json:"ID,omitempty"                      protobuf:"bytes,1,opt,name=ID,proto3"`
	BelongsToRecipeStep     string                 `json:"BelongsToRecipeStep,omitempty"     protobuf:"bytes,2,opt,name=BelongsToRecipeStep,proto3"`
	BelongsToRecipePrepTask string                 `json:"BelongsToRecipePrepTask,omitempty" protobuf:"bytes,3,opt,name=BelongsToRecipePrepTask,proto3"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
	SatisfiesRecipeStep     bool `json:"SatisfiesRecipeStep,omitempty" protobuf:"varint,4,opt,name=SatisfiesRecipeStep,proto3"`
}

func (x *RecipePrepTaskStep) Reset() {
	*x = RecipePrepTaskStep{}
	mi := &file_messages_proto_msgTypes[81]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipePrepTaskStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipePrepTaskStep) ProtoMessage() {}

func (x *RecipePrepTaskStep) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[81]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipePrepTaskStep.ProtoReflect.Descriptor instead.
func (*RecipePrepTaskStep) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{81}
}

func (x *RecipePrepTaskStep) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RecipePrepTaskStep) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipePrepTaskStep) GetBelongsToRecipePrepTask() string {
	if x != nil {
		return x.BelongsToRecipePrepTask
	}
	return ""
}

func (x *RecipePrepTaskStep) GetSatisfiesRecipeStep() bool {
	if x != nil {
		return x.SatisfiesRecipeStep
	}
	return false
}

type RecipePrepTaskStepCreationRequestInput struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	BelongsToRecipeStep string                 `json:"BelongsToRecipeStep,omitempty" protobuf:"bytes,1,opt,name=BelongsToRecipeStep,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
	SatisfiesRecipeStep bool `json:"SatisfiesRecipeStep,omitempty" protobuf:"varint,2,opt,name=SatisfiesRecipeStep,proto3"`
}

func (x *RecipePrepTaskStepCreationRequestInput) Reset() {
	*x = RecipePrepTaskStepCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[82]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipePrepTaskStepCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipePrepTaskStepCreationRequestInput) ProtoMessage() {}

func (x *RecipePrepTaskStepCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[82]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipePrepTaskStepCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipePrepTaskStepCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{82}
}

func (x *RecipePrepTaskStepCreationRequestInput) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipePrepTaskStepCreationRequestInput) GetSatisfiesRecipeStep() bool {
	if x != nil {
		return x.SatisfiesRecipeStep
	}
	return false
}

type RecipePrepTaskStepUpdateRequestInput struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	BelongsToRecipeStep     string                 `json:"BelongsToRecipeStep,omitempty"     protobuf:"bytes,2,opt,name=BelongsToRecipeStep,proto3"`
	BelongsToRecipePrepTask string                 `json:"BelongsToRecipePrepTask,omitempty" protobuf:"bytes,3,opt,name=BelongsToRecipePrepTask,proto3"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
	SatisfiesRecipeStep     bool `json:"SatisfiesRecipeStep,omitempty" protobuf:"varint,1,opt,name=SatisfiesRecipeStep,proto3"`
}

func (x *RecipePrepTaskStepUpdateRequestInput) Reset() {
	*x = RecipePrepTaskStepUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[83]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipePrepTaskStepUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipePrepTaskStepUpdateRequestInput) ProtoMessage() {}

func (x *RecipePrepTaskStepUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[83]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipePrepTaskStepUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*RecipePrepTaskStepUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{83}
}

func (x *RecipePrepTaskStepUpdateRequestInput) GetSatisfiesRecipeStep() bool {
	if x != nil {
		return x.SatisfiesRecipeStep
	}
	return false
}

func (x *RecipePrepTaskStepUpdateRequestInput) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipePrepTaskStepUpdateRequestInput) GetBelongsToRecipePrepTask() string {
	if x != nil {
		return x.BelongsToRecipePrepTask
	}
	return ""
}

type RecipePrepTaskStepWithinRecipeCreationRequestInput struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	unknownFields            protoimpl.UnknownFields
	BelongsToRecipeStepIndex uint32 `json:"BelongsToRecipeStepIndex,omitempty" protobuf:"varint,1,opt,name=BelongsToRecipeStepIndex,proto3"`
	sizeCache                protoimpl.SizeCache
	SatisfiesRecipeStep      bool `json:"SatisfiesRecipeStep,omitempty" protobuf:"varint,2,opt,name=SatisfiesRecipeStep,proto3"`
}

func (x *RecipePrepTaskStepWithinRecipeCreationRequestInput) Reset() {
	*x = RecipePrepTaskStepWithinRecipeCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[84]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipePrepTaskStepWithinRecipeCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipePrepTaskStepWithinRecipeCreationRequestInput) ProtoMessage() {}

func (x *RecipePrepTaskStepWithinRecipeCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[84]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipePrepTaskStepWithinRecipeCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipePrepTaskStepWithinRecipeCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{84}
}

func (x *RecipePrepTaskStepWithinRecipeCreationRequestInput) GetBelongsToRecipeStepIndex() uint32 {
	if x != nil {
		return x.BelongsToRecipeStepIndex
	}
	return 0
}

func (x *RecipePrepTaskStepWithinRecipeCreationRequestInput) GetSatisfiesRecipeStep() bool {
	if x != nil {
		return x.SatisfiesRecipeStep
	}
	return false
}

type RecipePrepTaskUpdateRequestInput struct {
	state                           protoimpl.MessageState                        `protogen:"open.v1"`
	TimeBufferBeforeRecipeInSeconds *Uint32RangeWithOptionalMaxUpdateRequestInput `json:"TimeBufferBeforeRecipeInSeconds,omitempty" protobuf:"bytes,8,opt,name=TimeBufferBeforeRecipeInSeconds,proto3"`
	StorageTemperatureInCelsius     *OptionalFloat32Range                         `json:"StorageTemperatureInCelsius,omitempty"     protobuf:"bytes,7,opt,name=StorageTemperatureInCelsius,proto3"`
	Description                     string                                        `json:"Description,omitempty"                     protobuf:"bytes,6,opt,name=Description,proto3"`
	Name                            string                                        `json:"Name,omitempty"                            protobuf:"bytes,4,opt,name=Name,proto3"`
	StorageType                     string                                        `json:"StorageType,omitempty"                     protobuf:"bytes,3,opt,name=StorageType,proto3"`
	ExplicitStorageInstructions     string                                        `json:"ExplicitStorageInstructions,omitempty"     protobuf:"bytes,2,opt,name=ExplicitStorageInstructions,proto3"`
	Notes                           string                                        `json:"Notes,omitempty"                           protobuf:"bytes,1,opt,name=Notes,proto3"`
	BelongsToRecipe                 string                                        `json:"BelongsToRecipe,omitempty"                 protobuf:"bytes,9,opt,name=BelongsToRecipe,proto3"`
	TaskSteps                       []*RecipePrepTaskStepUpdateRequestInput       `json:"TaskSteps,omitempty"                       protobuf:"bytes,10,rep,name=TaskSteps,proto3"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
	Optional                        bool `json:"Optional,omitempty" protobuf:"varint,5,opt,name=Optional,proto3"`
}

func (x *RecipePrepTaskUpdateRequestInput) Reset() {
	*x = RecipePrepTaskUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[85]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipePrepTaskUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipePrepTaskUpdateRequestInput) ProtoMessage() {}

func (x *RecipePrepTaskUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[85]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipePrepTaskUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*RecipePrepTaskUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{85}
}

func (x *RecipePrepTaskUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipePrepTaskUpdateRequestInput) GetExplicitStorageInstructions() string {
	if x != nil {
		return x.ExplicitStorageInstructions
	}
	return ""
}

func (x *RecipePrepTaskUpdateRequestInput) GetStorageType() string {
	if x != nil {
		return x.StorageType
	}
	return ""
}

func (x *RecipePrepTaskUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipePrepTaskUpdateRequestInput) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *RecipePrepTaskUpdateRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RecipePrepTaskUpdateRequestInput) GetStorageTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.StorageTemperatureInCelsius
	}
	return nil
}

func (x *RecipePrepTaskUpdateRequestInput) GetTimeBufferBeforeRecipeInSeconds() *Uint32RangeWithOptionalMaxUpdateRequestInput {
	if x != nil {
		return x.TimeBufferBeforeRecipeInSeconds
	}
	return nil
}

func (x *RecipePrepTaskUpdateRequestInput) GetBelongsToRecipe() string {
	if x != nil {
		return x.BelongsToRecipe
	}
	return ""
}

func (x *RecipePrepTaskUpdateRequestInput) GetTaskSteps() []*RecipePrepTaskStepUpdateRequestInput {
	if x != nil {
		return x.TaskSteps
	}
	return nil
}

type RecipePrepTaskWithinRecipeCreationRequestInput struct {
	state                           protoimpl.MessageState                                `protogen:"open.v1"`
	StorageTemperatureInCelsius     *OptionalFloat32Range                                 `json:"StorageTemperatureInCelsius,omitempty"     protobuf:"bytes,1,opt,name=StorageTemperatureInCelsius,proto3"`
	TimeBufferBeforeRecipeInSeconds *Uint32RangeWithOptionalMax                           `json:"TimeBufferBeforeRecipeInSeconds,omitempty" protobuf:"bytes,2,opt,name=TimeBufferBeforeRecipeInSeconds,proto3"`
	ExplicitStorageInstructions     string                                                `json:"ExplicitStorageInstructions,omitempty"     protobuf:"bytes,6,opt,name=ExplicitStorageInstructions,proto3"`
	Name                            string                                                `json:"Name,omitempty"                            protobuf:"bytes,4,opt,name=Name,proto3"`
	Description                     string                                                `json:"Description,omitempty"                     protobuf:"bytes,5,opt,name=Description,proto3"`
	StorageType                     string                                                `json:"StorageType,omitempty"                     protobuf:"bytes,3,opt,name=StorageType,proto3"`
	Notes                           string                                                `json:"Notes,omitempty"                           protobuf:"bytes,7,opt,name=Notes,proto3"`
	BelongsToRecipe                 string                                                `json:"BelongsToRecipe,omitempty"                 protobuf:"bytes,8,opt,name=BelongsToRecipe,proto3"`
	RecipeSteps                     []*RecipePrepTaskStepWithinRecipeCreationRequestInput `json:"RecipeSteps,omitempty"                     protobuf:"bytes,9,rep,name=RecipeSteps,proto3"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
	Optional                        bool `json:"Optional,omitempty" protobuf:"varint,10,opt,name=Optional,proto3"`
}

func (x *RecipePrepTaskWithinRecipeCreationRequestInput) Reset() {
	*x = RecipePrepTaskWithinRecipeCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[86]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipePrepTaskWithinRecipeCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipePrepTaskWithinRecipeCreationRequestInput) ProtoMessage() {}

func (x *RecipePrepTaskWithinRecipeCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[86]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipePrepTaskWithinRecipeCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipePrepTaskWithinRecipeCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{86}
}

func (x *RecipePrepTaskWithinRecipeCreationRequestInput) GetStorageTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.StorageTemperatureInCelsius
	}
	return nil
}

func (x *RecipePrepTaskWithinRecipeCreationRequestInput) GetTimeBufferBeforeRecipeInSeconds() *Uint32RangeWithOptionalMax {
	if x != nil {
		return x.TimeBufferBeforeRecipeInSeconds
	}
	return nil
}

func (x *RecipePrepTaskWithinRecipeCreationRequestInput) GetStorageType() string {
	if x != nil {
		return x.StorageType
	}
	return ""
}

func (x *RecipePrepTaskWithinRecipeCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipePrepTaskWithinRecipeCreationRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RecipePrepTaskWithinRecipeCreationRequestInput) GetExplicitStorageInstructions() string {
	if x != nil {
		return x.ExplicitStorageInstructions
	}
	return ""
}

func (x *RecipePrepTaskWithinRecipeCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipePrepTaskWithinRecipeCreationRequestInput) GetBelongsToRecipe() string {
	if x != nil {
		return x.BelongsToRecipe
	}
	return ""
}

func (x *RecipePrepTaskWithinRecipeCreationRequestInput) GetRecipeSteps() []*RecipePrepTaskStepWithinRecipeCreationRequestInput {
	if x != nil {
		return x.RecipeSteps
	}
	return nil
}

func (x *RecipePrepTaskWithinRecipeCreationRequestInput) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

type RecipeRating struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp `json:"CreatedAt,omitempty"     protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	LastUpdatedAt *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty" protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3"`
	ArchivedAt    *timestamppb.Timestamp `json:"ArchivedAt,omitempty"    protobuf:"bytes,3,opt,name=ArchivedAt,proto3"`
	RecipeID      string                 `json:"RecipeID,omitempty"      protobuf:"bytes,6,opt,name=RecipeID,proto3"`
	ID            string                 `json:"ID,omitempty"            protobuf:"bytes,5,opt,name=ID,proto3"`
	Notes         string                 `json:"Notes,omitempty"         protobuf:"bytes,4,opt,name=Notes,proto3"`
	ByUser        string                 `json:"ByUser,omitempty"        protobuf:"bytes,7,opt,name=ByUser,proto3"`
	unknownFields protoimpl.UnknownFields
	Taste         float32 `json:"Taste,omitempty"        protobuf:"fixed32,8,opt,name=Taste,proto3"`
	Instructions  float32 `json:"Instructions,omitempty" protobuf:"fixed32,9,opt,name=Instructions,proto3"`
	Overall       float32 `json:"Overall,omitempty"      protobuf:"fixed32,10,opt,name=Overall,proto3"`
	Cleanup       float32 `json:"Cleanup,omitempty"      protobuf:"fixed32,11,opt,name=Cleanup,proto3"`
	Difficulty    float32 `json:"Difficulty,omitempty"   protobuf:"fixed32,12,opt,name=Difficulty,proto3"`
	sizeCache     protoimpl.SizeCache
}

func (x *RecipeRating) Reset() {
	*x = RecipeRating{}
	mi := &file_messages_proto_msgTypes[87]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeRating) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeRating) ProtoMessage() {}

func (x *RecipeRating) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[87]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeRating.ProtoReflect.Descriptor instead.
func (*RecipeRating) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{87}
}

func (x *RecipeRating) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RecipeRating) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *RecipeRating) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *RecipeRating) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeRating) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RecipeRating) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *RecipeRating) GetByUser() string {
	if x != nil {
		return x.ByUser
	}
	return ""
}

func (x *RecipeRating) GetTaste() float32 {
	if x != nil {
		return x.Taste
	}
	return 0
}

func (x *RecipeRating) GetInstructions() float32 {
	if x != nil {
		return x.Instructions
	}
	return 0
}

func (x *RecipeRating) GetOverall() float32 {
	if x != nil {
		return x.Overall
	}
	return 0
}

func (x *RecipeRating) GetCleanup() float32 {
	if x != nil {
		return x.Cleanup
	}
	return 0
}

func (x *RecipeRating) GetDifficulty() float32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

type RecipeRatingCreationRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecipeID      string                 `json:"RecipeID,omitempty" protobuf:"bytes,1,opt,name=RecipeID,proto3"`
	Notes         string                 `json:"Notes,omitempty"    protobuf:"bytes,2,opt,name=Notes,proto3"`
	ByUser        string                 `json:"ByUser,omitempty"   protobuf:"bytes,3,opt,name=ByUser,proto3"`
	unknownFields protoimpl.UnknownFields
	Taste         float32 `json:"Taste,omitempty"        protobuf:"fixed32,4,opt,name=Taste,proto3"`
	Difficulty    float32 `json:"Difficulty,omitempty"   protobuf:"fixed32,5,opt,name=Difficulty,proto3"`
	Cleanup       float32 `json:"Cleanup,omitempty"      protobuf:"fixed32,6,opt,name=Cleanup,proto3"`
	Instructions  float32 `json:"Instructions,omitempty" protobuf:"fixed32,7,opt,name=Instructions,proto3"`
	Overall       float32 `json:"Overall,omitempty"      protobuf:"fixed32,8,opt,name=Overall,proto3"`
	sizeCache     protoimpl.SizeCache
}

func (x *RecipeRatingCreationRequestInput) Reset() {
	*x = RecipeRatingCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[88]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeRatingCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeRatingCreationRequestInput) ProtoMessage() {}

func (x *RecipeRatingCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[88]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeRatingCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeRatingCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{88}
}

func (x *RecipeRatingCreationRequestInput) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *RecipeRatingCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeRatingCreationRequestInput) GetByUser() string {
	if x != nil {
		return x.ByUser
	}
	return ""
}

func (x *RecipeRatingCreationRequestInput) GetTaste() float32 {
	if x != nil {
		return x.Taste
	}
	return 0
}

func (x *RecipeRatingCreationRequestInput) GetDifficulty() float32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *RecipeRatingCreationRequestInput) GetCleanup() float32 {
	if x != nil {
		return x.Cleanup
	}
	return 0
}

func (x *RecipeRatingCreationRequestInput) GetInstructions() float32 {
	if x != nil {
		return x.Instructions
	}
	return 0
}

func (x *RecipeRatingCreationRequestInput) GetOverall() float32 {
	if x != nil {
		return x.Overall
	}
	return 0
}

type RecipeRatingUpdateRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecipeID      string                 `json:"RecipeID,omitempty" protobuf:"bytes,1,opt,name=RecipeID,proto3"`
	Notes         string                 `json:"Notes,omitempty"    protobuf:"bytes,7,opt,name=Notes,proto3"`
	ByUser        string                 `json:"ByUser,omitempty"   protobuf:"bytes,8,opt,name=ByUser,proto3"`
	unknownFields protoimpl.UnknownFields
	Taste         float32 `json:"Taste,omitempty"        protobuf:"fixed32,2,opt,name=Taste,proto3"`
	Difficulty    float32 `json:"Difficulty,omitempty"   protobuf:"fixed32,3,opt,name=Difficulty,proto3"`
	Cleanup       float32 `json:"Cleanup,omitempty"      protobuf:"fixed32,4,opt,name=Cleanup,proto3"`
	Instructions  float32 `json:"Instructions,omitempty" protobuf:"fixed32,5,opt,name=Instructions,proto3"`
	Overall       float32 `json:"Overall,omitempty"      protobuf:"fixed32,6,opt,name=Overall,proto3"`
	sizeCache     protoimpl.SizeCache
}

func (x *RecipeRatingUpdateRequestInput) Reset() {
	*x = RecipeRatingUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[89]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeRatingUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeRatingUpdateRequestInput) ProtoMessage() {}

func (x *RecipeRatingUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[89]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeRatingUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeRatingUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{89}
}

func (x *RecipeRatingUpdateRequestInput) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *RecipeRatingUpdateRequestInput) GetTaste() float32 {
	if x != nil {
		return x.Taste
	}
	return 0
}

func (x *RecipeRatingUpdateRequestInput) GetDifficulty() float32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

func (x *RecipeRatingUpdateRequestInput) GetCleanup() float32 {
	if x != nil {
		return x.Cleanup
	}
	return 0
}

func (x *RecipeRatingUpdateRequestInput) GetInstructions() float32 {
	if x != nil {
		return x.Instructions
	}
	return 0
}

func (x *RecipeRatingUpdateRequestInput) GetOverall() float32 {
	if x != nil {
		return x.Overall
	}
	return 0
}

func (x *RecipeRatingUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeRatingUpdateRequestInput) GetByUser() string {
	if x != nil {
		return x.ByUser
	}
	return ""
}

type RecipeStep struct {
	state                   protoimpl.MessageState           `protogen:"open.v1"`
	CreatedAt               *timestamppb.Timestamp           `json:"CreatedAt,omitempty"              protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	EstimatedTimeInSeconds  *OptionalUint32Range             `json:"EstimatedTimeInSeconds,omitempty" protobuf:"bytes,2,opt,name=EstimatedTimeInSeconds,proto3"`
	TemperatureInCelsius    *OptionalFloat32Range            `json:"TemperatureInCelsius,omitempty"   protobuf:"bytes,3,opt,name=TemperatureInCelsius,proto3"`
	ArchivedAt              *timestamppb.Timestamp           `json:"ArchivedAt,omitempty"             protobuf:"bytes,4,opt,name=ArchivedAt,proto3"`
	LastUpdatedAt           *timestamppb.Timestamp           `json:"LastUpdatedAt,omitempty"          protobuf:"bytes,5,opt,name=LastUpdatedAt,proto3"`
	Preparation             *ValidPreparation                `json:"Preparation,omitempty"            protobuf:"bytes,17,opt,name=Preparation,proto3"`
	ExplicitInstructions    string                           `json:"ExplicitInstructions,omitempty"   protobuf:"bytes,10,opt,name=ExplicitInstructions,proto3"`
	BelongsToRecipe         string                           `json:"BelongsToRecipe,omitempty"        protobuf:"bytes,6,opt,name=BelongsToRecipe,proto3"`
	Notes                   string                           `json:"Notes,omitempty"                  protobuf:"bytes,9,opt,name=Notes,proto3"`
	ConditionExpression     string                           `json:"ConditionExpression,omitempty"    protobuf:"bytes,7,opt,name=ConditionExpression,proto3"`
	ID                      string                           `json:"ID,omitempty"                     protobuf:"bytes,8,opt,name=ID,proto3"`
	Media                   []*RecipeMedia                   `json:"Media,omitempty"                  protobuf:"bytes,11,rep,name=Media,proto3"`
	Instruments             []*RecipeStepInstrument          `json:"Instruments,omitempty"            protobuf:"bytes,13,rep,name=Instruments,proto3"`
	Vessels                 []*RecipeStepVessel              `json:"Vessels,omitempty"                protobuf:"bytes,14,rep,name=Vessels,proto3"`
	CompletionConditions    []*RecipeStepCompletionCondition `json:"CompletionConditions,omitempty"   protobuf:"bytes,15,rep,name=CompletionConditions,proto3"`
	Ingredients             []*RecipeStepIngredient          `json:"Ingredients,omitempty"            protobuf:"bytes,16,rep,name=Ingredients,proto3"`
	Products                []*RecipeStepProduct             `json:"Products,omitempty"               protobuf:"bytes,12,rep,name=Products,proto3"`
	unknownFields           protoimpl.UnknownFields
	Index                   uint32 `json:"Index,omitempty" protobuf:"varint,18,opt,name=Index,proto3"`
	sizeCache               protoimpl.SizeCache
	Optional                bool `json:"Optional,omitempty"                protobuf:"varint,19,opt,name=Optional,proto3"`
	StartTimerAutomatically bool `json:"StartTimerAutomatically,omitempty" protobuf:"varint,20,opt,name=StartTimerAutomatically,proto3"`
}

func (x *RecipeStep) Reset() {
	*x = RecipeStep{}
	mi := &file_messages_proto_msgTypes[90]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStep) ProtoMessage() {}

func (x *RecipeStep) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[90]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStep.ProtoReflect.Descriptor instead.
func (*RecipeStep) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{90}
}

func (x *RecipeStep) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RecipeStep) GetEstimatedTimeInSeconds() *OptionalUint32Range {
	if x != nil {
		return x.EstimatedTimeInSeconds
	}
	return nil
}

func (x *RecipeStep) GetTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.TemperatureInCelsius
	}
	return nil
}

func (x *RecipeStep) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *RecipeStep) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *RecipeStep) GetBelongsToRecipe() string {
	if x != nil {
		return x.BelongsToRecipe
	}
	return ""
}

func (x *RecipeStep) GetConditionExpression() string {
	if x != nil {
		return x.ConditionExpression
	}
	return ""
}

func (x *RecipeStep) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RecipeStep) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeStep) GetExplicitInstructions() string {
	if x != nil {
		return x.ExplicitInstructions
	}
	return ""
}

func (x *RecipeStep) GetMedia() []*RecipeMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *RecipeStep) GetProducts() []*RecipeStepProduct {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *RecipeStep) GetInstruments() []*RecipeStepInstrument {
	if x != nil {
		return x.Instruments
	}
	return nil
}

func (x *RecipeStep) GetVessels() []*RecipeStepVessel {
	if x != nil {
		return x.Vessels
	}
	return nil
}

func (x *RecipeStep) GetCompletionConditions() []*RecipeStepCompletionCondition {
	if x != nil {
		return x.CompletionConditions
	}
	return nil
}

func (x *RecipeStep) GetIngredients() []*RecipeStepIngredient {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

func (x *RecipeStep) GetPreparation() *ValidPreparation {
	if x != nil {
		return x.Preparation
	}
	return nil
}

func (x *RecipeStep) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RecipeStep) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *RecipeStep) GetStartTimerAutomatically() bool {
	if x != nil {
		return x.StartTimerAutomatically
	}
	return false
}

type RecipeStepCompletionCondition struct {
	state               protoimpl.MessageState                     `protogen:"open.v1"`
	CreatedAt           *timestamppb.Timestamp                     `json:"CreatedAt,omitempty"           protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	ArchivedAt          *timestamppb.Timestamp                     `json:"ArchivedAt,omitempty"          protobuf:"bytes,2,opt,name=ArchivedAt,proto3"`
	LastUpdatedAt       *timestamppb.Timestamp                     `json:"LastUpdatedAt,omitempty"       protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3"`
	IngredientState     *ValidIngredientState                      `json:"IngredientState,omitempty"     protobuf:"bytes,4,opt,name=IngredientState,proto3"`
	ID                  string                                     `json:"ID,omitempty"                  protobuf:"bytes,5,opt,name=ID,proto3"`
	BelongsToRecipeStep string                                     `json:"BelongsToRecipeStep,omitempty" protobuf:"bytes,6,opt,name=BelongsToRecipeStep,proto3"`
	Notes               string                                     `json:"Notes,omitempty"               protobuf:"bytes,7,opt,name=Notes,proto3"`
	Ingredients         []*RecipeStepCompletionConditionIngredient `json:"Ingredients,omitempty"         protobuf:"bytes,8,rep,name=Ingredients,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
	Optional            bool `json:"Optional,omitempty" protobuf:"varint,9,opt,name=Optional,proto3"`
}

func (x *RecipeStepCompletionCondition) Reset() {
	*x = RecipeStepCompletionCondition{}
	mi := &file_messages_proto_msgTypes[91]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepCompletionCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepCompletionCondition) ProtoMessage() {}

func (x *RecipeStepCompletionCondition) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[91]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepCompletionCondition.ProtoReflect.Descriptor instead.
func (*RecipeStepCompletionCondition) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{91}
}

func (x *RecipeStepCompletionCondition) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RecipeStepCompletionCondition) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *RecipeStepCompletionCondition) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *RecipeStepCompletionCondition) GetIngredientState() *ValidIngredientState {
	if x != nil {
		return x.IngredientState
	}
	return nil
}

func (x *RecipeStepCompletionCondition) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RecipeStepCompletionCondition) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeStepCompletionCondition) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeStepCompletionCondition) GetIngredients() []*RecipeStepCompletionConditionIngredient {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

func (x *RecipeStepCompletionCondition) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

type RecipeStepCompletionConditionCreationRequestInput struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	IngredientStateID   string                 `json:"IngredientStateID,omitempty"   protobuf:"bytes,1,opt,name=IngredientStateID,proto3"`
	BelongsToRecipeStep string                 `json:"BelongsToRecipeStep,omitempty" protobuf:"bytes,2,opt,name=BelongsToRecipeStep,proto3"`
	Notes               string                 `json:"Notes,omitempty"               protobuf:"bytes,3,opt,name=Notes,proto3"`
	Ingredients         []uint64               `json:"Ingredients,omitempty"         protobuf:"varint,4,rep,packed,name=Ingredients,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
	Optional            bool `json:"Optional,omitempty" protobuf:"varint,5,opt,name=Optional,proto3"`
}

func (x *RecipeStepCompletionConditionCreationRequestInput) Reset() {
	*x = RecipeStepCompletionConditionCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[92]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepCompletionConditionCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepCompletionConditionCreationRequestInput) ProtoMessage() {}

func (x *RecipeStepCompletionConditionCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[92]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepCompletionConditionCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepCompletionConditionCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{92}
}

func (x *RecipeStepCompletionConditionCreationRequestInput) GetIngredientStateID() string {
	if x != nil {
		return x.IngredientStateID
	}
	return ""
}

func (x *RecipeStepCompletionConditionCreationRequestInput) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeStepCompletionConditionCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeStepCompletionConditionCreationRequestInput) GetIngredients() []uint64 {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

func (x *RecipeStepCompletionConditionCreationRequestInput) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

type RecipeStepCompletionConditionForExistingRecipeCreationRequestInput struct {
	state               protoimpl.MessageState                                                          `protogen:"open.v1"`
	IngredientStateID   string                                                                          `json:"IngredientStateID,omitempty"   protobuf:"bytes,1,opt,name=IngredientStateID,proto3"`
	BelongsToRecipeStep string                                                                          `json:"BelongsToRecipeStep,omitempty" protobuf:"bytes,2,opt,name=BelongsToRecipeStep,proto3"`
	Notes               string                                                                          `json:"Notes,omitempty"               protobuf:"bytes,3,opt,name=Notes,proto3"`
	Ingredients         []*RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput `json:"Ingredients,omitempty"         protobuf:"bytes,4,rep,name=Ingredients,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
	Optional            bool `json:"Optional,omitempty" protobuf:"varint,5,opt,name=Optional,proto3"`
}

func (x *RecipeStepCompletionConditionForExistingRecipeCreationRequestInput) Reset() {
	*x = RecipeStepCompletionConditionForExistingRecipeCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[93]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepCompletionConditionForExistingRecipeCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepCompletionConditionForExistingRecipeCreationRequestInput) ProtoMessage() {}

func (x *RecipeStepCompletionConditionForExistingRecipeCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[93]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepCompletionConditionForExistingRecipeCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepCompletionConditionForExistingRecipeCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{93}
}

func (x *RecipeStepCompletionConditionForExistingRecipeCreationRequestInput) GetIngredientStateID() string {
	if x != nil {
		return x.IngredientStateID
	}
	return ""
}

func (x *RecipeStepCompletionConditionForExistingRecipeCreationRequestInput) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeStepCompletionConditionForExistingRecipeCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeStepCompletionConditionForExistingRecipeCreationRequestInput) GetIngredients() []*RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

func (x *RecipeStepCompletionConditionForExistingRecipeCreationRequestInput) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

type RecipeStepCompletionConditionIngredient struct {
	state                                  protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt                              *timestamppb.Timestamp `json:"CreatedAt,omitempty"                              protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	ArchivedAt                             *timestamppb.Timestamp `json:"ArchivedAt,omitempty"                             protobuf:"bytes,2,opt,name=ArchivedAt,proto3"`
	LastUpdatedAt                          *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty"                          protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3"`
	ID                                     string                 `json:"ID,omitempty"                                     protobuf:"bytes,4,opt,name=ID,proto3"`
	BelongsToRecipeStepCompletionCondition string                 `json:"BelongsToRecipeStepCompletionCondition,omitempty" protobuf:"bytes,5,opt,name=BelongsToRecipeStepCompletionCondition,proto3"`
	RecipeStepIngredient                   string                 `json:"RecipeStepIngredient,omitempty"                   protobuf:"bytes,6,opt,name=RecipeStepIngredient,proto3"`
	unknownFields                          protoimpl.UnknownFields
	sizeCache                              protoimpl.SizeCache
}

func (x *RecipeStepCompletionConditionIngredient) Reset() {
	*x = RecipeStepCompletionConditionIngredient{}
	mi := &file_messages_proto_msgTypes[94]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepCompletionConditionIngredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepCompletionConditionIngredient) ProtoMessage() {}

func (x *RecipeStepCompletionConditionIngredient) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[94]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepCompletionConditionIngredient.ProtoReflect.Descriptor instead.
func (*RecipeStepCompletionConditionIngredient) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{94}
}

func (x *RecipeStepCompletionConditionIngredient) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RecipeStepCompletionConditionIngredient) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *RecipeStepCompletionConditionIngredient) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *RecipeStepCompletionConditionIngredient) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RecipeStepCompletionConditionIngredient) GetBelongsToRecipeStepCompletionCondition() string {
	if x != nil {
		return x.BelongsToRecipeStepCompletionCondition
	}
	return ""
}

func (x *RecipeStepCompletionConditionIngredient) GetRecipeStepIngredient() string {
	if x != nil {
		return x.RecipeStepIngredient
	}
	return ""
}

type RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	RecipeStepIngredient string                 `json:"RecipeStepIngredient,omitempty" protobuf:"bytes,1,opt,name=RecipeStepIngredient,proto3"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput) Reset() {
	*x = RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[95]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput) ProtoMessage() {}

func (x *RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[95]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{95}
}

func (x *RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput) GetRecipeStepIngredient() string {
	if x != nil {
		return x.RecipeStepIngredient
	}
	return ""
}

type RecipeStepCompletionConditionUpdateRequestInput struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	IngredientStateID   string                 `json:"IngredientStateID,omitempty"   protobuf:"bytes,1,opt,name=IngredientStateID,proto3"`
	BelongsToRecipeStep string                 `json:"BelongsToRecipeStep,omitempty" protobuf:"bytes,2,opt,name=BelongsToRecipeStep,proto3"`
	Notes               string                 `json:"Notes,omitempty"               protobuf:"bytes,3,opt,name=Notes,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
	Optional            bool `json:"Optional,omitempty" protobuf:"varint,4,opt,name=Optional,proto3"`
}

func (x *RecipeStepCompletionConditionUpdateRequestInput) Reset() {
	*x = RecipeStepCompletionConditionUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[96]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepCompletionConditionUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepCompletionConditionUpdateRequestInput) ProtoMessage() {}

func (x *RecipeStepCompletionConditionUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[96]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepCompletionConditionUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepCompletionConditionUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{96}
}

func (x *RecipeStepCompletionConditionUpdateRequestInput) GetIngredientStateID() string {
	if x != nil {
		return x.IngredientStateID
	}
	return ""
}

func (x *RecipeStepCompletionConditionUpdateRequestInput) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeStepCompletionConditionUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeStepCompletionConditionUpdateRequestInput) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

type RecipeStepCreationRequestInput struct {
	state                   protoimpl.MessageState                               `protogen:"open.v1"`
	EstimatedTimeInSeconds  *OptionalUint32Range                                 `json:"EstimatedTimeInSeconds,omitempty" protobuf:"bytes,1,opt,name=EstimatedTimeInSeconds,proto3"`
	TemperatureInCelsius    *OptionalFloat32Range                                `json:"TemperatureInCelsius,omitempty"   protobuf:"bytes,2,opt,name=TemperatureInCelsius,proto3"`
	PreparationID           string                                               `json:"PreparationID,omitempty"          protobuf:"bytes,3,opt,name=PreparationID,proto3"`
	Notes                   string                                               `json:"Notes,omitempty"                  protobuf:"bytes,4,opt,name=Notes,proto3"`
	ConditionExpression     string                                               `json:"ConditionExpression,omitempty"    protobuf:"bytes,5,opt,name=ConditionExpression,proto3"`
	ExplicitInstructions    string                                               `json:"ExplicitInstructions,omitempty"   protobuf:"bytes,6,opt,name=ExplicitInstructions,proto3"`
	Vessels                 []*RecipeStepVesselCreationRequestInput              `json:"Vessels,omitempty"                protobuf:"bytes,8,rep,name=Vessels,proto3"`
	Instruments             []*RecipeStepInstrumentCreationRequestInput          `json:"Instruments,omitempty"            protobuf:"bytes,7,rep,name=Instruments,proto3"`
	Products                []*RecipeStepProductCreationRequestInput             `json:"Products,omitempty"               protobuf:"bytes,9,rep,name=Products,proto3"`
	Ingredients             []*RecipeStepIngredientCreationRequestInput          `json:"Ingredients,omitempty"            protobuf:"bytes,10,rep,name=Ingredients,proto3"`
	CompletionConditions    []*RecipeStepCompletionConditionCreationRequestInput `json:"CompletionConditions,omitempty"   protobuf:"bytes,11,rep,name=CompletionConditions,proto3"`
	unknownFields           protoimpl.UnknownFields
	Index                   uint32 `json:"Index,omitempty" protobuf:"varint,12,opt,name=Index,proto3"`
	sizeCache               protoimpl.SizeCache
	Optional                bool `json:"Optional,omitempty"                protobuf:"varint,13,opt,name=Optional,proto3"`
	StartTimerAutomatically bool `json:"StartTimerAutomatically,omitempty" protobuf:"varint,14,opt,name=StartTimerAutomatically,proto3"`
}

func (x *RecipeStepCreationRequestInput) Reset() {
	*x = RecipeStepCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[97]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepCreationRequestInput) ProtoMessage() {}

func (x *RecipeStepCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[97]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{97}
}

func (x *RecipeStepCreationRequestInput) GetEstimatedTimeInSeconds() *OptionalUint32Range {
	if x != nil {
		return x.EstimatedTimeInSeconds
	}
	return nil
}

func (x *RecipeStepCreationRequestInput) GetTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.TemperatureInCelsius
	}
	return nil
}

func (x *RecipeStepCreationRequestInput) GetPreparationID() string {
	if x != nil {
		return x.PreparationID
	}
	return ""
}

func (x *RecipeStepCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeStepCreationRequestInput) GetConditionExpression() string {
	if x != nil {
		return x.ConditionExpression
	}
	return ""
}

func (x *RecipeStepCreationRequestInput) GetExplicitInstructions() string {
	if x != nil {
		return x.ExplicitInstructions
	}
	return ""
}

func (x *RecipeStepCreationRequestInput) GetInstruments() []*RecipeStepInstrumentCreationRequestInput {
	if x != nil {
		return x.Instruments
	}
	return nil
}

func (x *RecipeStepCreationRequestInput) GetVessels() []*RecipeStepVesselCreationRequestInput {
	if x != nil {
		return x.Vessels
	}
	return nil
}

func (x *RecipeStepCreationRequestInput) GetProducts() []*RecipeStepProductCreationRequestInput {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *RecipeStepCreationRequestInput) GetIngredients() []*RecipeStepIngredientCreationRequestInput {
	if x != nil {
		return x.Ingredients
	}
	return nil
}

func (x *RecipeStepCreationRequestInput) GetCompletionConditions() []*RecipeStepCompletionConditionCreationRequestInput {
	if x != nil {
		return x.CompletionConditions
	}
	return nil
}

func (x *RecipeStepCreationRequestInput) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RecipeStepCreationRequestInput) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *RecipeStepCreationRequestInput) GetStartTimerAutomatically() bool {
	if x != nil {
		return x.StartTimerAutomatically
	}
	return false
}

type RecipeStepIngredient struct {
	MeasurementUnit           *ValidMeasurementUnit        `json:"MeasurementUnit,omitempty"           protobuf:"bytes,15,opt,name=MeasurementUnit,proto3"`
	state                     protoimpl.MessageState       `protogen:"open.v1"`
	Quantity                  *Float32RangeWithOptionalMax `json:"Quantity,omitempty"                  protobuf:"bytes,14,opt,name=Quantity,proto3"`
	ArchivedAt                *timestamppb.Timestamp       `json:"ArchivedAt,omitempty"                protobuf:"bytes,3,opt,name=ArchivedAt,proto3"`
	Ingredient                *ValidIngredient             `json:"Ingredient,omitempty"                protobuf:"bytes,4,opt,name=Ingredient,proto3"`
	LastUpdatedAt             *timestamppb.Timestamp       `json:"LastUpdatedAt,omitempty"             protobuf:"bytes,5,opt,name=LastUpdatedAt,proto3"`
	CreatedAt                 *timestamppb.Timestamp       `json:"CreatedAt,omitempty"                 protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	RecipeStepProductRecipeID string                       `json:"RecipeStepProductRecipeID,omitempty" protobuf:"bytes,2,opt,name=RecipeStepProductRecipeID,proto3"`
	RecipeStepProductID       string                       `json:"RecipeStepProductID,omitempty"       protobuf:"bytes,8,opt,name=RecipeStepProductID,proto3"`
	BelongsToRecipeStep       string                       `json:"BelongsToRecipeStep,omitempty"       protobuf:"bytes,9,opt,name=BelongsToRecipeStep,proto3"`
	QuantityNotes             string                       `json:"QuantityNotes,omitempty"             protobuf:"bytes,11,opt,name=QuantityNotes,proto3"`
	IngredientNotes           string                       `json:"IngredientNotes,omitempty"           protobuf:"bytes,12,opt,name=IngredientNotes,proto3"`
	Name                      string                       `json:"Name,omitempty"                      protobuf:"bytes,13,opt,name=Name,proto3"`
	ID                        string                       `json:"ID,omitempty"                        protobuf:"bytes,10,opt,name=ID,proto3"`
	unknownFields             protoimpl.UnknownFields
	VesselIndex               uint32  `json:"VesselIndex,omitempty"            protobuf:"varint,6,opt,name=VesselIndex,proto3"`
	OptionIndex               uint32  `json:"OptionIndex,omitempty"            protobuf:"varint,16,opt,name=OptionIndex,proto3"`
	ProductPercentageToUse    float32 `json:"ProductPercentageToUse,omitempty" protobuf:"fixed32,7,opt,name=ProductPercentageToUse,proto3"`
	sizeCache                 protoimpl.SizeCache
	Optional                  bool `json:"Optional,omitempty" protobuf:"varint,17,opt,name=Optional,proto3"`
	ToTaste                   bool `json:"ToTaste,omitempty"  protobuf:"varint,18,opt,name=ToTaste,proto3"`
}

func (x *RecipeStepIngredient) Reset() {
	*x = RecipeStepIngredient{}
	mi := &file_messages_proto_msgTypes[98]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepIngredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepIngredient) ProtoMessage() {}

func (x *RecipeStepIngredient) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[98]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepIngredient.ProtoReflect.Descriptor instead.
func (*RecipeStepIngredient) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{98}
}

func (x *RecipeStepIngredient) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RecipeStepIngredient) GetRecipeStepProductRecipeID() string {
	if x != nil {
		return x.RecipeStepProductRecipeID
	}
	return ""
}

func (x *RecipeStepIngredient) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *RecipeStepIngredient) GetIngredient() *ValidIngredient {
	if x != nil {
		return x.Ingredient
	}
	return nil
}

func (x *RecipeStepIngredient) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *RecipeStepIngredient) GetVesselIndex() uint32 {
	if x != nil {
		return x.VesselIndex
	}
	return 0
}

func (x *RecipeStepIngredient) GetProductPercentageToUse() float32 {
	if x != nil {
		return x.ProductPercentageToUse
	}
	return 0
}

func (x *RecipeStepIngredient) GetRecipeStepProductID() string {
	if x != nil {
		return x.RecipeStepProductID
	}
	return ""
}

func (x *RecipeStepIngredient) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeStepIngredient) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RecipeStepIngredient) GetQuantityNotes() string {
	if x != nil {
		return x.QuantityNotes
	}
	return ""
}

func (x *RecipeStepIngredient) GetIngredientNotes() string {
	if x != nil {
		return x.IngredientNotes
	}
	return ""
}

func (x *RecipeStepIngredient) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeStepIngredient) GetQuantity() *Float32RangeWithOptionalMax {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *RecipeStepIngredient) GetMeasurementUnit() *ValidMeasurementUnit {
	if x != nil {
		return x.MeasurementUnit
	}
	return nil
}

func (x *RecipeStepIngredient) GetOptionIndex() uint32 {
	if x != nil {
		return x.OptionIndex
	}
	return 0
}

func (x *RecipeStepIngredient) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *RecipeStepIngredient) GetToTaste() bool {
	if x != nil {
		return x.ToTaste
	}
	return false
}

type RecipeStepIngredientCreationRequestInput struct {
	Quantity                        *Float32RangeWithOptionalMax `json:"Quantity,omitempty"                  protobuf:"bytes,11,opt,name=Quantity,proto3"`
	state                           protoimpl.MessageState       `protogen:"open.v1"`
	IngredientID                    string                       `json:"IngredientID,omitempty"              protobuf:"bytes,1,opt,name=IngredientID,proto3"`
	RecipeStepProductRecipeID       string                       `json:"RecipeStepProductRecipeID,omitempty" protobuf:"bytes,6,opt,name=RecipeStepProductRecipeID,proto3"`
	IngredientNotes                 string                       `json:"IngredientNotes,omitempty"           protobuf:"bytes,7,opt,name=IngredientNotes,proto3"`
	MeasurementUnitID               string                       `json:"MeasurementUnitID,omitempty"         protobuf:"bytes,8,opt,name=MeasurementUnitID,proto3"`
	Name                            string                       `json:"Name,omitempty"                      protobuf:"bytes,9,opt,name=Name,proto3"`
	QuantityNotes                   string                       `json:"QuantityNotes,omitempty"             protobuf:"bytes,10,opt,name=QuantityNotes,proto3"`
	unknownFields                   protoimpl.UnknownFields
	ProductOfRecipeStepIndex        uint64  `json:"ProductOfRecipeStepIndex,omitempty"        protobuf:"varint,2,opt,name=ProductOfRecipeStepIndex,proto3"`
	ProductOfRecipeStepProductIndex uint64  `json:"ProductOfRecipeStepProductIndex,omitempty" protobuf:"varint,3,opt,name=ProductOfRecipeStepProductIndex,proto3"`
	VesselIndex                     uint32  `json:"VesselIndex,omitempty"                     protobuf:"varint,4,opt,name=VesselIndex,proto3"`
	OptionIndex                     uint32  `json:"OptionIndex,omitempty"                     protobuf:"varint,12,opt,name=OptionIndex,proto3"`
	ProductPercentageToUse          float32 `json:"ProductPercentageToUse,omitempty"          protobuf:"fixed32,5,opt,name=ProductPercentageToUse,proto3"`
	sizeCache                       protoimpl.SizeCache
	Optional                        bool `json:"Optional,omitempty" protobuf:"varint,13,opt,name=Optional,proto3"`
	ToTaste                         bool `json:"ToTaste,omitempty"  protobuf:"varint,14,opt,name=ToTaste,proto3"`
}

func (x *RecipeStepIngredientCreationRequestInput) Reset() {
	*x = RecipeStepIngredientCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[99]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepIngredientCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepIngredientCreationRequestInput) ProtoMessage() {}

func (x *RecipeStepIngredientCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[99]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepIngredientCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepIngredientCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{99}
}

func (x *RecipeStepIngredientCreationRequestInput) GetIngredientID() string {
	if x != nil {
		return x.IngredientID
	}
	return ""
}

func (x *RecipeStepIngredientCreationRequestInput) GetProductOfRecipeStepIndex() uint64 {
	if x != nil {
		return x.ProductOfRecipeStepIndex
	}
	return 0
}

func (x *RecipeStepIngredientCreationRequestInput) GetProductOfRecipeStepProductIndex() uint64 {
	if x != nil {
		return x.ProductOfRecipeStepProductIndex
	}
	return 0
}

func (x *RecipeStepIngredientCreationRequestInput) GetVesselIndex() uint32 {
	if x != nil {
		return x.VesselIndex
	}
	return 0
}

func (x *RecipeStepIngredientCreationRequestInput) GetProductPercentageToUse() float32 {
	if x != nil {
		return x.ProductPercentageToUse
	}
	return 0
}

func (x *RecipeStepIngredientCreationRequestInput) GetRecipeStepProductRecipeID() string {
	if x != nil {
		return x.RecipeStepProductRecipeID
	}
	return ""
}

func (x *RecipeStepIngredientCreationRequestInput) GetIngredientNotes() string {
	if x != nil {
		return x.IngredientNotes
	}
	return ""
}

func (x *RecipeStepIngredientCreationRequestInput) GetMeasurementUnitID() string {
	if x != nil {
		return x.MeasurementUnitID
	}
	return ""
}

func (x *RecipeStepIngredientCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeStepIngredientCreationRequestInput) GetQuantityNotes() string {
	if x != nil {
		return x.QuantityNotes
	}
	return ""
}

func (x *RecipeStepIngredientCreationRequestInput) GetQuantity() *Float32RangeWithOptionalMax {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *RecipeStepIngredientCreationRequestInput) GetOptionIndex() uint32 {
	if x != nil {
		return x.OptionIndex
	}
	return 0
}

func (x *RecipeStepIngredientCreationRequestInput) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *RecipeStepIngredientCreationRequestInput) GetToTaste() bool {
	if x != nil {
		return x.ToTaste
	}
	return false
}

type RecipeStepIngredientUpdateRequestInput struct {
	state                     protoimpl.MessageState                         `protogen:"open.v1"`
	Quantity                  *Float32RangeWithOptionalMaxUpdateRequestInput `json:"Quantity,omitempty"                  protobuf:"bytes,9,opt,name=Quantity,proto3"`
	Name                      string                                         `json:"Name,omitempty"                      protobuf:"bytes,3,opt,name=Name,proto3"`
	RecipeStepProductID       string                                         `json:"RecipeStepProductID,omitempty"       protobuf:"bytes,2,opt,name=RecipeStepProductID,proto3"`
	MeasurementUnitID         string                                         `json:"MeasurementUnitID,omitempty"         protobuf:"bytes,5,opt,name=MeasurementUnitID,proto3"`
	QuantityNotes             string                                         `json:"QuantityNotes,omitempty"             protobuf:"bytes,6,opt,name=QuantityNotes,proto3"`
	IngredientNotes           string                                         `json:"IngredientNotes,omitempty"           protobuf:"bytes,7,opt,name=IngredientNotes,proto3"`
	BelongsToRecipeStep       string                                         `json:"BelongsToRecipeStep,omitempty"       protobuf:"bytes,8,opt,name=BelongsToRecipeStep,proto3"`
	IngredientID              string                                         `json:"IngredientID,omitempty"              protobuf:"bytes,1,opt,name=IngredientID,proto3"`
	RecipeStepProductRecipeID string                                         `json:"RecipeStepProductRecipeID,omitempty" protobuf:"bytes,14,opt,name=RecipeStepProductRecipeID,proto3"`
	unknownFields             protoimpl.UnknownFields
	OptionIndex               uint32 `json:"OptionIndex,omitempty" protobuf:"varint,10,opt,name=OptionIndex,proto3"`
	VesselIndex               uint32 `json:"VesselIndex,omitempty" protobuf:"varint,11,opt,name=VesselIndex,proto3"`
	sizeCache                 protoimpl.SizeCache
	ProductPercentageToUse    float32 `json:"ProductPercentageToUse,omitempty" protobuf:"fixed32,13,opt,name=ProductPercentageToUse,proto3"`
	Optional                  bool    `json:"Optional,omitempty"               protobuf:"varint,4,opt,name=Optional,proto3"`
	ToTaste                   bool    `json:"ToTaste,omitempty"                protobuf:"varint,12,opt,name=ToTaste,proto3"`
}

func (x *RecipeStepIngredientUpdateRequestInput) Reset() {
	*x = RecipeStepIngredientUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[100]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepIngredientUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepIngredientUpdateRequestInput) ProtoMessage() {}

func (x *RecipeStepIngredientUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[100]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepIngredientUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepIngredientUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{100}
}

func (x *RecipeStepIngredientUpdateRequestInput) GetIngredientID() string {
	if x != nil {
		return x.IngredientID
	}
	return ""
}

func (x *RecipeStepIngredientUpdateRequestInput) GetRecipeStepProductID() string {
	if x != nil {
		return x.RecipeStepProductID
	}
	return ""
}

func (x *RecipeStepIngredientUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeStepIngredientUpdateRequestInput) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *RecipeStepIngredientUpdateRequestInput) GetMeasurementUnitID() string {
	if x != nil {
		return x.MeasurementUnitID
	}
	return ""
}

func (x *RecipeStepIngredientUpdateRequestInput) GetQuantityNotes() string {
	if x != nil {
		return x.QuantityNotes
	}
	return ""
}

func (x *RecipeStepIngredientUpdateRequestInput) GetIngredientNotes() string {
	if x != nil {
		return x.IngredientNotes
	}
	return ""
}

func (x *RecipeStepIngredientUpdateRequestInput) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeStepIngredientUpdateRequestInput) GetQuantity() *Float32RangeWithOptionalMaxUpdateRequestInput {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *RecipeStepIngredientUpdateRequestInput) GetOptionIndex() uint32 {
	if x != nil {
		return x.OptionIndex
	}
	return 0
}

func (x *RecipeStepIngredientUpdateRequestInput) GetVesselIndex() uint32 {
	if x != nil {
		return x.VesselIndex
	}
	return 0
}

func (x *RecipeStepIngredientUpdateRequestInput) GetToTaste() bool {
	if x != nil {
		return x.ToTaste
	}
	return false
}

func (x *RecipeStepIngredientUpdateRequestInput) GetProductPercentageToUse() float32 {
	if x != nil {
		return x.ProductPercentageToUse
	}
	return 0
}

func (x *RecipeStepIngredientUpdateRequestInput) GetRecipeStepProductRecipeID() string {
	if x != nil {
		return x.RecipeStepProductRecipeID
	}
	return ""
}

type RecipeStepInstrument struct {
	state               protoimpl.MessageState      `protogen:"open.v1"`
	CreatedAt           *timestamppb.Timestamp      `json:"CreatedAt,omitempty"           protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	Instrument          *ValidInstrument            `json:"Instrument,omitempty"          protobuf:"bytes,2,opt,name=Instrument,proto3"`
	LastUpdatedAt       *timestamppb.Timestamp      `json:"LastUpdatedAt,omitempty"       protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3"`
	Quantity            *Uint32RangeWithOptionalMax `json:"Quantity,omitempty"            protobuf:"bytes,10,opt,name=Quantity,proto3"`
	ArchivedAt          *timestamppb.Timestamp      `json:"ArchivedAt,omitempty"          protobuf:"bytes,5,opt,name=ArchivedAt,proto3"`
	BelongsToRecipeStep string                      `json:"BelongsToRecipeStep,omitempty" protobuf:"bytes,8,opt,name=BelongsToRecipeStep,proto3"`
	Name                string                      `json:"Name,omitempty"                protobuf:"bytes,7,opt,name=Name,proto3"`
	Notes               string                      `json:"Notes,omitempty"               protobuf:"bytes,6,opt,name=Notes,proto3"`
	ID                  string                      `json:"ID,omitempty"                  protobuf:"bytes,9,opt,name=ID,proto3"`
	RecipeStepProductID string                      `json:"RecipeStepProductID,omitempty" protobuf:"bytes,4,opt,name=RecipeStepProductID,proto3"`
	unknownFields       protoimpl.UnknownFields
	OptionIndex         uint32 `json:"OptionIndex,omitempty"    protobuf:"varint,11,opt,name=OptionIndex,proto3"`
	PreferenceRank      uint32 `json:"PreferenceRank,omitempty" protobuf:"varint,12,opt,name=PreferenceRank,proto3"`
	sizeCache           protoimpl.SizeCache
	Optional            bool `json:"Optional,omitempty" protobuf:"varint,13,opt,name=Optional,proto3"`
}

func (x *RecipeStepInstrument) Reset() {
	*x = RecipeStepInstrument{}
	mi := &file_messages_proto_msgTypes[101]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepInstrument) ProtoMessage() {}

func (x *RecipeStepInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[101]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepInstrument.ProtoReflect.Descriptor instead.
func (*RecipeStepInstrument) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{101}
}

func (x *RecipeStepInstrument) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RecipeStepInstrument) GetInstrument() *ValidInstrument {
	if x != nil {
		return x.Instrument
	}
	return nil
}

func (x *RecipeStepInstrument) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *RecipeStepInstrument) GetRecipeStepProductID() string {
	if x != nil {
		return x.RecipeStepProductID
	}
	return ""
}

func (x *RecipeStepInstrument) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *RecipeStepInstrument) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeStepInstrument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeStepInstrument) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeStepInstrument) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RecipeStepInstrument) GetQuantity() *Uint32RangeWithOptionalMax {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *RecipeStepInstrument) GetOptionIndex() uint32 {
	if x != nil {
		return x.OptionIndex
	}
	return 0
}

func (x *RecipeStepInstrument) GetPreferenceRank() uint32 {
	if x != nil {
		return x.PreferenceRank
	}
	return 0
}

func (x *RecipeStepInstrument) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

type RecipeStepInstrumentCreationRequestInput struct {
	state                           protoimpl.MessageState      `protogen:"open.v1"`
	Quantity                        *Uint32RangeWithOptionalMax `json:"Quantity,omitempty"            protobuf:"bytes,5,opt,name=Quantity,proto3"`
	Name                            string                      `json:"Name,omitempty"                protobuf:"bytes,7,opt,name=Name,proto3"`
	InstrumentID                    string                      `json:"InstrumentID,omitempty"        protobuf:"bytes,1,opt,name=InstrumentID,proto3"`
	RecipeStepProductID             string                      `json:"RecipeStepProductID,omitempty" protobuf:"bytes,2,opt,name=RecipeStepProductID,proto3"`
	Notes                           string                      `json:"Notes,omitempty"               protobuf:"bytes,6,opt,name=Notes,proto3"`
	unknownFields                   protoimpl.UnknownFields
	ProductOfRecipeStepIndex        uint64 `json:"ProductOfRecipeStepIndex,omitempty"        protobuf:"varint,3,opt,name=ProductOfRecipeStepIndex,proto3"`
	ProductOfRecipeStepProductIndex uint64 `json:"ProductOfRecipeStepProductIndex,omitempty" protobuf:"varint,4,opt,name=ProductOfRecipeStepProductIndex,proto3"`
	OptionIndex                     uint32 `json:"OptionIndex,omitempty"                     protobuf:"varint,8,opt,name=OptionIndex,proto3"`
	PreferenceRank                  uint32 `json:"PreferenceRank,omitempty"                  protobuf:"varint,10,opt,name=PreferenceRank,proto3"`
	sizeCache                       protoimpl.SizeCache
	Optional                        bool `json:"Optional,omitempty" protobuf:"varint,9,opt,name=Optional,proto3"`
}

func (x *RecipeStepInstrumentCreationRequestInput) Reset() {
	*x = RecipeStepInstrumentCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[102]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepInstrumentCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepInstrumentCreationRequestInput) ProtoMessage() {}

func (x *RecipeStepInstrumentCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[102]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepInstrumentCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepInstrumentCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{102}
}

func (x *RecipeStepInstrumentCreationRequestInput) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *RecipeStepInstrumentCreationRequestInput) GetRecipeStepProductID() string {
	if x != nil {
		return x.RecipeStepProductID
	}
	return ""
}

func (x *RecipeStepInstrumentCreationRequestInput) GetProductOfRecipeStepIndex() uint64 {
	if x != nil {
		return x.ProductOfRecipeStepIndex
	}
	return 0
}

func (x *RecipeStepInstrumentCreationRequestInput) GetProductOfRecipeStepProductIndex() uint64 {
	if x != nil {
		return x.ProductOfRecipeStepProductIndex
	}
	return 0
}

func (x *RecipeStepInstrumentCreationRequestInput) GetQuantity() *Uint32RangeWithOptionalMax {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *RecipeStepInstrumentCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeStepInstrumentCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeStepInstrumentCreationRequestInput) GetOptionIndex() uint32 {
	if x != nil {
		return x.OptionIndex
	}
	return 0
}

func (x *RecipeStepInstrumentCreationRequestInput) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *RecipeStepInstrumentCreationRequestInput) GetPreferenceRank() uint32 {
	if x != nil {
		return x.PreferenceRank
	}
	return 0
}

type RecipeStepInstrumentUpdateRequestInput struct {
	state               protoimpl.MessageState                        `protogen:"open.v1"`
	Quantity            *Uint32RangeWithOptionalMaxUpdateRequestInput `json:"Quantity,omitempty"            protobuf:"bytes,9,opt,name=Quantity,proto3"`
	InstrumentID        string                                        `json:"InstrumentID,omitempty"        protobuf:"bytes,1,opt,name=InstrumentID,proto3"`
	RecipeStepProductID string                                        `json:"RecipeStepProductID,omitempty" protobuf:"bytes,2,opt,name=RecipeStepProductID,proto3"`
	Notes               string                                        `json:"Notes,omitempty"               protobuf:"bytes,3,opt,name=Notes,proto3"`
	BelongsToRecipeStep string                                        `json:"BelongsToRecipeStep,omitempty" protobuf:"bytes,5,opt,name=BelongsToRecipeStep,proto3"`
	Name                string                                        `json:"Name,omitempty"                protobuf:"bytes,6,opt,name=Name,proto3"`
	unknownFields       protoimpl.UnknownFields
	PreferenceRank      uint32 `json:"PreferenceRank,omitempty" protobuf:"varint,4,opt,name=PreferenceRank,proto3"`
	OptionIndex         uint32 `json:"OptionIndex,omitempty"    protobuf:"varint,8,opt,name=OptionIndex,proto3"`
	sizeCache           protoimpl.SizeCache
	Optional            bool `json:"Optional,omitempty" protobuf:"varint,7,opt,name=Optional,proto3"`
}

func (x *RecipeStepInstrumentUpdateRequestInput) Reset() {
	*x = RecipeStepInstrumentUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[103]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepInstrumentUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepInstrumentUpdateRequestInput) ProtoMessage() {}

func (x *RecipeStepInstrumentUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[103]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepInstrumentUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepInstrumentUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{103}
}

func (x *RecipeStepInstrumentUpdateRequestInput) GetInstrumentID() string {
	if x != nil {
		return x.InstrumentID
	}
	return ""
}

func (x *RecipeStepInstrumentUpdateRequestInput) GetRecipeStepProductID() string {
	if x != nil {
		return x.RecipeStepProductID
	}
	return ""
}

func (x *RecipeStepInstrumentUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeStepInstrumentUpdateRequestInput) GetPreferenceRank() uint32 {
	if x != nil {
		return x.PreferenceRank
	}
	return 0
}

func (x *RecipeStepInstrumentUpdateRequestInput) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeStepInstrumentUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeStepInstrumentUpdateRequestInput) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *RecipeStepInstrumentUpdateRequestInput) GetOptionIndex() uint32 {
	if x != nil {
		return x.OptionIndex
	}
	return 0
}

func (x *RecipeStepInstrumentUpdateRequestInput) GetQuantity() *Uint32RangeWithOptionalMaxUpdateRequestInput {
	if x != nil {
		return x.Quantity
	}
	return nil
}

type RecipeStepProduct struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt                   *timestamppb.Timestamp `json:"CreatedAt,omitempty"                   protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	StorageTemperatureInCelsius *OptionalFloat32Range  `json:"StorageTemperatureInCelsius,omitempty" protobuf:"bytes,2,opt,name=StorageTemperatureInCelsius,proto3"`
	StorageDurationInSeconds    *OptionalUint32Range   `json:"StorageDurationInSeconds,omitempty"    protobuf:"bytes,3,opt,name=StorageDurationInSeconds,proto3"`
	Quantity                    *OptionalFloat32Range  `json:"Quantity,omitempty"                    protobuf:"bytes,4,opt,name=Quantity,proto3"`
	ArchivedAt                  *timestamppb.Timestamp `json:"ArchivedAt,omitempty"                  protobuf:"bytes,5,opt,name=ArchivedAt,proto3"`
	LastUpdatedAt               *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty"               protobuf:"bytes,6,opt,name=LastUpdatedAt,proto3"`
	MeasurementUnit             *ValidMeasurementUnit  `json:"MeasurementUnit,omitempty"             protobuf:"bytes,7,opt,name=MeasurementUnit,proto3"`
	BelongsToRecipeStep         string                 `json:"BelongsToRecipeStep,omitempty"         protobuf:"bytes,10,opt,name=BelongsToRecipeStep,proto3"`
	Name                        string                 `json:"Name,omitempty"                        protobuf:"bytes,9,opt,name=Name,proto3"`
	Type                        string                 `json:"Type,omitempty"                        protobuf:"bytes,11,opt,name=Type,proto3"`
	ID                          string                 `json:"ID,omitempty"                          protobuf:"bytes,12,opt,name=ID,proto3"`
	StorageInstructions         string                 `json:"StorageInstructions,omitempty"         protobuf:"bytes,13,opt,name=StorageInstructions,proto3"`
	QuantityNotes               string                 `json:"QuantityNotes,omitempty"               protobuf:"bytes,14,opt,name=QuantityNotes,proto3"`
	unknownFields               protoimpl.UnknownFields
	ContainedInVesselIndex      uint32 `json:"ContainedInVesselIndex,omitempty" protobuf:"varint,8,opt,name=ContainedInVesselIndex,proto3"`
	Index                       uint32 `json:"Index,omitempty"                  protobuf:"varint,15,opt,name=Index,proto3"`
	sizeCache                   protoimpl.SizeCache
	IsWaste                     bool `json:"IsWaste,omitempty"     protobuf:"varint,16,opt,name=IsWaste,proto3"`
	IsLiquid                    bool `json:"IsLiquid,omitempty"    protobuf:"varint,17,opt,name=IsLiquid,proto3"`
	Compostable                 bool `json:"Compostable,omitempty" protobuf:"varint,18,opt,name=Compostable,proto3"`
}

func (x *RecipeStepProduct) Reset() {
	*x = RecipeStepProduct{}
	mi := &file_messages_proto_msgTypes[104]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepProduct) ProtoMessage() {}

func (x *RecipeStepProduct) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[104]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepProduct.ProtoReflect.Descriptor instead.
func (*RecipeStepProduct) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{104}
}

func (x *RecipeStepProduct) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RecipeStepProduct) GetStorageTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.StorageTemperatureInCelsius
	}
	return nil
}

func (x *RecipeStepProduct) GetStorageDurationInSeconds() *OptionalUint32Range {
	if x != nil {
		return x.StorageDurationInSeconds
	}
	return nil
}

func (x *RecipeStepProduct) GetQuantity() *OptionalFloat32Range {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *RecipeStepProduct) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *RecipeStepProduct) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *RecipeStepProduct) GetMeasurementUnit() *ValidMeasurementUnit {
	if x != nil {
		return x.MeasurementUnit
	}
	return nil
}

func (x *RecipeStepProduct) GetContainedInVesselIndex() uint32 {
	if x != nil {
		return x.ContainedInVesselIndex
	}
	return 0
}

func (x *RecipeStepProduct) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeStepProduct) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeStepProduct) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RecipeStepProduct) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RecipeStepProduct) GetStorageInstructions() string {
	if x != nil {
		return x.StorageInstructions
	}
	return ""
}

func (x *RecipeStepProduct) GetQuantityNotes() string {
	if x != nil {
		return x.QuantityNotes
	}
	return ""
}

func (x *RecipeStepProduct) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RecipeStepProduct) GetIsWaste() bool {
	if x != nil {
		return x.IsWaste
	}
	return false
}

func (x *RecipeStepProduct) GetIsLiquid() bool {
	if x != nil {
		return x.IsLiquid
	}
	return false
}

func (x *RecipeStepProduct) GetCompostable() bool {
	if x != nil {
		return x.Compostable
	}
	return false
}

type RecipeStepProductCreationRequestInput struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	StorageTemperatureInCelsius *OptionalFloat32Range  `json:"StorageTemperatureInCelsius,omitempty" protobuf:"bytes,1,opt,name=StorageTemperatureInCelsius,proto3"`
	StorageDurationInSeconds    *OptionalUint32Range   `json:"StorageDurationInSeconds,omitempty"    protobuf:"bytes,2,opt,name=StorageDurationInSeconds,proto3"`
	Quantity                    *OptionalFloat32Range  `json:"Quantity,omitempty"                    protobuf:"bytes,3,opt,name=Quantity,proto3"`
	StorageInstructions         string                 `json:"StorageInstructions,omitempty"         protobuf:"bytes,8,opt,name=StorageInstructions,proto3"`
	QuantityNotes               string                 `json:"QuantityNotes,omitempty"               protobuf:"bytes,6,opt,name=QuantityNotes,proto3"`
	Name                        string                 `json:"Name,omitempty"                        protobuf:"bytes,7,opt,name=Name,proto3"`
	MeasurementUnitID           string                 `json:"MeasurementUnitID,omitempty"           protobuf:"bytes,4,opt,name=MeasurementUnitID,proto3"`
	Type                        string                 `json:"Type,omitempty"                        protobuf:"bytes,9,opt,name=Type,proto3"`
	unknownFields               protoimpl.UnknownFields
	ContainedInVesselIndex      uint32 `json:"ContainedInVesselIndex,omitempty" protobuf:"varint,5,opt,name=ContainedInVesselIndex,proto3"`
	Index                       uint32 `json:"Index,omitempty"                  protobuf:"varint,10,opt,name=Index,proto3"`
	sizeCache                   protoimpl.SizeCache
	Compostable                 bool `json:"Compostable,omitempty" protobuf:"varint,11,opt,name=Compostable,proto3"`
	IsLiquid                    bool `json:"IsLiquid,omitempty"    protobuf:"varint,12,opt,name=IsLiquid,proto3"`
	IsWaste                     bool `json:"IsWaste,omitempty"     protobuf:"varint,13,opt,name=IsWaste,proto3"`
}

func (x *RecipeStepProductCreationRequestInput) Reset() {
	*x = RecipeStepProductCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[105]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepProductCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepProductCreationRequestInput) ProtoMessage() {}

func (x *RecipeStepProductCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[105]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepProductCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepProductCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{105}
}

func (x *RecipeStepProductCreationRequestInput) GetStorageTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.StorageTemperatureInCelsius
	}
	return nil
}

func (x *RecipeStepProductCreationRequestInput) GetStorageDurationInSeconds() *OptionalUint32Range {
	if x != nil {
		return x.StorageDurationInSeconds
	}
	return nil
}

func (x *RecipeStepProductCreationRequestInput) GetQuantity() *OptionalFloat32Range {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *RecipeStepProductCreationRequestInput) GetMeasurementUnitID() string {
	if x != nil {
		return x.MeasurementUnitID
	}
	return ""
}

func (x *RecipeStepProductCreationRequestInput) GetContainedInVesselIndex() uint32 {
	if x != nil {
		return x.ContainedInVesselIndex
	}
	return 0
}

func (x *RecipeStepProductCreationRequestInput) GetQuantityNotes() string {
	if x != nil {
		return x.QuantityNotes
	}
	return ""
}

func (x *RecipeStepProductCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeStepProductCreationRequestInput) GetStorageInstructions() string {
	if x != nil {
		return x.StorageInstructions
	}
	return ""
}

func (x *RecipeStepProductCreationRequestInput) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RecipeStepProductCreationRequestInput) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RecipeStepProductCreationRequestInput) GetCompostable() bool {
	if x != nil {
		return x.Compostable
	}
	return false
}

func (x *RecipeStepProductCreationRequestInput) GetIsLiquid() bool {
	if x != nil {
		return x.IsLiquid
	}
	return false
}

func (x *RecipeStepProductCreationRequestInput) GetIsWaste() bool {
	if x != nil {
		return x.IsWaste
	}
	return false
}

type RecipeStepProductUpdateRequestInput struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	Quantity                    *OptionalFloat32Range  `json:"Quantity,omitempty"                    protobuf:"bytes,8,opt,name=Quantity,proto3"`
	StorageDurationInSeconds    *OptionalUint32Range   `json:"StorageDurationInSeconds,omitempty"    protobuf:"bytes,7,opt,name=StorageDurationInSeconds,proto3"`
	StorageTemperatureInCelsius *OptionalFloat32Range  `json:"StorageTemperatureInCelsius,omitempty" protobuf:"bytes,6,opt,name=StorageTemperatureInCelsius,proto3"`
	QuantityNotes               string                 `json:"QuantityNotes,omitempty"               protobuf:"bytes,4,opt,name=QuantityNotes,proto3"`
	BelongsToRecipeStep         string                 `json:"BelongsToRecipeStep,omitempty"         protobuf:"bytes,5,opt,name=BelongsToRecipeStep,proto3"`
	MeasurementUnitID           string                 `json:"MeasurementUnitID,omitempty"           protobuf:"bytes,3,opt,name=MeasurementUnitID,proto3"`
	Type                        string                 `json:"Type,omitempty"                        protobuf:"bytes,2,opt,name=Type,proto3"`
	Name                        string                 `json:"Name,omitempty"                        protobuf:"bytes,1,opt,name=Name,proto3"`
	StorageInstructions         string                 `json:"StorageInstructions,omitempty"         protobuf:"bytes,10,opt,name=StorageInstructions,proto3"`
	unknownFields               protoimpl.UnknownFields
	Index                       uint32 `json:"Index,omitempty"                  protobuf:"varint,13,opt,name=Index,proto3"`
	ContainedInVesselIndex      uint32 `json:"ContainedInVesselIndex,omitempty" protobuf:"varint,14,opt,name=ContainedInVesselIndex,proto3"`
	sizeCache                   protoimpl.SizeCache
	Compostable                 bool `json:"Compostable,omitempty" protobuf:"varint,9,opt,name=Compostable,proto3"`
	IsLiquid                    bool `json:"IsLiquid,omitempty"    protobuf:"varint,11,opt,name=IsLiquid,proto3"`
	IsWaste                     bool `json:"IsWaste,omitempty"     protobuf:"varint,12,opt,name=IsWaste,proto3"`
}

func (x *RecipeStepProductUpdateRequestInput) Reset() {
	*x = RecipeStepProductUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[106]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepProductUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepProductUpdateRequestInput) ProtoMessage() {}

func (x *RecipeStepProductUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[106]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepProductUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepProductUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{106}
}

func (x *RecipeStepProductUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeStepProductUpdateRequestInput) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RecipeStepProductUpdateRequestInput) GetMeasurementUnitID() string {
	if x != nil {
		return x.MeasurementUnitID
	}
	return ""
}

func (x *RecipeStepProductUpdateRequestInput) GetQuantityNotes() string {
	if x != nil {
		return x.QuantityNotes
	}
	return ""
}

func (x *RecipeStepProductUpdateRequestInput) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeStepProductUpdateRequestInput) GetStorageTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.StorageTemperatureInCelsius
	}
	return nil
}

func (x *RecipeStepProductUpdateRequestInput) GetStorageDurationInSeconds() *OptionalUint32Range {
	if x != nil {
		return x.StorageDurationInSeconds
	}
	return nil
}

func (x *RecipeStepProductUpdateRequestInput) GetQuantity() *OptionalFloat32Range {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *RecipeStepProductUpdateRequestInput) GetCompostable() bool {
	if x != nil {
		return x.Compostable
	}
	return false
}

func (x *RecipeStepProductUpdateRequestInput) GetStorageInstructions() string {
	if x != nil {
		return x.StorageInstructions
	}
	return ""
}

func (x *RecipeStepProductUpdateRequestInput) GetIsLiquid() bool {
	if x != nil {
		return x.IsLiquid
	}
	return false
}

func (x *RecipeStepProductUpdateRequestInput) GetIsWaste() bool {
	if x != nil {
		return x.IsWaste
	}
	return false
}

func (x *RecipeStepProductUpdateRequestInput) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RecipeStepProductUpdateRequestInput) GetContainedInVesselIndex() uint32 {
	if x != nil {
		return x.ContainedInVesselIndex
	}
	return 0
}

type RecipeStepUpdateRequestInput struct {
	EstimatedTimeInSeconds  *OptionalUint32Range   `json:"EstimatedTimeInSeconds,omitempty" protobuf:"bytes,1,opt,name=EstimatedTimeInSeconds,proto3"`
	TemperatureInCelsius    *OptionalFloat32Range  `json:"TemperatureInCelsius,omitempty"   protobuf:"bytes,2,opt,name=TemperatureInCelsius,proto3"`
	Preparation             *ValidPreparation      `json:"Preparation,omitempty"            protobuf:"bytes,4,opt,name=Preparation,proto3"`
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Notes                   string                 `json:"Notes,omitempty"                  protobuf:"bytes,3,opt,name=Notes,proto3"`
	ExplicitInstructions    string                 `json:"ExplicitInstructions,omitempty"   protobuf:"bytes,7,opt,name=ExplicitInstructions,proto3"`
	ConditionExpression     string                 `json:"ConditionExpression,omitempty"    protobuf:"bytes,8,opt,name=ConditionExpression,proto3"`
	BelongsToRecipe         string                 `json:"BelongsToRecipe,omitempty"        protobuf:"bytes,10,opt,name=BelongsToRecipe,proto3"`
	unknownFields           protoimpl.UnknownFields
	Index                   uint32 `json:"Index,omitempty" protobuf:"varint,5,opt,name=Index,proto3"`
	sizeCache               protoimpl.SizeCache
	Optional                bool `json:"Optional,omitempty"                protobuf:"varint,6,opt,name=Optional,proto3"`
	StartTimerAutomatically bool `json:"StartTimerAutomatically,omitempty" protobuf:"varint,9,opt,name=StartTimerAutomatically,proto3"`
}

func (x *RecipeStepUpdateRequestInput) Reset() {
	*x = RecipeStepUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[107]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepUpdateRequestInput) ProtoMessage() {}

func (x *RecipeStepUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[107]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{107}
}

func (x *RecipeStepUpdateRequestInput) GetEstimatedTimeInSeconds() *OptionalUint32Range {
	if x != nil {
		return x.EstimatedTimeInSeconds
	}
	return nil
}

func (x *RecipeStepUpdateRequestInput) GetTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.TemperatureInCelsius
	}
	return nil
}

func (x *RecipeStepUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeStepUpdateRequestInput) GetPreparation() *ValidPreparation {
	if x != nil {
		return x.Preparation
	}
	return nil
}

func (x *RecipeStepUpdateRequestInput) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RecipeStepUpdateRequestInput) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *RecipeStepUpdateRequestInput) GetExplicitInstructions() string {
	if x != nil {
		return x.ExplicitInstructions
	}
	return ""
}

func (x *RecipeStepUpdateRequestInput) GetConditionExpression() string {
	if x != nil {
		return x.ConditionExpression
	}
	return ""
}

func (x *RecipeStepUpdateRequestInput) GetStartTimerAutomatically() bool {
	if x != nil {
		return x.StartTimerAutomatically
	}
	return false
}

func (x *RecipeStepUpdateRequestInput) GetBelongsToRecipe() string {
	if x != nil {
		return x.BelongsToRecipe
	}
	return ""
}

type RecipeStepVessel struct {
	Vessel               *ValidVessel                `json:"Vessel,omitempty"              protobuf:"bytes,6,opt,name=Vessel,proto3"`
	CreatedAt            *timestamppb.Timestamp      `json:"CreatedAt,omitempty"           protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	Quantity             *Uint16RangeWithOptionalMax `json:"Quantity,omitempty"            protobuf:"bytes,2,opt,name=Quantity,proto3"`
	LastUpdatedAt        *timestamppb.Timestamp      `json:"LastUpdatedAt,omitempty"       protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3"`
	ArchivedAt           *timestamppb.Timestamp      `json:"ArchivedAt,omitempty"          protobuf:"bytes,4,opt,name=ArchivedAt,proto3"`
	state                protoimpl.MessageState      `protogen:"open.v1"`
	Notes                string                      `json:"Notes,omitempty"               protobuf:"bytes,8,opt,name=Notes,proto3"`
	ID                   string                      `json:"ID,omitempty"                  protobuf:"bytes,7,opt,name=ID,proto3"`
	RecipeStepProductID  string                      `json:"RecipeStepProductID,omitempty" protobuf:"bytes,5,opt,name=RecipeStepProductID,proto3"`
	BelongsToRecipeStep  string                      `json:"BelongsToRecipeStep,omitempty" protobuf:"bytes,9,opt,name=BelongsToRecipeStep,proto3"`
	VesselPreposition    string                      `json:"VesselPreposition,omitempty"   protobuf:"bytes,10,opt,name=VesselPreposition,proto3"`
	Name                 string                      `json:"Name,omitempty"                protobuf:"bytes,11,opt,name=Name,proto3"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
	UnavailableAfterStep bool `json:"UnavailableAfterStep,omitempty" protobuf:"varint,12,opt,name=UnavailableAfterStep,proto3"`
}

func (x *RecipeStepVessel) Reset() {
	*x = RecipeStepVessel{}
	mi := &file_messages_proto_msgTypes[108]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepVessel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepVessel) ProtoMessage() {}

func (x *RecipeStepVessel) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[108]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepVessel.ProtoReflect.Descriptor instead.
func (*RecipeStepVessel) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{108}
}

func (x *RecipeStepVessel) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RecipeStepVessel) GetQuantity() *Uint16RangeWithOptionalMax {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *RecipeStepVessel) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *RecipeStepVessel) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *RecipeStepVessel) GetRecipeStepProductID() string {
	if x != nil {
		return x.RecipeStepProductID
	}
	return ""
}

func (x *RecipeStepVessel) GetVessel() *ValidVessel {
	if x != nil {
		return x.Vessel
	}
	return nil
}

func (x *RecipeStepVessel) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RecipeStepVessel) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeStepVessel) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeStepVessel) GetVesselPreposition() string {
	if x != nil {
		return x.VesselPreposition
	}
	return ""
}

func (x *RecipeStepVessel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeStepVessel) GetUnavailableAfterStep() bool {
	if x != nil {
		return x.UnavailableAfterStep
	}
	return false
}

type RecipeStepVesselCreationRequestInput struct {
	state                           protoimpl.MessageState      `protogen:"open.v1"`
	Quantity                        *Uint16RangeWithOptionalMax `json:"Quantity,omitempty"            protobuf:"bytes,5,opt,name=Quantity,proto3"`
	RecipeStepProductID             string                      `json:"RecipeStepProductID,omitempty" protobuf:"bytes,1,opt,name=RecipeStepProductID,proto3"`
	VesselID                        string                      `json:"VesselID,omitempty"            protobuf:"bytes,4,opt,name=VesselID,proto3"`
	Name                            string                      `json:"Name,omitempty"                protobuf:"bytes,6,opt,name=Name,proto3"`
	Notes                           string                      `json:"Notes,omitempty"               protobuf:"bytes,7,opt,name=Notes,proto3"`
	VesselPreposition               string                      `json:"VesselPreposition,omitempty"   protobuf:"bytes,8,opt,name=VesselPreposition,proto3"`
	unknownFields                   protoimpl.UnknownFields
	ProductOfRecipeStepIndex        uint64 `json:"ProductOfRecipeStepIndex,omitempty"        protobuf:"varint,2,opt,name=ProductOfRecipeStepIndex,proto3"`
	ProductOfRecipeStepProductIndex uint64 `json:"ProductOfRecipeStepProductIndex,omitempty" protobuf:"varint,3,opt,name=ProductOfRecipeStepProductIndex,proto3"`
	sizeCache                       protoimpl.SizeCache
	UnavailableAfterStep            bool `json:"UnavailableAfterStep,omitempty" protobuf:"varint,9,opt,name=UnavailableAfterStep,proto3"`
}

func (x *RecipeStepVesselCreationRequestInput) Reset() {
	*x = RecipeStepVesselCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[109]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepVesselCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepVesselCreationRequestInput) ProtoMessage() {}

func (x *RecipeStepVesselCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[109]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepVesselCreationRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepVesselCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{109}
}

func (x *RecipeStepVesselCreationRequestInput) GetRecipeStepProductID() string {
	if x != nil {
		return x.RecipeStepProductID
	}
	return ""
}

func (x *RecipeStepVesselCreationRequestInput) GetProductOfRecipeStepIndex() uint64 {
	if x != nil {
		return x.ProductOfRecipeStepIndex
	}
	return 0
}

func (x *RecipeStepVesselCreationRequestInput) GetProductOfRecipeStepProductIndex() uint64 {
	if x != nil {
		return x.ProductOfRecipeStepProductIndex
	}
	return 0
}

func (x *RecipeStepVesselCreationRequestInput) GetVesselID() string {
	if x != nil {
		return x.VesselID
	}
	return ""
}

func (x *RecipeStepVesselCreationRequestInput) GetQuantity() *Uint16RangeWithOptionalMax {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *RecipeStepVesselCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeStepVesselCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeStepVesselCreationRequestInput) GetVesselPreposition() string {
	if x != nil {
		return x.VesselPreposition
	}
	return ""
}

func (x *RecipeStepVesselCreationRequestInput) GetUnavailableAfterStep() bool {
	if x != nil {
		return x.UnavailableAfterStep
	}
	return false
}

type RecipeStepVesselUpdateRequestInput struct {
	state                protoimpl.MessageState                        `protogen:"open.v1"`
	Quantity             *Uint16RangeWithOptionalMaxUpdateRequestInput `json:"Quantity,omitempty"            protobuf:"bytes,6,opt,name=Quantity,proto3"`
	RecipeStepProductID  string                                        `json:"RecipeStepProductID,omitempty" protobuf:"bytes,1,opt,name=RecipeStepProductID,proto3"`
	Name                 string                                        `json:"Name,omitempty"                protobuf:"bytes,2,opt,name=Name,proto3"`
	Notes                string                                        `json:"Notes,omitempty"               protobuf:"bytes,3,opt,name=Notes,proto3"`
	BelongsToRecipeStep  string                                        `json:"BelongsToRecipeStep,omitempty" protobuf:"bytes,4,opt,name=BelongsToRecipeStep,proto3"`
	VesselID             string                                        `json:"VesselID,omitempty"            protobuf:"bytes,5,opt,name=VesselID,proto3"`
	VesselPreposition    string                                        `json:"VesselPreposition,omitempty"   protobuf:"bytes,7,opt,name=VesselPreposition,proto3"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
	UnavailableAfterStep bool `json:"UnavailableAfterStep,omitempty" protobuf:"varint,8,opt,name=UnavailableAfterStep,proto3"`
}

func (x *RecipeStepVesselUpdateRequestInput) Reset() {
	*x = RecipeStepVesselUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[110]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeStepVesselUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeStepVesselUpdateRequestInput) ProtoMessage() {}

func (x *RecipeStepVesselUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[110]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeStepVesselUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeStepVesselUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{110}
}

func (x *RecipeStepVesselUpdateRequestInput) GetRecipeStepProductID() string {
	if x != nil {
		return x.RecipeStepProductID
	}
	return ""
}

func (x *RecipeStepVesselUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeStepVesselUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *RecipeStepVesselUpdateRequestInput) GetBelongsToRecipeStep() string {
	if x != nil {
		return x.BelongsToRecipeStep
	}
	return ""
}

func (x *RecipeStepVesselUpdateRequestInput) GetVesselID() string {
	if x != nil {
		return x.VesselID
	}
	return ""
}

func (x *RecipeStepVesselUpdateRequestInput) GetQuantity() *Uint16RangeWithOptionalMaxUpdateRequestInput {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *RecipeStepVesselUpdateRequestInput) GetVesselPreposition() string {
	if x != nil {
		return x.VesselPreposition
	}
	return ""
}

func (x *RecipeStepVesselUpdateRequestInput) GetUnavailableAfterStep() bool {
	if x != nil {
		return x.UnavailableAfterStep
	}
	return false
}

type RecipeUpdateRequestInput struct {
	EstimatedPortions   *Float32RangeWithOptionalMaxUpdateRequestInput `json:"EstimatedPortions,omitempty"   protobuf:"bytes,7,opt,name=EstimatedPortions,proto3"`
	state               protoimpl.MessageState                         `protogen:"open.v1"`
	PluralPortionName   string                                         `json:"PluralPortionName,omitempty"   protobuf:"bytes,9,opt,name=PluralPortionName,proto3"`
	Source              string                                         `json:"Source,omitempty"              protobuf:"bytes,3,opt,name=Source,proto3"`
	Description         string                                         `json:"Description,omitempty"         protobuf:"bytes,4,opt,name=Description,proto3"`
	InspiredByRecipeID  string                                         `json:"InspiredByRecipeID,omitempty"  protobuf:"bytes,5,opt,name=InspiredByRecipeID,proto3"`
	Slug                string                                         `json:"Slug,omitempty"                protobuf:"bytes,2,opt,name=Slug,proto3"`
	PortionName         string                                         `json:"PortionName,omitempty"         protobuf:"bytes,8,opt,name=PortionName,proto3"`
	Name                string                                         `json:"Name,omitempty"                protobuf:"bytes,1,opt,name=Name,proto3"`
	YieldsComponentType string                                         `json:"YieldsComponentType,omitempty" protobuf:"bytes,11,opt,name=YieldsComponentType,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
	SealOfApproval      bool `json:"SealOfApproval,omitempty"   protobuf:"varint,6,opt,name=SealOfApproval,proto3"`
	EligibleForMeals    bool `json:"EligibleForMeals,omitempty" protobuf:"varint,10,opt,name=EligibleForMeals,proto3"`
}

func (x *RecipeUpdateRequestInput) Reset() {
	*x = RecipeUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[111]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecipeUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeUpdateRequestInput) ProtoMessage() {}

func (x *RecipeUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[111]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*RecipeUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{111}
}

func (x *RecipeUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeUpdateRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *RecipeUpdateRequestInput) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *RecipeUpdateRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RecipeUpdateRequestInput) GetInspiredByRecipeID() string {
	if x != nil {
		return x.InspiredByRecipeID
	}
	return ""
}

func (x *RecipeUpdateRequestInput) GetSealOfApproval() bool {
	if x != nil {
		return x.SealOfApproval
	}
	return false
}

func (x *RecipeUpdateRequestInput) GetEstimatedPortions() *Float32RangeWithOptionalMaxUpdateRequestInput {
	if x != nil {
		return x.EstimatedPortions
	}
	return nil
}

func (x *RecipeUpdateRequestInput) GetPortionName() string {
	if x != nil {
		return x.PortionName
	}
	return ""
}

func (x *RecipeUpdateRequestInput) GetPluralPortionName() string {
	if x != nil {
		return x.PluralPortionName
	}
	return ""
}

func (x *RecipeUpdateRequestInput) GetEligibleForMeals() bool {
	if x != nil {
		return x.EligibleForMeals
	}
	return false
}

func (x *RecipeUpdateRequestInput) GetYieldsComponentType() string {
	if x != nil {
		return x.YieldsComponentType
	}
	return ""
}

type ResponseDetails struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	CurrentHouseholdID string                 `json:"CurrentHouseholdID,omitempty" protobuf:"bytes,1,opt,name=CurrentHouseholdID,proto3"`
	TraceID            string                 `json:"TraceID,omitempty"            protobuf:"bytes,2,opt,name=TraceID,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ResponseDetails) Reset() {
	*x = ResponseDetails{}
	mi := &file_messages_proto_msgTypes[112]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseDetails) ProtoMessage() {}

func (x *ResponseDetails) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[112]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseDetails.ProtoReflect.Descriptor instead.
func (*ResponseDetails) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{112}
}

func (x *ResponseDetails) GetCurrentHouseholdID() string {
	if x != nil {
		return x.CurrentHouseholdID
	}
	return ""
}

func (x *ResponseDetails) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

type ServiceSetting struct {
	ArchivedAt    *timestamppb.Timestamp `json:"ArchivedAt,omitempty"    protobuf:"bytes,4,opt,name=ArchivedAt,proto3"`
	CreatedAt     *timestamppb.Timestamp `json:"CreatedAt,omitempty"     protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	state         protoimpl.MessageState `protogen:"open.v1"`
	LastUpdatedAt *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty" protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3"`
	Name          string                 `json:"Name,omitempty"          protobuf:"bytes,6,opt,name=Name,proto3"`
	ID            string                 `json:"ID,omitempty"            protobuf:"bytes,5,opt,name=ID,proto3"`
	DefaultValue  string                 `json:"DefaultValue,omitempty"  protobuf:"bytes,2,opt,name=DefaultValue,proto3"`
	Type          string                 `json:"Type,omitempty"          protobuf:"bytes,7,opt,name=Type,proto3"`
	Description   string                 `json:"Description,omitempty"   protobuf:"bytes,8,opt,name=Description,proto3"`
	Enumeration   []string               `json:"Enumeration,omitempty"   protobuf:"bytes,9,rep,name=Enumeration,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
	AdminsOnly    bool `json:"AdminsOnly,omitempty" protobuf:"varint,10,opt,name=AdminsOnly,proto3"`
}

func (x *ServiceSetting) Reset() {
	*x = ServiceSetting{}
	mi := &file_messages_proto_msgTypes[113]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceSetting) ProtoMessage() {}

func (x *ServiceSetting) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[113]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceSetting.ProtoReflect.Descriptor instead.
func (*ServiceSetting) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{113}
}

func (x *ServiceSetting) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ServiceSetting) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *ServiceSetting) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ServiceSetting) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ServiceSetting) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ServiceSetting) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceSetting) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ServiceSetting) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ServiceSetting) GetEnumeration() []string {
	if x != nil {
		return x.Enumeration
	}
	return nil
}

func (x *ServiceSetting) GetAdminsOnly() bool {
	if x != nil {
		return x.AdminsOnly
	}
	return false
}

type ServiceSettingConfiguration struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt          *timestamppb.Timestamp `json:"CreatedAt,omitempty"          protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	LastUpdatedAt      *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty"      protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3"`
	ArchivedAt         *timestamppb.Timestamp `json:"ArchivedAt,omitempty"         protobuf:"bytes,3,opt,name=ArchivedAt,proto3"`
	ID                 string                 `json:"ID,omitempty"                 protobuf:"bytes,4,opt,name=ID,proto3"`
	Value              string                 `json:"Value,omitempty"              protobuf:"bytes,5,opt,name=Value,proto3"`
	Notes              string                 `json:"Notes,omitempty"              protobuf:"bytes,6,opt,name=Notes,proto3"`
	BelongsToUser      string                 `json:"BelongsToUser,omitempty"      protobuf:"bytes,7,opt,name=BelongsToUser,proto3"`
	BelongsToHousehold string                 `json:"BelongsToHousehold,omitempty" protobuf:"bytes,8,opt,name=BelongsToHousehold,proto3"`
	ServiceSetting     *ServiceSetting        `json:"ServiceSetting,omitempty"     protobuf:"bytes,9,opt,name=ServiceSetting,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ServiceSettingConfiguration) Reset() {
	*x = ServiceSettingConfiguration{}
	mi := &file_messages_proto_msgTypes[114]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceSettingConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceSettingConfiguration) ProtoMessage() {}

func (x *ServiceSettingConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[114]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceSettingConfiguration.ProtoReflect.Descriptor instead.
func (*ServiceSettingConfiguration) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{114}
}

func (x *ServiceSettingConfiguration) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ServiceSettingConfiguration) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ServiceSettingConfiguration) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ServiceSettingConfiguration) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ServiceSettingConfiguration) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ServiceSettingConfiguration) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ServiceSettingConfiguration) GetBelongsToUser() string {
	if x != nil {
		return x.BelongsToUser
	}
	return ""
}

func (x *ServiceSettingConfiguration) GetBelongsToHousehold() string {
	if x != nil {
		return x.BelongsToHousehold
	}
	return ""
}

func (x *ServiceSettingConfiguration) GetServiceSetting() *ServiceSetting {
	if x != nil {
		return x.ServiceSetting
	}
	return nil
}

type ServiceSettingConfigurationCreationRequestInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Value              string                 `json:"Value,omitempty"              protobuf:"bytes,1,opt,name=Value,proto3"`
	Notes              string                 `json:"Notes,omitempty"              protobuf:"bytes,2,opt,name=Notes,proto3"`
	ServiceSettingID   string                 `json:"ServiceSettingID,omitempty"   protobuf:"bytes,3,opt,name=ServiceSettingID,proto3"`
	BelongsToUser      string                 `json:"BelongsToUser,omitempty"      protobuf:"bytes,4,opt,name=BelongsToUser,proto3"`
	BelongsToHousehold string                 `json:"BelongsToHousehold,omitempty" protobuf:"bytes,5,opt,name=BelongsToHousehold,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ServiceSettingConfigurationCreationRequestInput) Reset() {
	*x = ServiceSettingConfigurationCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[115]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceSettingConfigurationCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceSettingConfigurationCreationRequestInput) ProtoMessage() {}

func (x *ServiceSettingConfigurationCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[115]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceSettingConfigurationCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ServiceSettingConfigurationCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{115}
}

func (x *ServiceSettingConfigurationCreationRequestInput) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ServiceSettingConfigurationCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ServiceSettingConfigurationCreationRequestInput) GetServiceSettingID() string {
	if x != nil {
		return x.ServiceSettingID
	}
	return ""
}

func (x *ServiceSettingConfigurationCreationRequestInput) GetBelongsToUser() string {
	if x != nil {
		return x.BelongsToUser
	}
	return ""
}

func (x *ServiceSettingConfigurationCreationRequestInput) GetBelongsToHousehold() string {
	if x != nil {
		return x.BelongsToHousehold
	}
	return ""
}

type ServiceSettingConfigurationUpdateRequestInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Value              string                 `json:"Value,omitempty"              protobuf:"bytes,1,opt,name=Value,proto3"`
	Notes              string                 `json:"Notes,omitempty"              protobuf:"bytes,2,opt,name=Notes,proto3"`
	ServiceSettingID   string                 `json:"ServiceSettingID,omitempty"   protobuf:"bytes,3,opt,name=ServiceSettingID,proto3"`
	BelongsToUser      string                 `json:"BelongsToUser,omitempty"      protobuf:"bytes,4,opt,name=BelongsToUser,proto3"`
	BelongsToHousehold string                 `json:"BelongsToHousehold,omitempty" protobuf:"bytes,5,opt,name=BelongsToHousehold,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ServiceSettingConfigurationUpdateRequestInput) Reset() {
	*x = ServiceSettingConfigurationUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[116]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceSettingConfigurationUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceSettingConfigurationUpdateRequestInput) ProtoMessage() {}

func (x *ServiceSettingConfigurationUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[116]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceSettingConfigurationUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ServiceSettingConfigurationUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{116}
}

func (x *ServiceSettingConfigurationUpdateRequestInput) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ServiceSettingConfigurationUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ServiceSettingConfigurationUpdateRequestInput) GetServiceSettingID() string {
	if x != nil {
		return x.ServiceSettingID
	}
	return ""
}

func (x *ServiceSettingConfigurationUpdateRequestInput) GetBelongsToUser() string {
	if x != nil {
		return x.BelongsToUser
	}
	return ""
}

func (x *ServiceSettingConfigurationUpdateRequestInput) GetBelongsToHousehold() string {
	if x != nil {
		return x.BelongsToHousehold
	}
	return ""
}

type ServiceSettingCreationRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DefaultValue  string                 `json:"DefaultValue,omitempty" protobuf:"bytes,1,opt,name=DefaultValue,proto3"`
	Name          string                 `json:"Name,omitempty"         protobuf:"bytes,2,opt,name=Name,proto3"`
	Type          string                 `json:"Type,omitempty"         protobuf:"bytes,3,opt,name=Type,proto3"`
	Description   string                 `json:"Description,omitempty"  protobuf:"bytes,4,opt,name=Description,proto3"`
	Enumeration   []string               `json:"Enumeration,omitempty"  protobuf:"bytes,5,rep,name=Enumeration,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
	AdminsOnly    bool `json:"AdminsOnly,omitempty" protobuf:"varint,6,opt,name=AdminsOnly,proto3"`
}

func (x *ServiceSettingCreationRequestInput) Reset() {
	*x = ServiceSettingCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[117]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceSettingCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceSettingCreationRequestInput) ProtoMessage() {}

func (x *ServiceSettingCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[117]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceSettingCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ServiceSettingCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{117}
}

func (x *ServiceSettingCreationRequestInput) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *ServiceSettingCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceSettingCreationRequestInput) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ServiceSettingCreationRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ServiceSettingCreationRequestInput) GetEnumeration() []string {
	if x != nil {
		return x.Enumeration
	}
	return nil
}

func (x *ServiceSettingCreationRequestInput) GetAdminsOnly() bool {
	if x != nil {
		return x.AdminsOnly
	}
	return false
}

type TOTPSecretRefreshInput struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CurrentPassword string                 `json:"CurrentPassword,omitempty" protobuf:"bytes,1,opt,name=CurrentPassword,proto3"`
	TOTPToken       string                 `json:"TOTPToken,omitempty"       protobuf:"bytes,2,opt,name=TOTPToken,proto3"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TOTPSecretRefreshInput) Reset() {
	*x = TOTPSecretRefreshInput{}
	mi := &file_messages_proto_msgTypes[118]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TOTPSecretRefreshInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TOTPSecretRefreshInput) ProtoMessage() {}

func (x *TOTPSecretRefreshInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[118]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TOTPSecretRefreshInput.ProtoReflect.Descriptor instead.
func (*TOTPSecretRefreshInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{118}
}

func (x *TOTPSecretRefreshInput) GetCurrentPassword() string {
	if x != nil {
		return x.CurrentPassword
	}
	return ""
}

func (x *TOTPSecretRefreshInput) GetTOTPToken() string {
	if x != nil {
		return x.TOTPToken
	}
	return ""
}

type TOTPSecretRefreshResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TwoFactorQRCode string                 `json:"TwoFactorQRCode,omitempty" protobuf:"bytes,1,opt,name=TwoFactorQRCode,proto3"`
	TwoFactorSecret string                 `json:"TwoFactorSecret,omitempty" protobuf:"bytes,2,opt,name=TwoFactorSecret,proto3"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TOTPSecretRefreshResponse) Reset() {
	*x = TOTPSecretRefreshResponse{}
	mi := &file_messages_proto_msgTypes[119]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TOTPSecretRefreshResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TOTPSecretRefreshResponse) ProtoMessage() {}

func (x *TOTPSecretRefreshResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[119]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TOTPSecretRefreshResponse.ProtoReflect.Descriptor instead.
func (*TOTPSecretRefreshResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{119}
}

func (x *TOTPSecretRefreshResponse) GetTwoFactorQRCode() string {
	if x != nil {
		return x.TwoFactorQRCode
	}
	return ""
}

func (x *TOTPSecretRefreshResponse) GetTwoFactorSecret() string {
	if x != nil {
		return x.TwoFactorSecret
	}
	return ""
}

type TOTPSecretVerificationInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TOTPToken     string                 `json:"TOTPToken,omitempty" protobuf:"bytes,1,opt,name=TOTPToken,proto3"`
	UserID        string                 `json:"UserID,omitempty"    protobuf:"bytes,2,opt,name=UserID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TOTPSecretVerificationInput) Reset() {
	*x = TOTPSecretVerificationInput{}
	mi := &file_messages_proto_msgTypes[120]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TOTPSecretVerificationInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TOTPSecretVerificationInput) ProtoMessage() {}

func (x *TOTPSecretVerificationInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[120]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TOTPSecretVerificationInput.ProtoReflect.Descriptor instead.
func (*TOTPSecretVerificationInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{120}
}

func (x *TOTPSecretVerificationInput) GetTOTPToken() string {
	if x != nil {
		return x.TOTPToken
	}
	return ""
}

func (x *TOTPSecretVerificationInput) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type TOTPSecretVerificationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
	Accepted      bool `json:"Accepted,omitempty" protobuf:"varint,1,opt,name=Accepted,proto3"`
}

func (x *TOTPSecretVerificationResponse) Reset() {
	*x = TOTPSecretVerificationResponse{}
	mi := &file_messages_proto_msgTypes[121]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TOTPSecretVerificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TOTPSecretVerificationResponse) ProtoMessage() {}

func (x *TOTPSecretVerificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[121]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TOTPSecretVerificationResponse.ProtoReflect.Descriptor instead.
func (*TOTPSecretVerificationResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{121}
}

func (x *TOTPSecretVerificationResponse) GetAccepted() bool {
	if x != nil {
		return x.Accepted
	}
	return false
}

type TokenResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `json:"UserID,omitempty"       protobuf:"bytes,1,opt,name=UserID,proto3"`
	HouseholdID   string                 `json:"HouseholdID,omitempty"  protobuf:"bytes,2,opt,name=HouseholdID,proto3"`
	AccessToken   string                 `json:"AccessToken,omitempty"  protobuf:"bytes,3,opt,name=AccessToken,proto3"`
	RefreshToken  string                 `json:"RefreshToken,omitempty" protobuf:"bytes,4,opt,name=RefreshToken,proto3"`
	Expires       *timestamppb.Timestamp `json:"Expires,omitempty"      protobuf:"bytes,5,opt,name=Expires,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenResponse) Reset() {
	*x = TokenResponse{}
	mi := &file_messages_proto_msgTypes[122]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenResponse) ProtoMessage() {}

func (x *TokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[122]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenResponse.ProtoReflect.Descriptor instead.
func (*TokenResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{122}
}

func (x *TokenResponse) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *TokenResponse) GetHouseholdID() string {
	if x != nil {
		return x.HouseholdID
	}
	return ""
}

func (x *TokenResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *TokenResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *TokenResponse) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

type Uint16RangeWithOptionalMax struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	Max           uint32 `json:"Max,omitempty" protobuf:"varint,1,opt,name=Max,proto3"`
	Min           uint32 `json:"Min,omitempty" protobuf:"varint,2,opt,name=Min,proto3"`
	sizeCache     protoimpl.SizeCache
}

func (x *Uint16RangeWithOptionalMax) Reset() {
	*x = Uint16RangeWithOptionalMax{}
	mi := &file_messages_proto_msgTypes[123]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Uint16RangeWithOptionalMax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint16RangeWithOptionalMax) ProtoMessage() {}

func (x *Uint16RangeWithOptionalMax) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[123]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint16RangeWithOptionalMax.ProtoReflect.Descriptor instead.
func (*Uint16RangeWithOptionalMax) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{123}
}

func (x *Uint16RangeWithOptionalMax) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *Uint16RangeWithOptionalMax) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

type Uint16RangeWithOptionalMaxUpdateRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	Min           uint32 `json:"Min,omitempty" protobuf:"varint,1,opt,name=Min,proto3"`
	Max           uint32 `json:"Max,omitempty" protobuf:"varint,2,opt,name=Max,proto3"`
	sizeCache     protoimpl.SizeCache
}

func (x *Uint16RangeWithOptionalMaxUpdateRequestInput) Reset() {
	*x = Uint16RangeWithOptionalMaxUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[124]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Uint16RangeWithOptionalMaxUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint16RangeWithOptionalMaxUpdateRequestInput) ProtoMessage() {}

func (x *Uint16RangeWithOptionalMaxUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[124]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint16RangeWithOptionalMaxUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*Uint16RangeWithOptionalMaxUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{124}
}

func (x *Uint16RangeWithOptionalMaxUpdateRequestInput) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Uint16RangeWithOptionalMaxUpdateRequestInput) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type Uint32RangeWithOptionalMax struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	Max           uint32 `json:"Max,omitempty" protobuf:"varint,1,opt,name=Max,proto3"`
	Min           uint32 `json:"Min,omitempty" protobuf:"varint,2,opt,name=Min,proto3"`
	sizeCache     protoimpl.SizeCache
}

func (x *Uint32RangeWithOptionalMax) Reset() {
	*x = Uint32RangeWithOptionalMax{}
	mi := &file_messages_proto_msgTypes[125]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Uint32RangeWithOptionalMax) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint32RangeWithOptionalMax) ProtoMessage() {}

func (x *Uint32RangeWithOptionalMax) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[125]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint32RangeWithOptionalMax.ProtoReflect.Descriptor instead.
func (*Uint32RangeWithOptionalMax) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{125}
}

func (x *Uint32RangeWithOptionalMax) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *Uint32RangeWithOptionalMax) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

type Uint32RangeWithOptionalMaxUpdateRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	Min           uint32 `json:"Min,omitempty" protobuf:"varint,1,opt,name=Min,proto3"`
	Max           uint32 `json:"Max,omitempty" protobuf:"varint,2,opt,name=Max,proto3"`
	sizeCache     protoimpl.SizeCache
}

func (x *Uint32RangeWithOptionalMaxUpdateRequestInput) Reset() {
	*x = Uint32RangeWithOptionalMaxUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[126]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Uint32RangeWithOptionalMaxUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint32RangeWithOptionalMaxUpdateRequestInput) ProtoMessage() {}

func (x *Uint32RangeWithOptionalMaxUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[126]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint32RangeWithOptionalMaxUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*Uint32RangeWithOptionalMaxUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{126}
}

func (x *Uint32RangeWithOptionalMaxUpdateRequestInput) GetMin() uint32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *Uint32RangeWithOptionalMaxUpdateRequestInput) GetMax() uint32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type User struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt                  *timestamppb.Timestamp `json:"CreatedAt,omitempty"                  protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	PasswordLastChangedAt      *timestamppb.Timestamp `json:"PasswordLastChangedAt,omitempty"      protobuf:"bytes,2,opt,name=PasswordLastChangedAt,proto3"`
	LastUpdatedAt              *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty"              protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3"`
	LastAcceptedTermsOfService *timestamppb.Timestamp `json:"LastAcceptedTermsOfService,omitempty" protobuf:"bytes,4,opt,name=LastAcceptedTermsOfService,proto3"`
	LastAcceptedPrivacyPolicy  *timestamppb.Timestamp `json:"LastAcceptedPrivacyPolicy,omitempty"  protobuf:"bytes,5,opt,name=LastAcceptedPrivacyPolicy,proto3"`
	TwoFactorSecretVerifiedAt  *timestamppb.Timestamp `json:"TwoFactorSecretVerifiedAt,omitempty"  protobuf:"bytes,6,opt,name=TwoFactorSecretVerifiedAt,proto3"`
	EmailAddressVerifiedAt     *timestamppb.Timestamp `json:"EmailAddressVerifiedAt,omitempty"     protobuf:"bytes,19,opt,name=EmailAddressVerifiedAt,proto3"`
	Birthday                   *timestamppb.Timestamp `json:"Birthday,omitempty"                   protobuf:"bytes,8,opt,name=Birthday,proto3"`
	ArchivedAt                 *timestamppb.Timestamp `json:"ArchivedAt,omitempty"                 protobuf:"bytes,9,opt,name=ArchivedAt,proto3"`
	HashedPassword             string                 `json:"HashedPassword,omitempty"             protobuf:"bytes,12,opt,name=HashedPassword,proto3"`
	LastName                   string                 `json:"LastName,omitempty"                   protobuf:"bytes,17,opt,name=LastName,proto3"`
	AccountStatusExplanation   string                 `json:"AccountStatusExplanation,omitempty"   protobuf:"bytes,10,opt,name=AccountStatusExplanation,proto3"`
	ID                         string                 `json:"ID,omitempty"                         protobuf:"bytes,13,opt,name=ID,proto3"`
	AccountStatus              string                 `json:"AccountStatus,omitempty"              protobuf:"bytes,14,opt,name=AccountStatus,proto3"`
	Username                   string                 `json:"Username,omitempty"                   protobuf:"bytes,15,opt,name=Username,proto3"`
	FirstName                  string                 `json:"FirstName,omitempty"                  protobuf:"bytes,16,opt,name=FirstName,proto3"`
	TwoFactorSecret            string                 `json:"TwoFactorSecret,omitempty"            protobuf:"bytes,11,opt,name=TwoFactorSecret,proto3"`
	EmailAddress               string                 `json:"EmailAddress,omitempty"               protobuf:"bytes,18,opt,name=EmailAddress,proto3"`
	AvatarSrc                  string                 `json:"AvatarSrc,omitempty"                  protobuf:"bytes,7,opt,name=AvatarSrc,proto3"`
	ServiceRole                string                 `json:"ServiceRole,omitempty"                protobuf:"bytes,20,opt,name=ServiceRole,proto3"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
	RequiresPasswordChange     bool `json:"RequiresPasswordChange,omitempty" protobuf:"varint,21,opt,name=RequiresPasswordChange,proto3"`
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_messages_proto_msgTypes[127]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[127]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{127}
}

func (x *User) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *User) GetPasswordLastChangedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PasswordLastChangedAt
	}
	return nil
}

func (x *User) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *User) GetLastAcceptedTermsOfService() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAcceptedTermsOfService
	}
	return nil
}

func (x *User) GetLastAcceptedPrivacyPolicy() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAcceptedPrivacyPolicy
	}
	return nil
}

func (x *User) GetTwoFactorSecretVerifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.TwoFactorSecretVerifiedAt
	}
	return nil
}

func (x *User) GetAvatarSrc() string {
	if x != nil {
		return x.AvatarSrc
	}
	return ""
}

func (x *User) GetBirthday() *timestamppb.Timestamp {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *User) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *User) GetAccountStatusExplanation() string {
	if x != nil {
		return x.AccountStatusExplanation
	}
	return ""
}

func (x *User) GetTwoFactorSecret() string {
	if x != nil {
		return x.TwoFactorSecret
	}
	return ""
}

func (x *User) GetHashedPassword() string {
	if x != nil {
		return x.HashedPassword
	}
	return ""
}

func (x *User) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *User) GetAccountStatus() string {
	if x != nil {
		return x.AccountStatus
	}
	return ""
}

func (x *User) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *User) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *User) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *User) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *User) GetEmailAddressVerifiedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EmailAddressVerifiedAt
	}
	return nil
}

func (x *User) GetServiceRole() string {
	if x != nil {
		return x.ServiceRole
	}
	return ""
}

func (x *User) GetRequiresPasswordChange() bool {
	if x != nil {
		return x.RequiresPasswordChange
	}
	return false
}

type UserAccountStatusUpdateInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NewStatus     string                 `json:"NewStatus,omitempty"    protobuf:"bytes,1,opt,name=NewStatus,proto3"`
	Reason        string                 `json:"Reason,omitempty"       protobuf:"bytes,2,opt,name=Reason,proto3"`
	TargetUserID  string                 `json:"TargetUserID,omitempty" protobuf:"bytes,3,opt,name=TargetUserID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserAccountStatusUpdateInput) Reset() {
	*x = UserAccountStatusUpdateInput{}
	mi := &file_messages_proto_msgTypes[128]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserAccountStatusUpdateInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccountStatusUpdateInput) ProtoMessage() {}

func (x *UserAccountStatusUpdateInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[128]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccountStatusUpdateInput.ProtoReflect.Descriptor instead.
func (*UserAccountStatusUpdateInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{128}
}

func (x *UserAccountStatusUpdateInput) GetNewStatus() string {
	if x != nil {
		return x.NewStatus
	}
	return ""
}

func (x *UserAccountStatusUpdateInput) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *UserAccountStatusUpdateInput) GetTargetUserID() string {
	if x != nil {
		return x.TargetUserID
	}
	return ""
}

type UserCreationResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt       *timestamppb.Timestamp `json:"CreatedAt,omitempty"       protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	Birthday        *timestamppb.Timestamp `json:"Birthday,omitempty"        protobuf:"bytes,2,opt,name=Birthday,proto3"`
	Username        string                 `json:"Username,omitempty"        protobuf:"bytes,4,opt,name=Username,proto3"`
	EmailAddress    string                 `json:"EmailAddress,omitempty"    protobuf:"bytes,5,opt,name=EmailAddress,proto3"`
	TwoFactorQRCode string                 `json:"TwoFactorQRCode,omitempty" protobuf:"bytes,6,opt,name=TwoFactorQRCode,proto3"`
	CreatedUserID   string                 `json:"CreatedUserID,omitempty"   protobuf:"bytes,7,opt,name=CreatedUserID,proto3"`
	AccountStatus   string                 `json:"AccountStatus,omitempty"   protobuf:"bytes,8,opt,name=AccountStatus,proto3"`
	TwoFactorSecret string                 `json:"TwoFactorSecret,omitempty" protobuf:"bytes,9,opt,name=TwoFactorSecret,proto3"`
	FirstName       string                 `json:"FirstName,omitempty"       protobuf:"bytes,10,opt,name=FirstName,proto3"`
	LastName        string                 `json:"LastName,omitempty"        protobuf:"bytes,11,opt,name=LastName,proto3"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UserCreationResponse) Reset() {
	*x = UserCreationResponse{}
	mi := &file_messages_proto_msgTypes[129]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserCreationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCreationResponse) ProtoMessage() {}

func (x *UserCreationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[129]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCreationResponse.ProtoReflect.Descriptor instead.
func (*UserCreationResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{129}
}

func (x *UserCreationResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UserCreationResponse) GetBirthday() *timestamppb.Timestamp {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *UserCreationResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserCreationResponse) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *UserCreationResponse) GetTwoFactorQRCode() string {
	if x != nil {
		return x.TwoFactorQRCode
	}
	return ""
}

func (x *UserCreationResponse) GetCreatedUserID() string {
	if x != nil {
		return x.CreatedUserID
	}
	return ""
}

func (x *UserCreationResponse) GetAccountStatus() string {
	if x != nil {
		return x.AccountStatus
	}
	return ""
}

func (x *UserCreationResponse) GetTwoFactorSecret() string {
	if x != nil {
		return x.TwoFactorSecret
	}
	return ""
}

func (x *UserCreationResponse) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UserCreationResponse) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

type UserDataAggregationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestID     string                 `json:"RequestID,omitempty" protobuf:"bytes,1,opt,name=RequestID,proto3"`
	ReportID      string                 `json:"ReportID,omitempty"  protobuf:"bytes,2,opt,name=ReportID,proto3"`
	UserID        string                 `json:"UserID,omitempty"    protobuf:"bytes,3,opt,name=UserID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserDataAggregationRequest) Reset() {
	*x = UserDataAggregationRequest{}
	mi := &file_messages_proto_msgTypes[130]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserDataAggregationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDataAggregationRequest) ProtoMessage() {}

func (x *UserDataAggregationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[130]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDataAggregationRequest.ProtoReflect.Descriptor instead.
func (*UserDataAggregationRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{130}
}

func (x *UserDataAggregationRequest) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *UserDataAggregationRequest) GetReportID() string {
	if x != nil {
		return x.ReportID
	}
	return ""
}

func (x *UserDataAggregationRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type UserDataCollection struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Core          *CoreUserDataCollection   `json:"Core,omitempty"     protobuf:"bytes,1,opt,name=Core,proto3"`
	Eating        *EatingUserDataCollection `json:"Eating,omitempty"   protobuf:"bytes,2,opt,name=Eating,proto3"`
	ReportID      string                    `json:"ReportID,omitempty" protobuf:"bytes,3,opt,name=ReportID,proto3"`
	User          *User                     `json:"User,omitempty"     protobuf:"bytes,4,opt,name=User,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserDataCollection) Reset() {
	*x = UserDataCollection{}
	mi := &file_messages_proto_msgTypes[131]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserDataCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDataCollection) ProtoMessage() {}

func (x *UserDataCollection) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[131]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDataCollection.ProtoReflect.Descriptor instead.
func (*UserDataCollection) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{131}
}

func (x *UserDataCollection) GetCore() *CoreUserDataCollection {
	if x != nil {
		return x.Core
	}
	return nil
}

func (x *UserDataCollection) GetEating() *EatingUserDataCollection {
	if x != nil {
		return x.Eating
	}
	return nil
}

func (x *UserDataCollection) GetReportID() string {
	if x != nil {
		return x.ReportID
	}
	return ""
}

func (x *UserDataCollection) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type UserDataCollectionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReportID      string                 `json:"ReportID,omitempty" protobuf:"bytes,1,opt,name=ReportID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserDataCollectionResponse) Reset() {
	*x = UserDataCollectionResponse{}
	mi := &file_messages_proto_msgTypes[132]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserDataCollectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDataCollectionResponse) ProtoMessage() {}

func (x *UserDataCollectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[132]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDataCollectionResponse.ProtoReflect.Descriptor instead.
func (*UserDataCollectionResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{132}
}

func (x *UserDataCollectionResponse) GetReportID() string {
	if x != nil {
		return x.ReportID
	}
	return ""
}

type UserDetailsDatabaseUpdateInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Birthday      *timestamppb.Timestamp `json:"Birthday,omitempty"  protobuf:"bytes,1,opt,name=Birthday,proto3"`
	FirstName     string                 `json:"FirstName,omitempty" protobuf:"bytes,2,opt,name=FirstName,proto3"`
	LastName      string                 `json:"LastName,omitempty"  protobuf:"bytes,3,opt,name=LastName,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserDetailsDatabaseUpdateInput) Reset() {
	*x = UserDetailsDatabaseUpdateInput{}
	mi := &file_messages_proto_msgTypes[133]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserDetailsDatabaseUpdateInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDetailsDatabaseUpdateInput) ProtoMessage() {}

func (x *UserDetailsDatabaseUpdateInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[133]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDetailsDatabaseUpdateInput.ProtoReflect.Descriptor instead.
func (*UserDetailsDatabaseUpdateInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{133}
}

func (x *UserDetailsDatabaseUpdateInput) GetBirthday() *timestamppb.Timestamp {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *UserDetailsDatabaseUpdateInput) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UserDetailsDatabaseUpdateInput) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

type UserDetailsUpdateRequestInput struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	FirstName       string                 `json:"FirstName,omitempty"       protobuf:"bytes,1,opt,name=FirstName,proto3"`
	LastName        string                 `json:"LastName,omitempty"        protobuf:"bytes,2,opt,name=LastName,proto3"`
	Birthday        *timestamppb.Timestamp `json:"Birthday,omitempty"        protobuf:"bytes,3,opt,name=Birthday,proto3"`
	CurrentPassword string                 `json:"CurrentPassword,omitempty" protobuf:"bytes,4,opt,name=CurrentPassword,proto3"`
	TOTPToken       string                 `json:"TOTPToken,omitempty"       protobuf:"bytes,5,opt,name=TOTPToken,proto3"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UserDetailsUpdateRequestInput) Reset() {
	*x = UserDetailsUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[134]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserDetailsUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDetailsUpdateRequestInput) ProtoMessage() {}

func (x *UserDetailsUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[134]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDetailsUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*UserDetailsUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{134}
}

func (x *UserDetailsUpdateRequestInput) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UserDetailsUpdateRequestInput) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UserDetailsUpdateRequestInput) GetBirthday() *timestamppb.Timestamp {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *UserDetailsUpdateRequestInput) GetCurrentPassword() string {
	if x != nil {
		return x.CurrentPassword
	}
	return ""
}

func (x *UserDetailsUpdateRequestInput) GetTOTPToken() string {
	if x != nil {
		return x.TOTPToken
	}
	return ""
}

type UserEmailAddressUpdateInput struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	NewEmailAddress string                 `json:"NewEmailAddress,omitempty" protobuf:"bytes,1,opt,name=NewEmailAddress,proto3"`
	CurrentPassword string                 `json:"CurrentPassword,omitempty" protobuf:"bytes,2,opt,name=CurrentPassword,proto3"`
	TOTPToken       string                 `json:"TOTPToken,omitempty"       protobuf:"bytes,3,opt,name=TOTPToken,proto3"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UserEmailAddressUpdateInput) Reset() {
	*x = UserEmailAddressUpdateInput{}
	mi := &file_messages_proto_msgTypes[135]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserEmailAddressUpdateInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEmailAddressUpdateInput) ProtoMessage() {}

func (x *UserEmailAddressUpdateInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[135]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEmailAddressUpdateInput.ProtoReflect.Descriptor instead.
func (*UserEmailAddressUpdateInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{135}
}

func (x *UserEmailAddressUpdateInput) GetNewEmailAddress() string {
	if x != nil {
		return x.NewEmailAddress
	}
	return ""
}

func (x *UserEmailAddressUpdateInput) GetCurrentPassword() string {
	if x != nil {
		return x.CurrentPassword
	}
	return ""
}

func (x *UserEmailAddressUpdateInput) GetTOTPToken() string {
	if x != nil {
		return x.TOTPToken
	}
	return ""
}

type UserIngredientPreference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp `json:"CreatedAt,omitempty"     protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	LastUpdatedAt *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty" protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3"`
	ArchivedAt    *timestamppb.Timestamp `json:"ArchivedAt,omitempty"    protobuf:"bytes,3,opt,name=ArchivedAt,proto3"`
	Ingredient    *ValidIngredient       `json:"Ingredient,omitempty"    protobuf:"bytes,7,opt,name=Ingredient,proto3"`
	ID            string                 `json:"ID,omitempty"            protobuf:"bytes,4,opt,name=ID,proto3"`
	Notes         string                 `json:"Notes,omitempty"         protobuf:"bytes,5,opt,name=Notes,proto3"`
	BelongsToUser string                 `json:"BelongsToUser,omitempty" protobuf:"bytes,6,opt,name=BelongsToUser,proto3"`
	unknownFields protoimpl.UnknownFields
	Rating        int32 `json:"Rating,omitempty" protobuf:"varint,8,opt,name=Rating,proto3"`
	sizeCache     protoimpl.SizeCache
	Allergy       bool `json:"Allergy,omitempty" protobuf:"varint,9,opt,name=Allergy,proto3"`
}

func (x *UserIngredientPreference) Reset() {
	*x = UserIngredientPreference{}
	mi := &file_messages_proto_msgTypes[136]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserIngredientPreference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIngredientPreference) ProtoMessage() {}

func (x *UserIngredientPreference) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[136]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIngredientPreference.ProtoReflect.Descriptor instead.
func (*UserIngredientPreference) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{136}
}

func (x *UserIngredientPreference) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UserIngredientPreference) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *UserIngredientPreference) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *UserIngredientPreference) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UserIngredientPreference) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *UserIngredientPreference) GetBelongsToUser() string {
	if x != nil {
		return x.BelongsToUser
	}
	return ""
}

func (x *UserIngredientPreference) GetIngredient() *ValidIngredient {
	if x != nil {
		return x.Ingredient
	}
	return nil
}

func (x *UserIngredientPreference) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *UserIngredientPreference) GetAllergy() bool {
	if x != nil {
		return x.Allergy
	}
	return false
}

type UserIngredientPreferenceCreationRequestInput struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientGroupID string                 `json:"ValidIngredientGroupID,omitempty" protobuf:"bytes,1,opt,name=ValidIngredientGroupID,proto3"`
	ValidIngredientID      string                 `json:"ValidIngredientID,omitempty"      protobuf:"bytes,2,opt,name=ValidIngredientID,proto3"`
	Notes                  string                 `json:"Notes,omitempty"                  protobuf:"bytes,3,opt,name=Notes,proto3"`
	unknownFields          protoimpl.UnknownFields
	Rating                 int32 `json:"Rating,omitempty" protobuf:"varint,4,opt,name=Rating,proto3"`
	sizeCache              protoimpl.SizeCache
	Allergy                bool `json:"Allergy,omitempty" protobuf:"varint,5,opt,name=Allergy,proto3"`
}

func (x *UserIngredientPreferenceCreationRequestInput) Reset() {
	*x = UserIngredientPreferenceCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[137]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserIngredientPreferenceCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIngredientPreferenceCreationRequestInput) ProtoMessage() {}

func (x *UserIngredientPreferenceCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[137]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIngredientPreferenceCreationRequestInput.ProtoReflect.Descriptor instead.
func (*UserIngredientPreferenceCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{137}
}

func (x *UserIngredientPreferenceCreationRequestInput) GetValidIngredientGroupID() string {
	if x != nil {
		return x.ValidIngredientGroupID
	}
	return ""
}

func (x *UserIngredientPreferenceCreationRequestInput) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

func (x *UserIngredientPreferenceCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *UserIngredientPreferenceCreationRequestInput) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *UserIngredientPreferenceCreationRequestInput) GetAllergy() bool {
	if x != nil {
		return x.Allergy
	}
	return false
}

type UserIngredientPreferenceUpdateRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Notes         string                 `json:"Notes,omitempty"        protobuf:"bytes,1,opt,name=Notes,proto3"`
	IngredientID  string                 `json:"IngredientID,omitempty" protobuf:"bytes,2,opt,name=IngredientID,proto3"`
	unknownFields protoimpl.UnknownFields
	Rating        int32 `json:"Rating,omitempty" protobuf:"varint,3,opt,name=Rating,proto3"`
	sizeCache     protoimpl.SizeCache
	Allergy       bool `json:"Allergy,omitempty" protobuf:"varint,4,opt,name=Allergy,proto3"`
}

func (x *UserIngredientPreferenceUpdateRequestInput) Reset() {
	*x = UserIngredientPreferenceUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[138]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserIngredientPreferenceUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIngredientPreferenceUpdateRequestInput) ProtoMessage() {}

func (x *UserIngredientPreferenceUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[138]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIngredientPreferenceUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*UserIngredientPreferenceUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{138}
}

func (x *UserIngredientPreferenceUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *UserIngredientPreferenceUpdateRequestInput) GetIngredientID() string {
	if x != nil {
		return x.IngredientID
	}
	return ""
}

func (x *UserIngredientPreferenceUpdateRequestInput) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *UserIngredientPreferenceUpdateRequestInput) GetAllergy() bool {
	if x != nil {
		return x.Allergy
	}
	return false
}

type UserLoginInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Username      string                 `json:"Username,omitempty"  protobuf:"bytes,1,opt,name=Username,proto3"`
	Password      string                 `json:"Password,omitempty"  protobuf:"bytes,2,opt,name=Password,proto3"`
	TOTPToken     string                 `json:"TOTPToken,omitempty" protobuf:"bytes,3,opt,name=TOTPToken,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserLoginInput) Reset() {
	*x = UserLoginInput{}
	mi := &file_messages_proto_msgTypes[139]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserLoginInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginInput) ProtoMessage() {}

func (x *UserLoginInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[139]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginInput.ProtoReflect.Descriptor instead.
func (*UserLoginInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{139}
}

func (x *UserLoginInput) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserLoginInput) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UserLoginInput) GetTOTPToken() string {
	if x != nil {
		return x.TOTPToken
	}
	return ""
}

type UserNotification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp `json:"CreatedAt,omitempty"     protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	LastUpdatedAt *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty" protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3"`
	ID            string                 `json:"ID,omitempty"            protobuf:"bytes,3,opt,name=ID,proto3"`
	Content       string                 `json:"Content,omitempty"       protobuf:"bytes,4,opt,name=Content,proto3"`
	Status        string                 `json:"Status,omitempty"        protobuf:"bytes,5,opt,name=Status,proto3"`
	BelongsToUser string                 `json:"BelongsToUser,omitempty" protobuf:"bytes,6,opt,name=BelongsToUser,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserNotification) Reset() {
	*x = UserNotification{}
	mi := &file_messages_proto_msgTypes[140]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserNotification) ProtoMessage() {}

func (x *UserNotification) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[140]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserNotification.ProtoReflect.Descriptor instead.
func (*UserNotification) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{140}
}

func (x *UserNotification) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UserNotification) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *UserNotification) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UserNotification) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UserNotification) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UserNotification) GetBelongsToUser() string {
	if x != nil {
		return x.BelongsToUser
	}
	return ""
}

type UserNotificationCreationRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       string                 `json:"Content,omitempty"       protobuf:"bytes,1,opt,name=Content,proto3"`
	Status        string                 `json:"Status,omitempty"        protobuf:"bytes,2,opt,name=Status,proto3"`
	BelongsToUser string                 `json:"BelongsToUser,omitempty" protobuf:"bytes,3,opt,name=BelongsToUser,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserNotificationCreationRequestInput) Reset() {
	*x = UserNotificationCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[141]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserNotificationCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserNotificationCreationRequestInput) ProtoMessage() {}

func (x *UserNotificationCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[141]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserNotificationCreationRequestInput.ProtoReflect.Descriptor instead.
func (*UserNotificationCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{141}
}

func (x *UserNotificationCreationRequestInput) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UserNotificationCreationRequestInput) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *UserNotificationCreationRequestInput) GetBelongsToUser() string {
	if x != nil {
		return x.BelongsToUser
	}
	return ""
}

type UserNotificationUpdateRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `json:"Status,omitempty" protobuf:"bytes,1,opt,name=Status,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserNotificationUpdateRequestInput) Reset() {
	*x = UserNotificationUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[142]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserNotificationUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserNotificationUpdateRequestInput) ProtoMessage() {}

func (x *UserNotificationUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[142]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserNotificationUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*UserNotificationUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{142}
}

func (x *UserNotificationUpdateRequestInput) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type UserPermissionsRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Permissions   []string               `json:"Permissions,omitempty" protobuf:"bytes,1,rep,name=Permissions,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserPermissionsRequestInput) Reset() {
	*x = UserPermissionsRequestInput{}
	mi := &file_messages_proto_msgTypes[143]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserPermissionsRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPermissionsRequestInput) ProtoMessage() {}

func (x *UserPermissionsRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[143]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPermissionsRequestInput.ProtoReflect.Descriptor instead.
func (*UserPermissionsRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{143}
}

func (x *UserPermissionsRequestInput) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type UserPermissionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Permissions   map[string]bool        `json:"Permissions,omitempty" protobuf:"bytes,1,rep,name=Permissions,proto3" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserPermissionsResponse) Reset() {
	*x = UserPermissionsResponse{}
	mi := &file_messages_proto_msgTypes[144]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserPermissionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPermissionsResponse) ProtoMessage() {}

func (x *UserPermissionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[144]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPermissionsResponse.ProtoReflect.Descriptor instead.
func (*UserPermissionsResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{144}
}

func (x *UserPermissionsResponse) GetPermissions() map[string]bool {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type UserRegistrationInput struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Birthday              *timestamppb.Timestamp `json:"Birthday,omitempty"        protobuf:"bytes,1,opt,name=Birthday,proto3"`
	Username              string                 `json:"Username,omitempty"        protobuf:"bytes,6,opt,name=Username,proto3"`
	EmailAddress          string                 `json:"EmailAddress,omitempty"    protobuf:"bytes,3,opt,name=EmailAddress,proto3"`
	InvitationToken       string                 `json:"InvitationToken,omitempty" protobuf:"bytes,4,opt,name=InvitationToken,proto3"`
	InvitationID          string                 `json:"InvitationID,omitempty"    protobuf:"bytes,5,opt,name=InvitationID,proto3"`
	Password              string                 `json:"Password,omitempty"        protobuf:"bytes,2,opt,name=Password,proto3"`
	FirstName             string                 `json:"FirstName,omitempty"       protobuf:"bytes,7,opt,name=FirstName,proto3"`
	LastName              string                 `json:"LastName,omitempty"        protobuf:"bytes,8,opt,name=LastName,proto3"`
	HouseholdName         string                 `json:"HouseholdName,omitempty"   protobuf:"bytes,9,opt,name=HouseholdName,proto3"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
	AcceptedTOS           bool `json:"AcceptedTOS,omitempty"           protobuf:"varint,10,opt,name=AcceptedTOS,proto3"`
	AcceptedPrivacyPolicy bool `json:"AcceptedPrivacyPolicy,omitempty" protobuf:"varint,11,opt,name=AcceptedPrivacyPolicy,proto3"`
}

func (x *UserRegistrationInput) Reset() {
	*x = UserRegistrationInput{}
	mi := &file_messages_proto_msgTypes[145]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserRegistrationInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRegistrationInput) ProtoMessage() {}

func (x *UserRegistrationInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[145]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRegistrationInput.ProtoReflect.Descriptor instead.
func (*UserRegistrationInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{145}
}

func (x *UserRegistrationInput) GetBirthday() *timestamppb.Timestamp {
	if x != nil {
		return x.Birthday
	}
	return nil
}

func (x *UserRegistrationInput) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UserRegistrationInput) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *UserRegistrationInput) GetInvitationToken() string {
	if x != nil {
		return x.InvitationToken
	}
	return ""
}

func (x *UserRegistrationInput) GetInvitationID() string {
	if x != nil {
		return x.InvitationID
	}
	return ""
}

func (x *UserRegistrationInput) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserRegistrationInput) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UserRegistrationInput) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UserRegistrationInput) GetHouseholdName() string {
	if x != nil {
		return x.HouseholdName
	}
	return ""
}

func (x *UserRegistrationInput) GetAcceptedTOS() bool {
	if x != nil {
		return x.AcceptedTOS
	}
	return false
}

func (x *UserRegistrationInput) GetAcceptedPrivacyPolicy() bool {
	if x != nil {
		return x.AcceptedPrivacyPolicy
	}
	return false
}

type UserStatusResponse struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	UserID                   string                 `json:"UserID,omitempty"                   protobuf:"bytes,1,opt,name=UserID,proto3"`
	AccountStatus            string                 `json:"AccountStatus,omitempty"            protobuf:"bytes,2,opt,name=AccountStatus,proto3"`
	AccountStatusExplanation string                 `json:"AccountStatusExplanation,omitempty" protobuf:"bytes,3,opt,name=AccountStatusExplanation,proto3"`
	ActiveHousehold          string                 `json:"ActiveHousehold,omitempty"          protobuf:"bytes,4,opt,name=ActiveHousehold,proto3"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
	UserIsAuthenticated      bool `json:"UserIsAuthenticated,omitempty" protobuf:"varint,5,opt,name=UserIsAuthenticated,proto3"`
}

func (x *UserStatusResponse) Reset() {
	*x = UserStatusResponse{}
	mi := &file_messages_proto_msgTypes[146]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStatusResponse) ProtoMessage() {}

func (x *UserStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[146]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStatusResponse.ProtoReflect.Descriptor instead.
func (*UserStatusResponse) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{146}
}

func (x *UserStatusResponse) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserStatusResponse) GetAccountStatus() string {
	if x != nil {
		return x.AccountStatus
	}
	return ""
}

func (x *UserStatusResponse) GetAccountStatusExplanation() string {
	if x != nil {
		return x.AccountStatusExplanation
	}
	return ""
}

func (x *UserStatusResponse) GetActiveHousehold() string {
	if x != nil {
		return x.ActiveHousehold
	}
	return ""
}

func (x *UserStatusResponse) GetUserIsAuthenticated() bool {
	if x != nil {
		return x.UserIsAuthenticated
	}
	return false
}

type UsernameReminderRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EmailAddress  string                 `json:"EmailAddress,omitempty" protobuf:"bytes,1,opt,name=EmailAddress,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UsernameReminderRequestInput) Reset() {
	*x = UsernameReminderRequestInput{}
	mi := &file_messages_proto_msgTypes[147]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsernameReminderRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsernameReminderRequestInput) ProtoMessage() {}

func (x *UsernameReminderRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[147]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsernameReminderRequestInput.ProtoReflect.Descriptor instead.
func (*UsernameReminderRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{147}
}

func (x *UsernameReminderRequestInput) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

type UsernameUpdateInput struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	NewUsername     string                 `json:"NewUsername,omitempty"     protobuf:"bytes,1,opt,name=NewUsername,proto3"`
	CurrentPassword string                 `json:"CurrentPassword,omitempty" protobuf:"bytes,2,opt,name=CurrentPassword,proto3"`
	TOTPToken       string                 `json:"TOTPToken,omitempty"       protobuf:"bytes,3,opt,name=TOTPToken,proto3"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UsernameUpdateInput) Reset() {
	*x = UsernameUpdateInput{}
	mi := &file_messages_proto_msgTypes[148]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UsernameUpdateInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsernameUpdateInput) ProtoMessage() {}

func (x *UsernameUpdateInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[148]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsernameUpdateInput.ProtoReflect.Descriptor instead.
func (*UsernameUpdateInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{148}
}

func (x *UsernameUpdateInput) GetNewUsername() string {
	if x != nil {
		return x.NewUsername
	}
	return ""
}

func (x *UsernameUpdateInput) GetCurrentPassword() string {
	if x != nil {
		return x.CurrentPassword
	}
	return ""
}

func (x *UsernameUpdateInput) GetTOTPToken() string {
	if x != nil {
		return x.TOTPToken
	}
	return ""
}

type ValidIngredient struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt                   *timestamppb.Timestamp `json:"CreatedAt,omitempty"                   protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	LastUpdatedAt               *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty"               protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3"`
	ArchivedAt                  *timestamppb.Timestamp `json:"ArchivedAt,omitempty"                  protobuf:"bytes,3,opt,name=ArchivedAt,proto3"`
	StorageTemperatureInCelsius *OptionalFloat32Range  `json:"StorageTemperatureInCelsius,omitempty" protobuf:"bytes,4,opt,name=StorageTemperatureInCelsius,proto3"`
	StorageInstructions         string                 `json:"StorageInstructions,omitempty"         protobuf:"bytes,8,opt,name=StorageInstructions,proto3"`
	Warning                     string                 `json:"Warning,omitempty"                     protobuf:"bytes,6,opt,name=Warning,proto3"`
	PluralName                  string                 `json:"PluralName,omitempty"                  protobuf:"bytes,7,opt,name=PluralName,proto3"`
	IconPath                    string                 `json:"IconPath,omitempty"                    protobuf:"bytes,5,opt,name=IconPath,proto3"`
	Name                        string                 `json:"Name,omitempty"                        protobuf:"bytes,9,opt,name=Name,proto3"`
	ID                          string                 `json:"ID,omitempty"                          protobuf:"bytes,10,opt,name=ID,proto3"`
	Description                 string                 `json:"Description,omitempty"                 protobuf:"bytes,11,opt,name=Description,proto3"`
	Slug                        string                 `json:"Slug,omitempty"                        protobuf:"bytes,12,opt,name=Slug,proto3"`
	ShoppingSuggestions         string                 `json:"ShoppingSuggestions,omitempty"         protobuf:"bytes,13,opt,name=ShoppingSuggestions,proto3"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
	ContainsEgg                 bool `json:"ContainsEgg,omitempty"            protobuf:"varint,18,opt,name=ContainsEgg,proto3"`
	ContainsAlcohol             bool `json:"ContainsAlcohol,omitempty"        protobuf:"varint,27,opt,name=ContainsAlcohol,proto3"`
	ContainsPeanut              bool `json:"ContainsPeanut,omitempty"         protobuf:"varint,16,opt,name=ContainsPeanut,proto3"`
	ContainsWheat               bool `json:"ContainsWheat,omitempty"          protobuf:"varint,19,opt,name=ContainsWheat,proto3"`
	ContainsSoy                 bool `json:"ContainsSoy,omitempty"            protobuf:"varint,20,opt,name=ContainsSoy,proto3"`
	AnimalDerived               bool `json:"AnimalDerived,omitempty"          protobuf:"varint,21,opt,name=AnimalDerived,proto3"`
	RestrictToPreparations      bool `json:"RestrictToPreparations,omitempty" protobuf:"varint,22,opt,name=RestrictToPreparations,proto3"`
	ContainsSesame              bool `json:"ContainsSesame,omitempty"         protobuf:"varint,23,opt,name=ContainsSesame,proto3"`
	ContainsFish                bool `json:"ContainsFish,omitempty"           protobuf:"varint,24,opt,name=ContainsFish,proto3"`
	ContainsGluten              bool `json:"ContainsGluten,omitempty"         protobuf:"varint,25,opt,name=ContainsGluten,proto3"`
	ContainsDairy               bool `json:"ContainsDairy,omitempty"          protobuf:"varint,26,opt,name=ContainsDairy,proto3"`
	ContainsTreeNut             bool `json:"ContainsTreeNut,omitempty"        protobuf:"varint,17,opt,name=ContainsTreeNut,proto3"`
	AnimalFlesh                 bool `json:"AnimalFlesh,omitempty"            protobuf:"varint,28,opt,name=AnimalFlesh,proto3"`
	IsStarch                    bool `json:"IsStarch,omitempty"               protobuf:"varint,29,opt,name=IsStarch,proto3"`
	IsProtein                   bool `json:"IsProtein,omitempty"              protobuf:"varint,30,opt,name=IsProtein,proto3"`
	IsGrain                     bool `json:"IsGrain,omitempty"                protobuf:"varint,31,opt,name=IsGrain,proto3"`
	IsFruit                     bool `json:"IsFruit,omitempty"                protobuf:"varint,32,opt,name=IsFruit,proto3"`
	IsSalt                      bool `json:"IsSalt,omitempty"                 protobuf:"varint,33,opt,name=IsSalt,proto3"`
	IsFat                       bool `json:"IsFat,omitempty"                  protobuf:"varint,34,opt,name=IsFat,proto3"`
	IsAcid                      bool `json:"IsAcid,omitempty"                 protobuf:"varint,35,opt,name=IsAcid,proto3"`
	IsHeat                      bool `json:"IsHeat,omitempty"                 protobuf:"varint,36,opt,name=IsHeat,proto3"`
	IsLiquid                    bool `json:"IsLiquid,omitempty"               protobuf:"varint,15,opt,name=IsLiquid,proto3"`
	ContainsShellfish           bool `json:"ContainsShellfish,omitempty"      protobuf:"varint,14,opt,name=ContainsShellfish,proto3"`
}

func (x *ValidIngredient) Reset() {
	*x = ValidIngredient{}
	mi := &file_messages_proto_msgTypes[149]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredient) ProtoMessage() {}

func (x *ValidIngredient) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[149]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredient.ProtoReflect.Descriptor instead.
func (*ValidIngredient) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{149}
}

func (x *ValidIngredient) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidIngredient) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidIngredient) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidIngredient) GetStorageTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.StorageTemperatureInCelsius
	}
	return nil
}

func (x *ValidIngredient) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidIngredient) GetWarning() string {
	if x != nil {
		return x.Warning
	}
	return ""
}

func (x *ValidIngredient) GetPluralName() string {
	if x != nil {
		return x.PluralName
	}
	return ""
}

func (x *ValidIngredient) GetStorageInstructions() string {
	if x != nil {
		return x.StorageInstructions
	}
	return ""
}

func (x *ValidIngredient) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidIngredient) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidIngredient) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidIngredient) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidIngredient) GetShoppingSuggestions() string {
	if x != nil {
		return x.ShoppingSuggestions
	}
	return ""
}

func (x *ValidIngredient) GetContainsShellfish() bool {
	if x != nil {
		return x.ContainsShellfish
	}
	return false
}

func (x *ValidIngredient) GetIsLiquid() bool {
	if x != nil {
		return x.IsLiquid
	}
	return false
}

func (x *ValidIngredient) GetContainsPeanut() bool {
	if x != nil {
		return x.ContainsPeanut
	}
	return false
}

func (x *ValidIngredient) GetContainsTreeNut() bool {
	if x != nil {
		return x.ContainsTreeNut
	}
	return false
}

func (x *ValidIngredient) GetContainsEgg() bool {
	if x != nil {
		return x.ContainsEgg
	}
	return false
}

func (x *ValidIngredient) GetContainsWheat() bool {
	if x != nil {
		return x.ContainsWheat
	}
	return false
}

func (x *ValidIngredient) GetContainsSoy() bool {
	if x != nil {
		return x.ContainsSoy
	}
	return false
}

func (x *ValidIngredient) GetAnimalDerived() bool {
	if x != nil {
		return x.AnimalDerived
	}
	return false
}

func (x *ValidIngredient) GetRestrictToPreparations() bool {
	if x != nil {
		return x.RestrictToPreparations
	}
	return false
}

func (x *ValidIngredient) GetContainsSesame() bool {
	if x != nil {
		return x.ContainsSesame
	}
	return false
}

func (x *ValidIngredient) GetContainsFish() bool {
	if x != nil {
		return x.ContainsFish
	}
	return false
}

func (x *ValidIngredient) GetContainsGluten() bool {
	if x != nil {
		return x.ContainsGluten
	}
	return false
}

func (x *ValidIngredient) GetContainsDairy() bool {
	if x != nil {
		return x.ContainsDairy
	}
	return false
}

func (x *ValidIngredient) GetContainsAlcohol() bool {
	if x != nil {
		return x.ContainsAlcohol
	}
	return false
}

func (x *ValidIngredient) GetAnimalFlesh() bool {
	if x != nil {
		return x.AnimalFlesh
	}
	return false
}

func (x *ValidIngredient) GetIsStarch() bool {
	if x != nil {
		return x.IsStarch
	}
	return false
}

func (x *ValidIngredient) GetIsProtein() bool {
	if x != nil {
		return x.IsProtein
	}
	return false
}

func (x *ValidIngredient) GetIsGrain() bool {
	if x != nil {
		return x.IsGrain
	}
	return false
}

func (x *ValidIngredient) GetIsFruit() bool {
	if x != nil {
		return x.IsFruit
	}
	return false
}

func (x *ValidIngredient) GetIsSalt() bool {
	if x != nil {
		return x.IsSalt
	}
	return false
}

func (x *ValidIngredient) GetIsFat() bool {
	if x != nil {
		return x.IsFat
	}
	return false
}

func (x *ValidIngredient) GetIsAcid() bool {
	if x != nil {
		return x.IsAcid
	}
	return false
}

func (x *ValidIngredient) GetIsHeat() bool {
	if x != nil {
		return x.IsHeat
	}
	return false
}

type ValidIngredientCreationRequestInput struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	StorageTemperatureInCelsius *OptionalFloat32Range  `json:"StorageTemperatureInCelsius,omitempty" protobuf:"bytes,1,opt,name=StorageTemperatureInCelsius,proto3"`
	Warning                     string                 `json:"Warning,omitempty"                     protobuf:"bytes,2,opt,name=Warning,proto3"`
	IconPath                    string                 `json:"IconPath,omitempty"                    protobuf:"bytes,3,opt,name=IconPath,proto3"`
	PluralName                  string                 `json:"PluralName,omitempty"                  protobuf:"bytes,4,opt,name=PluralName,proto3"`
	StorageInstructions         string                 `json:"StorageInstructions,omitempty"         protobuf:"bytes,5,opt,name=StorageInstructions,proto3"`
	Name                        string                 `json:"Name,omitempty"                        protobuf:"bytes,6,opt,name=Name,proto3"`
	Description                 string                 `json:"Description,omitempty"                 protobuf:"bytes,7,opt,name=Description,proto3"`
	Slug                        string                 `json:"Slug,omitempty"                        protobuf:"bytes,8,opt,name=Slug,proto3"`
	ShoppingSuggestions         string                 `json:"ShoppingSuggestions,omitempty"         protobuf:"bytes,9,opt,name=ShoppingSuggestions,proto3"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
	ContainsPeanut              bool `json:"ContainsPeanut,omitempty"         protobuf:"varint,16,opt,name=ContainsPeanut,proto3"`
	ContainsAlcohol             bool `json:"ContainsAlcohol,omitempty"        protobuf:"varint,23,opt,name=ContainsAlcohol,proto3"`
	IsLiquid                    bool `json:"IsLiquid,omitempty"               protobuf:"varint,14,opt,name=IsLiquid,proto3"`
	ContainsSoy                 bool `json:"ContainsSoy,omitempty"            protobuf:"varint,15,opt,name=ContainsSoy,proto3"`
	AnimalFlesh                 bool `json:"AnimalFlesh,omitempty"            protobuf:"varint,12,opt,name=AnimalFlesh,proto3"`
	AnimalDerived               bool `json:"AnimalDerived,omitempty"          protobuf:"varint,17,opt,name=AnimalDerived,proto3"`
	RestrictToPreparations      bool `json:"RestrictToPreparations,omitempty" protobuf:"varint,18,opt,name=RestrictToPreparations,proto3"`
	ContainsDairy               bool `json:"ContainsDairy,omitempty"          protobuf:"varint,19,opt,name=ContainsDairy,proto3"`
	ContainsSesame              bool `json:"ContainsSesame,omitempty"         protobuf:"varint,20,opt,name=ContainsSesame,proto3"`
	ContainsTreeNut             bool `json:"ContainsTreeNut,omitempty"        protobuf:"varint,21,opt,name=ContainsTreeNut,proto3"`
	ContainsWheat               bool `json:"ContainsWheat,omitempty"          protobuf:"varint,22,opt,name=ContainsWheat,proto3"`
	ContainsEgg                 bool `json:"ContainsEgg,omitempty"            protobuf:"varint,13,opt,name=ContainsEgg,proto3"`
	ContainsGluten              bool `json:"ContainsGluten,omitempty"         protobuf:"varint,24,opt,name=ContainsGluten,proto3"`
	IsStarch                    bool `json:"IsStarch,omitempty"               protobuf:"varint,25,opt,name=IsStarch,proto3"`
	IsProtein                   bool `json:"IsProtein,omitempty"              protobuf:"varint,26,opt,name=IsProtein,proto3"`
	IsGrain                     bool `json:"IsGrain,omitempty"                protobuf:"varint,27,opt,name=IsGrain,proto3"`
	IsFruit                     bool `json:"IsFruit,omitempty"                protobuf:"varint,28,opt,name=IsFruit,proto3"`
	IsSalt                      bool `json:"IsSalt,omitempty"                 protobuf:"varint,29,opt,name=IsSalt,proto3"`
	IsFat                       bool `json:"IsFat,omitempty"                  protobuf:"varint,30,opt,name=IsFat,proto3"`
	IsAcid                      bool `json:"IsAcid,omitempty"                 protobuf:"varint,31,opt,name=IsAcid,proto3"`
	IsHeat                      bool `json:"IsHeat,omitempty"                 protobuf:"varint,32,opt,name=IsHeat,proto3"`
	ContainsShellfish           bool `json:"ContainsShellfish,omitempty"      protobuf:"varint,11,opt,name=ContainsShellfish,proto3"`
	ContainsFish                bool `json:"ContainsFish,omitempty"           protobuf:"varint,10,opt,name=ContainsFish,proto3"`
}

func (x *ValidIngredientCreationRequestInput) Reset() {
	*x = ValidIngredientCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[150]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientCreationRequestInput) ProtoMessage() {}

func (x *ValidIngredientCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[150]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidIngredientCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{150}
}

func (x *ValidIngredientCreationRequestInput) GetStorageTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.StorageTemperatureInCelsius
	}
	return nil
}

func (x *ValidIngredientCreationRequestInput) GetWarning() string {
	if x != nil {
		return x.Warning
	}
	return ""
}

func (x *ValidIngredientCreationRequestInput) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidIngredientCreationRequestInput) GetPluralName() string {
	if x != nil {
		return x.PluralName
	}
	return ""
}

func (x *ValidIngredientCreationRequestInput) GetStorageInstructions() string {
	if x != nil {
		return x.StorageInstructions
	}
	return ""
}

func (x *ValidIngredientCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidIngredientCreationRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidIngredientCreationRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidIngredientCreationRequestInput) GetShoppingSuggestions() string {
	if x != nil {
		return x.ShoppingSuggestions
	}
	return ""
}

func (x *ValidIngredientCreationRequestInput) GetContainsFish() bool {
	if x != nil {
		return x.ContainsFish
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetContainsShellfish() bool {
	if x != nil {
		return x.ContainsShellfish
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetAnimalFlesh() bool {
	if x != nil {
		return x.AnimalFlesh
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetContainsEgg() bool {
	if x != nil {
		return x.ContainsEgg
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetIsLiquid() bool {
	if x != nil {
		return x.IsLiquid
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetContainsSoy() bool {
	if x != nil {
		return x.ContainsSoy
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetContainsPeanut() bool {
	if x != nil {
		return x.ContainsPeanut
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetAnimalDerived() bool {
	if x != nil {
		return x.AnimalDerived
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetRestrictToPreparations() bool {
	if x != nil {
		return x.RestrictToPreparations
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetContainsDairy() bool {
	if x != nil {
		return x.ContainsDairy
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetContainsSesame() bool {
	if x != nil {
		return x.ContainsSesame
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetContainsTreeNut() bool {
	if x != nil {
		return x.ContainsTreeNut
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetContainsWheat() bool {
	if x != nil {
		return x.ContainsWheat
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetContainsAlcohol() bool {
	if x != nil {
		return x.ContainsAlcohol
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetContainsGluten() bool {
	if x != nil {
		return x.ContainsGluten
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetIsStarch() bool {
	if x != nil {
		return x.IsStarch
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetIsProtein() bool {
	if x != nil {
		return x.IsProtein
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetIsGrain() bool {
	if x != nil {
		return x.IsGrain
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetIsFruit() bool {
	if x != nil {
		return x.IsFruit
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetIsSalt() bool {
	if x != nil {
		return x.IsSalt
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetIsFat() bool {
	if x != nil {
		return x.IsFat
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetIsAcid() bool {
	if x != nil {
		return x.IsAcid
	}
	return false
}

func (x *ValidIngredientCreationRequestInput) GetIsHeat() bool {
	if x != nil {
		return x.IsHeat
	}
	return false
}

type ValidIngredientGroup struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp        `json:"CreatedAt,omitempty"     protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	LastUpdatedAt *timestamppb.Timestamp        `json:"LastUpdatedAt,omitempty" protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3"`
	ArchivedAt    *timestamppb.Timestamp        `json:"ArchivedAt,omitempty"    protobuf:"bytes,3,opt,name=ArchivedAt,proto3"`
	ID            string                        `json:"ID,omitempty"            protobuf:"bytes,4,opt,name=ID,proto3"`
	Name          string                        `json:"Name,omitempty"          protobuf:"bytes,5,opt,name=Name,proto3"`
	Slug          string                        `json:"Slug,omitempty"          protobuf:"bytes,6,opt,name=Slug,proto3"`
	Description   string                        `json:"Description,omitempty"   protobuf:"bytes,7,opt,name=Description,proto3"`
	Members       []*ValidIngredientGroupMember `json:"Members,omitempty"       protobuf:"bytes,8,rep,name=Members,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidIngredientGroup) Reset() {
	*x = ValidIngredientGroup{}
	mi := &file_messages_proto_msgTypes[151]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientGroup) ProtoMessage() {}

func (x *ValidIngredientGroup) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[151]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientGroup.ProtoReflect.Descriptor instead.
func (*ValidIngredientGroup) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{151}
}

func (x *ValidIngredientGroup) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidIngredientGroup) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidIngredientGroup) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidIngredientGroup) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidIngredientGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidIngredientGroup) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidIngredientGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidIngredientGroup) GetMembers() []*ValidIngredientGroupMember {
	if x != nil {
		return x.Members
	}
	return nil
}

type ValidIngredientGroupCreationRequestInput struct {
	state         protoimpl.MessageState                            `protogen:"open.v1"`
	Name          string                                            `json:"Name,omitempty"        protobuf:"bytes,1,opt,name=Name,proto3"`
	Slug          string                                            `json:"Slug,omitempty"        protobuf:"bytes,2,opt,name=Slug,proto3"`
	Description   string                                            `json:"Description,omitempty" protobuf:"bytes,3,opt,name=Description,proto3"`
	Members       []*ValidIngredientGroupMemberCreationRequestInput `json:"Members,omitempty"     protobuf:"bytes,4,rep,name=Members,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidIngredientGroupCreationRequestInput) Reset() {
	*x = ValidIngredientGroupCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[152]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientGroupCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientGroupCreationRequestInput) ProtoMessage() {}

func (x *ValidIngredientGroupCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[152]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientGroupCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidIngredientGroupCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{152}
}

func (x *ValidIngredientGroupCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidIngredientGroupCreationRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidIngredientGroupCreationRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidIngredientGroupCreationRequestInput) GetMembers() []*ValidIngredientGroupMemberCreationRequestInput {
	if x != nil {
		return x.Members
	}
	return nil
}

type ValidIngredientGroupMember struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt       *timestamppb.Timestamp `json:"CreatedAt,omitempty"       protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	ArchivedAt      *timestamppb.Timestamp `json:"ArchivedAt,omitempty"      protobuf:"bytes,2,opt,name=ArchivedAt,proto3"`
	ID              string                 `json:"ID,omitempty"              protobuf:"bytes,3,opt,name=ID,proto3"`
	BelongsToGroup  string                 `json:"BelongsToGroup,omitempty"  protobuf:"bytes,4,opt,name=BelongsToGroup,proto3"`
	ValidIngredient *ValidIngredient       `json:"ValidIngredient,omitempty" protobuf:"bytes,5,opt,name=ValidIngredient,proto3"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ValidIngredientGroupMember) Reset() {
	*x = ValidIngredientGroupMember{}
	mi := &file_messages_proto_msgTypes[153]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientGroupMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientGroupMember) ProtoMessage() {}

func (x *ValidIngredientGroupMember) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[153]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientGroupMember.ProtoReflect.Descriptor instead.
func (*ValidIngredientGroupMember) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{153}
}

func (x *ValidIngredientGroupMember) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidIngredientGroupMember) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidIngredientGroupMember) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidIngredientGroupMember) GetBelongsToGroup() string {
	if x != nil {
		return x.BelongsToGroup
	}
	return ""
}

func (x *ValidIngredientGroupMember) GetValidIngredient() *ValidIngredient {
	if x != nil {
		return x.ValidIngredient
	}
	return nil
}

type ValidIngredientGroupMemberCreationRequestInput struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientID string                 `json:"ValidIngredientID,omitempty" protobuf:"bytes,1,opt,name=ValidIngredientID,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ValidIngredientGroupMemberCreationRequestInput) Reset() {
	*x = ValidIngredientGroupMemberCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[154]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientGroupMemberCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientGroupMemberCreationRequestInput) ProtoMessage() {}

func (x *ValidIngredientGroupMemberCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[154]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientGroupMemberCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidIngredientGroupMemberCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{154}
}

func (x *ValidIngredientGroupMemberCreationRequestInput) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

type ValidIngredientGroupUpdateRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `json:"Name,omitempty"        protobuf:"bytes,1,opt,name=Name,proto3"`
	Slug          string                 `json:"Slug,omitempty"        protobuf:"bytes,2,opt,name=Slug,proto3"`
	Description   string                 `json:"Description,omitempty" protobuf:"bytes,3,opt,name=Description,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidIngredientGroupUpdateRequestInput) Reset() {
	*x = ValidIngredientGroupUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[155]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientGroupUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientGroupUpdateRequestInput) ProtoMessage() {}

func (x *ValidIngredientGroupUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[155]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientGroupUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ValidIngredientGroupUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{155}
}

func (x *ValidIngredientGroupUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidIngredientGroupUpdateRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidIngredientGroupUpdateRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ValidIngredientMeasurementUnit struct {
	state             protoimpl.MessageState       `protogen:"open.v1"`
	CreatedAt         *timestamppb.Timestamp       `json:"CreatedAt,omitempty"         protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	LastUpdatedAt     *timestamppb.Timestamp       `json:"LastUpdatedAt,omitempty"     protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3"`
	ArchivedAt        *timestamppb.Timestamp       `json:"ArchivedAt,omitempty"        protobuf:"bytes,3,opt,name=ArchivedAt,proto3"`
	Notes             string                       `json:"Notes,omitempty"             protobuf:"bytes,4,opt,name=Notes,proto3"`
	ID                string                       `json:"ID,omitempty"                protobuf:"bytes,5,opt,name=ID,proto3"`
	AllowableQuantity *Float32RangeWithOptionalMax `json:"AllowableQuantity,omitempty" protobuf:"bytes,6,opt,name=AllowableQuantity,proto3"`
	MeasurementUnit   *ValidMeasurementUnit        `json:"MeasurementUnit,omitempty"   protobuf:"bytes,7,opt,name=MeasurementUnit,proto3"`
	Ingredient        *ValidIngredient             `json:"Ingredient,omitempty"        protobuf:"bytes,8,opt,name=Ingredient,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ValidIngredientMeasurementUnit) Reset() {
	*x = ValidIngredientMeasurementUnit{}
	mi := &file_messages_proto_msgTypes[156]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientMeasurementUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientMeasurementUnit) ProtoMessage() {}

func (x *ValidIngredientMeasurementUnit) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[156]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientMeasurementUnit.ProtoReflect.Descriptor instead.
func (*ValidIngredientMeasurementUnit) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{156}
}

func (x *ValidIngredientMeasurementUnit) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidIngredientMeasurementUnit) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidIngredientMeasurementUnit) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidIngredientMeasurementUnit) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidIngredientMeasurementUnit) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidIngredientMeasurementUnit) GetAllowableQuantity() *Float32RangeWithOptionalMax {
	if x != nil {
		return x.AllowableQuantity
	}
	return nil
}

func (x *ValidIngredientMeasurementUnit) GetMeasurementUnit() *ValidMeasurementUnit {
	if x != nil {
		return x.MeasurementUnit
	}
	return nil
}

func (x *ValidIngredientMeasurementUnit) GetIngredient() *ValidIngredient {
	if x != nil {
		return x.Ingredient
	}
	return nil
}

type ValidIngredientMeasurementUnitCreationRequestInput struct {
	state                  protoimpl.MessageState       `protogen:"open.v1"`
	Notes                  string                       `json:"Notes,omitempty"                  protobuf:"bytes,1,opt,name=Notes,proto3"`
	ValidMeasurementUnitID string                       `json:"ValidMeasurementUnitID,omitempty" protobuf:"bytes,2,opt,name=ValidMeasurementUnitID,proto3"`
	ValidIngredientID      string                       `json:"ValidIngredientID,omitempty"      protobuf:"bytes,3,opt,name=ValidIngredientID,proto3"`
	AllowableQuantity      *Float32RangeWithOptionalMax `json:"AllowableQuantity,omitempty"      protobuf:"bytes,4,opt,name=AllowableQuantity,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ValidIngredientMeasurementUnitCreationRequestInput) Reset() {
	*x = ValidIngredientMeasurementUnitCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[157]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientMeasurementUnitCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientMeasurementUnitCreationRequestInput) ProtoMessage() {}

func (x *ValidIngredientMeasurementUnitCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[157]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientMeasurementUnitCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidIngredientMeasurementUnitCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{157}
}

func (x *ValidIngredientMeasurementUnitCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidIngredientMeasurementUnitCreationRequestInput) GetValidMeasurementUnitID() string {
	if x != nil {
		return x.ValidMeasurementUnitID
	}
	return ""
}

func (x *ValidIngredientMeasurementUnitCreationRequestInput) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

func (x *ValidIngredientMeasurementUnitCreationRequestInput) GetAllowableQuantity() *Float32RangeWithOptionalMax {
	if x != nil {
		return x.AllowableQuantity
	}
	return nil
}

type ValidIngredientMeasurementUnitUpdateRequestInput struct {
	state                  protoimpl.MessageState                         `protogen:"open.v1"`
	Notes                  string                                         `json:"Notes,omitempty"                  protobuf:"bytes,1,opt,name=Notes,proto3"`
	ValidMeasurementUnitID string                                         `json:"ValidMeasurementUnitID,omitempty" protobuf:"bytes,2,opt,name=ValidMeasurementUnitID,proto3"`
	ValidIngredientID      string                                         `json:"ValidIngredientID,omitempty"      protobuf:"bytes,3,opt,name=ValidIngredientID,proto3"`
	AllowableQuantity      *Float32RangeWithOptionalMaxUpdateRequestInput `json:"AllowableQuantity,omitempty"      protobuf:"bytes,4,opt,name=AllowableQuantity,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ValidIngredientMeasurementUnitUpdateRequestInput) Reset() {
	*x = ValidIngredientMeasurementUnitUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[158]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientMeasurementUnitUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientMeasurementUnitUpdateRequestInput) ProtoMessage() {}

func (x *ValidIngredientMeasurementUnitUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[158]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientMeasurementUnitUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ValidIngredientMeasurementUnitUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{158}
}

func (x *ValidIngredientMeasurementUnitUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidIngredientMeasurementUnitUpdateRequestInput) GetValidMeasurementUnitID() string {
	if x != nil {
		return x.ValidMeasurementUnitID
	}
	return ""
}

func (x *ValidIngredientMeasurementUnitUpdateRequestInput) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

func (x *ValidIngredientMeasurementUnitUpdateRequestInput) GetAllowableQuantity() *Float32RangeWithOptionalMaxUpdateRequestInput {
	if x != nil {
		return x.AllowableQuantity
	}
	return nil
}

type ValidIngredientPreparation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp `json:"CreatedAt,omitempty"     protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	LastUpdatedAt *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty" protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3"`
	ArchivedAt    *timestamppb.Timestamp `json:"ArchivedAt,omitempty"    protobuf:"bytes,3,opt,name=ArchivedAt,proto3"`
	Notes         string                 `json:"Notes,omitempty"         protobuf:"bytes,4,opt,name=Notes,proto3"`
	ID            string                 `json:"ID,omitempty"            protobuf:"bytes,5,opt,name=ID,proto3"`
	Preparation   *ValidPreparation      `json:"Preparation,omitempty"   protobuf:"bytes,6,opt,name=Preparation,proto3"`
	Ingredient    *ValidIngredient       `json:"Ingredient,omitempty"    protobuf:"bytes,7,opt,name=Ingredient,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidIngredientPreparation) Reset() {
	*x = ValidIngredientPreparation{}
	mi := &file_messages_proto_msgTypes[159]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientPreparation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientPreparation) ProtoMessage() {}

func (x *ValidIngredientPreparation) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[159]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientPreparation.ProtoReflect.Descriptor instead.
func (*ValidIngredientPreparation) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{159}
}

func (x *ValidIngredientPreparation) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidIngredientPreparation) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidIngredientPreparation) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidIngredientPreparation) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidIngredientPreparation) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidIngredientPreparation) GetPreparation() *ValidPreparation {
	if x != nil {
		return x.Preparation
	}
	return nil
}

func (x *ValidIngredientPreparation) GetIngredient() *ValidIngredient {
	if x != nil {
		return x.Ingredient
	}
	return nil
}

type ValidIngredientPreparationCreationRequestInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Notes              string                 `json:"Notes,omitempty"              protobuf:"bytes,1,opt,name=Notes,proto3"`
	ValidPreparationID string                 `json:"ValidPreparationID,omitempty" protobuf:"bytes,2,opt,name=ValidPreparationID,proto3"`
	ValidIngredientID  string                 `json:"ValidIngredientID,omitempty"  protobuf:"bytes,3,opt,name=ValidIngredientID,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ValidIngredientPreparationCreationRequestInput) Reset() {
	*x = ValidIngredientPreparationCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[160]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientPreparationCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientPreparationCreationRequestInput) ProtoMessage() {}

func (x *ValidIngredientPreparationCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[160]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientPreparationCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidIngredientPreparationCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{160}
}

func (x *ValidIngredientPreparationCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidIngredientPreparationCreationRequestInput) GetValidPreparationID() string {
	if x != nil {
		return x.ValidPreparationID
	}
	return ""
}

func (x *ValidIngredientPreparationCreationRequestInput) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

type ValidIngredientPreparationUpdateRequestInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Notes              string                 `json:"Notes,omitempty"              protobuf:"bytes,1,opt,name=Notes,proto3"`
	ValidPreparationID string                 `json:"ValidPreparationID,omitempty" protobuf:"bytes,2,opt,name=ValidPreparationID,proto3"`
	ValidIngredientID  string                 `json:"ValidIngredientID,omitempty"  protobuf:"bytes,3,opt,name=ValidIngredientID,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ValidIngredientPreparationUpdateRequestInput) Reset() {
	*x = ValidIngredientPreparationUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[161]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientPreparationUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientPreparationUpdateRequestInput) ProtoMessage() {}

func (x *ValidIngredientPreparationUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[161]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientPreparationUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ValidIngredientPreparationUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{161}
}

func (x *ValidIngredientPreparationUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidIngredientPreparationUpdateRequestInput) GetValidPreparationID() string {
	if x != nil {
		return x.ValidPreparationID
	}
	return ""
}

func (x *ValidIngredientPreparationUpdateRequestInput) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

type ValidIngredientState struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp `json:"CreatedAt,omitempty"     protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	ArchivedAt    *timestamppb.Timestamp `json:"ArchivedAt,omitempty"    protobuf:"bytes,2,opt,name=ArchivedAt,proto3"`
	LastUpdatedAt *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty" protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3"`
	PastTense     string                 `json:"PastTense,omitempty"     protobuf:"bytes,4,opt,name=PastTense,proto3"`
	Description   string                 `json:"Description,omitempty"   protobuf:"bytes,5,opt,name=Description,proto3"`
	IconPath      string                 `json:"IconPath,omitempty"      protobuf:"bytes,6,opt,name=IconPath,proto3"`
	ID            string                 `json:"ID,omitempty"            protobuf:"bytes,7,opt,name=ID,proto3"`
	Name          string                 `json:"Name,omitempty"          protobuf:"bytes,8,opt,name=Name,proto3"`
	AttributeType string                 `json:"AttributeType,omitempty" protobuf:"bytes,9,opt,name=AttributeType,proto3"`
	Slug          string                 `json:"Slug,omitempty"          protobuf:"bytes,10,opt,name=Slug,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidIngredientState) Reset() {
	*x = ValidIngredientState{}
	mi := &file_messages_proto_msgTypes[162]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientState) ProtoMessage() {}

func (x *ValidIngredientState) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[162]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientState.ProtoReflect.Descriptor instead.
func (*ValidIngredientState) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{162}
}

func (x *ValidIngredientState) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidIngredientState) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidIngredientState) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidIngredientState) GetPastTense() string {
	if x != nil {
		return x.PastTense
	}
	return ""
}

func (x *ValidIngredientState) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidIngredientState) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidIngredientState) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidIngredientState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidIngredientState) GetAttributeType() string {
	if x != nil {
		return x.AttributeType
	}
	return ""
}

func (x *ValidIngredientState) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type ValidIngredientStateCreationRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `json:"Name,omitempty"          protobuf:"bytes,1,opt,name=Name,proto3"`
	Slug          string                 `json:"Slug,omitempty"          protobuf:"bytes,2,opt,name=Slug,proto3"`
	PastTense     string                 `json:"PastTense,omitempty"     protobuf:"bytes,3,opt,name=PastTense,proto3"`
	Description   string                 `json:"Description,omitempty"   protobuf:"bytes,4,opt,name=Description,proto3"`
	AttributeType string                 `json:"AttributeType,omitempty" protobuf:"bytes,5,opt,name=AttributeType,proto3"`
	IconPath      string                 `json:"IconPath,omitempty"      protobuf:"bytes,6,opt,name=IconPath,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidIngredientStateCreationRequestInput) Reset() {
	*x = ValidIngredientStateCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[163]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientStateCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientStateCreationRequestInput) ProtoMessage() {}

func (x *ValidIngredientStateCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[163]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientStateCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidIngredientStateCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{163}
}

func (x *ValidIngredientStateCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidIngredientStateCreationRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidIngredientStateCreationRequestInput) GetPastTense() string {
	if x != nil {
		return x.PastTense
	}
	return ""
}

func (x *ValidIngredientStateCreationRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidIngredientStateCreationRequestInput) GetAttributeType() string {
	if x != nil {
		return x.AttributeType
	}
	return ""
}

func (x *ValidIngredientStateCreationRequestInput) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

type ValidIngredientStateIngredient struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt       *timestamppb.Timestamp `json:"CreatedAt,omitempty"       protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	LastUpdatedAt   *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty"   protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3"`
	ArchivedAt      *timestamppb.Timestamp `json:"ArchivedAt,omitempty"      protobuf:"bytes,3,opt,name=ArchivedAt,proto3"`
	Notes           string                 `json:"Notes,omitempty"           protobuf:"bytes,4,opt,name=Notes,proto3"`
	ID              string                 `json:"ID,omitempty"              protobuf:"bytes,5,opt,name=ID,proto3"`
	IngredientState *ValidIngredientState  `json:"IngredientState,omitempty" protobuf:"bytes,6,opt,name=IngredientState,proto3"`
	Ingredient      *ValidIngredient       `json:"Ingredient,omitempty"      protobuf:"bytes,7,opt,name=Ingredient,proto3"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ValidIngredientStateIngredient) Reset() {
	*x = ValidIngredientStateIngredient{}
	mi := &file_messages_proto_msgTypes[164]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientStateIngredient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientStateIngredient) ProtoMessage() {}

func (x *ValidIngredientStateIngredient) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[164]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientStateIngredient.ProtoReflect.Descriptor instead.
func (*ValidIngredientStateIngredient) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{164}
}

func (x *ValidIngredientStateIngredient) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidIngredientStateIngredient) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidIngredientStateIngredient) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidIngredientStateIngredient) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidIngredientStateIngredient) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidIngredientStateIngredient) GetIngredientState() *ValidIngredientState {
	if x != nil {
		return x.IngredientState
	}
	return nil
}

func (x *ValidIngredientStateIngredient) GetIngredient() *ValidIngredient {
	if x != nil {
		return x.Ingredient
	}
	return nil
}

type ValidIngredientStateIngredientCreationRequestInput struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Notes                  string                 `json:"Notes,omitempty"                  protobuf:"bytes,1,opt,name=Notes,proto3"`
	ValidIngredientStateID string                 `json:"ValidIngredientStateID,omitempty" protobuf:"bytes,2,opt,name=ValidIngredientStateID,proto3"`
	ValidIngredientID      string                 `json:"ValidIngredientID,omitempty"      protobuf:"bytes,3,opt,name=ValidIngredientID,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ValidIngredientStateIngredientCreationRequestInput) Reset() {
	*x = ValidIngredientStateIngredientCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[165]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientStateIngredientCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientStateIngredientCreationRequestInput) ProtoMessage() {}

func (x *ValidIngredientStateIngredientCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[165]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientStateIngredientCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidIngredientStateIngredientCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{165}
}

func (x *ValidIngredientStateIngredientCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidIngredientStateIngredientCreationRequestInput) GetValidIngredientStateID() string {
	if x != nil {
		return x.ValidIngredientStateID
	}
	return ""
}

func (x *ValidIngredientStateIngredientCreationRequestInput) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

type ValidIngredientStateIngredientUpdateRequestInput struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Notes                  string                 `json:"Notes,omitempty"                  protobuf:"bytes,1,opt,name=Notes,proto3"`
	ValidIngredientStateID string                 `json:"ValidIngredientStateID,omitempty" protobuf:"bytes,2,opt,name=ValidIngredientStateID,proto3"`
	ValidIngredientID      string                 `json:"ValidIngredientID,omitempty"      protobuf:"bytes,3,opt,name=ValidIngredientID,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ValidIngredientStateIngredientUpdateRequestInput) Reset() {
	*x = ValidIngredientStateIngredientUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[166]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientStateIngredientUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientStateIngredientUpdateRequestInput) ProtoMessage() {}

func (x *ValidIngredientStateIngredientUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[166]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientStateIngredientUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ValidIngredientStateIngredientUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{166}
}

func (x *ValidIngredientStateIngredientUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidIngredientStateIngredientUpdateRequestInput) GetValidIngredientStateID() string {
	if x != nil {
		return x.ValidIngredientStateID
	}
	return ""
}

func (x *ValidIngredientStateIngredientUpdateRequestInput) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

type ValidIngredientStateUpdateRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `json:"Name,omitempty"          protobuf:"bytes,1,opt,name=Name,proto3"`
	Slug          string                 `json:"Slug,omitempty"          protobuf:"bytes,2,opt,name=Slug,proto3"`
	PastTense     string                 `json:"PastTense,omitempty"     protobuf:"bytes,3,opt,name=PastTense,proto3"`
	Description   string                 `json:"Description,omitempty"   protobuf:"bytes,4,opt,name=Description,proto3"`
	AttributeType string                 `json:"AttributeType,omitempty" protobuf:"bytes,5,opt,name=AttributeType,proto3"`
	IconPath      string                 `json:"IconPath,omitempty"      protobuf:"bytes,6,opt,name=IconPath,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidIngredientStateUpdateRequestInput) Reset() {
	*x = ValidIngredientStateUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[167]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientStateUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientStateUpdateRequestInput) ProtoMessage() {}

func (x *ValidIngredientStateUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[167]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientStateUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ValidIngredientStateUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{167}
}

func (x *ValidIngredientStateUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidIngredientStateUpdateRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidIngredientStateUpdateRequestInput) GetPastTense() string {
	if x != nil {
		return x.PastTense
	}
	return ""
}

func (x *ValidIngredientStateUpdateRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidIngredientStateUpdateRequestInput) GetAttributeType() string {
	if x != nil {
		return x.AttributeType
	}
	return ""
}

func (x *ValidIngredientStateUpdateRequestInput) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

type ValidIngredientUpdateRequestInput struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	StorageTemperatureInCelsius *OptionalFloat32Range  `json:"StorageTemperatureInCelsius,omitempty" protobuf:"bytes,20,opt,name=StorageTemperatureInCelsius,proto3"`
	PluralName                  string                 `json:"PluralName,omitempty"                  protobuf:"bytes,17,opt,name=PluralName,proto3"`
	Name                        string                 `json:"Name,omitempty"                        protobuf:"bytes,1,opt,name=Name,proto3"`
	Description                 string                 `json:"Description,omitempty"                 protobuf:"bytes,2,opt,name=Description,proto3"`
	Warning                     string                 `json:"Warning,omitempty"                     protobuf:"bytes,3,opt,name=Warning,proto3"`
	IconPath                    string                 `json:"IconPath,omitempty"                    protobuf:"bytes,4,opt,name=IconPath,proto3"`
	ShoppingSuggestions         string                 `json:"ShoppingSuggestions,omitempty"         protobuf:"bytes,24,opt,name=ShoppingSuggestions,proto3"`
	Slug                        string                 `json:"Slug,omitempty"                        protobuf:"bytes,22,opt,name=Slug,proto3"`
	StorageInstructions         string                 `json:"StorageInstructions,omitempty"         protobuf:"bytes,21,opt,name=StorageInstructions,proto3"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
	ContainsEgg                 bool `json:"ContainsEgg,omitempty"            protobuf:"varint,8,opt,name=ContainsEgg,proto3"`
	ContainsAlcohol             bool `json:"ContainsAlcohol,omitempty"        protobuf:"varint,23,opt,name=ContainsAlcohol,proto3"`
	AnimalFlesh                 bool `json:"AnimalFlesh,omitempty"            protobuf:"varint,14,opt,name=AnimalFlesh,proto3"`
	IsLiquid                    bool `json:"IsLiquid,omitempty"               protobuf:"varint,15,opt,name=IsLiquid,proto3"`
	ContainsSoy                 bool `json:"ContainsSoy,omitempty"            protobuf:"varint,16,opt,name=ContainsSoy,proto3"`
	ContainsFish                bool `json:"ContainsFish,omitempty"           protobuf:"varint,12,opt,name=ContainsFish,proto3"`
	AnimalDerived               bool `json:"AnimalDerived,omitempty"          protobuf:"varint,18,opt,name=AnimalDerived,proto3"`
	RestrictToPreparations      bool `json:"RestrictToPreparations,omitempty" protobuf:"varint,19,opt,name=RestrictToPreparations,proto3"`
	ContainsSesame              bool `json:"ContainsSesame,omitempty"         protobuf:"varint,11,opt,name=ContainsSesame,proto3"`
	ContainsShellfish           bool `json:"ContainsShellfish,omitempty"      protobuf:"varint,10,opt,name=ContainsShellfish,proto3"`
	ContainsWheat               bool `json:"ContainsWheat,omitempty"          protobuf:"varint,9,opt,name=ContainsWheat,proto3"`
	ContainsGluten              bool `json:"ContainsGluten,omitempty"         protobuf:"varint,13,opt,name=ContainsGluten,proto3"`
	ContainsTreeNut             bool `json:"ContainsTreeNut,omitempty"        protobuf:"varint,7,opt,name=ContainsTreeNut,proto3"`
	IsStarch                    bool `json:"IsStarch,omitempty"               protobuf:"varint,25,opt,name=IsStarch,proto3"`
	IsProtein                   bool `json:"IsProtein,omitempty"              protobuf:"varint,26,opt,name=IsProtein,proto3"`
	IsGrain                     bool `json:"IsGrain,omitempty"                protobuf:"varint,27,opt,name=IsGrain,proto3"`
	IsFruit                     bool `json:"IsFruit,omitempty"                protobuf:"varint,28,opt,name=IsFruit,proto3"`
	IsSalt                      bool `json:"IsSalt,omitempty"                 protobuf:"varint,29,opt,name=IsSalt,proto3"`
	IsFat                       bool `json:"IsFat,omitempty"                  protobuf:"varint,30,opt,name=IsFat,proto3"`
	IsAcid                      bool `json:"IsAcid,omitempty"                 protobuf:"varint,31,opt,name=IsAcid,proto3"`
	IsHeat                      bool `json:"IsHeat,omitempty"                 protobuf:"varint,32,opt,name=IsHeat,proto3"`
	ContainsPeanut              bool `json:"ContainsPeanut,omitempty"         protobuf:"varint,6,opt,name=ContainsPeanut,proto3"`
	ContainsDairy               bool `json:"ContainsDairy,omitempty"          protobuf:"varint,5,opt,name=ContainsDairy,proto3"`
}

func (x *ValidIngredientUpdateRequestInput) Reset() {
	*x = ValidIngredientUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[168]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidIngredientUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidIngredientUpdateRequestInput) ProtoMessage() {}

func (x *ValidIngredientUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[168]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidIngredientUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ValidIngredientUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{168}
}

func (x *ValidIngredientUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidIngredientUpdateRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidIngredientUpdateRequestInput) GetWarning() string {
	if x != nil {
		return x.Warning
	}
	return ""
}

func (x *ValidIngredientUpdateRequestInput) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidIngredientUpdateRequestInput) GetContainsDairy() bool {
	if x != nil {
		return x.ContainsDairy
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetContainsPeanut() bool {
	if x != nil {
		return x.ContainsPeanut
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetContainsTreeNut() bool {
	if x != nil {
		return x.ContainsTreeNut
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetContainsEgg() bool {
	if x != nil {
		return x.ContainsEgg
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetContainsWheat() bool {
	if x != nil {
		return x.ContainsWheat
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetContainsShellfish() bool {
	if x != nil {
		return x.ContainsShellfish
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetContainsSesame() bool {
	if x != nil {
		return x.ContainsSesame
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetContainsFish() bool {
	if x != nil {
		return x.ContainsFish
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetContainsGluten() bool {
	if x != nil {
		return x.ContainsGluten
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetAnimalFlesh() bool {
	if x != nil {
		return x.AnimalFlesh
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetIsLiquid() bool {
	if x != nil {
		return x.IsLiquid
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetContainsSoy() bool {
	if x != nil {
		return x.ContainsSoy
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetPluralName() string {
	if x != nil {
		return x.PluralName
	}
	return ""
}

func (x *ValidIngredientUpdateRequestInput) GetAnimalDerived() bool {
	if x != nil {
		return x.AnimalDerived
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetRestrictToPreparations() bool {
	if x != nil {
		return x.RestrictToPreparations
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetStorageTemperatureInCelsius() *OptionalFloat32Range {
	if x != nil {
		return x.StorageTemperatureInCelsius
	}
	return nil
}

func (x *ValidIngredientUpdateRequestInput) GetStorageInstructions() string {
	if x != nil {
		return x.StorageInstructions
	}
	return ""
}

func (x *ValidIngredientUpdateRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidIngredientUpdateRequestInput) GetContainsAlcohol() bool {
	if x != nil {
		return x.ContainsAlcohol
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetShoppingSuggestions() string {
	if x != nil {
		return x.ShoppingSuggestions
	}
	return ""
}

func (x *ValidIngredientUpdateRequestInput) GetIsStarch() bool {
	if x != nil {
		return x.IsStarch
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetIsProtein() bool {
	if x != nil {
		return x.IsProtein
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetIsGrain() bool {
	if x != nil {
		return x.IsGrain
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetIsFruit() bool {
	if x != nil {
		return x.IsFruit
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetIsSalt() bool {
	if x != nil {
		return x.IsSalt
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetIsFat() bool {
	if x != nil {
		return x.IsFat
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetIsAcid() bool {
	if x != nil {
		return x.IsAcid
	}
	return false
}

func (x *ValidIngredientUpdateRequestInput) GetIsHeat() bool {
	if x != nil {
		return x.IsHeat
	}
	return false
}

type ValidInstrument struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt                      *timestamppb.Timestamp `json:"CreatedAt,omitempty"     protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	LastUpdatedAt                  *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty" protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3"`
	ArchivedAt                     *timestamppb.Timestamp `json:"ArchivedAt,omitempty"    protobuf:"bytes,3,opt,name=ArchivedAt,proto3"`
	Name                           string                 `json:"Name,omitempty"          protobuf:"bytes,6,opt,name=Name,proto3"`
	ID                             string                 `json:"ID,omitempty"            protobuf:"bytes,5,opt,name=ID,proto3"`
	IconPath                       string                 `json:"IconPath,omitempty"      protobuf:"bytes,4,opt,name=IconPath,proto3"`
	PluralName                     string                 `json:"PluralName,omitempty"    protobuf:"bytes,7,opt,name=PluralName,proto3"`
	Description                    string                 `json:"Description,omitempty"   protobuf:"bytes,8,opt,name=Description,proto3"`
	Slug                           string                 `json:"Slug,omitempty"          protobuf:"bytes,9,opt,name=Slug,proto3"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
	DisplayInSummaryLists          bool `json:"DisplayInSummaryLists,omitempty"          protobuf:"varint,10,opt,name=DisplayInSummaryLists,proto3"`
	IncludeInGeneratedInstructions bool `json:"IncludeInGeneratedInstructions,omitempty" protobuf:"varint,11,opt,name=IncludeInGeneratedInstructions,proto3"`
	UsableForStorage               bool `json:"UsableForStorage,omitempty"               protobuf:"varint,12,opt,name=UsableForStorage,proto3"`
}

func (x *ValidInstrument) Reset() {
	*x = ValidInstrument{}
	mi := &file_messages_proto_msgTypes[169]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidInstrument) ProtoMessage() {}

func (x *ValidInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[169]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidInstrument.ProtoReflect.Descriptor instead.
func (*ValidInstrument) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{169}
}

func (x *ValidInstrument) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidInstrument) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidInstrument) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidInstrument) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidInstrument) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidInstrument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidInstrument) GetPluralName() string {
	if x != nil {
		return x.PluralName
	}
	return ""
}

func (x *ValidInstrument) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidInstrument) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidInstrument) GetDisplayInSummaryLists() bool {
	if x != nil {
		return x.DisplayInSummaryLists
	}
	return false
}

func (x *ValidInstrument) GetIncludeInGeneratedInstructions() bool {
	if x != nil {
		return x.IncludeInGeneratedInstructions
	}
	return false
}

func (x *ValidInstrument) GetUsableForStorage() bool {
	if x != nil {
		return x.UsableForStorage
	}
	return false
}

type ValidInstrumentCreationRequestInput struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	Name                           string                 `json:"Name,omitempty"        protobuf:"bytes,1,opt,name=Name,proto3"`
	PluralName                     string                 `json:"PluralName,omitempty"  protobuf:"bytes,2,opt,name=PluralName,proto3"`
	Description                    string                 `json:"Description,omitempty" protobuf:"bytes,3,opt,name=Description,proto3"`
	IconPath                       string                 `json:"IconPath,omitempty"    protobuf:"bytes,4,opt,name=IconPath,proto3"`
	Slug                           string                 `json:"Slug,omitempty"        protobuf:"bytes,5,opt,name=Slug,proto3"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
	DisplayInSummaryLists          bool `json:"DisplayInSummaryLists,omitempty"          protobuf:"varint,6,opt,name=DisplayInSummaryLists,proto3"`
	IncludeInGeneratedInstructions bool `json:"IncludeInGeneratedInstructions,omitempty" protobuf:"varint,7,opt,name=IncludeInGeneratedInstructions,proto3"`
	UsableForStorage               bool `json:"UsableForStorage,omitempty"               protobuf:"varint,8,opt,name=UsableForStorage,proto3"`
}

func (x *ValidInstrumentCreationRequestInput) Reset() {
	*x = ValidInstrumentCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[170]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidInstrumentCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidInstrumentCreationRequestInput) ProtoMessage() {}

func (x *ValidInstrumentCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[170]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidInstrumentCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidInstrumentCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{170}
}

func (x *ValidInstrumentCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidInstrumentCreationRequestInput) GetPluralName() string {
	if x != nil {
		return x.PluralName
	}
	return ""
}

func (x *ValidInstrumentCreationRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidInstrumentCreationRequestInput) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidInstrumentCreationRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidInstrumentCreationRequestInput) GetDisplayInSummaryLists() bool {
	if x != nil {
		return x.DisplayInSummaryLists
	}
	return false
}

func (x *ValidInstrumentCreationRequestInput) GetIncludeInGeneratedInstructions() bool {
	if x != nil {
		return x.IncludeInGeneratedInstructions
	}
	return false
}

func (x *ValidInstrumentCreationRequestInput) GetUsableForStorage() bool {
	if x != nil {
		return x.UsableForStorage
	}
	return false
}

type ValidInstrumentUpdateRequestInput struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	Name                           string                 `json:"Name,omitempty"        protobuf:"bytes,1,opt,name=Name,proto3"`
	PluralName                     string                 `json:"PluralName,omitempty"  protobuf:"bytes,2,opt,name=PluralName,proto3"`
	Description                    string                 `json:"Description,omitempty" protobuf:"bytes,3,opt,name=Description,proto3"`
	IconPath                       string                 `json:"IconPath,omitempty"    protobuf:"bytes,4,opt,name=IconPath,proto3"`
	Slug                           string                 `json:"Slug,omitempty"        protobuf:"bytes,5,opt,name=Slug,proto3"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
	UsableForStorage               bool `json:"UsableForStorage,omitempty"               protobuf:"varint,6,opt,name=UsableForStorage,proto3"`
	DisplayInSummaryLists          bool `json:"DisplayInSummaryLists,omitempty"          protobuf:"varint,7,opt,name=DisplayInSummaryLists,proto3"`
	IncludeInGeneratedInstructions bool `json:"IncludeInGeneratedInstructions,omitempty" protobuf:"varint,8,opt,name=IncludeInGeneratedInstructions,proto3"`
}

func (x *ValidInstrumentUpdateRequestInput) Reset() {
	*x = ValidInstrumentUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[171]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidInstrumentUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidInstrumentUpdateRequestInput) ProtoMessage() {}

func (x *ValidInstrumentUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[171]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidInstrumentUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ValidInstrumentUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{171}
}

func (x *ValidInstrumentUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidInstrumentUpdateRequestInput) GetPluralName() string {
	if x != nil {
		return x.PluralName
	}
	return ""
}

func (x *ValidInstrumentUpdateRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidInstrumentUpdateRequestInput) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidInstrumentUpdateRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidInstrumentUpdateRequestInput) GetUsableForStorage() bool {
	if x != nil {
		return x.UsableForStorage
	}
	return false
}

func (x *ValidInstrumentUpdateRequestInput) GetDisplayInSummaryLists() bool {
	if x != nil {
		return x.DisplayInSummaryLists
	}
	return false
}

func (x *ValidInstrumentUpdateRequestInput) GetIncludeInGeneratedInstructions() bool {
	if x != nil {
		return x.IncludeInGeneratedInstructions
	}
	return false
}

type ValidMeasurementUnit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp `json:"CreatedAt,omitempty"     protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	LastUpdatedAt *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty" protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3"`
	ArchivedAt    *timestamppb.Timestamp `json:"ArchivedAt,omitempty"    protobuf:"bytes,3,opt,name=ArchivedAt,proto3"`
	PluralName    string                 `json:"PluralName,omitempty"    protobuf:"bytes,8,opt,name=PluralName,proto3"`
	IconPath      string                 `json:"IconPath,omitempty"      protobuf:"bytes,5,opt,name=IconPath,proto3"`
	ID            string                 `json:"ID,omitempty"            protobuf:"bytes,6,opt,name=ID,proto3"`
	Description   string                 `json:"Description,omitempty"   protobuf:"bytes,7,opt,name=Description,proto3"`
	Name          string                 `json:"Name,omitempty"          protobuf:"bytes,4,opt,name=Name,proto3"`
	Slug          string                 `json:"Slug,omitempty"          protobuf:"bytes,9,opt,name=Slug,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
	Volumetric    bool `json:"Volumetric,omitempty" protobuf:"varint,10,opt,name=Volumetric,proto3"`
	Universal     bool `json:"Universal,omitempty"  protobuf:"varint,11,opt,name=Universal,proto3"`
	Metric        bool `json:"Metric,omitempty"     protobuf:"varint,12,opt,name=Metric,proto3"`
	Imperial      bool `json:"Imperial,omitempty"   protobuf:"varint,13,opt,name=Imperial,proto3"`
}

func (x *ValidMeasurementUnit) Reset() {
	*x = ValidMeasurementUnit{}
	mi := &file_messages_proto_msgTypes[172]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidMeasurementUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidMeasurementUnit) ProtoMessage() {}

func (x *ValidMeasurementUnit) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[172]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidMeasurementUnit.ProtoReflect.Descriptor instead.
func (*ValidMeasurementUnit) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{172}
}

func (x *ValidMeasurementUnit) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidMeasurementUnit) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidMeasurementUnit) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidMeasurementUnit) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidMeasurementUnit) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidMeasurementUnit) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidMeasurementUnit) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidMeasurementUnit) GetPluralName() string {
	if x != nil {
		return x.PluralName
	}
	return ""
}

func (x *ValidMeasurementUnit) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidMeasurementUnit) GetVolumetric() bool {
	if x != nil {
		return x.Volumetric
	}
	return false
}

func (x *ValidMeasurementUnit) GetUniversal() bool {
	if x != nil {
		return x.Universal
	}
	return false
}

func (x *ValidMeasurementUnit) GetMetric() bool {
	if x != nil {
		return x.Metric
	}
	return false
}

func (x *ValidMeasurementUnit) GetImperial() bool {
	if x != nil {
		return x.Imperial
	}
	return false
}

type ValidMeasurementUnitConversion struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt         *timestamppb.Timestamp `json:"CreatedAt,omitempty"         protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	LastUpdatedAt     *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty"     protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3"`
	ArchivedAt        *timestamppb.Timestamp `json:"ArchivedAt,omitempty"        protobuf:"bytes,3,opt,name=ArchivedAt,proto3"`
	OnlyForIngredient *ValidIngredient       `json:"OnlyForIngredient,omitempty" protobuf:"bytes,4,opt,name=OnlyForIngredient,proto3"`
	From              *ValidMeasurementUnit  `json:"From,omitempty"              protobuf:"bytes,7,opt,name=From,proto3"`
	To                *ValidMeasurementUnit  `json:"To,omitempty"                protobuf:"bytes,8,opt,name=To,proto3"`
	Notes             string                 `json:"Notes,omitempty"             protobuf:"bytes,5,opt,name=Notes,proto3"`
	ID                string                 `json:"ID,omitempty"                protobuf:"bytes,6,opt,name=ID,proto3"`
	unknownFields     protoimpl.UnknownFields
	Modifier          float32 `json:"Modifier,omitempty" protobuf:"fixed32,9,opt,name=Modifier,proto3"`
	sizeCache         protoimpl.SizeCache
}

func (x *ValidMeasurementUnitConversion) Reset() {
	*x = ValidMeasurementUnitConversion{}
	mi := &file_messages_proto_msgTypes[173]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidMeasurementUnitConversion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidMeasurementUnitConversion) ProtoMessage() {}

func (x *ValidMeasurementUnitConversion) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[173]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidMeasurementUnitConversion.ProtoReflect.Descriptor instead.
func (*ValidMeasurementUnitConversion) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{173}
}

func (x *ValidMeasurementUnitConversion) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidMeasurementUnitConversion) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidMeasurementUnitConversion) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidMeasurementUnitConversion) GetOnlyForIngredient() *ValidIngredient {
	if x != nil {
		return x.OnlyForIngredient
	}
	return nil
}

func (x *ValidMeasurementUnitConversion) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidMeasurementUnitConversion) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidMeasurementUnitConversion) GetFrom() *ValidMeasurementUnit {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *ValidMeasurementUnitConversion) GetTo() *ValidMeasurementUnit {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *ValidMeasurementUnitConversion) GetModifier() float32 {
	if x != nil {
		return x.Modifier
	}
	return 0
}

type ValidMeasurementUnitConversionCreationRequestInput struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	OnlyForIngredient string                 `json:"OnlyForIngredient,omitempty" protobuf:"bytes,1,opt,name=OnlyForIngredient,proto3"`
	From              string                 `json:"From,omitempty"              protobuf:"bytes,2,opt,name=From,proto3"`
	To                string                 `json:"To,omitempty"                protobuf:"bytes,3,opt,name=To,proto3"`
	Notes             string                 `json:"Notes,omitempty"             protobuf:"bytes,4,opt,name=Notes,proto3"`
	unknownFields     protoimpl.UnknownFields
	Modifier          float32 `json:"Modifier,omitempty" protobuf:"fixed32,5,opt,name=Modifier,proto3"`
	sizeCache         protoimpl.SizeCache
}

func (x *ValidMeasurementUnitConversionCreationRequestInput) Reset() {
	*x = ValidMeasurementUnitConversionCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[174]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidMeasurementUnitConversionCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidMeasurementUnitConversionCreationRequestInput) ProtoMessage() {}

func (x *ValidMeasurementUnitConversionCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[174]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidMeasurementUnitConversionCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidMeasurementUnitConversionCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{174}
}

func (x *ValidMeasurementUnitConversionCreationRequestInput) GetOnlyForIngredient() string {
	if x != nil {
		return x.OnlyForIngredient
	}
	return ""
}

func (x *ValidMeasurementUnitConversionCreationRequestInput) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ValidMeasurementUnitConversionCreationRequestInput) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *ValidMeasurementUnitConversionCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidMeasurementUnitConversionCreationRequestInput) GetModifier() float32 {
	if x != nil {
		return x.Modifier
	}
	return 0
}

type ValidMeasurementUnitConversionUpdateRequestInput struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	From              string                 `json:"From,omitempty"              protobuf:"bytes,1,opt,name=From,proto3"`
	To                string                 `json:"To,omitempty"                protobuf:"bytes,2,opt,name=To,proto3"`
	OnlyForIngredient string                 `json:"OnlyForIngredient,omitempty" protobuf:"bytes,3,opt,name=OnlyForIngredient,proto3"`
	Notes             string                 `json:"Notes,omitempty"             protobuf:"bytes,5,opt,name=Notes,proto3"`
	unknownFields     protoimpl.UnknownFields
	Modifier          float32 `json:"Modifier,omitempty" protobuf:"fixed32,4,opt,name=Modifier,proto3"`
	sizeCache         protoimpl.SizeCache
}

func (x *ValidMeasurementUnitConversionUpdateRequestInput) Reset() {
	*x = ValidMeasurementUnitConversionUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[175]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidMeasurementUnitConversionUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidMeasurementUnitConversionUpdateRequestInput) ProtoMessage() {}

func (x *ValidMeasurementUnitConversionUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[175]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidMeasurementUnitConversionUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ValidMeasurementUnitConversionUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{175}
}

func (x *ValidMeasurementUnitConversionUpdateRequestInput) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ValidMeasurementUnitConversionUpdateRequestInput) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *ValidMeasurementUnitConversionUpdateRequestInput) GetOnlyForIngredient() string {
	if x != nil {
		return x.OnlyForIngredient
	}
	return ""
}

func (x *ValidMeasurementUnitConversionUpdateRequestInput) GetModifier() float32 {
	if x != nil {
		return x.Modifier
	}
	return 0
}

func (x *ValidMeasurementUnitConversionUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

type ValidMeasurementUnitCreationRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `json:"Name,omitempty"        protobuf:"bytes,1,opt,name=Name,proto3"`
	Description   string                 `json:"Description,omitempty" protobuf:"bytes,2,opt,name=Description,proto3"`
	IconPath      string                 `json:"IconPath,omitempty"    protobuf:"bytes,3,opt,name=IconPath,proto3"`
	PluralName    string                 `json:"PluralName,omitempty"  protobuf:"bytes,4,opt,name=PluralName,proto3"`
	Slug          string                 `json:"Slug,omitempty"        protobuf:"bytes,5,opt,name=Slug,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
	Volumetric    bool `json:"Volumetric,omitempty" protobuf:"varint,6,opt,name=Volumetric,proto3"`
	Universal     bool `json:"Universal,omitempty"  protobuf:"varint,7,opt,name=Universal,proto3"`
	Metric        bool `json:"Metric,omitempty"     protobuf:"varint,8,opt,name=Metric,proto3"`
	Imperial      bool `json:"Imperial,omitempty"   protobuf:"varint,9,opt,name=Imperial,proto3"`
}

func (x *ValidMeasurementUnitCreationRequestInput) Reset() {
	*x = ValidMeasurementUnitCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[176]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidMeasurementUnitCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidMeasurementUnitCreationRequestInput) ProtoMessage() {}

func (x *ValidMeasurementUnitCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[176]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidMeasurementUnitCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidMeasurementUnitCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{176}
}

func (x *ValidMeasurementUnitCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidMeasurementUnitCreationRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidMeasurementUnitCreationRequestInput) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidMeasurementUnitCreationRequestInput) GetPluralName() string {
	if x != nil {
		return x.PluralName
	}
	return ""
}

func (x *ValidMeasurementUnitCreationRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidMeasurementUnitCreationRequestInput) GetVolumetric() bool {
	if x != nil {
		return x.Volumetric
	}
	return false
}

func (x *ValidMeasurementUnitCreationRequestInput) GetUniversal() bool {
	if x != nil {
		return x.Universal
	}
	return false
}

func (x *ValidMeasurementUnitCreationRequestInput) GetMetric() bool {
	if x != nil {
		return x.Metric
	}
	return false
}

func (x *ValidMeasurementUnitCreationRequestInput) GetImperial() bool {
	if x != nil {
		return x.Imperial
	}
	return false
}

type ValidMeasurementUnitUpdateRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `json:"Name,omitempty"        protobuf:"bytes,1,opt,name=Name,proto3"`
	Description   string                 `json:"Description,omitempty" protobuf:"bytes,2,opt,name=Description,proto3"`
	IconPath      string                 `json:"IconPath,omitempty"    protobuf:"bytes,3,opt,name=IconPath,proto3"`
	PluralName    string                 `json:"PluralName,omitempty"  protobuf:"bytes,8,opt,name=PluralName,proto3"`
	Slug          string                 `json:"Slug,omitempty"        protobuf:"bytes,9,opt,name=Slug,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
	Volumetric    bool `json:"Volumetric,omitempty" protobuf:"varint,4,opt,name=Volumetric,proto3"`
	Universal     bool `json:"Universal,omitempty"  protobuf:"varint,5,opt,name=Universal,proto3"`
	Metric        bool `json:"Metric,omitempty"     protobuf:"varint,6,opt,name=Metric,proto3"`
	Imperial      bool `json:"Imperial,omitempty"   protobuf:"varint,7,opt,name=Imperial,proto3"`
}

func (x *ValidMeasurementUnitUpdateRequestInput) Reset() {
	*x = ValidMeasurementUnitUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[177]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidMeasurementUnitUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidMeasurementUnitUpdateRequestInput) ProtoMessage() {}

func (x *ValidMeasurementUnitUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[177]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidMeasurementUnitUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ValidMeasurementUnitUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{177}
}

func (x *ValidMeasurementUnitUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidMeasurementUnitUpdateRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidMeasurementUnitUpdateRequestInput) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidMeasurementUnitUpdateRequestInput) GetVolumetric() bool {
	if x != nil {
		return x.Volumetric
	}
	return false
}

func (x *ValidMeasurementUnitUpdateRequestInput) GetUniversal() bool {
	if x != nil {
		return x.Universal
	}
	return false
}

func (x *ValidMeasurementUnitUpdateRequestInput) GetMetric() bool {
	if x != nil {
		return x.Metric
	}
	return false
}

func (x *ValidMeasurementUnitUpdateRequestInput) GetImperial() bool {
	if x != nil {
		return x.Imperial
	}
	return false
}

func (x *ValidMeasurementUnitUpdateRequestInput) GetPluralName() string {
	if x != nil {
		return x.PluralName
	}
	return ""
}

func (x *ValidMeasurementUnitUpdateRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

type ValidPreparation struct {
	state                       protoimpl.MessageState      `protogen:"open.v1"`
	CreatedAt                   *timestamppb.Timestamp      `json:"CreatedAt,omitempty"       protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	InstrumentCount             *Uint16RangeWithOptionalMax `json:"InstrumentCount,omitempty" protobuf:"bytes,2,opt,name=InstrumentCount,proto3"`
	IngredientCount             *Uint16RangeWithOptionalMax `json:"IngredientCount,omitempty" protobuf:"bytes,3,opt,name=IngredientCount,proto3"`
	VesselCount                 *Uint16RangeWithOptionalMax `json:"VesselCount,omitempty"     protobuf:"bytes,4,opt,name=VesselCount,proto3"`
	ArchivedAt                  *timestamppb.Timestamp      `json:"ArchivedAt,omitempty"      protobuf:"bytes,5,opt,name=ArchivedAt,proto3"`
	LastUpdatedAt               *timestamppb.Timestamp      `json:"LastUpdatedAt,omitempty"   protobuf:"bytes,6,opt,name=LastUpdatedAt,proto3"`
	Name                        string                      `json:"Name,omitempty"            protobuf:"bytes,10,opt,name=Name,proto3"`
	ID                          string                      `json:"ID,omitempty"              protobuf:"bytes,9,opt,name=ID,proto3"`
	IconPath                    string                      `json:"IconPath,omitempty"        protobuf:"bytes,7,opt,name=IconPath,proto3"`
	Description                 string                      `json:"Description,omitempty"     protobuf:"bytes,11,opt,name=Description,proto3"`
	Slug                        string                      `json:"Slug,omitempty"            protobuf:"bytes,12,opt,name=Slug,proto3"`
	PastTense                   string                      `json:"PastTense,omitempty"       protobuf:"bytes,8,opt,name=PastTense,proto3"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
	TemperatureRequired         bool `json:"TemperatureRequired,omitempty"         protobuf:"varint,14,opt,name=TemperatureRequired,proto3"`
	ConditionExpressionRequired bool `json:"ConditionExpressionRequired,omitempty" protobuf:"varint,16,opt,name=ConditionExpressionRequired,proto3"`
	ConsumesVessel              bool `json:"ConsumesVessel,omitempty"              protobuf:"varint,17,opt,name=ConsumesVessel,proto3"`
	OnlyForVessels              bool `json:"OnlyForVessels,omitempty"              protobuf:"varint,18,opt,name=OnlyForVessels,proto3"`
	YieldsNothing               bool `json:"YieldsNothing,omitempty"               protobuf:"varint,19,opt,name=YieldsNothing,proto3"`
	TimeEstimateRequired        bool `json:"TimeEstimateRequired,omitempty"        protobuf:"varint,15,opt,name=TimeEstimateRequired,proto3"`
	RestrictToIngredients       bool `json:"RestrictToIngredients,omitempty"       protobuf:"varint,13,opt,name=RestrictToIngredients,proto3"`
}

func (x *ValidPreparation) Reset() {
	*x = ValidPreparation{}
	mi := &file_messages_proto_msgTypes[178]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidPreparation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidPreparation) ProtoMessage() {}

func (x *ValidPreparation) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[178]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidPreparation.ProtoReflect.Descriptor instead.
func (*ValidPreparation) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{178}
}

func (x *ValidPreparation) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidPreparation) GetInstrumentCount() *Uint16RangeWithOptionalMax {
	if x != nil {
		return x.InstrumentCount
	}
	return nil
}

func (x *ValidPreparation) GetIngredientCount() *Uint16RangeWithOptionalMax {
	if x != nil {
		return x.IngredientCount
	}
	return nil
}

func (x *ValidPreparation) GetVesselCount() *Uint16RangeWithOptionalMax {
	if x != nil {
		return x.VesselCount
	}
	return nil
}

func (x *ValidPreparation) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidPreparation) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidPreparation) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidPreparation) GetPastTense() string {
	if x != nil {
		return x.PastTense
	}
	return ""
}

func (x *ValidPreparation) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidPreparation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidPreparation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidPreparation) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidPreparation) GetRestrictToIngredients() bool {
	if x != nil {
		return x.RestrictToIngredients
	}
	return false
}

func (x *ValidPreparation) GetTemperatureRequired() bool {
	if x != nil {
		return x.TemperatureRequired
	}
	return false
}

func (x *ValidPreparation) GetTimeEstimateRequired() bool {
	if x != nil {
		return x.TimeEstimateRequired
	}
	return false
}

func (x *ValidPreparation) GetConditionExpressionRequired() bool {
	if x != nil {
		return x.ConditionExpressionRequired
	}
	return false
}

func (x *ValidPreparation) GetConsumesVessel() bool {
	if x != nil {
		return x.ConsumesVessel
	}
	return false
}

func (x *ValidPreparation) GetOnlyForVessels() bool {
	if x != nil {
		return x.OnlyForVessels
	}
	return false
}

func (x *ValidPreparation) GetYieldsNothing() bool {
	if x != nil {
		return x.YieldsNothing
	}
	return false
}

type ValidPreparationCreationRequestInput struct {
	state                       protoimpl.MessageState      `protogen:"open.v1"`
	InstrumentCount             *Uint16RangeWithOptionalMax `json:"InstrumentCount,omitempty" protobuf:"bytes,1,opt,name=InstrumentCount,proto3"`
	IngredientCount             *Uint16RangeWithOptionalMax `json:"IngredientCount,omitempty" protobuf:"bytes,2,opt,name=IngredientCount,proto3"`
	VesselCount                 *Uint16RangeWithOptionalMax `json:"VesselCount,omitempty"     protobuf:"bytes,3,opt,name=VesselCount,proto3"`
	Description                 string                      `json:"Description,omitempty"     protobuf:"bytes,8,opt,name=Description,proto3"`
	PastTense                   string                      `json:"PastTense,omitempty"       protobuf:"bytes,5,opt,name=PastTense,proto3"`
	Slug                        string                      `json:"Slug,omitempty"            protobuf:"bytes,6,opt,name=Slug,proto3"`
	Name                        string                      `json:"Name,omitempty"            protobuf:"bytes,7,opt,name=Name,proto3"`
	IconPath                    string                      `json:"IconPath,omitempty"        protobuf:"bytes,4,opt,name=IconPath,proto3"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
	ConditionExpressionRequired bool `json:"ConditionExpressionRequired,omitempty" protobuf:"varint,11,opt,name=ConditionExpressionRequired,proto3"`
	ConsumesVessel              bool `json:"ConsumesVessel,omitempty"              protobuf:"varint,12,opt,name=ConsumesVessel,proto3"`
	OnlyForVessels              bool `json:"OnlyForVessels,omitempty"              protobuf:"varint,13,opt,name=OnlyForVessels,proto3"`
	RestrictToIngredients       bool `json:"RestrictToIngredients,omitempty"       protobuf:"varint,14,opt,name=RestrictToIngredients,proto3"`
	YieldsNothing               bool `json:"YieldsNothing,omitempty"               protobuf:"varint,15,opt,name=YieldsNothing,proto3"`
	TimeEstimateRequired        bool `json:"TimeEstimateRequired,omitempty"        protobuf:"varint,10,opt,name=TimeEstimateRequired,proto3"`
	TemperatureRequired         bool `json:"TemperatureRequired,omitempty"         protobuf:"varint,9,opt,name=TemperatureRequired,proto3"`
}

func (x *ValidPreparationCreationRequestInput) Reset() {
	*x = ValidPreparationCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[179]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidPreparationCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidPreparationCreationRequestInput) ProtoMessage() {}

func (x *ValidPreparationCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[179]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidPreparationCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidPreparationCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{179}
}

func (x *ValidPreparationCreationRequestInput) GetInstrumentCount() *Uint16RangeWithOptionalMax {
	if x != nil {
		return x.InstrumentCount
	}
	return nil
}

func (x *ValidPreparationCreationRequestInput) GetIngredientCount() *Uint16RangeWithOptionalMax {
	if x != nil {
		return x.IngredientCount
	}
	return nil
}

func (x *ValidPreparationCreationRequestInput) GetVesselCount() *Uint16RangeWithOptionalMax {
	if x != nil {
		return x.VesselCount
	}
	return nil
}

func (x *ValidPreparationCreationRequestInput) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidPreparationCreationRequestInput) GetPastTense() string {
	if x != nil {
		return x.PastTense
	}
	return ""
}

func (x *ValidPreparationCreationRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidPreparationCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidPreparationCreationRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidPreparationCreationRequestInput) GetTemperatureRequired() bool {
	if x != nil {
		return x.TemperatureRequired
	}
	return false
}

func (x *ValidPreparationCreationRequestInput) GetTimeEstimateRequired() bool {
	if x != nil {
		return x.TimeEstimateRequired
	}
	return false
}

func (x *ValidPreparationCreationRequestInput) GetConditionExpressionRequired() bool {
	if x != nil {
		return x.ConditionExpressionRequired
	}
	return false
}

func (x *ValidPreparationCreationRequestInput) GetConsumesVessel() bool {
	if x != nil {
		return x.ConsumesVessel
	}
	return false
}

func (x *ValidPreparationCreationRequestInput) GetOnlyForVessels() bool {
	if x != nil {
		return x.OnlyForVessels
	}
	return false
}

func (x *ValidPreparationCreationRequestInput) GetRestrictToIngredients() bool {
	if x != nil {
		return x.RestrictToIngredients
	}
	return false
}

func (x *ValidPreparationCreationRequestInput) GetYieldsNothing() bool {
	if x != nil {
		return x.YieldsNothing
	}
	return false
}

type ValidPreparationInstrument struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp `json:"CreatedAt,omitempty"     protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	LastUpdatedAt *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty" protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3"`
	ArchivedAt    *timestamppb.Timestamp `json:"ArchivedAt,omitempty"    protobuf:"bytes,3,opt,name=ArchivedAt,proto3"`
	ID            string                 `json:"ID,omitempty"            protobuf:"bytes,4,opt,name=ID,proto3"`
	Notes         string                 `json:"Notes,omitempty"         protobuf:"bytes,5,opt,name=Notes,proto3"`
	Instrument    *ValidInstrument       `json:"Instrument,omitempty"    protobuf:"bytes,6,opt,name=Instrument,proto3"`
	Preparation   *ValidPreparation      `json:"Preparation,omitempty"   protobuf:"bytes,7,opt,name=Preparation,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidPreparationInstrument) Reset() {
	*x = ValidPreparationInstrument{}
	mi := &file_messages_proto_msgTypes[180]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidPreparationInstrument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidPreparationInstrument) ProtoMessage() {}

func (x *ValidPreparationInstrument) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[180]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidPreparationInstrument.ProtoReflect.Descriptor instead.
func (*ValidPreparationInstrument) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{180}
}

func (x *ValidPreparationInstrument) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidPreparationInstrument) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidPreparationInstrument) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidPreparationInstrument) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidPreparationInstrument) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidPreparationInstrument) GetInstrument() *ValidInstrument {
	if x != nil {
		return x.Instrument
	}
	return nil
}

func (x *ValidPreparationInstrument) GetPreparation() *ValidPreparation {
	if x != nil {
		return x.Preparation
	}
	return nil
}

type ValidPreparationInstrumentCreationRequestInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Notes              string                 `json:"Notes,omitempty"              protobuf:"bytes,1,opt,name=Notes,proto3"`
	ValidPreparationID string                 `json:"ValidPreparationID,omitempty" protobuf:"bytes,2,opt,name=ValidPreparationID,proto3"`
	ValidInstrumentID  string                 `json:"ValidInstrumentID,omitempty"  protobuf:"bytes,3,opt,name=ValidInstrumentID,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ValidPreparationInstrumentCreationRequestInput) Reset() {
	*x = ValidPreparationInstrumentCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[181]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidPreparationInstrumentCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidPreparationInstrumentCreationRequestInput) ProtoMessage() {}

func (x *ValidPreparationInstrumentCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[181]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidPreparationInstrumentCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidPreparationInstrumentCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{181}
}

func (x *ValidPreparationInstrumentCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidPreparationInstrumentCreationRequestInput) GetValidPreparationID() string {
	if x != nil {
		return x.ValidPreparationID
	}
	return ""
}

func (x *ValidPreparationInstrumentCreationRequestInput) GetValidInstrumentID() string {
	if x != nil {
		return x.ValidInstrumentID
	}
	return ""
}

type ValidPreparationInstrumentUpdateRequestInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Notes              string                 `json:"Notes,omitempty"              protobuf:"bytes,1,opt,name=Notes,proto3"`
	ValidPreparationID string                 `json:"ValidPreparationID,omitempty" protobuf:"bytes,2,opt,name=ValidPreparationID,proto3"`
	ValidInstrumentID  string                 `json:"ValidInstrumentID,omitempty"  protobuf:"bytes,3,opt,name=ValidInstrumentID,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ValidPreparationInstrumentUpdateRequestInput) Reset() {
	*x = ValidPreparationInstrumentUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[182]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidPreparationInstrumentUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidPreparationInstrumentUpdateRequestInput) ProtoMessage() {}

func (x *ValidPreparationInstrumentUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[182]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidPreparationInstrumentUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ValidPreparationInstrumentUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{182}
}

func (x *ValidPreparationInstrumentUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidPreparationInstrumentUpdateRequestInput) GetValidPreparationID() string {
	if x != nil {
		return x.ValidPreparationID
	}
	return ""
}

func (x *ValidPreparationInstrumentUpdateRequestInput) GetValidInstrumentID() string {
	if x != nil {
		return x.ValidInstrumentID
	}
	return ""
}

type ValidPreparationUpdateRequestInput struct {
	state                       protoimpl.MessageState                        `protogen:"open.v1"`
	InstrumentCount             *Uint16RangeWithOptionalMaxUpdateRequestInput `json:"InstrumentCount,omitempty" protobuf:"bytes,1,opt,name=InstrumentCount,proto3"`
	IngredientCount             *Uint16RangeWithOptionalMaxUpdateRequestInput `json:"IngredientCount,omitempty" protobuf:"bytes,2,opt,name=IngredientCount,proto3"`
	VesselCount                 *Uint16RangeWithOptionalMaxUpdateRequestInput `json:"VesselCount,omitempty"     protobuf:"bytes,3,opt,name=VesselCount,proto3"`
	Slug                        string                                        `json:"Slug,omitempty"            protobuf:"bytes,8,opt,name=Slug,proto3"`
	Description                 string                                        `json:"Description,omitempty"     protobuf:"bytes,5,opt,name=Description,proto3"`
	IconPath                    string                                        `json:"IconPath,omitempty"        protobuf:"bytes,6,opt,name=IconPath,proto3"`
	Name                        string                                        `json:"Name,omitempty"            protobuf:"bytes,4,opt,name=Name,proto3"`
	PastTense                   string                                        `json:"PastTense,omitempty"       protobuf:"bytes,10,opt,name=PastTense,proto3"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
	TemperatureRequired         bool `json:"TemperatureRequired,omitempty"         protobuf:"varint,11,opt,name=TemperatureRequired,proto3"`
	TimeEstimateRequired        bool `json:"TimeEstimateRequired,omitempty"        protobuf:"varint,12,opt,name=TimeEstimateRequired,proto3"`
	ConditionExpressionRequired bool `json:"ConditionExpressionRequired,omitempty" protobuf:"varint,13,opt,name=ConditionExpressionRequired,proto3"`
	ConsumesVessel              bool `json:"ConsumesVessel,omitempty"              protobuf:"varint,14,opt,name=ConsumesVessel,proto3"`
	OnlyForVessels              bool `json:"OnlyForVessels,omitempty"              protobuf:"varint,15,opt,name=OnlyForVessels,proto3"`
	RestrictToIngredients       bool `json:"RestrictToIngredients,omitempty"       protobuf:"varint,9,opt,name=RestrictToIngredients,proto3"`
	YieldsNothing               bool `json:"YieldsNothing,omitempty"               protobuf:"varint,7,opt,name=YieldsNothing,proto3"`
}

func (x *ValidPreparationUpdateRequestInput) Reset() {
	*x = ValidPreparationUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[183]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidPreparationUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidPreparationUpdateRequestInput) ProtoMessage() {}

func (x *ValidPreparationUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[183]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidPreparationUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ValidPreparationUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{183}
}

func (x *ValidPreparationUpdateRequestInput) GetInstrumentCount() *Uint16RangeWithOptionalMaxUpdateRequestInput {
	if x != nil {
		return x.InstrumentCount
	}
	return nil
}

func (x *ValidPreparationUpdateRequestInput) GetIngredientCount() *Uint16RangeWithOptionalMaxUpdateRequestInput {
	if x != nil {
		return x.IngredientCount
	}
	return nil
}

func (x *ValidPreparationUpdateRequestInput) GetVesselCount() *Uint16RangeWithOptionalMaxUpdateRequestInput {
	if x != nil {
		return x.VesselCount
	}
	return nil
}

func (x *ValidPreparationUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidPreparationUpdateRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidPreparationUpdateRequestInput) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidPreparationUpdateRequestInput) GetYieldsNothing() bool {
	if x != nil {
		return x.YieldsNothing
	}
	return false
}

func (x *ValidPreparationUpdateRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidPreparationUpdateRequestInput) GetRestrictToIngredients() bool {
	if x != nil {
		return x.RestrictToIngredients
	}
	return false
}

func (x *ValidPreparationUpdateRequestInput) GetPastTense() string {
	if x != nil {
		return x.PastTense
	}
	return ""
}

func (x *ValidPreparationUpdateRequestInput) GetTemperatureRequired() bool {
	if x != nil {
		return x.TemperatureRequired
	}
	return false
}

func (x *ValidPreparationUpdateRequestInput) GetTimeEstimateRequired() bool {
	if x != nil {
		return x.TimeEstimateRequired
	}
	return false
}

func (x *ValidPreparationUpdateRequestInput) GetConditionExpressionRequired() bool {
	if x != nil {
		return x.ConditionExpressionRequired
	}
	return false
}

func (x *ValidPreparationUpdateRequestInput) GetConsumesVessel() bool {
	if x != nil {
		return x.ConsumesVessel
	}
	return false
}

func (x *ValidPreparationUpdateRequestInput) GetOnlyForVessels() bool {
	if x != nil {
		return x.OnlyForVessels
	}
	return false
}

type ValidPreparationVessel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp `json:"CreatedAt,omitempty"     protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	LastUpdatedAt *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty" protobuf:"bytes,2,opt,name=LastUpdatedAt,proto3"`
	ArchivedAt    *timestamppb.Timestamp `json:"ArchivedAt,omitempty"    protobuf:"bytes,3,opt,name=ArchivedAt,proto3"`
	ID            string                 `json:"ID,omitempty"            protobuf:"bytes,4,opt,name=ID,proto3"`
	Notes         string                 `json:"Notes,omitempty"         protobuf:"bytes,5,opt,name=Notes,proto3"`
	Preparation   *ValidPreparation      `json:"Preparation,omitempty"   protobuf:"bytes,6,opt,name=Preparation,proto3"`
	Vessel        *ValidVessel           `json:"Vessel,omitempty"        protobuf:"bytes,7,opt,name=Vessel,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidPreparationVessel) Reset() {
	*x = ValidPreparationVessel{}
	mi := &file_messages_proto_msgTypes[184]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidPreparationVessel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidPreparationVessel) ProtoMessage() {}

func (x *ValidPreparationVessel) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[184]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidPreparationVessel.ProtoReflect.Descriptor instead.
func (*ValidPreparationVessel) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{184}
}

func (x *ValidPreparationVessel) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidPreparationVessel) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidPreparationVessel) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidPreparationVessel) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidPreparationVessel) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidPreparationVessel) GetPreparation() *ValidPreparation {
	if x != nil {
		return x.Preparation
	}
	return nil
}

func (x *ValidPreparationVessel) GetVessel() *ValidVessel {
	if x != nil {
		return x.Vessel
	}
	return nil
}

type ValidPreparationVesselCreationRequestInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Notes              string                 `json:"Notes,omitempty"              protobuf:"bytes,1,opt,name=Notes,proto3"`
	ValidPreparationID string                 `json:"ValidPreparationID,omitempty" protobuf:"bytes,2,opt,name=ValidPreparationID,proto3"`
	ValidVesselID      string                 `json:"ValidVesselID,omitempty"      protobuf:"bytes,3,opt,name=ValidVesselID,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ValidPreparationVesselCreationRequestInput) Reset() {
	*x = ValidPreparationVesselCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[185]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidPreparationVesselCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidPreparationVesselCreationRequestInput) ProtoMessage() {}

func (x *ValidPreparationVesselCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[185]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidPreparationVesselCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidPreparationVesselCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{185}
}

func (x *ValidPreparationVesselCreationRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidPreparationVesselCreationRequestInput) GetValidPreparationID() string {
	if x != nil {
		return x.ValidPreparationID
	}
	return ""
}

func (x *ValidPreparationVesselCreationRequestInput) GetValidVesselID() string {
	if x != nil {
		return x.ValidVesselID
	}
	return ""
}

type ValidPreparationVesselUpdateRequestInput struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Notes              string                 `json:"Notes,omitempty"              protobuf:"bytes,1,opt,name=Notes,proto3"`
	ValidPreparationID string                 `json:"ValidPreparationID,omitempty" protobuf:"bytes,2,opt,name=ValidPreparationID,proto3"`
	ValidVesselID      string                 `json:"ValidVesselID,omitempty"      protobuf:"bytes,3,opt,name=ValidVesselID,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ValidPreparationVesselUpdateRequestInput) Reset() {
	*x = ValidPreparationVesselUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[186]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidPreparationVesselUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidPreparationVesselUpdateRequestInput) ProtoMessage() {}

func (x *ValidPreparationVesselUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[186]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidPreparationVesselUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ValidPreparationVesselUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{186}
}

func (x *ValidPreparationVesselUpdateRequestInput) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *ValidPreparationVesselUpdateRequestInput) GetValidPreparationID() string {
	if x != nil {
		return x.ValidPreparationID
	}
	return ""
}

func (x *ValidPreparationVesselUpdateRequestInput) GetValidVesselID() string {
	if x != nil {
		return x.ValidVesselID
	}
	return ""
}

type ValidVessel struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt                      *timestamppb.Timestamp `json:"CreatedAt,omitempty"     protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	ArchivedAt                     *timestamppb.Timestamp `json:"ArchivedAt,omitempty"    protobuf:"bytes,2,opt,name=ArchivedAt,proto3"`
	LastUpdatedAt                  *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty" protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3"`
	CapacityUnit                   *ValidMeasurementUnit  `json:"CapacityUnit,omitempty"  protobuf:"bytes,4,opt,name=CapacityUnit,proto3"`
	Shape                          string                 `json:"Shape,omitempty"         protobuf:"bytes,10,opt,name=Shape,proto3"`
	Description                    string                 `json:"Description,omitempty"   protobuf:"bytes,7,opt,name=Description,proto3"`
	Name                           string                 `json:"Name,omitempty"          protobuf:"bytes,8,opt,name=Name,proto3"`
	Slug                           string                 `json:"Slug,omitempty"          protobuf:"bytes,9,opt,name=Slug,proto3"`
	IconPath                       string                 `json:"IconPath,omitempty"      protobuf:"bytes,5,opt,name=IconPath,proto3"`
	ID                             string                 `json:"ID,omitempty"            protobuf:"bytes,11,opt,name=ID,proto3"`
	PluralName                     string                 `json:"PluralName,omitempty"    protobuf:"bytes,6,opt,name=PluralName,proto3"`
	unknownFields                  protoimpl.UnknownFields
	WidthInMillimeters             float32 `json:"WidthInMillimeters,omitempty"  protobuf:"fixed32,12,opt,name=WidthInMillimeters,proto3"`
	HeightInMillimeters            float32 `json:"HeightInMillimeters,omitempty" protobuf:"fixed32,14,opt,name=HeightInMillimeters,proto3"`
	Capacity                       float32 `json:"Capacity,omitempty"            protobuf:"fixed32,15,opt,name=Capacity,proto3"`
	LengthInMillimeters            float32 `json:"LengthInMillimeters,omitempty" protobuf:"fixed32,13,opt,name=LengthInMillimeters,proto3"`
	sizeCache                      protoimpl.SizeCache
	IncludeInGeneratedInstructions bool `json:"IncludeInGeneratedInstructions,omitempty" protobuf:"varint,16,opt,name=IncludeInGeneratedInstructions,proto3"`
	DisplayInSummaryLists          bool `json:"DisplayInSummaryLists,omitempty"          protobuf:"varint,17,opt,name=DisplayInSummaryLists,proto3"`
	UsableForStorage               bool `json:"UsableForStorage,omitempty"               protobuf:"varint,18,opt,name=UsableForStorage,proto3"`
}

func (x *ValidVessel) Reset() {
	*x = ValidVessel{}
	mi := &file_messages_proto_msgTypes[187]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidVessel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidVessel) ProtoMessage() {}

func (x *ValidVessel) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[187]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidVessel.ProtoReflect.Descriptor instead.
func (*ValidVessel) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{187}
}

func (x *ValidVessel) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ValidVessel) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *ValidVessel) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *ValidVessel) GetCapacityUnit() *ValidMeasurementUnit {
	if x != nil {
		return x.CapacityUnit
	}
	return nil
}

func (x *ValidVessel) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidVessel) GetPluralName() string {
	if x != nil {
		return x.PluralName
	}
	return ""
}

func (x *ValidVessel) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidVessel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidVessel) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidVessel) GetShape() string {
	if x != nil {
		return x.Shape
	}
	return ""
}

func (x *ValidVessel) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ValidVessel) GetWidthInMillimeters() float32 {
	if x != nil {
		return x.WidthInMillimeters
	}
	return 0
}

func (x *ValidVessel) GetLengthInMillimeters() float32 {
	if x != nil {
		return x.LengthInMillimeters
	}
	return 0
}

func (x *ValidVessel) GetHeightInMillimeters() float32 {
	if x != nil {
		return x.HeightInMillimeters
	}
	return 0
}

func (x *ValidVessel) GetCapacity() float32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *ValidVessel) GetIncludeInGeneratedInstructions() bool {
	if x != nil {
		return x.IncludeInGeneratedInstructions
	}
	return false
}

func (x *ValidVessel) GetDisplayInSummaryLists() bool {
	if x != nil {
		return x.DisplayInSummaryLists
	}
	return false
}

func (x *ValidVessel) GetUsableForStorage() bool {
	if x != nil {
		return x.UsableForStorage
	}
	return false
}

type ValidVesselCreationRequestInput struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	CapacityUnitID                 string                 `json:"CapacityUnitID,omitempty" protobuf:"bytes,1,opt,name=CapacityUnitID,proto3"`
	Shape                          string                 `json:"Shape,omitempty"          protobuf:"bytes,2,opt,name=Shape,proto3"`
	IconPath                       string                 `json:"IconPath,omitempty"       protobuf:"bytes,3,opt,name=IconPath,proto3"`
	PluralName                     string                 `json:"PluralName,omitempty"     protobuf:"bytes,4,opt,name=PluralName,proto3"`
	Name                           string                 `json:"Name,omitempty"           protobuf:"bytes,5,opt,name=Name,proto3"`
	Description                    string                 `json:"Description,omitempty"    protobuf:"bytes,6,opt,name=Description,proto3"`
	Slug                           string                 `json:"Slug,omitempty"           protobuf:"bytes,7,opt,name=Slug,proto3"`
	unknownFields                  protoimpl.UnknownFields
	LengthInMillimeters            float32 `json:"LengthInMillimeters,omitempty" protobuf:"fixed32,8,opt,name=LengthInMillimeters,proto3"`
	Capacity                       float32 `json:"Capacity,omitempty"            protobuf:"fixed32,10,opt,name=Capacity,proto3"`
	WidthInMillimeters             float32 `json:"WidthInMillimeters,omitempty"  protobuf:"fixed32,11,opt,name=WidthInMillimeters,proto3"`
	HeightInMillimeters            float32 `json:"HeightInMillimeters,omitempty" protobuf:"fixed32,9,opt,name=HeightInMillimeters,proto3"`
	sizeCache                      protoimpl.SizeCache
	UsableForStorage               bool `json:"UsableForStorage,omitempty"               protobuf:"varint,12,opt,name=UsableForStorage,proto3"`
	IncludeInGeneratedInstructions bool `json:"IncludeInGeneratedInstructions,omitempty" protobuf:"varint,13,opt,name=IncludeInGeneratedInstructions,proto3"`
	DisplayInSummaryLists          bool `json:"DisplayInSummaryLists,omitempty"          protobuf:"varint,14,opt,name=DisplayInSummaryLists,proto3"`
}

func (x *ValidVesselCreationRequestInput) Reset() {
	*x = ValidVesselCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[188]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidVesselCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidVesselCreationRequestInput) ProtoMessage() {}

func (x *ValidVesselCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[188]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidVesselCreationRequestInput.ProtoReflect.Descriptor instead.
func (*ValidVesselCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{188}
}

func (x *ValidVesselCreationRequestInput) GetCapacityUnitID() string {
	if x != nil {
		return x.CapacityUnitID
	}
	return ""
}

func (x *ValidVesselCreationRequestInput) GetShape() string {
	if x != nil {
		return x.Shape
	}
	return ""
}

func (x *ValidVesselCreationRequestInput) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidVesselCreationRequestInput) GetPluralName() string {
	if x != nil {
		return x.PluralName
	}
	return ""
}

func (x *ValidVesselCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidVesselCreationRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidVesselCreationRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidVesselCreationRequestInput) GetLengthInMillimeters() float32 {
	if x != nil {
		return x.LengthInMillimeters
	}
	return 0
}

func (x *ValidVesselCreationRequestInput) GetHeightInMillimeters() float32 {
	if x != nil {
		return x.HeightInMillimeters
	}
	return 0
}

func (x *ValidVesselCreationRequestInput) GetCapacity() float32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *ValidVesselCreationRequestInput) GetWidthInMillimeters() float32 {
	if x != nil {
		return x.WidthInMillimeters
	}
	return 0
}

func (x *ValidVesselCreationRequestInput) GetUsableForStorage() bool {
	if x != nil {
		return x.UsableForStorage
	}
	return false
}

func (x *ValidVesselCreationRequestInput) GetIncludeInGeneratedInstructions() bool {
	if x != nil {
		return x.IncludeInGeneratedInstructions
	}
	return false
}

func (x *ValidVesselCreationRequestInput) GetDisplayInSummaryLists() bool {
	if x != nil {
		return x.DisplayInSummaryLists
	}
	return false
}

type ValidVesselUpdateRequestInput struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	CapacityUnitID                 string                 `json:"CapacityUnitID,omitempty" protobuf:"bytes,10,opt,name=CapacityUnitID,proto3"`
	Name                           string                 `json:"Name,omitempty"           protobuf:"bytes,1,opt,name=Name,proto3"`
	PluralName                     string                 `json:"PluralName,omitempty"     protobuf:"bytes,2,opt,name=PluralName,proto3"`
	Description                    string                 `json:"Description,omitempty"    protobuf:"bytes,3,opt,name=Description,proto3"`
	IconPath                       string                 `json:"IconPath,omitempty"       protobuf:"bytes,4,opt,name=IconPath,proto3"`
	Slug                           string                 `json:"Slug,omitempty"           protobuf:"bytes,6,opt,name=Slug,proto3"`
	Shape                          string                 `json:"Shape,omitempty"          protobuf:"bytes,14,opt,name=Shape,proto3"`
	unknownFields                  protoimpl.UnknownFields
	LengthInMillimeters            float32 `json:"LengthInMillimeters,omitempty" protobuf:"fixed32,12,opt,name=LengthInMillimeters,proto3"`
	Capacity                       float32 `json:"Capacity,omitempty"            protobuf:"fixed32,9,opt,name=Capacity,proto3"`
	WidthInMillimeters             float32 `json:"WidthInMillimeters,omitempty"  protobuf:"fixed32,11,opt,name=WidthInMillimeters,proto3"`
	HeightInMillimeters            float32 `json:"HeightInMillimeters,omitempty" protobuf:"fixed32,13,opt,name=HeightInMillimeters,proto3"`
	sizeCache                      protoimpl.SizeCache
	IncludeInGeneratedInstructions bool `json:"IncludeInGeneratedInstructions,omitempty" protobuf:"varint,8,opt,name=IncludeInGeneratedInstructions,proto3"`
	DisplayInSummaryLists          bool `json:"DisplayInSummaryLists,omitempty"          protobuf:"varint,7,opt,name=DisplayInSummaryLists,proto3"`
	UsableForStorage               bool `json:"UsableForStorage,omitempty"               protobuf:"varint,5,opt,name=UsableForStorage,proto3"`
}

func (x *ValidVesselUpdateRequestInput) Reset() {
	*x = ValidVesselUpdateRequestInput{}
	mi := &file_messages_proto_msgTypes[189]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidVesselUpdateRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidVesselUpdateRequestInput) ProtoMessage() {}

func (x *ValidVesselUpdateRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[189]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidVesselUpdateRequestInput.ProtoReflect.Descriptor instead.
func (*ValidVesselUpdateRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{189}
}

func (x *ValidVesselUpdateRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ValidVesselUpdateRequestInput) GetPluralName() string {
	if x != nil {
		return x.PluralName
	}
	return ""
}

func (x *ValidVesselUpdateRequestInput) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ValidVesselUpdateRequestInput) GetIconPath() string {
	if x != nil {
		return x.IconPath
	}
	return ""
}

func (x *ValidVesselUpdateRequestInput) GetUsableForStorage() bool {
	if x != nil {
		return x.UsableForStorage
	}
	return false
}

func (x *ValidVesselUpdateRequestInput) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ValidVesselUpdateRequestInput) GetDisplayInSummaryLists() bool {
	if x != nil {
		return x.DisplayInSummaryLists
	}
	return false
}

func (x *ValidVesselUpdateRequestInput) GetIncludeInGeneratedInstructions() bool {
	if x != nil {
		return x.IncludeInGeneratedInstructions
	}
	return false
}

func (x *ValidVesselUpdateRequestInput) GetCapacity() float32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *ValidVesselUpdateRequestInput) GetCapacityUnitID() string {
	if x != nil {
		return x.CapacityUnitID
	}
	return ""
}

func (x *ValidVesselUpdateRequestInput) GetWidthInMillimeters() float32 {
	if x != nil {
		return x.WidthInMillimeters
	}
	return 0
}

func (x *ValidVesselUpdateRequestInput) GetLengthInMillimeters() float32 {
	if x != nil {
		return x.LengthInMillimeters
	}
	return 0
}

func (x *ValidVesselUpdateRequestInput) GetHeightInMillimeters() float32 {
	if x != nil {
		return x.HeightInMillimeters
	}
	return 0
}

func (x *ValidVesselUpdateRequestInput) GetShape() string {
	if x != nil {
		return x.Shape
	}
	return ""
}

type Webhook struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt          *timestamppb.Timestamp `json:"CreatedAt,omitempty"          protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	ArchivedAt         *timestamppb.Timestamp `json:"ArchivedAt,omitempty"         protobuf:"bytes,2,opt,name=ArchivedAt,proto3"`
	LastUpdatedAt      *timestamppb.Timestamp `json:"LastUpdatedAt,omitempty"      protobuf:"bytes,3,opt,name=LastUpdatedAt,proto3"`
	Name               string                 `json:"Name,omitempty"               protobuf:"bytes,4,opt,name=Name,proto3"`
	URL                string                 `json:"URL,omitempty"                protobuf:"bytes,5,opt,name=URL,proto3"`
	Method             string                 `json:"Method,omitempty"             protobuf:"bytes,6,opt,name=Method,proto3"`
	ID                 string                 `json:"ID,omitempty"                 protobuf:"bytes,7,opt,name=ID,proto3"`
	BelongsToHousehold string                 `json:"BelongsToHousehold,omitempty" protobuf:"bytes,8,opt,name=BelongsToHousehold,proto3"`
	ContentType        string                 `json:"ContentType,omitempty"        protobuf:"bytes,9,opt,name=ContentType,proto3"`
	Events             []*WebhookTriggerEvent `json:"Events,omitempty"             protobuf:"bytes,10,rep,name=Events,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Webhook) Reset() {
	*x = Webhook{}
	mi := &file_messages_proto_msgTypes[190]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Webhook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Webhook) ProtoMessage() {}

func (x *Webhook) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[190]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Webhook.ProtoReflect.Descriptor instead.
func (*Webhook) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{190}
}

func (x *Webhook) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Webhook) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *Webhook) GetLastUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdatedAt
	}
	return nil
}

func (x *Webhook) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Webhook) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *Webhook) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Webhook) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Webhook) GetBelongsToHousehold() string {
	if x != nil {
		return x.BelongsToHousehold
	}
	return ""
}

func (x *Webhook) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *Webhook) GetEvents() []*WebhookTriggerEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type WebhookCreationRequestInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `json:"Name,omitempty"        protobuf:"bytes,1,opt,name=Name,proto3"`
	ContentType   string                 `json:"ContentType,omitempty" protobuf:"bytes,2,opt,name=ContentType,proto3"`
	URL           string                 `json:"URL,omitempty"         protobuf:"bytes,3,opt,name=URL,proto3"`
	Method        string                 `json:"Method,omitempty"      protobuf:"bytes,4,opt,name=Method,proto3"`
	Events        []string               `json:"Events,omitempty"      protobuf:"bytes,5,rep,name=Events,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WebhookCreationRequestInput) Reset() {
	*x = WebhookCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[191]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebhookCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookCreationRequestInput) ProtoMessage() {}

func (x *WebhookCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[191]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookCreationRequestInput.ProtoReflect.Descriptor instead.
func (*WebhookCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{191}
}

func (x *WebhookCreationRequestInput) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WebhookCreationRequestInput) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *WebhookCreationRequestInput) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *WebhookCreationRequestInput) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *WebhookCreationRequestInput) GetEvents() []string {
	if x != nil {
		return x.Events
	}
	return nil
}

type WebhookExecutionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RequestID     string                 `json:"RequestID,omitempty"    protobuf:"bytes,1,opt,name=RequestID,proto3"`
	Payload       *anypb.Any             `json:"Payload,omitempty"      protobuf:"bytes,2,opt,name=Payload,proto3"`
	WebhookID     string                 `json:"WebhookID,omitempty"    protobuf:"bytes,3,opt,name=WebhookID,proto3"`
	HouseholdID   string                 `json:"HouseholdID,omitempty"  protobuf:"bytes,4,opt,name=HouseholdID,proto3"`
	TriggerEvent  string                 `json:"TriggerEvent,omitempty" protobuf:"bytes,5,opt,name=TriggerEvent,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WebhookExecutionRequest) Reset() {
	*x = WebhookExecutionRequest{}
	mi := &file_messages_proto_msgTypes[192]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebhookExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookExecutionRequest) ProtoMessage() {}

func (x *WebhookExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[192]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookExecutionRequest.ProtoReflect.Descriptor instead.
func (*WebhookExecutionRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{192}
}

func (x *WebhookExecutionRequest) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *WebhookExecutionRequest) GetPayload() *anypb.Any {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *WebhookExecutionRequest) GetWebhookID() string {
	if x != nil {
		return x.WebhookID
	}
	return ""
}

func (x *WebhookExecutionRequest) GetHouseholdID() string {
	if x != nil {
		return x.HouseholdID
	}
	return ""
}

func (x *WebhookExecutionRequest) GetTriggerEvent() string {
	if x != nil {
		return x.TriggerEvent
	}
	return ""
}

type WebhookTriggerEvent struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt        *timestamppb.Timestamp `json:"CreatedAt,omitempty"        protobuf:"bytes,1,opt,name=CreatedAt,proto3"`
	ArchivedAt       *timestamppb.Timestamp `json:"ArchivedAt,omitempty"       protobuf:"bytes,2,opt,name=ArchivedAt,proto3"`
	ID               string                 `json:"ID,omitempty"               protobuf:"bytes,3,opt,name=ID,proto3"`
	BelongsToWebhook string                 `json:"BelongsToWebhook,omitempty" protobuf:"bytes,4,opt,name=BelongsToWebhook,proto3"`
	TriggerEvent     string                 `json:"TriggerEvent,omitempty"     protobuf:"bytes,5,opt,name=TriggerEvent,proto3"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *WebhookTriggerEvent) Reset() {
	*x = WebhookTriggerEvent{}
	mi := &file_messages_proto_msgTypes[193]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebhookTriggerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookTriggerEvent) ProtoMessage() {}

func (x *WebhookTriggerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[193]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookTriggerEvent.ProtoReflect.Descriptor instead.
func (*WebhookTriggerEvent) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{193}
}

func (x *WebhookTriggerEvent) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *WebhookTriggerEvent) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

func (x *WebhookTriggerEvent) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *WebhookTriggerEvent) GetBelongsToWebhook() string {
	if x != nil {
		return x.BelongsToWebhook
	}
	return ""
}

func (x *WebhookTriggerEvent) GetTriggerEvent() string {
	if x != nil {
		return x.TriggerEvent
	}
	return ""
}

type WebhookTriggerEventCreationRequestInput struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	BelongsToWebhook string                 `json:"BelongsToWebhook,omitempty" protobuf:"bytes,1,opt,name=BelongsToWebhook,proto3"`
	TriggerEvent     string                 `json:"TriggerEvent,omitempty"     protobuf:"bytes,2,opt,name=TriggerEvent,proto3"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *WebhookTriggerEventCreationRequestInput) Reset() {
	*x = WebhookTriggerEventCreationRequestInput{}
	mi := &file_messages_proto_msgTypes[194]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WebhookTriggerEventCreationRequestInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebhookTriggerEventCreationRequestInput) ProtoMessage() {}

func (x *WebhookTriggerEventCreationRequestInput) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[194]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebhookTriggerEventCreationRequestInput.ProtoReflect.Descriptor instead.
func (*WebhookTriggerEventCreationRequestInput) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{194}
}

func (x *WebhookTriggerEventCreationRequestInput) GetBelongsToWebhook() string {
	if x != nil {
		return x.BelongsToWebhook
	}
	return ""
}

func (x *WebhookTriggerEventCreationRequestInput) GetTriggerEvent() string {
	if x != nil {
		return x.TriggerEvent
	}
	return ""
}

type GetHouseholdInvitationByIDRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	HouseholdID           string                 `json:"householdID,omitempty"           protobuf:"bytes,1,opt,name=householdID,proto3"`
	HouseholdInvitationID string                 `json:"householdInvitationID,omitempty" protobuf:"bytes,2,opt,name=householdInvitationID,proto3"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GetHouseholdInvitationByIDRequest) Reset() {
	*x = GetHouseholdInvitationByIDRequest{}
	mi := &file_messages_proto_msgTypes[195]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHouseholdInvitationByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHouseholdInvitationByIDRequest) ProtoMessage() {}

func (x *GetHouseholdInvitationByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[195]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHouseholdInvitationByIDRequest.ProtoReflect.Descriptor instead.
func (*GetHouseholdInvitationByIDRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{195}
}

func (x *GetHouseholdInvitationByIDRequest) GetHouseholdID() string {
	if x != nil {
		return x.HouseholdID
	}
	return ""
}

func (x *GetHouseholdInvitationByIDRequest) GetHouseholdInvitationID() string {
	if x != nil {
		return x.HouseholdInvitationID
	}
	return ""
}

type GetRecipeRatingRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RecipeID       string                 `json:"recipeID,omitempty"       protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipeRatingID string                 `json:"recipeRatingID,omitempty" protobuf:"bytes,2,opt,name=recipeRatingID,proto3"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetRecipeRatingRequest) Reset() {
	*x = GetRecipeRatingRequest{}
	mi := &file_messages_proto_msgTypes[196]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeRatingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeRatingRequest) ProtoMessage() {}

func (x *GetRecipeRatingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[196]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeRatingRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeRatingRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{196}
}

func (x *GetRecipeRatingRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *GetRecipeRatingRequest) GetRecipeRatingID() string {
	if x != nil {
		return x.RecipeRatingID
	}
	return ""
}

type GetRecipeStepInstrumentRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	RecipeID               string                 `json:"recipeID,omitempty"               protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipeStepID           string                 `json:"recipeStepID,omitempty"           protobuf:"bytes,2,opt,name=recipeStepID,proto3"`
	RecipeStepInstrumentID string                 `json:"recipeStepInstrumentID,omitempty" protobuf:"bytes,3,opt,name=recipeStepInstrumentID,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetRecipeStepInstrumentRequest) Reset() {
	*x = GetRecipeStepInstrumentRequest{}
	mi := &file_messages_proto_msgTypes[197]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepInstrumentRequest) ProtoMessage() {}

func (x *GetRecipeStepInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[197]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepInstrumentRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeStepInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{197}
}

func (x *GetRecipeStepInstrumentRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *GetRecipeStepInstrumentRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *GetRecipeStepInstrumentRequest) GetRecipeStepInstrumentID() string {
	if x != nil {
		return x.RecipeStepInstrumentID
	}
	return ""
}

type SetDefaultHouseholdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HouseholdID   string                 `json:"householdID,omitempty" protobuf:"bytes,1,opt,name=householdID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetDefaultHouseholdRequest) Reset() {
	*x = SetDefaultHouseholdRequest{}
	mi := &file_messages_proto_msgTypes[198]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetDefaultHouseholdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDefaultHouseholdRequest) ProtoMessage() {}

func (x *SetDefaultHouseholdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[198]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDefaultHouseholdRequest.ProtoReflect.Descriptor instead.
func (*SetDefaultHouseholdRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{198}
}

func (x *SetDefaultHouseholdRequest) GetHouseholdID() string {
	if x != nil {
		return x.HouseholdID
	}
	return ""
}

type UpdateValidPreparationInstrumentRequest struct {
	state                        protoimpl.MessageState                        `protogen:"open.v1"`
	ValidPreparationInstrumentID string                                        `json:"validPreparationInstrumentID,omitempty" protobuf:"bytes,1,opt,name=validPreparationInstrumentID,proto3"`
	Input                        *ValidPreparationInstrumentUpdateRequestInput `json:"input,omitempty"                        protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *UpdateValidPreparationInstrumentRequest) Reset() {
	*x = UpdateValidPreparationInstrumentRequest{}
	mi := &file_messages_proto_msgTypes[199]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidPreparationInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidPreparationInstrumentRequest) ProtoMessage() {}

func (x *UpdateValidPreparationInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[199]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidPreparationInstrumentRequest.ProtoReflect.Descriptor instead.
func (*UpdateValidPreparationInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{199}
}

func (x *UpdateValidPreparationInstrumentRequest) GetValidPreparationInstrumentID() string {
	if x != nil {
		return x.ValidPreparationInstrumentID
	}
	return ""
}

func (x *UpdateValidPreparationInstrumentRequest) GetInput() *ValidPreparationInstrumentUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type CancelHouseholdInvitationRequest struct {
	state                 protoimpl.MessageState                 `protogen:"open.v1"`
	HouseholdInvitationID string                                 `json:"householdInvitationID,omitempty" protobuf:"bytes,1,opt,name=householdInvitationID,proto3"`
	Input                 *HouseholdInvitationUpdateRequestInput `json:"input,omitempty"                 protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *CancelHouseholdInvitationRequest) Reset() {
	*x = CancelHouseholdInvitationRequest{}
	mi := &file_messages_proto_msgTypes[200]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelHouseholdInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelHouseholdInvitationRequest) ProtoMessage() {}

func (x *CancelHouseholdInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[200]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelHouseholdInvitationRequest.ProtoReflect.Descriptor instead.
func (*CancelHouseholdInvitationRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{200}
}

func (x *CancelHouseholdInvitationRequest) GetHouseholdInvitationID() string {
	if x != nil {
		return x.HouseholdInvitationID
	}
	return ""
}

func (x *CancelHouseholdInvitationRequest) GetInput() *HouseholdInvitationUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type RejectHouseholdInvitationRequest struct {
	state                 protoimpl.MessageState                 `protogen:"open.v1"`
	HouseholdInvitationID string                                 `json:"householdInvitationID,omitempty" protobuf:"bytes,1,opt,name=householdInvitationID,proto3"`
	Input                 *HouseholdInvitationUpdateRequestInput `json:"input,omitempty"                 protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *RejectHouseholdInvitationRequest) Reset() {
	*x = RejectHouseholdInvitationRequest{}
	mi := &file_messages_proto_msgTypes[201]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RejectHouseholdInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectHouseholdInvitationRequest) ProtoMessage() {}

func (x *RejectHouseholdInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[201]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectHouseholdInvitationRequest.ProtoReflect.Descriptor instead.
func (*RejectHouseholdInvitationRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{201}
}

func (x *RejectHouseholdInvitationRequest) GetHouseholdInvitationID() string {
	if x != nil {
		return x.HouseholdInvitationID
	}
	return ""
}

func (x *RejectHouseholdInvitationRequest) GetInput() *HouseholdInvitationUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateHouseholdRequest struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	HouseholdID   string                       `json:"householdID,omitempty" protobuf:"bytes,1,opt,name=householdID,proto3"`
	Input         *HouseholdUpdateRequestInput `json:"input,omitempty"       protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateHouseholdRequest) Reset() {
	*x = UpdateHouseholdRequest{}
	mi := &file_messages_proto_msgTypes[202]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateHouseholdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHouseholdRequest) ProtoMessage() {}

func (x *UpdateHouseholdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[202]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHouseholdRequest.ProtoReflect.Descriptor instead.
func (*UpdateHouseholdRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{202}
}

func (x *UpdateHouseholdRequest) GetHouseholdID() string {
	if x != nil {
		return x.HouseholdID
	}
	return ""
}

func (x *UpdateHouseholdRequest) GetInput() *HouseholdUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type GetValidVesselsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidVesselsRequest) Reset() {
	*x = GetValidVesselsRequest{}
	mi := &file_messages_proto_msgTypes[203]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidVesselsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidVesselsRequest) ProtoMessage() {}

func (x *GetValidVesselsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[203]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidVesselsRequest.ProtoReflect.Descriptor instead.
func (*GetValidVesselsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{203}
}

func (x *GetValidVesselsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetValidVesselRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ValidVesselID string                 `json:"validVesselID,omitempty" protobuf:"bytes,1,opt,name=validVesselID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidVesselRequest) Reset() {
	*x = GetValidVesselRequest{}
	mi := &file_messages_proto_msgTypes[204]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidVesselRequest) ProtoMessage() {}

func (x *GetValidVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[204]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidVesselRequest.ProtoReflect.Descriptor instead.
func (*GetValidVesselRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{204}
}

func (x *GetValidVesselRequest) GetValidVesselID() string {
	if x != nil {
		return x.ValidVesselID
	}
	return ""
}

type ArchiveValidInstrumentRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ValidInstrumentID string                 `json:"validInstrumentID,omitempty" protobuf:"bytes,1,opt,name=validInstrumentID,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ArchiveValidInstrumentRequest) Reset() {
	*x = ArchiveValidInstrumentRequest{}
	mi := &file_messages_proto_msgTypes[205]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidInstrumentRequest) ProtoMessage() {}

func (x *ArchiveValidInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[205]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidInstrumentRequest.ProtoReflect.Descriptor instead.
func (*ArchiveValidInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{205}
}

func (x *ArchiveValidInstrumentRequest) GetValidInstrumentID() string {
	if x != nil {
		return x.ValidInstrumentID
	}
	return ""
}

type ArchiveMealPlanRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MealPlanID    string                 `json:"mealPlanID,omitempty" protobuf:"bytes,1,opt,name=mealPlanID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveMealPlanRequest) Reset() {
	*x = ArchiveMealPlanRequest{}
	mi := &file_messages_proto_msgTypes[206]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveMealPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveMealPlanRequest) ProtoMessage() {}

func (x *ArchiveMealPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[206]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveMealPlanRequest.ProtoReflect.Descriptor instead.
func (*ArchiveMealPlanRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{206}
}

func (x *ArchiveMealPlanRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

type GetServiceSettingConfigurationsForUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServiceSettingConfigurationsForUserRequest) Reset() {
	*x = GetServiceSettingConfigurationsForUserRequest{}
	mi := &file_messages_proto_msgTypes[207]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceSettingConfigurationsForUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceSettingConfigurationsForUserRequest) ProtoMessage() {}

func (x *GetServiceSettingConfigurationsForUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[207]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceSettingConfigurationsForUserRequest.ProtoReflect.Descriptor instead.
func (*GetServiceSettingConfigurationsForUserRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{207}
}

func (x *GetServiceSettingConfigurationsForUserRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetValidIngredientMeasurementUnitsByMeasurementUnitRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Filter                 *QueryFilter           `json:"filter,omitempty"                 protobuf:"bytes,1,opt,name=filter,proto3"`
	ValidMeasurementUnitID string                 `json:"validMeasurementUnitID,omitempty" protobuf:"bytes,2,opt,name=validMeasurementUnitID,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetValidIngredientMeasurementUnitsByMeasurementUnitRequest) Reset() {
	*x = GetValidIngredientMeasurementUnitsByMeasurementUnitRequest{}
	mi := &file_messages_proto_msgTypes[208]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientMeasurementUnitsByMeasurementUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientMeasurementUnitsByMeasurementUnitRequest) ProtoMessage() {}

func (x *GetValidIngredientMeasurementUnitsByMeasurementUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[208]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientMeasurementUnitsByMeasurementUnitRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientMeasurementUnitsByMeasurementUnitRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{208}
}

func (x *GetValidIngredientMeasurementUnitsByMeasurementUnitRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidIngredientMeasurementUnitsByMeasurementUnitRequest) GetValidMeasurementUnitID() string {
	if x != nil {
		return x.ValidMeasurementUnitID
	}
	return ""
}

type ArchiveHouseholdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HouseholdID   string                 `json:"householdID,omitempty" protobuf:"bytes,1,opt,name=householdID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveHouseholdRequest) Reset() {
	*x = ArchiveHouseholdRequest{}
	mi := &file_messages_proto_msgTypes[209]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveHouseholdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveHouseholdRequest) ProtoMessage() {}

func (x *ArchiveHouseholdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[209]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveHouseholdRequest.ProtoReflect.Descriptor instead.
func (*ArchiveHouseholdRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{209}
}

func (x *ArchiveHouseholdRequest) GetHouseholdID() string {
	if x != nil {
		return x.HouseholdID
	}
	return ""
}

type GetValidPreparationVesselsByVesselRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty"        protobuf:"bytes,1,opt,name=filter,proto3"`
	ValidVesselID string                 `json:"validVesselID,omitempty" protobuf:"bytes,2,opt,name=validVesselID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidPreparationVesselsByVesselRequest) Reset() {
	*x = GetValidPreparationVesselsByVesselRequest{}
	mi := &file_messages_proto_msgTypes[210]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationVesselsByVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationVesselsByVesselRequest) ProtoMessage() {}

func (x *GetValidPreparationVesselsByVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[210]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationVesselsByVesselRequest.ProtoReflect.Descriptor instead.
func (*GetValidPreparationVesselsByVesselRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{210}
}

func (x *GetValidPreparationVesselsByVesselRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidPreparationVesselsByVesselRequest) GetValidVesselID() string {
	if x != nil {
		return x.ValidVesselID
	}
	return ""
}

type ArchiveValidIngredientStateRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientStateID string                 `json:"validIngredientStateID,omitempty" protobuf:"bytes,1,opt,name=validIngredientStateID,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ArchiveValidIngredientStateRequest) Reset() {
	*x = ArchiveValidIngredientStateRequest{}
	mi := &file_messages_proto_msgTypes[211]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidIngredientStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidIngredientStateRequest) ProtoMessage() {}

func (x *ArchiveValidIngredientStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[211]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidIngredientStateRequest.ProtoReflect.Descriptor instead.
func (*ArchiveValidIngredientStateRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{211}
}

func (x *ArchiveValidIngredientStateRequest) GetValidIngredientStateID() string {
	if x != nil {
		return x.ValidIngredientStateID
	}
	return ""
}

type GetWebhooksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWebhooksRequest) Reset() {
	*x = GetWebhooksRequest{}
	mi := &file_messages_proto_msgTypes[212]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWebhooksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWebhooksRequest) ProtoMessage() {}

func (x *GetWebhooksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[212]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWebhooksRequest.ProtoReflect.Descriptor instead.
func (*GetWebhooksRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{212}
}

func (x *GetWebhooksRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetAuditLogEntriesForUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAuditLogEntriesForUserRequest) Reset() {
	*x = GetAuditLogEntriesForUserRequest{}
	mi := &file_messages_proto_msgTypes[213]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAuditLogEntriesForUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuditLogEntriesForUserRequest) ProtoMessage() {}

func (x *GetAuditLogEntriesForUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[213]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuditLogEntriesForUserRequest.ProtoReflect.Descriptor instead.
func (*GetAuditLogEntriesForUserRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{213}
}

func (x *GetAuditLogEntriesForUserRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ArchiveRecipeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecipeID      string                 `json:"recipeID,omitempty" protobuf:"bytes,1,opt,name=recipeID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveRecipeRequest) Reset() {
	*x = ArchiveRecipeRequest{}
	mi := &file_messages_proto_msgTypes[214]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipeRequest) ProtoMessage() {}

func (x *ArchiveRecipeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[214]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipeRequest.ProtoReflect.Descriptor instead.
func (*ArchiveRecipeRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{214}
}

func (x *ArchiveRecipeRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

type GetRecipesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipesRequest) Reset() {
	*x = GetRecipesRequest{}
	mi := &file_messages_proto_msgTypes[215]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipesRequest) ProtoMessage() {}

func (x *GetRecipesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[215]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipesRequest.ProtoReflect.Descriptor instead.
func (*GetRecipesRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{215}
}

func (x *GetRecipesRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ArchiveValidPreparationRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ValidPreparationID string                 `json:"validPreparationID,omitempty" protobuf:"bytes,1,opt,name=validPreparationID,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ArchiveValidPreparationRequest) Reset() {
	*x = ArchiveValidPreparationRequest{}
	mi := &file_messages_proto_msgTypes[216]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidPreparationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidPreparationRequest) ProtoMessage() {}

func (x *ArchiveValidPreparationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[216]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidPreparationRequest.ProtoReflect.Descriptor instead.
func (*ArchiveValidPreparationRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{216}
}

func (x *ArchiveValidPreparationRequest) GetValidPreparationID() string {
	if x != nil {
		return x.ValidPreparationID
	}
	return ""
}

type UpdateValidPreparationRequest struct {
	state              protoimpl.MessageState              `protogen:"open.v1"`
	ValidPreparationID string                              `json:"validPreparationID,omitempty" protobuf:"bytes,1,opt,name=validPreparationID,proto3"`
	Input              *ValidPreparationUpdateRequestInput `json:"input,omitempty"              protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpdateValidPreparationRequest) Reset() {
	*x = UpdateValidPreparationRequest{}
	mi := &file_messages_proto_msgTypes[217]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidPreparationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidPreparationRequest) ProtoMessage() {}

func (x *UpdateValidPreparationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[217]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidPreparationRequest.ProtoReflect.Descriptor instead.
func (*UpdateValidPreparationRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{217}
}

func (x *UpdateValidPreparationRequest) GetValidPreparationID() string {
	if x != nil {
		return x.ValidPreparationID
	}
	return ""
}

func (x *UpdateValidPreparationRequest) GetInput() *ValidPreparationUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateMealPlanRequest struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	MealPlanID    string                      `json:"mealPlanID,omitempty" protobuf:"bytes,1,opt,name=mealPlanID,proto3"`
	Input         *MealPlanUpdateRequestInput `json:"input,omitempty"      protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMealPlanRequest) Reset() {
	*x = UpdateMealPlanRequest{}
	mi := &file_messages_proto_msgTypes[218]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMealPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMealPlanRequest) ProtoMessage() {}

func (x *UpdateMealPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[218]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMealPlanRequest.ProtoReflect.Descriptor instead.
func (*UpdateMealPlanRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{218}
}

func (x *UpdateMealPlanRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *UpdateMealPlanRequest) GetInput() *MealPlanUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type SearchValidIngredientsByPreparationRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Filter             *QueryFilter           `json:"filter,omitempty"             protobuf:"bytes,1,opt,name=filter,proto3"`
	Q                  string                 `json:"q,omitempty"                  protobuf:"bytes,2,opt,name=q,proto3"`
	ValidPreparationID string                 `json:"validPreparationID,omitempty" protobuf:"bytes,3,opt,name=validPreparationID,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SearchValidIngredientsByPreparationRequest) Reset() {
	*x = SearchValidIngredientsByPreparationRequest{}
	mi := &file_messages_proto_msgTypes[219]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchValidIngredientsByPreparationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchValidIngredientsByPreparationRequest) ProtoMessage() {}

func (x *SearchValidIngredientsByPreparationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[219]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchValidIngredientsByPreparationRequest.ProtoReflect.Descriptor instead.
func (*SearchValidIngredientsByPreparationRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{219}
}

func (x *SearchValidIngredientsByPreparationRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchValidIngredientsByPreparationRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchValidIngredientsByPreparationRequest) GetValidPreparationID() string {
	if x != nil {
		return x.ValidPreparationID
	}
	return ""
}

type SearchForValidVesselsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	Q             string                 `json:"q,omitempty"      protobuf:"bytes,2,opt,name=q,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForValidVesselsRequest) Reset() {
	*x = SearchForValidVesselsRequest{}
	mi := &file_messages_proto_msgTypes[220]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForValidVesselsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForValidVesselsRequest) ProtoMessage() {}

func (x *SearchForValidVesselsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[220]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForValidVesselsRequest.ProtoReflect.Descriptor instead.
func (*SearchForValidVesselsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{220}
}

func (x *SearchForValidVesselsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForValidVesselsRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

type ArchiveMealPlanOptionRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	MealPlanID       string                 `json:"mealPlanID,omitempty"       protobuf:"bytes,1,opt,name=mealPlanID,proto3"`
	MealPlanEventID  string                 `json:"mealPlanEventID,omitempty"  protobuf:"bytes,2,opt,name=mealPlanEventID,proto3"`
	MealPlanOptionID string                 `json:"mealPlanOptionID,omitempty" protobuf:"bytes,3,opt,name=mealPlanOptionID,proto3"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ArchiveMealPlanOptionRequest) Reset() {
	*x = ArchiveMealPlanOptionRequest{}
	mi := &file_messages_proto_msgTypes[221]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveMealPlanOptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveMealPlanOptionRequest) ProtoMessage() {}

func (x *ArchiveMealPlanOptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[221]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveMealPlanOptionRequest.ProtoReflect.Descriptor instead.
func (*ArchiveMealPlanOptionRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{221}
}

func (x *ArchiveMealPlanOptionRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *ArchiveMealPlanOptionRequest) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

func (x *ArchiveMealPlanOptionRequest) GetMealPlanOptionID() string {
	if x != nil {
		return x.MealPlanOptionID
	}
	return ""
}

type ArchiveWebhookTriggerEventRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	WebhookID             string                 `json:"webhookID,omitempty"             protobuf:"bytes,1,opt,name=webhookID,proto3"`
	WebhookTriggerEventID string                 `json:"webhookTriggerEventID,omitempty" protobuf:"bytes,2,opt,name=webhookTriggerEventID,proto3"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ArchiveWebhookTriggerEventRequest) Reset() {
	*x = ArchiveWebhookTriggerEventRequest{}
	mi := &file_messages_proto_msgTypes[222]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveWebhookTriggerEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveWebhookTriggerEventRequest) ProtoMessage() {}

func (x *ArchiveWebhookTriggerEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[222]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveWebhookTriggerEventRequest.ProtoReflect.Descriptor instead.
func (*ArchiveWebhookTriggerEventRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{222}
}

func (x *ArchiveWebhookTriggerEventRequest) GetWebhookID() string {
	if x != nil {
		return x.WebhookID
	}
	return ""
}

func (x *ArchiveWebhookTriggerEventRequest) GetWebhookTriggerEventID() string {
	if x != nil {
		return x.WebhookTriggerEventID
	}
	return ""
}

type GetUserIngredientPreferencesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserIngredientPreferencesRequest) Reset() {
	*x = GetUserIngredientPreferencesRequest{}
	mi := &file_messages_proto_msgTypes[223]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserIngredientPreferencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserIngredientPreferencesRequest) ProtoMessage() {}

func (x *GetUserIngredientPreferencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[223]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserIngredientPreferencesRequest.ProtoReflect.Descriptor instead.
func (*GetUserIngredientPreferencesRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{223}
}

func (x *GetUserIngredientPreferencesRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetHouseholdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HouseholdID   string                 `json:"householdID,omitempty" protobuf:"bytes,1,opt,name=householdID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHouseholdRequest) Reset() {
	*x = GetHouseholdRequest{}
	mi := &file_messages_proto_msgTypes[224]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHouseholdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHouseholdRequest) ProtoMessage() {}

func (x *GetHouseholdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[224]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHouseholdRequest.ProtoReflect.Descriptor instead.
func (*GetHouseholdRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{224}
}

func (x *GetHouseholdRequest) GetHouseholdID() string {
	if x != nil {
		return x.HouseholdID
	}
	return ""
}

type UpdateValidMeasurementUnitRequest struct {
	state                  protoimpl.MessageState                  `protogen:"open.v1"`
	ValidMeasurementUnitID string                                  `json:"validMeasurementUnitID,omitempty" protobuf:"bytes,1,opt,name=validMeasurementUnitID,proto3"`
	Input                  *ValidMeasurementUnitUpdateRequestInput `json:"input,omitempty"                  protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateValidMeasurementUnitRequest) Reset() {
	*x = UpdateValidMeasurementUnitRequest{}
	mi := &file_messages_proto_msgTypes[225]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidMeasurementUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidMeasurementUnitRequest) ProtoMessage() {}

func (x *UpdateValidMeasurementUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[225]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidMeasurementUnitRequest.ProtoReflect.Descriptor instead.
func (*UpdateValidMeasurementUnitRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{225}
}

func (x *UpdateValidMeasurementUnitRequest) GetValidMeasurementUnitID() string {
	if x != nil {
		return x.ValidMeasurementUnitID
	}
	return ""
}

func (x *UpdateValidMeasurementUnitRequest) GetInput() *ValidMeasurementUnitUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type GetValidIngredientStateRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientStateID string                 `json:"validIngredientStateID,omitempty" protobuf:"bytes,1,opt,name=validIngredientStateID,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetValidIngredientStateRequest) Reset() {
	*x = GetValidIngredientStateRequest{}
	mi := &file_messages_proto_msgTypes[226]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientStateRequest) ProtoMessage() {}

func (x *GetValidIngredientStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[226]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientStateRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientStateRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{226}
}

func (x *GetValidIngredientStateRequest) GetValidIngredientStateID() string {
	if x != nil {
		return x.ValidIngredientStateID
	}
	return ""
}

type GetRecipeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecipeID      string                 `json:"recipeID,omitempty" protobuf:"bytes,1,opt,name=recipeID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeRequest) Reset() {
	*x = GetRecipeRequest{}
	mi := &file_messages_proto_msgTypes[227]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeRequest) ProtoMessage() {}

func (x *GetRecipeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[227]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{227}
}

func (x *GetRecipeRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

type GetAuditLogEntriesForHouseholdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAuditLogEntriesForHouseholdRequest) Reset() {
	*x = GetAuditLogEntriesForHouseholdRequest{}
	mi := &file_messages_proto_msgTypes[228]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAuditLogEntriesForHouseholdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuditLogEntriesForHouseholdRequest) ProtoMessage() {}

func (x *GetAuditLogEntriesForHouseholdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[228]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuditLogEntriesForHouseholdRequest.ProtoReflect.Descriptor instead.
func (*GetAuditLogEntriesForHouseholdRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{228}
}

func (x *GetAuditLogEntriesForHouseholdRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetValidIngredientPreparationsByPreparationRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Filter             *QueryFilter           `json:"filter,omitempty"             protobuf:"bytes,1,opt,name=filter,proto3"`
	ValidPreparationID string                 `json:"validPreparationID,omitempty" protobuf:"bytes,2,opt,name=validPreparationID,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetValidIngredientPreparationsByPreparationRequest) Reset() {
	*x = GetValidIngredientPreparationsByPreparationRequest{}
	mi := &file_messages_proto_msgTypes[229]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientPreparationsByPreparationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientPreparationsByPreparationRequest) ProtoMessage() {}

func (x *GetValidIngredientPreparationsByPreparationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[229]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientPreparationsByPreparationRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientPreparationsByPreparationRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{229}
}

func (x *GetValidIngredientPreparationsByPreparationRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidIngredientPreparationsByPreparationRequest) GetValidPreparationID() string {
	if x != nil {
		return x.ValidPreparationID
	}
	return ""
}

type GetMealPlanOptionRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	MealPlanID       string                 `json:"mealPlanID,omitempty"       protobuf:"bytes,1,opt,name=mealPlanID,proto3"`
	MealPlanEventID  string                 `json:"mealPlanEventID,omitempty"  protobuf:"bytes,2,opt,name=mealPlanEventID,proto3"`
	MealPlanOptionID string                 `json:"mealPlanOptionID,omitempty" protobuf:"bytes,3,opt,name=mealPlanOptionID,proto3"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetMealPlanOptionRequest) Reset() {
	*x = GetMealPlanOptionRequest{}
	mi := &file_messages_proto_msgTypes[230]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanOptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanOptionRequest) ProtoMessage() {}

func (x *GetMealPlanOptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[230]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanOptionRequest.ProtoReflect.Descriptor instead.
func (*GetMealPlanOptionRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{230}
}

func (x *GetMealPlanOptionRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *GetMealPlanOptionRequest) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

func (x *GetMealPlanOptionRequest) GetMealPlanOptionID() string {
	if x != nil {
		return x.MealPlanOptionID
	}
	return ""
}

type UpdateMealPlanOptionVoteRequest struct {
	state                protoimpl.MessageState                `protogen:"open.v1"`
	MealPlanID           string                                `json:"mealPlanID,omitempty"           protobuf:"bytes,1,opt,name=mealPlanID,proto3"`
	MealPlanEventID      string                                `json:"mealPlanEventID,omitempty"      protobuf:"bytes,2,opt,name=mealPlanEventID,proto3"`
	MealPlanOptionID     string                                `json:"mealPlanOptionID,omitempty"     protobuf:"bytes,3,opt,name=mealPlanOptionID,proto3"`
	MealPlanOptionVoteID string                                `json:"mealPlanOptionVoteID,omitempty" protobuf:"bytes,4,opt,name=mealPlanOptionVoteID,proto3"`
	Input                *MealPlanOptionVoteUpdateRequestInput `json:"input,omitempty"                protobuf:"bytes,5,opt,name=input,proto3"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *UpdateMealPlanOptionVoteRequest) Reset() {
	*x = UpdateMealPlanOptionVoteRequest{}
	mi := &file_messages_proto_msgTypes[231]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMealPlanOptionVoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMealPlanOptionVoteRequest) ProtoMessage() {}

func (x *UpdateMealPlanOptionVoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[231]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMealPlanOptionVoteRequest.ProtoReflect.Descriptor instead.
func (*UpdateMealPlanOptionVoteRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{231}
}

func (x *UpdateMealPlanOptionVoteRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *UpdateMealPlanOptionVoteRequest) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

func (x *UpdateMealPlanOptionVoteRequest) GetMealPlanOptionID() string {
	if x != nil {
		return x.MealPlanOptionID
	}
	return ""
}

func (x *UpdateMealPlanOptionVoteRequest) GetMealPlanOptionVoteID() string {
	if x != nil {
		return x.MealPlanOptionVoteID
	}
	return ""
}

func (x *UpdateMealPlanOptionVoteRequest) GetInput() *MealPlanOptionVoteUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type ArchiveUserIngredientPreferenceRequest struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	UserIngredientPreferenceID string                 `json:"userIngredientPreferenceID,omitempty" protobuf:"bytes,1,opt,name=userIngredientPreferenceID,proto3"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *ArchiveUserIngredientPreferenceRequest) Reset() {
	*x = ArchiveUserIngredientPreferenceRequest{}
	mi := &file_messages_proto_msgTypes[232]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveUserIngredientPreferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveUserIngredientPreferenceRequest) ProtoMessage() {}

func (x *ArchiveUserIngredientPreferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[232]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveUserIngredientPreferenceRequest.ProtoReflect.Descriptor instead.
func (*ArchiveUserIngredientPreferenceRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{232}
}

func (x *ArchiveUserIngredientPreferenceRequest) GetUserIngredientPreferenceID() string {
	if x != nil {
		return x.UserIngredientPreferenceID
	}
	return ""
}

type GetOAuth2ClientsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOAuth2ClientsRequest) Reset() {
	*x = GetOAuth2ClientsRequest{}
	mi := &file_messages_proto_msgTypes[233]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOAuth2ClientsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOAuth2ClientsRequest) ProtoMessage() {}

func (x *GetOAuth2ClientsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[233]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOAuth2ClientsRequest.ProtoReflect.Descriptor instead.
func (*GetOAuth2ClientsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{233}
}

func (x *GetOAuth2ClientsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetValidPreparationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidPreparationsRequest) Reset() {
	*x = GetValidPreparationsRequest{}
	mi := &file_messages_proto_msgTypes[234]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationsRequest) ProtoMessage() {}

func (x *GetValidPreparationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[234]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationsRequest.ProtoReflect.Descriptor instead.
func (*GetValidPreparationsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{234}
}

func (x *GetValidPreparationsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type SearchForMealsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	Q             string                 `json:"q,omitempty"      protobuf:"bytes,2,opt,name=q,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForMealsRequest) Reset() {
	*x = SearchForMealsRequest{}
	mi := &file_messages_proto_msgTypes[235]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForMealsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForMealsRequest) ProtoMessage() {}

func (x *SearchForMealsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[235]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForMealsRequest.ProtoReflect.Descriptor instead.
func (*SearchForMealsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{235}
}

func (x *SearchForMealsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForMealsRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

type ArchiveValidMeasurementUnitConversionRequest struct {
	state                            protoimpl.MessageState `protogen:"open.v1"`
	ValidMeasurementUnitConversionID string                 `json:"validMeasurementUnitConversionID,omitempty" protobuf:"bytes,1,opt,name=validMeasurementUnitConversionID,proto3"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *ArchiveValidMeasurementUnitConversionRequest) Reset() {
	*x = ArchiveValidMeasurementUnitConversionRequest{}
	mi := &file_messages_proto_msgTypes[236]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidMeasurementUnitConversionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidMeasurementUnitConversionRequest) ProtoMessage() {}

func (x *ArchiveValidMeasurementUnitConversionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[236]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidMeasurementUnitConversionRequest.ProtoReflect.Descriptor instead.
func (*ArchiveValidMeasurementUnitConversionRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{236}
}

func (x *ArchiveValidMeasurementUnitConversionRequest) GetValidMeasurementUnitConversionID() string {
	if x != nil {
		return x.ValidMeasurementUnitConversionID
	}
	return ""
}

type GetMealPlanGroceryListItemsForMealPlanRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty"     protobuf:"bytes,1,opt,name=filter,proto3"`
	MealPlanID    string                 `json:"mealPlanID,omitempty" protobuf:"bytes,2,opt,name=mealPlanID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealPlanGroceryListItemsForMealPlanRequest) Reset() {
	*x = GetMealPlanGroceryListItemsForMealPlanRequest{}
	mi := &file_messages_proto_msgTypes[237]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanGroceryListItemsForMealPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanGroceryListItemsForMealPlanRequest) ProtoMessage() {}

func (x *GetMealPlanGroceryListItemsForMealPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[237]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanGroceryListItemsForMealPlanRequest.ProtoReflect.Descriptor instead.
func (*GetMealPlanGroceryListItemsForMealPlanRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{237}
}

func (x *GetMealPlanGroceryListItemsForMealPlanRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetMealPlanGroceryListItemsForMealPlanRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

type GetValidIngredientGroupsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientGroupsRequest) Reset() {
	*x = GetValidIngredientGroupsRequest{}
	mi := &file_messages_proto_msgTypes[238]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientGroupsRequest) ProtoMessage() {}

func (x *GetValidIngredientGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[238]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientGroupsRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientGroupsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{238}
}

func (x *GetValidIngredientGroupsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetMermaidDiagramForRecipeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecipeID      string                 `json:"recipeID,omitempty" protobuf:"bytes,1,opt,name=recipeID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMermaidDiagramForRecipeRequest) Reset() {
	*x = GetMermaidDiagramForRecipeRequest{}
	mi := &file_messages_proto_msgTypes[239]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMermaidDiagramForRecipeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMermaidDiagramForRecipeRequest) ProtoMessage() {}

func (x *GetMermaidDiagramForRecipeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[239]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMermaidDiagramForRecipeRequest.ProtoReflect.Descriptor instead.
func (*GetMermaidDiagramForRecipeRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{239}
}

func (x *GetMermaidDiagramForRecipeRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

type GetValidIngredientRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientID string                 `json:"validIngredientID,omitempty" protobuf:"bytes,1,opt,name=validIngredientID,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetValidIngredientRequest) Reset() {
	*x = GetValidIngredientRequest{}
	mi := &file_messages_proto_msgTypes[240]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientRequest) ProtoMessage() {}

func (x *GetValidIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[240]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{240}
}

func (x *GetValidIngredientRequest) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

type ArchiveMealPlanGroceryListItemRequest struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	MealPlanID                string                 `json:"mealPlanID,omitempty"                protobuf:"bytes,1,opt,name=mealPlanID,proto3"`
	MealPlanGroceryListItemID string                 `json:"mealPlanGroceryListItemID,omitempty" protobuf:"bytes,2,opt,name=mealPlanGroceryListItemID,proto3"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *ArchiveMealPlanGroceryListItemRequest) Reset() {
	*x = ArchiveMealPlanGroceryListItemRequest{}
	mi := &file_messages_proto_msgTypes[241]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveMealPlanGroceryListItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveMealPlanGroceryListItemRequest) ProtoMessage() {}

func (x *ArchiveMealPlanGroceryListItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[241]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveMealPlanGroceryListItemRequest.ProtoReflect.Descriptor instead.
func (*ArchiveMealPlanGroceryListItemRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{241}
}

func (x *ArchiveMealPlanGroceryListItemRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *ArchiveMealPlanGroceryListItemRequest) GetMealPlanGroceryListItemID() string {
	if x != nil {
		return x.MealPlanGroceryListItemID
	}
	return ""
}

type GetValidPreparationInstrumentRequest struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	ValidPreparationInstrumentID string                 `json:"validPreparationInstrumentID,omitempty" protobuf:"bytes,1,opt,name=validPreparationInstrumentID,proto3"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *GetValidPreparationInstrumentRequest) Reset() {
	*x = GetValidPreparationInstrumentRequest{}
	mi := &file_messages_proto_msgTypes[242]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationInstrumentRequest) ProtoMessage() {}

func (x *GetValidPreparationInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[242]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationInstrumentRequest.ProtoReflect.Descriptor instead.
func (*GetValidPreparationInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{242}
}

func (x *GetValidPreparationInstrumentRequest) GetValidPreparationInstrumentID() string {
	if x != nil {
		return x.ValidPreparationInstrumentID
	}
	return ""
}

type GetRecipeStepCompletionConditionRequest struct {
	state                           protoimpl.MessageState `protogen:"open.v1"`
	RecipeID                        string                 `json:"recipeID,omitempty"                        protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipeStepID                    string                 `json:"recipeStepID,omitempty"                    protobuf:"bytes,2,opt,name=recipeStepID,proto3"`
	RecipeStepCompletionConditionID string                 `json:"recipeStepCompletionConditionID,omitempty" protobuf:"bytes,3,opt,name=recipeStepCompletionConditionID,proto3"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *GetRecipeStepCompletionConditionRequest) Reset() {
	*x = GetRecipeStepCompletionConditionRequest{}
	mi := &file_messages_proto_msgTypes[243]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepCompletionConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepCompletionConditionRequest) ProtoMessage() {}

func (x *GetRecipeStepCompletionConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[243]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepCompletionConditionRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeStepCompletionConditionRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{243}
}

func (x *GetRecipeStepCompletionConditionRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *GetRecipeStepCompletionConditionRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *GetRecipeStepCompletionConditionRequest) GetRecipeStepCompletionConditionID() string {
	if x != nil {
		return x.RecipeStepCompletionConditionID
	}
	return ""
}

type GetValidMeasurementUnitConversionsFromUnitRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Filter                 *QueryFilter           `json:"filter,omitempty"                 protobuf:"bytes,1,opt,name=filter,proto3"`
	ValidMeasurementUnitID string                 `json:"validMeasurementUnitID,omitempty" protobuf:"bytes,2,opt,name=validMeasurementUnitID,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetValidMeasurementUnitConversionsFromUnitRequest) Reset() {
	*x = GetValidMeasurementUnitConversionsFromUnitRequest{}
	mi := &file_messages_proto_msgTypes[244]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidMeasurementUnitConversionsFromUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidMeasurementUnitConversionsFromUnitRequest) ProtoMessage() {}

func (x *GetValidMeasurementUnitConversionsFromUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[244]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidMeasurementUnitConversionsFromUnitRequest.ProtoReflect.Descriptor instead.
func (*GetValidMeasurementUnitConversionsFromUnitRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{244}
}

func (x *GetValidMeasurementUnitConversionsFromUnitRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidMeasurementUnitConversionsFromUnitRequest) GetValidMeasurementUnitID() string {
	if x != nil {
		return x.ValidMeasurementUnitID
	}
	return ""
}

type ArchiveMealPlanEventRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	MealPlanID      string                 `json:"mealPlanID,omitempty"      protobuf:"bytes,1,opt,name=mealPlanID,proto3"`
	MealPlanEventID string                 `json:"mealPlanEventID,omitempty" protobuf:"bytes,2,opt,name=mealPlanEventID,proto3"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ArchiveMealPlanEventRequest) Reset() {
	*x = ArchiveMealPlanEventRequest{}
	mi := &file_messages_proto_msgTypes[245]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveMealPlanEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveMealPlanEventRequest) ProtoMessage() {}

func (x *ArchiveMealPlanEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[245]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveMealPlanEventRequest.ProtoReflect.Descriptor instead.
func (*ArchiveMealPlanEventRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{245}
}

func (x *ArchiveMealPlanEventRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *ArchiveMealPlanEventRequest) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

type UpdateUserIngredientPreferenceRequest struct {
	state                      protoimpl.MessageState                      `protogen:"open.v1"`
	UserIngredientPreferenceID string                                      `json:"userIngredientPreferenceID,omitempty" protobuf:"bytes,1,opt,name=userIngredientPreferenceID,proto3"`
	Input                      *UserIngredientPreferenceUpdateRequestInput `json:"input,omitempty"                      protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *UpdateUserIngredientPreferenceRequest) Reset() {
	*x = UpdateUserIngredientPreferenceRequest{}
	mi := &file_messages_proto_msgTypes[246]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserIngredientPreferenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserIngredientPreferenceRequest) ProtoMessage() {}

func (x *UpdateUserIngredientPreferenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[246]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserIngredientPreferenceRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserIngredientPreferenceRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{246}
}

func (x *UpdateUserIngredientPreferenceRequest) GetUserIngredientPreferenceID() string {
	if x != nil {
		return x.UserIngredientPreferenceID
	}
	return ""
}

func (x *UpdateUserIngredientPreferenceRequest) GetInput() *UserIngredientPreferenceUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type FinalizeMealPlanRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MealPlanID    string                 `json:"mealPlanID,omitempty" protobuf:"bytes,1,opt,name=mealPlanID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinalizeMealPlanRequest) Reset() {
	*x = FinalizeMealPlanRequest{}
	mi := &file_messages_proto_msgTypes[247]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinalizeMealPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinalizeMealPlanRequest) ProtoMessage() {}

func (x *FinalizeMealPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[247]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinalizeMealPlanRequest.ProtoReflect.Descriptor instead.
func (*FinalizeMealPlanRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{247}
}

func (x *FinalizeMealPlanRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

type GetValidIngredientPreparationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientPreparationsRequest) Reset() {
	*x = GetValidIngredientPreparationsRequest{}
	mi := &file_messages_proto_msgTypes[248]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientPreparationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientPreparationsRequest) ProtoMessage() {}

func (x *GetValidIngredientPreparationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[248]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientPreparationsRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientPreparationsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{248}
}

func (x *GetValidIngredientPreparationsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type UpdateRecipeStepIngredientRequest struct {
	state                  protoimpl.MessageState                  `protogen:"open.v1"`
	RecipeID               string                                  `json:"recipeID,omitempty"               protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipeStepID           string                                  `json:"recipeStepID,omitempty"           protobuf:"bytes,2,opt,name=recipeStepID,proto3"`
	RecipeStepIngredientID string                                  `json:"recipeStepIngredientID,omitempty" protobuf:"bytes,3,opt,name=recipeStepIngredientID,proto3"`
	Input                  *RecipeStepIngredientUpdateRequestInput `json:"input,omitempty"                  protobuf:"bytes,4,opt,name=input,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateRecipeStepIngredientRequest) Reset() {
	*x = UpdateRecipeStepIngredientRequest{}
	mi := &file_messages_proto_msgTypes[249]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipeStepIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeStepIngredientRequest) ProtoMessage() {}

func (x *UpdateRecipeStepIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[249]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeStepIngredientRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecipeStepIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{249}
}

func (x *UpdateRecipeStepIngredientRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *UpdateRecipeStepIngredientRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *UpdateRecipeStepIngredientRequest) GetRecipeStepIngredientID() string {
	if x != nil {
		return x.RecipeStepIngredientID
	}
	return ""
}

func (x *UpdateRecipeStepIngredientRequest) GetInput() *RecipeStepIngredientUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type CreateRecipeStepProductRequest struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	RecipeID      string                                 `json:"recipeID,omitempty"     protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipeStepID  string                                 `json:"recipeStepID,omitempty" protobuf:"bytes,2,opt,name=recipeStepID,proto3"`
	Input         *RecipeStepProductCreationRequestInput `json:"input,omitempty"        protobuf:"bytes,3,opt,name=input,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipeStepProductRequest) Reset() {
	*x = CreateRecipeStepProductRequest{}
	mi := &file_messages_proto_msgTypes[250]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipeStepProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeStepProductRequest) ProtoMessage() {}

func (x *CreateRecipeStepProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[250]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeStepProductRequest.ProtoReflect.Descriptor instead.
func (*CreateRecipeStepProductRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{250}
}

func (x *CreateRecipeStepProductRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *CreateRecipeStepProductRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *CreateRecipeStepProductRequest) GetInput() *RecipeStepProductCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type CreateMealPlanOptionVoteRequest struct {
	state           protoimpl.MessageState                  `protogen:"open.v1"`
	Filter          *QueryFilter                            `json:"filter,omitempty"          protobuf:"bytes,1,opt,name=filter,proto3"`
	MealPlanID      string                                  `json:"mealPlanID,omitempty"      protobuf:"bytes,2,opt,name=mealPlanID,proto3"`
	MealPlanEventID string                                  `json:"mealPlanEventID,omitempty" protobuf:"bytes,3,opt,name=mealPlanEventID,proto3"`
	Input           *MealPlanOptionVoteCreationRequestInput `json:"input,omitempty"           protobuf:"bytes,4,opt,name=input,proto3"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreateMealPlanOptionVoteRequest) Reset() {
	*x = CreateMealPlanOptionVoteRequest{}
	mi := &file_messages_proto_msgTypes[251]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMealPlanOptionVoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMealPlanOptionVoteRequest) ProtoMessage() {}

func (x *CreateMealPlanOptionVoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[251]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMealPlanOptionVoteRequest.ProtoReflect.Descriptor instead.
func (*CreateMealPlanOptionVoteRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{251}
}

func (x *CreateMealPlanOptionVoteRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *CreateMealPlanOptionVoteRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *CreateMealPlanOptionVoteRequest) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

func (x *CreateMealPlanOptionVoteRequest) GetInput() *MealPlanOptionVoteCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type GetSentHouseholdInvitationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSentHouseholdInvitationsRequest) Reset() {
	*x = GetSentHouseholdInvitationsRequest{}
	mi := &file_messages_proto_msgTypes[252]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSentHouseholdInvitationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSentHouseholdInvitationsRequest) ProtoMessage() {}

func (x *GetSentHouseholdInvitationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[252]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSentHouseholdInvitationsRequest.ProtoReflect.Descriptor instead.
func (*GetSentHouseholdInvitationsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{252}
}

func (x *GetSentHouseholdInvitationsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ArchiveServiceSettingRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ServiceSettingID string                 `json:"serviceSettingID,omitempty" protobuf:"bytes,1,opt,name=serviceSettingID,proto3"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ArchiveServiceSettingRequest) Reset() {
	*x = ArchiveServiceSettingRequest{}
	mi := &file_messages_proto_msgTypes[253]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveServiceSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveServiceSettingRequest) ProtoMessage() {}

func (x *ArchiveServiceSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[253]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveServiceSettingRequest.ProtoReflect.Descriptor instead.
func (*ArchiveServiceSettingRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{253}
}

func (x *ArchiveServiceSettingRequest) GetServiceSettingID() string {
	if x != nil {
		return x.ServiceSettingID
	}
	return ""
}

type SearchForUsersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	Q             string                 `json:"q,omitempty"      protobuf:"bytes,2,opt,name=q,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForUsersRequest) Reset() {
	*x = SearchForUsersRequest{}
	mi := &file_messages_proto_msgTypes[254]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForUsersRequest) ProtoMessage() {}

func (x *SearchForUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[254]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForUsersRequest.ProtoReflect.Descriptor instead.
func (*SearchForUsersRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{254}
}

func (x *SearchForUsersRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForUsersRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

type GetValidIngredientGroupRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientGroupID string                 `json:"validIngredientGroupID,omitempty" protobuf:"bytes,1,opt,name=validIngredientGroupID,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetValidIngredientGroupRequest) Reset() {
	*x = GetValidIngredientGroupRequest{}
	mi := &file_messages_proto_msgTypes[255]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientGroupRequest) ProtoMessage() {}

func (x *GetValidIngredientGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[255]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientGroupRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientGroupRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{255}
}

func (x *GetValidIngredientGroupRequest) GetValidIngredientGroupID() string {
	if x != nil {
		return x.ValidIngredientGroupID
	}
	return ""
}

type UpdateValidIngredientGroupRequest struct {
	state                  protoimpl.MessageState                  `protogen:"open.v1"`
	ValidIngredientGroupID string                                  `json:"validIngredientGroupID,omitempty" protobuf:"bytes,1,opt,name=validIngredientGroupID,proto3"`
	Input                  *ValidIngredientGroupUpdateRequestInput `json:"input,omitempty"                  protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateValidIngredientGroupRequest) Reset() {
	*x = UpdateValidIngredientGroupRequest{}
	mi := &file_messages_proto_msgTypes[256]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidIngredientGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidIngredientGroupRequest) ProtoMessage() {}

func (x *UpdateValidIngredientGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[256]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidIngredientGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateValidIngredientGroupRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{256}
}

func (x *UpdateValidIngredientGroupRequest) GetValidIngredientGroupID() string {
	if x != nil {
		return x.ValidIngredientGroupID
	}
	return ""
}

func (x *UpdateValidIngredientGroupRequest) GetInput() *ValidIngredientGroupUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type GetRecipeStepIngredientRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	RecipeID               string                 `json:"recipeID,omitempty"               protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipeStepID           string                 `json:"recipeStepID,omitempty"           protobuf:"bytes,2,opt,name=recipeStepID,proto3"`
	RecipeStepIngredientID string                 `json:"recipeStepIngredientID,omitempty" protobuf:"bytes,3,opt,name=recipeStepIngredientID,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetRecipeStepIngredientRequest) Reset() {
	*x = GetRecipeStepIngredientRequest{}
	mi := &file_messages_proto_msgTypes[257]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepIngredientRequest) ProtoMessage() {}

func (x *GetRecipeStepIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[257]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepIngredientRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeStepIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{257}
}

func (x *GetRecipeStepIngredientRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *GetRecipeStepIngredientRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *GetRecipeStepIngredientRequest) GetRecipeStepIngredientID() string {
	if x != nil {
		return x.RecipeStepIngredientID
	}
	return ""
}

type GetAuditLogEntryByIDRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	AuditLogEntryID string                 `json:"auditLogEntryID,omitempty" protobuf:"bytes,1,opt,name=auditLogEntryID,proto3"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetAuditLogEntryByIDRequest) Reset() {
	*x = GetAuditLogEntryByIDRequest{}
	mi := &file_messages_proto_msgTypes[258]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAuditLogEntryByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAuditLogEntryByIDRequest) ProtoMessage() {}

func (x *GetAuditLogEntryByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[258]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAuditLogEntryByIDRequest.ProtoReflect.Descriptor instead.
func (*GetAuditLogEntryByIDRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{258}
}

func (x *GetAuditLogEntryByIDRequest) GetAuditLogEntryID() string {
	if x != nil {
		return x.AuditLogEntryID
	}
	return ""
}

type UpdateRecipeStepVesselRequest struct {
	state              protoimpl.MessageState              `protogen:"open.v1"`
	RecipeID           string                              `json:"recipeID,omitempty"           protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipeStepID       string                              `json:"recipeStepID,omitempty"       protobuf:"bytes,2,opt,name=recipeStepID,proto3"`
	RecipeStepVesselID string                              `json:"recipeStepVesselID,omitempty" protobuf:"bytes,3,opt,name=recipeStepVesselID,proto3"`
	Input              *RecipeStepVesselUpdateRequestInput `json:"input,omitempty"              protobuf:"bytes,4,opt,name=input,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpdateRecipeStepVesselRequest) Reset() {
	*x = UpdateRecipeStepVesselRequest{}
	mi := &file_messages_proto_msgTypes[259]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipeStepVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeStepVesselRequest) ProtoMessage() {}

func (x *UpdateRecipeStepVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[259]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeStepVesselRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecipeStepVesselRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{259}
}

func (x *UpdateRecipeStepVesselRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *UpdateRecipeStepVesselRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *UpdateRecipeStepVesselRequest) GetRecipeStepVesselID() string {
	if x != nil {
		return x.RecipeStepVesselID
	}
	return ""
}

func (x *UpdateRecipeStepVesselRequest) GetInput() *RecipeStepVesselUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type GetValidInstrumentsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidInstrumentsRequest) Reset() {
	*x = GetValidInstrumentsRequest{}
	mi := &file_messages_proto_msgTypes[260]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidInstrumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidInstrumentsRequest) ProtoMessage() {}

func (x *GetValidInstrumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[260]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidInstrumentsRequest.ProtoReflect.Descriptor instead.
func (*GetValidInstrumentsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{260}
}

func (x *GetValidInstrumentsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetMealPlanTasksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty"     protobuf:"bytes,1,opt,name=filter,proto3"`
	MealPlanID    string                 `json:"mealPlanID,omitempty" protobuf:"bytes,2,opt,name=mealPlanID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealPlanTasksRequest) Reset() {
	*x = GetMealPlanTasksRequest{}
	mi := &file_messages_proto_msgTypes[261]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanTasksRequest) ProtoMessage() {}

func (x *GetMealPlanTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[261]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanTasksRequest.ProtoReflect.Descriptor instead.
func (*GetMealPlanTasksRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{261}
}

func (x *GetMealPlanTasksRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetMealPlanTasksRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

type GetValidIngredientStatesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientStatesRequest) Reset() {
	*x = GetValidIngredientStatesRequest{}
	mi := &file_messages_proto_msgTypes[262]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientStatesRequest) ProtoMessage() {}

func (x *GetValidIngredientStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[262]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientStatesRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientStatesRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{262}
}

func (x *GetValidIngredientStatesRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type UpdateMealPlanEventRequest struct {
	state           protoimpl.MessageState           `protogen:"open.v1"`
	MealPlanID      string                           `json:"mealPlanID,omitempty"      protobuf:"bytes,1,opt,name=mealPlanID,proto3"`
	MealPlanEventID string                           `json:"mealPlanEventID,omitempty" protobuf:"bytes,2,opt,name=mealPlanEventID,proto3"`
	Input           *MealPlanEventUpdateRequestInput `json:"input,omitempty"           protobuf:"bytes,3,opt,name=input,proto3"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateMealPlanEventRequest) Reset() {
	*x = UpdateMealPlanEventRequest{}
	mi := &file_messages_proto_msgTypes[263]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMealPlanEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMealPlanEventRequest) ProtoMessage() {}

func (x *UpdateMealPlanEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[263]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMealPlanEventRequest.ProtoReflect.Descriptor instead.
func (*UpdateMealPlanEventRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{263}
}

func (x *UpdateMealPlanEventRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *UpdateMealPlanEventRequest) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

func (x *UpdateMealPlanEventRequest) GetInput() *MealPlanEventUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type ArchiveRecipeRatingRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	RecipeID       string                 `json:"recipeID,omitempty"       protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipeRatingID string                 `json:"recipeRatingID,omitempty" protobuf:"bytes,2,opt,name=recipeRatingID,proto3"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ArchiveRecipeRatingRequest) Reset() {
	*x = ArchiveRecipeRatingRequest{}
	mi := &file_messages_proto_msgTypes[264]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipeRatingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipeRatingRequest) ProtoMessage() {}

func (x *ArchiveRecipeRatingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[264]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipeRatingRequest.ProtoReflect.Descriptor instead.
func (*ArchiveRecipeRatingRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{264}
}

func (x *ArchiveRecipeRatingRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *ArchiveRecipeRatingRequest) GetRecipeRatingID() string {
	if x != nil {
		return x.RecipeRatingID
	}
	return ""
}

type ArchiveUserMembershipRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HouseholdID   string                 `json:"householdID,omitempty" protobuf:"bytes,1,opt,name=householdID,proto3"`
	UserID        string                 `json:"userID,omitempty"      protobuf:"bytes,2,opt,name=userID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveUserMembershipRequest) Reset() {
	*x = ArchiveUserMembershipRequest{}
	mi := &file_messages_proto_msgTypes[265]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveUserMembershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveUserMembershipRequest) ProtoMessage() {}

func (x *ArchiveUserMembershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[265]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveUserMembershipRequest.ProtoReflect.Descriptor instead.
func (*ArchiveUserMembershipRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{265}
}

func (x *ArchiveUserMembershipRequest) GetHouseholdID() string {
	if x != nil {
		return x.HouseholdID
	}
	return ""
}

func (x *ArchiveUserMembershipRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type ArchiveWebhookRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WebhookID     string                 `json:"webhookID,omitempty" protobuf:"bytes,1,opt,name=webhookID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveWebhookRequest) Reset() {
	*x = ArchiveWebhookRequest{}
	mi := &file_messages_proto_msgTypes[266]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveWebhookRequest) ProtoMessage() {}

func (x *ArchiveWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[266]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveWebhookRequest.ProtoReflect.Descriptor instead.
func (*ArchiveWebhookRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{266}
}

func (x *ArchiveWebhookRequest) GetWebhookID() string {
	if x != nil {
		return x.WebhookID
	}
	return ""
}

type ArchiveUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `json:"userID,omitempty" protobuf:"bytes,1,opt,name=userID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveUserRequest) Reset() {
	*x = ArchiveUserRequest{}
	mi := &file_messages_proto_msgTypes[267]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveUserRequest) ProtoMessage() {}

func (x *ArchiveUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[267]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveUserRequest.ProtoReflect.Descriptor instead.
func (*ArchiveUserRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{267}
}

func (x *ArchiveUserRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type UpdateValidPreparationVesselRequest struct {
	state                    protoimpl.MessageState                    `protogen:"open.v1"`
	ValidPreparationVesselID string                                    `json:"validPreparationVesselID,omitempty" protobuf:"bytes,1,opt,name=validPreparationVesselID,proto3"`
	Input                    *ValidPreparationVesselUpdateRequestInput `json:"input,omitempty"                    protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *UpdateValidPreparationVesselRequest) Reset() {
	*x = UpdateValidPreparationVesselRequest{}
	mi := &file_messages_proto_msgTypes[268]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidPreparationVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidPreparationVesselRequest) ProtoMessage() {}

func (x *UpdateValidPreparationVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[268]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidPreparationVesselRequest.ProtoReflect.Descriptor instead.
func (*UpdateValidPreparationVesselRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{268}
}

func (x *UpdateValidPreparationVesselRequest) GetValidPreparationVesselID() string {
	if x != nil {
		return x.ValidPreparationVesselID
	}
	return ""
}

func (x *UpdateValidPreparationVesselRequest) GetInput() *ValidPreparationVesselUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateMealPlanTaskStatusRequest struct {
	state          protoimpl.MessageState                `protogen:"open.v1"`
	MealPlanID     string                                `json:"mealPlanID,omitempty"     protobuf:"bytes,1,opt,name=mealPlanID,proto3"`
	MealPlanTaskID string                                `json:"mealPlanTaskID,omitempty" protobuf:"bytes,2,opt,name=mealPlanTaskID,proto3"`
	Input          *MealPlanTaskStatusChangeRequestInput `json:"input,omitempty"          protobuf:"bytes,3,opt,name=input,proto3"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateMealPlanTaskStatusRequest) Reset() {
	*x = UpdateMealPlanTaskStatusRequest{}
	mi := &file_messages_proto_msgTypes[269]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMealPlanTaskStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMealPlanTaskStatusRequest) ProtoMessage() {}

func (x *UpdateMealPlanTaskStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[269]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMealPlanTaskStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateMealPlanTaskStatusRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{269}
}

func (x *UpdateMealPlanTaskStatusRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *UpdateMealPlanTaskStatusRequest) GetMealPlanTaskID() string {
	if x != nil {
		return x.MealPlanTaskID
	}
	return ""
}

func (x *UpdateMealPlanTaskStatusRequest) GetInput() *MealPlanTaskStatusChangeRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type GetMealPlanOptionsRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Filter          *QueryFilter           `json:"filter,omitempty"          protobuf:"bytes,1,opt,name=filter,proto3"`
	MealPlanID      string                 `json:"mealPlanID,omitempty"      protobuf:"bytes,2,opt,name=mealPlanID,proto3"`
	MealPlanEventID string                 `json:"mealPlanEventID,omitempty" protobuf:"bytes,3,opt,name=mealPlanEventID,proto3"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetMealPlanOptionsRequest) Reset() {
	*x = GetMealPlanOptionsRequest{}
	mi := &file_messages_proto_msgTypes[270]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanOptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanOptionsRequest) ProtoMessage() {}

func (x *GetMealPlanOptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[270]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanOptionsRequest.ProtoReflect.Descriptor instead.
func (*GetMealPlanOptionsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{270}
}

func (x *GetMealPlanOptionsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetMealPlanOptionsRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *GetMealPlanOptionsRequest) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

type SearchForRecipesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	Q             string                 `json:"q,omitempty"      protobuf:"bytes,2,opt,name=q,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForRecipesRequest) Reset() {
	*x = SearchForRecipesRequest{}
	mi := &file_messages_proto_msgTypes[271]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForRecipesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForRecipesRequest) ProtoMessage() {}

func (x *SearchForRecipesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[271]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForRecipesRequest.ProtoReflect.Descriptor instead.
func (*SearchForRecipesRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{271}
}

func (x *SearchForRecipesRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForRecipesRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

type ArchiveValidIngredientGroupRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientGroupID string                 `json:"validIngredientGroupID,omitempty" protobuf:"bytes,1,opt,name=validIngredientGroupID,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ArchiveValidIngredientGroupRequest) Reset() {
	*x = ArchiveValidIngredientGroupRequest{}
	mi := &file_messages_proto_msgTypes[272]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidIngredientGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidIngredientGroupRequest) ProtoMessage() {}

func (x *ArchiveValidIngredientGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[272]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidIngredientGroupRequest.ProtoReflect.Descriptor instead.
func (*ArchiveValidIngredientGroupRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{272}
}

func (x *ArchiveValidIngredientGroupRequest) GetValidIngredientGroupID() string {
	if x != nil {
		return x.ValidIngredientGroupID
	}
	return ""
}

type GetValidPreparationInstrumentsByInstrumentRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Filter            *QueryFilter           `json:"filter,omitempty"            protobuf:"bytes,1,opt,name=filter,proto3"`
	ValidInstrumentID string                 `json:"validInstrumentID,omitempty" protobuf:"bytes,2,opt,name=validInstrumentID,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetValidPreparationInstrumentsByInstrumentRequest) Reset() {
	*x = GetValidPreparationInstrumentsByInstrumentRequest{}
	mi := &file_messages_proto_msgTypes[273]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationInstrumentsByInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationInstrumentsByInstrumentRequest) ProtoMessage() {}

func (x *GetValidPreparationInstrumentsByInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[273]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationInstrumentsByInstrumentRequest.ProtoReflect.Descriptor instead.
func (*GetValidPreparationInstrumentsByInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{273}
}

func (x *GetValidPreparationInstrumentsByInstrumentRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidPreparationInstrumentsByInstrumentRequest) GetValidInstrumentID() string {
	if x != nil {
		return x.ValidInstrumentID
	}
	return ""
}

type GetValidIngredientStateIngredientRequest struct {
	state                            protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientStateIngredientID string                 `json:"validIngredientStateIngredientID,omitempty" protobuf:"bytes,1,opt,name=validIngredientStateIngredientID,proto3"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *GetValidIngredientStateIngredientRequest) Reset() {
	*x = GetValidIngredientStateIngredientRequest{}
	mi := &file_messages_proto_msgTypes[274]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientStateIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientStateIngredientRequest) ProtoMessage() {}

func (x *GetValidIngredientStateIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[274]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientStateIngredientRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientStateIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{274}
}

func (x *GetValidIngredientStateIngredientRequest) GetValidIngredientStateIngredientID() string {
	if x != nil {
		return x.ValidIngredientStateIngredientID
	}
	return ""
}

type GetUserRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserID        string                 `json:"userID,omitempty" protobuf:"bytes,1,opt,name=userID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	mi := &file_messages_proto_msgTypes[275]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[275]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{275}
}

func (x *GetUserRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type ArchiveValidMeasurementUnitRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ValidMeasurementUnitID string                 `json:"validMeasurementUnitID,omitempty" protobuf:"bytes,1,opt,name=validMeasurementUnitID,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ArchiveValidMeasurementUnitRequest) Reset() {
	*x = ArchiveValidMeasurementUnitRequest{}
	mi := &file_messages_proto_msgTypes[276]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidMeasurementUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidMeasurementUnitRequest) ProtoMessage() {}

func (x *ArchiveValidMeasurementUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[276]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidMeasurementUnitRequest.ProtoReflect.Descriptor instead.
func (*ArchiveValidMeasurementUnitRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{276}
}

func (x *ArchiveValidMeasurementUnitRequest) GetValidMeasurementUnitID() string {
	if x != nil {
		return x.ValidMeasurementUnitID
	}
	return ""
}

type GetValidIngredientPreparationsByIngredientRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Filter            *QueryFilter           `json:"filter,omitempty"            protobuf:"bytes,1,opt,name=filter,proto3"`
	ValidIngredientID string                 `json:"validIngredientID,omitempty" protobuf:"bytes,2,opt,name=validIngredientID,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetValidIngredientPreparationsByIngredientRequest) Reset() {
	*x = GetValidIngredientPreparationsByIngredientRequest{}
	mi := &file_messages_proto_msgTypes[277]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientPreparationsByIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientPreparationsByIngredientRequest) ProtoMessage() {}

func (x *GetValidIngredientPreparationsByIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[277]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientPreparationsByIngredientRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientPreparationsByIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{277}
}

func (x *GetValidIngredientPreparationsByIngredientRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidIngredientPreparationsByIngredientRequest) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

type GetValidIngredientStateIngredientsByIngredientRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Filter            *QueryFilter           `json:"filter,omitempty"            protobuf:"bytes,1,opt,name=filter,proto3"`
	ValidIngredientID string                 `json:"validIngredientID,omitempty" protobuf:"bytes,2,opt,name=validIngredientID,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetValidIngredientStateIngredientsByIngredientRequest) Reset() {
	*x = GetValidIngredientStateIngredientsByIngredientRequest{}
	mi := &file_messages_proto_msgTypes[278]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientStateIngredientsByIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientStateIngredientsByIngredientRequest) ProtoMessage() {}

func (x *GetValidIngredientStateIngredientsByIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[278]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientStateIngredientsByIngredientRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientStateIngredientsByIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{278}
}

func (x *GetValidIngredientStateIngredientsByIngredientRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidIngredientStateIngredientsByIngredientRequest) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

type UpdateMealPlanGroceryListItemRequest struct {
	state                     protoimpl.MessageState                     `protogen:"open.v1"`
	MealPlanID                string                                     `json:"mealPlanID,omitempty"                protobuf:"bytes,1,opt,name=mealPlanID,proto3"`
	MealPlanGroceryListItemID string                                     `json:"mealPlanGroceryListItemID,omitempty" protobuf:"bytes,2,opt,name=mealPlanGroceryListItemID,proto3"`
	Input                     *MealPlanGroceryListItemUpdateRequestInput `json:"input,omitempty"                     protobuf:"bytes,3,opt,name=input,proto3"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *UpdateMealPlanGroceryListItemRequest) Reset() {
	*x = UpdateMealPlanGroceryListItemRequest{}
	mi := &file_messages_proto_msgTypes[279]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMealPlanGroceryListItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMealPlanGroceryListItemRequest) ProtoMessage() {}

func (x *UpdateMealPlanGroceryListItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[279]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMealPlanGroceryListItemRequest.ProtoReflect.Descriptor instead.
func (*UpdateMealPlanGroceryListItemRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{279}
}

func (x *UpdateMealPlanGroceryListItemRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *UpdateMealPlanGroceryListItemRequest) GetMealPlanGroceryListItemID() string {
	if x != nil {
		return x.MealPlanGroceryListItemID
	}
	return ""
}

func (x *UpdateMealPlanGroceryListItemRequest) GetInput() *MealPlanGroceryListItemUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateMealPlanOptionRequest struct {
	state            protoimpl.MessageState            `protogen:"open.v1"`
	MealPlanID       string                            `json:"mealPlanID,omitempty"       protobuf:"bytes,1,opt,name=mealPlanID,proto3"`
	MealPlanEventID  string                            `json:"mealPlanEventID,omitempty"  protobuf:"bytes,2,opt,name=mealPlanEventID,proto3"`
	MealPlanOptionID string                            `json:"mealPlanOptionID,omitempty" protobuf:"bytes,3,opt,name=mealPlanOptionID,proto3"`
	Input            *MealPlanOptionUpdateRequestInput `json:"input,omitempty"            protobuf:"bytes,4,opt,name=input,proto3"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UpdateMealPlanOptionRequest) Reset() {
	*x = UpdateMealPlanOptionRequest{}
	mi := &file_messages_proto_msgTypes[280]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMealPlanOptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMealPlanOptionRequest) ProtoMessage() {}

func (x *UpdateMealPlanOptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[280]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMealPlanOptionRequest.ProtoReflect.Descriptor instead.
func (*UpdateMealPlanOptionRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{280}
}

func (x *UpdateMealPlanOptionRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *UpdateMealPlanOptionRequest) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

func (x *UpdateMealPlanOptionRequest) GetMealPlanOptionID() string {
	if x != nil {
		return x.MealPlanOptionID
	}
	return ""
}

func (x *UpdateMealPlanOptionRequest) GetInput() *MealPlanOptionUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type ArchiveValidIngredientStateIngredientRequest struct {
	state                            protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientStateIngredientID string                 `json:"validIngredientStateIngredientID,omitempty" protobuf:"bytes,1,opt,name=validIngredientStateIngredientID,proto3"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *ArchiveValidIngredientStateIngredientRequest) Reset() {
	*x = ArchiveValidIngredientStateIngredientRequest{}
	mi := &file_messages_proto_msgTypes[281]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidIngredientStateIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidIngredientStateIngredientRequest) ProtoMessage() {}

func (x *ArchiveValidIngredientStateIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[281]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidIngredientStateIngredientRequest.ProtoReflect.Descriptor instead.
func (*ArchiveValidIngredientStateIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{281}
}

func (x *ArchiveValidIngredientStateIngredientRequest) GetValidIngredientStateIngredientID() string {
	if x != nil {
		return x.ValidIngredientStateIngredientID
	}
	return ""
}

type UpdateRecipeRatingRequest struct {
	state          protoimpl.MessageState          `protogen:"open.v1"`
	RecipeID       string                          `json:"recipeID,omitempty"       protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipeRatingID string                          `json:"recipeRatingID,omitempty" protobuf:"bytes,2,opt,name=recipeRatingID,proto3"`
	Input          *RecipeRatingUpdateRequestInput `json:"input,omitempty"          protobuf:"bytes,3,opt,name=input,proto3"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateRecipeRatingRequest) Reset() {
	*x = UpdateRecipeRatingRequest{}
	mi := &file_messages_proto_msgTypes[282]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipeRatingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeRatingRequest) ProtoMessage() {}

func (x *UpdateRecipeRatingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[282]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeRatingRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecipeRatingRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{282}
}

func (x *UpdateRecipeRatingRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *UpdateRecipeRatingRequest) GetRecipeRatingID() string {
	if x != nil {
		return x.RecipeRatingID
	}
	return ""
}

func (x *UpdateRecipeRatingRequest) GetInput() *RecipeRatingUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type ArchiveValidIngredientRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientID string                 `json:"validIngredientID,omitempty" protobuf:"bytes,1,opt,name=validIngredientID,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ArchiveValidIngredientRequest) Reset() {
	*x = ArchiveValidIngredientRequest{}
	mi := &file_messages_proto_msgTypes[283]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidIngredientRequest) ProtoMessage() {}

func (x *ArchiveValidIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[283]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidIngredientRequest.ProtoReflect.Descriptor instead.
func (*ArchiveValidIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{283}
}

func (x *ArchiveValidIngredientRequest) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

type UpdateValidVesselRequest struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	ValidVesselID string                         `json:"validVesselID,omitempty" protobuf:"bytes,1,opt,name=validVesselID,proto3"`
	Input         *ValidVesselUpdateRequestInput `json:"input,omitempty"         protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateValidVesselRequest) Reset() {
	*x = UpdateValidVesselRequest{}
	mi := &file_messages_proto_msgTypes[284]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidVesselRequest) ProtoMessage() {}

func (x *UpdateValidVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[284]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidVesselRequest.ProtoReflect.Descriptor instead.
func (*UpdateValidVesselRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{284}
}

func (x *UpdateValidVesselRequest) GetValidVesselID() string {
	if x != nil {
		return x.ValidVesselID
	}
	return ""
}

func (x *UpdateValidVesselRequest) GetInput() *ValidVesselUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type GetValidIngredientStateIngredientsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientStateIngredientsRequest) Reset() {
	*x = GetValidIngredientStateIngredientsRequest{}
	mi := &file_messages_proto_msgTypes[285]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientStateIngredientsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientStateIngredientsRequest) ProtoMessage() {}

func (x *GetValidIngredientStateIngredientsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[285]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientStateIngredientsRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientStateIngredientsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{285}
}

func (x *GetValidIngredientStateIngredientsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetValidPreparationVesselsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidPreparationVesselsRequest) Reset() {
	*x = GetValidPreparationVesselsRequest{}
	mi := &file_messages_proto_msgTypes[286]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationVesselsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationVesselsRequest) ProtoMessage() {}

func (x *GetValidPreparationVesselsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[286]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationVesselsRequest.ProtoReflect.Descriptor instead.
func (*GetValidPreparationVesselsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{286}
}

func (x *GetValidPreparationVesselsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetValidMeasurementUnitConversionRequest struct {
	state                            protoimpl.MessageState `protogen:"open.v1"`
	ValidMeasurementUnitConversionID string                 `json:"validMeasurementUnitConversionID,omitempty" protobuf:"bytes,1,opt,name=validMeasurementUnitConversionID,proto3"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *GetValidMeasurementUnitConversionRequest) Reset() {
	*x = GetValidMeasurementUnitConversionRequest{}
	mi := &file_messages_proto_msgTypes[287]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidMeasurementUnitConversionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidMeasurementUnitConversionRequest) ProtoMessage() {}

func (x *GetValidMeasurementUnitConversionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[287]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidMeasurementUnitConversionRequest.ProtoReflect.Descriptor instead.
func (*GetValidMeasurementUnitConversionRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{287}
}

func (x *GetValidMeasurementUnitConversionRequest) GetValidMeasurementUnitConversionID() string {
	if x != nil {
		return x.ValidMeasurementUnitConversionID
	}
	return ""
}

type GetRecipeStepRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecipeID      string                 `json:"recipeID,omitempty"     protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipeStepID  string                 `json:"recipeStepID,omitempty" protobuf:"bytes,2,opt,name=recipeStepID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeStepRequest) Reset() {
	*x = GetRecipeStepRequest{}
	mi := &file_messages_proto_msgTypes[288]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepRequest) ProtoMessage() {}

func (x *GetRecipeStepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[288]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeStepRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{288}
}

func (x *GetRecipeStepRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *GetRecipeStepRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

type ArchiveRecipeStepRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecipeID      string                 `json:"recipeID,omitempty"     protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipeStepID  string                 `json:"recipeStepID,omitempty" protobuf:"bytes,2,opt,name=recipeStepID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveRecipeStepRequest) Reset() {
	*x = ArchiveRecipeStepRequest{}
	mi := &file_messages_proto_msgTypes[289]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipeStepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipeStepRequest) ProtoMessage() {}

func (x *ArchiveRecipeStepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[289]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipeStepRequest.ProtoReflect.Descriptor instead.
func (*ArchiveRecipeStepRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{289}
}

func (x *ArchiveRecipeStepRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *ArchiveRecipeStepRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

type ArchiveMealPlanOptionVoteRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MealPlanID           string                 `json:"mealPlanID,omitempty"           protobuf:"bytes,1,opt,name=mealPlanID,proto3"`
	MealPlanEventID      string                 `json:"mealPlanEventID,omitempty"      protobuf:"bytes,2,opt,name=mealPlanEventID,proto3"`
	MealPlanOptionID     string                 `json:"mealPlanOptionID,omitempty"     protobuf:"bytes,3,opt,name=mealPlanOptionID,proto3"`
	MealPlanOptionVoteID string                 `json:"mealPlanOptionVoteID,omitempty" protobuf:"bytes,4,opt,name=mealPlanOptionVoteID,proto3"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ArchiveMealPlanOptionVoteRequest) Reset() {
	*x = ArchiveMealPlanOptionVoteRequest{}
	mi := &file_messages_proto_msgTypes[290]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveMealPlanOptionVoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveMealPlanOptionVoteRequest) ProtoMessage() {}

func (x *ArchiveMealPlanOptionVoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[290]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveMealPlanOptionVoteRequest.ProtoReflect.Descriptor instead.
func (*ArchiveMealPlanOptionVoteRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{290}
}

func (x *ArchiveMealPlanOptionVoteRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *ArchiveMealPlanOptionVoteRequest) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

func (x *ArchiveMealPlanOptionVoteRequest) GetMealPlanOptionID() string {
	if x != nil {
		return x.MealPlanOptionID
	}
	return ""
}

func (x *ArchiveMealPlanOptionVoteRequest) GetMealPlanOptionVoteID() string {
	if x != nil {
		return x.MealPlanOptionVoteID
	}
	return ""
}

type GetMealPlanEventsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty"     protobuf:"bytes,1,opt,name=filter,proto3"`
	MealPlanID    string                 `json:"mealPlanID,omitempty" protobuf:"bytes,2,opt,name=mealPlanID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealPlanEventsRequest) Reset() {
	*x = GetMealPlanEventsRequest{}
	mi := &file_messages_proto_msgTypes[291]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanEventsRequest) ProtoMessage() {}

func (x *GetMealPlanEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[291]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanEventsRequest.ProtoReflect.Descriptor instead.
func (*GetMealPlanEventsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{291}
}

func (x *GetMealPlanEventsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetMealPlanEventsRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

type GetRecipePrepTaskRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	RecipeID         string                 `json:"recipeID,omitempty"         protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipePrepTaskID string                 `json:"recipePrepTaskID,omitempty" protobuf:"bytes,2,opt,name=recipePrepTaskID,proto3"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetRecipePrepTaskRequest) Reset() {
	*x = GetRecipePrepTaskRequest{}
	mi := &file_messages_proto_msgTypes[292]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipePrepTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipePrepTaskRequest) ProtoMessage() {}

func (x *GetRecipePrepTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[292]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipePrepTaskRequest.ProtoReflect.Descriptor instead.
func (*GetRecipePrepTaskRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{292}
}

func (x *GetRecipePrepTaskRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *GetRecipePrepTaskRequest) GetRecipePrepTaskID() string {
	if x != nil {
		return x.RecipePrepTaskID
	}
	return ""
}

type GetValidIngredientsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientsRequest) Reset() {
	*x = GetValidIngredientsRequest{}
	mi := &file_messages_proto_msgTypes[293]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientsRequest) ProtoMessage() {}

func (x *GetValidIngredientsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[293]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientsRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{293}
}

func (x *GetValidIngredientsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type SearchForValidInstrumentsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	Q             string                 `json:"q,omitempty"      protobuf:"bytes,2,opt,name=q,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForValidInstrumentsRequest) Reset() {
	*x = SearchForValidInstrumentsRequest{}
	mi := &file_messages_proto_msgTypes[294]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForValidInstrumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForValidInstrumentsRequest) ProtoMessage() {}

func (x *SearchForValidInstrumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[294]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForValidInstrumentsRequest.ProtoReflect.Descriptor instead.
func (*SearchForValidInstrumentsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{294}
}

func (x *SearchForValidInstrumentsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForValidInstrumentsRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

type GetMealPlanTaskRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	MealPlanID     string                 `json:"mealPlanID,omitempty"     protobuf:"bytes,1,opt,name=mealPlanID,proto3"`
	MealPlanTaskID string                 `json:"mealPlanTaskID,omitempty" protobuf:"bytes,2,opt,name=mealPlanTaskID,proto3"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetMealPlanTaskRequest) Reset() {
	*x = GetMealPlanTaskRequest{}
	mi := &file_messages_proto_msgTypes[295]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanTaskRequest) ProtoMessage() {}

func (x *GetMealPlanTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[295]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanTaskRequest.ProtoReflect.Descriptor instead.
func (*GetMealPlanTaskRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{295}
}

func (x *GetMealPlanTaskRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *GetMealPlanTaskRequest) GetMealPlanTaskID() string {
	if x != nil {
		return x.MealPlanTaskID
	}
	return ""
}

type GetRecipeStepProductsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty"       protobuf:"bytes,1,opt,name=filter,proto3"`
	RecipeID      string                 `json:"recipeID,omitempty"     protobuf:"bytes,2,opt,name=recipeID,proto3"`
	RecipeStepID  string                 `json:"recipeStepID,omitempty" protobuf:"bytes,3,opt,name=recipeStepID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeStepProductsRequest) Reset() {
	*x = GetRecipeStepProductsRequest{}
	mi := &file_messages_proto_msgTypes[296]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepProductsRequest) ProtoMessage() {}

func (x *GetRecipeStepProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[296]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepProductsRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeStepProductsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{296}
}

func (x *GetRecipeStepProductsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetRecipeStepProductsRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *GetRecipeStepProductsRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

type CreateWebhookTriggerEventRequest struct {
	state         protoimpl.MessageState                   `protogen:"open.v1"`
	WebhookID     string                                   `json:"webhookID,omitempty" protobuf:"bytes,1,opt,name=webhookID,proto3"`
	Input         *WebhookTriggerEventCreationRequestInput `json:"input,omitempty"     protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateWebhookTriggerEventRequest) Reset() {
	*x = CreateWebhookTriggerEventRequest{}
	mi := &file_messages_proto_msgTypes[297]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWebhookTriggerEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWebhookTriggerEventRequest) ProtoMessage() {}

func (x *CreateWebhookTriggerEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[297]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWebhookTriggerEventRequest.ProtoReflect.Descriptor instead.
func (*CreateWebhookTriggerEventRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{297}
}

func (x *CreateWebhookTriggerEventRequest) GetWebhookID() string {
	if x != nil {
		return x.WebhookID
	}
	return ""
}

func (x *CreateWebhookTriggerEventRequest) GetInput() *WebhookTriggerEventCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type GetHouseholdsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHouseholdsRequest) Reset() {
	*x = GetHouseholdsRequest{}
	mi := &file_messages_proto_msgTypes[298]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHouseholdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHouseholdsRequest) ProtoMessage() {}

func (x *GetHouseholdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[298]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHouseholdsRequest.ProtoReflect.Descriptor instead.
func (*GetHouseholdsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{298}
}

func (x *GetHouseholdsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetValidMeasurementUnitRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ValidMeasurementUnitID string                 `json:"validMeasurementUnitID,omitempty" protobuf:"bytes,1,opt,name=validMeasurementUnitID,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetValidMeasurementUnitRequest) Reset() {
	*x = GetValidMeasurementUnitRequest{}
	mi := &file_messages_proto_msgTypes[299]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidMeasurementUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidMeasurementUnitRequest) ProtoMessage() {}

func (x *GetValidMeasurementUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[299]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidMeasurementUnitRequest.ProtoReflect.Descriptor instead.
func (*GetValidMeasurementUnitRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{299}
}

func (x *GetValidMeasurementUnitRequest) GetValidMeasurementUnitID() string {
	if x != nil {
		return x.ValidMeasurementUnitID
	}
	return ""
}

type GetValidInstrumentRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ValidInstrumentID string                 `json:"validInstrumentID,omitempty" protobuf:"bytes,1,opt,name=validInstrumentID,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetValidInstrumentRequest) Reset() {
	*x = GetValidInstrumentRequest{}
	mi := &file_messages_proto_msgTypes[300]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidInstrumentRequest) ProtoMessage() {}

func (x *GetValidInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[300]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidInstrumentRequest.ProtoReflect.Descriptor instead.
func (*GetValidInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{300}
}

func (x *GetValidInstrumentRequest) GetValidInstrumentID() string {
	if x != nil {
		return x.ValidInstrumentID
	}
	return ""
}

type UpdateHouseholdInstrumentOwnershipRequest struct {
	state                          protoimpl.MessageState                          `protogen:"open.v1"`
	HouseholdInstrumentOwnershipID string                                          `json:"householdInstrumentOwnershipID,omitempty" protobuf:"bytes,1,opt,name=householdInstrumentOwnershipID,proto3"`
	Input                          *HouseholdInstrumentOwnershipUpdateRequestInput `json:"input,omitempty"                          protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *UpdateHouseholdInstrumentOwnershipRequest) Reset() {
	*x = UpdateHouseholdInstrumentOwnershipRequest{}
	mi := &file_messages_proto_msgTypes[301]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateHouseholdInstrumentOwnershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHouseholdInstrumentOwnershipRequest) ProtoMessage() {}

func (x *UpdateHouseholdInstrumentOwnershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[301]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHouseholdInstrumentOwnershipRequest.ProtoReflect.Descriptor instead.
func (*UpdateHouseholdInstrumentOwnershipRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{301}
}

func (x *UpdateHouseholdInstrumentOwnershipRequest) GetHouseholdInstrumentOwnershipID() string {
	if x != nil {
		return x.HouseholdInstrumentOwnershipID
	}
	return ""
}

func (x *UpdateHouseholdInstrumentOwnershipRequest) GetInput() *HouseholdInstrumentOwnershipUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type GetValidMeasurementUnitsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidMeasurementUnitsRequest) Reset() {
	*x = GetValidMeasurementUnitsRequest{}
	mi := &file_messages_proto_msgTypes[302]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidMeasurementUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidMeasurementUnitsRequest) ProtoMessage() {}

func (x *GetValidMeasurementUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[302]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidMeasurementUnitsRequest.ProtoReflect.Descriptor instead.
func (*GetValidMeasurementUnitsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{302}
}

func (x *GetValidMeasurementUnitsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type CreateRecipeStepInstrumentRequest struct {
	state         protoimpl.MessageState                    `protogen:"open.v1"`
	RecipeID      string                                    `json:"recipeID,omitempty"     protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipeStepID  string                                    `json:"recipeStepID,omitempty" protobuf:"bytes,2,opt,name=recipeStepID,proto3"`
	Input         *RecipeStepInstrumentCreationRequestInput `json:"input,omitempty"        protobuf:"bytes,3,opt,name=input,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipeStepInstrumentRequest) Reset() {
	*x = CreateRecipeStepInstrumentRequest{}
	mi := &file_messages_proto_msgTypes[303]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipeStepInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeStepInstrumentRequest) ProtoMessage() {}

func (x *CreateRecipeStepInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[303]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeStepInstrumentRequest.ProtoReflect.Descriptor instead.
func (*CreateRecipeStepInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{303}
}

func (x *CreateRecipeStepInstrumentRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *CreateRecipeStepInstrumentRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *CreateRecipeStepInstrumentRequest) GetInput() *RecipeStepInstrumentCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateRecipeStepCompletionConditionRequest struct {
	state                           protoimpl.MessageState                           `protogen:"open.v1"`
	RecipeID                        string                                           `json:"recipeID,omitempty"                        protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipeStepID                    string                                           `json:"recipeStepID,omitempty"                    protobuf:"bytes,2,opt,name=recipeStepID,proto3"`
	RecipeStepCompletionConditionID string                                           `json:"recipeStepCompletionConditionID,omitempty" protobuf:"bytes,3,opt,name=recipeStepCompletionConditionID,proto3"`
	Input                           *RecipeStepCompletionConditionUpdateRequestInput `json:"input,omitempty"                           protobuf:"bytes,4,opt,name=input,proto3"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *UpdateRecipeStepCompletionConditionRequest) Reset() {
	*x = UpdateRecipeStepCompletionConditionRequest{}
	mi := &file_messages_proto_msgTypes[304]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipeStepCompletionConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeStepCompletionConditionRequest) ProtoMessage() {}

func (x *UpdateRecipeStepCompletionConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[304]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeStepCompletionConditionRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecipeStepCompletionConditionRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{304}
}

func (x *UpdateRecipeStepCompletionConditionRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *UpdateRecipeStepCompletionConditionRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *UpdateRecipeStepCompletionConditionRequest) GetRecipeStepCompletionConditionID() string {
	if x != nil {
		return x.RecipeStepCompletionConditionID
	}
	return ""
}

func (x *UpdateRecipeStepCompletionConditionRequest) GetInput() *RecipeStepCompletionConditionUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type CreateRecipeRatingRequest struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	RecipeID      string                            `json:"recipeID,omitempty" protobuf:"bytes,1,opt,name=recipeID,proto3"`
	Input         *RecipeRatingCreationRequestInput `json:"input,omitempty"    protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipeRatingRequest) Reset() {
	*x = CreateRecipeRatingRequest{}
	mi := &file_messages_proto_msgTypes[305]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipeRatingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeRatingRequest) ProtoMessage() {}

func (x *CreateRecipeRatingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[305]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeRatingRequest.ProtoReflect.Descriptor instead.
func (*CreateRecipeRatingRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{305}
}

func (x *CreateRecipeRatingRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *CreateRecipeRatingRequest) GetInput() *RecipeRatingCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type CloneRecipeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecipeID      string                 `json:"recipeID,omitempty" protobuf:"bytes,1,opt,name=recipeID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloneRecipeRequest) Reset() {
	*x = CloneRecipeRequest{}
	mi := &file_messages_proto_msgTypes[306]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloneRecipeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneRecipeRequest) ProtoMessage() {}

func (x *CloneRecipeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[306]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneRecipeRequest.ProtoReflect.Descriptor instead.
func (*CloneRecipeRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{306}
}

func (x *CloneRecipeRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

type GetValidPreparationInstrumentsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidPreparationInstrumentsRequest) Reset() {
	*x = GetValidPreparationInstrumentsRequest{}
	mi := &file_messages_proto_msgTypes[307]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationInstrumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationInstrumentsRequest) ProtoMessage() {}

func (x *GetValidPreparationInstrumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[307]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationInstrumentsRequest.ProtoReflect.Descriptor instead.
func (*GetValidPreparationInstrumentsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{307}
}

func (x *GetValidPreparationInstrumentsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetRecipeStepCompletionConditionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty"       protobuf:"bytes,1,opt,name=filter,proto3"`
	RecipeID      string                 `json:"recipeID,omitempty"     protobuf:"bytes,2,opt,name=recipeID,proto3"`
	RecipeStepID  string                 `json:"recipeStepID,omitempty" protobuf:"bytes,3,opt,name=recipeStepID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeStepCompletionConditionsRequest) Reset() {
	*x = GetRecipeStepCompletionConditionsRequest{}
	mi := &file_messages_proto_msgTypes[308]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepCompletionConditionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepCompletionConditionsRequest) ProtoMessage() {}

func (x *GetRecipeStepCompletionConditionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[308]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepCompletionConditionsRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeStepCompletionConditionsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{308}
}

func (x *GetRecipeStepCompletionConditionsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetRecipeStepCompletionConditionsRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *GetRecipeStepCompletionConditionsRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

type GetHouseholdInstrumentOwnershipsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHouseholdInstrumentOwnershipsRequest) Reset() {
	*x = GetHouseholdInstrumentOwnershipsRequest{}
	mi := &file_messages_proto_msgTypes[309]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHouseholdInstrumentOwnershipsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHouseholdInstrumentOwnershipsRequest) ProtoMessage() {}

func (x *GetHouseholdInstrumentOwnershipsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[309]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHouseholdInstrumentOwnershipsRequest.ProtoReflect.Descriptor instead.
func (*GetHouseholdInstrumentOwnershipsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{309}
}

func (x *GetHouseholdInstrumentOwnershipsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type UpdateRecipeStepProductRequest struct {
	state               protoimpl.MessageState               `protogen:"open.v1"`
	RecipeID            string                               `json:"recipeID,omitempty"            protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipeStepID        string                               `json:"recipeStepID,omitempty"        protobuf:"bytes,2,opt,name=recipeStepID,proto3"`
	RecipeStepProductID string                               `json:"recipeStepProductID,omitempty" protobuf:"bytes,3,opt,name=recipeStepProductID,proto3"`
	Input               *RecipeStepProductUpdateRequestInput `json:"input,omitempty"               protobuf:"bytes,4,opt,name=input,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *UpdateRecipeStepProductRequest) Reset() {
	*x = UpdateRecipeStepProductRequest{}
	mi := &file_messages_proto_msgTypes[310]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipeStepProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeStepProductRequest) ProtoMessage() {}

func (x *UpdateRecipeStepProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[310]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeStepProductRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecipeStepProductRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{310}
}

func (x *UpdateRecipeStepProductRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *UpdateRecipeStepProductRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *UpdateRecipeStepProductRequest) GetRecipeStepProductID() string {
	if x != nil {
		return x.RecipeStepProductID
	}
	return ""
}

func (x *UpdateRecipeStepProductRequest) GetInput() *RecipeStepProductUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type GetMealsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealsRequest) Reset() {
	*x = GetMealsRequest{}
	mi := &file_messages_proto_msgTypes[311]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealsRequest) ProtoMessage() {}

func (x *GetMealsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[311]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealsRequest.ProtoReflect.Descriptor instead.
func (*GetMealsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{311}
}

func (x *GetMealsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type CreateRecipeStepCompletionConditionRequest struct {
	state         protoimpl.MessageState                                              `protogen:"open.v1"`
	RecipeID      string                                                              `json:"recipeID,omitempty"     protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipeStepID  string                                                              `json:"recipeStepID,omitempty" protobuf:"bytes,2,opt,name=recipeStepID,proto3"`
	Input         *RecipeStepCompletionConditionForExistingRecipeCreationRequestInput `json:"input,omitempty"        protobuf:"bytes,3,opt,name=input,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipeStepCompletionConditionRequest) Reset() {
	*x = CreateRecipeStepCompletionConditionRequest{}
	mi := &file_messages_proto_msgTypes[312]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipeStepCompletionConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeStepCompletionConditionRequest) ProtoMessage() {}

func (x *CreateRecipeStepCompletionConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[312]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeStepCompletionConditionRequest.ProtoReflect.Descriptor instead.
func (*CreateRecipeStepCompletionConditionRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{312}
}

func (x *CreateRecipeStepCompletionConditionRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *CreateRecipeStepCompletionConditionRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *CreateRecipeStepCompletionConditionRequest) GetInput() *RecipeStepCompletionConditionForExistingRecipeCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type FetchUserDataReportRequest struct {
	state                       protoimpl.MessageState `protogen:"open.v1"`
	UserDataAggregationReportID string                 `json:"userDataAggregationReportID,omitempty" protobuf:"bytes,1,opt,name=userDataAggregationReportID,proto3"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *FetchUserDataReportRequest) Reset() {
	*x = FetchUserDataReportRequest{}
	mi := &file_messages_proto_msgTypes[313]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchUserDataReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchUserDataReportRequest) ProtoMessage() {}

func (x *FetchUserDataReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[313]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchUserDataReportRequest.ProtoReflect.Descriptor instead.
func (*FetchUserDataReportRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{313}
}

func (x *FetchUserDataReportRequest) GetUserDataAggregationReportID() string {
	if x != nil {
		return x.UserDataAggregationReportID
	}
	return ""
}

type GetValidIngredientMeasurementUnitsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetValidIngredientMeasurementUnitsRequest) Reset() {
	*x = GetValidIngredientMeasurementUnitsRequest{}
	mi := &file_messages_proto_msgTypes[314]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientMeasurementUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientMeasurementUnitsRequest) ProtoMessage() {}

func (x *GetValidIngredientMeasurementUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[314]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientMeasurementUnitsRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientMeasurementUnitsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{314}
}

func (x *GetValidIngredientMeasurementUnitsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetMealPlanRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MealPlanID    string                 `json:"mealPlanID,omitempty" protobuf:"bytes,1,opt,name=mealPlanID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealPlanRequest) Reset() {
	*x = GetMealPlanRequest{}
	mi := &file_messages_proto_msgTypes[315]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanRequest) ProtoMessage() {}

func (x *GetMealPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[315]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanRequest.ProtoReflect.Descriptor instead.
func (*GetMealPlanRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{315}
}

func (x *GetMealPlanRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

type GetUsersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUsersRequest) Reset() {
	*x = GetUsersRequest{}
	mi := &file_messages_proto_msgTypes[316]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersRequest) ProtoMessage() {}

func (x *GetUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[316]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersRequest.ProtoReflect.Descriptor instead.
func (*GetUsersRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{316}
}

func (x *GetUsersRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type SearchForValidPreparationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	Q             string                 `json:"q,omitempty"      protobuf:"bytes,2,opt,name=q,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForValidPreparationsRequest) Reset() {
	*x = SearchForValidPreparationsRequest{}
	mi := &file_messages_proto_msgTypes[317]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForValidPreparationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForValidPreparationsRequest) ProtoMessage() {}

func (x *SearchForValidPreparationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[317]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForValidPreparationsRequest.ProtoReflect.Descriptor instead.
func (*SearchForValidPreparationsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{317}
}

func (x *SearchForValidPreparationsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForValidPreparationsRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

type ArchiveRecipeStepIngredientRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	RecipeID               string                 `json:"recipeID,omitempty"               protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipeStepID           string                 `json:"recipeStepID,omitempty"           protobuf:"bytes,2,opt,name=recipeStepID,proto3"`
	RecipeStepIngredientID string                 `json:"recipeStepIngredientID,omitempty" protobuf:"bytes,3,opt,name=recipeStepIngredientID,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ArchiveRecipeStepIngredientRequest) Reset() {
	*x = ArchiveRecipeStepIngredientRequest{}
	mi := &file_messages_proto_msgTypes[318]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipeStepIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipeStepIngredientRequest) ProtoMessage() {}

func (x *ArchiveRecipeStepIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[318]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipeStepIngredientRequest.ProtoReflect.Descriptor instead.
func (*ArchiveRecipeStepIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{318}
}

func (x *ArchiveRecipeStepIngredientRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *ArchiveRecipeStepIngredientRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *ArchiveRecipeStepIngredientRequest) GetRecipeStepIngredientID() string {
	if x != nil {
		return x.RecipeStepIngredientID
	}
	return ""
}

type GetOAuth2ClientRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Oauth2ClientID string                 `json:"oauth2ClientID,omitempty" protobuf:"bytes,1,opt,name=oauth2ClientID,proto3"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetOAuth2ClientRequest) Reset() {
	*x = GetOAuth2ClientRequest{}
	mi := &file_messages_proto_msgTypes[319]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOAuth2ClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOAuth2ClientRequest) ProtoMessage() {}

func (x *GetOAuth2ClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[319]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOAuth2ClientRequest.ProtoReflect.Descriptor instead.
func (*GetOAuth2ClientRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{319}
}

func (x *GetOAuth2ClientRequest) GetOauth2ClientID() string {
	if x != nil {
		return x.Oauth2ClientID
	}
	return ""
}

type SearchForValidIngredientStatesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	Q             string                 `json:"q,omitempty"      protobuf:"bytes,2,opt,name=q,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForValidIngredientStatesRequest) Reset() {
	*x = SearchForValidIngredientStatesRequest{}
	mi := &file_messages_proto_msgTypes[320]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForValidIngredientStatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForValidIngredientStatesRequest) ProtoMessage() {}

func (x *SearchForValidIngredientStatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[320]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForValidIngredientStatesRequest.ProtoReflect.Descriptor instead.
func (*SearchForValidIngredientStatesRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{320}
}

func (x *SearchForValidIngredientStatesRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForValidIngredientStatesRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

type UpdateRecipeRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	RecipeID      string                    `json:"recipeID,omitempty" protobuf:"bytes,1,opt,name=recipeID,proto3"`
	Input         *RecipeUpdateRequestInput `json:"input,omitempty"    protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRecipeRequest) Reset() {
	*x = UpdateRecipeRequest{}
	mi := &file_messages_proto_msgTypes[321]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeRequest) ProtoMessage() {}

func (x *UpdateRecipeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[321]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecipeRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{321}
}

func (x *UpdateRecipeRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *UpdateRecipeRequest) GetInput() *RecipeUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type ArchiveRecipeStepCompletionConditionRequest struct {
	state                           protoimpl.MessageState `protogen:"open.v1"`
	RecipeID                        string                 `json:"recipeID,omitempty"                        protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipeStepID                    string                 `json:"recipeStepID,omitempty"                    protobuf:"bytes,2,opt,name=recipeStepID,proto3"`
	RecipeStepCompletionConditionID string                 `json:"recipeStepCompletionConditionID,omitempty" protobuf:"bytes,3,opt,name=recipeStepCompletionConditionID,proto3"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *ArchiveRecipeStepCompletionConditionRequest) Reset() {
	*x = ArchiveRecipeStepCompletionConditionRequest{}
	mi := &file_messages_proto_msgTypes[322]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipeStepCompletionConditionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipeStepCompletionConditionRequest) ProtoMessage() {}

func (x *ArchiveRecipeStepCompletionConditionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[322]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipeStepCompletionConditionRequest.ProtoReflect.Descriptor instead.
func (*ArchiveRecipeStepCompletionConditionRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{322}
}

func (x *ArchiveRecipeStepCompletionConditionRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *ArchiveRecipeStepCompletionConditionRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *ArchiveRecipeStepCompletionConditionRequest) GetRecipeStepCompletionConditionID() string {
	if x != nil {
		return x.RecipeStepCompletionConditionID
	}
	return ""
}

type UpdateServiceSettingConfigurationRequest struct {
	state                         protoimpl.MessageState                         `protogen:"open.v1"`
	ServiceSettingConfigurationID string                                         `json:"serviceSettingConfigurationID,omitempty" protobuf:"bytes,1,opt,name=serviceSettingConfigurationID,proto3"`
	Input                         *ServiceSettingConfigurationUpdateRequestInput `json:"input,omitempty"                         protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *UpdateServiceSettingConfigurationRequest) Reset() {
	*x = UpdateServiceSettingConfigurationRequest{}
	mi := &file_messages_proto_msgTypes[323]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateServiceSettingConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceSettingConfigurationRequest) ProtoMessage() {}

func (x *UpdateServiceSettingConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[323]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceSettingConfigurationRequest.ProtoReflect.Descriptor instead.
func (*UpdateServiceSettingConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{323}
}

func (x *UpdateServiceSettingConfigurationRequest) GetServiceSettingConfigurationID() string {
	if x != nil {
		return x.ServiceSettingConfigurationID
	}
	return ""
}

func (x *UpdateServiceSettingConfigurationRequest) GetInput() *ServiceSettingConfigurationUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateHouseholdMemberPermissionsRequest struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	HouseholdID   string                      `json:"householdID,omitempty" protobuf:"bytes,1,opt,name=householdID,proto3"`
	UserID        string                      `json:"userID,omitempty"      protobuf:"bytes,2,opt,name=userID,proto3"`
	Input         *ModifyUserPermissionsInput `json:"input,omitempty"       protobuf:"bytes,3,opt,name=input,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateHouseholdMemberPermissionsRequest) Reset() {
	*x = UpdateHouseholdMemberPermissionsRequest{}
	mi := &file_messages_proto_msgTypes[324]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateHouseholdMemberPermissionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateHouseholdMemberPermissionsRequest) ProtoMessage() {}

func (x *UpdateHouseholdMemberPermissionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[324]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateHouseholdMemberPermissionsRequest.ProtoReflect.Descriptor instead.
func (*UpdateHouseholdMemberPermissionsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{324}
}

func (x *UpdateHouseholdMemberPermissionsRequest) GetHouseholdID() string {
	if x != nil {
		return x.HouseholdID
	}
	return ""
}

func (x *UpdateHouseholdMemberPermissionsRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UpdateHouseholdMemberPermissionsRequest) GetInput() *ModifyUserPermissionsInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type ArchiveValidIngredientMeasurementUnitRequest struct {
	state                            protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientMeasurementUnitID string                 `json:"validIngredientMeasurementUnitID,omitempty" protobuf:"bytes,1,opt,name=validIngredientMeasurementUnitID,proto3"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *ArchiveValidIngredientMeasurementUnitRequest) Reset() {
	*x = ArchiveValidIngredientMeasurementUnitRequest{}
	mi := &file_messages_proto_msgTypes[325]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidIngredientMeasurementUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidIngredientMeasurementUnitRequest) ProtoMessage() {}

func (x *ArchiveValidIngredientMeasurementUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[325]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidIngredientMeasurementUnitRequest.ProtoReflect.Descriptor instead.
func (*ArchiveValidIngredientMeasurementUnitRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{325}
}

func (x *ArchiveValidIngredientMeasurementUnitRequest) GetValidIngredientMeasurementUnitID() string {
	if x != nil {
		return x.ValidIngredientMeasurementUnitID
	}
	return ""
}

type GetRecipeStepVesselRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	RecipeID           string                 `json:"recipeID,omitempty"           protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipeStepID       string                 `json:"recipeStepID,omitempty"       protobuf:"bytes,2,opt,name=recipeStepID,proto3"`
	RecipeStepVesselID string                 `json:"recipeStepVesselID,omitempty" protobuf:"bytes,3,opt,name=recipeStepVesselID,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetRecipeStepVesselRequest) Reset() {
	*x = GetRecipeStepVesselRequest{}
	mi := &file_messages_proto_msgTypes[326]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepVesselRequest) ProtoMessage() {}

func (x *GetRecipeStepVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[326]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepVesselRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeStepVesselRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{326}
}

func (x *GetRecipeStepVesselRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *GetRecipeStepVesselRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *GetRecipeStepVesselRequest) GetRecipeStepVesselID() string {
	if x != nil {
		return x.RecipeStepVesselID
	}
	return ""
}

type ArchiveOAuth2ClientRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Oauth2ClientID string                 `json:"oauth2ClientID,omitempty" protobuf:"bytes,1,opt,name=oauth2ClientID,proto3"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ArchiveOAuth2ClientRequest) Reset() {
	*x = ArchiveOAuth2ClientRequest{}
	mi := &file_messages_proto_msgTypes[327]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveOAuth2ClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveOAuth2ClientRequest) ProtoMessage() {}

func (x *ArchiveOAuth2ClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[327]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveOAuth2ClientRequest.ProtoReflect.Descriptor instead.
func (*ArchiveOAuth2ClientRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{327}
}

func (x *ArchiveOAuth2ClientRequest) GetOauth2ClientID() string {
	if x != nil {
		return x.Oauth2ClientID
	}
	return ""
}

type GetValidIngredientPreparationRequest struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientPreparationID string                 `json:"validIngredientPreparationID,omitempty" protobuf:"bytes,1,opt,name=validIngredientPreparationID,proto3"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *GetValidIngredientPreparationRequest) Reset() {
	*x = GetValidIngredientPreparationRequest{}
	mi := &file_messages_proto_msgTypes[328]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientPreparationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientPreparationRequest) ProtoMessage() {}

func (x *GetValidIngredientPreparationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[328]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientPreparationRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientPreparationRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{328}
}

func (x *GetValidIngredientPreparationRequest) GetValidIngredientPreparationID() string {
	if x != nil {
		return x.ValidIngredientPreparationID
	}
	return ""
}

type TransferHouseholdOwnershipRequest struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	HouseholdID   string                           `json:"householdID,omitempty" protobuf:"bytes,1,opt,name=householdID,proto3"`
	Input         *HouseholdOwnershipTransferInput `json:"input,omitempty"       protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransferHouseholdOwnershipRequest) Reset() {
	*x = TransferHouseholdOwnershipRequest{}
	mi := &file_messages_proto_msgTypes[329]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferHouseholdOwnershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferHouseholdOwnershipRequest) ProtoMessage() {}

func (x *TransferHouseholdOwnershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[329]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferHouseholdOwnershipRequest.ProtoReflect.Descriptor instead.
func (*TransferHouseholdOwnershipRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{329}
}

func (x *TransferHouseholdOwnershipRequest) GetHouseholdID() string {
	if x != nil {
		return x.HouseholdID
	}
	return ""
}

func (x *TransferHouseholdOwnershipRequest) GetInput() *HouseholdOwnershipTransferInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type GetUserNotificationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserNotificationsRequest) Reset() {
	*x = GetUserNotificationsRequest{}
	mi := &file_messages_proto_msgTypes[330]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserNotificationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserNotificationsRequest) ProtoMessage() {}

func (x *GetUserNotificationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[330]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserNotificationsRequest.ProtoReflect.Descriptor instead.
func (*GetUserNotificationsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{330}
}

func (x *GetUserNotificationsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetRecipeStepProductRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	RecipeID            string                 `json:"recipeID,omitempty"            protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipeStepID        string                 `json:"recipeStepID,omitempty"        protobuf:"bytes,2,opt,name=recipeStepID,proto3"`
	RecipeStepProductID string                 `json:"recipeStepProductID,omitempty" protobuf:"bytes,3,opt,name=recipeStepProductID,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetRecipeStepProductRequest) Reset() {
	*x = GetRecipeStepProductRequest{}
	mi := &file_messages_proto_msgTypes[331]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepProductRequest) ProtoMessage() {}

func (x *GetRecipeStepProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[331]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepProductRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeStepProductRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{331}
}

func (x *GetRecipeStepProductRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *GetRecipeStepProductRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *GetRecipeStepProductRequest) GetRecipeStepProductID() string {
	if x != nil {
		return x.RecipeStepProductID
	}
	return ""
}

type ArchiveRecipeStepProductRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	RecipeID            string                 `json:"recipeID,omitempty"            protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipeStepID        string                 `json:"recipeStepID,omitempty"        protobuf:"bytes,2,opt,name=recipeStepID,proto3"`
	RecipeStepProductID string                 `json:"recipeStepProductID,omitempty" protobuf:"bytes,3,opt,name=recipeStepProductID,proto3"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ArchiveRecipeStepProductRequest) Reset() {
	*x = ArchiveRecipeStepProductRequest{}
	mi := &file_messages_proto_msgTypes[332]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipeStepProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipeStepProductRequest) ProtoMessage() {}

func (x *ArchiveRecipeStepProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[332]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipeStepProductRequest.ProtoReflect.Descriptor instead.
func (*ArchiveRecipeStepProductRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{332}
}

func (x *ArchiveRecipeStepProductRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *ArchiveRecipeStepProductRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *ArchiveRecipeStepProductRequest) GetRecipeStepProductID() string {
	if x != nil {
		return x.RecipeStepProductID
	}
	return ""
}

type UpdateValidIngredientStateRequest struct {
	state                  protoimpl.MessageState                  `protogen:"open.v1"`
	ValidIngredientStateID string                                  `json:"validIngredientStateID,omitempty" protobuf:"bytes,1,opt,name=validIngredientStateID,proto3"`
	Input                  *ValidIngredientStateUpdateRequestInput `json:"input,omitempty"                  protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateValidIngredientStateRequest) Reset() {
	*x = UpdateValidIngredientStateRequest{}
	mi := &file_messages_proto_msgTypes[333]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidIngredientStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidIngredientStateRequest) ProtoMessage() {}

func (x *UpdateValidIngredientStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[333]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidIngredientStateRequest.ProtoReflect.Descriptor instead.
func (*UpdateValidIngredientStateRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{333}
}

func (x *UpdateValidIngredientStateRequest) GetValidIngredientStateID() string {
	if x != nil {
		return x.ValidIngredientStateID
	}
	return ""
}

func (x *UpdateValidIngredientStateRequest) GetInput() *ValidIngredientStateUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type GetValidPreparationVesselRequest struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	ValidPreparationVesselID string                 `json:"validPreparationVesselID,omitempty" protobuf:"bytes,1,opt,name=validPreparationVesselID,proto3"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *GetValidPreparationVesselRequest) Reset() {
	*x = GetValidPreparationVesselRequest{}
	mi := &file_messages_proto_msgTypes[334]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationVesselRequest) ProtoMessage() {}

func (x *GetValidPreparationVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[334]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationVesselRequest.ProtoReflect.Descriptor instead.
func (*GetValidPreparationVesselRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{334}
}

func (x *GetValidPreparationVesselRequest) GetValidPreparationVesselID() string {
	if x != nil {
		return x.ValidPreparationVesselID
	}
	return ""
}

type GetServiceSettingsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServiceSettingsRequest) Reset() {
	*x = GetServiceSettingsRequest{}
	mi := &file_messages_proto_msgTypes[335]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceSettingsRequest) ProtoMessage() {}

func (x *GetServiceSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[335]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetServiceSettingsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{335}
}

func (x *GetServiceSettingsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetValidMeasurementUnitConversionsToUnitRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Filter                 *QueryFilter           `json:"filter,omitempty"                 protobuf:"bytes,1,opt,name=filter,proto3"`
	ValidMeasurementUnitID string                 `json:"validMeasurementUnitID,omitempty" protobuf:"bytes,2,opt,name=validMeasurementUnitID,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetValidMeasurementUnitConversionsToUnitRequest) Reset() {
	*x = GetValidMeasurementUnitConversionsToUnitRequest{}
	mi := &file_messages_proto_msgTypes[336]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidMeasurementUnitConversionsToUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidMeasurementUnitConversionsToUnitRequest) ProtoMessage() {}

func (x *GetValidMeasurementUnitConversionsToUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[336]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidMeasurementUnitConversionsToUnitRequest.ProtoReflect.Descriptor instead.
func (*GetValidMeasurementUnitConversionsToUnitRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{336}
}

func (x *GetValidMeasurementUnitConversionsToUnitRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidMeasurementUnitConversionsToUnitRequest) GetValidMeasurementUnitID() string {
	if x != nil {
		return x.ValidMeasurementUnitID
	}
	return ""
}

type GetValidIngredientMeasurementUnitsByIngredientRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Filter            *QueryFilter           `json:"filter,omitempty"            protobuf:"bytes,1,opt,name=filter,proto3"`
	ValidIngredientID string                 `json:"validIngredientID,omitempty" protobuf:"bytes,2,opt,name=validIngredientID,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetValidIngredientMeasurementUnitsByIngredientRequest) Reset() {
	*x = GetValidIngredientMeasurementUnitsByIngredientRequest{}
	mi := &file_messages_proto_msgTypes[337]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientMeasurementUnitsByIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientMeasurementUnitsByIngredientRequest) ProtoMessage() {}

func (x *GetValidIngredientMeasurementUnitsByIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[337]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientMeasurementUnitsByIngredientRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientMeasurementUnitsByIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{337}
}

func (x *GetValidIngredientMeasurementUnitsByIngredientRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidIngredientMeasurementUnitsByIngredientRequest) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

type ArchiveValidPreparationVesselRequest struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	ValidPreparationVesselID string                 `json:"validPreparationVesselID,omitempty" protobuf:"bytes,1,opt,name=validPreparationVesselID,proto3"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ArchiveValidPreparationVesselRequest) Reset() {
	*x = ArchiveValidPreparationVesselRequest{}
	mi := &file_messages_proto_msgTypes[338]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidPreparationVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidPreparationVesselRequest) ProtoMessage() {}

func (x *ArchiveValidPreparationVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[338]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidPreparationVesselRequest.ProtoReflect.Descriptor instead.
func (*ArchiveValidPreparationVesselRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{338}
}

func (x *ArchiveValidPreparationVesselRequest) GetValidPreparationVesselID() string {
	if x != nil {
		return x.ValidPreparationVesselID
	}
	return ""
}

type CreateMealPlanTaskRequest struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	MealPlanID    string                            `json:"mealPlanID,omitempty" protobuf:"bytes,1,opt,name=mealPlanID,proto3"`
	Input         *MealPlanTaskCreationRequestInput `json:"input,omitempty"      protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMealPlanTaskRequest) Reset() {
	*x = CreateMealPlanTaskRequest{}
	mi := &file_messages_proto_msgTypes[339]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMealPlanTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMealPlanTaskRequest) ProtoMessage() {}

func (x *CreateMealPlanTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[339]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMealPlanTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateMealPlanTaskRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{339}
}

func (x *CreateMealPlanTaskRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *CreateMealPlanTaskRequest) GetInput() *MealPlanTaskCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type GetUserNotificationRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	UserNotificationID string                 `json:"userNotificationID,omitempty" protobuf:"bytes,1,opt,name=userNotificationID,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetUserNotificationRequest) Reset() {
	*x = GetUserNotificationRequest{}
	mi := &file_messages_proto_msgTypes[340]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserNotificationRequest) ProtoMessage() {}

func (x *GetUserNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[340]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserNotificationRequest.ProtoReflect.Descriptor instead.
func (*GetUserNotificationRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{340}
}

func (x *GetUserNotificationRequest) GetUserNotificationID() string {
	if x != nil {
		return x.UserNotificationID
	}
	return ""
}

type SearchForValidMeasurementUnitsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	Q             string                 `json:"q,omitempty"      protobuf:"bytes,2,opt,name=q,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForValidMeasurementUnitsRequest) Reset() {
	*x = SearchForValidMeasurementUnitsRequest{}
	mi := &file_messages_proto_msgTypes[341]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForValidMeasurementUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForValidMeasurementUnitsRequest) ProtoMessage() {}

func (x *SearchForValidMeasurementUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[341]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForValidMeasurementUnitsRequest.ProtoReflect.Descriptor instead.
func (*SearchForValidMeasurementUnitsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{341}
}

func (x *SearchForValidMeasurementUnitsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForValidMeasurementUnitsRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

type UpdateValidIngredientRequest struct {
	state             protoimpl.MessageState             `protogen:"open.v1"`
	ValidIngredientID string                             `json:"validIngredientID,omitempty" protobuf:"bytes,1,opt,name=validIngredientID,proto3"`
	Input             *ValidIngredientUpdateRequestInput `json:"input,omitempty"             protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UpdateValidIngredientRequest) Reset() {
	*x = UpdateValidIngredientRequest{}
	mi := &file_messages_proto_msgTypes[342]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidIngredientRequest) ProtoMessage() {}

func (x *UpdateValidIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[342]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidIngredientRequest.ProtoReflect.Descriptor instead.
func (*UpdateValidIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{342}
}

func (x *UpdateValidIngredientRequest) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

func (x *UpdateValidIngredientRequest) GetInput() *ValidIngredientUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type GetRecipeStepsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty"   protobuf:"bytes,1,opt,name=filter,proto3"`
	RecipeID      string                 `json:"recipeID,omitempty" protobuf:"bytes,2,opt,name=recipeID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeStepsRequest) Reset() {
	*x = GetRecipeStepsRequest{}
	mi := &file_messages_proto_msgTypes[343]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepsRequest) ProtoMessage() {}

func (x *GetRecipeStepsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[343]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepsRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeStepsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{343}
}

func (x *GetRecipeStepsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetRecipeStepsRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

type ArchiveValidIngredientPreparationRequest struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientPreparationID string                 `json:"validIngredientPreparationID,omitempty" protobuf:"bytes,1,opt,name=validIngredientPreparationID,proto3"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *ArchiveValidIngredientPreparationRequest) Reset() {
	*x = ArchiveValidIngredientPreparationRequest{}
	mi := &file_messages_proto_msgTypes[344]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidIngredientPreparationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidIngredientPreparationRequest) ProtoMessage() {}

func (x *ArchiveValidIngredientPreparationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[344]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidIngredientPreparationRequest.ProtoReflect.Descriptor instead.
func (*ArchiveValidIngredientPreparationRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{344}
}

func (x *ArchiveValidIngredientPreparationRequest) GetValidIngredientPreparationID() string {
	if x != nil {
		return x.ValidIngredientPreparationID
	}
	return ""
}

type ArchiveRecipePrepTaskRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	RecipeID         string                 `json:"recipeID,omitempty"         protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipePrepTaskID string                 `json:"recipePrepTaskID,omitempty" protobuf:"bytes,2,opt,name=recipePrepTaskID,proto3"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ArchiveRecipePrepTaskRequest) Reset() {
	*x = ArchiveRecipePrepTaskRequest{}
	mi := &file_messages_proto_msgTypes[345]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipePrepTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipePrepTaskRequest) ProtoMessage() {}

func (x *ArchiveRecipePrepTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[345]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipePrepTaskRequest.ProtoReflect.Descriptor instead.
func (*ArchiveRecipePrepTaskRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{345}
}

func (x *ArchiveRecipePrepTaskRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *ArchiveRecipePrepTaskRequest) GetRecipePrepTaskID() string {
	if x != nil {
		return x.RecipePrepTaskID
	}
	return ""
}

type SearchForValidIngredientGroupsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	Q             string                 `json:"q,omitempty"      protobuf:"bytes,2,opt,name=q,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForValidIngredientGroupsRequest) Reset() {
	*x = SearchForValidIngredientGroupsRequest{}
	mi := &file_messages_proto_msgTypes[346]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForValidIngredientGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForValidIngredientGroupsRequest) ProtoMessage() {}

func (x *SearchForValidIngredientGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[346]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForValidIngredientGroupsRequest.ProtoReflect.Descriptor instead.
func (*SearchForValidIngredientGroupsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{346}
}

func (x *SearchForValidIngredientGroupsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForValidIngredientGroupsRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

type ArchiveHouseholdInstrumentOwnershipRequest struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	HouseholdInstrumentOwnershipID string                 `json:"householdInstrumentOwnershipID,omitempty" protobuf:"bytes,1,opt,name=householdInstrumentOwnershipID,proto3"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *ArchiveHouseholdInstrumentOwnershipRequest) Reset() {
	*x = ArchiveHouseholdInstrumentOwnershipRequest{}
	mi := &file_messages_proto_msgTypes[347]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveHouseholdInstrumentOwnershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveHouseholdInstrumentOwnershipRequest) ProtoMessage() {}

func (x *ArchiveHouseholdInstrumentOwnershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[347]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveHouseholdInstrumentOwnershipRequest.ProtoReflect.Descriptor instead.
func (*ArchiveHouseholdInstrumentOwnershipRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{347}
}

func (x *ArchiveHouseholdInstrumentOwnershipRequest) GetHouseholdInstrumentOwnershipID() string {
	if x != nil {
		return x.HouseholdInstrumentOwnershipID
	}
	return ""
}

type GetHouseholdInvitationRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	HouseholdInvitationID string                 `json:"householdInvitationID,omitempty" protobuf:"bytes,1,opt,name=householdInvitationID,proto3"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GetHouseholdInvitationRequest) Reset() {
	*x = GetHouseholdInvitationRequest{}
	mi := &file_messages_proto_msgTypes[348]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHouseholdInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHouseholdInvitationRequest) ProtoMessage() {}

func (x *GetHouseholdInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[348]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHouseholdInvitationRequest.ProtoReflect.Descriptor instead.
func (*GetHouseholdInvitationRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{348}
}

func (x *GetHouseholdInvitationRequest) GetHouseholdInvitationID() string {
	if x != nil {
		return x.HouseholdInvitationID
	}
	return ""
}

type GetRecipeRatingsForRecipeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty"   protobuf:"bytes,1,opt,name=filter,proto3"`
	RecipeID      string                 `json:"recipeID,omitempty" protobuf:"bytes,2,opt,name=recipeID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeRatingsForRecipeRequest) Reset() {
	*x = GetRecipeRatingsForRecipeRequest{}
	mi := &file_messages_proto_msgTypes[349]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeRatingsForRecipeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeRatingsForRecipeRequest) ProtoMessage() {}

func (x *GetRecipeRatingsForRecipeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[349]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeRatingsForRecipeRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeRatingsForRecipeRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{349}
}

func (x *GetRecipeRatingsForRecipeRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetRecipeRatingsForRecipeRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

type CreateMealPlanOptionRequest struct {
	state           protoimpl.MessageState              `protogen:"open.v1"`
	MealPlanID      string                              `json:"mealPlanID,omitempty"      protobuf:"bytes,1,opt,name=mealPlanID,proto3"`
	MealPlanEventID string                              `json:"mealPlanEventID,omitempty" protobuf:"bytes,2,opt,name=mealPlanEventID,proto3"`
	Input           *MealPlanOptionCreationRequestInput `json:"input,omitempty"           protobuf:"bytes,3,opt,name=input,proto3"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreateMealPlanOptionRequest) Reset() {
	*x = CreateMealPlanOptionRequest{}
	mi := &file_messages_proto_msgTypes[350]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMealPlanOptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMealPlanOptionRequest) ProtoMessage() {}

func (x *CreateMealPlanOptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[350]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMealPlanOptionRequest.ProtoReflect.Descriptor instead.
func (*CreateMealPlanOptionRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{350}
}

func (x *CreateMealPlanOptionRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *CreateMealPlanOptionRequest) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

func (x *CreateMealPlanOptionRequest) GetInput() *MealPlanOptionCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type ArchiveRecipeStepInstrumentRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	RecipeID               string                 `json:"recipeID,omitempty"               protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipeStepID           string                 `json:"recipeStepID,omitempty"           protobuf:"bytes,2,opt,name=recipeStepID,proto3"`
	RecipeStepInstrumentID string                 `json:"recipeStepInstrumentID,omitempty" protobuf:"bytes,3,opt,name=recipeStepInstrumentID,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ArchiveRecipeStepInstrumentRequest) Reset() {
	*x = ArchiveRecipeStepInstrumentRequest{}
	mi := &file_messages_proto_msgTypes[351]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipeStepInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipeStepInstrumentRequest) ProtoMessage() {}

func (x *ArchiveRecipeStepInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[351]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipeStepInstrumentRequest.ProtoReflect.Descriptor instead.
func (*ArchiveRecipeStepInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{351}
}

func (x *ArchiveRecipeStepInstrumentRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *ArchiveRecipeStepInstrumentRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *ArchiveRecipeStepInstrumentRequest) GetRecipeStepInstrumentID() string {
	if x != nil {
		return x.RecipeStepInstrumentID
	}
	return ""
}

type CreateRecipeStepIngredientRequest struct {
	state         protoimpl.MessageState                    `protogen:"open.v1"`
	RecipeID      string                                    `json:"recipeID,omitempty"     protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipeStepID  string                                    `json:"recipeStepID,omitempty" protobuf:"bytes,2,opt,name=recipeStepID,proto3"`
	Input         *RecipeStepIngredientCreationRequestInput `json:"input,omitempty"        protobuf:"bytes,3,opt,name=input,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipeStepIngredientRequest) Reset() {
	*x = CreateRecipeStepIngredientRequest{}
	mi := &file_messages_proto_msgTypes[352]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipeStepIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeStepIngredientRequest) ProtoMessage() {}

func (x *CreateRecipeStepIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[352]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeStepIngredientRequest.ProtoReflect.Descriptor instead.
func (*CreateRecipeStepIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{352}
}

func (x *CreateRecipeStepIngredientRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *CreateRecipeStepIngredientRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *CreateRecipeStepIngredientRequest) GetInput() *RecipeStepIngredientCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type GetWebhookRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WebhookID     string                 `json:"webhookID,omitempty" protobuf:"bytes,1,opt,name=webhookID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetWebhookRequest) Reset() {
	*x = GetWebhookRequest{}
	mi := &file_messages_proto_msgTypes[353]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWebhookRequest) ProtoMessage() {}

func (x *GetWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[353]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWebhookRequest.ProtoReflect.Descriptor instead.
func (*GetWebhookRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{353}
}

func (x *GetWebhookRequest) GetWebhookID() string {
	if x != nil {
		return x.WebhookID
	}
	return ""
}

type GetRecipeStepInstrumentsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty"       protobuf:"bytes,1,opt,name=filter,proto3"`
	RecipeID      string                 `json:"recipeID,omitempty"     protobuf:"bytes,2,opt,name=recipeID,proto3"`
	RecipeStepID  string                 `json:"recipeStepID,omitempty" protobuf:"bytes,3,opt,name=recipeStepID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeStepInstrumentsRequest) Reset() {
	*x = GetRecipeStepInstrumentsRequest{}
	mi := &file_messages_proto_msgTypes[354]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepInstrumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepInstrumentsRequest) ProtoMessage() {}

func (x *GetRecipeStepInstrumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[354]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepInstrumentsRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeStepInstrumentsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{354}
}

func (x *GetRecipeStepInstrumentsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetRecipeStepInstrumentsRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *GetRecipeStepInstrumentsRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

type UpdateRecipeStepRequest struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	RecipeID      string                        `json:"recipeID,omitempty"     protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipeStepID  string                        `json:"recipeStepID,omitempty" protobuf:"bytes,2,opt,name=recipeStepID,proto3"`
	Input         *RecipeStepUpdateRequestInput `json:"input,omitempty"        protobuf:"bytes,3,opt,name=input,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRecipeStepRequest) Reset() {
	*x = UpdateRecipeStepRequest{}
	mi := &file_messages_proto_msgTypes[355]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipeStepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeStepRequest) ProtoMessage() {}

func (x *UpdateRecipeStepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[355]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeStepRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecipeStepRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{355}
}

func (x *UpdateRecipeStepRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *UpdateRecipeStepRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *UpdateRecipeStepRequest) GetInput() *RecipeStepUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type GetMealPlanEventRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	MealPlanID      string                 `json:"mealPlanID,omitempty"      protobuf:"bytes,1,opt,name=mealPlanID,proto3"`
	MealPlanEventID string                 `json:"mealPlanEventID,omitempty" protobuf:"bytes,2,opt,name=mealPlanEventID,proto3"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetMealPlanEventRequest) Reset() {
	*x = GetMealPlanEventRequest{}
	mi := &file_messages_proto_msgTypes[356]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanEventRequest) ProtoMessage() {}

func (x *GetMealPlanEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[356]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanEventRequest.ProtoReflect.Descriptor instead.
func (*GetMealPlanEventRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{356}
}

func (x *GetMealPlanEventRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *GetMealPlanEventRequest) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

type GetValidIngredientStateIngredientsByIngredientStateRequest struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	Filter                 *QueryFilter           `json:"filter,omitempty"                 protobuf:"bytes,1,opt,name=filter,proto3"`
	ValidIngredientStateID string                 `json:"validIngredientStateID,omitempty" protobuf:"bytes,2,opt,name=validIngredientStateID,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetValidIngredientStateIngredientsByIngredientStateRequest) Reset() {
	*x = GetValidIngredientStateIngredientsByIngredientStateRequest{}
	mi := &file_messages_proto_msgTypes[357]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientStateIngredientsByIngredientStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientStateIngredientsByIngredientStateRequest) ProtoMessage() {}

func (x *GetValidIngredientStateIngredientsByIngredientStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[357]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientStateIngredientsByIngredientStateRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientStateIngredientsByIngredientStateRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{357}
}

func (x *GetValidIngredientStateIngredientsByIngredientStateRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidIngredientStateIngredientsByIngredientStateRequest) GetValidIngredientStateID() string {
	if x != nil {
		return x.ValidIngredientStateID
	}
	return ""
}

type CreateRecipeStepVesselRequest struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	RecipeID      string                                `json:"recipeID,omitempty"     protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipeStepID  string                                `json:"recipeStepID,omitempty" protobuf:"bytes,2,opt,name=recipeStepID,proto3"`
	Input         *RecipeStepVesselCreationRequestInput `json:"input,omitempty"        protobuf:"bytes,3,opt,name=input,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipeStepVesselRequest) Reset() {
	*x = CreateRecipeStepVesselRequest{}
	mi := &file_messages_proto_msgTypes[358]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipeStepVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeStepVesselRequest) ProtoMessage() {}

func (x *CreateRecipeStepVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[358]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeStepVesselRequest.ProtoReflect.Descriptor instead.
func (*CreateRecipeStepVesselRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{358}
}

func (x *CreateRecipeStepVesselRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *CreateRecipeStepVesselRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *CreateRecipeStepVesselRequest) GetInput() *RecipeStepVesselCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type ArchiveRecipeStepVesselRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	RecipeID           string                 `json:"recipeID,omitempty"           protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipeStepID       string                 `json:"recipeStepID,omitempty"       protobuf:"bytes,2,opt,name=recipeStepID,proto3"`
	RecipeStepVesselID string                 `json:"recipeStepVesselID,omitempty" protobuf:"bytes,3,opt,name=recipeStepVesselID,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ArchiveRecipeStepVesselRequest) Reset() {
	*x = ArchiveRecipeStepVesselRequest{}
	mi := &file_messages_proto_msgTypes[359]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveRecipeStepVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveRecipeStepVesselRequest) ProtoMessage() {}

func (x *ArchiveRecipeStepVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[359]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveRecipeStepVesselRequest.ProtoReflect.Descriptor instead.
func (*ArchiveRecipeStepVesselRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{359}
}

func (x *ArchiveRecipeStepVesselRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *ArchiveRecipeStepVesselRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *ArchiveRecipeStepVesselRequest) GetRecipeStepVesselID() string {
	if x != nil {
		return x.RecipeStepVesselID
	}
	return ""
}

type UpdateValidInstrumentRequest struct {
	state             protoimpl.MessageState             `protogen:"open.v1"`
	ValidInstrumentID string                             `json:"validInstrumentID,omitempty" protobuf:"bytes,1,opt,name=validInstrumentID,proto3"`
	Input             *ValidInstrumentUpdateRequestInput `json:"input,omitempty"             protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *UpdateValidInstrumentRequest) Reset() {
	*x = UpdateValidInstrumentRequest{}
	mi := &file_messages_proto_msgTypes[360]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidInstrumentRequest) ProtoMessage() {}

func (x *UpdateValidInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[360]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidInstrumentRequest.ProtoReflect.Descriptor instead.
func (*UpdateValidInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{360}
}

func (x *UpdateValidInstrumentRequest) GetValidInstrumentID() string {
	if x != nil {
		return x.ValidInstrumentID
	}
	return ""
}

func (x *UpdateValidInstrumentRequest) GetInput() *ValidInstrumentUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type CreateMealPlanEventRequest struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	MealPlanID    string                             `json:"mealPlanID,omitempty" protobuf:"bytes,1,opt,name=mealPlanID,proto3"`
	Input         *MealPlanEventCreationRequestInput `json:"input,omitempty"      protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMealPlanEventRequest) Reset() {
	*x = CreateMealPlanEventRequest{}
	mi := &file_messages_proto_msgTypes[361]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMealPlanEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMealPlanEventRequest) ProtoMessage() {}

func (x *CreateMealPlanEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[361]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMealPlanEventRequest.ProtoReflect.Descriptor instead.
func (*CreateMealPlanEventRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{361}
}

func (x *CreateMealPlanEventRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *CreateMealPlanEventRequest) GetInput() *MealPlanEventCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type ArchiveMealRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MealID        string                 `json:"mealID,omitempty" protobuf:"bytes,1,opt,name=mealID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveMealRequest) Reset() {
	*x = ArchiveMealRequest{}
	mi := &file_messages_proto_msgTypes[362]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveMealRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveMealRequest) ProtoMessage() {}

func (x *ArchiveMealRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[362]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveMealRequest.ProtoReflect.Descriptor instead.
func (*ArchiveMealRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{362}
}

func (x *ArchiveMealRequest) GetMealID() string {
	if x != nil {
		return x.MealID
	}
	return ""
}

type GetServiceSettingConfigurationByNameRequest struct {
	state                           protoimpl.MessageState `protogen:"open.v1"`
	Filter                          *QueryFilter           `json:"filter,omitempty"                          protobuf:"bytes,1,opt,name=filter,proto3"`
	ServiceSettingConfigurationName string                 `json:"serviceSettingConfigurationName,omitempty" protobuf:"bytes,2,opt,name=serviceSettingConfigurationName,proto3"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *GetServiceSettingConfigurationByNameRequest) Reset() {
	*x = GetServiceSettingConfigurationByNameRequest{}
	mi := &file_messages_proto_msgTypes[363]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceSettingConfigurationByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceSettingConfigurationByNameRequest) ProtoMessage() {}

func (x *GetServiceSettingConfigurationByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[363]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceSettingConfigurationByNameRequest.ProtoReflect.Descriptor instead.
func (*GetServiceSettingConfigurationByNameRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{363}
}

func (x *GetServiceSettingConfigurationByNameRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetServiceSettingConfigurationByNameRequest) GetServiceSettingConfigurationName() string {
	if x != nil {
		return x.ServiceSettingConfigurationName
	}
	return ""
}

type AcceptHouseholdInvitationRequest struct {
	state                 protoimpl.MessageState                 `protogen:"open.v1"`
	HouseholdInvitationID string                                 `json:"householdInvitationID,omitempty" protobuf:"bytes,1,opt,name=householdInvitationID,proto3"`
	Input                 *HouseholdInvitationUpdateRequestInput `json:"input,omitempty"                 protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *AcceptHouseholdInvitationRequest) Reset() {
	*x = AcceptHouseholdInvitationRequest{}
	mi := &file_messages_proto_msgTypes[364]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AcceptHouseholdInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcceptHouseholdInvitationRequest) ProtoMessage() {}

func (x *AcceptHouseholdInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[364]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcceptHouseholdInvitationRequest.ProtoReflect.Descriptor instead.
func (*AcceptHouseholdInvitationRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{364}
}

func (x *AcceptHouseholdInvitationRequest) GetHouseholdInvitationID() string {
	if x != nil {
		return x.HouseholdInvitationID
	}
	return ""
}

func (x *AcceptHouseholdInvitationRequest) GetInput() *HouseholdInvitationUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type CreateHouseholdInvitationRequest struct {
	state         protoimpl.MessageState                   `protogen:"open.v1"`
	HouseholdID   string                                   `json:"householdID,omitempty" protobuf:"bytes,1,opt,name=householdID,proto3"`
	Input         *HouseholdInvitationCreationRequestInput `json:"input,omitempty"       protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateHouseholdInvitationRequest) Reset() {
	*x = CreateHouseholdInvitationRequest{}
	mi := &file_messages_proto_msgTypes[365]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateHouseholdInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateHouseholdInvitationRequest) ProtoMessage() {}

func (x *CreateHouseholdInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[365]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateHouseholdInvitationRequest.ProtoReflect.Descriptor instead.
func (*CreateHouseholdInvitationRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{365}
}

func (x *CreateHouseholdInvitationRequest) GetHouseholdID() string {
	if x != nil {
		return x.HouseholdID
	}
	return ""
}

func (x *CreateHouseholdInvitationRequest) GetInput() *HouseholdInvitationCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type GetMealPlanGroceryListItemRequest struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	MealPlanID                string                 `json:"mealPlanID,omitempty"                protobuf:"bytes,1,opt,name=mealPlanID,proto3"`
	MealPlanGroceryListItemID string                 `json:"mealPlanGroceryListItemID,omitempty" protobuf:"bytes,2,opt,name=mealPlanGroceryListItemID,proto3"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *GetMealPlanGroceryListItemRequest) Reset() {
	*x = GetMealPlanGroceryListItemRequest{}
	mi := &file_messages_proto_msgTypes[366]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanGroceryListItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanGroceryListItemRequest) ProtoMessage() {}

func (x *GetMealPlanGroceryListItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[366]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanGroceryListItemRequest.ProtoReflect.Descriptor instead.
func (*GetMealPlanGroceryListItemRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{366}
}

func (x *GetMealPlanGroceryListItemRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *GetMealPlanGroceryListItemRequest) GetMealPlanGroceryListItemID() string {
	if x != nil {
		return x.MealPlanGroceryListItemID
	}
	return ""
}

type GetReceivedHouseholdInvitationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetReceivedHouseholdInvitationsRequest) Reset() {
	*x = GetReceivedHouseholdInvitationsRequest{}
	mi := &file_messages_proto_msgTypes[367]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReceivedHouseholdInvitationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReceivedHouseholdInvitationsRequest) ProtoMessage() {}

func (x *GetReceivedHouseholdInvitationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[367]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReceivedHouseholdInvitationsRequest.ProtoReflect.Descriptor instead.
func (*GetReceivedHouseholdInvitationsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{367}
}

func (x *GetReceivedHouseholdInvitationsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type GetRecipeStepVesselsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty"       protobuf:"bytes,1,opt,name=filter,proto3"`
	RecipeID      string                 `json:"recipeID,omitempty"     protobuf:"bytes,2,opt,name=recipeID,proto3"`
	RecipeStepID  string                 `json:"recipeStepID,omitempty" protobuf:"bytes,3,opt,name=recipeStepID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeStepVesselsRequest) Reset() {
	*x = GetRecipeStepVesselsRequest{}
	mi := &file_messages_proto_msgTypes[368]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepVesselsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepVesselsRequest) ProtoMessage() {}

func (x *GetRecipeStepVesselsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[368]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepVesselsRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeStepVesselsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{368}
}

func (x *GetRecipeStepVesselsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetRecipeStepVesselsRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *GetRecipeStepVesselsRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

type UpdateValidMeasurementUnitConversionRequest struct {
	state                            protoimpl.MessageState                            `protogen:"open.v1"`
	ValidMeasurementUnitConversionID string                                            `json:"validMeasurementUnitConversionID,omitempty" protobuf:"bytes,1,opt,name=validMeasurementUnitConversionID,proto3"`
	Input                            *ValidMeasurementUnitConversionUpdateRequestInput `json:"input,omitempty"                            protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *UpdateValidMeasurementUnitConversionRequest) Reset() {
	*x = UpdateValidMeasurementUnitConversionRequest{}
	mi := &file_messages_proto_msgTypes[369]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidMeasurementUnitConversionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidMeasurementUnitConversionRequest) ProtoMessage() {}

func (x *UpdateValidMeasurementUnitConversionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[369]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidMeasurementUnitConversionRequest.ProtoReflect.Descriptor instead.
func (*UpdateValidMeasurementUnitConversionRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{369}
}

func (x *UpdateValidMeasurementUnitConversionRequest) GetValidMeasurementUnitConversionID() string {
	if x != nil {
		return x.ValidMeasurementUnitConversionID
	}
	return ""
}

func (x *UpdateValidMeasurementUnitConversionRequest) GetInput() *ValidMeasurementUnitConversionUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type GetValidPreparationVesselsByPreparationRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Filter             *QueryFilter           `json:"filter,omitempty"             protobuf:"bytes,1,opt,name=filter,proto3"`
	ValidPreparationID string                 `json:"validPreparationID,omitempty" protobuf:"bytes,2,opt,name=validPreparationID,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetValidPreparationVesselsByPreparationRequest) Reset() {
	*x = GetValidPreparationVesselsByPreparationRequest{}
	mi := &file_messages_proto_msgTypes[370]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationVesselsByPreparationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationVesselsByPreparationRequest) ProtoMessage() {}

func (x *GetValidPreparationVesselsByPreparationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[370]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationVesselsByPreparationRequest.ProtoReflect.Descriptor instead.
func (*GetValidPreparationVesselsByPreparationRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{370}
}

func (x *GetValidPreparationVesselsByPreparationRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidPreparationVesselsByPreparationRequest) GetValidPreparationID() string {
	if x != nil {
		return x.ValidPreparationID
	}
	return ""
}

type GetMealRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MealID        string                 `json:"mealID,omitempty" protobuf:"bytes,1,opt,name=mealID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealRequest) Reset() {
	*x = GetMealRequest{}
	mi := &file_messages_proto_msgTypes[371]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealRequest) ProtoMessage() {}

func (x *GetMealRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[371]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealRequest.ProtoReflect.Descriptor instead.
func (*GetMealRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{371}
}

func (x *GetMealRequest) GetMealID() string {
	if x != nil {
		return x.MealID
	}
	return ""
}

type GetValidPreparationRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ValidPreparationID string                 `json:"validPreparationID,omitempty" protobuf:"bytes,1,opt,name=validPreparationID,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetValidPreparationRequest) Reset() {
	*x = GetValidPreparationRequest{}
	mi := &file_messages_proto_msgTypes[372]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationRequest) ProtoMessage() {}

func (x *GetValidPreparationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[372]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationRequest.ProtoReflect.Descriptor instead.
func (*GetValidPreparationRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{372}
}

func (x *GetValidPreparationRequest) GetValidPreparationID() string {
	if x != nil {
		return x.ValidPreparationID
	}
	return ""
}

type GetMealPlanOptionVotesRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Filter           *QueryFilter           `json:"filter,omitempty"           protobuf:"bytes,1,opt,name=filter,proto3"`
	MealPlanID       string                 `json:"mealPlanID,omitempty"       protobuf:"bytes,2,opt,name=mealPlanID,proto3"`
	MealPlanEventID  string                 `json:"mealPlanEventID,omitempty"  protobuf:"bytes,3,opt,name=mealPlanEventID,proto3"`
	MealPlanOptionID string                 `json:"mealPlanOptionID,omitempty" protobuf:"bytes,4,opt,name=mealPlanOptionID,proto3"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetMealPlanOptionVotesRequest) Reset() {
	*x = GetMealPlanOptionVotesRequest{}
	mi := &file_messages_proto_msgTypes[373]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanOptionVotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanOptionVotesRequest) ProtoMessage() {}

func (x *GetMealPlanOptionVotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[373]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanOptionVotesRequest.ProtoReflect.Descriptor instead.
func (*GetMealPlanOptionVotesRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{373}
}

func (x *GetMealPlanOptionVotesRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetMealPlanOptionVotesRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *GetMealPlanOptionVotesRequest) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

func (x *GetMealPlanOptionVotesRequest) GetMealPlanOptionID() string {
	if x != nil {
		return x.MealPlanOptionID
	}
	return ""
}

type UpdateUserNotificationRequest struct {
	state              protoimpl.MessageState              `protogen:"open.v1"`
	UserNotificationID string                              `json:"userNotificationID,omitempty" protobuf:"bytes,1,opt,name=userNotificationID,proto3"`
	Input              *UserNotificationUpdateRequestInput `json:"input,omitempty"              protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpdateUserNotificationRequest) Reset() {
	*x = UpdateUserNotificationRequest{}
	mi := &file_messages_proto_msgTypes[374]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserNotificationRequest) ProtoMessage() {}

func (x *UpdateUserNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[374]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserNotificationRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserNotificationRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{374}
}

func (x *UpdateUserNotificationRequest) GetUserNotificationID() string {
	if x != nil {
		return x.UserNotificationID
	}
	return ""
}

func (x *UpdateUserNotificationRequest) GetInput() *UserNotificationUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type SearchForServiceSettingsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	Q             string                 `json:"q,omitempty"      protobuf:"bytes,2,opt,name=q,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForServiceSettingsRequest) Reset() {
	*x = SearchForServiceSettingsRequest{}
	mi := &file_messages_proto_msgTypes[375]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForServiceSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForServiceSettingsRequest) ProtoMessage() {}

func (x *SearchForServiceSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[375]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForServiceSettingsRequest.ProtoReflect.Descriptor instead.
func (*SearchForServiceSettingsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{375}
}

func (x *SearchForServiceSettingsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForServiceSettingsRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

type CreateRecipeStepRequest struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	RecipeID      string                          `json:"recipeID,omitempty" protobuf:"bytes,1,opt,name=recipeID,proto3"`
	Input         *RecipeStepCreationRequestInput `json:"input,omitempty"    protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipeStepRequest) Reset() {
	*x = CreateRecipeStepRequest{}
	mi := &file_messages_proto_msgTypes[376]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipeStepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipeStepRequest) ProtoMessage() {}

func (x *CreateRecipeStepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[376]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipeStepRequest.ProtoReflect.Descriptor instead.
func (*CreateRecipeStepRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{376}
}

func (x *CreateRecipeStepRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *CreateRecipeStepRequest) GetInput() *RecipeStepCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateRecipePrepTaskRequest struct {
	state            protoimpl.MessageState            `protogen:"open.v1"`
	RecipeID         string                            `json:"recipeID,omitempty"         protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipePrepTaskID string                            `json:"recipePrepTaskID,omitempty" protobuf:"bytes,2,opt,name=recipePrepTaskID,proto3"`
	Input            *RecipePrepTaskUpdateRequestInput `json:"input,omitempty"            protobuf:"bytes,3,opt,name=input,proto3"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UpdateRecipePrepTaskRequest) Reset() {
	*x = UpdateRecipePrepTaskRequest{}
	mi := &file_messages_proto_msgTypes[377]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipePrepTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipePrepTaskRequest) ProtoMessage() {}

func (x *UpdateRecipePrepTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[377]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipePrepTaskRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecipePrepTaskRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{377}
}

func (x *UpdateRecipePrepTaskRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *UpdateRecipePrepTaskRequest) GetRecipePrepTaskID() string {
	if x != nil {
		return x.RecipePrepTaskID
	}
	return ""
}

func (x *UpdateRecipePrepTaskRequest) GetInput() *RecipePrepTaskUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type GetHouseholdInstrumentOwnershipRequest struct {
	state                          protoimpl.MessageState `protogen:"open.v1"`
	HouseholdInstrumentOwnershipID string                 `json:"householdInstrumentOwnershipID,omitempty" protobuf:"bytes,1,opt,name=householdInstrumentOwnershipID,proto3"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *GetHouseholdInstrumentOwnershipRequest) Reset() {
	*x = GetHouseholdInstrumentOwnershipRequest{}
	mi := &file_messages_proto_msgTypes[378]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHouseholdInstrumentOwnershipRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHouseholdInstrumentOwnershipRequest) ProtoMessage() {}

func (x *GetHouseholdInstrumentOwnershipRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[378]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHouseholdInstrumentOwnershipRequest.ProtoReflect.Descriptor instead.
func (*GetHouseholdInstrumentOwnershipRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{378}
}

func (x *GetHouseholdInstrumentOwnershipRequest) GetHouseholdInstrumentOwnershipID() string {
	if x != nil {
		return x.HouseholdInstrumentOwnershipID
	}
	return ""
}

type GetServiceSettingConfigurationsForHouseholdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServiceSettingConfigurationsForHouseholdRequest) Reset() {
	*x = GetServiceSettingConfigurationsForHouseholdRequest{}
	mi := &file_messages_proto_msgTypes[379]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceSettingConfigurationsForHouseholdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceSettingConfigurationsForHouseholdRequest) ProtoMessage() {}

func (x *GetServiceSettingConfigurationsForHouseholdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[379]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceSettingConfigurationsForHouseholdRequest.ProtoReflect.Descriptor instead.
func (*GetServiceSettingConfigurationsForHouseholdRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{379}
}

func (x *GetServiceSettingConfigurationsForHouseholdRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ArchiveValidVesselRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ValidVesselID string                 `json:"validVesselID,omitempty" protobuf:"bytes,1,opt,name=validVesselID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArchiveValidVesselRequest) Reset() {
	*x = ArchiveValidVesselRequest{}
	mi := &file_messages_proto_msgTypes[380]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidVesselRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidVesselRequest) ProtoMessage() {}

func (x *ArchiveValidVesselRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[380]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidVesselRequest.ProtoReflect.Descriptor instead.
func (*ArchiveValidVesselRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{380}
}

func (x *ArchiveValidVesselRequest) GetValidVesselID() string {
	if x != nil {
		return x.ValidVesselID
	}
	return ""
}

type UpdateValidIngredientMeasurementUnitRequest struct {
	state                            protoimpl.MessageState                            `protogen:"open.v1"`
	ValidIngredientMeasurementUnitID string                                            `json:"validIngredientMeasurementUnitID,omitempty" protobuf:"bytes,1,opt,name=validIngredientMeasurementUnitID,proto3"`
	Input                            *ValidIngredientMeasurementUnitUpdateRequestInput `json:"input,omitempty"                            protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *UpdateValidIngredientMeasurementUnitRequest) Reset() {
	*x = UpdateValidIngredientMeasurementUnitRequest{}
	mi := &file_messages_proto_msgTypes[381]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidIngredientMeasurementUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidIngredientMeasurementUnitRequest) ProtoMessage() {}

func (x *UpdateValidIngredientMeasurementUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[381]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidIngredientMeasurementUnitRequest.ProtoReflect.Descriptor instead.
func (*UpdateValidIngredientMeasurementUnitRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{381}
}

func (x *UpdateValidIngredientMeasurementUnitRequest) GetValidIngredientMeasurementUnitID() string {
	if x != nil {
		return x.ValidIngredientMeasurementUnitID
	}
	return ""
}

func (x *UpdateValidIngredientMeasurementUnitRequest) GetInput() *ValidIngredientMeasurementUnitUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type GetRecipeStepIngredientsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty"       protobuf:"bytes,1,opt,name=filter,proto3"`
	RecipeID      string                 `json:"recipeID,omitempty"     protobuf:"bytes,2,opt,name=recipeID,proto3"`
	RecipeStepID  string                 `json:"recipeStepID,omitempty" protobuf:"bytes,3,opt,name=recipeStepID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeStepIngredientsRequest) Reset() {
	*x = GetRecipeStepIngredientsRequest{}
	mi := &file_messages_proto_msgTypes[382]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeStepIngredientsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeStepIngredientsRequest) ProtoMessage() {}

func (x *GetRecipeStepIngredientsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[382]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeStepIngredientsRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeStepIngredientsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{382}
}

func (x *GetRecipeStepIngredientsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetRecipeStepIngredientsRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *GetRecipeStepIngredientsRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

type GetMealPlanOptionVoteRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MealPlanID           string                 `json:"mealPlanID,omitempty"           protobuf:"bytes,1,opt,name=mealPlanID,proto3"`
	MealPlanEventID      string                 `json:"mealPlanEventID,omitempty"      protobuf:"bytes,2,opt,name=mealPlanEventID,proto3"`
	MealPlanOptionID     string                 `json:"mealPlanOptionID,omitempty"     protobuf:"bytes,3,opt,name=mealPlanOptionID,proto3"`
	MealPlanOptionVoteID string                 `json:"mealPlanOptionVoteID,omitempty" protobuf:"bytes,4,opt,name=mealPlanOptionVoteID,proto3"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetMealPlanOptionVoteRequest) Reset() {
	*x = GetMealPlanOptionVoteRequest{}
	mi := &file_messages_proto_msgTypes[383]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlanOptionVoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlanOptionVoteRequest) ProtoMessage() {}

func (x *GetMealPlanOptionVoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[383]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlanOptionVoteRequest.ProtoReflect.Descriptor instead.
func (*GetMealPlanOptionVoteRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{383}
}

func (x *GetMealPlanOptionVoteRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *GetMealPlanOptionVoteRequest) GetMealPlanEventID() string {
	if x != nil {
		return x.MealPlanEventID
	}
	return ""
}

func (x *GetMealPlanOptionVoteRequest) GetMealPlanOptionID() string {
	if x != nil {
		return x.MealPlanOptionID
	}
	return ""
}

func (x *GetMealPlanOptionVoteRequest) GetMealPlanOptionVoteID() string {
	if x != nil {
		return x.MealPlanOptionVoteID
	}
	return ""
}

type SearchValidMeasurementUnitsByIngredientRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Filter            *QueryFilter           `json:"filter,omitempty"            protobuf:"bytes,1,opt,name=filter,proto3"`
	Q                 string                 `json:"q,omitempty"                 protobuf:"bytes,2,opt,name=q,proto3"`
	ValidIngredientID string                 `json:"validIngredientID,omitempty" protobuf:"bytes,3,opt,name=validIngredientID,proto3"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SearchValidMeasurementUnitsByIngredientRequest) Reset() {
	*x = SearchValidMeasurementUnitsByIngredientRequest{}
	mi := &file_messages_proto_msgTypes[384]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchValidMeasurementUnitsByIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchValidMeasurementUnitsByIngredientRequest) ProtoMessage() {}

func (x *SearchValidMeasurementUnitsByIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[384]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchValidMeasurementUnitsByIngredientRequest.ProtoReflect.Descriptor instead.
func (*SearchValidMeasurementUnitsByIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{384}
}

func (x *SearchValidMeasurementUnitsByIngredientRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchValidMeasurementUnitsByIngredientRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *SearchValidMeasurementUnitsByIngredientRequest) GetValidIngredientID() string {
	if x != nil {
		return x.ValidIngredientID
	}
	return ""
}

type ArchiveValidPreparationInstrumentRequest struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	ValidPreparationInstrumentID string                 `json:"validPreparationInstrumentID,omitempty" protobuf:"bytes,1,opt,name=validPreparationInstrumentID,proto3"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *ArchiveValidPreparationInstrumentRequest) Reset() {
	*x = ArchiveValidPreparationInstrumentRequest{}
	mi := &file_messages_proto_msgTypes[385]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveValidPreparationInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveValidPreparationInstrumentRequest) ProtoMessage() {}

func (x *ArchiveValidPreparationInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[385]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveValidPreparationInstrumentRequest.ProtoReflect.Descriptor instead.
func (*ArchiveValidPreparationInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{385}
}

func (x *ArchiveValidPreparationInstrumentRequest) GetValidPreparationInstrumentID() string {
	if x != nil {
		return x.ValidPreparationInstrumentID
	}
	return ""
}

type UpdateValidIngredientPreparationRequest struct {
	state                        protoimpl.MessageState                        `protogen:"open.v1"`
	ValidIngredientPreparationID string                                        `json:"validIngredientPreparationID,omitempty" protobuf:"bytes,1,opt,name=validIngredientPreparationID,proto3"`
	Input                        *ValidIngredientPreparationUpdateRequestInput `json:"input,omitempty"                        protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *UpdateValidIngredientPreparationRequest) Reset() {
	*x = UpdateValidIngredientPreparationRequest{}
	mi := &file_messages_proto_msgTypes[386]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidIngredientPreparationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidIngredientPreparationRequest) ProtoMessage() {}

func (x *UpdateValidIngredientPreparationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[386]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidIngredientPreparationRequest.ProtoReflect.Descriptor instead.
func (*UpdateValidIngredientPreparationRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{386}
}

func (x *UpdateValidIngredientPreparationRequest) GetValidIngredientPreparationID() string {
	if x != nil {
		return x.ValidIngredientPreparationID
	}
	return ""
}

func (x *UpdateValidIngredientPreparationRequest) GetInput() *ValidIngredientPreparationUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type UpdateValidIngredientStateIngredientRequest struct {
	state                            protoimpl.MessageState                            `protogen:"open.v1"`
	ValidIngredientStateIngredientID string                                            `json:"validIngredientStateIngredientID,omitempty" protobuf:"bytes,1,opt,name=validIngredientStateIngredientID,proto3"`
	Input                            *ValidIngredientStateIngredientUpdateRequestInput `json:"input,omitempty"                            protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *UpdateValidIngredientStateIngredientRequest) Reset() {
	*x = UpdateValidIngredientStateIngredientRequest{}
	mi := &file_messages_proto_msgTypes[387]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateValidIngredientStateIngredientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateValidIngredientStateIngredientRequest) ProtoMessage() {}

func (x *UpdateValidIngredientStateIngredientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[387]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateValidIngredientStateIngredientRequest.ProtoReflect.Descriptor instead.
func (*UpdateValidIngredientStateIngredientRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{387}
}

func (x *UpdateValidIngredientStateIngredientRequest) GetValidIngredientStateIngredientID() string {
	if x != nil {
		return x.ValidIngredientStateIngredientID
	}
	return ""
}

func (x *UpdateValidIngredientStateIngredientRequest) GetInput() *ValidIngredientStateIngredientUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type GetValidIngredientMeasurementUnitRequest struct {
	state                            protoimpl.MessageState `protogen:"open.v1"`
	ValidIngredientMeasurementUnitID string                 `json:"validIngredientMeasurementUnitID,omitempty" protobuf:"bytes,1,opt,name=validIngredientMeasurementUnitID,proto3"`
	unknownFields                    protoimpl.UnknownFields
	sizeCache                        protoimpl.SizeCache
}

func (x *GetValidIngredientMeasurementUnitRequest) Reset() {
	*x = GetValidIngredientMeasurementUnitRequest{}
	mi := &file_messages_proto_msgTypes[388]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidIngredientMeasurementUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidIngredientMeasurementUnitRequest) ProtoMessage() {}

func (x *GetValidIngredientMeasurementUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[388]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidIngredientMeasurementUnitRequest.ProtoReflect.Descriptor instead.
func (*GetValidIngredientMeasurementUnitRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{388}
}

func (x *GetValidIngredientMeasurementUnitRequest) GetValidIngredientMeasurementUnitID() string {
	if x != nil {
		return x.ValidIngredientMeasurementUnitID
	}
	return ""
}

type GetMealPlansForHouseholdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMealPlansForHouseholdRequest) Reset() {
	*x = GetMealPlansForHouseholdRequest{}
	mi := &file_messages_proto_msgTypes[389]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMealPlansForHouseholdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMealPlansForHouseholdRequest) ProtoMessage() {}

func (x *GetMealPlansForHouseholdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[389]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMealPlansForHouseholdRequest.ProtoReflect.Descriptor instead.
func (*GetMealPlansForHouseholdRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{389}
}

func (x *GetMealPlansForHouseholdRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type CreateRecipePrepTaskRequest struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	RecipeID      string                              `json:"recipeID,omitempty" protobuf:"bytes,1,opt,name=recipeID,proto3"`
	Input         *RecipePrepTaskCreationRequestInput `json:"input,omitempty"    protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRecipePrepTaskRequest) Reset() {
	*x = CreateRecipePrepTaskRequest{}
	mi := &file_messages_proto_msgTypes[390]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRecipePrepTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRecipePrepTaskRequest) ProtoMessage() {}

func (x *CreateRecipePrepTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[390]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRecipePrepTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateRecipePrepTaskRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{390}
}

func (x *CreateRecipePrepTaskRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *CreateRecipePrepTaskRequest) GetInput() *RecipePrepTaskCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type GetRecipeMealPlanTasksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecipeID      string                 `json:"recipeID,omitempty" protobuf:"bytes,1,opt,name=recipeID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipeMealPlanTasksRequest) Reset() {
	*x = GetRecipeMealPlanTasksRequest{}
	mi := &file_messages_proto_msgTypes[391]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipeMealPlanTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipeMealPlanTasksRequest) ProtoMessage() {}

func (x *GetRecipeMealPlanTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[391]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipeMealPlanTasksRequest.ProtoReflect.Descriptor instead.
func (*GetRecipeMealPlanTasksRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{391}
}

func (x *GetRecipeMealPlanTasksRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

type GetRecipePrepTasksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty"   protobuf:"bytes,1,opt,name=filter,proto3"`
	RecipeID      string                 `json:"recipeID,omitempty" protobuf:"bytes,2,opt,name=recipeID,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRecipePrepTasksRequest) Reset() {
	*x = GetRecipePrepTasksRequest{}
	mi := &file_messages_proto_msgTypes[392]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRecipePrepTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipePrepTasksRequest) ProtoMessage() {}

func (x *GetRecipePrepTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[392]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipePrepTasksRequest.ProtoReflect.Descriptor instead.
func (*GetRecipePrepTasksRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{392}
}

func (x *GetRecipePrepTasksRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetRecipePrepTasksRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

type SearchForValidIngredientsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *QueryFilter           `json:"filter,omitempty" protobuf:"bytes,1,opt,name=filter,proto3"`
	Q             string                 `json:"q,omitempty"      protobuf:"bytes,2,opt,name=q,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchForValidIngredientsRequest) Reset() {
	*x = SearchForValidIngredientsRequest{}
	mi := &file_messages_proto_msgTypes[393]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchForValidIngredientsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchForValidIngredientsRequest) ProtoMessage() {}

func (x *SearchForValidIngredientsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[393]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchForValidIngredientsRequest.ProtoReflect.Descriptor instead.
func (*SearchForValidIngredientsRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{393}
}

func (x *SearchForValidIngredientsRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchForValidIngredientsRequest) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

type GetValidPreparationInstrumentsByPreparationRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Filter             *QueryFilter           `json:"filter,omitempty"             protobuf:"bytes,1,opt,name=filter,proto3"`
	ValidPreparationID string                 `json:"validPreparationID,omitempty" protobuf:"bytes,2,opt,name=validPreparationID,proto3"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetValidPreparationInstrumentsByPreparationRequest) Reset() {
	*x = GetValidPreparationInstrumentsByPreparationRequest{}
	mi := &file_messages_proto_msgTypes[394]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetValidPreparationInstrumentsByPreparationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetValidPreparationInstrumentsByPreparationRequest) ProtoMessage() {}

func (x *GetValidPreparationInstrumentsByPreparationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[394]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetValidPreparationInstrumentsByPreparationRequest.ProtoReflect.Descriptor instead.
func (*GetValidPreparationInstrumentsByPreparationRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{394}
}

func (x *GetValidPreparationInstrumentsByPreparationRequest) GetFilter() *QueryFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetValidPreparationInstrumentsByPreparationRequest) GetValidPreparationID() string {
	if x != nil {
		return x.ValidPreparationID
	}
	return ""
}

type ArchiveServiceSettingConfigurationRequest struct {
	state                         protoimpl.MessageState `protogen:"open.v1"`
	ServiceSettingConfigurationID string                 `json:"serviceSettingConfigurationID,omitempty" protobuf:"bytes,1,opt,name=serviceSettingConfigurationID,proto3"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *ArchiveServiceSettingConfigurationRequest) Reset() {
	*x = ArchiveServiceSettingConfigurationRequest{}
	mi := &file_messages_proto_msgTypes[395]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArchiveServiceSettingConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArchiveServiceSettingConfigurationRequest) ProtoMessage() {}

func (x *ArchiveServiceSettingConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[395]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArchiveServiceSettingConfigurationRequest.ProtoReflect.Descriptor instead.
func (*ArchiveServiceSettingConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{395}
}

func (x *ArchiveServiceSettingConfigurationRequest) GetServiceSettingConfigurationID() string {
	if x != nil {
		return x.ServiceSettingConfigurationID
	}
	return ""
}

type UpdateRecipeStepInstrumentRequest struct {
	state                  protoimpl.MessageState                  `protogen:"open.v1"`
	RecipeID               string                                  `json:"recipeID,omitempty"               protobuf:"bytes,1,opt,name=recipeID,proto3"`
	RecipeStepID           string                                  `json:"recipeStepID,omitempty"           protobuf:"bytes,2,opt,name=recipeStepID,proto3"`
	RecipeStepInstrumentID string                                  `json:"recipeStepInstrumentID,omitempty" protobuf:"bytes,3,opt,name=recipeStepInstrumentID,proto3"`
	Input                  *RecipeStepInstrumentUpdateRequestInput `json:"input,omitempty"                  protobuf:"bytes,4,opt,name=input,proto3"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateRecipeStepInstrumentRequest) Reset() {
	*x = UpdateRecipeStepInstrumentRequest{}
	mi := &file_messages_proto_msgTypes[396]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRecipeStepInstrumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRecipeStepInstrumentRequest) ProtoMessage() {}

func (x *UpdateRecipeStepInstrumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[396]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRecipeStepInstrumentRequest.ProtoReflect.Descriptor instead.
func (*UpdateRecipeStepInstrumentRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{396}
}

func (x *UpdateRecipeStepInstrumentRequest) GetRecipeID() string {
	if x != nil {
		return x.RecipeID
	}
	return ""
}

func (x *UpdateRecipeStepInstrumentRequest) GetRecipeStepID() string {
	if x != nil {
		return x.RecipeStepID
	}
	return ""
}

func (x *UpdateRecipeStepInstrumentRequest) GetRecipeStepInstrumentID() string {
	if x != nil {
		return x.RecipeStepInstrumentID
	}
	return ""
}

func (x *UpdateRecipeStepInstrumentRequest) GetInput() *RecipeStepInstrumentUpdateRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

type GetServiceSettingRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ServiceSettingID string                 `json:"serviceSettingID,omitempty" protobuf:"bytes,1,opt,name=serviceSettingID,proto3"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetServiceSettingRequest) Reset() {
	*x = GetServiceSettingRequest{}
	mi := &file_messages_proto_msgTypes[397]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServiceSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceSettingRequest) ProtoMessage() {}

func (x *GetServiceSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[397]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceSettingRequest.ProtoReflect.Descriptor instead.
func (*GetServiceSettingRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{397}
}

func (x *GetServiceSettingRequest) GetServiceSettingID() string {
	if x != nil {
		return x.ServiceSettingID
	}
	return ""
}

type CreateMealPlanGroceryListItemRequest struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	MealPlanID    string                                       `json:"mealPlanID,omitempty" protobuf:"bytes,1,opt,name=mealPlanID,proto3"`
	Input         *MealPlanGroceryListItemCreationRequestInput `json:"input,omitempty"      protobuf:"bytes,2,opt,name=input,proto3"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateMealPlanGroceryListItemRequest) Reset() {
	*x = CreateMealPlanGroceryListItemRequest{}
	mi := &file_messages_proto_msgTypes[398]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMealPlanGroceryListItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMealPlanGroceryListItemRequest) ProtoMessage() {}

func (x *CreateMealPlanGroceryListItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_messages_proto_msgTypes[398]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMealPlanGroceryListItemRequest.ProtoReflect.Descriptor instead.
func (*CreateMealPlanGroceryListItemRequest) Descriptor() ([]byte, []int) {
	return file_messages_proto_rawDescGZIP(), []int{398}
}

func (x *CreateMealPlanGroceryListItemRequest) GetMealPlanID() string {
	if x != nil {
		return x.MealPlanID
	}
	return ""
}

func (x *CreateMealPlanGroceryListItemRequest) GetInput() *MealPlanGroceryListItemCreationRequestInput {
	if x != nil {
		return x.Input
	}
	return nil
}

var File_messages_proto protoreflect.FileDescriptor

var file_messages_proto_rawDesc = string([]byte{
	0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x06, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x01, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x01, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0a, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x22, 0x55, 0x0a, 0x21, 0x41,
	0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x72, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x42, 0x6f,
	0x64, 0x79, 0x22, 0x39, 0x0a, 0x1d, 0x41, 0x72, 0x62, 0x69, 0x74, 0x72, 0x61, 0x72, 0x79, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x9e, 0x03,
	0x0a, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x42, 0x65, 0x6c, 0x6f, 0x6e,
	0x67, 0x73, 0x54, 0x6f, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x48, 0x6f,
	0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x52,
	0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x52, 0x65, 0x6c, 0x65, 0x76, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x1a,
	0x4d, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4c, 0x6f, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x41,
	0x0a, 0x11, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x3e, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49,
	0x44, 0x22, 0x43, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x67, 0x12, 0x1a,
	0x0a, 0x08, 0x4f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x4f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x65,
	0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x65,
	0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8b, 0x03, 0x0a, 0x16, 0x43, 0x6f, 0x72, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x45, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x53, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x6f, 0x0a, 0x20, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x20, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x31, 0x0a, 0x0a, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x0a, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x73, 0x22, 0x3e, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x49, 0x44, 0x22, 0x37, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x9d, 0x24,
	0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x4d, 0x0a, 0x13, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x48, 0x6f, 0x75,
	0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x6e, 0x0a, 0x1e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x1e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x41, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x44, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50,
	0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x14, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x59, 0x0a, 0x17, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63,
	0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x17, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63,
	0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x04, 0x4d,
	0x65, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x52, 0x04, 0x4d, 0x65, 0x61, 0x6c, 0x12, 0x40, 0x0a,
	0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x26, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52,
	0x06, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50,
	0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50,
	0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x4a, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x52,
	0x12, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x65, 0x70, 0x12, 0x32, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x0a, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x47, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x11, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x50, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x50, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x14,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x08, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x08, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0c,
	0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3b, 0x0a, 0x0d,
	0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x4d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x48, 0x6f, 0x75,
	0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x52,
	0x09, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3e, 0x0a, 0x0e, 0x4d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x4d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6e, 0x0a, 0x1e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x1e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x4a, 0x0a, 0x12, 0x4d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x12, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x1a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1a,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x07, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x62, 0x0a, 0x1a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x14, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x47, 0x0a, 0x0e, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x6f, 0x75,
	0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x52, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x12, 0x6b, 0x0a, 0x1d, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x1d, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x44, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x10, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x12, 0x4a, 0x0a, 0x12, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x12, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x6e, 0x0a, 0x1e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x1e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x65, 0x0a, 0x1b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x1c, 0x48, 0x6f,
	0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x1c, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x12, 0x38, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x0c, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x35,
	0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x0b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x12, 0x56, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x12, 0x44, 0x0a,
	0x10, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x15, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x1c, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x32, 0x0a, 0x14, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x44, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x4d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74,
	0x65, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x20, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12,
	0x2a, 0x0a, 0x10, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x4d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x4d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x49, 0x44, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x44,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x61, 0x6c, 0x49, 0x44, 0x18,
	0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x3c, 0x0a,
	0x19, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x20, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x3d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x20, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x20, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x20, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x36, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x3f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x18, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x3e, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x44, 0x18, 0x43, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x44, 0x12, 0x46, 0x0a, 0x1e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x49, 0x44, 0x18, 0x44, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x48, 0x6f, 0x75,
	0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x45, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4f, 0x41, 0x75,
	0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x5e, 0x0a, 0x19, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x47, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x19, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x1a, 0x50, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x36, 0x0a,
	0x14, 0x44, 0x61, 0x74, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x66, 0x75, 0x6c, 0x22, 0xa0, 0x02, 0x0a, 0x18, 0x45, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x12, 0x3a,
	0x0a, 0x0d, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x07, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x05, 0x4d, 0x65, 0x61, 0x6c, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61,
	0x6c, 0x52, 0x05, 0x4d, 0x65, 0x61, 0x6c, 0x73, 0x12, 0x5e, 0x0a, 0x19, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x19, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x3c, 0x0a, 0x24, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x3c, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x31, 0x0a, 0x19, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x1f, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x4d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x4d, 0x65, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x49, 0x44, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x73, 0x22, 0x41, 0x0a, 0x1b, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x61, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x4d, 0x61, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4d, 0x69, 0x6e, 0x22, 0x53, 0x0a, 0x2d, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4d,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4d, 0x69, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x4d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x4d, 0x61, 0x78, 0x22,
	0x9e, 0x06, 0x0a, 0x09, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x38, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a,
	0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x31, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65,
	0x31, 0x12, 0x18, 0x0a, 0x07, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x32, 0x12,
	0x3e, 0x0a, 0x1a, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1a, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x0d, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x41, 0x0a,
	0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x57,
	0x69, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x22, 0xb7, 0x02, 0x0a, 0x1d, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c,
	0x69, 0x6e, 0x65, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x32, 0x12, 0x12, 0x0a, 0x04,
	0x43, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x81, 0x03, 0x0a, 0x1c, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x38, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x42, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f,
	0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x37, 0x0a, 0x0a, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xc2,
	0x01, 0x0a, 0x30, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x42, 0x65, 0x6c, 0x6f, 0x6e,
	0x67, 0x73, 0x54, 0x6f, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x48, 0x6f,
	0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x22, 0x90, 0x01, 0x0a, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xb4, 0x04, 0x0a, 0x13, 0x48, 0x6f, 0x75, 0x73, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x6f, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x6f, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x6f, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x6f,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x6f, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x45, 0x0a, 0x14,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x73, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x14, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x08, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x22, 0xa9, 0x01,
	0x0a, 0x27, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x6f, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x6f, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x25, 0x48, 0x6f, 0x75,
	0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x22, 0x79, 0x0a, 0x1f,
	0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x4e,
	0x65, 0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e,
	0x65, 0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0xdb, 0x02, 0x0a, 0x1b, 0x48, 0x6f, 0x75, 0x73,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x31, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x6e, 0x65, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x6e, 0x65, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x5a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x22, 0x89, 0x03, 0x0a, 0x17, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a,
	0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x12, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x48, 0x6f, 0x75, 0x73,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x42, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x22, 0x9f, 0x03, 0x0a, 0x1f, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x57, 0x69, 0x74,
	0x68, 0x55, 0x73, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x32, 0x0a, 0x0d, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0d, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54,
	0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x2e, 0x0a, 0x12, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x48, 0x6f,
	0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x42,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x6f,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x22, 0x48, 0x0a, 0x24, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x22, 0x41, 0x0a,
	0x25, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0xe8, 0x03, 0x0a, 0x04, 0x4d, 0x65, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x51, 0x0a, 0x11, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61,
	0x78, 0x52, 0x11, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65,
	0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x6c, 0x69, 0x67, 0x69,
	0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0x7f, 0x0a, 0x0d, 0x4d,
	0x65, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x52, 0x06, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x87, 0x01, 0x0a,
	0x21, 0x4d, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x1f, 0x4d, 0x65, 0x61, 0x6c, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x22, 0xa2,
	0x02, 0x0a, 0x18, 0x4d, 0x65, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x51, 0x0a, 0x11, 0x45,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x52, 0x11, 0x45, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x32, 0x0a, 0x14, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x45,
	0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x73, 0x22, 0xcd, 0x04, 0x0a, 0x08, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x56, 0x6f,
	0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3a,
	0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x47, 0x72, 0x6f, 0x63, 0x65,
	0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x22, 0xe3, 0x01, 0x0a, 0x1c, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x42, 0x0a, 0x0e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x41, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xd5, 0x03, 0x0a, 0x0d, 0x4d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x41,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x41, 0x74, 0x12, 0x32, 0x0a,
	0x06, 0x45, 0x6e, 0x64, 0x73, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x45, 0x6e, 0x64, 0x73, 0x41,
	0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a,
	0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x4d, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x11, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x30, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x87, 0x02, 0x0a, 0x21, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x45, 0x6e, 0x64, 0x73, 0x41,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x06, 0x45, 0x6e, 0x64, 0x73, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x73, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x73, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x65, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xed, 0x01, 0x0a, 0x1f,
	0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x41,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x41, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x4d, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x4d, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x45, 0x6e, 0x64,
	0x73, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x45, 0x6e, 0x64, 0x73, 0x41, 0x74, 0x12, 0x2c, 0x0a,
	0x11, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67,
	0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0xf5, 0x05, 0x0a, 0x17,
	0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x2c, 0x0a, 0x11, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x64, 0x55, 0x50, 0x43, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x55, 0x50, 0x43, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x58, 0x0a, 0x18, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x18, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x2c, 0x0a, 0x11, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x0e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d,
	0x61, 0x78, 0x52, 0x0e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x12, 0x46, 0x0a, 0x0f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0f, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x22, 0x8c, 0x04, 0x0a, 0x2b, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64,
	0x55, 0x50, 0x43, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x64, 0x55, 0x50, 0x43, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f,
	0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x36, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x0e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d,
	0x61, 0x78, 0x52, 0x0e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x22, 0x9c, 0x04, 0x0a, 0x29, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47,
	0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x42, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x2c,
	0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64,
	0x12, 0x3e, 0x0a, 0x1a, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x64, 0x55, 0x50, 0x43,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x64, 0x55, 0x50, 0x43, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x5d, 0x0a, 0x0e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x0e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x65, 0x65, 0x64, 0x65,
	0x64, 0x22, 0xa2, 0x04, 0x0a, 0x0e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40,
	0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6f, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x43, 0x6f, 0x6f, 0x6b, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x2e, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x73, 0x68,
	0x77, 0x61, 0x73, 0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x73, 0x68, 0x77, 0x61, 0x73, 0x68, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67,
	0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54,
	0x6f, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x30,
	0x0a, 0x05, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x56, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x20, 0x0a, 0x04, 0x4d, 0x65, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x52, 0x04, 0x4d, 0x65,
	0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x4d, 0x65, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x43, 0x68, 0x6f, 0x73, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x65, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x54, 0x69, 0x65,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xc4, 0x01, 0x0a, 0x22, 0x4d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6f,
	0x6b, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x73,
	0x68, 0x77, 0x61, 0x73, 0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x73, 0x68, 0x77, 0x61, 0x73, 0x68, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x4d, 0x65, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x4d, 0x65, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x22, 0xfa, 0x01,
	0x0a, 0x20, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x61, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x61, 0x6c, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6f, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x43, 0x6f, 0x6f, 0x6b, 0x12, 0x2e, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x44, 0x69, 0x73, 0x68, 0x77, 0x61, 0x73, 0x68, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x73, 0x68, 0x77, 0x61,
	0x73, 0x68, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x4d, 0x65, 0x61, 0x6c, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xf2, 0x02, 0x0a, 0x12, 0x4d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74,
	0x65, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x38, 0x0a, 0x17, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x62, 0x73, 0x74, 0x61, 0x69, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x41, 0x62, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x22,
	0xc7, 0x01, 0x0a, 0x1f, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x38, 0x0a, 0x17, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x52,
	0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12,
	0x18, 0x0a, 0x07, 0x41, 0x62, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x41, 0x62, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x22, 0x67, 0x0a, 0x26, 0x4d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x56, 0x6f, 0x74,
	0x65, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x24, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x62, 0x73, 0x74, 0x61, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x41, 0x62, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x12,
	0x38, 0x0a, 0x17, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x4d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf8, 0x03, 0x0a, 0x0c, 0x4d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3e, 0x0a, 0x0e, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x02, 0x0a, 0x20, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50,
	0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x22, 0x58, 0x0a, 0x24, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73,
	0x6b, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x24,
	0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x22, 0xa6, 0x01, 0x0a, 0x1a, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x2e, 0x0a, 0x12, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x48, 0x6f,
	0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x42,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x56, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x56, 0x6f, 0x74,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xd6, 0x02, 0x0a, 0x16,
	0x4d, 0x65, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x63, 0x0a, 0x11, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d,
	0x61, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x11, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x50,
	0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x6c, 0x69, 0x67, 0x69,
	0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x5b, 0x0a, 0x0b, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x56,
	0x6f, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x22, 0x4e, 0x0a, 0x1a, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x52, 0x6f,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x6c,
	0x65, 0x22, 0x2d, 0x0a, 0x07, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x8a, 0x02, 0x0a, 0x0c, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x58, 0x0a,
	0x20, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x1c, 0x4f, 0x41, 0x75, 0x74,
	0x68, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0xd8,
	0x05, 0x0a, 0x11, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x46, 0x0a, 0x10, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x0f,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x55, 0x52, 0x49, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x55, 0x52, 0x49, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x65, 0x6c, 0x6f,
	0x6e, 0x67, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x3f, 0x0a, 0x0d,
	0x43, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x43, 0x6f, 0x64, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x43, 0x0a,
	0x0f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x41, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22, 0x54, 0x0a, 0x14, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x15, 0x0a, 0x03, 0x4d, 0x61, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00,
	0x52, 0x03, 0x4d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x4d, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x03, 0x4d, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x4d, 0x61, 0x78, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x4d, 0x69, 0x6e, 0x22,
	0x53, 0x0a, 0x13, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x4d, 0x61, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x03, 0x4d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x4d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x03, 0x4d, 0x69,
	0x6e, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x4d, 0x61, 0x78, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x4d, 0x69, 0x6e, 0x22, 0x37, 0x0a, 0x15, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x22, 0xd2, 0x02,
	0x0a, 0x12, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x52, 0x65, 0x64, 0x65,
	0x65, 0x6d, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0d,
	0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x22, 0x4c, 0x0a, 0x26, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x62, 0x0a, 0x28, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x7f, 0x0a, 0x13, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4e,
	0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a,
	0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x4f, 0x54, 0x50, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x4f, 0x54, 0x50,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xfa, 0x06, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x49, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x42, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x51, 0x0a, 0x11, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x52, 0x11, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x50,
	0x6c, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x6f,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53,
	0x6c, 0x75, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73,
	0x6b, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x09, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x53,
	0x74, 0x65, 0x70, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05,
	0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x12, 0x3c, 0x0a, 0x11, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x11, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x53, 0x65, 0x61, 0x6c, 0x4f, 0x66, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x53, 0x65, 0x61, 0x6c, 0x4f, 0x66, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62,
	0x6c, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x6c, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x61,
	0x6c, 0x73, 0x22, 0x93, 0x05, 0x0a, 0x1a, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x2e, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x64, 0x42, 0x79, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x49,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x0a, 0x11, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x6c, 0x75, 0x72,
	0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53,
	0x6c, 0x75, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x11, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33,
	0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x4d, 0x61, 0x78, 0x52, 0x11, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x70,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54,
	0x61, 0x73, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x09, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x3c,
	0x0a, 0x05, 0x53, 0x74, 0x65, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x41, 0x6c, 0x73, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x41, 0x6c, 0x73, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x6c, 0x4f, 0x66, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x53, 0x65,
	0x61, 0x6c, 0x4f, 0x66, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x10,
	0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x6c, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x6c, 0x73, 0x22, 0x40, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x72, 0x6d, 0x61, 0x69, 0x64, 0x44, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x46, 0x6f, 0x72,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xab, 0x03, 0x0a, 0x0b, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13,
	0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e,
	0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1a,
	0x0a, 0x08, 0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22,
	0x0a, 0x0c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xf7, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67,
	0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x69, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x69, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0xf5, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54,
	0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xd6, 0x05, 0x0a, 0x0e, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x38, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x5e, 0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43,
	0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x1b, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e,
	0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x12, 0x6c, 0x0a, 0x1f, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4d, 0x61, 0x78, 0x52, 0x1f, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73,
	0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12,
	0x40, 0x0a, 0x1b, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x09, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x52, 0x09, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x22, 0xba, 0x04, 0x0a, 0x22, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72,
	0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x5e, 0x0a, 0x1b, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x1b, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x12, 0x6c, 0x0a, 0x1f, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x52, 0x1f, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x1b, 0x45, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1b, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x65, 0x6c, 0x6f,
	0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x65, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0b, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x22, 0xc2, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e,
	0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x38, 0x0a, 0x17, 0x42, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70,
	0x54, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x42, 0x65, 0x6c, 0x6f,
	0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x53, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x73, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x22, 0x8c, 0x01, 0x0a, 0x26, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x30, 0x0a, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x53, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x73, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x22, 0xc4, 0x01, 0x0a, 0x24, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50,
	0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x30, 0x0a,
	0x13, 0x53, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x73, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x53, 0x61, 0x74, 0x69,
	0x73, 0x66, 0x69, 0x65, 0x73, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12,
	0x30, 0x0a, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x12, 0x38, 0x0a, 0x17, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x22, 0xa2, 0x01, 0x0a, 0x32,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74,
	0x65, 0x70, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30,
	0x0a, 0x13, 0x53, 0x61, 0x74, 0x69, 0x73, 0x66, 0x69, 0x65, 0x73, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x53, 0x61, 0x74,
	0x69, 0x73, 0x66, 0x69, 0x65, 0x73, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x22, 0xc4, 0x04, 0x0a, 0x20, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54,
	0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x1b, 0x45,
	0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1b, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5e, 0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x1b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75,
	0x73, 0x12, 0x7e, 0x0a, 0x1f, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x1f, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42, 0x65, 0x6c, 0x6f,
	0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72,
	0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x09, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x65, 0x70, 0x73, 0x22, 0xd2, 0x04, 0x0a, 0x2e, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x5e, 0x0a, 0x1b, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x1b, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x12, 0x6c, 0x0a, 0x1f, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x52, 0x1f, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x40, 0x0a, 0x1b, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x65, 0x6c, 0x6f,
	0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x65, 0x70, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x0b, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0xae, 0x03, 0x0a,
	0x0c, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x61, 0x73, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x54, 0x61, 0x73, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x4f, 0x76, 0x65, 0x72,
	0x61, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x12, 0x1e, 0x0a,
	0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x22, 0xfa, 0x01,
	0x0a, 0x20, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x61, 0x73, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x54, 0x61, 0x73,
	0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x07, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0c,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x22, 0xf8, 0x01, 0x0a, 0x1e, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x61, 0x73,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x54, 0x61, 0x73, 0x74, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x4f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x22, 0xba, 0x08, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x53,
	0x0a, 0x16, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x16, 0x45, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x14, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x14, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65,
	0x6c, 0x73, 0x69, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x12, 0x35, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x56,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x07, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x12,
	0x59, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x6c, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x6c, 0x79, 0x22, 0xe6, 0x03, 0x0a, 0x1d, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a,
	0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x0f,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54,
	0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x0b,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x0b, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0xe7, 0x01, 0x0a, 0x31,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12,
	0x30, 0x0a, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0xce, 0x02, 0x0a, 0x42, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73,
	0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x76, 0x0a, 0x0b, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0b, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0xfd, 0x02, 0x0a, 0x27, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x56, 0x0a, 0x26, 0x42, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x26, 0x42, 0x65, 0x6c, 0x6f,
	0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x4c, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x46, 0x6f, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x2f,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x30, 0x0a,
	0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65, 0x6c, 0x6f,
	0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12,
	0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x22, 0xff, 0x06, 0x0a, 0x1e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x53, 0x0a, 0x16, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x16, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x14, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x14, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x45, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x52, 0x0a,
	0x0b, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x0b, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x46, 0x0a, 0x07, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x07, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x12, 0x49, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x0b, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0b, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x6d, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a,
	0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x6c, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61,
	0x6c, 0x6c, 0x79, 0x22, 0xd8, 0x06, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x37, 0x0a, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x56,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x36, 0x0a,
	0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x55, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e,
	0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a,
	0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4d, 0x61, 0x78, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x46,
	0x0a, 0x0f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x74, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x74, 0x65, 0x22, 0x97,
	0x05, 0x0a, 0x28, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x3a, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x48, 0x0a, 0x1f, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x1f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x66, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x56, 0x65, 0x73, 0x73,
	0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x36, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x55, 0x73,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x12,
	0x3c, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x19, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a,
	0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x3f, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x74, 0x65, 0x22, 0x85, 0x05, 0x0a, 0x26, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a,
	0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e,
	0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x51, 0x0a, 0x08, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20,
	0x0a, 0x0b, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x18, 0x0a, 0x07, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x54, 0x6f, 0x54, 0x61, 0x73, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x55, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x55,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44,
	0x22, 0xcb, 0x04, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0d,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30,
	0x0a, 0x13, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67,
	0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x52, 0x08,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61,
	0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0xd6,
	0x03, 0x0a, 0x28, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x30, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x3a, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x66, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x18, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x66, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x48, 0x0a,
	0x1f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f,
	0x66, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3e, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x52, 0x08, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12,
	0x26, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e,
	0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0x92, 0x03, 0x0a, 0x26, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67,
	0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x50, 0x0a, 0x08, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xee, 0x06, 0x0a,
	0x11, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x5e, 0x0a, 0x1b,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x1b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x18,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x18, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x46, 0x0a,
	0x0f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x0f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x49, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64,
	0x49, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x57, 0x61, 0x73, 0x74, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x57, 0x61, 0x73, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x49, 0x73, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x49, 0x73, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xee, 0x04,
	0x0a, 0x25, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x5e, 0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43,
	0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x1b, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e,
	0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x18, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x38, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x49, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x24, 0x0a, 0x0d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x4c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x4c, 0x69,
	0x71, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x57, 0x61, 0x73, 0x74, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x57, 0x61, 0x73, 0x74, 0x65, 0x22, 0x9e,
	0x05, 0x0a, 0x23, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x11, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x12, 0x5e, 0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73,
	0x69, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x1b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c,
	0x73, 0x69, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x18, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x38, 0x0a,
	0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49,
	0x73, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49,
	0x73, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x57, 0x61, 0x73,
	0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x57, 0x61, 0x73, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x49, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x93, 0x04, 0x0a, 0x1c, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x53, 0x0a, 0x16, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x16, 0x45,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x50, 0x0a, 0x14, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x14, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e,
	0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x3a, 0x0a,
	0x0b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1a, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x45,
	0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x45, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x30, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x72, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x42,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x22, 0xb7, 0x04, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x06, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x06, 0x56, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e,
	0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x65, 0x73,
	0x73, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x55,
	0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53,
	0x74, 0x65, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x55, 0x6e, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x22,
	0xc6, 0x03, 0x0a, 0x24, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x18, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x48, 0x0a, 0x1f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x1f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x66, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1a, 0x0a, 0x08, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x08,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d,
	0x61, 0x78, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x50, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x22, 0x82, 0x03, 0x0a, 0x22, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x30, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x42,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67,
	0x73, 0x54, 0x6f, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x1a, 0x0a,
	0x08, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x50, 0x0a, 0x08, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x56,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x50, 0x72,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x14, 0x55, 0x6e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x55, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x22, 0xe7, 0x03,
	0x0a, 0x18, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c,
	0x75, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12,
	0x49, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x49, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x42, 0x79, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x53, 0x65, 0x61, 0x6c, 0x4f, 0x66, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x53, 0x65, 0x61, 0x6c, 0x4f, 0x66, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x12, 0x63, 0x0a, 0x11, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4d, 0x61, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x11, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6f, 0x72,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x50,
	0x6c, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x50, 0x6f,
	0x72, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x6c, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72,
	0x4d, 0x65, 0x61, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5b, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x49, 0x44, 0x22, 0x88, 0x03, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x22,
	0xa7, 0x03, 0x0a, 0x1b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x65, 0x6c, 0x6f,
	0x6e, 0x67, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x42, 0x65, 0x6c,
	0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f,
	0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3e, 0x0a, 0x0e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0xdf, 0x01, 0x0a, 0x2f, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73,
	0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x42,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73,
	0x54, 0x6f, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xdd, 0x01, 0x0a, 0x2d,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73,
	0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x65,
	0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x42,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73,
	0x54, 0x6f, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x22,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x4f, 0x6e, 0x6c, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x73, 0x4f, 0x6e,
	0x6c, 0x79, 0x22, 0x60, 0x0a, 0x16, 0x54, 0x4f, 0x54, 0x50, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x4f, 0x54, 0x50, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x4f, 0x54, 0x50, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x6f, 0x0a, 0x19, 0x54, 0x4f, 0x54, 0x50, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x51, 0x52,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x77, 0x6f, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54,
	0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x53, 0x0a, 0x1b, 0x54, 0x4f, 0x54, 0x50, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x4f, 0x54, 0x50, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x4f, 0x54, 0x50, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x3c, 0x0a, 0x1e, 0x54, 0x4f,
	0x54, 0x50, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x0d, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x22, 0x40, 0x0a, 0x1a, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x12, 0x10,
	0x0a, 0x03, 0x4d, 0x61, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x4d, 0x61, 0x78,
	0x12, 0x10, 0x0a, 0x03, 0x4d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x4d,
	0x69, 0x6e, 0x22, 0x52, 0x0a, 0x2c, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x4d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x4d, 0x61, 0x78, 0x22, 0x40, 0x0a, 0x1a, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4d, 0x61, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x61, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x4d, 0x61, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x4d, 0x69, 0x6e, 0x22, 0x52, 0x0a, 0x2c, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x4d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x61,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x4d, 0x61, 0x78, 0x22, 0xe2, 0x08, 0x0a,
	0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x50, 0x0a, 0x15, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x5a, 0x0a, 0x1a, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x1a, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x58, 0x0a, 0x19, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x19,
	0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x58, 0x0a, 0x19, 0x54, 0x77, 0x6f,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x19, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x72, 0x63,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x53, 0x72,
	0x63, 0x12, 0x36, 0x0a, 0x08, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x77, 0x6f, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x48,
	0x61, 0x73, 0x68, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x52, 0x0a, 0x16, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x16, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x73, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x73, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x22, 0x78, 0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xa2, 0x03, 0x0a, 0x14,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x36,
	0x0a, 0x08, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x42, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f,
	0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x6e, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x22, 0xc0, 0x01, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x04, 0x43, 0x6f, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43,
	0x6f, 0x72, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x43, 0x6f, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x45,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x45,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x22, 0x38, 0x0a, 0x1a, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x22, 0x92, 0x01,
	0x0a, 0x1e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x36, 0x0a, 0x08, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xd9, 0x01, 0x0a, 0x1d, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36,
	0x0a, 0x08, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x42, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x4f, 0x54, 0x50, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x4f, 0x54, 0x50, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8f,
	0x01, 0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4e, 0x65, 0x77, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x4f, 0x54, 0x50, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x4f, 0x54, 0x50, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x89, 0x03, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x42,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x37, 0x0a, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x22, 0xdc, 0x01, 0x0a,
	0x2c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x36, 0x0a,
	0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x22, 0x98, 0x01, 0x0a, 0x2a,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x41,
	0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x22, 0x66, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x54, 0x4f, 0x54, 0x50, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x4f, 0x54, 0x50, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xf6,
	0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a,
	0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67,
	0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x22, 0x7e, 0x0a, 0x24, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67,
	0x73, 0x54, 0x6f, 0x55, 0x73, 0x65, 0x72, 0x22, 0x3c, 0x0a, 0x22, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3f, 0x0a, 0x1b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xad, 0x01, 0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb1, 0x03, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x36, 0x0a, 0x08, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x54, 0x4f,
	0x53, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x54, 0x4f, 0x53, 0x12, 0x34, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xea, 0x01, 0x0a, 0x12, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3a, 0x0a, 0x18, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x18, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x48, 0x6f, 0x75, 0x73,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73, 0x41,
	0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x55, 0x73, 0x65, 0x72, 0x49, 0x73, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x22, 0x42, 0x0a, 0x1c, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x7f, 0x0a, 0x13, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x4f, 0x54, 0x50, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x54, 0x4f, 0x54, 0x50, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xd3, 0x0a, 0x0a,
	0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x5e, 0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e,
	0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x1b, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1e,
	0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x68,
	0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x66, 0x69, 0x73,
	0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x66, 0x69, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73,
	0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x50, 0x65, 0x61, 0x6e, 0x75, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x50, 0x65, 0x61, 0x6e, 0x75, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x75,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x45, 0x67, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x45, 0x67, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x68, 0x65, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x68, 0x65, 0x61, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x6f, 0x79, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53,
	0x6f, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x44, 0x65, 0x72, 0x69,
	0x76, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x41, 0x6e, 0x69, 0x6d, 0x61,
	0x6c, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x65, 0x73, 0x61,
	0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x53, 0x65, 0x73, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x46, 0x69, 0x73, 0x68, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x46, 0x69, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x47, 0x6c, 0x75, 0x74, 0x65, 0x6e, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x47, 0x6c,
	0x75, 0x74, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
	0x44, 0x61, 0x69, 0x72, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x73, 0x44, 0x61, 0x69, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x6c, 0x63,
	0x6f, 0x68, 0x6f, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x46, 0x6c,
	0x65, 0x73, 0x68, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x41, 0x6e, 0x69, 0x6d, 0x61,
	0x6c, 0x46, 0x6c, 0x65, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x53, 0x74, 0x61, 0x72,
	0x63, 0x68, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x53, 0x74, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x49, 0x73, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73,
	0x46, 0x72, 0x75, 0x69, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x46,
	0x72, 0x75, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x53, 0x61, 0x6c, 0x74, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x49, 0x73, 0x46, 0x61, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49, 0x73, 0x46,
	0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x41, 0x63, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x41, 0x63, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73,
	0x48, 0x65, 0x61, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x48, 0x65,
	0x61, 0x74, 0x22, 0x9f, 0x09, 0x0a, 0x23, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x5e, 0x0a, 0x1b, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x1b, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x30, 0x0a, 0x13,
	0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x68, 0x6f, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x46, 0x69, 0x73, 0x68, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x46, 0x69,
	0x73, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x68,
	0x65, 0x6c, 0x6c, 0x66, 0x69, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x66, 0x69, 0x73, 0x68,
	0x12, 0x20, 0x0a, 0x0b, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x46, 0x6c, 0x65, 0x73, 0x68, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x46, 0x6c, 0x65,
	0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x45, 0x67,
	0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x45, 0x67, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x6f, 0x79, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53,
	0x6f, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x50, 0x65,
	0x61, 0x6e, 0x75, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x50, 0x65, 0x61, 0x6e, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x6e,
	0x69, 0x6d, 0x61, 0x6c, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x36, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x44, 0x61, 0x69, 0x72, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x44, 0x61, 0x69, 0x72, 0x79, 0x12, 0x26,
	0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x65, 0x73, 0x61, 0x6d, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
	0x53, 0x65, 0x73, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x68, 0x65, 0x61,
	0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x57, 0x68, 0x65, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c,
	0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x47, 0x6c, 0x75, 0x74,
	0x65, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x47, 0x6c, 0x75, 0x74, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x53, 0x74,
	0x61, 0x72, 0x63, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x53, 0x74,
	0x61, 0x72, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69,
	0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x73, 0x46, 0x72, 0x75, 0x69, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49,
	0x73, 0x46, 0x72, 0x75, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x53, 0x61, 0x6c, 0x74,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x49, 0x73, 0x46, 0x61, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x49,
	0x73, 0x46, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x41, 0x63, 0x69, 0x64, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x41, 0x63, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x49, 0x73, 0x48, 0x65, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73,
	0x48, 0x65, 0x61, 0x74, 0x22, 0xe6, 0x02, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x38, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3c, 0x0a, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0xc6, 0x01,
	0x0a, 0x28, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c,
	0x75, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x07, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x07, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x8d, 0x02, 0x0a, 0x1a, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x42,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x41, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x5e, 0x0a, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x72, 0x0a, 0x26, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd2, 0x03, 0x0a, 0x1e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x38, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x51, 0x0a, 0x11, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x52, 0x11, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x46,
	0x0a, 0x0f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0f, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x22,
	0x83, 0x02, 0x0a, 0x32, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x51, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d,
	0x61, 0x78, 0x52, 0x11, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x93, 0x02, 0x0a, 0x30, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x36, 0x0a, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x63, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61,
	0x62, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x11, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61,
	0x62, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xef, 0x02, 0x0a, 0x1a,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xa4, 0x01,
	0x0a, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x22, 0xa2, 0x01, 0x0a, 0x2c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x88, 0x03, 0x0a, 0x14, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61,
	0x73, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50,
	0x61, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63,
	0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63,
	0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x53, 0x6c, 0x75, 0x67, 0x22, 0xd4, 0x01, 0x0a, 0x28, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x73,
	0x74, 0x54, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61,
	0x73, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x22, 0xff, 0x02, 0x0a, 0x1e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x46, 0x0a, 0x0f,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x22, 0xb0, 0x01,
	0x0a, 0x32, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x22, 0xae, 0x01, 0x0a, 0x30, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x16, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x22, 0xd2, 0x01, 0x0a, 0x26, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x53, 0x6c, 0x75, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x73, 0x74, 0x54, 0x65, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63,
	0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63,
	0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x22, 0x9d, 0x09, 0x0a, 0x21, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x44, 0x61, 0x69, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x44, 0x61, 0x69, 0x72, 0x79, 0x12, 0x26,
	0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x50, 0x65, 0x61, 0x6e, 0x75, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
	0x50, 0x65, 0x61, 0x6e, 0x75, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x75, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x45, 0x67, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x45,
	0x67, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x57, 0x68,
	0x65, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x73, 0x57, 0x68, 0x65, 0x61, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x66, 0x69, 0x73, 0x68, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x68, 0x65,
	0x6c, 0x6c, 0x66, 0x69, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x53, 0x65, 0x73, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x65, 0x73, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x46, 0x69, 0x73, 0x68, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x46, 0x69,
	0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x47, 0x6c,
	0x75, 0x74, 0x65, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x47, 0x6c, 0x75, 0x74, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x6e,
	0x69, 0x6d, 0x61, 0x6c, 0x46, 0x6c, 0x65, 0x73, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x46, 0x6c, 0x65, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x49, 0x73, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x49, 0x73, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x73, 0x53, 0x6f, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x53, 0x6f, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c,
	0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x6e,
	0x69, 0x6d, 0x61, 0x6c, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x41, 0x6e, 0x69, 0x6d, 0x61, 0x6c, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64,
	0x12, 0x36, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e,
	0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x1b, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49,
	0x6e, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c,
	0x75, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x28,
	0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f,
	0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x73, 0x41, 0x6c, 0x63, 0x6f, 0x68, 0x6f, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x53, 0x68, 0x6f, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x53, 0x68, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73,
	0x53, 0x74, 0x61, 0x72, 0x63, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73,
	0x53, 0x74, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x69, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x47, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x49, 0x73, 0x46, 0x72, 0x75, 0x69, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x49, 0x73, 0x46, 0x72, 0x75, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x53, 0x61,
	0x6c, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x53, 0x61, 0x6c, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x49, 0x73, 0x46, 0x61, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x49, 0x73, 0x46, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x41, 0x63, 0x69, 0x64,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x41, 0x63, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x49, 0x73, 0x48, 0x65, 0x61, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x49, 0x73, 0x48, 0x65, 0x61, 0x74, 0x22, 0x89, 0x04, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x34, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x49, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x49, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x46,
	0x0a, 0x1e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49,
	0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x22, 0xd5, 0x02, 0x0a, 0x23, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x53, 0x6c, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67,
	0x12, 0x34, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x1e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x49, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a,
	0x0a, 0x10, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0xd3, 0x02, 0x0a, 0x21, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x15, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x1e, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x49, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xd6, 0x03, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1a, 0x0a,
	0x08, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0xc1, 0x03, 0x0a, 0x1e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x45, 0x0a, 0x11, 0x4f, 0x6e, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x4f, 0x6e, 0x6c, 0x79, 0x46, 0x6f,
	0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x30, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x2c, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x02, 0x54,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x08, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xb8, 0x01,
	0x0a, 0x32, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x6e, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x4f, 0x6e, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x54, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xb6, 0x01, 0x0a, 0x30, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x72, 0x6f,
	0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x54,
	0x6f, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x6e, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4f, 0x6e,
	0x6c, 0x79, 0x46, 0x6f, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x22, 0xa2, 0x02, 0x0a, 0x28, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x53, 0x6c, 0x75, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6d,
	0x70, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x6d,
	0x70, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x22, 0xa0, 0x02, 0x0a, 0x26, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6d, 0x70,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x6d, 0x70,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x22, 0x94, 0x07, 0x0a, 0x10, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31,
	0x36, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x4d, 0x61, 0x78, 0x52, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x4d, 0x61, 0x78, 0x52, 0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x52, 0x0b, 0x56,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x73,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x73, 0x74, 0x54, 0x65, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x34, 0x0a, 0x15,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x56, 0x65, 0x73, 0x73,
	0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x6e, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x56, 0x65, 0x73,
	0x73, 0x65, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x4f, 0x6e, 0x6c, 0x79,
	0x46, 0x6f, 0x72, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x22, 0xe0, 0x05, 0x0a, 0x24, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x31, 0x36, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x52, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x4d, 0x61, 0x78, 0x52, 0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61, 0x78, 0x52, 0x0b,
	0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49,
	0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49,
	0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x73, 0x74, 0x54,
	0x65, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x73, 0x74,
	0x54, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x30, 0x0a, 0x13, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x32, 0x0a, 0x14, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x73, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x12,
	0x26, 0x0a, 0x0e, 0x4f, 0x6e, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x4f, 0x6e, 0x6c, 0x79, 0x46, 0x6f, 0x72,
	0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x54, 0x6f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4e, 0x6f, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x22, 0xef, 0x02, 0x0a, 0x1a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a,
	0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x37, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2e,
	0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x2c,
	0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xa2, 0x01, 0x0a,
	0x2c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x22, 0x94, 0x06, 0x0a, 0x22, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x5e, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31,
	0x36, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x4d, 0x61, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0f, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x0f, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31,
	0x36, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x4d, 0x61, 0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x0f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x0b, 0x56, 0x65, 0x73, 0x73,
	0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x61,
	0x78, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x0b, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x59, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x4e, 0x6f, 0x74, 0x68,
	0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x59, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x34, 0x0a, 0x15,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x73, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x6e, 0x6c, 0x79, 0x46, 0x6f, 0x72, 0x56, 0x65, 0x73, 0x73, 0x65,
	0x6c, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x4f, 0x6e, 0x6c, 0x79, 0x46, 0x6f,
	0x72, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x22, 0xdf, 0x02, 0x0a, 0x16, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73,
	0x73, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a,
	0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x06, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73,
	0x65, 0x6c, 0x52, 0x06, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x22, 0x98, 0x01, 0x0a, 0x2a, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73,
	0x73, 0x65, 0x6c, 0x49, 0x44, 0x22, 0x96, 0x01, 0x0a, 0x28, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x22, 0x8d,
	0x06, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x12, 0x38,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0c, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c,
	0x75, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x68, 0x61, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d,
	0x69, 0x6c, 0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x12, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x49, 0x6e,
	0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x13, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x13, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x4d, 0x69, 0x6c,
	0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x1e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49,
	0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x15,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x55, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x22, 0xbf,
	0x04, 0x0a, 0x1f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a,
	0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x13, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6c,
	0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x4d,
	0x69, 0x6c, 0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49,
	0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x12, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x46, 0x0a, 0x1e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x49, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x49, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x73,
	0x22, 0xbd, 0x04, 0x0a, 0x1d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x72, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x75, 0x72,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x63, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x63, 0x6f, 0x6e,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f,
	0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x55, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x53, 0x6c, 0x75, 0x67, 0x12, 0x34, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49,
	0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x1e, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x26,
	0x0a, 0x0e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49,
	0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x12, 0x57, 0x69, 0x64, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x13, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x49, 0x6e, 0x4d, 0x69, 0x6c,
	0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e, 0x4d,
	0x69, 0x6c, 0x6c, 0x69, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x22, 0x96, 0x03, 0x0a, 0x07, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x38, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x1b, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52,
	0x4c, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0xcb, 0x01, 0x0a, 0x17, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x07, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x6f, 0x75,
	0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22,
	0xeb, 0x01, 0x0a, 0x13, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2a, 0x0a,
	0x10, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73,
	0x54, 0x6f, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x79, 0x0a,
	0x27, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x65, 0x6c, 0x6f,
	0x6e, 0x67, 0x73, 0x54, 0x6f, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x57, 0x65, 0x62,
	0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x7b, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x12,
	0x34, 0x0a, 0x15, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x5c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x49, 0x44, 0x22, 0x98, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x3e,
	0x0a, 0x1a, 0x53, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x6f, 0x75, 0x73,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x22, 0xb9,
	0x01, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x4a,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x20, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x15, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x6f,
	0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x20, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x15, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x43, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x6f,
	0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x75, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x22, 0x45, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73,
	0x73, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x3d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x56,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x22, 0x4d, 0x0a, 0x1d, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x38, 0x0a, 0x16, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44,
	0x22, 0x5c, 0x0a, 0x2d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xa1,
	0x01, 0x0a, 0x3a, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x42, 0x79, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x44, 0x22, 0x3b, 0x0a, 0x17, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x48, 0x6f, 0x75,
	0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x22,
	0x7e, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x42, 0x79, 0x56,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x22,
	0x5c, 0x0a, 0x22, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x22, 0x41, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0x4f, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0x32, 0x0a, 0x14, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x49, 0x44, 0x22, 0x40, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x50, 0x0a, 0x1e, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x91, 0x01, 0x0a, 0x1d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x71, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x22, 0x97, 0x01, 0x0a, 0x2a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01,
	0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x59, 0x0a, 0x1c, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x01, 0x71, 0x22, 0x94, 0x01, 0x0a, 0x1c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x77, 0x0a, 0x21,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x44, 0x12,
	0x34, 0x0a, 0x15, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x52, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x37, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x49, 0x44, 0x22, 0xa1, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44,
	0x12, 0x44, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x58, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44,
	0x22, 0x2e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44,
	0x22, 0x54, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x91, 0x01, 0x0a, 0x32, 0x47, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x90, 0x01, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x8f, 0x02,
	0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x6d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22,
	0x68, 0x0a, 0x26, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x22, 0x46, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x22, 0x4a, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x52, 0x0a,
	0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x4d, 0x65, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01,
	0x71, 0x22, 0x7a, 0x0a, 0x2c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4a, 0x0a, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x7c, 0x0a,
	0x2d, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63,
	0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x46, 0x6f, 0x72, 0x4d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x22, 0x4e, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x3f, 0x0a, 0x21, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x72, 0x6d, 0x61, 0x69, 0x64, 0x44, 0x69, 0x61, 0x67, 0x72, 0x61, 0x6d,
	0x46, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x22, 0x49, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x85, 0x01, 0x0a, 0x25, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x76, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65,
	0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x44, 0x12, 0x3c, 0x0a, 0x19, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f,
	0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72,
	0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x22,
	0x6a, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xb3, 0x01, 0x0a, 0x27,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x48, 0x0a, 0x1f, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x22, 0x98, 0x01, 0x0a, 0x31, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0x67, 0x0a, 0x1b,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xb1, 0x01, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x12,
	0x48, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x39, 0x0a, 0x17, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x49, 0x44, 0x22, 0x54, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xe1, 0x01, 0x0a, 0x21, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44,
	0x12, 0x36, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0xa5,
	0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49,
	0x44, 0x12, 0x43, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0xde, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x44, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x51, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x6e, 0x74, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x4a, 0x0a, 0x1c, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x22, 0x52, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01,
	0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x22, 0x58, 0x0a, 0x1e, 0x47, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x22, 0xa1, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x12, 0x44, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x22, 0x47, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x44, 0x22, 0xd1, 0x01, 0x0a,
	0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x2e,
	0x0a, 0x12, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73,
	0x65, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x40,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x22, 0x49, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x66, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x49, 0x44, 0x22, 0x4e, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0xa5, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x60, 0x0a, 0x1a, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x22, 0x58, 0x0a,
	0x1c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x35, 0x0a, 0x15, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x44, 0x22, 0x2c,
	0x0a, 0x12, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xa9, 0x01, 0x0a,
	0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44,
	0x12, 0x46, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x1f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e,
	0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x54, 0x0a,
	0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x01, 0x71, 0x22, 0x5c, 0x0a, 0x22, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x22, 0x8e, 0x01, 0x0a, 0x31, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x22, 0x76, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a,
	0x0a, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x28, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x5c, 0x0a, 0x22, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x49, 0x44, 0x22, 0x8e, 0x01, 0x0a, 0x31, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x22, 0x92, 0x01, 0x0a, 0x35, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xcd, 0x01, 0x0a, 0x24, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65,
	0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x44, 0x12, 0x3c, 0x0a, 0x19, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f,
	0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72,
	0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x12,
	0x47, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3e,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x7a,
	0x0a, 0x2c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a,
	0x0a, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x9d, 0x01, 0x0a, 0x19, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x4d, 0x0a, 0x1d, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x7d, 0x0a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x58, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0x50, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x22, 0x76, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4a, 0x0a, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x56, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x49, 0x44, 0x22, 0x5a, 0x0a, 0x18, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44,
	0x22, 0xcc, 0x01, 0x0a, 0x20, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x14, 0x6d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74,
	0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x44, 0x22,
	0x67, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x22, 0x62, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44,
	0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0x49, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x5d, 0x0a, 0x20, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x46, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x22, 0x60, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44,
	0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0x8b, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x22, 0x87, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x49, 0x44, 0x12, 0x45, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x22, 0x43, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x58, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22,
	0x49, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xc1, 0x01, 0x0a, 0x29, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x1e, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1e, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x44,
	0x12, 0x4c, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x4e,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xab,
	0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x49, 0x44, 0x12, 0x46, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x85, 0x02, 0x0a,
	0x2a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x48, 0x0a, 0x1f, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x4d, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x22, 0x77, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x3e, 0x0a,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x30, 0x0a,
	0x12, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x22,
	0x54, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x22,
	0x56, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xd5, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x41, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22,
	0x3e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22,
	0xce, 0x01, 0x0a, 0x2a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x60,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4a, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x22, 0x5e, 0x0a, 0x1a, 0x46, 0x65, 0x74, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x44,
	0x22, 0x58, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x34, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44,
	0x22, 0x3e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0x5e, 0x0a, 0x21, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71,
	0x22, 0x9c, 0x01, 0x0a, 0x22, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22,
	0x40, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x61, 0x75,
	0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x22, 0x62, 0x0a, 0x25, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x01, 0x71, 0x22, 0x69, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x22, 0xb7, 0x01, 0x0a, 0x2b, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44,
	0x12, 0x48, 0x0a, 0x1f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xbd, 0x01, 0x0a, 0x28, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x4b, 0x0a,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x9d, 0x01, 0x0a, 0x27, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x38, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x7a, 0x0a, 0x2c, 0x41, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x20, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0x8c, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56, 0x65, 0x73,
	0x73, 0x65, 0x6c, 0x49, 0x44, 0x22, 0x44, 0x0a, 0x1a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65,
	0x4f, 0x41, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x32, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x61, 0x75,
	0x74, 0x68, 0x32, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x6a, 0x0a, 0x24, 0x47,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x84, 0x01, 0x0a, 0x21, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x12,
	0x3d, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x4a,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x8f, 0x01, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x22, 0x93, 0x01, 0x0a,
	0x1f, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44,
	0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x72,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x22, 0xa1, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44,
	0x12, 0x44, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x5e, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73,
	0x73, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x22, 0x48, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0x96, 0x01, 0x0a, 0x2f, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x36, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0x92, 0x01, 0x0a, 0x35, 0x47, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x42, 0x79, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x62,
	0x0a, 0x24, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c,
	0x49, 0x44, 0x22, 0x7b, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12,
	0x3e, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22,
	0x4c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x12, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x62, 0x0a,
	0x25, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01,
	0x71, 0x22, 0x8d, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x3f, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x22, 0x60, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74,
	0x65, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x49, 0x44, 0x22, 0x6e, 0x0a, 0x28, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x42, 0x0a, 0x1c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x22, 0x66, 0x0a, 0x1c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12,
	0x2a, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0x62, 0x0a, 0x25, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x22,
	0x74, 0x0a, 0x2a, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a,
	0x1e, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x49, 0x44, 0x22, 0x55, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x75, 0x73,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x6b, 0x0a, 0x20,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x46, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x22, 0xa9, 0x01, 0x0a, 0x1b, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x9c, 0x01, 0x0a, 0x22, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x22, 0xab, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x46, 0x0a, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x22, 0x31, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x49, 0x44, 0x22, 0x8e, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x22, 0x95, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70,
	0x49, 0x44, 0x12, 0x3a, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x63,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x22, 0xa1, 0x01, 0x0a, 0x3a, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x36, 0x0a, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x22, 0xa3, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73,
	0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x90, 0x01,
	0x0a, 0x1e, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53,
	0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44,
	0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44,
	0x22, 0x8d, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x3f, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x22, 0x7d, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x3f,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22,
	0x2c, 0x0a, 0x12, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x61, 0x6c, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x61, 0x6c, 0x49, 0x44, 0x22, 0xa4, 0x01,
	0x0a, 0x2b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x1f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x20, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x43, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48,
	0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x44, 0x12, 0x45, 0x0a, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c,
	0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x19, 0x6d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x22, 0x55, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x8a, 0x01,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x56,
	0x65, 0x73, 0x73, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x22, 0xc9, 0x01, 0x0a, 0x2b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x20, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x4e, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65,
	0x73, 0x73, 0x65, 0x6c, 0x73, 0x42, 0x79, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50,
	0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x28, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x61, 0x6c,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x61, 0x6c, 0x49, 0x44,
	0x22, 0x4c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xc2,
	0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a,
	0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x22, 0x91, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x5c, 0x0a, 0x1f, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x01, 0x71, 0x22, 0x73, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x1b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x44, 0x12, 0x3e, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x22, 0x70, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f,
	0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x1e,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68,
	0x69, 0x70, 0x49, 0x44, 0x22, 0x61, 0x0a, 0x32, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x41, 0x0a, 0x19, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x56, 0x65, 0x73,
	0x73, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x56, 0x65, 0x73, 0x73, 0x65, 0x6c, 0x49, 0x44, 0x22, 0xc9, 0x01, 0x0a, 0x2b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x20, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x12, 0x4e, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x8e, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65,
	0x70, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x22, 0xc8, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x65, 0x61, 0x6c,
	0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x32,
	0x0a, 0x14, 0x6d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x56, 0x6f, 0x74, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x65,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x74, 0x65,
	0x49, 0x44, 0x22, 0x99, 0x01, 0x0a, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x42, 0x79, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71,
	0x12, 0x2c, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x6e,
	0x0a, 0x28, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xb9,
	0x01, 0x0a, 0x27, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e,
	0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x4a,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0xc9, 0x01, 0x0a, 0x2b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x20, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x4e, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x76, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4a, 0x0a, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65,
	0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x20, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x44, 0x22, 0x4e,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x46, 0x6f,
	0x72, 0x48, 0x6f, 0x75, 0x73, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x7b,
	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72,
	0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x3b, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x22, 0x64, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x22, 0x5d,
	0x0a, 0x20, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x0c, 0x0a, 0x01, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x22, 0x91, 0x01,
	0x0a, 0x32, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x42, 0x79, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x2e, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x22, 0x71, 0x0a, 0x29, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44,
	0x0a, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x22, 0xe1, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16, 0x72, 0x65,
	0x63, 0x69, 0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x44, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x65, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x46, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x44,
	0x22, 0x91, 0x01, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x61, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x61,
	0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x49, 0x0a, 0x05, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x4d, 0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x47, 0x72, 0x6f, 0x63, 0x65, 0x72,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x64, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x64, 0x6f, 0x6e, 0x65, 0x62, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_messages_proto_rawDescOnce sync.Once
	file_messages_proto_rawDescData []byte
)

func file_messages_proto_rawDescGZIP() []byte {
	file_messages_proto_rawDescOnce.Do(func() {
		file_messages_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_messages_proto_rawDesc), len(file_messages_proto_rawDesc)))
	})
	return file_messages_proto_rawDescData
}

var file_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 402)
var file_messages_proto_goTypes = []any{
	(*QueryFilter)(nil),                                      // 0: eating.QueryFilter
	(*ArbitraryQueueMessageRequestInput)(nil),                // 1: eating.ArbitraryQueueMessageRequestInput
	(*ArbitraryQueueMessageResponse)(nil),                    // 2: eating.ArbitraryQueueMessageResponse
	(*AuditLogEntry)(nil),                                    // 3: eating.AuditLogEntry
	(*AvatarUpdateInput)(nil),                                // 4: eating.AvatarUpdateInput
	(*ChangeActiveHouseholdInput)(nil),                       // 5: eating.ChangeActiveHouseholdInput
	(*ChangeLog)(nil),                                        // 6: eating.ChangeLog
	(*CoreUserDataCollection)(nil),                           // 7: eating.CoreUserDataCollection
	(*CreateMealPlanTasksRequest)(nil),                       // 8: eating.CreateMealPlanTasksRequest
	(*CreateMealPlanTasksResponse)(nil),                      // 9: eating.CreateMealPlanTasksResponse
	(*DataChangeMessage)(nil),                                // 10: eating.DataChangeMessage
	(*DataDeletionResponse)(nil),                             // 11: eating.DataDeletionResponse
	(*EatingUserDataCollection)(nil),                         // 12: eating.EatingUserDataCollection
	(*EmailAddressVerificationRequestInput)(nil),             // 13: eating.EmailAddressVerificationRequestInput
	(*FinalizeMealPlansRequest)(nil),                         // 14: eating.FinalizeMealPlansRequest
	(*FinalizeMealPlansResponse)(nil),                        // 15: eating.FinalizeMealPlansResponse
	(*FinalizedMealPlanDatabaseResult)(nil),                  // 16: eating.FinalizedMealPlanDatabaseResult
	(*Float32RangeWithOptionalMax)(nil),                      // 17: eating.Float32RangeWithOptionalMax
	(*Float32RangeWithOptionalMaxUpdateRequestInput)(nil),    // 18: eating.Float32RangeWithOptionalMaxUpdateRequestInput
	(*Household)(nil),                                        // 19: eating.Household
	(*HouseholdCreationRequestInput)(nil),                    // 20: eating.HouseholdCreationRequestInput
	(*HouseholdInstrumentOwnership)(nil),                     // 21: eating.HouseholdInstrumentOwnership
	(*HouseholdInstrumentOwnershipCreationRequestInput)(nil), // 22: eating.HouseholdInstrumentOwnershipCreationRequestInput
	(*HouseholdInstrumentOwnershipUpdateRequestInput)(nil),   // 23: eating.HouseholdInstrumentOwnershipUpdateRequestInput
	(*HouseholdInvitation)(nil),                              // 24: eating.HouseholdInvitation
	(*HouseholdInvitationCreationRequestInput)(nil),          // 25: eating.HouseholdInvitationCreationRequestInput
	(*HouseholdInvitationUpdateRequestInput)(nil),            // 26: eating.HouseholdInvitationUpdateRequestInput
	(*HouseholdOwnershipTransferInput)(nil),                  // 27: eating.HouseholdOwnershipTransferInput
	(*HouseholdUpdateRequestInput)(nil),                      // 28: eating.HouseholdUpdateRequestInput
	(*HouseholdUserMembership)(nil),                          // 29: eating.HouseholdUserMembership
	(*HouseholdUserMembershipWithUser)(nil),                  // 30: eating.HouseholdUserMembershipWithUser
	(*InitializeMealPlanGroceryListRequest)(nil),             // 31: eating.InitializeMealPlanGroceryListRequest
	(*InitializeMealPlanGroceryListResponse)(nil),            // 32: eating.InitializeMealPlanGroceryListResponse
	(*Meal)(nil),          // 33: eating.Meal
	(*MealComponent)(nil), // 34: eating.MealComponent
	(*MealComponentCreationRequestInput)(nil),                                  // 35: eating.MealComponentCreationRequestInput
	(*MealComponentUpdateRequestInput)(nil),                                    // 36: eating.MealComponentUpdateRequestInput
	(*MealCreationRequestInput)(nil),                                           // 37: eating.MealCreationRequestInput
	(*MealPlan)(nil),                                                           // 38: eating.MealPlan
	(*MealPlanCreationRequestInput)(nil),                                       // 39: eating.MealPlanCreationRequestInput
	(*MealPlanEvent)(nil),                                                      // 40: eating.MealPlanEvent
	(*MealPlanEventCreationRequestInput)(nil),                                  // 41: eating.MealPlanEventCreationRequestInput
	(*MealPlanEventUpdateRequestInput)(nil),                                    // 42: eating.MealPlanEventUpdateRequestInput
	(*MealPlanGroceryListItem)(nil),                                            // 43: eating.MealPlanGroceryListItem
	(*MealPlanGroceryListItemCreationRequestInput)(nil),                        // 44: eating.MealPlanGroceryListItemCreationRequestInput
	(*MealPlanGroceryListItemUpdateRequestInput)(nil),                          // 45: eating.MealPlanGroceryListItemUpdateRequestInput
	(*MealPlanOption)(nil),                                                     // 46: eating.MealPlanOption
	(*MealPlanOptionCreationRequestInput)(nil),                                 // 47: eating.MealPlanOptionCreationRequestInput
	(*MealPlanOptionUpdateRequestInput)(nil),                                   // 48: eating.MealPlanOptionUpdateRequestInput
	(*MealPlanOptionVote)(nil),                                                 // 49: eating.MealPlanOptionVote
	(*MealPlanOptionVoteCreationInput)(nil),                                    // 50: eating.MealPlanOptionVoteCreationInput
	(*MealPlanOptionVoteCreationRequestInput)(nil),                             // 51: eating.MealPlanOptionVoteCreationRequestInput
	(*MealPlanOptionVoteUpdateRequestInput)(nil),                               // 52: eating.MealPlanOptionVoteUpdateRequestInput
	(*MealPlanTask)(nil),                                                       // 53: eating.MealPlanTask
	(*MealPlanTaskCreationRequestInput)(nil),                                   // 54: eating.MealPlanTaskCreationRequestInput
	(*MealPlanTaskDatabaseCreationEstimate)(nil),                               // 55: eating.MealPlanTaskDatabaseCreationEstimate
	(*MealPlanTaskStatusChangeRequestInput)(nil),                               // 56: eating.MealPlanTaskStatusChangeRequestInput
	(*MealPlanUpdateRequestInput)(nil),                                         // 57: eating.MealPlanUpdateRequestInput
	(*MealUpdateRequestInput)(nil),                                             // 58: eating.MealUpdateRequestInput
	(*MissingVote)(nil),                                                        // 59: eating.MissingVote
	(*ModifyUserPermissionsInput)(nil),                                         // 60: eating.ModifyUserPermissionsInput
	(*NamedID)(nil),                                                            // 61: eating.NamedID
	(*OAuth2Client)(nil),                                                       // 62: eating.OAuth2Client
	(*OAuth2ClientCreationRequestInput)(nil),                                   // 63: eating.OAuth2ClientCreationRequestInput
	(*OAuth2ClientCreationResponse)(nil),                                       // 64: eating.OAuth2ClientCreationResponse
	(*OAuth2ClientToken)(nil),                                                  // 65: eating.OAuth2ClientToken
	(*OptionalFloat32Range)(nil),                                               // 66: eating.OptionalFloat32Range
	(*OptionalUint32Range)(nil),                                                // 67: eating.OptionalUint32Range
	(*PasswordResetResponse)(nil),                                              // 68: eating.PasswordResetResponse
	(*PasswordResetToken)(nil),                                                 // 69: eating.PasswordResetToken
	(*PasswordResetTokenCreationRequestInput)(nil),                             // 70: eating.PasswordResetTokenCreationRequestInput
	(*PasswordResetTokenRedemptionRequestInput)(nil),                           // 71: eating.PasswordResetTokenRedemptionRequestInput
	(*PasswordUpdateInput)(nil),                                                // 72: eating.PasswordUpdateInput
	(*Recipe)(nil),                                                             // 73: eating.Recipe
	(*RecipeCreationRequestInput)(nil),                                         // 74: eating.RecipeCreationRequestInput
	(*GetMermaidDiagramForRecipeResponse)(nil),                                 // 75: eating.GetMermaidDiagramForRecipeResponse
	(*RecipeMedia)(nil),                                                        // 76: eating.RecipeMedia
	(*RecipeMediaCreationRequestInput)(nil),                                    // 77: eating.RecipeMediaCreationRequestInput
	(*RecipeMediaUpdateRequestInput)(nil),                                      // 78: eating.RecipeMediaUpdateRequestInput
	(*RecipePrepTask)(nil),                                                     // 79: eating.RecipePrepTask
	(*RecipePrepTaskCreationRequestInput)(nil),                                 // 80: eating.RecipePrepTaskCreationRequestInput
	(*RecipePrepTaskStep)(nil),                                                 // 81: eating.RecipePrepTaskStep
	(*RecipePrepTaskStepCreationRequestInput)(nil),                             // 82: eating.RecipePrepTaskStepCreationRequestInput
	(*RecipePrepTaskStepUpdateRequestInput)(nil),                               // 83: eating.RecipePrepTaskStepUpdateRequestInput
	(*RecipePrepTaskStepWithinRecipeCreationRequestInput)(nil),                 // 84: eating.RecipePrepTaskStepWithinRecipeCreationRequestInput
	(*RecipePrepTaskUpdateRequestInput)(nil),                                   // 85: eating.RecipePrepTaskUpdateRequestInput
	(*RecipePrepTaskWithinRecipeCreationRequestInput)(nil),                     // 86: eating.RecipePrepTaskWithinRecipeCreationRequestInput
	(*RecipeRating)(nil),                                                       // 87: eating.RecipeRating
	(*RecipeRatingCreationRequestInput)(nil),                                   // 88: eating.RecipeRatingCreationRequestInput
	(*RecipeRatingUpdateRequestInput)(nil),                                     // 89: eating.RecipeRatingUpdateRequestInput
	(*RecipeStep)(nil),                                                         // 90: eating.RecipeStep
	(*RecipeStepCompletionCondition)(nil),                                      // 91: eating.RecipeStepCompletionCondition
	(*RecipeStepCompletionConditionCreationRequestInput)(nil),                  // 92: eating.RecipeStepCompletionConditionCreationRequestInput
	(*RecipeStepCompletionConditionForExistingRecipeCreationRequestInput)(nil), // 93: eating.RecipeStepCompletionConditionForExistingRecipeCreationRequestInput
	(*RecipeStepCompletionConditionIngredient)(nil),                            // 94: eating.RecipeStepCompletionConditionIngredient
	(*RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput)(nil), // 95: eating.RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput
	(*RecipeStepCompletionConditionUpdateRequestInput)(nil),                              // 96: eating.RecipeStepCompletionConditionUpdateRequestInput
	(*RecipeStepCreationRequestInput)(nil),                                               // 97: eating.RecipeStepCreationRequestInput
	(*RecipeStepIngredient)(nil),                                                         // 98: eating.RecipeStepIngredient
	(*RecipeStepIngredientCreationRequestInput)(nil),                                     // 99: eating.RecipeStepIngredientCreationRequestInput
	(*RecipeStepIngredientUpdateRequestInput)(nil),                                       // 100: eating.RecipeStepIngredientUpdateRequestInput
	(*RecipeStepInstrument)(nil),                                                         // 101: eating.RecipeStepInstrument
	(*RecipeStepInstrumentCreationRequestInput)(nil),                                     // 102: eating.RecipeStepInstrumentCreationRequestInput
	(*RecipeStepInstrumentUpdateRequestInput)(nil),                                       // 103: eating.RecipeStepInstrumentUpdateRequestInput
	(*RecipeStepProduct)(nil),                                                            // 104: eating.RecipeStepProduct
	(*RecipeStepProductCreationRequestInput)(nil),                                        // 105: eating.RecipeStepProductCreationRequestInput
	(*RecipeStepProductUpdateRequestInput)(nil),                                          // 106: eating.RecipeStepProductUpdateRequestInput
	(*RecipeStepUpdateRequestInput)(nil),                                                 // 107: eating.RecipeStepUpdateRequestInput
	(*RecipeStepVessel)(nil),                                                             // 108: eating.RecipeStepVessel
	(*RecipeStepVesselCreationRequestInput)(nil),                                         // 109: eating.RecipeStepVesselCreationRequestInput
	(*RecipeStepVesselUpdateRequestInput)(nil),                                           // 110: eating.RecipeStepVesselUpdateRequestInput
	(*RecipeUpdateRequestInput)(nil),                                                     // 111: eating.RecipeUpdateRequestInput
	(*ResponseDetails)(nil),                                                              // 112: eating.ResponseDetails
	(*ServiceSetting)(nil),                                                               // 113: eating.ServiceSetting
	(*ServiceSettingConfiguration)(nil),                                                  // 114: eating.ServiceSettingConfiguration
	(*ServiceSettingConfigurationCreationRequestInput)(nil),                              // 115: eating.ServiceSettingConfigurationCreationRequestInput
	(*ServiceSettingConfigurationUpdateRequestInput)(nil),                                // 116: eating.ServiceSettingConfigurationUpdateRequestInput
	(*ServiceSettingCreationRequestInput)(nil),                                           // 117: eating.ServiceSettingCreationRequestInput
	(*TOTPSecretRefreshInput)(nil),                                                       // 118: eating.TOTPSecretRefreshInput
	(*TOTPSecretRefreshResponse)(nil),                                                    // 119: eating.TOTPSecretRefreshResponse
	(*TOTPSecretVerificationInput)(nil),                                                  // 120: eating.TOTPSecretVerificationInput
	(*TOTPSecretVerificationResponse)(nil),                                               // 121: eating.TOTPSecretVerificationResponse
	(*TokenResponse)(nil),                                                                // 122: eating.TokenResponse
	(*Uint16RangeWithOptionalMax)(nil),                                                   // 123: eating.Uint16RangeWithOptionalMax
	(*Uint16RangeWithOptionalMaxUpdateRequestInput)(nil),                                 // 124: eating.Uint16RangeWithOptionalMaxUpdateRequestInput
	(*Uint32RangeWithOptionalMax)(nil),                                                   // 125: eating.Uint32RangeWithOptionalMax
	(*Uint32RangeWithOptionalMaxUpdateRequestInput)(nil),                                 // 126: eating.Uint32RangeWithOptionalMaxUpdateRequestInput
	(*User)(nil),                                                       // 127: eating.User
	(*UserAccountStatusUpdateInput)(nil),                               // 128: eating.UserAccountStatusUpdateInput
	(*UserCreationResponse)(nil),                                       // 129: eating.UserCreationResponse
	(*UserDataAggregationRequest)(nil),                                 // 130: eating.UserDataAggregationRequest
	(*UserDataCollection)(nil),                                         // 131: eating.UserDataCollection
	(*UserDataCollectionResponse)(nil),                                 // 132: eating.UserDataCollectionResponse
	(*UserDetailsDatabaseUpdateInput)(nil),                             // 133: eating.UserDetailsDatabaseUpdateInput
	(*UserDetailsUpdateRequestInput)(nil),                              // 134: eating.UserDetailsUpdateRequestInput
	(*UserEmailAddressUpdateInput)(nil),                                // 135: eating.UserEmailAddressUpdateInput
	(*UserIngredientPreference)(nil),                                   // 136: eating.UserIngredientPreference
	(*UserIngredientPreferenceCreationRequestInput)(nil),               // 137: eating.UserIngredientPreferenceCreationRequestInput
	(*UserIngredientPreferenceUpdateRequestInput)(nil),                 // 138: eating.UserIngredientPreferenceUpdateRequestInput
	(*UserLoginInput)(nil),                                             // 139: eating.UserLoginInput
	(*UserNotification)(nil),                                           // 140: eating.UserNotification
	(*UserNotificationCreationRequestInput)(nil),                       // 141: eating.UserNotificationCreationRequestInput
	(*UserNotificationUpdateRequestInput)(nil),                         // 142: eating.UserNotificationUpdateRequestInput
	(*UserPermissionsRequestInput)(nil),                                // 143: eating.UserPermissionsRequestInput
	(*UserPermissionsResponse)(nil),                                    // 144: eating.UserPermissionsResponse
	(*UserRegistrationInput)(nil),                                      // 145: eating.UserRegistrationInput
	(*UserStatusResponse)(nil),                                         // 146: eating.UserStatusResponse
	(*UsernameReminderRequestInput)(nil),                               // 147: eating.UsernameReminderRequestInput
	(*UsernameUpdateInput)(nil),                                        // 148: eating.UsernameUpdateInput
	(*ValidIngredient)(nil),                                            // 149: eating.ValidIngredient
	(*ValidIngredientCreationRequestInput)(nil),                        // 150: eating.ValidIngredientCreationRequestInput
	(*ValidIngredientGroup)(nil),                                       // 151: eating.ValidIngredientGroup
	(*ValidIngredientGroupCreationRequestInput)(nil),                   // 152: eating.ValidIngredientGroupCreationRequestInput
	(*ValidIngredientGroupMember)(nil),                                 // 153: eating.ValidIngredientGroupMember
	(*ValidIngredientGroupMemberCreationRequestInput)(nil),             // 154: eating.ValidIngredientGroupMemberCreationRequestInput
	(*ValidIngredientGroupUpdateRequestInput)(nil),                     // 155: eating.ValidIngredientGroupUpdateRequestInput
	(*ValidIngredientMeasurementUnit)(nil),                             // 156: eating.ValidIngredientMeasurementUnit
	(*ValidIngredientMeasurementUnitCreationRequestInput)(nil),         // 157: eating.ValidIngredientMeasurementUnitCreationRequestInput
	(*ValidIngredientMeasurementUnitUpdateRequestInput)(nil),           // 158: eating.ValidIngredientMeasurementUnitUpdateRequestInput
	(*ValidIngredientPreparation)(nil),                                 // 159: eating.ValidIngredientPreparation
	(*ValidIngredientPreparationCreationRequestInput)(nil),             // 160: eating.ValidIngredientPreparationCreationRequestInput
	(*ValidIngredientPreparationUpdateRequestInput)(nil),               // 161: eating.ValidIngredientPreparationUpdateRequestInput
	(*ValidIngredientState)(nil),                                       // 162: eating.ValidIngredientState
	(*ValidIngredientStateCreationRequestInput)(nil),                   // 163: eating.ValidIngredientStateCreationRequestInput
	(*ValidIngredientStateIngredient)(nil),                             // 164: eating.ValidIngredientStateIngredient
	(*ValidIngredientStateIngredientCreationRequestInput)(nil),         // 165: eating.ValidIngredientStateIngredientCreationRequestInput
	(*ValidIngredientStateIngredientUpdateRequestInput)(nil),           // 166: eating.ValidIngredientStateIngredientUpdateRequestInput
	(*ValidIngredientStateUpdateRequestInput)(nil),                     // 167: eating.ValidIngredientStateUpdateRequestInput
	(*ValidIngredientUpdateRequestInput)(nil),                          // 168: eating.ValidIngredientUpdateRequestInput
	(*ValidInstrument)(nil),                                            // 169: eating.ValidInstrument
	(*ValidInstrumentCreationRequestInput)(nil),                        // 170: eating.ValidInstrumentCreationRequestInput
	(*ValidInstrumentUpdateRequestInput)(nil),                          // 171: eating.ValidInstrumentUpdateRequestInput
	(*ValidMeasurementUnit)(nil),                                       // 172: eating.ValidMeasurementUnit
	(*ValidMeasurementUnitConversion)(nil),                             // 173: eating.ValidMeasurementUnitConversion
	(*ValidMeasurementUnitConversionCreationRequestInput)(nil),         // 174: eating.ValidMeasurementUnitConversionCreationRequestInput
	(*ValidMeasurementUnitConversionUpdateRequestInput)(nil),           // 175: eating.ValidMeasurementUnitConversionUpdateRequestInput
	(*ValidMeasurementUnitCreationRequestInput)(nil),                   // 176: eating.ValidMeasurementUnitCreationRequestInput
	(*ValidMeasurementUnitUpdateRequestInput)(nil),                     // 177: eating.ValidMeasurementUnitUpdateRequestInput
	(*ValidPreparation)(nil),                                           // 178: eating.ValidPreparation
	(*ValidPreparationCreationRequestInput)(nil),                       // 179: eating.ValidPreparationCreationRequestInput
	(*ValidPreparationInstrument)(nil),                                 // 180: eating.ValidPreparationInstrument
	(*ValidPreparationInstrumentCreationRequestInput)(nil),             // 181: eating.ValidPreparationInstrumentCreationRequestInput
	(*ValidPreparationInstrumentUpdateRequestInput)(nil),               // 182: eating.ValidPreparationInstrumentUpdateRequestInput
	(*ValidPreparationUpdateRequestInput)(nil),                         // 183: eating.ValidPreparationUpdateRequestInput
	(*ValidPreparationVessel)(nil),                                     // 184: eating.ValidPreparationVessel
	(*ValidPreparationVesselCreationRequestInput)(nil),                 // 185: eating.ValidPreparationVesselCreationRequestInput
	(*ValidPreparationVesselUpdateRequestInput)(nil),                   // 186: eating.ValidPreparationVesselUpdateRequestInput
	(*ValidVessel)(nil),                                                // 187: eating.ValidVessel
	(*ValidVesselCreationRequestInput)(nil),                            // 188: eating.ValidVesselCreationRequestInput
	(*ValidVesselUpdateRequestInput)(nil),                              // 189: eating.ValidVesselUpdateRequestInput
	(*Webhook)(nil),                                                    // 190: eating.Webhook
	(*WebhookCreationRequestInput)(nil),                                // 191: eating.WebhookCreationRequestInput
	(*WebhookExecutionRequest)(nil),                                    // 192: eating.WebhookExecutionRequest
	(*WebhookTriggerEvent)(nil),                                        // 193: eating.WebhookTriggerEvent
	(*WebhookTriggerEventCreationRequestInput)(nil),                    // 194: eating.WebhookTriggerEventCreationRequestInput
	(*GetHouseholdInvitationByIDRequest)(nil),                          // 195: eating.GetHouseholdInvitationByIDRequest
	(*GetRecipeRatingRequest)(nil),                                     // 196: eating.GetRecipeRatingRequest
	(*GetRecipeStepInstrumentRequest)(nil),                             // 197: eating.GetRecipeStepInstrumentRequest
	(*SetDefaultHouseholdRequest)(nil),                                 // 198: eating.SetDefaultHouseholdRequest
	(*UpdateValidPreparationInstrumentRequest)(nil),                    // 199: eating.UpdateValidPreparationInstrumentRequest
	(*CancelHouseholdInvitationRequest)(nil),                           // 200: eating.CancelHouseholdInvitationRequest
	(*RejectHouseholdInvitationRequest)(nil),                           // 201: eating.RejectHouseholdInvitationRequest
	(*UpdateHouseholdRequest)(nil),                                     // 202: eating.UpdateHouseholdRequest
	(*GetValidVesselsRequest)(nil),                                     // 203: eating.GetValidVesselsRequest
	(*GetValidVesselRequest)(nil),                                      // 204: eating.GetValidVesselRequest
	(*ArchiveValidInstrumentRequest)(nil),                              // 205: eating.ArchiveValidInstrumentRequest
	(*ArchiveMealPlanRequest)(nil),                                     // 206: eating.ArchiveMealPlanRequest
	(*GetServiceSettingConfigurationsForUserRequest)(nil),              // 207: eating.GetServiceSettingConfigurationsForUserRequest
	(*GetValidIngredientMeasurementUnitsByMeasurementUnitRequest)(nil), // 208: eating.GetValidIngredientMeasurementUnitsByMeasurementUnitRequest
	(*ArchiveHouseholdRequest)(nil),                                    // 209: eating.ArchiveHouseholdRequest
	(*GetValidPreparationVesselsByVesselRequest)(nil),                  // 210: eating.GetValidPreparationVesselsByVesselRequest
	(*ArchiveValidIngredientStateRequest)(nil),                         // 211: eating.ArchiveValidIngredientStateRequest
	(*GetWebhooksRequest)(nil),                                         // 212: eating.GetWebhooksRequest
	(*GetAuditLogEntriesForUserRequest)(nil),                           // 213: eating.GetAuditLogEntriesForUserRequest
	(*ArchiveRecipeRequest)(nil),                                       // 214: eating.ArchiveRecipeRequest
	(*GetRecipesRequest)(nil),                                          // 215: eating.GetRecipesRequest
	(*ArchiveValidPreparationRequest)(nil),                             // 216: eating.ArchiveValidPreparationRequest
	(*UpdateValidPreparationRequest)(nil),                              // 217: eating.UpdateValidPreparationRequest
	(*UpdateMealPlanRequest)(nil),                                      // 218: eating.UpdateMealPlanRequest
	(*SearchValidIngredientsByPreparationRequest)(nil),                 // 219: eating.SearchValidIngredientsByPreparationRequest
	(*SearchForValidVesselsRequest)(nil),                               // 220: eating.SearchForValidVesselsRequest
	(*ArchiveMealPlanOptionRequest)(nil),                               // 221: eating.ArchiveMealPlanOptionRequest
	(*ArchiveWebhookTriggerEventRequest)(nil),                          // 222: eating.ArchiveWebhookTriggerEventRequest
	(*GetUserIngredientPreferencesRequest)(nil),                        // 223: eating.GetUserIngredientPreferencesRequest
	(*GetHouseholdRequest)(nil),                                        // 224: eating.GetHouseholdRequest
	(*UpdateValidMeasurementUnitRequest)(nil),                          // 225: eating.UpdateValidMeasurementUnitRequest
	(*GetValidIngredientStateRequest)(nil),                             // 226: eating.GetValidIngredientStateRequest
	(*GetRecipeRequest)(nil),                                           // 227: eating.GetRecipeRequest
	(*GetAuditLogEntriesForHouseholdRequest)(nil),                      // 228: eating.GetAuditLogEntriesForHouseholdRequest
	(*GetValidIngredientPreparationsByPreparationRequest)(nil),         // 229: eating.GetValidIngredientPreparationsByPreparationRequest
	(*GetMealPlanOptionRequest)(nil),                                   // 230: eating.GetMealPlanOptionRequest
	(*UpdateMealPlanOptionVoteRequest)(nil),                            // 231: eating.UpdateMealPlanOptionVoteRequest
	(*ArchiveUserIngredientPreferenceRequest)(nil),                     // 232: eating.ArchiveUserIngredientPreferenceRequest
	(*GetOAuth2ClientsRequest)(nil),                                    // 233: eating.GetOAuth2ClientsRequest
	(*GetValidPreparationsRequest)(nil),                                // 234: eating.GetValidPreparationsRequest
	(*SearchForMealsRequest)(nil),                                      // 235: eating.SearchForMealsRequest
	(*ArchiveValidMeasurementUnitConversionRequest)(nil),               // 236: eating.ArchiveValidMeasurementUnitConversionRequest
	(*GetMealPlanGroceryListItemsForMealPlanRequest)(nil),              // 237: eating.GetMealPlanGroceryListItemsForMealPlanRequest
	(*GetValidIngredientGroupsRequest)(nil),                            // 238: eating.GetValidIngredientGroupsRequest
	(*GetMermaidDiagramForRecipeRequest)(nil),                          // 239: eating.GetMermaidDiagramForRecipeRequest
	(*GetValidIngredientRequest)(nil),                                  // 240: eating.GetValidIngredientRequest
	(*ArchiveMealPlanGroceryListItemRequest)(nil),                      // 241: eating.ArchiveMealPlanGroceryListItemRequest
	(*GetValidPreparationInstrumentRequest)(nil),                       // 242: eating.GetValidPreparationInstrumentRequest
	(*GetRecipeStepCompletionConditionRequest)(nil),                    // 243: eating.GetRecipeStepCompletionConditionRequest
	(*GetValidMeasurementUnitConversionsFromUnitRequest)(nil),          // 244: eating.GetValidMeasurementUnitConversionsFromUnitRequest
	(*ArchiveMealPlanEventRequest)(nil),                                // 245: eating.ArchiveMealPlanEventRequest
	(*UpdateUserIngredientPreferenceRequest)(nil),                      // 246: eating.UpdateUserIngredientPreferenceRequest
	(*FinalizeMealPlanRequest)(nil),                                    // 247: eating.FinalizeMealPlanRequest
	(*GetValidIngredientPreparationsRequest)(nil),                      // 248: eating.GetValidIngredientPreparationsRequest
	(*UpdateRecipeStepIngredientRequest)(nil),                          // 249: eating.UpdateRecipeStepIngredientRequest
	(*CreateRecipeStepProductRequest)(nil),                             // 250: eating.CreateRecipeStepProductRequest
	(*CreateMealPlanOptionVoteRequest)(nil),                            // 251: eating.CreateMealPlanOptionVoteRequest
	(*GetSentHouseholdInvitationsRequest)(nil),                         // 252: eating.GetSentHouseholdInvitationsRequest
	(*ArchiveServiceSettingRequest)(nil),                               // 253: eating.ArchiveServiceSettingRequest
	(*SearchForUsersRequest)(nil),                                      // 254: eating.SearchForUsersRequest
	(*GetValidIngredientGroupRequest)(nil),                             // 255: eating.GetValidIngredientGroupRequest
	(*UpdateValidIngredientGroupRequest)(nil),                          // 256: eating.UpdateValidIngredientGroupRequest
	(*GetRecipeStepIngredientRequest)(nil),                             // 257: eating.GetRecipeStepIngredientRequest
	(*GetAuditLogEntryByIDRequest)(nil),                                // 258: eating.GetAuditLogEntryByIDRequest
	(*UpdateRecipeStepVesselRequest)(nil),                              // 259: eating.UpdateRecipeStepVesselRequest
	(*GetValidInstrumentsRequest)(nil),                                 // 260: eating.GetValidInstrumentsRequest
	(*GetMealPlanTasksRequest)(nil),                                    // 261: eating.GetMealPlanTasksRequest
	(*GetValidIngredientStatesRequest)(nil),                            // 262: eating.GetValidIngredientStatesRequest
	(*UpdateMealPlanEventRequest)(nil),                                 // 263: eating.UpdateMealPlanEventRequest
	(*ArchiveRecipeRatingRequest)(nil),                                 // 264: eating.ArchiveRecipeRatingRequest
	(*ArchiveUserMembershipRequest)(nil),                               // 265: eating.ArchiveUserMembershipRequest
	(*ArchiveWebhookRequest)(nil),                                      // 266: eating.ArchiveWebhookRequest
	(*ArchiveUserRequest)(nil),                                         // 267: eating.ArchiveUserRequest
	(*UpdateValidPreparationVesselRequest)(nil),                        // 268: eating.UpdateValidPreparationVesselRequest
	(*UpdateMealPlanTaskStatusRequest)(nil),                            // 269: eating.UpdateMealPlanTaskStatusRequest
	(*GetMealPlanOptionsRequest)(nil),                                  // 270: eating.GetMealPlanOptionsRequest
	(*SearchForRecipesRequest)(nil),                                    // 271: eating.SearchForRecipesRequest
	(*ArchiveValidIngredientGroupRequest)(nil),                         // 272: eating.ArchiveValidIngredientGroupRequest
	(*GetValidPreparationInstrumentsByInstrumentRequest)(nil),          // 273: eating.GetValidPreparationInstrumentsByInstrumentRequest
	(*GetValidIngredientStateIngredientRequest)(nil),                   // 274: eating.GetValidIngredientStateIngredientRequest
	(*GetUserRequest)(nil),                                             // 275: eating.GetUserRequest
	(*ArchiveValidMeasurementUnitRequest)(nil),                         // 276: eating.ArchiveValidMeasurementUnitRequest
	(*GetValidIngredientPreparationsByIngredientRequest)(nil),          // 277: eating.GetValidIngredientPreparationsByIngredientRequest
	(*GetValidIngredientStateIngredientsByIngredientRequest)(nil),      // 278: eating.GetValidIngredientStateIngredientsByIngredientRequest
	(*UpdateMealPlanGroceryListItemRequest)(nil),                       // 279: eating.UpdateMealPlanGroceryListItemRequest
	(*UpdateMealPlanOptionRequest)(nil),                                // 280: eating.UpdateMealPlanOptionRequest
	(*ArchiveValidIngredientStateIngredientRequest)(nil),               // 281: eating.ArchiveValidIngredientStateIngredientRequest
	(*UpdateRecipeRatingRequest)(nil),                                  // 282: eating.UpdateRecipeRatingRequest
	(*ArchiveValidIngredientRequest)(nil),                              // 283: eating.ArchiveValidIngredientRequest
	(*UpdateValidVesselRequest)(nil),                                   // 284: eating.UpdateValidVesselRequest
	(*GetValidIngredientStateIngredientsRequest)(nil),                  // 285: eating.GetValidIngredientStateIngredientsRequest
	(*GetValidPreparationVesselsRequest)(nil),                          // 286: eating.GetValidPreparationVesselsRequest
	(*GetValidMeasurementUnitConversionRequest)(nil),                   // 287: eating.GetValidMeasurementUnitConversionRequest
	(*GetRecipeStepRequest)(nil),                                       // 288: eating.GetRecipeStepRequest
	(*ArchiveRecipeStepRequest)(nil),                                   // 289: eating.ArchiveRecipeStepRequest
	(*ArchiveMealPlanOptionVoteRequest)(nil),                           // 290: eating.ArchiveMealPlanOptionVoteRequest
	(*GetMealPlanEventsRequest)(nil),                                   // 291: eating.GetMealPlanEventsRequest
	(*GetRecipePrepTaskRequest)(nil),                                   // 292: eating.GetRecipePrepTaskRequest
	(*GetValidIngredientsRequest)(nil),                                 // 293: eating.GetValidIngredientsRequest
	(*SearchForValidInstrumentsRequest)(nil),                           // 294: eating.SearchForValidInstrumentsRequest
	(*GetMealPlanTaskRequest)(nil),                                     // 295: eating.GetMealPlanTaskRequest
	(*GetRecipeStepProductsRequest)(nil),                               // 296: eating.GetRecipeStepProductsRequest
	(*CreateWebhookTriggerEventRequest)(nil),                           // 297: eating.CreateWebhookTriggerEventRequest
	(*GetHouseholdsRequest)(nil),                                       // 298: eating.GetHouseholdsRequest
	(*GetValidMeasurementUnitRequest)(nil),                             // 299: eating.GetValidMeasurementUnitRequest
	(*GetValidInstrumentRequest)(nil),                                  // 300: eating.GetValidInstrumentRequest
	(*UpdateHouseholdInstrumentOwnershipRequest)(nil),                  // 301: eating.UpdateHouseholdInstrumentOwnershipRequest
	(*GetValidMeasurementUnitsRequest)(nil),                            // 302: eating.GetValidMeasurementUnitsRequest
	(*CreateRecipeStepInstrumentRequest)(nil),                          // 303: eating.CreateRecipeStepInstrumentRequest
	(*UpdateRecipeStepCompletionConditionRequest)(nil),                 // 304: eating.UpdateRecipeStepCompletionConditionRequest
	(*CreateRecipeRatingRequest)(nil),                                  // 305: eating.CreateRecipeRatingRequest
	(*CloneRecipeRequest)(nil),                                         // 306: eating.CloneRecipeRequest
	(*GetValidPreparationInstrumentsRequest)(nil),                      // 307: eating.GetValidPreparationInstrumentsRequest
	(*GetRecipeStepCompletionConditionsRequest)(nil),                   // 308: eating.GetRecipeStepCompletionConditionsRequest
	(*GetHouseholdInstrumentOwnershipsRequest)(nil),                    // 309: eating.GetHouseholdInstrumentOwnershipsRequest
	(*UpdateRecipeStepProductRequest)(nil),                             // 310: eating.UpdateRecipeStepProductRequest
	(*GetMealsRequest)(nil),                                            // 311: eating.GetMealsRequest
	(*CreateRecipeStepCompletionConditionRequest)(nil),                 // 312: eating.CreateRecipeStepCompletionConditionRequest
	(*FetchUserDataReportRequest)(nil),                                 // 313: eating.FetchUserDataReportRequest
	(*GetValidIngredientMeasurementUnitsRequest)(nil),                  // 314: eating.GetValidIngredientMeasurementUnitsRequest
	(*GetMealPlanRequest)(nil),                                         // 315: eating.GetMealPlanRequest
	(*GetUsersRequest)(nil),                                            // 316: eating.GetUsersRequest
	(*SearchForValidPreparationsRequest)(nil),                          // 317: eating.SearchForValidPreparationsRequest
	(*ArchiveRecipeStepIngredientRequest)(nil),                         // 318: eating.ArchiveRecipeStepIngredientRequest
	(*GetOAuth2ClientRequest)(nil),                                     // 319: eating.GetOAuth2ClientRequest
	(*SearchForValidIngredientStatesRequest)(nil),                      // 320: eating.SearchForValidIngredientStatesRequest
	(*UpdateRecipeRequest)(nil),                                        // 321: eating.UpdateRecipeRequest
	(*ArchiveRecipeStepCompletionConditionRequest)(nil),                // 322: eating.ArchiveRecipeStepCompletionConditionRequest
	(*UpdateServiceSettingConfigurationRequest)(nil),                   // 323: eating.UpdateServiceSettingConfigurationRequest
	(*UpdateHouseholdMemberPermissionsRequest)(nil),                    // 324: eating.UpdateHouseholdMemberPermissionsRequest
	(*ArchiveValidIngredientMeasurementUnitRequest)(nil),               // 325: eating.ArchiveValidIngredientMeasurementUnitRequest
	(*GetRecipeStepVesselRequest)(nil),                                 // 326: eating.GetRecipeStepVesselRequest
	(*ArchiveOAuth2ClientRequest)(nil),                                 // 327: eating.ArchiveOAuth2ClientRequest
	(*GetValidIngredientPreparationRequest)(nil),                       // 328: eating.GetValidIngredientPreparationRequest
	(*TransferHouseholdOwnershipRequest)(nil),                          // 329: eating.TransferHouseholdOwnershipRequest
	(*GetUserNotificationsRequest)(nil),                                // 330: eating.GetUserNotificationsRequest
	(*GetRecipeStepProductRequest)(nil),                                // 331: eating.GetRecipeStepProductRequest
	(*ArchiveRecipeStepProductRequest)(nil),                            // 332: eating.ArchiveRecipeStepProductRequest
	(*UpdateValidIngredientStateRequest)(nil),                          // 333: eating.UpdateValidIngredientStateRequest
	(*GetValidPreparationVesselRequest)(nil),                           // 334: eating.GetValidPreparationVesselRequest
	(*GetServiceSettingsRequest)(nil),                                  // 335: eating.GetServiceSettingsRequest
	(*GetValidMeasurementUnitConversionsToUnitRequest)(nil),            // 336: eating.GetValidMeasurementUnitConversionsToUnitRequest
	(*GetValidIngredientMeasurementUnitsByIngredientRequest)(nil),      // 337: eating.GetValidIngredientMeasurementUnitsByIngredientRequest
	(*ArchiveValidPreparationVesselRequest)(nil),                       // 338: eating.ArchiveValidPreparationVesselRequest
	(*CreateMealPlanTaskRequest)(nil),                                  // 339: eating.CreateMealPlanTaskRequest
	(*GetUserNotificationRequest)(nil),                                 // 340: eating.GetUserNotificationRequest
	(*SearchForValidMeasurementUnitsRequest)(nil),                      // 341: eating.SearchForValidMeasurementUnitsRequest
	(*UpdateValidIngredientRequest)(nil),                               // 342: eating.UpdateValidIngredientRequest
	(*GetRecipeStepsRequest)(nil),                                      // 343: eating.GetRecipeStepsRequest
	(*ArchiveValidIngredientPreparationRequest)(nil),                   // 344: eating.ArchiveValidIngredientPreparationRequest
	(*ArchiveRecipePrepTaskRequest)(nil),                               // 345: eating.ArchiveRecipePrepTaskRequest
	(*SearchForValidIngredientGroupsRequest)(nil),                      // 346: eating.SearchForValidIngredientGroupsRequest
	(*ArchiveHouseholdInstrumentOwnershipRequest)(nil),                 // 347: eating.ArchiveHouseholdInstrumentOwnershipRequest
	(*GetHouseholdInvitationRequest)(nil),                              // 348: eating.GetHouseholdInvitationRequest
	(*GetRecipeRatingsForRecipeRequest)(nil),                           // 349: eating.GetRecipeRatingsForRecipeRequest
	(*CreateMealPlanOptionRequest)(nil),                                // 350: eating.CreateMealPlanOptionRequest
	(*ArchiveRecipeStepInstrumentRequest)(nil),                         // 351: eating.ArchiveRecipeStepInstrumentRequest
	(*CreateRecipeStepIngredientRequest)(nil),                          // 352: eating.CreateRecipeStepIngredientRequest
	(*GetWebhookRequest)(nil),                                          // 353: eating.GetWebhookRequest
	(*GetRecipeStepInstrumentsRequest)(nil),                            // 354: eating.GetRecipeStepInstrumentsRequest
	(*UpdateRecipeStepRequest)(nil),                                    // 355: eating.UpdateRecipeStepRequest
	(*GetMealPlanEventRequest)(nil),                                    // 356: eating.GetMealPlanEventRequest
	(*GetValidIngredientStateIngredientsByIngredientStateRequest)(nil), // 357: eating.GetValidIngredientStateIngredientsByIngredientStateRequest
	(*CreateRecipeStepVesselRequest)(nil),                              // 358: eating.CreateRecipeStepVesselRequest
	(*ArchiveRecipeStepVesselRequest)(nil),                             // 359: eating.ArchiveRecipeStepVesselRequest
	(*UpdateValidInstrumentRequest)(nil),                               // 360: eating.UpdateValidInstrumentRequest
	(*CreateMealPlanEventRequest)(nil),                                 // 361: eating.CreateMealPlanEventRequest
	(*ArchiveMealRequest)(nil),                                         // 362: eating.ArchiveMealRequest
	(*GetServiceSettingConfigurationByNameRequest)(nil),                // 363: eating.GetServiceSettingConfigurationByNameRequest
	(*AcceptHouseholdInvitationRequest)(nil),                           // 364: eating.AcceptHouseholdInvitationRequest
	(*CreateHouseholdInvitationRequest)(nil),                           // 365: eating.CreateHouseholdInvitationRequest
	(*GetMealPlanGroceryListItemRequest)(nil),                          // 366: eating.GetMealPlanGroceryListItemRequest
	(*GetReceivedHouseholdInvitationsRequest)(nil),                     // 367: eating.GetReceivedHouseholdInvitationsRequest
	(*GetRecipeStepVesselsRequest)(nil),                                // 368: eating.GetRecipeStepVesselsRequest
	(*UpdateValidMeasurementUnitConversionRequest)(nil),                // 369: eating.UpdateValidMeasurementUnitConversionRequest
	(*GetValidPreparationVesselsByPreparationRequest)(nil),             // 370: eating.GetValidPreparationVesselsByPreparationRequest
	(*GetMealRequest)(nil),                                             // 371: eating.GetMealRequest
	(*GetValidPreparationRequest)(nil),                                 // 372: eating.GetValidPreparationRequest
	(*GetMealPlanOptionVotesRequest)(nil),                              // 373: eating.GetMealPlanOptionVotesRequest
	(*UpdateUserNotificationRequest)(nil),                              // 374: eating.UpdateUserNotificationRequest
	(*SearchForServiceSettingsRequest)(nil),                            // 375: eating.SearchForServiceSettingsRequest
	(*CreateRecipeStepRequest)(nil),                                    // 376: eating.CreateRecipeStepRequest
	(*UpdateRecipePrepTaskRequest)(nil),                                // 377: eating.UpdateRecipePrepTaskRequest
	(*GetHouseholdInstrumentOwnershipRequest)(nil),                     // 378: eating.GetHouseholdInstrumentOwnershipRequest
	(*GetServiceSettingConfigurationsForHouseholdRequest)(nil),         // 379: eating.GetServiceSettingConfigurationsForHouseholdRequest
	(*ArchiveValidVesselRequest)(nil),                                  // 380: eating.ArchiveValidVesselRequest
	(*UpdateValidIngredientMeasurementUnitRequest)(nil),                // 381: eating.UpdateValidIngredientMeasurementUnitRequest
	(*GetRecipeStepIngredientsRequest)(nil),                            // 382: eating.GetRecipeStepIngredientsRequest
	(*GetMealPlanOptionVoteRequest)(nil),                               // 383: eating.GetMealPlanOptionVoteRequest
	(*SearchValidMeasurementUnitsByIngredientRequest)(nil),             // 384: eating.SearchValidMeasurementUnitsByIngredientRequest
	(*ArchiveValidPreparationInstrumentRequest)(nil),                   // 385: eating.ArchiveValidPreparationInstrumentRequest
	(*UpdateValidIngredientPreparationRequest)(nil),                    // 386: eating.UpdateValidIngredientPreparationRequest
	(*UpdateValidIngredientStateIngredientRequest)(nil),                // 387: eating.UpdateValidIngredientStateIngredientRequest
	(*GetValidIngredientMeasurementUnitRequest)(nil),                   // 388: eating.GetValidIngredientMeasurementUnitRequest
	(*GetMealPlansForHouseholdRequest)(nil),                            // 389: eating.GetMealPlansForHouseholdRequest
	(*CreateRecipePrepTaskRequest)(nil),                                // 390: eating.CreateRecipePrepTaskRequest
	(*GetRecipeMealPlanTasksRequest)(nil),                              // 391: eating.GetRecipeMealPlanTasksRequest
	(*GetRecipePrepTasksRequest)(nil),                                  // 392: eating.GetRecipePrepTasksRequest
	(*SearchForValidIngredientsRequest)(nil),                           // 393: eating.SearchForValidIngredientsRequest
	(*GetValidPreparationInstrumentsByPreparationRequest)(nil),         // 394: eating.GetValidPreparationInstrumentsByPreparationRequest
	(*ArchiveServiceSettingConfigurationRequest)(nil),                  // 395: eating.ArchiveServiceSettingConfigurationRequest
	(*UpdateRecipeStepInstrumentRequest)(nil),                          // 396: eating.UpdateRecipeStepInstrumentRequest
	(*GetServiceSettingRequest)(nil),                                   // 397: eating.GetServiceSettingRequest
	(*CreateMealPlanGroceryListItemRequest)(nil),                       // 398: eating.CreateMealPlanGroceryListItemRequest
	nil,                           // 399: eating.AuditLogEntry.ChangesEntry
	nil,                           // 400: eating.DataChangeMessage.ContextEntry
	nil,                           // 401: eating.UserPermissionsResponse.PermissionsEntry
	(*timestamppb.Timestamp)(nil), // 402: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),   // 403: google.protobuf.Duration
	(*anypb.Any)(nil),             // 404: google.protobuf.Any
}
var file_messages_proto_depIdxs = []int32{
	402, // 0: eating.AuditLogEntry.CreatedAt:type_name -> google.protobuf.Timestamp
	399, // 1: eating.AuditLogEntry.Changes:type_name -> eating.AuditLogEntry.ChangesEntry
	24,  // 2: eating.CoreUserDataCollection.ReceivedInvites:type_name -> eating.HouseholdInvitation
	24,  // 3: eating.CoreUserDataCollection.SentInvites:type_name -> eating.HouseholdInvitation
	114, // 4: eating.CoreUserDataCollection.UserServiceSettingConfigurations:type_name -> eating.ServiceSettingConfiguration
	3,   // 5: eating.CoreUserDataCollection.UserAuditLogEntries:type_name -> eating.AuditLogEntry
	19,  // 6: eating.CoreUserDataCollection.Households:type_name -> eating.Household
	24,  // 7: eating.DataChangeMessage.HouseholdInvitation:type_name -> eating.HouseholdInvitation
	173, // 8: eating.DataChangeMessage.ValidMeasurementUnitConversion:type_name -> eating.ValidMeasurementUnitConversion
	169, // 9: eating.DataChangeMessage.ValidInstrument:type_name -> eating.ValidInstrument
	149, // 10: eating.DataChangeMessage.ValidIngredient:type_name -> eating.ValidIngredient
	151, // 11: eating.DataChangeMessage.ValidIngredientGroup:type_name -> eating.ValidIngredientGroup
	178, // 12: eating.DataChangeMessage.ValidPreparation:type_name -> eating.ValidPreparation
	162, // 13: eating.DataChangeMessage.ValidIngredientState:type_name -> eating.ValidIngredientState
	43,  // 14: eating.DataChangeMessage.MealPlanGroceryListItem:type_name -> eating.MealPlanGroceryListItem
	33,  // 15: eating.DataChangeMessage.Meal:type_name -> eating.Meal
	400, // 16: eating.DataChangeMessage.Context:type_name -> eating.DataChangeMessage.ContextEntry
	73,  // 17: eating.DataChangeMessage.Recipe:type_name -> eating.Recipe
	79,  // 18: eating.DataChangeMessage.RecipePrepTask:type_name -> eating.RecipePrepTask
	81,  // 19: eating.DataChangeMessage.RecipePrepTaskStep:type_name -> eating.RecipePrepTaskStep
	90,  // 20: eating.DataChangeMessage.RecipeStep:type_name -> eating.RecipeStep
	104, // 21: eating.DataChangeMessage.RecipeStepProduct:type_name -> eating.RecipeStepProduct
	101, // 22: eating.DataChangeMessage.RecipeStepInstrument:type_name -> eating.RecipeStepInstrument
	98,  // 23: eating.DataChangeMessage.RecipeStepIngredient:type_name -> eating.RecipeStepIngredient
	38,  // 24: eating.DataChangeMessage.MealPlan:type_name -> eating.MealPlan
	53,  // 25: eating.DataChangeMessage.MealPlanTask:type_name -> eating.MealPlanTask
	40,  // 26: eating.DataChangeMessage.MealPlanEvent:type_name -> eating.MealPlanEvent
	19,  // 27: eating.DataChangeMessage.Household:type_name -> eating.Household
	46,  // 28: eating.DataChangeMessage.MealPlanOption:type_name -> eating.MealPlanOption
	156, // 29: eating.DataChangeMessage.ValidIngredientMeasurementUnit:type_name -> eating.ValidIngredientMeasurementUnit
	49,  // 30: eating.DataChangeMessage.MealPlanOptionVote:type_name -> eating.MealPlanOptionVote
	180, // 31: eating.DataChangeMessage.ValidPreparationInstrument:type_name -> eating.ValidPreparationInstrument
	190, // 32: eating.DataChangeMessage.Webhook:type_name -> eating.Webhook
	159, // 33: eating.DataChangeMessage.ValidIngredientPreparation:type_name -> eating.ValidIngredientPreparation
	172, // 34: eating.DataChangeMessage.ValidMeasurementUnit:type_name -> eating.ValidMeasurementUnit
	29,  // 35: eating.DataChangeMessage.UserMembership:type_name -> eating.HouseholdUserMembership
	91,  // 36: eating.DataChangeMessage.RecipeStepCompletionCondition:type_name -> eating.RecipeStepCompletionCondition
	108, // 37: eating.DataChangeMessage.RecipeStepVessel:type_name -> eating.RecipeStepVessel
	69,  // 38: eating.DataChangeMessage.PasswordResetToken:type_name -> eating.PasswordResetToken
	164, // 39: eating.DataChangeMessage.ValidIngredientStateIngredient:type_name -> eating.ValidIngredientStateIngredient
	113, // 40: eating.DataChangeMessage.ServiceSetting:type_name -> eating.ServiceSetting
	114, // 41: eating.DataChangeMessage.ServiceSettingConfiguration:type_name -> eating.ServiceSettingConfiguration
	21,  // 42: eating.DataChangeMessage.HouseholdInstrumentOwnership:type_name -> eating.HouseholdInstrumentOwnership
	87,  // 43: eating.DataChangeMessage.RecipeRating:type_name -> eating.RecipeRating
	187, // 44: eating.DataChangeMessage.ValidVessel:type_name -> eating.ValidVessel
	184, // 45: eating.DataChangeMessage.ValidPreparationVessel:type_name -> eating.ValidPreparationVessel
	140, // 46: eating.DataChangeMessage.UserNotification:type_name -> eating.UserNotification
	136, // 47: eating.DataChangeMessage.UserIngredientPreferences:type_name -> eating.UserIngredientPreference
	87,  // 48: eating.EatingUserDataCollection.RecipeRatings:type_name -> eating.RecipeRating
	73,  // 49: eating.EatingUserDataCollection.Recipes:type_name -> eating.Recipe
	33,  // 50: eating.EatingUserDataCollection.Meals:type_name -> eating.Meal
	136, // 51: eating.EatingUserDataCollection.UserIngredientPreferences:type_name -> eating.UserIngredientPreference
	402, // 52: eating.Household.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 53: eating.Household.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	402, // 54: eating.Household.ArchivedAt:type_name -> google.protobuf.Timestamp
	30,  // 55: eating.Household.Members:type_name -> eating.HouseholdUserMembershipWithUser
	402, // 56: eating.HouseholdInstrumentOwnership.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 57: eating.HouseholdInstrumentOwnership.ArchivedAt:type_name -> google.protobuf.Timestamp
	402, // 58: eating.HouseholdInstrumentOwnership.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	169, // 59: eating.HouseholdInstrumentOwnership.Instrument:type_name -> eating.ValidInstrument
	402, // 60: eating.HouseholdInvitation.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 61: eating.HouseholdInvitation.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	402, // 62: eating.HouseholdInvitation.ArchivedAt:type_name -> google.protobuf.Timestamp
	402, // 63: eating.HouseholdInvitation.ExpiresAt:type_name -> google.protobuf.Timestamp
	19,  // 64: eating.HouseholdInvitation.DestinationHousehold:type_name -> eating.Household
	127, // 65: eating.HouseholdInvitation.FromUser:type_name -> eating.User
	402, // 66: eating.HouseholdInvitationCreationRequestInput.ExpiresAt:type_name -> google.protobuf.Timestamp
	402, // 67: eating.HouseholdUserMembership.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 68: eating.HouseholdUserMembership.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	402, // 69: eating.HouseholdUserMembership.ArchivedAt:type_name -> google.protobuf.Timestamp
	402, // 70: eating.HouseholdUserMembershipWithUser.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 71: eating.HouseholdUserMembershipWithUser.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	127, // 72: eating.HouseholdUserMembershipWithUser.BelongsToUser:type_name -> eating.User
	402, // 73: eating.HouseholdUserMembershipWithUser.ArchivedAt:type_name -> google.protobuf.Timestamp
	402, // 74: eating.Meal.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 75: eating.Meal.ArchivedAt:type_name -> google.protobuf.Timestamp
	402, // 76: eating.Meal.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	17,  // 77: eating.Meal.EstimatedPortions:type_name -> eating.Float32RangeWithOptionalMax
	34,  // 78: eating.Meal.Components:type_name -> eating.MealComponent
	73,  // 79: eating.MealComponent.Recipe:type_name -> eating.Recipe
	17,  // 80: eating.MealCreationRequestInput.EstimatedPortions:type_name -> eating.Float32RangeWithOptionalMax
	35,  // 81: eating.MealCreationRequestInput.Components:type_name -> eating.MealComponentCreationRequestInput
	402, // 82: eating.MealPlan.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 83: eating.MealPlan.VotingDeadline:type_name -> google.protobuf.Timestamp
	402, // 84: eating.MealPlan.ArchivedAt:type_name -> google.protobuf.Timestamp
	402, // 85: eating.MealPlan.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	40,  // 86: eating.MealPlan.Events:type_name -> eating.MealPlanEvent
	402, // 87: eating.MealPlanCreationRequestInput.VotingDeadline:type_name -> google.protobuf.Timestamp
	41,  // 88: eating.MealPlanCreationRequestInput.Events:type_name -> eating.MealPlanEventCreationRequestInput
	402, // 89: eating.MealPlanEvent.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 90: eating.MealPlanEvent.StartsAt:type_name -> google.protobuf.Timestamp
	402, // 91: eating.MealPlanEvent.EndsAt:type_name -> google.protobuf.Timestamp
	402, // 92: eating.MealPlanEvent.ArchivedAt:type_name -> google.protobuf.Timestamp
	402, // 93: eating.MealPlanEvent.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	46,  // 94: eating.MealPlanEvent.Options:type_name -> eating.MealPlanOption
	402, // 95: eating.MealPlanEventCreationRequestInput.EndsAt:type_name -> google.protobuf.Timestamp
	402, // 96: eating.MealPlanEventCreationRequestInput.StartsAt:type_name -> google.protobuf.Timestamp
	47,  // 97: eating.MealPlanEventCreationRequestInput.Options:type_name -> eating.MealPlanOptionCreationRequestInput
	402, // 98: eating.MealPlanEventUpdateRequestInput.StartsAt:type_name -> google.protobuf.Timestamp
	402, // 99: eating.MealPlanEventUpdateRequestInput.EndsAt:type_name -> google.protobuf.Timestamp
	402, // 100: eating.MealPlanGroceryListItem.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 101: eating.MealPlanGroceryListItem.ArchivedAt:type_name -> google.protobuf.Timestamp
	402, // 102: eating.MealPlanGroceryListItem.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	172, // 103: eating.MealPlanGroceryListItem.PurchasedMeasurementUnit:type_name -> eating.ValidMeasurementUnit
	17,  // 104: eating.MealPlanGroceryListItem.QuantityNeeded:type_name -> eating.Float32RangeWithOptionalMax
	172, // 105: eating.MealPlanGroceryListItem.MeasurementUnit:type_name -> eating.ValidMeasurementUnit
	149, // 106: eating.MealPlanGroceryListItem.Ingredient:type_name -> eating.ValidIngredient
	17,  // 107: eating.MealPlanGroceryListItemCreationRequestInput.QuantityNeeded:type_name -> eating.Float32RangeWithOptionalMax
	18,  // 108: eating.MealPlanGroceryListItemUpdateRequestInput.QuantityNeeded:type_name -> eating.Float32RangeWithOptionalMaxUpdateRequestInput
	402, // 109: eating.MealPlanOption.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 110: eating.MealPlanOption.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	402, // 111: eating.MealPlanOption.ArchivedAt:type_name -> google.protobuf.Timestamp
	49,  // 112: eating.MealPlanOption.Votes:type_name -> eating.MealPlanOptionVote
	33,  // 113: eating.MealPlanOption.Meal:type_name -> eating.Meal
	402, // 114: eating.MealPlanOptionVote.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 115: eating.MealPlanOptionVote.ArchivedAt:type_name -> google.protobuf.Timestamp
	402, // 116: eating.MealPlanOptionVote.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	50,  // 117: eating.MealPlanOptionVoteCreationRequestInput.Votes:type_name -> eating.MealPlanOptionVoteCreationInput
	79,  // 118: eating.MealPlanTask.RecipePrepTask:type_name -> eating.RecipePrepTask
	402, // 119: eating.MealPlanTask.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 120: eating.MealPlanTask.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	402, // 121: eating.MealPlanTask.CompletedAt:type_name -> google.protobuf.Timestamp
	46,  // 122: eating.MealPlanTask.MealPlanOption:type_name -> eating.MealPlanOption
	402, // 123: eating.MealPlanUpdateRequestInput.VotingDeadline:type_name -> google.protobuf.Timestamp
	18,  // 124: eating.MealUpdateRequestInput.EstimatedPortions:type_name -> eating.Float32RangeWithOptionalMaxUpdateRequestInput
	36,  // 125: eating.MealUpdateRequestInput.Components:type_name -> eating.MealComponentUpdateRequestInput
	402, // 126: eating.OAuth2Client.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 127: eating.OAuth2Client.ArchivedAt:type_name -> google.protobuf.Timestamp
	402, // 128: eating.OAuth2ClientToken.RefreshCreatedAt:type_name -> google.protobuf.Timestamp
	402, // 129: eating.OAuth2ClientToken.AccessCreatedAt:type_name -> google.protobuf.Timestamp
	402, // 130: eating.OAuth2ClientToken.CodeCreatedAt:type_name -> google.protobuf.Timestamp
	403, // 131: eating.OAuth2ClientToken.CodeExpiresAt:type_name -> google.protobuf.Duration
	403, // 132: eating.OAuth2ClientToken.AccessExpiresAt:type_name -> google.protobuf.Duration
	403, // 133: eating.OAuth2ClientToken.RefreshExpiresAt:type_name -> google.protobuf.Duration
	402, // 134: eating.PasswordResetToken.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 135: eating.PasswordResetToken.ExpiresAt:type_name -> google.protobuf.Timestamp
	402, // 136: eating.PasswordResetToken.RedeemedAt:type_name -> google.protobuf.Timestamp
	402, // 137: eating.PasswordResetToken.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	402, // 138: eating.Recipe.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 139: eating.Recipe.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	402, // 140: eating.Recipe.ArchivedAt:type_name -> google.protobuf.Timestamp
	17,  // 141: eating.Recipe.EstimatedPortions:type_name -> eating.Float32RangeWithOptionalMax
	79,  // 142: eating.Recipe.PrepTasks:type_name -> eating.RecipePrepTask
	90,  // 143: eating.Recipe.Steps:type_name -> eating.RecipeStep
	76,  // 144: eating.Recipe.Media:type_name -> eating.RecipeMedia
	73,  // 145: eating.Recipe.SupportingRecipes:type_name -> eating.Recipe
	17,  // 146: eating.RecipeCreationRequestInput.EstimatedPortions:type_name -> eating.Float32RangeWithOptionalMax
	86,  // 147: eating.RecipeCreationRequestInput.PrepTasks:type_name -> eating.RecipePrepTaskWithinRecipeCreationRequestInput
	97,  // 148: eating.RecipeCreationRequestInput.Steps:type_name -> eating.RecipeStepCreationRequestInput
	402, // 149: eating.RecipeMedia.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 150: eating.RecipeMedia.ArchivedAt:type_name -> google.protobuf.Timestamp
	402, // 151: eating.RecipeMedia.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	402, // 152: eating.RecipePrepTask.CreatedAt:type_name -> google.protobuf.Timestamp
	66,  // 153: eating.RecipePrepTask.StorageTemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	125, // 154: eating.RecipePrepTask.TimeBufferBeforeRecipeInSeconds:type_name -> eating.Uint32RangeWithOptionalMax
	402, // 155: eating.RecipePrepTask.ArchivedAt:type_name -> google.protobuf.Timestamp
	402, // 156: eating.RecipePrepTask.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	81,  // 157: eating.RecipePrepTask.TaskSteps:type_name -> eating.RecipePrepTaskStep
	66,  // 158: eating.RecipePrepTaskCreationRequestInput.StorageTemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	125, // 159: eating.RecipePrepTaskCreationRequestInput.TimeBufferBeforeRecipeInSeconds:type_name -> eating.Uint32RangeWithOptionalMax
	82,  // 160: eating.RecipePrepTaskCreationRequestInput.RecipeSteps:type_name -> eating.RecipePrepTaskStepCreationRequestInput
	66,  // 161: eating.RecipePrepTaskUpdateRequestInput.StorageTemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	126, // 162: eating.RecipePrepTaskUpdateRequestInput.TimeBufferBeforeRecipeInSeconds:type_name -> eating.Uint32RangeWithOptionalMaxUpdateRequestInput
	83,  // 163: eating.RecipePrepTaskUpdateRequestInput.TaskSteps:type_name -> eating.RecipePrepTaskStepUpdateRequestInput
	66,  // 164: eating.RecipePrepTaskWithinRecipeCreationRequestInput.StorageTemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	125, // 165: eating.RecipePrepTaskWithinRecipeCreationRequestInput.TimeBufferBeforeRecipeInSeconds:type_name -> eating.Uint32RangeWithOptionalMax
	84,  // 166: eating.RecipePrepTaskWithinRecipeCreationRequestInput.RecipeSteps:type_name -> eating.RecipePrepTaskStepWithinRecipeCreationRequestInput
	402, // 167: eating.RecipeRating.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 168: eating.RecipeRating.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	402, // 169: eating.RecipeRating.ArchivedAt:type_name -> google.protobuf.Timestamp
	402, // 170: eating.RecipeStep.CreatedAt:type_name -> google.protobuf.Timestamp
	67,  // 171: eating.RecipeStep.EstimatedTimeInSeconds:type_name -> eating.OptionalUint32Range
	66,  // 172: eating.RecipeStep.TemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	402, // 173: eating.RecipeStep.ArchivedAt:type_name -> google.protobuf.Timestamp
	402, // 174: eating.RecipeStep.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	76,  // 175: eating.RecipeStep.Media:type_name -> eating.RecipeMedia
	104, // 176: eating.RecipeStep.Products:type_name -> eating.RecipeStepProduct
	101, // 177: eating.RecipeStep.Instruments:type_name -> eating.RecipeStepInstrument
	108, // 178: eating.RecipeStep.Vessels:type_name -> eating.RecipeStepVessel
	91,  // 179: eating.RecipeStep.CompletionConditions:type_name -> eating.RecipeStepCompletionCondition
	98,  // 180: eating.RecipeStep.Ingredients:type_name -> eating.RecipeStepIngredient
	178, // 181: eating.RecipeStep.Preparation:type_name -> eating.ValidPreparation
	402, // 182: eating.RecipeStepCompletionCondition.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 183: eating.RecipeStepCompletionCondition.ArchivedAt:type_name -> google.protobuf.Timestamp
	402, // 184: eating.RecipeStepCompletionCondition.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	162, // 185: eating.RecipeStepCompletionCondition.IngredientState:type_name -> eating.ValidIngredientState
	94,  // 186: eating.RecipeStepCompletionCondition.Ingredients:type_name -> eating.RecipeStepCompletionConditionIngredient
	95,  // 187: eating.RecipeStepCompletionConditionForExistingRecipeCreationRequestInput.Ingredients:type_name -> eating.RecipeStepCompletionConditionIngredientForExistingRecipeCreationRequestInput
	402, // 188: eating.RecipeStepCompletionConditionIngredient.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 189: eating.RecipeStepCompletionConditionIngredient.ArchivedAt:type_name -> google.protobuf.Timestamp
	402, // 190: eating.RecipeStepCompletionConditionIngredient.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	67,  // 191: eating.RecipeStepCreationRequestInput.EstimatedTimeInSeconds:type_name -> eating.OptionalUint32Range
	66,  // 192: eating.RecipeStepCreationRequestInput.TemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	102, // 193: eating.RecipeStepCreationRequestInput.Instruments:type_name -> eating.RecipeStepInstrumentCreationRequestInput
	109, // 194: eating.RecipeStepCreationRequestInput.Vessels:type_name -> eating.RecipeStepVesselCreationRequestInput
	105, // 195: eating.RecipeStepCreationRequestInput.Products:type_name -> eating.RecipeStepProductCreationRequestInput
	99,  // 196: eating.RecipeStepCreationRequestInput.Ingredients:type_name -> eating.RecipeStepIngredientCreationRequestInput
	92,  // 197: eating.RecipeStepCreationRequestInput.CompletionConditions:type_name -> eating.RecipeStepCompletionConditionCreationRequestInput
	402, // 198: eating.RecipeStepIngredient.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 199: eating.RecipeStepIngredient.ArchivedAt:type_name -> google.protobuf.Timestamp
	149, // 200: eating.RecipeStepIngredient.Ingredient:type_name -> eating.ValidIngredient
	402, // 201: eating.RecipeStepIngredient.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	17,  // 202: eating.RecipeStepIngredient.Quantity:type_name -> eating.Float32RangeWithOptionalMax
	172, // 203: eating.RecipeStepIngredient.MeasurementUnit:type_name -> eating.ValidMeasurementUnit
	17,  // 204: eating.RecipeStepIngredientCreationRequestInput.Quantity:type_name -> eating.Float32RangeWithOptionalMax
	18,  // 205: eating.RecipeStepIngredientUpdateRequestInput.Quantity:type_name -> eating.Float32RangeWithOptionalMaxUpdateRequestInput
	402, // 206: eating.RecipeStepInstrument.CreatedAt:type_name -> google.protobuf.Timestamp
	169, // 207: eating.RecipeStepInstrument.Instrument:type_name -> eating.ValidInstrument
	402, // 208: eating.RecipeStepInstrument.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	402, // 209: eating.RecipeStepInstrument.ArchivedAt:type_name -> google.protobuf.Timestamp
	125, // 210: eating.RecipeStepInstrument.Quantity:type_name -> eating.Uint32RangeWithOptionalMax
	125, // 211: eating.RecipeStepInstrumentCreationRequestInput.Quantity:type_name -> eating.Uint32RangeWithOptionalMax
	126, // 212: eating.RecipeStepInstrumentUpdateRequestInput.Quantity:type_name -> eating.Uint32RangeWithOptionalMaxUpdateRequestInput
	402, // 213: eating.RecipeStepProduct.CreatedAt:type_name -> google.protobuf.Timestamp
	66,  // 214: eating.RecipeStepProduct.StorageTemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	67,  // 215: eating.RecipeStepProduct.StorageDurationInSeconds:type_name -> eating.OptionalUint32Range
	66,  // 216: eating.RecipeStepProduct.Quantity:type_name -> eating.OptionalFloat32Range
	402, // 217: eating.RecipeStepProduct.ArchivedAt:type_name -> google.protobuf.Timestamp
	402, // 218: eating.RecipeStepProduct.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	172, // 219: eating.RecipeStepProduct.MeasurementUnit:type_name -> eating.ValidMeasurementUnit
	66,  // 220: eating.RecipeStepProductCreationRequestInput.StorageTemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	67,  // 221: eating.RecipeStepProductCreationRequestInput.StorageDurationInSeconds:type_name -> eating.OptionalUint32Range
	66,  // 222: eating.RecipeStepProductCreationRequestInput.Quantity:type_name -> eating.OptionalFloat32Range
	66,  // 223: eating.RecipeStepProductUpdateRequestInput.StorageTemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	67,  // 224: eating.RecipeStepProductUpdateRequestInput.StorageDurationInSeconds:type_name -> eating.OptionalUint32Range
	66,  // 225: eating.RecipeStepProductUpdateRequestInput.Quantity:type_name -> eating.OptionalFloat32Range
	67,  // 226: eating.RecipeStepUpdateRequestInput.EstimatedTimeInSeconds:type_name -> eating.OptionalUint32Range
	66,  // 227: eating.RecipeStepUpdateRequestInput.TemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	178, // 228: eating.RecipeStepUpdateRequestInput.Preparation:type_name -> eating.ValidPreparation
	402, // 229: eating.RecipeStepVessel.CreatedAt:type_name -> google.protobuf.Timestamp
	123, // 230: eating.RecipeStepVessel.Quantity:type_name -> eating.Uint16RangeWithOptionalMax
	402, // 231: eating.RecipeStepVessel.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	402, // 232: eating.RecipeStepVessel.ArchivedAt:type_name -> google.protobuf.Timestamp
	187, // 233: eating.RecipeStepVessel.Vessel:type_name -> eating.ValidVessel
	123, // 234: eating.RecipeStepVesselCreationRequestInput.Quantity:type_name -> eating.Uint16RangeWithOptionalMax
	124, // 235: eating.RecipeStepVesselUpdateRequestInput.Quantity:type_name -> eating.Uint16RangeWithOptionalMaxUpdateRequestInput
	18,  // 236: eating.RecipeUpdateRequestInput.EstimatedPortions:type_name -> eating.Float32RangeWithOptionalMaxUpdateRequestInput
	402, // 237: eating.ServiceSetting.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 238: eating.ServiceSetting.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	402, // 239: eating.ServiceSetting.ArchivedAt:type_name -> google.protobuf.Timestamp
	402, // 240: eating.ServiceSettingConfiguration.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 241: eating.ServiceSettingConfiguration.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	402, // 242: eating.ServiceSettingConfiguration.ArchivedAt:type_name -> google.protobuf.Timestamp
	113, // 243: eating.ServiceSettingConfiguration.ServiceSetting:type_name -> eating.ServiceSetting
	402, // 244: eating.TokenResponse.Expires:type_name -> google.protobuf.Timestamp
	402, // 245: eating.User.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 246: eating.User.PasswordLastChangedAt:type_name -> google.protobuf.Timestamp
	402, // 247: eating.User.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	402, // 248: eating.User.LastAcceptedTermsOfService:type_name -> google.protobuf.Timestamp
	402, // 249: eating.User.LastAcceptedPrivacyPolicy:type_name -> google.protobuf.Timestamp
	402, // 250: eating.User.TwoFactorSecretVerifiedAt:type_name -> google.protobuf.Timestamp
	402, // 251: eating.User.Birthday:type_name -> google.protobuf.Timestamp
	402, // 252: eating.User.ArchivedAt:type_name -> google.protobuf.Timestamp
	402, // 253: eating.User.EmailAddressVerifiedAt:type_name -> google.protobuf.Timestamp
	402, // 254: eating.UserCreationResponse.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 255: eating.UserCreationResponse.Birthday:type_name -> google.protobuf.Timestamp
	7,   // 256: eating.UserDataCollection.Core:type_name -> eating.CoreUserDataCollection
	12,  // 257: eating.UserDataCollection.Eating:type_name -> eating.EatingUserDataCollection
	127, // 258: eating.UserDataCollection.User:type_name -> eating.User
	402, // 259: eating.UserDetailsDatabaseUpdateInput.Birthday:type_name -> google.protobuf.Timestamp
	402, // 260: eating.UserDetailsUpdateRequestInput.Birthday:type_name -> google.protobuf.Timestamp
	402, // 261: eating.UserIngredientPreference.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 262: eating.UserIngredientPreference.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	402, // 263: eating.UserIngredientPreference.ArchivedAt:type_name -> google.protobuf.Timestamp
	149, // 264: eating.UserIngredientPreference.Ingredient:type_name -> eating.ValidIngredient
	402, // 265: eating.UserNotification.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 266: eating.UserNotification.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	401, // 267: eating.UserPermissionsResponse.Permissions:type_name -> eating.UserPermissionsResponse.PermissionsEntry
	402, // 268: eating.UserRegistrationInput.Birthday:type_name -> google.protobuf.Timestamp
	402, // 269: eating.ValidIngredient.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 270: eating.ValidIngredient.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	402, // 271: eating.ValidIngredient.ArchivedAt:type_name -> google.protobuf.Timestamp
	66,  // 272: eating.ValidIngredient.StorageTemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	66,  // 273: eating.ValidIngredientCreationRequestInput.StorageTemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	402, // 274: eating.ValidIngredientGroup.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 275: eating.ValidIngredientGroup.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	402, // 276: eating.ValidIngredientGroup.ArchivedAt:type_name -> google.protobuf.Timestamp
	153, // 277: eating.ValidIngredientGroup.Members:type_name -> eating.ValidIngredientGroupMember
	154, // 278: eating.ValidIngredientGroupCreationRequestInput.Members:type_name -> eating.ValidIngredientGroupMemberCreationRequestInput
	402, // 279: eating.ValidIngredientGroupMember.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 280: eating.ValidIngredientGroupMember.ArchivedAt:type_name -> google.protobuf.Timestamp
	149, // 281: eating.ValidIngredientGroupMember.ValidIngredient:type_name -> eating.ValidIngredient
	402, // 282: eating.ValidIngredientMeasurementUnit.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 283: eating.ValidIngredientMeasurementUnit.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	402, // 284: eating.ValidIngredientMeasurementUnit.ArchivedAt:type_name -> google.protobuf.Timestamp
	17,  // 285: eating.ValidIngredientMeasurementUnit.AllowableQuantity:type_name -> eating.Float32RangeWithOptionalMax
	172, // 286: eating.ValidIngredientMeasurementUnit.MeasurementUnit:type_name -> eating.ValidMeasurementUnit
	149, // 287: eating.ValidIngredientMeasurementUnit.Ingredient:type_name -> eating.ValidIngredient
	17,  // 288: eating.ValidIngredientMeasurementUnitCreationRequestInput.AllowableQuantity:type_name -> eating.Float32RangeWithOptionalMax
	18,  // 289: eating.ValidIngredientMeasurementUnitUpdateRequestInput.AllowableQuantity:type_name -> eating.Float32RangeWithOptionalMaxUpdateRequestInput
	402, // 290: eating.ValidIngredientPreparation.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 291: eating.ValidIngredientPreparation.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	402, // 292: eating.ValidIngredientPreparation.ArchivedAt:type_name -> google.protobuf.Timestamp
	178, // 293: eating.ValidIngredientPreparation.Preparation:type_name -> eating.ValidPreparation
	149, // 294: eating.ValidIngredientPreparation.Ingredient:type_name -> eating.ValidIngredient
	402, // 295: eating.ValidIngredientState.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 296: eating.ValidIngredientState.ArchivedAt:type_name -> google.protobuf.Timestamp
	402, // 297: eating.ValidIngredientState.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	402, // 298: eating.ValidIngredientStateIngredient.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 299: eating.ValidIngredientStateIngredient.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	402, // 300: eating.ValidIngredientStateIngredient.ArchivedAt:type_name -> google.protobuf.Timestamp
	162, // 301: eating.ValidIngredientStateIngredient.IngredientState:type_name -> eating.ValidIngredientState
	149, // 302: eating.ValidIngredientStateIngredient.Ingredient:type_name -> eating.ValidIngredient
	66,  // 303: eating.ValidIngredientUpdateRequestInput.StorageTemperatureInCelsius:type_name -> eating.OptionalFloat32Range
	402, // 304: eating.ValidInstrument.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 305: eating.ValidInstrument.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	402, // 306: eating.ValidInstrument.ArchivedAt:type_name -> google.protobuf.Timestamp
	402, // 307: eating.ValidMeasurementUnit.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 308: eating.ValidMeasurementUnit.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	402, // 309: eating.ValidMeasurementUnit.ArchivedAt:type_name -> google.protobuf.Timestamp
	402, // 310: eating.ValidMeasurementUnitConversion.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 311: eating.ValidMeasurementUnitConversion.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	402, // 312: eating.ValidMeasurementUnitConversion.ArchivedAt:type_name -> google.protobuf.Timestamp
	149, // 313: eating.ValidMeasurementUnitConversion.OnlyForIngredient:type_name -> eating.ValidIngredient
	172, // 314: eating.ValidMeasurementUnitConversion.From:type_name -> eating.ValidMeasurementUnit
	172, // 315: eating.ValidMeasurementUnitConversion.To:type_name -> eating.ValidMeasurementUnit
	402, // 316: eating.ValidPreparation.CreatedAt:type_name -> google.protobuf.Timestamp
	123, // 317: eating.ValidPreparation.InstrumentCount:type_name -> eating.Uint16RangeWithOptionalMax
	123, // 318: eating.ValidPreparation.IngredientCount:type_name -> eating.Uint16RangeWithOptionalMax
	123, // 319: eating.ValidPreparation.VesselCount:type_name -> eating.Uint16RangeWithOptionalMax
	402, // 320: eating.ValidPreparation.ArchivedAt:type_name -> google.protobuf.Timestamp
	402, // 321: eating.ValidPreparation.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	123, // 322: eating.ValidPreparationCreationRequestInput.InstrumentCount:type_name -> eating.Uint16RangeWithOptionalMax
	123, // 323: eating.ValidPreparationCreationRequestInput.IngredientCount:type_name -> eating.Uint16RangeWithOptionalMax
	123, // 324: eating.ValidPreparationCreationRequestInput.VesselCount:type_name -> eating.Uint16RangeWithOptionalMax
	402, // 325: eating.ValidPreparationInstrument.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 326: eating.ValidPreparationInstrument.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	402, // 327: eating.ValidPreparationInstrument.ArchivedAt:type_name -> google.protobuf.Timestamp
	169, // 328: eating.ValidPreparationInstrument.Instrument:type_name -> eating.ValidInstrument
	178, // 329: eating.ValidPreparationInstrument.Preparation:type_name -> eating.ValidPreparation
	124, // 330: eating.ValidPreparationUpdateRequestInput.InstrumentCount:type_name -> eating.Uint16RangeWithOptionalMaxUpdateRequestInput
	124, // 331: eating.ValidPreparationUpdateRequestInput.IngredientCount:type_name -> eating.Uint16RangeWithOptionalMaxUpdateRequestInput
	124, // 332: eating.ValidPreparationUpdateRequestInput.VesselCount:type_name -> eating.Uint16RangeWithOptionalMaxUpdateRequestInput
	402, // 333: eating.ValidPreparationVessel.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 334: eating.ValidPreparationVessel.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	402, // 335: eating.ValidPreparationVessel.ArchivedAt:type_name -> google.protobuf.Timestamp
	178, // 336: eating.ValidPreparationVessel.Preparation:type_name -> eating.ValidPreparation
	187, // 337: eating.ValidPreparationVessel.Vessel:type_name -> eating.ValidVessel
	402, // 338: eating.ValidVessel.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 339: eating.ValidVessel.ArchivedAt:type_name -> google.protobuf.Timestamp
	402, // 340: eating.ValidVessel.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	172, // 341: eating.ValidVessel.CapacityUnit:type_name -> eating.ValidMeasurementUnit
	402, // 342: eating.Webhook.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 343: eating.Webhook.ArchivedAt:type_name -> google.protobuf.Timestamp
	402, // 344: eating.Webhook.LastUpdatedAt:type_name -> google.protobuf.Timestamp
	193, // 345: eating.Webhook.Events:type_name -> eating.WebhookTriggerEvent
	404, // 346: eating.WebhookExecutionRequest.Payload:type_name -> google.protobuf.Any
	402, // 347: eating.WebhookTriggerEvent.CreatedAt:type_name -> google.protobuf.Timestamp
	402, // 348: eating.WebhookTriggerEvent.ArchivedAt:type_name -> google.protobuf.Timestamp
	182, // 349: eating.UpdateValidPreparationInstrumentRequest.input:type_name -> eating.ValidPreparationInstrumentUpdateRequestInput
	26,  // 350: eating.CancelHouseholdInvitationRequest.input:type_name -> eating.HouseholdInvitationUpdateRequestInput
	26,  // 351: eating.RejectHouseholdInvitationRequest.input:type_name -> eating.HouseholdInvitationUpdateRequestInput
	28,  // 352: eating.UpdateHouseholdRequest.input:type_name -> eating.HouseholdUpdateRequestInput
	0,   // 353: eating.GetValidVesselsRequest.filter:type_name -> eating.QueryFilter
	0,   // 354: eating.GetServiceSettingConfigurationsForUserRequest.filter:type_name -> eating.QueryFilter
	0,   // 355: eating.GetValidIngredientMeasurementUnitsByMeasurementUnitRequest.filter:type_name -> eating.QueryFilter
	0,   // 356: eating.GetValidPreparationVesselsByVesselRequest.filter:type_name -> eating.QueryFilter
	0,   // 357: eating.GetWebhooksRequest.filter:type_name -> eating.QueryFilter
	0,   // 358: eating.GetAuditLogEntriesForUserRequest.filter:type_name -> eating.QueryFilter
	0,   // 359: eating.GetRecipesRequest.filter:type_name -> eating.QueryFilter
	183, // 360: eating.UpdateValidPreparationRequest.input:type_name -> eating.ValidPreparationUpdateRequestInput
	57,  // 361: eating.UpdateMealPlanRequest.input:type_name -> eating.MealPlanUpdateRequestInput
	0,   // 362: eating.SearchValidIngredientsByPreparationRequest.filter:type_name -> eating.QueryFilter
	0,   // 363: eating.SearchForValidVesselsRequest.filter:type_name -> eating.QueryFilter
	0,   // 364: eating.GetUserIngredientPreferencesRequest.filter:type_name -> eating.QueryFilter
	177, // 365: eating.UpdateValidMeasurementUnitRequest.input:type_name -> eating.ValidMeasurementUnitUpdateRequestInput
	0,   // 366: eating.GetAuditLogEntriesForHouseholdRequest.filter:type_name -> eating.QueryFilter
	0,   // 367: eating.GetValidIngredientPreparationsByPreparationRequest.filter:type_name -> eating.QueryFilter
	52,  // 368: eating.UpdateMealPlanOptionVoteRequest.input:type_name -> eating.MealPlanOptionVoteUpdateRequestInput
	0,   // 369: eating.GetOAuth2ClientsRequest.filter:type_name -> eating.QueryFilter
	0,   // 370: eating.GetValidPreparationsRequest.filter:type_name -> eating.QueryFilter
	0,   // 371: eating.SearchForMealsRequest.filter:type_name -> eating.QueryFilter
	0,   // 372: eating.GetMealPlanGroceryListItemsForMealPlanRequest.filter:type_name -> eating.QueryFilter
	0,   // 373: eating.GetValidIngredientGroupsRequest.filter:type_name -> eating.QueryFilter
	0,   // 374: eating.GetValidMeasurementUnitConversionsFromUnitRequest.filter:type_name -> eating.QueryFilter
	138, // 375: eating.UpdateUserIngredientPreferenceRequest.input:type_name -> eating.UserIngredientPreferenceUpdateRequestInput
	0,   // 376: eating.GetValidIngredientPreparationsRequest.filter:type_name -> eating.QueryFilter
	100, // 377: eating.UpdateRecipeStepIngredientRequest.input:type_name -> eating.RecipeStepIngredientUpdateRequestInput
	105, // 378: eating.CreateRecipeStepProductRequest.input:type_name -> eating.RecipeStepProductCreationRequestInput
	0,   // 379: eating.CreateMealPlanOptionVoteRequest.filter:type_name -> eating.QueryFilter
	51,  // 380: eating.CreateMealPlanOptionVoteRequest.input:type_name -> eating.MealPlanOptionVoteCreationRequestInput
	0,   // 381: eating.GetSentHouseholdInvitationsRequest.filter:type_name -> eating.QueryFilter
	0,   // 382: eating.SearchForUsersRequest.filter:type_name -> eating.QueryFilter
	155, // 383: eating.UpdateValidIngredientGroupRequest.input:type_name -> eating.ValidIngredientGroupUpdateRequestInput
	110, // 384: eating.UpdateRecipeStepVesselRequest.input:type_name -> eating.RecipeStepVesselUpdateRequestInput
	0,   // 385: eating.GetValidInstrumentsRequest.filter:type_name -> eating.QueryFilter
	0,   // 386: eating.GetMealPlanTasksRequest.filter:type_name -> eating.QueryFilter
	0,   // 387: eating.GetValidIngredientStatesRequest.filter:type_name -> eating.QueryFilter
	42,  // 388: eating.UpdateMealPlanEventRequest.input:type_name -> eating.MealPlanEventUpdateRequestInput
	186, // 389: eating.UpdateValidPreparationVesselRequest.input:type_name -> eating.ValidPreparationVesselUpdateRequestInput
	56,  // 390: eating.UpdateMealPlanTaskStatusRequest.input:type_name -> eating.MealPlanTaskStatusChangeRequestInput
	0,   // 391: eating.GetMealPlanOptionsRequest.filter:type_name -> eating.QueryFilter
	0,   // 392: eating.SearchForRecipesRequest.filter:type_name -> eating.QueryFilter
	0,   // 393: eating.GetValidPreparationInstrumentsByInstrumentRequest.filter:type_name -> eating.QueryFilter
	0,   // 394: eating.GetValidIngredientPreparationsByIngredientRequest.filter:type_name -> eating.QueryFilter
	0,   // 395: eating.GetValidIngredientStateIngredientsByIngredientRequest.filter:type_name -> eating.QueryFilter
	45,  // 396: eating.UpdateMealPlanGroceryListItemRequest.input:type_name -> eating.MealPlanGroceryListItemUpdateRequestInput
	48,  // 397: eating.UpdateMealPlanOptionRequest.input:type_name -> eating.MealPlanOptionUpdateRequestInput
	89,  // 398: eating.UpdateRecipeRatingRequest.input:type_name -> eating.RecipeRatingUpdateRequestInput
	189, // 399: eating.UpdateValidVesselRequest.input:type_name -> eating.ValidVesselUpdateRequestInput
	0,   // 400: eating.GetValidIngredientStateIngredientsRequest.filter:type_name -> eating.QueryFilter
	0,   // 401: eating.GetValidPreparationVesselsRequest.filter:type_name -> eating.QueryFilter
	0,   // 402: eating.GetMealPlanEventsRequest.filter:type_name -> eating.QueryFilter
	0,   // 403: eating.GetValidIngredientsRequest.filter:type_name -> eating.QueryFilter
	0,   // 404: eating.SearchForValidInstrumentsRequest.filter:type_name -> eating.QueryFilter
	0,   // 405: eating.GetRecipeStepProductsRequest.filter:type_name -> eating.QueryFilter
	194, // 406: eating.CreateWebhookTriggerEventRequest.input:type_name -> eating.WebhookTriggerEventCreationRequestInput
	0,   // 407: eating.GetHouseholdsRequest.filter:type_name -> eating.QueryFilter
	23,  // 408: eating.UpdateHouseholdInstrumentOwnershipRequest.input:type_name -> eating.HouseholdInstrumentOwnershipUpdateRequestInput
	0,   // 409: eating.GetValidMeasurementUnitsRequest.filter:type_name -> eating.QueryFilter
	102, // 410: eating.CreateRecipeStepInstrumentRequest.input:type_name -> eating.RecipeStepInstrumentCreationRequestInput
	96,  // 411: eating.UpdateRecipeStepCompletionConditionRequest.input:type_name -> eating.RecipeStepCompletionConditionUpdateRequestInput
	88,  // 412: eating.CreateRecipeRatingRequest.input:type_name -> eating.RecipeRatingCreationRequestInput
	0,   // 413: eating.GetValidPreparationInstrumentsRequest.filter:type_name -> eating.QueryFilter
	0,   // 414: eating.GetRecipeStepCompletionConditionsRequest.filter:type_name -> eating.QueryFilter
	0,   // 415: eating.GetHouseholdInstrumentOwnershipsRequest.filter:type_name -> eating.QueryFilter
	106, // 416: eating.UpdateRecipeStepProductRequest.input:type_name -> eating.RecipeStepProductUpdateRequestInput
	0,   // 417: eating.GetMealsRequest.filter:type_name -> eating.QueryFilter
	93,  // 418: eating.CreateRecipeStepCompletionConditionRequest.input:type_name -> eating.RecipeStepCompletionConditionForExistingRecipeCreationRequestInput
	0,   // 419: eating.GetValidIngredientMeasurementUnitsRequest.filter:type_name -> eating.QueryFilter
	0,   // 420: eating.GetUsersRequest.filter:type_name -> eating.QueryFilter
	0,   // 421: eating.SearchForValidPreparationsRequest.filter:type_name -> eating.QueryFilter
	0,   // 422: eating.SearchForValidIngredientStatesRequest.filter:type_name -> eating.QueryFilter
	111, // 423: eating.UpdateRecipeRequest.input:type_name -> eating.RecipeUpdateRequestInput
	116, // 424: eating.UpdateServiceSettingConfigurationRequest.input:type_name -> eating.ServiceSettingConfigurationUpdateRequestInput
	60,  // 425: eating.UpdateHouseholdMemberPermissionsRequest.input:type_name -> eating.ModifyUserPermissionsInput
	27,  // 426: eating.TransferHouseholdOwnershipRequest.input:type_name -> eating.HouseholdOwnershipTransferInput
	0,   // 427: eating.GetUserNotificationsRequest.filter:type_name -> eating.QueryFilter
	167, // 428: eating.UpdateValidIngredientStateRequest.input:type_name -> eating.ValidIngredientStateUpdateRequestInput
	0,   // 429: eating.GetServiceSettingsRequest.filter:type_name -> eating.QueryFilter
	0,   // 430: eating.GetValidMeasurementUnitConversionsToUnitRequest.filter:type_name -> eating.QueryFilter
	0,   // 431: eating.GetValidIngredientMeasurementUnitsByIngredientRequest.filter:type_name -> eating.QueryFilter
	54,  // 432: eating.CreateMealPlanTaskRequest.input:type_name -> eating.MealPlanTaskCreationRequestInput
	0,   // 433: eating.SearchForValidMeasurementUnitsRequest.filter:type_name -> eating.QueryFilter
	168, // 434: eating.UpdateValidIngredientRequest.input:type_name -> eating.ValidIngredientUpdateRequestInput
	0,   // 435: eating.GetRecipeStepsRequest.filter:type_name -> eating.QueryFilter
	0,   // 436: eating.SearchForValidIngredientGroupsRequest.filter:type_name -> eating.QueryFilter
	0,   // 437: eating.GetRecipeRatingsForRecipeRequest.filter:type_name -> eating.QueryFilter
	47,  // 438: eating.CreateMealPlanOptionRequest.input:type_name -> eating.MealPlanOptionCreationRequestInput
	99,  // 439: eating.CreateRecipeStepIngredientRequest.input:type_name -> eating.RecipeStepIngredientCreationRequestInput
	0,   // 440: eating.GetRecipeStepInstrumentsRequest.filter:type_name -> eating.QueryFilter
	107, // 441: eating.UpdateRecipeStepRequest.input:type_name -> eating.RecipeStepUpdateRequestInput
	0,   // 442: eating.GetValidIngredientStateIngredientsByIngredientStateRequest.filter:type_name -> eating.QueryFilter
	109, // 443: eating.CreateRecipeStepVesselRequest.input:type_name -> eating.RecipeStepVesselCreationRequestInput
	171, // 444: eating.UpdateValidInstrumentRequest.input:type_name -> eating.ValidInstrumentUpdateRequestInput
	41,  // 445: eating.CreateMealPlanEventRequest.input:type_name -> eating.MealPlanEventCreationRequestInput
	0,   // 446: eating.GetServiceSettingConfigurationByNameRequest.filter:type_name -> eating.QueryFilter
	26,  // 447: eating.AcceptHouseholdInvitationRequest.input:type_name -> eating.HouseholdInvitationUpdateRequestInput
	25,  // 448: eating.CreateHouseholdInvitationRequest.input:type_name -> eating.HouseholdInvitationCreationRequestInput
	0,   // 449: eating.GetReceivedHouseholdInvitationsRequest.filter:type_name -> eating.QueryFilter
	0,   // 450: eating.GetRecipeStepVesselsRequest.filter:type_name -> eating.QueryFilter
	175, // 451: eating.UpdateValidMeasurementUnitConversionRequest.input:type_name -> eating.ValidMeasurementUnitConversionUpdateRequestInput
	0,   // 452: eating.GetValidPreparationVesselsByPreparationRequest.filter:type_name -> eating.QueryFilter
	0,   // 453: eating.GetMealPlanOptionVotesRequest.filter:type_name -> eating.QueryFilter
	142, // 454: eating.UpdateUserNotificationRequest.input:type_name -> eating.UserNotificationUpdateRequestInput
	0,   // 455: eating.SearchForServiceSettingsRequest.filter:type_name -> eating.QueryFilter
	97,  // 456: eating.CreateRecipeStepRequest.input:type_name -> eating.RecipeStepCreationRequestInput
	85,  // 457: eating.UpdateRecipePrepTaskRequest.input:type_name -> eating.RecipePrepTaskUpdateRequestInput
	0,   // 458: eating.GetServiceSettingConfigurationsForHouseholdRequest.filter:type_name -> eating.QueryFilter
	158, // 459: eating.UpdateValidIngredientMeasurementUnitRequest.input:type_name -> eating.ValidIngredientMeasurementUnitUpdateRequestInput
	0,   // 460: eating.GetRecipeStepIngredientsRequest.filter:type_name -> eating.QueryFilter
	0,   // 461: eating.SearchValidMeasurementUnitsByIngredientRequest.filter:type_name -> eating.QueryFilter
	161, // 462: eating.UpdateValidIngredientPreparationRequest.input:type_name -> eating.ValidIngredientPreparationUpdateRequestInput
	166, // 463: eating.UpdateValidIngredientStateIngredientRequest.input:type_name -> eating.ValidIngredientStateIngredientUpdateRequestInput
	0,   // 464: eating.GetMealPlansForHouseholdRequest.filter:type_name -> eating.QueryFilter
	80,  // 465: eating.CreateRecipePrepTaskRequest.input:type_name -> eating.RecipePrepTaskCreationRequestInput
	0,   // 466: eating.GetRecipePrepTasksRequest.filter:type_name -> eating.QueryFilter
	0,   // 467: eating.SearchForValidIngredientsRequest.filter:type_name -> eating.QueryFilter
	0,   // 468: eating.GetValidPreparationInstrumentsByPreparationRequest.filter:type_name -> eating.QueryFilter
	103, // 469: eating.UpdateRecipeStepInstrumentRequest.input:type_name -> eating.RecipeStepInstrumentUpdateRequestInput
	44,  // 470: eating.CreateMealPlanGroceryListItemRequest.input:type_name -> eating.MealPlanGroceryListItemCreationRequestInput
	6,   // 471: eating.AuditLogEntry.ChangesEntry.value:type_name -> eating.ChangeLog
	404, // 472: eating.DataChangeMessage.ContextEntry.value:type_name -> google.protobuf.Any
	473, // [473:473] is the sub-list for method output_type
	473, // [473:473] is the sub-list for method input_type
	473, // [473:473] is the sub-list for extension type_name
	473, // [473:473] is the sub-list for extension extendee
	0,   // [0:473] is the sub-list for field type_name
}

func init() { file_messages_proto_init() }
func file_messages_proto_init() {
	if File_messages_proto != nil {
		return
	}
	file_messages_proto_msgTypes[0].OneofWrappers = []any{}
	file_messages_proto_msgTypes[66].OneofWrappers = []any{}
	file_messages_proto_msgTypes[67].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_messages_proto_rawDesc), len(file_messages_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   402,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_messages_proto_goTypes,
		DependencyIndexes: file_messages_proto_depIdxs,
		MessageInfos:      file_messages_proto_msgTypes,
	}.Build()
	File_messages_proto = out.File
	file_messages_proto_goTypes = nil
	file_messages_proto_depIdxs = nil
}
