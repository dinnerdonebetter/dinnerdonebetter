// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: service.proto

package service

import (
	context "context"

	messages "github.com/dinnerdonebetter/backend/internal/grpc/messages"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EatingService_AcceptHouseholdInvitation_FullMethodName                           = "/eating.EatingService/AcceptHouseholdInvitation"
	EatingService_AdminLoginForToken_FullMethodName                                  = "/eating.EatingService/AdminLoginForToken"
	EatingService_AdminUpdateUserStatus_FullMethodName                               = "/eating.EatingService/AdminUpdateUserStatus"
	EatingService_AggregateUserDataReport_FullMethodName                             = "/eating.EatingService/AggregateUserDataReport"
	EatingService_ArchiveHousehold_FullMethodName                                    = "/eating.EatingService/ArchiveHousehold"
	EatingService_ArchiveHouseholdInstrumentOwnership_FullMethodName                 = "/eating.EatingService/ArchiveHouseholdInstrumentOwnership"
	EatingService_ArchiveMeal_FullMethodName                                         = "/eating.EatingService/ArchiveMeal"
	EatingService_ArchiveMealPlan_FullMethodName                                     = "/eating.EatingService/ArchiveMealPlan"
	EatingService_ArchiveMealPlanEvent_FullMethodName                                = "/eating.EatingService/ArchiveMealPlanEvent"
	EatingService_ArchiveMealPlanGroceryListItem_FullMethodName                      = "/eating.EatingService/ArchiveMealPlanGroceryListItem"
	EatingService_ArchiveMealPlanOption_FullMethodName                               = "/eating.EatingService/ArchiveMealPlanOption"
	EatingService_ArchiveMealPlanOptionVote_FullMethodName                           = "/eating.EatingService/ArchiveMealPlanOptionVote"
	EatingService_ArchiveOAuth2Client_FullMethodName                                 = "/eating.EatingService/ArchiveOAuth2Client"
	EatingService_ArchiveRecipe_FullMethodName                                       = "/eating.EatingService/ArchiveRecipe"
	EatingService_ArchiveRecipePrepTask_FullMethodName                               = "/eating.EatingService/ArchiveRecipePrepTask"
	EatingService_ArchiveRecipeRating_FullMethodName                                 = "/eating.EatingService/ArchiveRecipeRating"
	EatingService_ArchiveRecipeStep_FullMethodName                                   = "/eating.EatingService/ArchiveRecipeStep"
	EatingService_ArchiveRecipeStepCompletionCondition_FullMethodName                = "/eating.EatingService/ArchiveRecipeStepCompletionCondition"
	EatingService_ArchiveRecipeStepIngredient_FullMethodName                         = "/eating.EatingService/ArchiveRecipeStepIngredient"
	EatingService_ArchiveRecipeStepInstrument_FullMethodName                         = "/eating.EatingService/ArchiveRecipeStepInstrument"
	EatingService_ArchiveRecipeStepProduct_FullMethodName                            = "/eating.EatingService/ArchiveRecipeStepProduct"
	EatingService_ArchiveRecipeStepVessel_FullMethodName                             = "/eating.EatingService/ArchiveRecipeStepVessel"
	EatingService_ArchiveServiceSetting_FullMethodName                               = "/eating.EatingService/ArchiveServiceSetting"
	EatingService_ArchiveServiceSettingConfiguration_FullMethodName                  = "/eating.EatingService/ArchiveServiceSettingConfiguration"
	EatingService_ArchiveUser_FullMethodName                                         = "/eating.EatingService/ArchiveUser"
	EatingService_ArchiveUserIngredientPreference_FullMethodName                     = "/eating.EatingService/ArchiveUserIngredientPreference"
	EatingService_ArchiveUserMembership_FullMethodName                               = "/eating.EatingService/ArchiveUserMembership"
	EatingService_ArchiveValidIngredient_FullMethodName                              = "/eating.EatingService/ArchiveValidIngredient"
	EatingService_ArchiveValidIngredientGroup_FullMethodName                         = "/eating.EatingService/ArchiveValidIngredientGroup"
	EatingService_ArchiveValidIngredientMeasurementUnit_FullMethodName               = "/eating.EatingService/ArchiveValidIngredientMeasurementUnit"
	EatingService_ArchiveValidIngredientPreparation_FullMethodName                   = "/eating.EatingService/ArchiveValidIngredientPreparation"
	EatingService_ArchiveValidIngredientState_FullMethodName                         = "/eating.EatingService/ArchiveValidIngredientState"
	EatingService_ArchiveValidIngredientStateIngredient_FullMethodName               = "/eating.EatingService/ArchiveValidIngredientStateIngredient"
	EatingService_ArchiveValidInstrument_FullMethodName                              = "/eating.EatingService/ArchiveValidInstrument"
	EatingService_ArchiveValidMeasurementUnit_FullMethodName                         = "/eating.EatingService/ArchiveValidMeasurementUnit"
	EatingService_ArchiveValidMeasurementUnitConversion_FullMethodName               = "/eating.EatingService/ArchiveValidMeasurementUnitConversion"
	EatingService_ArchiveValidPreparation_FullMethodName                             = "/eating.EatingService/ArchiveValidPreparation"
	EatingService_ArchiveValidPreparationInstrument_FullMethodName                   = "/eating.EatingService/ArchiveValidPreparationInstrument"
	EatingService_ArchiveValidPreparationVessel_FullMethodName                       = "/eating.EatingService/ArchiveValidPreparationVessel"
	EatingService_ArchiveValidVessel_FullMethodName                                  = "/eating.EatingService/ArchiveValidVessel"
	EatingService_ArchiveWebhook_FullMethodName                                      = "/eating.EatingService/ArchiveWebhook"
	EatingService_ArchiveWebhookTriggerEvent_FullMethodName                          = "/eating.EatingService/ArchiveWebhookTriggerEvent"
	EatingService_CancelHouseholdInvitation_FullMethodName                           = "/eating.EatingService/CancelHouseholdInvitation"
	EatingService_CheckForReadiness_FullMethodName                                   = "/eating.EatingService/CheckForReadiness"
	EatingService_CheckPermissions_FullMethodName                                    = "/eating.EatingService/CheckPermissions"
	EatingService_CloneRecipe_FullMethodName                                         = "/eating.EatingService/CloneRecipe"
	EatingService_CreateHousehold_FullMethodName                                     = "/eating.EatingService/CreateHousehold"
	EatingService_CreateHouseholdInstrumentOwnership_FullMethodName                  = "/eating.EatingService/CreateHouseholdInstrumentOwnership"
	EatingService_CreateHouseholdInvitation_FullMethodName                           = "/eating.EatingService/CreateHouseholdInvitation"
	EatingService_CreateMeal_FullMethodName                                          = "/eating.EatingService/CreateMeal"
	EatingService_CreateMealPlan_FullMethodName                                      = "/eating.EatingService/CreateMealPlan"
	EatingService_CreateMealPlanEvent_FullMethodName                                 = "/eating.EatingService/CreateMealPlanEvent"
	EatingService_CreateMealPlanGroceryListItem_FullMethodName                       = "/eating.EatingService/CreateMealPlanGroceryListItem"
	EatingService_CreateMealPlanOption_FullMethodName                                = "/eating.EatingService/CreateMealPlanOption"
	EatingService_CreateMealPlanOptionVote_FullMethodName                            = "/eating.EatingService/CreateMealPlanOptionVote"
	EatingService_CreateMealPlanTask_FullMethodName                                  = "/eating.EatingService/CreateMealPlanTask"
	EatingService_CreateOAuth2Client_FullMethodName                                  = "/eating.EatingService/CreateOAuth2Client"
	EatingService_CreateRecipe_FullMethodName                                        = "/eating.EatingService/CreateRecipe"
	EatingService_CreateRecipePrepTask_FullMethodName                                = "/eating.EatingService/CreateRecipePrepTask"
	EatingService_CreateRecipeRating_FullMethodName                                  = "/eating.EatingService/CreateRecipeRating"
	EatingService_CreateRecipeStep_FullMethodName                                    = "/eating.EatingService/CreateRecipeStep"
	EatingService_CreateRecipeStepCompletionCondition_FullMethodName                 = "/eating.EatingService/CreateRecipeStepCompletionCondition"
	EatingService_CreateRecipeStepIngredient_FullMethodName                          = "/eating.EatingService/CreateRecipeStepIngredient"
	EatingService_CreateRecipeStepInstrument_FullMethodName                          = "/eating.EatingService/CreateRecipeStepInstrument"
	EatingService_CreateRecipeStepProduct_FullMethodName                             = "/eating.EatingService/CreateRecipeStepProduct"
	EatingService_CreateRecipeStepVessel_FullMethodName                              = "/eating.EatingService/CreateRecipeStepVessel"
	EatingService_CreateServiceSetting_FullMethodName                                = "/eating.EatingService/CreateServiceSetting"
	EatingService_CreateServiceSettingConfiguration_FullMethodName                   = "/eating.EatingService/CreateServiceSettingConfiguration"
	EatingService_CreateUser_FullMethodName                                          = "/eating.EatingService/CreateUser"
	EatingService_CreateUserIngredientPreference_FullMethodName                      = "/eating.EatingService/CreateUserIngredientPreference"
	EatingService_CreateUserNotification_FullMethodName                              = "/eating.EatingService/CreateUserNotification"
	EatingService_CreateValidIngredient_FullMethodName                               = "/eating.EatingService/CreateValidIngredient"
	EatingService_CreateValidIngredientGroup_FullMethodName                          = "/eating.EatingService/CreateValidIngredientGroup"
	EatingService_CreateValidIngredientMeasurementUnit_FullMethodName                = "/eating.EatingService/CreateValidIngredientMeasurementUnit"
	EatingService_CreateValidIngredientPreparation_FullMethodName                    = "/eating.EatingService/CreateValidIngredientPreparation"
	EatingService_CreateValidIngredientState_FullMethodName                          = "/eating.EatingService/CreateValidIngredientState"
	EatingService_CreateValidIngredientStateIngredient_FullMethodName                = "/eating.EatingService/CreateValidIngredientStateIngredient"
	EatingService_CreateValidInstrument_FullMethodName                               = "/eating.EatingService/CreateValidInstrument"
	EatingService_CreateValidMeasurementUnit_FullMethodName                          = "/eating.EatingService/CreateValidMeasurementUnit"
	EatingService_CreateValidMeasurementUnitConversion_FullMethodName                = "/eating.EatingService/CreateValidMeasurementUnitConversion"
	EatingService_CreateValidPreparation_FullMethodName                              = "/eating.EatingService/CreateValidPreparation"
	EatingService_CreateValidPreparationInstrument_FullMethodName                    = "/eating.EatingService/CreateValidPreparationInstrument"
	EatingService_CreateValidPreparationVessel_FullMethodName                        = "/eating.EatingService/CreateValidPreparationVessel"
	EatingService_CreateValidVessel_FullMethodName                                   = "/eating.EatingService/CreateValidVessel"
	EatingService_CreateWebhook_FullMethodName                                       = "/eating.EatingService/CreateWebhook"
	EatingService_CreateWebhookTriggerEvent_FullMethodName                           = "/eating.EatingService/CreateWebhookTriggerEvent"
	EatingService_DestroyAllUserData_FullMethodName                                  = "/eating.EatingService/DestroyAllUserData"
	EatingService_FetchUserDataReport_FullMethodName                                 = "/eating.EatingService/FetchUserDataReport"
	EatingService_FinalizeMealPlan_FullMethodName                                    = "/eating.EatingService/FinalizeMealPlan"
	EatingService_GetActiveHousehold_FullMethodName                                  = "/eating.EatingService/GetActiveHousehold"
	EatingService_GetAuditLogEntriesForHousehold_FullMethodName                      = "/eating.EatingService/GetAuditLogEntriesForHousehold"
	EatingService_GetAuditLogEntriesForUser_FullMethodName                           = "/eating.EatingService/GetAuditLogEntriesForUser"
	EatingService_GetAuditLogEntryByID_FullMethodName                                = "/eating.EatingService/GetAuditLogEntryByID"
	EatingService_GetAuthStatus_FullMethodName                                       = "/eating.EatingService/GetAuthStatus"
	EatingService_GetHousehold_FullMethodName                                        = "/eating.EatingService/GetHousehold"
	EatingService_GetHouseholdInstrumentOwnership_FullMethodName                     = "/eating.EatingService/GetHouseholdInstrumentOwnership"
	EatingService_GetHouseholdInstrumentOwnerships_FullMethodName                    = "/eating.EatingService/GetHouseholdInstrumentOwnerships"
	EatingService_GetHouseholdInvitation_FullMethodName                              = "/eating.EatingService/GetHouseholdInvitation"
	EatingService_GetHouseholdInvitationByID_FullMethodName                          = "/eating.EatingService/GetHouseholdInvitationByID"
	EatingService_GetHouseholds_FullMethodName                                       = "/eating.EatingService/GetHouseholds"
	EatingService_GetMeal_FullMethodName                                             = "/eating.EatingService/GetMeal"
	EatingService_GetMealPlan_FullMethodName                                         = "/eating.EatingService/GetMealPlan"
	EatingService_GetMealPlanEvent_FullMethodName                                    = "/eating.EatingService/GetMealPlanEvent"
	EatingService_GetMealPlanEvents_FullMethodName                                   = "/eating.EatingService/GetMealPlanEvents"
	EatingService_GetMealPlanGroceryListItem_FullMethodName                          = "/eating.EatingService/GetMealPlanGroceryListItem"
	EatingService_GetMealPlanGroceryListItemsForMealPlan_FullMethodName              = "/eating.EatingService/GetMealPlanGroceryListItemsForMealPlan"
	EatingService_GetMealPlanOption_FullMethodName                                   = "/eating.EatingService/GetMealPlanOption"
	EatingService_GetMealPlanOptionVote_FullMethodName                               = "/eating.EatingService/GetMealPlanOptionVote"
	EatingService_GetMealPlanOptionVotes_FullMethodName                              = "/eating.EatingService/GetMealPlanOptionVotes"
	EatingService_GetMealPlanOptions_FullMethodName                                  = "/eating.EatingService/GetMealPlanOptions"
	EatingService_GetMealPlanTask_FullMethodName                                     = "/eating.EatingService/GetMealPlanTask"
	EatingService_GetMealPlanTasks_FullMethodName                                    = "/eating.EatingService/GetMealPlanTasks"
	EatingService_GetMealPlansForHousehold_FullMethodName                            = "/eating.EatingService/GetMealPlansForHousehold"
	EatingService_GetMeals_FullMethodName                                            = "/eating.EatingService/GetMeals"
	EatingService_GetMermaidDiagramForRecipe_FullMethodName                          = "/eating.EatingService/GetMermaidDiagramForRecipe"
	EatingService_GetOAuth2Client_FullMethodName                                     = "/eating.EatingService/GetOAuth2Client"
	EatingService_GetOAuth2Clients_FullMethodName                                    = "/eating.EatingService/GetOAuth2Clients"
	EatingService_GetRandomValidIngredient_FullMethodName                            = "/eating.EatingService/GetRandomValidIngredient"
	EatingService_GetRandomValidInstrument_FullMethodName                            = "/eating.EatingService/GetRandomValidInstrument"
	EatingService_GetRandomValidPreparation_FullMethodName                           = "/eating.EatingService/GetRandomValidPreparation"
	EatingService_GetRandomValidVessel_FullMethodName                                = "/eating.EatingService/GetRandomValidVessel"
	EatingService_GetReceivedHouseholdInvitations_FullMethodName                     = "/eating.EatingService/GetReceivedHouseholdInvitations"
	EatingService_GetRecipe_FullMethodName                                           = "/eating.EatingService/GetRecipe"
	EatingService_GetRecipeMealPlanTasks_FullMethodName                              = "/eating.EatingService/GetRecipeMealPlanTasks"
	EatingService_GetRecipePrepTask_FullMethodName                                   = "/eating.EatingService/GetRecipePrepTask"
	EatingService_GetRecipePrepTasks_FullMethodName                                  = "/eating.EatingService/GetRecipePrepTasks"
	EatingService_GetRecipeRating_FullMethodName                                     = "/eating.EatingService/GetRecipeRating"
	EatingService_GetRecipeRatingsForRecipe_FullMethodName                           = "/eating.EatingService/GetRecipeRatingsForRecipe"
	EatingService_GetRecipeStep_FullMethodName                                       = "/eating.EatingService/GetRecipeStep"
	EatingService_GetRecipeStepCompletionCondition_FullMethodName                    = "/eating.EatingService/GetRecipeStepCompletionCondition"
	EatingService_GetRecipeStepCompletionConditions_FullMethodName                   = "/eating.EatingService/GetRecipeStepCompletionConditions"
	EatingService_GetRecipeStepIngredient_FullMethodName                             = "/eating.EatingService/GetRecipeStepIngredient"
	EatingService_GetRecipeStepIngredients_FullMethodName                            = "/eating.EatingService/GetRecipeStepIngredients"
	EatingService_GetRecipeStepInstrument_FullMethodName                             = "/eating.EatingService/GetRecipeStepInstrument"
	EatingService_GetRecipeStepInstruments_FullMethodName                            = "/eating.EatingService/GetRecipeStepInstruments"
	EatingService_GetRecipeStepProduct_FullMethodName                                = "/eating.EatingService/GetRecipeStepProduct"
	EatingService_GetRecipeStepProducts_FullMethodName                               = "/eating.EatingService/GetRecipeStepProducts"
	EatingService_GetRecipeStepVessel_FullMethodName                                 = "/eating.EatingService/GetRecipeStepVessel"
	EatingService_GetRecipeStepVessels_FullMethodName                                = "/eating.EatingService/GetRecipeStepVessels"
	EatingService_GetRecipeSteps_FullMethodName                                      = "/eating.EatingService/GetRecipeSteps"
	EatingService_GetRecipes_FullMethodName                                          = "/eating.EatingService/GetRecipes"
	EatingService_GetSelf_FullMethodName                                             = "/eating.EatingService/GetSelf"
	EatingService_GetSentHouseholdInvitations_FullMethodName                         = "/eating.EatingService/GetSentHouseholdInvitations"
	EatingService_GetServiceSetting_FullMethodName                                   = "/eating.EatingService/GetServiceSetting"
	EatingService_GetServiceSettingConfigurationByName_FullMethodName                = "/eating.EatingService/GetServiceSettingConfigurationByName"
	EatingService_GetServiceSettingConfigurationsForHousehold_FullMethodName         = "/eating.EatingService/GetServiceSettingConfigurationsForHousehold"
	EatingService_GetServiceSettingConfigurationsForUser_FullMethodName              = "/eating.EatingService/GetServiceSettingConfigurationsForUser"
	EatingService_GetServiceSettings_FullMethodName                                  = "/eating.EatingService/GetServiceSettings"
	EatingService_GetUser_FullMethodName                                             = "/eating.EatingService/GetUser"
	EatingService_GetUserIngredientPreferences_FullMethodName                        = "/eating.EatingService/GetUserIngredientPreferences"
	EatingService_GetUserNotification_FullMethodName                                 = "/eating.EatingService/GetUserNotification"
	EatingService_GetUserNotifications_FullMethodName                                = "/eating.EatingService/GetUserNotifications"
	EatingService_GetUsers_FullMethodName                                            = "/eating.EatingService/GetUsers"
	EatingService_GetValidIngredient_FullMethodName                                  = "/eating.EatingService/GetValidIngredient"
	EatingService_GetValidIngredientGroup_FullMethodName                             = "/eating.EatingService/GetValidIngredientGroup"
	EatingService_GetValidIngredientGroups_FullMethodName                            = "/eating.EatingService/GetValidIngredientGroups"
	EatingService_GetValidIngredientMeasurementUnit_FullMethodName                   = "/eating.EatingService/GetValidIngredientMeasurementUnit"
	EatingService_GetValidIngredientMeasurementUnits_FullMethodName                  = "/eating.EatingService/GetValidIngredientMeasurementUnits"
	EatingService_GetValidIngredientMeasurementUnitsByIngredient_FullMethodName      = "/eating.EatingService/GetValidIngredientMeasurementUnitsByIngredient"
	EatingService_GetValidIngredientMeasurementUnitsByMeasurementUnit_FullMethodName = "/eating.EatingService/GetValidIngredientMeasurementUnitsByMeasurementUnit"
	EatingService_GetValidIngredientPreparation_FullMethodName                       = "/eating.EatingService/GetValidIngredientPreparation"
	EatingService_GetValidIngredientPreparations_FullMethodName                      = "/eating.EatingService/GetValidIngredientPreparations"
	EatingService_GetValidIngredientPreparationsByIngredient_FullMethodName          = "/eating.EatingService/GetValidIngredientPreparationsByIngredient"
	EatingService_GetValidIngredientPreparationsByPreparation_FullMethodName         = "/eating.EatingService/GetValidIngredientPreparationsByPreparation"
	EatingService_GetValidIngredientState_FullMethodName                             = "/eating.EatingService/GetValidIngredientState"
	EatingService_GetValidIngredientStateIngredient_FullMethodName                   = "/eating.EatingService/GetValidIngredientStateIngredient"
	EatingService_GetValidIngredientStateIngredients_FullMethodName                  = "/eating.EatingService/GetValidIngredientStateIngredients"
	EatingService_GetValidIngredientStateIngredientsByIngredient_FullMethodName      = "/eating.EatingService/GetValidIngredientStateIngredientsByIngredient"
	EatingService_GetValidIngredientStateIngredientsByIngredientState_FullMethodName = "/eating.EatingService/GetValidIngredientStateIngredientsByIngredientState"
	EatingService_GetValidIngredientStates_FullMethodName                            = "/eating.EatingService/GetValidIngredientStates"
	EatingService_GetValidIngredients_FullMethodName                                 = "/eating.EatingService/GetValidIngredients"
	EatingService_GetValidInstrument_FullMethodName                                  = "/eating.EatingService/GetValidInstrument"
	EatingService_GetValidInstruments_FullMethodName                                 = "/eating.EatingService/GetValidInstruments"
	EatingService_GetValidMeasurementUnit_FullMethodName                             = "/eating.EatingService/GetValidMeasurementUnit"
	EatingService_GetValidMeasurementUnitConversion_FullMethodName                   = "/eating.EatingService/GetValidMeasurementUnitConversion"
	EatingService_GetValidMeasurementUnitConversionsFromUnit_FullMethodName          = "/eating.EatingService/GetValidMeasurementUnitConversionsFromUnit"
	EatingService_GetValidMeasurementUnitConversionsToUnit_FullMethodName            = "/eating.EatingService/GetValidMeasurementUnitConversionsToUnit"
	EatingService_GetValidMeasurementUnits_FullMethodName                            = "/eating.EatingService/GetValidMeasurementUnits"
	EatingService_GetValidPreparation_FullMethodName                                 = "/eating.EatingService/GetValidPreparation"
	EatingService_GetValidPreparationInstrument_FullMethodName                       = "/eating.EatingService/GetValidPreparationInstrument"
	EatingService_GetValidPreparationInstruments_FullMethodName                      = "/eating.EatingService/GetValidPreparationInstruments"
	EatingService_GetValidPreparationInstrumentsByInstrument_FullMethodName          = "/eating.EatingService/GetValidPreparationInstrumentsByInstrument"
	EatingService_GetValidPreparationInstrumentsByPreparation_FullMethodName         = "/eating.EatingService/GetValidPreparationInstrumentsByPreparation"
	EatingService_GetValidPreparationVessel_FullMethodName                           = "/eating.EatingService/GetValidPreparationVessel"
	EatingService_GetValidPreparationVessels_FullMethodName                          = "/eating.EatingService/GetValidPreparationVessels"
	EatingService_GetValidPreparationVesselsByPreparation_FullMethodName             = "/eating.EatingService/GetValidPreparationVesselsByPreparation"
	EatingService_GetValidPreparationVesselsByVessel_FullMethodName                  = "/eating.EatingService/GetValidPreparationVesselsByVessel"
	EatingService_GetValidPreparations_FullMethodName                                = "/eating.EatingService/GetValidPreparations"
	EatingService_GetValidVessel_FullMethodName                                      = "/eating.EatingService/GetValidVessel"
	EatingService_GetValidVessels_FullMethodName                                     = "/eating.EatingService/GetValidVessels"
	EatingService_GetWebhook_FullMethodName                                          = "/eating.EatingService/GetWebhook"
	EatingService_GetWebhooks_FullMethodName                                         = "/eating.EatingService/GetWebhooks"
	EatingService_LoginForToken_FullMethodName                                       = "/eating.EatingService/LoginForToken"
	EatingService_PublishArbitraryQueueMessage_FullMethodName                        = "/eating.EatingService/PublishArbitraryQueueMessage"
	EatingService_RedeemPasswordResetToken_FullMethodName                            = "/eating.EatingService/RedeemPasswordResetToken"
	EatingService_RefreshTOTPSecret_FullMethodName                                   = "/eating.EatingService/RefreshTOTPSecret"
	EatingService_RejectHouseholdInvitation_FullMethodName                           = "/eating.EatingService/RejectHouseholdInvitation"
	EatingService_RequestEmailVerificationEmail_FullMethodName                       = "/eating.EatingService/RequestEmailVerificationEmail"
	EatingService_RequestPasswordResetToken_FullMethodName                           = "/eating.EatingService/RequestPasswordResetToken"
	EatingService_RequestUsernameReminder_FullMethodName                             = "/eating.EatingService/RequestUsernameReminder"
	EatingService_RunFinalizeMealPlanWorker_FullMethodName                           = "/eating.EatingService/RunFinalizeMealPlanWorker"
	EatingService_RunMealPlanGroceryListInitializerWorker_FullMethodName             = "/eating.EatingService/RunMealPlanGroceryListInitializerWorker"
	EatingService_RunMealPlanTaskCreatorWorker_FullMethodName                        = "/eating.EatingService/RunMealPlanTaskCreatorWorker"
	EatingService_SearchForMeals_FullMethodName                                      = "/eating.EatingService/SearchForMeals"
	EatingService_SearchForRecipes_FullMethodName                                    = "/eating.EatingService/SearchForRecipes"
	EatingService_SearchForServiceSettings_FullMethodName                            = "/eating.EatingService/SearchForServiceSettings"
	EatingService_SearchForUsers_FullMethodName                                      = "/eating.EatingService/SearchForUsers"
	EatingService_SearchForValidIngredientGroups_FullMethodName                      = "/eating.EatingService/SearchForValidIngredientGroups"
	EatingService_SearchForValidIngredientStates_FullMethodName                      = "/eating.EatingService/SearchForValidIngredientStates"
	EatingService_SearchForValidIngredients_FullMethodName                           = "/eating.EatingService/SearchForValidIngredients"
	EatingService_SearchForValidInstruments_FullMethodName                           = "/eating.EatingService/SearchForValidInstruments"
	EatingService_SearchForValidMeasurementUnits_FullMethodName                      = "/eating.EatingService/SearchForValidMeasurementUnits"
	EatingService_SearchForValidPreparations_FullMethodName                          = "/eating.EatingService/SearchForValidPreparations"
	EatingService_SearchForValidVessels_FullMethodName                               = "/eating.EatingService/SearchForValidVessels"
	EatingService_SearchValidIngredientsByPreparation_FullMethodName                 = "/eating.EatingService/SearchValidIngredientsByPreparation"
	EatingService_SearchValidMeasurementUnitsByIngredient_FullMethodName             = "/eating.EatingService/SearchValidMeasurementUnitsByIngredient"
	EatingService_SetDefaultHousehold_FullMethodName                                 = "/eating.EatingService/SetDefaultHousehold"
	EatingService_TransferHouseholdOwnership_FullMethodName                          = "/eating.EatingService/TransferHouseholdOwnership"
	EatingService_UpdateHousehold_FullMethodName                                     = "/eating.EatingService/UpdateHousehold"
	EatingService_UpdateHouseholdInstrumentOwnership_FullMethodName                  = "/eating.EatingService/UpdateHouseholdInstrumentOwnership"
	EatingService_UpdateHouseholdMemberPermissions_FullMethodName                    = "/eating.EatingService/UpdateHouseholdMemberPermissions"
	EatingService_UpdateMealPlan_FullMethodName                                      = "/eating.EatingService/UpdateMealPlan"
	EatingService_UpdateMealPlanEvent_FullMethodName                                 = "/eating.EatingService/UpdateMealPlanEvent"
	EatingService_UpdateMealPlanGroceryListItem_FullMethodName                       = "/eating.EatingService/UpdateMealPlanGroceryListItem"
	EatingService_UpdateMealPlanOption_FullMethodName                                = "/eating.EatingService/UpdateMealPlanOption"
	EatingService_UpdateMealPlanOptionVote_FullMethodName                            = "/eating.EatingService/UpdateMealPlanOptionVote"
	EatingService_UpdateMealPlanTaskStatus_FullMethodName                            = "/eating.EatingService/UpdateMealPlanTaskStatus"
	EatingService_UpdatePassword_FullMethodName                                      = "/eating.EatingService/UpdatePassword"
	EatingService_UpdateRecipe_FullMethodName                                        = "/eating.EatingService/UpdateRecipe"
	EatingService_UpdateRecipePrepTask_FullMethodName                                = "/eating.EatingService/UpdateRecipePrepTask"
	EatingService_UpdateRecipeRating_FullMethodName                                  = "/eating.EatingService/UpdateRecipeRating"
	EatingService_UpdateRecipeStep_FullMethodName                                    = "/eating.EatingService/UpdateRecipeStep"
	EatingService_UpdateRecipeStepCompletionCondition_FullMethodName                 = "/eating.EatingService/UpdateRecipeStepCompletionCondition"
	EatingService_UpdateRecipeStepIngredient_FullMethodName                          = "/eating.EatingService/UpdateRecipeStepIngredient"
	EatingService_UpdateRecipeStepInstrument_FullMethodName                          = "/eating.EatingService/UpdateRecipeStepInstrument"
	EatingService_UpdateRecipeStepProduct_FullMethodName                             = "/eating.EatingService/UpdateRecipeStepProduct"
	EatingService_UpdateRecipeStepVessel_FullMethodName                              = "/eating.EatingService/UpdateRecipeStepVessel"
	EatingService_UpdateServiceSettingConfiguration_FullMethodName                   = "/eating.EatingService/UpdateServiceSettingConfiguration"
	EatingService_UpdateUserDetails_FullMethodName                                   = "/eating.EatingService/UpdateUserDetails"
	EatingService_UpdateUserEmailAddress_FullMethodName                              = "/eating.EatingService/UpdateUserEmailAddress"
	EatingService_UpdateUserIngredientPreference_FullMethodName                      = "/eating.EatingService/UpdateUserIngredientPreference"
	EatingService_UpdateUserNotification_FullMethodName                              = "/eating.EatingService/UpdateUserNotification"
	EatingService_UpdateUserUsername_FullMethodName                                  = "/eating.EatingService/UpdateUserUsername"
	EatingService_UpdateValidIngredient_FullMethodName                               = "/eating.EatingService/UpdateValidIngredient"
	EatingService_UpdateValidIngredientGroup_FullMethodName                          = "/eating.EatingService/UpdateValidIngredientGroup"
	EatingService_UpdateValidIngredientMeasurementUnit_FullMethodName                = "/eating.EatingService/UpdateValidIngredientMeasurementUnit"
	EatingService_UpdateValidIngredientPreparation_FullMethodName                    = "/eating.EatingService/UpdateValidIngredientPreparation"
	EatingService_UpdateValidIngredientState_FullMethodName                          = "/eating.EatingService/UpdateValidIngredientState"
	EatingService_UpdateValidIngredientStateIngredient_FullMethodName                = "/eating.EatingService/UpdateValidIngredientStateIngredient"
	EatingService_UpdateValidInstrument_FullMethodName                               = "/eating.EatingService/UpdateValidInstrument"
	EatingService_UpdateValidMeasurementUnit_FullMethodName                          = "/eating.EatingService/UpdateValidMeasurementUnit"
	EatingService_UpdateValidMeasurementUnitConversion_FullMethodName                = "/eating.EatingService/UpdateValidMeasurementUnitConversion"
	EatingService_UpdateValidPreparation_FullMethodName                              = "/eating.EatingService/UpdateValidPreparation"
	EatingService_UpdateValidPreparationInstrument_FullMethodName                    = "/eating.EatingService/UpdateValidPreparationInstrument"
	EatingService_UpdateValidPreparationVessel_FullMethodName                        = "/eating.EatingService/UpdateValidPreparationVessel"
	EatingService_UpdateValidVessel_FullMethodName                                   = "/eating.EatingService/UpdateValidVessel"
	EatingService_UploadUserAvatar_FullMethodName                                    = "/eating.EatingService/UploadUserAvatar"
	EatingService_VerifyEmailAddress_FullMethodName                                  = "/eating.EatingService/VerifyEmailAddress"
	EatingService_VerifyTOTPSecret_FullMethodName                                    = "/eating.EatingService/VerifyTOTPSecret"
)

// EatingServiceClient is the client API for EatingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EatingServiceClient interface {
	AcceptHouseholdInvitation(ctx context.Context, in *messages.AcceptHouseholdInvitationRequest, opts ...grpc.CallOption) (*messages.HouseholdInvitation, error)
	AdminLoginForToken(ctx context.Context, in *messages.UserLoginInput, opts ...grpc.CallOption) (*messages.TokenResponse, error)
	AdminUpdateUserStatus(ctx context.Context, in *messages.UserAccountStatusUpdateInput, opts ...grpc.CallOption) (*messages.UserStatusResponse, error)
	AggregateUserDataReport(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*messages.UserDataCollectionResponse, error)
	ArchiveHousehold(ctx context.Context, in *messages.ArchiveHouseholdRequest, opts ...grpc.CallOption) (*messages.Household, error)
	ArchiveHouseholdInstrumentOwnership(ctx context.Context, in *messages.ArchiveHouseholdInstrumentOwnershipRequest, opts ...grpc.CallOption) (*messages.HouseholdInstrumentOwnership, error)
	ArchiveMeal(ctx context.Context, in *messages.ArchiveMealRequest, opts ...grpc.CallOption) (*messages.Meal, error)
	ArchiveMealPlan(ctx context.Context, in *messages.ArchiveMealPlanRequest, opts ...grpc.CallOption) (*messages.MealPlan, error)
	ArchiveMealPlanEvent(ctx context.Context, in *messages.ArchiveMealPlanEventRequest, opts ...grpc.CallOption) (*messages.MealPlanEvent, error)
	ArchiveMealPlanGroceryListItem(ctx context.Context, in *messages.ArchiveMealPlanGroceryListItemRequest, opts ...grpc.CallOption) (*messages.MealPlanGroceryListItem, error)
	ArchiveMealPlanOption(ctx context.Context, in *messages.ArchiveMealPlanOptionRequest, opts ...grpc.CallOption) (*messages.MealPlanOption, error)
	ArchiveMealPlanOptionVote(ctx context.Context, in *messages.ArchiveMealPlanOptionVoteRequest, opts ...grpc.CallOption) (*messages.MealPlanOptionVote, error)
	ArchiveOAuth2Client(ctx context.Context, in *messages.ArchiveOAuth2ClientRequest, opts ...grpc.CallOption) (*messages.OAuth2Client, error)
	ArchiveRecipe(ctx context.Context, in *messages.ArchiveRecipeRequest, opts ...grpc.CallOption) (*messages.Recipe, error)
	ArchiveRecipePrepTask(ctx context.Context, in *messages.ArchiveRecipePrepTaskRequest, opts ...grpc.CallOption) (*messages.RecipePrepTask, error)
	ArchiveRecipeRating(ctx context.Context, in *messages.ArchiveRecipeRatingRequest, opts ...grpc.CallOption) (*messages.RecipeRating, error)
	ArchiveRecipeStep(ctx context.Context, in *messages.ArchiveRecipeStepRequest, opts ...grpc.CallOption) (*messages.RecipeStep, error)
	ArchiveRecipeStepCompletionCondition(ctx context.Context, in *messages.ArchiveRecipeStepCompletionConditionRequest, opts ...grpc.CallOption) (*messages.RecipeStepCompletionCondition, error)
	ArchiveRecipeStepIngredient(ctx context.Context, in *messages.ArchiveRecipeStepIngredientRequest, opts ...grpc.CallOption) (*messages.RecipeStepIngredient, error)
	ArchiveRecipeStepInstrument(ctx context.Context, in *messages.ArchiveRecipeStepInstrumentRequest, opts ...grpc.CallOption) (*messages.RecipeStepInstrument, error)
	ArchiveRecipeStepProduct(ctx context.Context, in *messages.ArchiveRecipeStepProductRequest, opts ...grpc.CallOption) (*messages.RecipeStepProduct, error)
	ArchiveRecipeStepVessel(ctx context.Context, in *messages.ArchiveRecipeStepVesselRequest, opts ...grpc.CallOption) (*messages.RecipeStepVessel, error)
	ArchiveServiceSetting(ctx context.Context, in *messages.ArchiveServiceSettingRequest, opts ...grpc.CallOption) (*messages.ServiceSetting, error)
	ArchiveServiceSettingConfiguration(ctx context.Context, in *messages.ArchiveServiceSettingConfigurationRequest, opts ...grpc.CallOption) (*messages.ServiceSettingConfiguration, error)
	ArchiveUser(ctx context.Context, in *messages.ArchiveUserRequest, opts ...grpc.CallOption) (*messages.User, error)
	ArchiveUserIngredientPreference(ctx context.Context, in *messages.ArchiveUserIngredientPreferenceRequest, opts ...grpc.CallOption) (*messages.UserIngredientPreference, error)
	ArchiveUserMembership(ctx context.Context, in *messages.ArchiveUserMembershipRequest, opts ...grpc.CallOption) (*messages.HouseholdUserMembership, error)
	ArchiveValidIngredient(ctx context.Context, in *messages.ArchiveValidIngredientRequest, opts ...grpc.CallOption) (*messages.ValidIngredient, error)
	ArchiveValidIngredientGroup(ctx context.Context, in *messages.ArchiveValidIngredientGroupRequest, opts ...grpc.CallOption) (*messages.ValidIngredientGroup, error)
	ArchiveValidIngredientMeasurementUnit(ctx context.Context, in *messages.ArchiveValidIngredientMeasurementUnitRequest, opts ...grpc.CallOption) (*messages.ValidIngredientMeasurementUnit, error)
	ArchiveValidIngredientPreparation(ctx context.Context, in *messages.ArchiveValidIngredientPreparationRequest, opts ...grpc.CallOption) (*messages.ValidIngredientPreparation, error)
	ArchiveValidIngredientState(ctx context.Context, in *messages.ArchiveValidIngredientStateRequest, opts ...grpc.CallOption) (*messages.ValidIngredientState, error)
	ArchiveValidIngredientStateIngredient(ctx context.Context, in *messages.ArchiveValidIngredientStateIngredientRequest, opts ...grpc.CallOption) (*messages.ValidIngredientStateIngredient, error)
	ArchiveValidInstrument(ctx context.Context, in *messages.ArchiveValidInstrumentRequest, opts ...grpc.CallOption) (*messages.ValidInstrument, error)
	ArchiveValidMeasurementUnit(ctx context.Context, in *messages.ArchiveValidMeasurementUnitRequest, opts ...grpc.CallOption) (*messages.ValidMeasurementUnit, error)
	ArchiveValidMeasurementUnitConversion(ctx context.Context, in *messages.ArchiveValidMeasurementUnitConversionRequest, opts ...grpc.CallOption) (*messages.ValidMeasurementUnitConversion, error)
	ArchiveValidPreparation(ctx context.Context, in *messages.ArchiveValidPreparationRequest, opts ...grpc.CallOption) (*messages.ValidPreparation, error)
	ArchiveValidPreparationInstrument(ctx context.Context, in *messages.ArchiveValidPreparationInstrumentRequest, opts ...grpc.CallOption) (*messages.ValidPreparationInstrument, error)
	ArchiveValidPreparationVessel(ctx context.Context, in *messages.ArchiveValidPreparationVesselRequest, opts ...grpc.CallOption) (*messages.ValidPreparationVessel, error)
	ArchiveValidVessel(ctx context.Context, in *messages.ArchiveValidVesselRequest, opts ...grpc.CallOption) (*messages.ValidVessel, error)
	ArchiveWebhook(ctx context.Context, in *messages.ArchiveWebhookRequest, opts ...grpc.CallOption) (*messages.Webhook, error)
	ArchiveWebhookTriggerEvent(ctx context.Context, in *messages.ArchiveWebhookTriggerEventRequest, opts ...grpc.CallOption) (*messages.WebhookTriggerEvent, error)
	CancelHouseholdInvitation(ctx context.Context, in *messages.CancelHouseholdInvitationRequest, opts ...grpc.CallOption) (*messages.HouseholdInvitation, error)
	CheckForReadiness(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckPermissions(ctx context.Context, in *messages.UserPermissionsRequestInput, opts ...grpc.CallOption) (*messages.UserPermissionsResponse, error)
	CloneRecipe(ctx context.Context, in *messages.CloneRecipeRequest, opts ...grpc.CallOption) (*messages.Recipe, error)
	CreateHousehold(ctx context.Context, in *messages.HouseholdCreationRequestInput, opts ...grpc.CallOption) (*messages.Household, error)
	CreateHouseholdInstrumentOwnership(ctx context.Context, in *messages.HouseholdInstrumentOwnershipCreationRequestInput, opts ...grpc.CallOption) (*messages.HouseholdInstrumentOwnership, error)
	CreateHouseholdInvitation(ctx context.Context, in *messages.CreateHouseholdInvitationRequest, opts ...grpc.CallOption) (*messages.HouseholdInvitation, error)
	CreateMeal(ctx context.Context, in *messages.MealCreationRequestInput, opts ...grpc.CallOption) (*messages.Meal, error)
	CreateMealPlan(ctx context.Context, in *messages.MealPlanCreationRequestInput, opts ...grpc.CallOption) (*messages.MealPlan, error)
	CreateMealPlanEvent(ctx context.Context, in *messages.CreateMealPlanEventRequest, opts ...grpc.CallOption) (*messages.MealPlanEvent, error)
	CreateMealPlanGroceryListItem(ctx context.Context, in *messages.CreateMealPlanGroceryListItemRequest, opts ...grpc.CallOption) (*messages.MealPlanGroceryListItem, error)
	CreateMealPlanOption(ctx context.Context, in *messages.CreateMealPlanOptionRequest, opts ...grpc.CallOption) (*messages.MealPlanOption, error)
	CreateMealPlanOptionVote(ctx context.Context, in *messages.CreateMealPlanOptionVoteRequest, opts ...grpc.CallOption) (*messages.MealPlanOptionVote, error)
	CreateMealPlanTask(ctx context.Context, in *messages.CreateMealPlanTaskRequest, opts ...grpc.CallOption) (*messages.MealPlanTask, error)
	CreateOAuth2Client(ctx context.Context, in *messages.OAuth2ClientCreationRequestInput, opts ...grpc.CallOption) (*messages.OAuth2ClientCreationResponse, error)
	CreateRecipe(ctx context.Context, in *messages.RecipeCreationRequestInput, opts ...grpc.CallOption) (*messages.Recipe, error)
	CreateRecipePrepTask(ctx context.Context, in *messages.CreateRecipePrepTaskRequest, opts ...grpc.CallOption) (*messages.RecipePrepTask, error)
	CreateRecipeRating(ctx context.Context, in *messages.CreateRecipeRatingRequest, opts ...grpc.CallOption) (*messages.RecipeRating, error)
	CreateRecipeStep(ctx context.Context, in *messages.CreateRecipeStepRequest, opts ...grpc.CallOption) (*messages.RecipeStep, error)
	CreateRecipeStepCompletionCondition(ctx context.Context, in *messages.CreateRecipeStepCompletionConditionRequest, opts ...grpc.CallOption) (*messages.RecipeStepCompletionCondition, error)
	CreateRecipeStepIngredient(ctx context.Context, in *messages.CreateRecipeStepIngredientRequest, opts ...grpc.CallOption) (*messages.RecipeStepIngredient, error)
	CreateRecipeStepInstrument(ctx context.Context, in *messages.CreateRecipeStepInstrumentRequest, opts ...grpc.CallOption) (*messages.RecipeStepInstrument, error)
	CreateRecipeStepProduct(ctx context.Context, in *messages.CreateRecipeStepProductRequest, opts ...grpc.CallOption) (*messages.RecipeStepProduct, error)
	CreateRecipeStepVessel(ctx context.Context, in *messages.CreateRecipeStepVesselRequest, opts ...grpc.CallOption) (*messages.RecipeStepVessel, error)
	CreateServiceSetting(ctx context.Context, in *messages.ServiceSettingCreationRequestInput, opts ...grpc.CallOption) (*messages.ServiceSetting, error)
	CreateServiceSettingConfiguration(ctx context.Context, in *messages.ServiceSettingConfigurationCreationRequestInput, opts ...grpc.CallOption) (*messages.ServiceSettingConfiguration, error)
	CreateUser(ctx context.Context, in *messages.UserRegistrationInput, opts ...grpc.CallOption) (*messages.UserCreationResponse, error)
	CreateUserIngredientPreference(ctx context.Context, in *messages.UserIngredientPreferenceCreationRequestInput, opts ...grpc.CallOption) (*messages.UserIngredientPreference, error)
	CreateUserNotification(ctx context.Context, in *messages.UserNotificationCreationRequestInput, opts ...grpc.CallOption) (*messages.UserNotification, error)
	CreateValidIngredient(ctx context.Context, in *messages.ValidIngredientCreationRequestInput, opts ...grpc.CallOption) (*messages.ValidIngredient, error)
	CreateValidIngredientGroup(ctx context.Context, in *messages.ValidIngredientGroupCreationRequestInput, opts ...grpc.CallOption) (*messages.ValidIngredientGroup, error)
	CreateValidIngredientMeasurementUnit(ctx context.Context, in *messages.ValidIngredientMeasurementUnitCreationRequestInput, opts ...grpc.CallOption) (*messages.ValidIngredientMeasurementUnit, error)
	CreateValidIngredientPreparation(ctx context.Context, in *messages.ValidIngredientPreparationCreationRequestInput, opts ...grpc.CallOption) (*messages.ValidIngredientPreparation, error)
	CreateValidIngredientState(ctx context.Context, in *messages.ValidIngredientStateCreationRequestInput, opts ...grpc.CallOption) (*messages.ValidIngredientState, error)
	CreateValidIngredientStateIngredient(ctx context.Context, in *messages.ValidIngredientStateIngredientCreationRequestInput, opts ...grpc.CallOption) (*messages.ValidIngredientStateIngredient, error)
	CreateValidInstrument(ctx context.Context, in *messages.ValidInstrumentCreationRequestInput, opts ...grpc.CallOption) (*messages.ValidInstrument, error)
	CreateValidMeasurementUnit(ctx context.Context, in *messages.ValidMeasurementUnitCreationRequestInput, opts ...grpc.CallOption) (*messages.ValidMeasurementUnit, error)
	CreateValidMeasurementUnitConversion(ctx context.Context, in *messages.ValidMeasurementUnitConversionCreationRequestInput, opts ...grpc.CallOption) (*messages.ValidMeasurementUnitConversion, error)
	CreateValidPreparation(ctx context.Context, in *messages.ValidPreparationCreationRequestInput, opts ...grpc.CallOption) (*messages.ValidPreparation, error)
	CreateValidPreparationInstrument(ctx context.Context, in *messages.ValidPreparationInstrumentCreationRequestInput, opts ...grpc.CallOption) (*messages.ValidPreparationInstrument, error)
	CreateValidPreparationVessel(ctx context.Context, in *messages.ValidPreparationVesselCreationRequestInput, opts ...grpc.CallOption) (*messages.ValidPreparationVessel, error)
	CreateValidVessel(ctx context.Context, in *messages.ValidVesselCreationRequestInput, opts ...grpc.CallOption) (*messages.ValidVessel, error)
	CreateWebhook(ctx context.Context, in *messages.WebhookCreationRequestInput, opts ...grpc.CallOption) (*messages.Webhook, error)
	CreateWebhookTriggerEvent(ctx context.Context, in *messages.CreateWebhookTriggerEventRequest, opts ...grpc.CallOption) (*messages.WebhookTriggerEvent, error)
	DestroyAllUserData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*messages.DataDeletionResponse, error)
	FetchUserDataReport(ctx context.Context, in *messages.FetchUserDataReportRequest, opts ...grpc.CallOption) (*messages.UserDataCollection, error)
	FinalizeMealPlan(ctx context.Context, in *messages.FinalizeMealPlanRequest, opts ...grpc.CallOption) (*messages.FinalizeMealPlansResponse, error)
	GetActiveHousehold(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*messages.Household, error)
	GetAuditLogEntriesForHousehold(ctx context.Context, in *messages.GetAuditLogEntriesForHouseholdRequest, opts ...grpc.CallOption) (*messages.AuditLogEntry, error)
	GetAuditLogEntriesForUser(ctx context.Context, in *messages.GetAuditLogEntriesForUserRequest, opts ...grpc.CallOption) (*messages.AuditLogEntry, error)
	GetAuditLogEntryByID(ctx context.Context, in *messages.GetAuditLogEntryByIDRequest, opts ...grpc.CallOption) (*messages.AuditLogEntry, error)
	GetAuthStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*messages.UserStatusResponse, error)
	GetHousehold(ctx context.Context, in *messages.GetHouseholdRequest, opts ...grpc.CallOption) (*messages.Household, error)
	GetHouseholdInstrumentOwnership(ctx context.Context, in *messages.GetHouseholdInstrumentOwnershipRequest, opts ...grpc.CallOption) (*messages.HouseholdInstrumentOwnership, error)
	GetHouseholdInstrumentOwnerships(ctx context.Context, in *messages.GetHouseholdInstrumentOwnershipsRequest, opts ...grpc.CallOption) (*messages.HouseholdInstrumentOwnership, error)
	GetHouseholdInvitation(ctx context.Context, in *messages.GetHouseholdInvitationRequest, opts ...grpc.CallOption) (*messages.HouseholdInvitation, error)
	GetHouseholdInvitationByID(ctx context.Context, in *messages.GetHouseholdInvitationByIDRequest, opts ...grpc.CallOption) (*messages.HouseholdInvitation, error)
	GetHouseholds(ctx context.Context, in *messages.GetHouseholdsRequest, opts ...grpc.CallOption) (*messages.Household, error)
	GetMeal(ctx context.Context, in *messages.GetMealRequest, opts ...grpc.CallOption) (*messages.Meal, error)
	GetMealPlan(ctx context.Context, in *messages.GetMealPlanRequest, opts ...grpc.CallOption) (*messages.MealPlan, error)
	GetMealPlanEvent(ctx context.Context, in *messages.GetMealPlanEventRequest, opts ...grpc.CallOption) (*messages.MealPlanEvent, error)
	GetMealPlanEvents(ctx context.Context, in *messages.GetMealPlanEventsRequest, opts ...grpc.CallOption) (*messages.MealPlanEvent, error)
	GetMealPlanGroceryListItem(ctx context.Context, in *messages.GetMealPlanGroceryListItemRequest, opts ...grpc.CallOption) (*messages.MealPlanGroceryListItem, error)
	GetMealPlanGroceryListItemsForMealPlan(ctx context.Context, in *messages.GetMealPlanGroceryListItemsForMealPlanRequest, opts ...grpc.CallOption) (*messages.MealPlanGroceryListItem, error)
	GetMealPlanOption(ctx context.Context, in *messages.GetMealPlanOptionRequest, opts ...grpc.CallOption) (*messages.MealPlanOption, error)
	GetMealPlanOptionVote(ctx context.Context, in *messages.GetMealPlanOptionVoteRequest, opts ...grpc.CallOption) (*messages.MealPlanOptionVote, error)
	GetMealPlanOptionVotes(ctx context.Context, in *messages.GetMealPlanOptionVotesRequest, opts ...grpc.CallOption) (*messages.MealPlanOptionVote, error)
	GetMealPlanOptions(ctx context.Context, in *messages.GetMealPlanOptionsRequest, opts ...grpc.CallOption) (*messages.MealPlanOption, error)
	GetMealPlanTask(ctx context.Context, in *messages.GetMealPlanTaskRequest, opts ...grpc.CallOption) (*messages.MealPlanTask, error)
	GetMealPlanTasks(ctx context.Context, in *messages.GetMealPlanTasksRequest, opts ...grpc.CallOption) (*messages.MealPlanTask, error)
	GetMealPlansForHousehold(ctx context.Context, in *messages.GetMealPlansForHouseholdRequest, opts ...grpc.CallOption) (*messages.MealPlan, error)
	GetMeals(ctx context.Context, in *messages.GetMealsRequest, opts ...grpc.CallOption) (*messages.Meal, error)
	GetMermaidDiagramForRecipe(ctx context.Context, in *messages.GetMermaidDiagramForRecipeRequest, opts ...grpc.CallOption) (*messages.GetMermaidDiagramForRecipeResponse, error)
	GetOAuth2Client(ctx context.Context, in *messages.GetOAuth2ClientRequest, opts ...grpc.CallOption) (*messages.OAuth2Client, error)
	GetOAuth2Clients(ctx context.Context, in *messages.GetOAuth2ClientsRequest, opts ...grpc.CallOption) (*messages.OAuth2Client, error)
	GetRandomValidIngredient(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*messages.ValidIngredient, error)
	GetRandomValidInstrument(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*messages.ValidInstrument, error)
	GetRandomValidPreparation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*messages.ValidPreparation, error)
	GetRandomValidVessel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*messages.ValidVessel, error)
	GetReceivedHouseholdInvitations(ctx context.Context, in *messages.GetReceivedHouseholdInvitationsRequest, opts ...grpc.CallOption) (*messages.HouseholdInvitation, error)
	GetRecipe(ctx context.Context, in *messages.GetRecipeRequest, opts ...grpc.CallOption) (*messages.Recipe, error)
	GetRecipeMealPlanTasks(ctx context.Context, in *messages.GetRecipeMealPlanTasksRequest, opts ...grpc.CallOption) (*messages.RecipePrepTaskStep, error)
	GetRecipePrepTask(ctx context.Context, in *messages.GetRecipePrepTaskRequest, opts ...grpc.CallOption) (*messages.RecipePrepTask, error)
	GetRecipePrepTasks(ctx context.Context, in *messages.GetRecipePrepTasksRequest, opts ...grpc.CallOption) (*messages.RecipePrepTask, error)
	GetRecipeRating(ctx context.Context, in *messages.GetRecipeRatingRequest, opts ...grpc.CallOption) (*messages.RecipeRating, error)
	GetRecipeRatingsForRecipe(ctx context.Context, in *messages.GetRecipeRatingsForRecipeRequest, opts ...grpc.CallOption) (*messages.RecipeRating, error)
	GetRecipeStep(ctx context.Context, in *messages.GetRecipeStepRequest, opts ...grpc.CallOption) (*messages.RecipeStep, error)
	GetRecipeStepCompletionCondition(ctx context.Context, in *messages.GetRecipeStepCompletionConditionRequest, opts ...grpc.CallOption) (*messages.RecipeStepCompletionCondition, error)
	GetRecipeStepCompletionConditions(ctx context.Context, in *messages.GetRecipeStepCompletionConditionsRequest, opts ...grpc.CallOption) (*messages.RecipeStepCompletionCondition, error)
	GetRecipeStepIngredient(ctx context.Context, in *messages.GetRecipeStepIngredientRequest, opts ...grpc.CallOption) (*messages.RecipeStepIngredient, error)
	GetRecipeStepIngredients(ctx context.Context, in *messages.GetRecipeStepIngredientsRequest, opts ...grpc.CallOption) (*messages.RecipeStepIngredient, error)
	GetRecipeStepInstrument(ctx context.Context, in *messages.GetRecipeStepInstrumentRequest, opts ...grpc.CallOption) (*messages.RecipeStepInstrument, error)
	GetRecipeStepInstruments(ctx context.Context, in *messages.GetRecipeStepInstrumentsRequest, opts ...grpc.CallOption) (*messages.RecipeStepInstrument, error)
	GetRecipeStepProduct(ctx context.Context, in *messages.GetRecipeStepProductRequest, opts ...grpc.CallOption) (*messages.RecipeStepProduct, error)
	GetRecipeStepProducts(ctx context.Context, in *messages.GetRecipeStepProductsRequest, opts ...grpc.CallOption) (*messages.RecipeStepProduct, error)
	GetRecipeStepVessel(ctx context.Context, in *messages.GetRecipeStepVesselRequest, opts ...grpc.CallOption) (*messages.RecipeStepVessel, error)
	GetRecipeStepVessels(ctx context.Context, in *messages.GetRecipeStepVesselsRequest, opts ...grpc.CallOption) (*messages.RecipeStepVessel, error)
	GetRecipeSteps(ctx context.Context, in *messages.GetRecipeStepsRequest, opts ...grpc.CallOption) (*messages.RecipeStep, error)
	GetRecipes(ctx context.Context, in *messages.GetRecipesRequest, opts ...grpc.CallOption) (*messages.Recipe, error)
	GetSelf(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*messages.User, error)
	GetSentHouseholdInvitations(ctx context.Context, in *messages.GetSentHouseholdInvitationsRequest, opts ...grpc.CallOption) (*messages.HouseholdInvitation, error)
	GetServiceSetting(ctx context.Context, in *messages.GetServiceSettingRequest, opts ...grpc.CallOption) (*messages.ServiceSetting, error)
	GetServiceSettingConfigurationByName(ctx context.Context, in *messages.GetServiceSettingConfigurationByNameRequest, opts ...grpc.CallOption) (*messages.ServiceSettingConfiguration, error)
	GetServiceSettingConfigurationsForHousehold(ctx context.Context, in *messages.GetServiceSettingConfigurationsForHouseholdRequest, opts ...grpc.CallOption) (*messages.ServiceSettingConfiguration, error)
	GetServiceSettingConfigurationsForUser(ctx context.Context, in *messages.GetServiceSettingConfigurationsForUserRequest, opts ...grpc.CallOption) (*messages.ServiceSettingConfiguration, error)
	GetServiceSettings(ctx context.Context, in *messages.GetServiceSettingsRequest, opts ...grpc.CallOption) (*messages.ServiceSetting, error)
	GetUser(ctx context.Context, in *messages.GetUserRequest, opts ...grpc.CallOption) (*messages.User, error)
	GetUserIngredientPreferences(ctx context.Context, in *messages.GetUserIngredientPreferencesRequest, opts ...grpc.CallOption) (*messages.UserIngredientPreference, error)
	GetUserNotification(ctx context.Context, in *messages.GetUserNotificationRequest, opts ...grpc.CallOption) (*messages.UserNotification, error)
	GetUserNotifications(ctx context.Context, in *messages.GetUserNotificationsRequest, opts ...grpc.CallOption) (*messages.UserNotification, error)
	GetUsers(ctx context.Context, in *messages.GetUsersRequest, opts ...grpc.CallOption) (*messages.User, error)
	GetValidIngredient(ctx context.Context, in *messages.GetValidIngredientRequest, opts ...grpc.CallOption) (*messages.ValidIngredient, error)
	GetValidIngredientGroup(ctx context.Context, in *messages.GetValidIngredientGroupRequest, opts ...grpc.CallOption) (*messages.ValidIngredientGroup, error)
	GetValidIngredientGroups(ctx context.Context, in *messages.GetValidIngredientGroupsRequest, opts ...grpc.CallOption) (*messages.ValidIngredientGroup, error)
	GetValidIngredientMeasurementUnit(ctx context.Context, in *messages.GetValidIngredientMeasurementUnitRequest, opts ...grpc.CallOption) (*messages.ValidIngredientMeasurementUnit, error)
	GetValidIngredientMeasurementUnits(ctx context.Context, in *messages.GetValidIngredientMeasurementUnitsRequest, opts ...grpc.CallOption) (*messages.ValidIngredientMeasurementUnit, error)
	GetValidIngredientMeasurementUnitsByIngredient(ctx context.Context, in *messages.GetValidIngredientMeasurementUnitsByIngredientRequest, opts ...grpc.CallOption) (*messages.ValidIngredientMeasurementUnit, error)
	GetValidIngredientMeasurementUnitsByMeasurementUnit(ctx context.Context, in *messages.GetValidIngredientMeasurementUnitsByMeasurementUnitRequest, opts ...grpc.CallOption) (*messages.ValidIngredientMeasurementUnit, error)
	GetValidIngredientPreparation(ctx context.Context, in *messages.GetValidIngredientPreparationRequest, opts ...grpc.CallOption) (*messages.ValidIngredientPreparation, error)
	GetValidIngredientPreparations(ctx context.Context, in *messages.GetValidIngredientPreparationsRequest, opts ...grpc.CallOption) (*messages.ValidIngredientPreparation, error)
	GetValidIngredientPreparationsByIngredient(ctx context.Context, in *messages.GetValidIngredientPreparationsByIngredientRequest, opts ...grpc.CallOption) (*messages.ValidIngredientPreparation, error)
	GetValidIngredientPreparationsByPreparation(ctx context.Context, in *messages.GetValidIngredientPreparationsByPreparationRequest, opts ...grpc.CallOption) (*messages.ValidIngredientPreparation, error)
	GetValidIngredientState(ctx context.Context, in *messages.GetValidIngredientStateRequest, opts ...grpc.CallOption) (*messages.ValidIngredientState, error)
	GetValidIngredientStateIngredient(ctx context.Context, in *messages.GetValidIngredientStateIngredientRequest, opts ...grpc.CallOption) (*messages.ValidIngredientStateIngredient, error)
	GetValidIngredientStateIngredients(ctx context.Context, in *messages.GetValidIngredientStateIngredientsRequest, opts ...grpc.CallOption) (*messages.ValidIngredientStateIngredient, error)
	GetValidIngredientStateIngredientsByIngredient(ctx context.Context, in *messages.GetValidIngredientStateIngredientsByIngredientRequest, opts ...grpc.CallOption) (*messages.ValidIngredientStateIngredient, error)
	GetValidIngredientStateIngredientsByIngredientState(ctx context.Context, in *messages.GetValidIngredientStateIngredientsByIngredientStateRequest, opts ...grpc.CallOption) (*messages.ValidIngredientStateIngredient, error)
	GetValidIngredientStates(ctx context.Context, in *messages.GetValidIngredientStatesRequest, opts ...grpc.CallOption) (*messages.ValidIngredientState, error)
	GetValidIngredients(ctx context.Context, in *messages.GetValidIngredientsRequest, opts ...grpc.CallOption) (*messages.ValidIngredient, error)
	GetValidInstrument(ctx context.Context, in *messages.GetValidInstrumentRequest, opts ...grpc.CallOption) (*messages.ValidInstrument, error)
	GetValidInstruments(ctx context.Context, in *messages.GetValidInstrumentsRequest, opts ...grpc.CallOption) (*messages.ValidInstrument, error)
	GetValidMeasurementUnit(ctx context.Context, in *messages.GetValidMeasurementUnitRequest, opts ...grpc.CallOption) (*messages.ValidMeasurementUnit, error)
	GetValidMeasurementUnitConversion(ctx context.Context, in *messages.GetValidMeasurementUnitConversionRequest, opts ...grpc.CallOption) (*messages.ValidMeasurementUnitConversion, error)
	GetValidMeasurementUnitConversionsFromUnit(ctx context.Context, in *messages.GetValidMeasurementUnitConversionsFromUnitRequest, opts ...grpc.CallOption) (*messages.ValidMeasurementUnitConversion, error)
	GetValidMeasurementUnitConversionsToUnit(ctx context.Context, in *messages.GetValidMeasurementUnitConversionsToUnitRequest, opts ...grpc.CallOption) (*messages.ValidMeasurementUnitConversion, error)
	GetValidMeasurementUnits(ctx context.Context, in *messages.GetValidMeasurementUnitsRequest, opts ...grpc.CallOption) (*messages.ValidMeasurementUnit, error)
	GetValidPreparation(ctx context.Context, in *messages.GetValidPreparationRequest, opts ...grpc.CallOption) (*messages.ValidPreparation, error)
	GetValidPreparationInstrument(ctx context.Context, in *messages.GetValidPreparationInstrumentRequest, opts ...grpc.CallOption) (*messages.ValidPreparationInstrument, error)
	GetValidPreparationInstruments(ctx context.Context, in *messages.GetValidPreparationInstrumentsRequest, opts ...grpc.CallOption) (*messages.ValidPreparationInstrument, error)
	GetValidPreparationInstrumentsByInstrument(ctx context.Context, in *messages.GetValidPreparationInstrumentsByInstrumentRequest, opts ...grpc.CallOption) (*messages.ValidPreparationInstrument, error)
	GetValidPreparationInstrumentsByPreparation(ctx context.Context, in *messages.GetValidPreparationInstrumentsByPreparationRequest, opts ...grpc.CallOption) (*messages.ValidPreparationInstrument, error)
	GetValidPreparationVessel(ctx context.Context, in *messages.GetValidPreparationVesselRequest, opts ...grpc.CallOption) (*messages.ValidPreparationVessel, error)
	GetValidPreparationVessels(ctx context.Context, in *messages.GetValidPreparationVesselsRequest, opts ...grpc.CallOption) (*messages.ValidPreparationVessel, error)
	GetValidPreparationVesselsByPreparation(ctx context.Context, in *messages.GetValidPreparationVesselsByPreparationRequest, opts ...grpc.CallOption) (*messages.ValidPreparationVessel, error)
	GetValidPreparationVesselsByVessel(ctx context.Context, in *messages.GetValidPreparationVesselsByVesselRequest, opts ...grpc.CallOption) (*messages.ValidPreparationVessel, error)
	GetValidPreparations(ctx context.Context, in *messages.GetValidPreparationsRequest, opts ...grpc.CallOption) (*messages.ValidPreparation, error)
	GetValidVessel(ctx context.Context, in *messages.GetValidVesselRequest, opts ...grpc.CallOption) (*messages.ValidVessel, error)
	GetValidVessels(ctx context.Context, in *messages.GetValidVesselsRequest, opts ...grpc.CallOption) (*messages.ValidVessel, error)
	GetWebhook(ctx context.Context, in *messages.GetWebhookRequest, opts ...grpc.CallOption) (*messages.Webhook, error)
	GetWebhooks(ctx context.Context, in *messages.GetWebhooksRequest, opts ...grpc.CallOption) (*messages.Webhook, error)
	LoginForToken(ctx context.Context, in *messages.UserLoginInput, opts ...grpc.CallOption) (*messages.TokenResponse, error)
	PublishArbitraryQueueMessage(ctx context.Context, in *messages.ArbitraryQueueMessageRequestInput, opts ...grpc.CallOption) (*messages.ArbitraryQueueMessageResponse, error)
	RedeemPasswordResetToken(ctx context.Context, in *messages.PasswordResetTokenRedemptionRequestInput, opts ...grpc.CallOption) (*messages.User, error)
	RefreshTOTPSecret(ctx context.Context, in *messages.TOTPSecretRefreshInput, opts ...grpc.CallOption) (*messages.TOTPSecretRefreshResponse, error)
	RejectHouseholdInvitation(ctx context.Context, in *messages.RejectHouseholdInvitationRequest, opts ...grpc.CallOption) (*messages.HouseholdInvitation, error)
	RequestEmailVerificationEmail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*messages.User, error)
	RequestPasswordResetToken(ctx context.Context, in *messages.PasswordResetTokenCreationRequestInput, opts ...grpc.CallOption) (*messages.PasswordResetToken, error)
	RequestUsernameReminder(ctx context.Context, in *messages.UsernameReminderRequestInput, opts ...grpc.CallOption) (*messages.User, error)
	RunFinalizeMealPlanWorker(ctx context.Context, in *messages.FinalizeMealPlansRequest, opts ...grpc.CallOption) (*messages.FinalizeMealPlansResponse, error)
	RunMealPlanGroceryListInitializerWorker(ctx context.Context, in *messages.InitializeMealPlanGroceryListRequest, opts ...grpc.CallOption) (*messages.InitializeMealPlanGroceryListResponse, error)
	RunMealPlanTaskCreatorWorker(ctx context.Context, in *messages.CreateMealPlanTasksRequest, opts ...grpc.CallOption) (*messages.CreateMealPlanTasksResponse, error)
	SearchForMeals(ctx context.Context, in *messages.SearchForMealsRequest, opts ...grpc.CallOption) (*messages.Meal, error)
	SearchForRecipes(ctx context.Context, in *messages.SearchForRecipesRequest, opts ...grpc.CallOption) (*messages.Recipe, error)
	SearchForServiceSettings(ctx context.Context, in *messages.SearchForServiceSettingsRequest, opts ...grpc.CallOption) (*messages.ServiceSetting, error)
	SearchForUsers(ctx context.Context, in *messages.SearchForUsersRequest, opts ...grpc.CallOption) (*messages.User, error)
	SearchForValidIngredientGroups(ctx context.Context, in *messages.SearchForValidIngredientGroupsRequest, opts ...grpc.CallOption) (*messages.ValidIngredientGroup, error)
	SearchForValidIngredientStates(ctx context.Context, in *messages.SearchForValidIngredientStatesRequest, opts ...grpc.CallOption) (*messages.ValidIngredientState, error)
	SearchForValidIngredients(ctx context.Context, in *messages.SearchForValidIngredientsRequest, opts ...grpc.CallOption) (*messages.ValidIngredient, error)
	SearchForValidInstruments(ctx context.Context, in *messages.SearchForValidInstrumentsRequest, opts ...grpc.CallOption) (*messages.ValidInstrument, error)
	SearchForValidMeasurementUnits(ctx context.Context, in *messages.SearchForValidMeasurementUnitsRequest, opts ...grpc.CallOption) (*messages.ValidMeasurementUnit, error)
	SearchForValidPreparations(ctx context.Context, in *messages.SearchForValidPreparationsRequest, opts ...grpc.CallOption) (*messages.ValidPreparation, error)
	SearchForValidVessels(ctx context.Context, in *messages.SearchForValidVesselsRequest, opts ...grpc.CallOption) (*messages.ValidVessel, error)
	SearchValidIngredientsByPreparation(ctx context.Context, in *messages.SearchValidIngredientsByPreparationRequest, opts ...grpc.CallOption) (*messages.ValidIngredient, error)
	SearchValidMeasurementUnitsByIngredient(ctx context.Context, in *messages.SearchValidMeasurementUnitsByIngredientRequest, opts ...grpc.CallOption) (*messages.ValidMeasurementUnit, error)
	SetDefaultHousehold(ctx context.Context, in *messages.SetDefaultHouseholdRequest, opts ...grpc.CallOption) (*messages.Household, error)
	TransferHouseholdOwnership(ctx context.Context, in *messages.TransferHouseholdOwnershipRequest, opts ...grpc.CallOption) (*messages.Household, error)
	UpdateHousehold(ctx context.Context, in *messages.UpdateHouseholdRequest, opts ...grpc.CallOption) (*messages.Household, error)
	UpdateHouseholdInstrumentOwnership(ctx context.Context, in *messages.UpdateHouseholdInstrumentOwnershipRequest, opts ...grpc.CallOption) (*messages.HouseholdInstrumentOwnership, error)
	UpdateHouseholdMemberPermissions(ctx context.Context, in *messages.UpdateHouseholdMemberPermissionsRequest, opts ...grpc.CallOption) (*messages.UserPermissionsResponse, error)
	UpdateMealPlan(ctx context.Context, in *messages.UpdateMealPlanRequest, opts ...grpc.CallOption) (*messages.MealPlan, error)
	UpdateMealPlanEvent(ctx context.Context, in *messages.UpdateMealPlanEventRequest, opts ...grpc.CallOption) (*messages.MealPlanEvent, error)
	UpdateMealPlanGroceryListItem(ctx context.Context, in *messages.UpdateMealPlanGroceryListItemRequest, opts ...grpc.CallOption) (*messages.MealPlanGroceryListItem, error)
	UpdateMealPlanOption(ctx context.Context, in *messages.UpdateMealPlanOptionRequest, opts ...grpc.CallOption) (*messages.MealPlanOption, error)
	UpdateMealPlanOptionVote(ctx context.Context, in *messages.UpdateMealPlanOptionVoteRequest, opts ...grpc.CallOption) (*messages.MealPlanOptionVote, error)
	UpdateMealPlanTaskStatus(ctx context.Context, in *messages.UpdateMealPlanTaskStatusRequest, opts ...grpc.CallOption) (*messages.MealPlanTask, error)
	UpdatePassword(ctx context.Context, in *messages.PasswordUpdateInput, opts ...grpc.CallOption) (*messages.PasswordResetResponse, error)
	UpdateRecipe(ctx context.Context, in *messages.UpdateRecipeRequest, opts ...grpc.CallOption) (*messages.Recipe, error)
	UpdateRecipePrepTask(ctx context.Context, in *messages.UpdateRecipePrepTaskRequest, opts ...grpc.CallOption) (*messages.RecipePrepTask, error)
	UpdateRecipeRating(ctx context.Context, in *messages.UpdateRecipeRatingRequest, opts ...grpc.CallOption) (*messages.RecipeRating, error)
	UpdateRecipeStep(ctx context.Context, in *messages.UpdateRecipeStepRequest, opts ...grpc.CallOption) (*messages.RecipeStep, error)
	UpdateRecipeStepCompletionCondition(ctx context.Context, in *messages.UpdateRecipeStepCompletionConditionRequest, opts ...grpc.CallOption) (*messages.RecipeStepCompletionCondition, error)
	UpdateRecipeStepIngredient(ctx context.Context, in *messages.UpdateRecipeStepIngredientRequest, opts ...grpc.CallOption) (*messages.RecipeStepIngredient, error)
	UpdateRecipeStepInstrument(ctx context.Context, in *messages.UpdateRecipeStepInstrumentRequest, opts ...grpc.CallOption) (*messages.RecipeStepInstrument, error)
	UpdateRecipeStepProduct(ctx context.Context, in *messages.UpdateRecipeStepProductRequest, opts ...grpc.CallOption) (*messages.RecipeStepProduct, error)
	UpdateRecipeStepVessel(ctx context.Context, in *messages.UpdateRecipeStepVesselRequest, opts ...grpc.CallOption) (*messages.RecipeStepVessel, error)
	UpdateServiceSettingConfiguration(ctx context.Context, in *messages.UpdateServiceSettingConfigurationRequest, opts ...grpc.CallOption) (*messages.ServiceSettingConfiguration, error)
	UpdateUserDetails(ctx context.Context, in *messages.UserDetailsUpdateRequestInput, opts ...grpc.CallOption) (*messages.User, error)
	UpdateUserEmailAddress(ctx context.Context, in *messages.UserEmailAddressUpdateInput, opts ...grpc.CallOption) (*messages.User, error)
	UpdateUserIngredientPreference(ctx context.Context, in *messages.UpdateUserIngredientPreferenceRequest, opts ...grpc.CallOption) (*messages.UserIngredientPreference, error)
	UpdateUserNotification(ctx context.Context, in *messages.UpdateUserNotificationRequest, opts ...grpc.CallOption) (*messages.UserNotification, error)
	UpdateUserUsername(ctx context.Context, in *messages.UsernameUpdateInput, opts ...grpc.CallOption) (*messages.User, error)
	UpdateValidIngredient(ctx context.Context, in *messages.UpdateValidIngredientRequest, opts ...grpc.CallOption) (*messages.ValidIngredient, error)
	UpdateValidIngredientGroup(ctx context.Context, in *messages.UpdateValidIngredientGroupRequest, opts ...grpc.CallOption) (*messages.ValidIngredientGroup, error)
	UpdateValidIngredientMeasurementUnit(ctx context.Context, in *messages.UpdateValidIngredientMeasurementUnitRequest, opts ...grpc.CallOption) (*messages.ValidIngredientMeasurementUnit, error)
	UpdateValidIngredientPreparation(ctx context.Context, in *messages.UpdateValidIngredientPreparationRequest, opts ...grpc.CallOption) (*messages.ValidIngredientPreparation, error)
	UpdateValidIngredientState(ctx context.Context, in *messages.UpdateValidIngredientStateRequest, opts ...grpc.CallOption) (*messages.ValidIngredientState, error)
	UpdateValidIngredientStateIngredient(ctx context.Context, in *messages.UpdateValidIngredientStateIngredientRequest, opts ...grpc.CallOption) (*messages.ValidIngredientStateIngredient, error)
	UpdateValidInstrument(ctx context.Context, in *messages.UpdateValidInstrumentRequest, opts ...grpc.CallOption) (*messages.ValidInstrument, error)
	UpdateValidMeasurementUnit(ctx context.Context, in *messages.UpdateValidMeasurementUnitRequest, opts ...grpc.CallOption) (*messages.ValidMeasurementUnit, error)
	UpdateValidMeasurementUnitConversion(ctx context.Context, in *messages.UpdateValidMeasurementUnitConversionRequest, opts ...grpc.CallOption) (*messages.ValidMeasurementUnitConversion, error)
	UpdateValidPreparation(ctx context.Context, in *messages.UpdateValidPreparationRequest, opts ...grpc.CallOption) (*messages.ValidPreparation, error)
	UpdateValidPreparationInstrument(ctx context.Context, in *messages.UpdateValidPreparationInstrumentRequest, opts ...grpc.CallOption) (*messages.ValidPreparationInstrument, error)
	UpdateValidPreparationVessel(ctx context.Context, in *messages.UpdateValidPreparationVesselRequest, opts ...grpc.CallOption) (*messages.ValidPreparationVessel, error)
	UpdateValidVessel(ctx context.Context, in *messages.UpdateValidVesselRequest, opts ...grpc.CallOption) (*messages.ValidVessel, error)
	UploadUserAvatar(ctx context.Context, in *messages.AvatarUpdateInput, opts ...grpc.CallOption) (*messages.User, error)
	VerifyEmailAddress(ctx context.Context, in *messages.EmailAddressVerificationRequestInput, opts ...grpc.CallOption) (*messages.User, error)
	VerifyTOTPSecret(ctx context.Context, in *messages.TOTPSecretVerificationInput, opts ...grpc.CallOption) (*messages.User, error)
}

type eatingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEatingServiceClient(cc grpc.ClientConnInterface) EatingServiceClient {
	return &eatingServiceClient{cc}
}

func (c *eatingServiceClient) AcceptHouseholdInvitation(ctx context.Context, in *messages.AcceptHouseholdInvitationRequest, opts ...grpc.CallOption) (*messages.HouseholdInvitation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.HouseholdInvitation)
	err := c.cc.Invoke(ctx, EatingService_AcceptHouseholdInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) AdminLoginForToken(ctx context.Context, in *messages.UserLoginInput, opts ...grpc.CallOption) (*messages.TokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.TokenResponse)
	err := c.cc.Invoke(ctx, EatingService_AdminLoginForToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) AdminUpdateUserStatus(ctx context.Context, in *messages.UserAccountStatusUpdateInput, opts ...grpc.CallOption) (*messages.UserStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.UserStatusResponse)
	err := c.cc.Invoke(ctx, EatingService_AdminUpdateUserStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) AggregateUserDataReport(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*messages.UserDataCollectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.UserDataCollectionResponse)
	err := c.cc.Invoke(ctx, EatingService_AggregateUserDataReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveHousehold(ctx context.Context, in *messages.ArchiveHouseholdRequest, opts ...grpc.CallOption) (*messages.Household, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.Household)
	err := c.cc.Invoke(ctx, EatingService_ArchiveHousehold_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveHouseholdInstrumentOwnership(ctx context.Context, in *messages.ArchiveHouseholdInstrumentOwnershipRequest, opts ...grpc.CallOption) (*messages.HouseholdInstrumentOwnership, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.HouseholdInstrumentOwnership)
	err := c.cc.Invoke(ctx, EatingService_ArchiveHouseholdInstrumentOwnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveMeal(ctx context.Context, in *messages.ArchiveMealRequest, opts ...grpc.CallOption) (*messages.Meal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.Meal)
	err := c.cc.Invoke(ctx, EatingService_ArchiveMeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveMealPlan(ctx context.Context, in *messages.ArchiveMealPlanRequest, opts ...grpc.CallOption) (*messages.MealPlan, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlan)
	err := c.cc.Invoke(ctx, EatingService_ArchiveMealPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveMealPlanEvent(ctx context.Context, in *messages.ArchiveMealPlanEventRequest, opts ...grpc.CallOption) (*messages.MealPlanEvent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlanEvent)
	err := c.cc.Invoke(ctx, EatingService_ArchiveMealPlanEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveMealPlanGroceryListItem(ctx context.Context, in *messages.ArchiveMealPlanGroceryListItemRequest, opts ...grpc.CallOption) (*messages.MealPlanGroceryListItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlanGroceryListItem)
	err := c.cc.Invoke(ctx, EatingService_ArchiveMealPlanGroceryListItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveMealPlanOption(ctx context.Context, in *messages.ArchiveMealPlanOptionRequest, opts ...grpc.CallOption) (*messages.MealPlanOption, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlanOption)
	err := c.cc.Invoke(ctx, EatingService_ArchiveMealPlanOption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveMealPlanOptionVote(ctx context.Context, in *messages.ArchiveMealPlanOptionVoteRequest, opts ...grpc.CallOption) (*messages.MealPlanOptionVote, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlanOptionVote)
	err := c.cc.Invoke(ctx, EatingService_ArchiveMealPlanOptionVote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveOAuth2Client(ctx context.Context, in *messages.ArchiveOAuth2ClientRequest, opts ...grpc.CallOption) (*messages.OAuth2Client, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.OAuth2Client)
	err := c.cc.Invoke(ctx, EatingService_ArchiveOAuth2Client_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveRecipe(ctx context.Context, in *messages.ArchiveRecipeRequest, opts ...grpc.CallOption) (*messages.Recipe, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.Recipe)
	err := c.cc.Invoke(ctx, EatingService_ArchiveRecipe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveRecipePrepTask(ctx context.Context, in *messages.ArchiveRecipePrepTaskRequest, opts ...grpc.CallOption) (*messages.RecipePrepTask, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipePrepTask)
	err := c.cc.Invoke(ctx, EatingService_ArchiveRecipePrepTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveRecipeRating(ctx context.Context, in *messages.ArchiveRecipeRatingRequest, opts ...grpc.CallOption) (*messages.RecipeRating, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeRating)
	err := c.cc.Invoke(ctx, EatingService_ArchiveRecipeRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveRecipeStep(ctx context.Context, in *messages.ArchiveRecipeStepRequest, opts ...grpc.CallOption) (*messages.RecipeStep, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStep)
	err := c.cc.Invoke(ctx, EatingService_ArchiveRecipeStep_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveRecipeStepCompletionCondition(ctx context.Context, in *messages.ArchiveRecipeStepCompletionConditionRequest, opts ...grpc.CallOption) (*messages.RecipeStepCompletionCondition, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStepCompletionCondition)
	err := c.cc.Invoke(ctx, EatingService_ArchiveRecipeStepCompletionCondition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveRecipeStepIngredient(ctx context.Context, in *messages.ArchiveRecipeStepIngredientRequest, opts ...grpc.CallOption) (*messages.RecipeStepIngredient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStepIngredient)
	err := c.cc.Invoke(ctx, EatingService_ArchiveRecipeStepIngredient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveRecipeStepInstrument(ctx context.Context, in *messages.ArchiveRecipeStepInstrumentRequest, opts ...grpc.CallOption) (*messages.RecipeStepInstrument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStepInstrument)
	err := c.cc.Invoke(ctx, EatingService_ArchiveRecipeStepInstrument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveRecipeStepProduct(ctx context.Context, in *messages.ArchiveRecipeStepProductRequest, opts ...grpc.CallOption) (*messages.RecipeStepProduct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStepProduct)
	err := c.cc.Invoke(ctx, EatingService_ArchiveRecipeStepProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveRecipeStepVessel(ctx context.Context, in *messages.ArchiveRecipeStepVesselRequest, opts ...grpc.CallOption) (*messages.RecipeStepVessel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStepVessel)
	err := c.cc.Invoke(ctx, EatingService_ArchiveRecipeStepVessel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveServiceSetting(ctx context.Context, in *messages.ArchiveServiceSettingRequest, opts ...grpc.CallOption) (*messages.ServiceSetting, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ServiceSetting)
	err := c.cc.Invoke(ctx, EatingService_ArchiveServiceSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveServiceSettingConfiguration(ctx context.Context, in *messages.ArchiveServiceSettingConfigurationRequest, opts ...grpc.CallOption) (*messages.ServiceSettingConfiguration, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ServiceSettingConfiguration)
	err := c.cc.Invoke(ctx, EatingService_ArchiveServiceSettingConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveUser(ctx context.Context, in *messages.ArchiveUserRequest, opts ...grpc.CallOption) (*messages.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.User)
	err := c.cc.Invoke(ctx, EatingService_ArchiveUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveUserIngredientPreference(ctx context.Context, in *messages.ArchiveUserIngredientPreferenceRequest, opts ...grpc.CallOption) (*messages.UserIngredientPreference, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.UserIngredientPreference)
	err := c.cc.Invoke(ctx, EatingService_ArchiveUserIngredientPreference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveUserMembership(ctx context.Context, in *messages.ArchiveUserMembershipRequest, opts ...grpc.CallOption) (*messages.HouseholdUserMembership, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.HouseholdUserMembership)
	err := c.cc.Invoke(ctx, EatingService_ArchiveUserMembership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveValidIngredient(ctx context.Context, in *messages.ArchiveValidIngredientRequest, opts ...grpc.CallOption) (*messages.ValidIngredient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredient)
	err := c.cc.Invoke(ctx, EatingService_ArchiveValidIngredient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveValidIngredientGroup(ctx context.Context, in *messages.ArchiveValidIngredientGroupRequest, opts ...grpc.CallOption) (*messages.ValidIngredientGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientGroup)
	err := c.cc.Invoke(ctx, EatingService_ArchiveValidIngredientGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveValidIngredientMeasurementUnit(ctx context.Context, in *messages.ArchiveValidIngredientMeasurementUnitRequest, opts ...grpc.CallOption) (*messages.ValidIngredientMeasurementUnit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientMeasurementUnit)
	err := c.cc.Invoke(ctx, EatingService_ArchiveValidIngredientMeasurementUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveValidIngredientPreparation(ctx context.Context, in *messages.ArchiveValidIngredientPreparationRequest, opts ...grpc.CallOption) (*messages.ValidIngredientPreparation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientPreparation)
	err := c.cc.Invoke(ctx, EatingService_ArchiveValidIngredientPreparation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveValidIngredientState(ctx context.Context, in *messages.ArchiveValidIngredientStateRequest, opts ...grpc.CallOption) (*messages.ValidIngredientState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientState)
	err := c.cc.Invoke(ctx, EatingService_ArchiveValidIngredientState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveValidIngredientStateIngredient(ctx context.Context, in *messages.ArchiveValidIngredientStateIngredientRequest, opts ...grpc.CallOption) (*messages.ValidIngredientStateIngredient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientStateIngredient)
	err := c.cc.Invoke(ctx, EatingService_ArchiveValidIngredientStateIngredient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveValidInstrument(ctx context.Context, in *messages.ArchiveValidInstrumentRequest, opts ...grpc.CallOption) (*messages.ValidInstrument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidInstrument)
	err := c.cc.Invoke(ctx, EatingService_ArchiveValidInstrument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveValidMeasurementUnit(ctx context.Context, in *messages.ArchiveValidMeasurementUnitRequest, opts ...grpc.CallOption) (*messages.ValidMeasurementUnit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidMeasurementUnit)
	err := c.cc.Invoke(ctx, EatingService_ArchiveValidMeasurementUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveValidMeasurementUnitConversion(ctx context.Context, in *messages.ArchiveValidMeasurementUnitConversionRequest, opts ...grpc.CallOption) (*messages.ValidMeasurementUnitConversion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidMeasurementUnitConversion)
	err := c.cc.Invoke(ctx, EatingService_ArchiveValidMeasurementUnitConversion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveValidPreparation(ctx context.Context, in *messages.ArchiveValidPreparationRequest, opts ...grpc.CallOption) (*messages.ValidPreparation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidPreparation)
	err := c.cc.Invoke(ctx, EatingService_ArchiveValidPreparation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveValidPreparationInstrument(ctx context.Context, in *messages.ArchiveValidPreparationInstrumentRequest, opts ...grpc.CallOption) (*messages.ValidPreparationInstrument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidPreparationInstrument)
	err := c.cc.Invoke(ctx, EatingService_ArchiveValidPreparationInstrument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveValidPreparationVessel(ctx context.Context, in *messages.ArchiveValidPreparationVesselRequest, opts ...grpc.CallOption) (*messages.ValidPreparationVessel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidPreparationVessel)
	err := c.cc.Invoke(ctx, EatingService_ArchiveValidPreparationVessel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveValidVessel(ctx context.Context, in *messages.ArchiveValidVesselRequest, opts ...grpc.CallOption) (*messages.ValidVessel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidVessel)
	err := c.cc.Invoke(ctx, EatingService_ArchiveValidVessel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveWebhook(ctx context.Context, in *messages.ArchiveWebhookRequest, opts ...grpc.CallOption) (*messages.Webhook, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.Webhook)
	err := c.cc.Invoke(ctx, EatingService_ArchiveWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) ArchiveWebhookTriggerEvent(ctx context.Context, in *messages.ArchiveWebhookTriggerEventRequest, opts ...grpc.CallOption) (*messages.WebhookTriggerEvent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.WebhookTriggerEvent)
	err := c.cc.Invoke(ctx, EatingService_ArchiveWebhookTriggerEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CancelHouseholdInvitation(ctx context.Context, in *messages.CancelHouseholdInvitationRequest, opts ...grpc.CallOption) (*messages.HouseholdInvitation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.HouseholdInvitation)
	err := c.cc.Invoke(ctx, EatingService_CancelHouseholdInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CheckForReadiness(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EatingService_CheckForReadiness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CheckPermissions(ctx context.Context, in *messages.UserPermissionsRequestInput, opts ...grpc.CallOption) (*messages.UserPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.UserPermissionsResponse)
	err := c.cc.Invoke(ctx, EatingService_CheckPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CloneRecipe(ctx context.Context, in *messages.CloneRecipeRequest, opts ...grpc.CallOption) (*messages.Recipe, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.Recipe)
	err := c.cc.Invoke(ctx, EatingService_CloneRecipe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateHousehold(ctx context.Context, in *messages.HouseholdCreationRequestInput, opts ...grpc.CallOption) (*messages.Household, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.Household)
	err := c.cc.Invoke(ctx, EatingService_CreateHousehold_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateHouseholdInstrumentOwnership(ctx context.Context, in *messages.HouseholdInstrumentOwnershipCreationRequestInput, opts ...grpc.CallOption) (*messages.HouseholdInstrumentOwnership, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.HouseholdInstrumentOwnership)
	err := c.cc.Invoke(ctx, EatingService_CreateHouseholdInstrumentOwnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateHouseholdInvitation(ctx context.Context, in *messages.CreateHouseholdInvitationRequest, opts ...grpc.CallOption) (*messages.HouseholdInvitation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.HouseholdInvitation)
	err := c.cc.Invoke(ctx, EatingService_CreateHouseholdInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateMeal(ctx context.Context, in *messages.MealCreationRequestInput, opts ...grpc.CallOption) (*messages.Meal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.Meal)
	err := c.cc.Invoke(ctx, EatingService_CreateMeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateMealPlan(ctx context.Context, in *messages.MealPlanCreationRequestInput, opts ...grpc.CallOption) (*messages.MealPlan, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlan)
	err := c.cc.Invoke(ctx, EatingService_CreateMealPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateMealPlanEvent(ctx context.Context, in *messages.CreateMealPlanEventRequest, opts ...grpc.CallOption) (*messages.MealPlanEvent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlanEvent)
	err := c.cc.Invoke(ctx, EatingService_CreateMealPlanEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateMealPlanGroceryListItem(ctx context.Context, in *messages.CreateMealPlanGroceryListItemRequest, opts ...grpc.CallOption) (*messages.MealPlanGroceryListItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlanGroceryListItem)
	err := c.cc.Invoke(ctx, EatingService_CreateMealPlanGroceryListItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateMealPlanOption(ctx context.Context, in *messages.CreateMealPlanOptionRequest, opts ...grpc.CallOption) (*messages.MealPlanOption, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlanOption)
	err := c.cc.Invoke(ctx, EatingService_CreateMealPlanOption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateMealPlanOptionVote(ctx context.Context, in *messages.CreateMealPlanOptionVoteRequest, opts ...grpc.CallOption) (*messages.MealPlanOptionVote, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlanOptionVote)
	err := c.cc.Invoke(ctx, EatingService_CreateMealPlanOptionVote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateMealPlanTask(ctx context.Context, in *messages.CreateMealPlanTaskRequest, opts ...grpc.CallOption) (*messages.MealPlanTask, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlanTask)
	err := c.cc.Invoke(ctx, EatingService_CreateMealPlanTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateOAuth2Client(ctx context.Context, in *messages.OAuth2ClientCreationRequestInput, opts ...grpc.CallOption) (*messages.OAuth2ClientCreationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.OAuth2ClientCreationResponse)
	err := c.cc.Invoke(ctx, EatingService_CreateOAuth2Client_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateRecipe(ctx context.Context, in *messages.RecipeCreationRequestInput, opts ...grpc.CallOption) (*messages.Recipe, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.Recipe)
	err := c.cc.Invoke(ctx, EatingService_CreateRecipe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateRecipePrepTask(ctx context.Context, in *messages.CreateRecipePrepTaskRequest, opts ...grpc.CallOption) (*messages.RecipePrepTask, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipePrepTask)
	err := c.cc.Invoke(ctx, EatingService_CreateRecipePrepTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateRecipeRating(ctx context.Context, in *messages.CreateRecipeRatingRequest, opts ...grpc.CallOption) (*messages.RecipeRating, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeRating)
	err := c.cc.Invoke(ctx, EatingService_CreateRecipeRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateRecipeStep(ctx context.Context, in *messages.CreateRecipeStepRequest, opts ...grpc.CallOption) (*messages.RecipeStep, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStep)
	err := c.cc.Invoke(ctx, EatingService_CreateRecipeStep_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateRecipeStepCompletionCondition(ctx context.Context, in *messages.CreateRecipeStepCompletionConditionRequest, opts ...grpc.CallOption) (*messages.RecipeStepCompletionCondition, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStepCompletionCondition)
	err := c.cc.Invoke(ctx, EatingService_CreateRecipeStepCompletionCondition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateRecipeStepIngredient(ctx context.Context, in *messages.CreateRecipeStepIngredientRequest, opts ...grpc.CallOption) (*messages.RecipeStepIngredient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStepIngredient)
	err := c.cc.Invoke(ctx, EatingService_CreateRecipeStepIngredient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateRecipeStepInstrument(ctx context.Context, in *messages.CreateRecipeStepInstrumentRequest, opts ...grpc.CallOption) (*messages.RecipeStepInstrument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStepInstrument)
	err := c.cc.Invoke(ctx, EatingService_CreateRecipeStepInstrument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateRecipeStepProduct(ctx context.Context, in *messages.CreateRecipeStepProductRequest, opts ...grpc.CallOption) (*messages.RecipeStepProduct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStepProduct)
	err := c.cc.Invoke(ctx, EatingService_CreateRecipeStepProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateRecipeStepVessel(ctx context.Context, in *messages.CreateRecipeStepVesselRequest, opts ...grpc.CallOption) (*messages.RecipeStepVessel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStepVessel)
	err := c.cc.Invoke(ctx, EatingService_CreateRecipeStepVessel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateServiceSetting(ctx context.Context, in *messages.ServiceSettingCreationRequestInput, opts ...grpc.CallOption) (*messages.ServiceSetting, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ServiceSetting)
	err := c.cc.Invoke(ctx, EatingService_CreateServiceSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateServiceSettingConfiguration(ctx context.Context, in *messages.ServiceSettingConfigurationCreationRequestInput, opts ...grpc.CallOption) (*messages.ServiceSettingConfiguration, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ServiceSettingConfiguration)
	err := c.cc.Invoke(ctx, EatingService_CreateServiceSettingConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateUser(ctx context.Context, in *messages.UserRegistrationInput, opts ...grpc.CallOption) (*messages.UserCreationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.UserCreationResponse)
	err := c.cc.Invoke(ctx, EatingService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateUserIngredientPreference(ctx context.Context, in *messages.UserIngredientPreferenceCreationRequestInput, opts ...grpc.CallOption) (*messages.UserIngredientPreference, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.UserIngredientPreference)
	err := c.cc.Invoke(ctx, EatingService_CreateUserIngredientPreference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateUserNotification(ctx context.Context, in *messages.UserNotificationCreationRequestInput, opts ...grpc.CallOption) (*messages.UserNotification, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.UserNotification)
	err := c.cc.Invoke(ctx, EatingService_CreateUserNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateValidIngredient(ctx context.Context, in *messages.ValidIngredientCreationRequestInput, opts ...grpc.CallOption) (*messages.ValidIngredient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredient)
	err := c.cc.Invoke(ctx, EatingService_CreateValidIngredient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateValidIngredientGroup(ctx context.Context, in *messages.ValidIngredientGroupCreationRequestInput, opts ...grpc.CallOption) (*messages.ValidIngredientGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientGroup)
	err := c.cc.Invoke(ctx, EatingService_CreateValidIngredientGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateValidIngredientMeasurementUnit(ctx context.Context, in *messages.ValidIngredientMeasurementUnitCreationRequestInput, opts ...grpc.CallOption) (*messages.ValidIngredientMeasurementUnit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientMeasurementUnit)
	err := c.cc.Invoke(ctx, EatingService_CreateValidIngredientMeasurementUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateValidIngredientPreparation(ctx context.Context, in *messages.ValidIngredientPreparationCreationRequestInput, opts ...grpc.CallOption) (*messages.ValidIngredientPreparation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientPreparation)
	err := c.cc.Invoke(ctx, EatingService_CreateValidIngredientPreparation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateValidIngredientState(ctx context.Context, in *messages.ValidIngredientStateCreationRequestInput, opts ...grpc.CallOption) (*messages.ValidIngredientState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientState)
	err := c.cc.Invoke(ctx, EatingService_CreateValidIngredientState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateValidIngredientStateIngredient(ctx context.Context, in *messages.ValidIngredientStateIngredientCreationRequestInput, opts ...grpc.CallOption) (*messages.ValidIngredientStateIngredient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientStateIngredient)
	err := c.cc.Invoke(ctx, EatingService_CreateValidIngredientStateIngredient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateValidInstrument(ctx context.Context, in *messages.ValidInstrumentCreationRequestInput, opts ...grpc.CallOption) (*messages.ValidInstrument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidInstrument)
	err := c.cc.Invoke(ctx, EatingService_CreateValidInstrument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateValidMeasurementUnit(ctx context.Context, in *messages.ValidMeasurementUnitCreationRequestInput, opts ...grpc.CallOption) (*messages.ValidMeasurementUnit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidMeasurementUnit)
	err := c.cc.Invoke(ctx, EatingService_CreateValidMeasurementUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateValidMeasurementUnitConversion(ctx context.Context, in *messages.ValidMeasurementUnitConversionCreationRequestInput, opts ...grpc.CallOption) (*messages.ValidMeasurementUnitConversion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidMeasurementUnitConversion)
	err := c.cc.Invoke(ctx, EatingService_CreateValidMeasurementUnitConversion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateValidPreparation(ctx context.Context, in *messages.ValidPreparationCreationRequestInput, opts ...grpc.CallOption) (*messages.ValidPreparation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidPreparation)
	err := c.cc.Invoke(ctx, EatingService_CreateValidPreparation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateValidPreparationInstrument(ctx context.Context, in *messages.ValidPreparationInstrumentCreationRequestInput, opts ...grpc.CallOption) (*messages.ValidPreparationInstrument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidPreparationInstrument)
	err := c.cc.Invoke(ctx, EatingService_CreateValidPreparationInstrument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateValidPreparationVessel(ctx context.Context, in *messages.ValidPreparationVesselCreationRequestInput, opts ...grpc.CallOption) (*messages.ValidPreparationVessel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidPreparationVessel)
	err := c.cc.Invoke(ctx, EatingService_CreateValidPreparationVessel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateValidVessel(ctx context.Context, in *messages.ValidVesselCreationRequestInput, opts ...grpc.CallOption) (*messages.ValidVessel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidVessel)
	err := c.cc.Invoke(ctx, EatingService_CreateValidVessel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateWebhook(ctx context.Context, in *messages.WebhookCreationRequestInput, opts ...grpc.CallOption) (*messages.Webhook, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.Webhook)
	err := c.cc.Invoke(ctx, EatingService_CreateWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) CreateWebhookTriggerEvent(ctx context.Context, in *messages.CreateWebhookTriggerEventRequest, opts ...grpc.CallOption) (*messages.WebhookTriggerEvent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.WebhookTriggerEvent)
	err := c.cc.Invoke(ctx, EatingService_CreateWebhookTriggerEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) DestroyAllUserData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*messages.DataDeletionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.DataDeletionResponse)
	err := c.cc.Invoke(ctx, EatingService_DestroyAllUserData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) FetchUserDataReport(ctx context.Context, in *messages.FetchUserDataReportRequest, opts ...grpc.CallOption) (*messages.UserDataCollection, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.UserDataCollection)
	err := c.cc.Invoke(ctx, EatingService_FetchUserDataReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) FinalizeMealPlan(ctx context.Context, in *messages.FinalizeMealPlanRequest, opts ...grpc.CallOption) (*messages.FinalizeMealPlansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.FinalizeMealPlansResponse)
	err := c.cc.Invoke(ctx, EatingService_FinalizeMealPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetActiveHousehold(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*messages.Household, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.Household)
	err := c.cc.Invoke(ctx, EatingService_GetActiveHousehold_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetAuditLogEntriesForHousehold(ctx context.Context, in *messages.GetAuditLogEntriesForHouseholdRequest, opts ...grpc.CallOption) (*messages.AuditLogEntry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.AuditLogEntry)
	err := c.cc.Invoke(ctx, EatingService_GetAuditLogEntriesForHousehold_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetAuditLogEntriesForUser(ctx context.Context, in *messages.GetAuditLogEntriesForUserRequest, opts ...grpc.CallOption) (*messages.AuditLogEntry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.AuditLogEntry)
	err := c.cc.Invoke(ctx, EatingService_GetAuditLogEntriesForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetAuditLogEntryByID(ctx context.Context, in *messages.GetAuditLogEntryByIDRequest, opts ...grpc.CallOption) (*messages.AuditLogEntry, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.AuditLogEntry)
	err := c.cc.Invoke(ctx, EatingService_GetAuditLogEntryByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetAuthStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*messages.UserStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.UserStatusResponse)
	err := c.cc.Invoke(ctx, EatingService_GetAuthStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetHousehold(ctx context.Context, in *messages.GetHouseholdRequest, opts ...grpc.CallOption) (*messages.Household, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.Household)
	err := c.cc.Invoke(ctx, EatingService_GetHousehold_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetHouseholdInstrumentOwnership(ctx context.Context, in *messages.GetHouseholdInstrumentOwnershipRequest, opts ...grpc.CallOption) (*messages.HouseholdInstrumentOwnership, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.HouseholdInstrumentOwnership)
	err := c.cc.Invoke(ctx, EatingService_GetHouseholdInstrumentOwnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetHouseholdInstrumentOwnerships(ctx context.Context, in *messages.GetHouseholdInstrumentOwnershipsRequest, opts ...grpc.CallOption) (*messages.HouseholdInstrumentOwnership, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.HouseholdInstrumentOwnership)
	err := c.cc.Invoke(ctx, EatingService_GetHouseholdInstrumentOwnerships_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetHouseholdInvitation(ctx context.Context, in *messages.GetHouseholdInvitationRequest, opts ...grpc.CallOption) (*messages.HouseholdInvitation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.HouseholdInvitation)
	err := c.cc.Invoke(ctx, EatingService_GetHouseholdInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetHouseholdInvitationByID(ctx context.Context, in *messages.GetHouseholdInvitationByIDRequest, opts ...grpc.CallOption) (*messages.HouseholdInvitation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.HouseholdInvitation)
	err := c.cc.Invoke(ctx, EatingService_GetHouseholdInvitationByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetHouseholds(ctx context.Context, in *messages.GetHouseholdsRequest, opts ...grpc.CallOption) (*messages.Household, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.Household)
	err := c.cc.Invoke(ctx, EatingService_GetHouseholds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetMeal(ctx context.Context, in *messages.GetMealRequest, opts ...grpc.CallOption) (*messages.Meal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.Meal)
	err := c.cc.Invoke(ctx, EatingService_GetMeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetMealPlan(ctx context.Context, in *messages.GetMealPlanRequest, opts ...grpc.CallOption) (*messages.MealPlan, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlan)
	err := c.cc.Invoke(ctx, EatingService_GetMealPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetMealPlanEvent(ctx context.Context, in *messages.GetMealPlanEventRequest, opts ...grpc.CallOption) (*messages.MealPlanEvent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlanEvent)
	err := c.cc.Invoke(ctx, EatingService_GetMealPlanEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetMealPlanEvents(ctx context.Context, in *messages.GetMealPlanEventsRequest, opts ...grpc.CallOption) (*messages.MealPlanEvent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlanEvent)
	err := c.cc.Invoke(ctx, EatingService_GetMealPlanEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetMealPlanGroceryListItem(ctx context.Context, in *messages.GetMealPlanGroceryListItemRequest, opts ...grpc.CallOption) (*messages.MealPlanGroceryListItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlanGroceryListItem)
	err := c.cc.Invoke(ctx, EatingService_GetMealPlanGroceryListItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetMealPlanGroceryListItemsForMealPlan(ctx context.Context, in *messages.GetMealPlanGroceryListItemsForMealPlanRequest, opts ...grpc.CallOption) (*messages.MealPlanGroceryListItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlanGroceryListItem)
	err := c.cc.Invoke(ctx, EatingService_GetMealPlanGroceryListItemsForMealPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetMealPlanOption(ctx context.Context, in *messages.GetMealPlanOptionRequest, opts ...grpc.CallOption) (*messages.MealPlanOption, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlanOption)
	err := c.cc.Invoke(ctx, EatingService_GetMealPlanOption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetMealPlanOptionVote(ctx context.Context, in *messages.GetMealPlanOptionVoteRequest, opts ...grpc.CallOption) (*messages.MealPlanOptionVote, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlanOptionVote)
	err := c.cc.Invoke(ctx, EatingService_GetMealPlanOptionVote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetMealPlanOptionVotes(ctx context.Context, in *messages.GetMealPlanOptionVotesRequest, opts ...grpc.CallOption) (*messages.MealPlanOptionVote, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlanOptionVote)
	err := c.cc.Invoke(ctx, EatingService_GetMealPlanOptionVotes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetMealPlanOptions(ctx context.Context, in *messages.GetMealPlanOptionsRequest, opts ...grpc.CallOption) (*messages.MealPlanOption, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlanOption)
	err := c.cc.Invoke(ctx, EatingService_GetMealPlanOptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetMealPlanTask(ctx context.Context, in *messages.GetMealPlanTaskRequest, opts ...grpc.CallOption) (*messages.MealPlanTask, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlanTask)
	err := c.cc.Invoke(ctx, EatingService_GetMealPlanTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetMealPlanTasks(ctx context.Context, in *messages.GetMealPlanTasksRequest, opts ...grpc.CallOption) (*messages.MealPlanTask, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlanTask)
	err := c.cc.Invoke(ctx, EatingService_GetMealPlanTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetMealPlansForHousehold(ctx context.Context, in *messages.GetMealPlansForHouseholdRequest, opts ...grpc.CallOption) (*messages.MealPlan, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlan)
	err := c.cc.Invoke(ctx, EatingService_GetMealPlansForHousehold_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetMeals(ctx context.Context, in *messages.GetMealsRequest, opts ...grpc.CallOption) (*messages.Meal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.Meal)
	err := c.cc.Invoke(ctx, EatingService_GetMeals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetMermaidDiagramForRecipe(ctx context.Context, in *messages.GetMermaidDiagramForRecipeRequest, opts ...grpc.CallOption) (*messages.GetMermaidDiagramForRecipeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.GetMermaidDiagramForRecipeResponse)
	err := c.cc.Invoke(ctx, EatingService_GetMermaidDiagramForRecipe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetOAuth2Client(ctx context.Context, in *messages.GetOAuth2ClientRequest, opts ...grpc.CallOption) (*messages.OAuth2Client, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.OAuth2Client)
	err := c.cc.Invoke(ctx, EatingService_GetOAuth2Client_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetOAuth2Clients(ctx context.Context, in *messages.GetOAuth2ClientsRequest, opts ...grpc.CallOption) (*messages.OAuth2Client, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.OAuth2Client)
	err := c.cc.Invoke(ctx, EatingService_GetOAuth2Clients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetRandomValidIngredient(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*messages.ValidIngredient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredient)
	err := c.cc.Invoke(ctx, EatingService_GetRandomValidIngredient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetRandomValidInstrument(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*messages.ValidInstrument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidInstrument)
	err := c.cc.Invoke(ctx, EatingService_GetRandomValidInstrument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetRandomValidPreparation(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*messages.ValidPreparation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidPreparation)
	err := c.cc.Invoke(ctx, EatingService_GetRandomValidPreparation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetRandomValidVessel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*messages.ValidVessel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidVessel)
	err := c.cc.Invoke(ctx, EatingService_GetRandomValidVessel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetReceivedHouseholdInvitations(ctx context.Context, in *messages.GetReceivedHouseholdInvitationsRequest, opts ...grpc.CallOption) (*messages.HouseholdInvitation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.HouseholdInvitation)
	err := c.cc.Invoke(ctx, EatingService_GetReceivedHouseholdInvitations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetRecipe(ctx context.Context, in *messages.GetRecipeRequest, opts ...grpc.CallOption) (*messages.Recipe, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.Recipe)
	err := c.cc.Invoke(ctx, EatingService_GetRecipe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetRecipeMealPlanTasks(ctx context.Context, in *messages.GetRecipeMealPlanTasksRequest, opts ...grpc.CallOption) (*messages.RecipePrepTaskStep, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipePrepTaskStep)
	err := c.cc.Invoke(ctx, EatingService_GetRecipeMealPlanTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetRecipePrepTask(ctx context.Context, in *messages.GetRecipePrepTaskRequest, opts ...grpc.CallOption) (*messages.RecipePrepTask, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipePrepTask)
	err := c.cc.Invoke(ctx, EatingService_GetRecipePrepTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetRecipePrepTasks(ctx context.Context, in *messages.GetRecipePrepTasksRequest, opts ...grpc.CallOption) (*messages.RecipePrepTask, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipePrepTask)
	err := c.cc.Invoke(ctx, EatingService_GetRecipePrepTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetRecipeRating(ctx context.Context, in *messages.GetRecipeRatingRequest, opts ...grpc.CallOption) (*messages.RecipeRating, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeRating)
	err := c.cc.Invoke(ctx, EatingService_GetRecipeRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetRecipeRatingsForRecipe(ctx context.Context, in *messages.GetRecipeRatingsForRecipeRequest, opts ...grpc.CallOption) (*messages.RecipeRating, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeRating)
	err := c.cc.Invoke(ctx, EatingService_GetRecipeRatingsForRecipe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetRecipeStep(ctx context.Context, in *messages.GetRecipeStepRequest, opts ...grpc.CallOption) (*messages.RecipeStep, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStep)
	err := c.cc.Invoke(ctx, EatingService_GetRecipeStep_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetRecipeStepCompletionCondition(ctx context.Context, in *messages.GetRecipeStepCompletionConditionRequest, opts ...grpc.CallOption) (*messages.RecipeStepCompletionCondition, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStepCompletionCondition)
	err := c.cc.Invoke(ctx, EatingService_GetRecipeStepCompletionCondition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetRecipeStepCompletionConditions(ctx context.Context, in *messages.GetRecipeStepCompletionConditionsRequest, opts ...grpc.CallOption) (*messages.RecipeStepCompletionCondition, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStepCompletionCondition)
	err := c.cc.Invoke(ctx, EatingService_GetRecipeStepCompletionConditions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetRecipeStepIngredient(ctx context.Context, in *messages.GetRecipeStepIngredientRequest, opts ...grpc.CallOption) (*messages.RecipeStepIngredient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStepIngredient)
	err := c.cc.Invoke(ctx, EatingService_GetRecipeStepIngredient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetRecipeStepIngredients(ctx context.Context, in *messages.GetRecipeStepIngredientsRequest, opts ...grpc.CallOption) (*messages.RecipeStepIngredient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStepIngredient)
	err := c.cc.Invoke(ctx, EatingService_GetRecipeStepIngredients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetRecipeStepInstrument(ctx context.Context, in *messages.GetRecipeStepInstrumentRequest, opts ...grpc.CallOption) (*messages.RecipeStepInstrument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStepInstrument)
	err := c.cc.Invoke(ctx, EatingService_GetRecipeStepInstrument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetRecipeStepInstruments(ctx context.Context, in *messages.GetRecipeStepInstrumentsRequest, opts ...grpc.CallOption) (*messages.RecipeStepInstrument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStepInstrument)
	err := c.cc.Invoke(ctx, EatingService_GetRecipeStepInstruments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetRecipeStepProduct(ctx context.Context, in *messages.GetRecipeStepProductRequest, opts ...grpc.CallOption) (*messages.RecipeStepProduct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStepProduct)
	err := c.cc.Invoke(ctx, EatingService_GetRecipeStepProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetRecipeStepProducts(ctx context.Context, in *messages.GetRecipeStepProductsRequest, opts ...grpc.CallOption) (*messages.RecipeStepProduct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStepProduct)
	err := c.cc.Invoke(ctx, EatingService_GetRecipeStepProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetRecipeStepVessel(ctx context.Context, in *messages.GetRecipeStepVesselRequest, opts ...grpc.CallOption) (*messages.RecipeStepVessel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStepVessel)
	err := c.cc.Invoke(ctx, EatingService_GetRecipeStepVessel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetRecipeStepVessels(ctx context.Context, in *messages.GetRecipeStepVesselsRequest, opts ...grpc.CallOption) (*messages.RecipeStepVessel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStepVessel)
	err := c.cc.Invoke(ctx, EatingService_GetRecipeStepVessels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetRecipeSteps(ctx context.Context, in *messages.GetRecipeStepsRequest, opts ...grpc.CallOption) (*messages.RecipeStep, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStep)
	err := c.cc.Invoke(ctx, EatingService_GetRecipeSteps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetRecipes(ctx context.Context, in *messages.GetRecipesRequest, opts ...grpc.CallOption) (*messages.Recipe, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.Recipe)
	err := c.cc.Invoke(ctx, EatingService_GetRecipes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetSelf(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*messages.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.User)
	err := c.cc.Invoke(ctx, EatingService_GetSelf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetSentHouseholdInvitations(ctx context.Context, in *messages.GetSentHouseholdInvitationsRequest, opts ...grpc.CallOption) (*messages.HouseholdInvitation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.HouseholdInvitation)
	err := c.cc.Invoke(ctx, EatingService_GetSentHouseholdInvitations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetServiceSetting(ctx context.Context, in *messages.GetServiceSettingRequest, opts ...grpc.CallOption) (*messages.ServiceSetting, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ServiceSetting)
	err := c.cc.Invoke(ctx, EatingService_GetServiceSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetServiceSettingConfigurationByName(ctx context.Context, in *messages.GetServiceSettingConfigurationByNameRequest, opts ...grpc.CallOption) (*messages.ServiceSettingConfiguration, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ServiceSettingConfiguration)
	err := c.cc.Invoke(ctx, EatingService_GetServiceSettingConfigurationByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetServiceSettingConfigurationsForHousehold(ctx context.Context, in *messages.GetServiceSettingConfigurationsForHouseholdRequest, opts ...grpc.CallOption) (*messages.ServiceSettingConfiguration, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ServiceSettingConfiguration)
	err := c.cc.Invoke(ctx, EatingService_GetServiceSettingConfigurationsForHousehold_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetServiceSettingConfigurationsForUser(ctx context.Context, in *messages.GetServiceSettingConfigurationsForUserRequest, opts ...grpc.CallOption) (*messages.ServiceSettingConfiguration, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ServiceSettingConfiguration)
	err := c.cc.Invoke(ctx, EatingService_GetServiceSettingConfigurationsForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetServiceSettings(ctx context.Context, in *messages.GetServiceSettingsRequest, opts ...grpc.CallOption) (*messages.ServiceSetting, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ServiceSetting)
	err := c.cc.Invoke(ctx, EatingService_GetServiceSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetUser(ctx context.Context, in *messages.GetUserRequest, opts ...grpc.CallOption) (*messages.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.User)
	err := c.cc.Invoke(ctx, EatingService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetUserIngredientPreferences(ctx context.Context, in *messages.GetUserIngredientPreferencesRequest, opts ...grpc.CallOption) (*messages.UserIngredientPreference, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.UserIngredientPreference)
	err := c.cc.Invoke(ctx, EatingService_GetUserIngredientPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetUserNotification(ctx context.Context, in *messages.GetUserNotificationRequest, opts ...grpc.CallOption) (*messages.UserNotification, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.UserNotification)
	err := c.cc.Invoke(ctx, EatingService_GetUserNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetUserNotifications(ctx context.Context, in *messages.GetUserNotificationsRequest, opts ...grpc.CallOption) (*messages.UserNotification, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.UserNotification)
	err := c.cc.Invoke(ctx, EatingService_GetUserNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetUsers(ctx context.Context, in *messages.GetUsersRequest, opts ...grpc.CallOption) (*messages.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.User)
	err := c.cc.Invoke(ctx, EatingService_GetUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidIngredient(ctx context.Context, in *messages.GetValidIngredientRequest, opts ...grpc.CallOption) (*messages.ValidIngredient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredient)
	err := c.cc.Invoke(ctx, EatingService_GetValidIngredient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidIngredientGroup(ctx context.Context, in *messages.GetValidIngredientGroupRequest, opts ...grpc.CallOption) (*messages.ValidIngredientGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientGroup)
	err := c.cc.Invoke(ctx, EatingService_GetValidIngredientGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidIngredientGroups(ctx context.Context, in *messages.GetValidIngredientGroupsRequest, opts ...grpc.CallOption) (*messages.ValidIngredientGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientGroup)
	err := c.cc.Invoke(ctx, EatingService_GetValidIngredientGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidIngredientMeasurementUnit(ctx context.Context, in *messages.GetValidIngredientMeasurementUnitRequest, opts ...grpc.CallOption) (*messages.ValidIngredientMeasurementUnit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientMeasurementUnit)
	err := c.cc.Invoke(ctx, EatingService_GetValidIngredientMeasurementUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidIngredientMeasurementUnits(ctx context.Context, in *messages.GetValidIngredientMeasurementUnitsRequest, opts ...grpc.CallOption) (*messages.ValidIngredientMeasurementUnit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientMeasurementUnit)
	err := c.cc.Invoke(ctx, EatingService_GetValidIngredientMeasurementUnits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidIngredientMeasurementUnitsByIngredient(ctx context.Context, in *messages.GetValidIngredientMeasurementUnitsByIngredientRequest, opts ...grpc.CallOption) (*messages.ValidIngredientMeasurementUnit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientMeasurementUnit)
	err := c.cc.Invoke(ctx, EatingService_GetValidIngredientMeasurementUnitsByIngredient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidIngredientMeasurementUnitsByMeasurementUnit(ctx context.Context, in *messages.GetValidIngredientMeasurementUnitsByMeasurementUnitRequest, opts ...grpc.CallOption) (*messages.ValidIngredientMeasurementUnit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientMeasurementUnit)
	err := c.cc.Invoke(ctx, EatingService_GetValidIngredientMeasurementUnitsByMeasurementUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidIngredientPreparation(ctx context.Context, in *messages.GetValidIngredientPreparationRequest, opts ...grpc.CallOption) (*messages.ValidIngredientPreparation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientPreparation)
	err := c.cc.Invoke(ctx, EatingService_GetValidIngredientPreparation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidIngredientPreparations(ctx context.Context, in *messages.GetValidIngredientPreparationsRequest, opts ...grpc.CallOption) (*messages.ValidIngredientPreparation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientPreparation)
	err := c.cc.Invoke(ctx, EatingService_GetValidIngredientPreparations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidIngredientPreparationsByIngredient(ctx context.Context, in *messages.GetValidIngredientPreparationsByIngredientRequest, opts ...grpc.CallOption) (*messages.ValidIngredientPreparation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientPreparation)
	err := c.cc.Invoke(ctx, EatingService_GetValidIngredientPreparationsByIngredient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidIngredientPreparationsByPreparation(ctx context.Context, in *messages.GetValidIngredientPreparationsByPreparationRequest, opts ...grpc.CallOption) (*messages.ValidIngredientPreparation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientPreparation)
	err := c.cc.Invoke(ctx, EatingService_GetValidIngredientPreparationsByPreparation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidIngredientState(ctx context.Context, in *messages.GetValidIngredientStateRequest, opts ...grpc.CallOption) (*messages.ValidIngredientState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientState)
	err := c.cc.Invoke(ctx, EatingService_GetValidIngredientState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidIngredientStateIngredient(ctx context.Context, in *messages.GetValidIngredientStateIngredientRequest, opts ...grpc.CallOption) (*messages.ValidIngredientStateIngredient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientStateIngredient)
	err := c.cc.Invoke(ctx, EatingService_GetValidIngredientStateIngredient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidIngredientStateIngredients(ctx context.Context, in *messages.GetValidIngredientStateIngredientsRequest, opts ...grpc.CallOption) (*messages.ValidIngredientStateIngredient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientStateIngredient)
	err := c.cc.Invoke(ctx, EatingService_GetValidIngredientStateIngredients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidIngredientStateIngredientsByIngredient(ctx context.Context, in *messages.GetValidIngredientStateIngredientsByIngredientRequest, opts ...grpc.CallOption) (*messages.ValidIngredientStateIngredient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientStateIngredient)
	err := c.cc.Invoke(ctx, EatingService_GetValidIngredientStateIngredientsByIngredient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidIngredientStateIngredientsByIngredientState(ctx context.Context, in *messages.GetValidIngredientStateIngredientsByIngredientStateRequest, opts ...grpc.CallOption) (*messages.ValidIngredientStateIngredient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientStateIngredient)
	err := c.cc.Invoke(ctx, EatingService_GetValidIngredientStateIngredientsByIngredientState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidIngredientStates(ctx context.Context, in *messages.GetValidIngredientStatesRequest, opts ...grpc.CallOption) (*messages.ValidIngredientState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientState)
	err := c.cc.Invoke(ctx, EatingService_GetValidIngredientStates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidIngredients(ctx context.Context, in *messages.GetValidIngredientsRequest, opts ...grpc.CallOption) (*messages.ValidIngredient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredient)
	err := c.cc.Invoke(ctx, EatingService_GetValidIngredients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidInstrument(ctx context.Context, in *messages.GetValidInstrumentRequest, opts ...grpc.CallOption) (*messages.ValidInstrument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidInstrument)
	err := c.cc.Invoke(ctx, EatingService_GetValidInstrument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidInstruments(ctx context.Context, in *messages.GetValidInstrumentsRequest, opts ...grpc.CallOption) (*messages.ValidInstrument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidInstrument)
	err := c.cc.Invoke(ctx, EatingService_GetValidInstruments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidMeasurementUnit(ctx context.Context, in *messages.GetValidMeasurementUnitRequest, opts ...grpc.CallOption) (*messages.ValidMeasurementUnit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidMeasurementUnit)
	err := c.cc.Invoke(ctx, EatingService_GetValidMeasurementUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidMeasurementUnitConversion(ctx context.Context, in *messages.GetValidMeasurementUnitConversionRequest, opts ...grpc.CallOption) (*messages.ValidMeasurementUnitConversion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidMeasurementUnitConversion)
	err := c.cc.Invoke(ctx, EatingService_GetValidMeasurementUnitConversion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidMeasurementUnitConversionsFromUnit(ctx context.Context, in *messages.GetValidMeasurementUnitConversionsFromUnitRequest, opts ...grpc.CallOption) (*messages.ValidMeasurementUnitConversion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidMeasurementUnitConversion)
	err := c.cc.Invoke(ctx, EatingService_GetValidMeasurementUnitConversionsFromUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidMeasurementUnitConversionsToUnit(ctx context.Context, in *messages.GetValidMeasurementUnitConversionsToUnitRequest, opts ...grpc.CallOption) (*messages.ValidMeasurementUnitConversion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidMeasurementUnitConversion)
	err := c.cc.Invoke(ctx, EatingService_GetValidMeasurementUnitConversionsToUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidMeasurementUnits(ctx context.Context, in *messages.GetValidMeasurementUnitsRequest, opts ...grpc.CallOption) (*messages.ValidMeasurementUnit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidMeasurementUnit)
	err := c.cc.Invoke(ctx, EatingService_GetValidMeasurementUnits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidPreparation(ctx context.Context, in *messages.GetValidPreparationRequest, opts ...grpc.CallOption) (*messages.ValidPreparation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidPreparation)
	err := c.cc.Invoke(ctx, EatingService_GetValidPreparation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidPreparationInstrument(ctx context.Context, in *messages.GetValidPreparationInstrumentRequest, opts ...grpc.CallOption) (*messages.ValidPreparationInstrument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidPreparationInstrument)
	err := c.cc.Invoke(ctx, EatingService_GetValidPreparationInstrument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidPreparationInstruments(ctx context.Context, in *messages.GetValidPreparationInstrumentsRequest, opts ...grpc.CallOption) (*messages.ValidPreparationInstrument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidPreparationInstrument)
	err := c.cc.Invoke(ctx, EatingService_GetValidPreparationInstruments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidPreparationInstrumentsByInstrument(ctx context.Context, in *messages.GetValidPreparationInstrumentsByInstrumentRequest, opts ...grpc.CallOption) (*messages.ValidPreparationInstrument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidPreparationInstrument)
	err := c.cc.Invoke(ctx, EatingService_GetValidPreparationInstrumentsByInstrument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidPreparationInstrumentsByPreparation(ctx context.Context, in *messages.GetValidPreparationInstrumentsByPreparationRequest, opts ...grpc.CallOption) (*messages.ValidPreparationInstrument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidPreparationInstrument)
	err := c.cc.Invoke(ctx, EatingService_GetValidPreparationInstrumentsByPreparation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidPreparationVessel(ctx context.Context, in *messages.GetValidPreparationVesselRequest, opts ...grpc.CallOption) (*messages.ValidPreparationVessel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidPreparationVessel)
	err := c.cc.Invoke(ctx, EatingService_GetValidPreparationVessel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidPreparationVessels(ctx context.Context, in *messages.GetValidPreparationVesselsRequest, opts ...grpc.CallOption) (*messages.ValidPreparationVessel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidPreparationVessel)
	err := c.cc.Invoke(ctx, EatingService_GetValidPreparationVessels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidPreparationVesselsByPreparation(ctx context.Context, in *messages.GetValidPreparationVesselsByPreparationRequest, opts ...grpc.CallOption) (*messages.ValidPreparationVessel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidPreparationVessel)
	err := c.cc.Invoke(ctx, EatingService_GetValidPreparationVesselsByPreparation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidPreparationVesselsByVessel(ctx context.Context, in *messages.GetValidPreparationVesselsByVesselRequest, opts ...grpc.CallOption) (*messages.ValidPreparationVessel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidPreparationVessel)
	err := c.cc.Invoke(ctx, EatingService_GetValidPreparationVesselsByVessel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidPreparations(ctx context.Context, in *messages.GetValidPreparationsRequest, opts ...grpc.CallOption) (*messages.ValidPreparation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidPreparation)
	err := c.cc.Invoke(ctx, EatingService_GetValidPreparations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidVessel(ctx context.Context, in *messages.GetValidVesselRequest, opts ...grpc.CallOption) (*messages.ValidVessel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidVessel)
	err := c.cc.Invoke(ctx, EatingService_GetValidVessel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetValidVessels(ctx context.Context, in *messages.GetValidVesselsRequest, opts ...grpc.CallOption) (*messages.ValidVessel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidVessel)
	err := c.cc.Invoke(ctx, EatingService_GetValidVessels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetWebhook(ctx context.Context, in *messages.GetWebhookRequest, opts ...grpc.CallOption) (*messages.Webhook, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.Webhook)
	err := c.cc.Invoke(ctx, EatingService_GetWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) GetWebhooks(ctx context.Context, in *messages.GetWebhooksRequest, opts ...grpc.CallOption) (*messages.Webhook, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.Webhook)
	err := c.cc.Invoke(ctx, EatingService_GetWebhooks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) LoginForToken(ctx context.Context, in *messages.UserLoginInput, opts ...grpc.CallOption) (*messages.TokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.TokenResponse)
	err := c.cc.Invoke(ctx, EatingService_LoginForToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) PublishArbitraryQueueMessage(ctx context.Context, in *messages.ArbitraryQueueMessageRequestInput, opts ...grpc.CallOption) (*messages.ArbitraryQueueMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ArbitraryQueueMessageResponse)
	err := c.cc.Invoke(ctx, EatingService_PublishArbitraryQueueMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) RedeemPasswordResetToken(ctx context.Context, in *messages.PasswordResetTokenRedemptionRequestInput, opts ...grpc.CallOption) (*messages.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.User)
	err := c.cc.Invoke(ctx, EatingService_RedeemPasswordResetToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) RefreshTOTPSecret(ctx context.Context, in *messages.TOTPSecretRefreshInput, opts ...grpc.CallOption) (*messages.TOTPSecretRefreshResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.TOTPSecretRefreshResponse)
	err := c.cc.Invoke(ctx, EatingService_RefreshTOTPSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) RejectHouseholdInvitation(ctx context.Context, in *messages.RejectHouseholdInvitationRequest, opts ...grpc.CallOption) (*messages.HouseholdInvitation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.HouseholdInvitation)
	err := c.cc.Invoke(ctx, EatingService_RejectHouseholdInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) RequestEmailVerificationEmail(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*messages.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.User)
	err := c.cc.Invoke(ctx, EatingService_RequestEmailVerificationEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) RequestPasswordResetToken(ctx context.Context, in *messages.PasswordResetTokenCreationRequestInput, opts ...grpc.CallOption) (*messages.PasswordResetToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.PasswordResetToken)
	err := c.cc.Invoke(ctx, EatingService_RequestPasswordResetToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) RequestUsernameReminder(ctx context.Context, in *messages.UsernameReminderRequestInput, opts ...grpc.CallOption) (*messages.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.User)
	err := c.cc.Invoke(ctx, EatingService_RequestUsernameReminder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) RunFinalizeMealPlanWorker(ctx context.Context, in *messages.FinalizeMealPlansRequest, opts ...grpc.CallOption) (*messages.FinalizeMealPlansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.FinalizeMealPlansResponse)
	err := c.cc.Invoke(ctx, EatingService_RunFinalizeMealPlanWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) RunMealPlanGroceryListInitializerWorker(ctx context.Context, in *messages.InitializeMealPlanGroceryListRequest, opts ...grpc.CallOption) (*messages.InitializeMealPlanGroceryListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.InitializeMealPlanGroceryListResponse)
	err := c.cc.Invoke(ctx, EatingService_RunMealPlanGroceryListInitializerWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) RunMealPlanTaskCreatorWorker(ctx context.Context, in *messages.CreateMealPlanTasksRequest, opts ...grpc.CallOption) (*messages.CreateMealPlanTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.CreateMealPlanTasksResponse)
	err := c.cc.Invoke(ctx, EatingService_RunMealPlanTaskCreatorWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) SearchForMeals(ctx context.Context, in *messages.SearchForMealsRequest, opts ...grpc.CallOption) (*messages.Meal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.Meal)
	err := c.cc.Invoke(ctx, EatingService_SearchForMeals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) SearchForRecipes(ctx context.Context, in *messages.SearchForRecipesRequest, opts ...grpc.CallOption) (*messages.Recipe, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.Recipe)
	err := c.cc.Invoke(ctx, EatingService_SearchForRecipes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) SearchForServiceSettings(ctx context.Context, in *messages.SearchForServiceSettingsRequest, opts ...grpc.CallOption) (*messages.ServiceSetting, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ServiceSetting)
	err := c.cc.Invoke(ctx, EatingService_SearchForServiceSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) SearchForUsers(ctx context.Context, in *messages.SearchForUsersRequest, opts ...grpc.CallOption) (*messages.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.User)
	err := c.cc.Invoke(ctx, EatingService_SearchForUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) SearchForValidIngredientGroups(ctx context.Context, in *messages.SearchForValidIngredientGroupsRequest, opts ...grpc.CallOption) (*messages.ValidIngredientGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientGroup)
	err := c.cc.Invoke(ctx, EatingService_SearchForValidIngredientGroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) SearchForValidIngredientStates(ctx context.Context, in *messages.SearchForValidIngredientStatesRequest, opts ...grpc.CallOption) (*messages.ValidIngredientState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientState)
	err := c.cc.Invoke(ctx, EatingService_SearchForValidIngredientStates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) SearchForValidIngredients(ctx context.Context, in *messages.SearchForValidIngredientsRequest, opts ...grpc.CallOption) (*messages.ValidIngredient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredient)
	err := c.cc.Invoke(ctx, EatingService_SearchForValidIngredients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) SearchForValidInstruments(ctx context.Context, in *messages.SearchForValidInstrumentsRequest, opts ...grpc.CallOption) (*messages.ValidInstrument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidInstrument)
	err := c.cc.Invoke(ctx, EatingService_SearchForValidInstruments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) SearchForValidMeasurementUnits(ctx context.Context, in *messages.SearchForValidMeasurementUnitsRequest, opts ...grpc.CallOption) (*messages.ValidMeasurementUnit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidMeasurementUnit)
	err := c.cc.Invoke(ctx, EatingService_SearchForValidMeasurementUnits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) SearchForValidPreparations(ctx context.Context, in *messages.SearchForValidPreparationsRequest, opts ...grpc.CallOption) (*messages.ValidPreparation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidPreparation)
	err := c.cc.Invoke(ctx, EatingService_SearchForValidPreparations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) SearchForValidVessels(ctx context.Context, in *messages.SearchForValidVesselsRequest, opts ...grpc.CallOption) (*messages.ValidVessel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidVessel)
	err := c.cc.Invoke(ctx, EatingService_SearchForValidVessels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) SearchValidIngredientsByPreparation(ctx context.Context, in *messages.SearchValidIngredientsByPreparationRequest, opts ...grpc.CallOption) (*messages.ValidIngredient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredient)
	err := c.cc.Invoke(ctx, EatingService_SearchValidIngredientsByPreparation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) SearchValidMeasurementUnitsByIngredient(ctx context.Context, in *messages.SearchValidMeasurementUnitsByIngredientRequest, opts ...grpc.CallOption) (*messages.ValidMeasurementUnit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidMeasurementUnit)
	err := c.cc.Invoke(ctx, EatingService_SearchValidMeasurementUnitsByIngredient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) SetDefaultHousehold(ctx context.Context, in *messages.SetDefaultHouseholdRequest, opts ...grpc.CallOption) (*messages.Household, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.Household)
	err := c.cc.Invoke(ctx, EatingService_SetDefaultHousehold_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) TransferHouseholdOwnership(ctx context.Context, in *messages.TransferHouseholdOwnershipRequest, opts ...grpc.CallOption) (*messages.Household, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.Household)
	err := c.cc.Invoke(ctx, EatingService_TransferHouseholdOwnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateHousehold(ctx context.Context, in *messages.UpdateHouseholdRequest, opts ...grpc.CallOption) (*messages.Household, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.Household)
	err := c.cc.Invoke(ctx, EatingService_UpdateHousehold_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateHouseholdInstrumentOwnership(ctx context.Context, in *messages.UpdateHouseholdInstrumentOwnershipRequest, opts ...grpc.CallOption) (*messages.HouseholdInstrumentOwnership, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.HouseholdInstrumentOwnership)
	err := c.cc.Invoke(ctx, EatingService_UpdateHouseholdInstrumentOwnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateHouseholdMemberPermissions(ctx context.Context, in *messages.UpdateHouseholdMemberPermissionsRequest, opts ...grpc.CallOption) (*messages.UserPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.UserPermissionsResponse)
	err := c.cc.Invoke(ctx, EatingService_UpdateHouseholdMemberPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateMealPlan(ctx context.Context, in *messages.UpdateMealPlanRequest, opts ...grpc.CallOption) (*messages.MealPlan, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlan)
	err := c.cc.Invoke(ctx, EatingService_UpdateMealPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateMealPlanEvent(ctx context.Context, in *messages.UpdateMealPlanEventRequest, opts ...grpc.CallOption) (*messages.MealPlanEvent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlanEvent)
	err := c.cc.Invoke(ctx, EatingService_UpdateMealPlanEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateMealPlanGroceryListItem(ctx context.Context, in *messages.UpdateMealPlanGroceryListItemRequest, opts ...grpc.CallOption) (*messages.MealPlanGroceryListItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlanGroceryListItem)
	err := c.cc.Invoke(ctx, EatingService_UpdateMealPlanGroceryListItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateMealPlanOption(ctx context.Context, in *messages.UpdateMealPlanOptionRequest, opts ...grpc.CallOption) (*messages.MealPlanOption, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlanOption)
	err := c.cc.Invoke(ctx, EatingService_UpdateMealPlanOption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateMealPlanOptionVote(ctx context.Context, in *messages.UpdateMealPlanOptionVoteRequest, opts ...grpc.CallOption) (*messages.MealPlanOptionVote, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlanOptionVote)
	err := c.cc.Invoke(ctx, EatingService_UpdateMealPlanOptionVote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateMealPlanTaskStatus(ctx context.Context, in *messages.UpdateMealPlanTaskStatusRequest, opts ...grpc.CallOption) (*messages.MealPlanTask, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.MealPlanTask)
	err := c.cc.Invoke(ctx, EatingService_UpdateMealPlanTaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdatePassword(ctx context.Context, in *messages.PasswordUpdateInput, opts ...grpc.CallOption) (*messages.PasswordResetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.PasswordResetResponse)
	err := c.cc.Invoke(ctx, EatingService_UpdatePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateRecipe(ctx context.Context, in *messages.UpdateRecipeRequest, opts ...grpc.CallOption) (*messages.Recipe, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.Recipe)
	err := c.cc.Invoke(ctx, EatingService_UpdateRecipe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateRecipePrepTask(ctx context.Context, in *messages.UpdateRecipePrepTaskRequest, opts ...grpc.CallOption) (*messages.RecipePrepTask, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipePrepTask)
	err := c.cc.Invoke(ctx, EatingService_UpdateRecipePrepTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateRecipeRating(ctx context.Context, in *messages.UpdateRecipeRatingRequest, opts ...grpc.CallOption) (*messages.RecipeRating, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeRating)
	err := c.cc.Invoke(ctx, EatingService_UpdateRecipeRating_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateRecipeStep(ctx context.Context, in *messages.UpdateRecipeStepRequest, opts ...grpc.CallOption) (*messages.RecipeStep, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStep)
	err := c.cc.Invoke(ctx, EatingService_UpdateRecipeStep_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateRecipeStepCompletionCondition(ctx context.Context, in *messages.UpdateRecipeStepCompletionConditionRequest, opts ...grpc.CallOption) (*messages.RecipeStepCompletionCondition, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStepCompletionCondition)
	err := c.cc.Invoke(ctx, EatingService_UpdateRecipeStepCompletionCondition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateRecipeStepIngredient(ctx context.Context, in *messages.UpdateRecipeStepIngredientRequest, opts ...grpc.CallOption) (*messages.RecipeStepIngredient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStepIngredient)
	err := c.cc.Invoke(ctx, EatingService_UpdateRecipeStepIngredient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateRecipeStepInstrument(ctx context.Context, in *messages.UpdateRecipeStepInstrumentRequest, opts ...grpc.CallOption) (*messages.RecipeStepInstrument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStepInstrument)
	err := c.cc.Invoke(ctx, EatingService_UpdateRecipeStepInstrument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateRecipeStepProduct(ctx context.Context, in *messages.UpdateRecipeStepProductRequest, opts ...grpc.CallOption) (*messages.RecipeStepProduct, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStepProduct)
	err := c.cc.Invoke(ctx, EatingService_UpdateRecipeStepProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateRecipeStepVessel(ctx context.Context, in *messages.UpdateRecipeStepVesselRequest, opts ...grpc.CallOption) (*messages.RecipeStepVessel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.RecipeStepVessel)
	err := c.cc.Invoke(ctx, EatingService_UpdateRecipeStepVessel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateServiceSettingConfiguration(ctx context.Context, in *messages.UpdateServiceSettingConfigurationRequest, opts ...grpc.CallOption) (*messages.ServiceSettingConfiguration, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ServiceSettingConfiguration)
	err := c.cc.Invoke(ctx, EatingService_UpdateServiceSettingConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateUserDetails(ctx context.Context, in *messages.UserDetailsUpdateRequestInput, opts ...grpc.CallOption) (*messages.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.User)
	err := c.cc.Invoke(ctx, EatingService_UpdateUserDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateUserEmailAddress(ctx context.Context, in *messages.UserEmailAddressUpdateInput, opts ...grpc.CallOption) (*messages.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.User)
	err := c.cc.Invoke(ctx, EatingService_UpdateUserEmailAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateUserIngredientPreference(ctx context.Context, in *messages.UpdateUserIngredientPreferenceRequest, opts ...grpc.CallOption) (*messages.UserIngredientPreference, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.UserIngredientPreference)
	err := c.cc.Invoke(ctx, EatingService_UpdateUserIngredientPreference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateUserNotification(ctx context.Context, in *messages.UpdateUserNotificationRequest, opts ...grpc.CallOption) (*messages.UserNotification, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.UserNotification)
	err := c.cc.Invoke(ctx, EatingService_UpdateUserNotification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateUserUsername(ctx context.Context, in *messages.UsernameUpdateInput, opts ...grpc.CallOption) (*messages.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.User)
	err := c.cc.Invoke(ctx, EatingService_UpdateUserUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateValidIngredient(ctx context.Context, in *messages.UpdateValidIngredientRequest, opts ...grpc.CallOption) (*messages.ValidIngredient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredient)
	err := c.cc.Invoke(ctx, EatingService_UpdateValidIngredient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateValidIngredientGroup(ctx context.Context, in *messages.UpdateValidIngredientGroupRequest, opts ...grpc.CallOption) (*messages.ValidIngredientGroup, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientGroup)
	err := c.cc.Invoke(ctx, EatingService_UpdateValidIngredientGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateValidIngredientMeasurementUnit(ctx context.Context, in *messages.UpdateValidIngredientMeasurementUnitRequest, opts ...grpc.CallOption) (*messages.ValidIngredientMeasurementUnit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientMeasurementUnit)
	err := c.cc.Invoke(ctx, EatingService_UpdateValidIngredientMeasurementUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateValidIngredientPreparation(ctx context.Context, in *messages.UpdateValidIngredientPreparationRequest, opts ...grpc.CallOption) (*messages.ValidIngredientPreparation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientPreparation)
	err := c.cc.Invoke(ctx, EatingService_UpdateValidIngredientPreparation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateValidIngredientState(ctx context.Context, in *messages.UpdateValidIngredientStateRequest, opts ...grpc.CallOption) (*messages.ValidIngredientState, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientState)
	err := c.cc.Invoke(ctx, EatingService_UpdateValidIngredientState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateValidIngredientStateIngredient(ctx context.Context, in *messages.UpdateValidIngredientStateIngredientRequest, opts ...grpc.CallOption) (*messages.ValidIngredientStateIngredient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidIngredientStateIngredient)
	err := c.cc.Invoke(ctx, EatingService_UpdateValidIngredientStateIngredient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateValidInstrument(ctx context.Context, in *messages.UpdateValidInstrumentRequest, opts ...grpc.CallOption) (*messages.ValidInstrument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidInstrument)
	err := c.cc.Invoke(ctx, EatingService_UpdateValidInstrument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateValidMeasurementUnit(ctx context.Context, in *messages.UpdateValidMeasurementUnitRequest, opts ...grpc.CallOption) (*messages.ValidMeasurementUnit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidMeasurementUnit)
	err := c.cc.Invoke(ctx, EatingService_UpdateValidMeasurementUnit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateValidMeasurementUnitConversion(ctx context.Context, in *messages.UpdateValidMeasurementUnitConversionRequest, opts ...grpc.CallOption) (*messages.ValidMeasurementUnitConversion, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidMeasurementUnitConversion)
	err := c.cc.Invoke(ctx, EatingService_UpdateValidMeasurementUnitConversion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateValidPreparation(ctx context.Context, in *messages.UpdateValidPreparationRequest, opts ...grpc.CallOption) (*messages.ValidPreparation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidPreparation)
	err := c.cc.Invoke(ctx, EatingService_UpdateValidPreparation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateValidPreparationInstrument(ctx context.Context, in *messages.UpdateValidPreparationInstrumentRequest, opts ...grpc.CallOption) (*messages.ValidPreparationInstrument, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidPreparationInstrument)
	err := c.cc.Invoke(ctx, EatingService_UpdateValidPreparationInstrument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateValidPreparationVessel(ctx context.Context, in *messages.UpdateValidPreparationVesselRequest, opts ...grpc.CallOption) (*messages.ValidPreparationVessel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidPreparationVessel)
	err := c.cc.Invoke(ctx, EatingService_UpdateValidPreparationVessel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UpdateValidVessel(ctx context.Context, in *messages.UpdateValidVesselRequest, opts ...grpc.CallOption) (*messages.ValidVessel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ValidVessel)
	err := c.cc.Invoke(ctx, EatingService_UpdateValidVessel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) UploadUserAvatar(ctx context.Context, in *messages.AvatarUpdateInput, opts ...grpc.CallOption) (*messages.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.User)
	err := c.cc.Invoke(ctx, EatingService_UploadUserAvatar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) VerifyEmailAddress(ctx context.Context, in *messages.EmailAddressVerificationRequestInput, opts ...grpc.CallOption) (*messages.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.User)
	err := c.cc.Invoke(ctx, EatingService_VerifyEmailAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eatingServiceClient) VerifyTOTPSecret(ctx context.Context, in *messages.TOTPSecretVerificationInput, opts ...grpc.CallOption) (*messages.User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.User)
	err := c.cc.Invoke(ctx, EatingService_VerifyTOTPSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EatingServiceServer is the server API for EatingService service.
// All implementations must embed UnimplementedEatingServiceServer
// for forward compatibility.
type EatingServiceServer interface {
	AcceptHouseholdInvitation(context.Context, *messages.AcceptHouseholdInvitationRequest) (*messages.HouseholdInvitation, error)
	AdminLoginForToken(context.Context, *messages.UserLoginInput) (*messages.TokenResponse, error)
	AdminUpdateUserStatus(context.Context, *messages.UserAccountStatusUpdateInput) (*messages.UserStatusResponse, error)
	AggregateUserDataReport(context.Context, *emptypb.Empty) (*messages.UserDataCollectionResponse, error)
	ArchiveHousehold(context.Context, *messages.ArchiveHouseholdRequest) (*messages.Household, error)
	ArchiveHouseholdInstrumentOwnership(context.Context, *messages.ArchiveHouseholdInstrumentOwnershipRequest) (*messages.HouseholdInstrumentOwnership, error)
	ArchiveMeal(context.Context, *messages.ArchiveMealRequest) (*messages.Meal, error)
	ArchiveMealPlan(context.Context, *messages.ArchiveMealPlanRequest) (*messages.MealPlan, error)
	ArchiveMealPlanEvent(context.Context, *messages.ArchiveMealPlanEventRequest) (*messages.MealPlanEvent, error)
	ArchiveMealPlanGroceryListItem(context.Context, *messages.ArchiveMealPlanGroceryListItemRequest) (*messages.MealPlanGroceryListItem, error)
	ArchiveMealPlanOption(context.Context, *messages.ArchiveMealPlanOptionRequest) (*messages.MealPlanOption, error)
	ArchiveMealPlanOptionVote(context.Context, *messages.ArchiveMealPlanOptionVoteRequest) (*messages.MealPlanOptionVote, error)
	ArchiveOAuth2Client(context.Context, *messages.ArchiveOAuth2ClientRequest) (*messages.OAuth2Client, error)
	ArchiveRecipe(context.Context, *messages.ArchiveRecipeRequest) (*messages.Recipe, error)
	ArchiveRecipePrepTask(context.Context, *messages.ArchiveRecipePrepTaskRequest) (*messages.RecipePrepTask, error)
	ArchiveRecipeRating(context.Context, *messages.ArchiveRecipeRatingRequest) (*messages.RecipeRating, error)
	ArchiveRecipeStep(context.Context, *messages.ArchiveRecipeStepRequest) (*messages.RecipeStep, error)
	ArchiveRecipeStepCompletionCondition(context.Context, *messages.ArchiveRecipeStepCompletionConditionRequest) (*messages.RecipeStepCompletionCondition, error)
	ArchiveRecipeStepIngredient(context.Context, *messages.ArchiveRecipeStepIngredientRequest) (*messages.RecipeStepIngredient, error)
	ArchiveRecipeStepInstrument(context.Context, *messages.ArchiveRecipeStepInstrumentRequest) (*messages.RecipeStepInstrument, error)
	ArchiveRecipeStepProduct(context.Context, *messages.ArchiveRecipeStepProductRequest) (*messages.RecipeStepProduct, error)
	ArchiveRecipeStepVessel(context.Context, *messages.ArchiveRecipeStepVesselRequest) (*messages.RecipeStepVessel, error)
	ArchiveServiceSetting(context.Context, *messages.ArchiveServiceSettingRequest) (*messages.ServiceSetting, error)
	ArchiveServiceSettingConfiguration(context.Context, *messages.ArchiveServiceSettingConfigurationRequest) (*messages.ServiceSettingConfiguration, error)
	ArchiveUser(context.Context, *messages.ArchiveUserRequest) (*messages.User, error)
	ArchiveUserIngredientPreference(context.Context, *messages.ArchiveUserIngredientPreferenceRequest) (*messages.UserIngredientPreference, error)
	ArchiveUserMembership(context.Context, *messages.ArchiveUserMembershipRequest) (*messages.HouseholdUserMembership, error)
	ArchiveValidIngredient(context.Context, *messages.ArchiveValidIngredientRequest) (*messages.ValidIngredient, error)
	ArchiveValidIngredientGroup(context.Context, *messages.ArchiveValidIngredientGroupRequest) (*messages.ValidIngredientGroup, error)
	ArchiveValidIngredientMeasurementUnit(context.Context, *messages.ArchiveValidIngredientMeasurementUnitRequest) (*messages.ValidIngredientMeasurementUnit, error)
	ArchiveValidIngredientPreparation(context.Context, *messages.ArchiveValidIngredientPreparationRequest) (*messages.ValidIngredientPreparation, error)
	ArchiveValidIngredientState(context.Context, *messages.ArchiveValidIngredientStateRequest) (*messages.ValidIngredientState, error)
	ArchiveValidIngredientStateIngredient(context.Context, *messages.ArchiveValidIngredientStateIngredientRequest) (*messages.ValidIngredientStateIngredient, error)
	ArchiveValidInstrument(context.Context, *messages.ArchiveValidInstrumentRequest) (*messages.ValidInstrument, error)
	ArchiveValidMeasurementUnit(context.Context, *messages.ArchiveValidMeasurementUnitRequest) (*messages.ValidMeasurementUnit, error)
	ArchiveValidMeasurementUnitConversion(context.Context, *messages.ArchiveValidMeasurementUnitConversionRequest) (*messages.ValidMeasurementUnitConversion, error)
	ArchiveValidPreparation(context.Context, *messages.ArchiveValidPreparationRequest) (*messages.ValidPreparation, error)
	ArchiveValidPreparationInstrument(context.Context, *messages.ArchiveValidPreparationInstrumentRequest) (*messages.ValidPreparationInstrument, error)
	ArchiveValidPreparationVessel(context.Context, *messages.ArchiveValidPreparationVesselRequest) (*messages.ValidPreparationVessel, error)
	ArchiveValidVessel(context.Context, *messages.ArchiveValidVesselRequest) (*messages.ValidVessel, error)
	ArchiveWebhook(context.Context, *messages.ArchiveWebhookRequest) (*messages.Webhook, error)
	ArchiveWebhookTriggerEvent(context.Context, *messages.ArchiveWebhookTriggerEventRequest) (*messages.WebhookTriggerEvent, error)
	CancelHouseholdInvitation(context.Context, *messages.CancelHouseholdInvitationRequest) (*messages.HouseholdInvitation, error)
	CheckForReadiness(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	CheckPermissions(context.Context, *messages.UserPermissionsRequestInput) (*messages.UserPermissionsResponse, error)
	CloneRecipe(context.Context, *messages.CloneRecipeRequest) (*messages.Recipe, error)
	CreateHousehold(context.Context, *messages.HouseholdCreationRequestInput) (*messages.Household, error)
	CreateHouseholdInstrumentOwnership(context.Context, *messages.HouseholdInstrumentOwnershipCreationRequestInput) (*messages.HouseholdInstrumentOwnership, error)
	CreateHouseholdInvitation(context.Context, *messages.CreateHouseholdInvitationRequest) (*messages.HouseholdInvitation, error)
	CreateMeal(context.Context, *messages.MealCreationRequestInput) (*messages.Meal, error)
	CreateMealPlan(context.Context, *messages.MealPlanCreationRequestInput) (*messages.MealPlan, error)
	CreateMealPlanEvent(context.Context, *messages.CreateMealPlanEventRequest) (*messages.MealPlanEvent, error)
	CreateMealPlanGroceryListItem(context.Context, *messages.CreateMealPlanGroceryListItemRequest) (*messages.MealPlanGroceryListItem, error)
	CreateMealPlanOption(context.Context, *messages.CreateMealPlanOptionRequest) (*messages.MealPlanOption, error)
	CreateMealPlanOptionVote(context.Context, *messages.CreateMealPlanOptionVoteRequest) (*messages.MealPlanOptionVote, error)
	CreateMealPlanTask(context.Context, *messages.CreateMealPlanTaskRequest) (*messages.MealPlanTask, error)
	CreateOAuth2Client(context.Context, *messages.OAuth2ClientCreationRequestInput) (*messages.OAuth2ClientCreationResponse, error)
	CreateRecipe(context.Context, *messages.RecipeCreationRequestInput) (*messages.Recipe, error)
	CreateRecipePrepTask(context.Context, *messages.CreateRecipePrepTaskRequest) (*messages.RecipePrepTask, error)
	CreateRecipeRating(context.Context, *messages.CreateRecipeRatingRequest) (*messages.RecipeRating, error)
	CreateRecipeStep(context.Context, *messages.CreateRecipeStepRequest) (*messages.RecipeStep, error)
	CreateRecipeStepCompletionCondition(context.Context, *messages.CreateRecipeStepCompletionConditionRequest) (*messages.RecipeStepCompletionCondition, error)
	CreateRecipeStepIngredient(context.Context, *messages.CreateRecipeStepIngredientRequest) (*messages.RecipeStepIngredient, error)
	CreateRecipeStepInstrument(context.Context, *messages.CreateRecipeStepInstrumentRequest) (*messages.RecipeStepInstrument, error)
	CreateRecipeStepProduct(context.Context, *messages.CreateRecipeStepProductRequest) (*messages.RecipeStepProduct, error)
	CreateRecipeStepVessel(context.Context, *messages.CreateRecipeStepVesselRequest) (*messages.RecipeStepVessel, error)
	CreateServiceSetting(context.Context, *messages.ServiceSettingCreationRequestInput) (*messages.ServiceSetting, error)
	CreateServiceSettingConfiguration(context.Context, *messages.ServiceSettingConfigurationCreationRequestInput) (*messages.ServiceSettingConfiguration, error)
	CreateUser(context.Context, *messages.UserRegistrationInput) (*messages.UserCreationResponse, error)
	CreateUserIngredientPreference(context.Context, *messages.UserIngredientPreferenceCreationRequestInput) (*messages.UserIngredientPreference, error)
	CreateUserNotification(context.Context, *messages.UserNotificationCreationRequestInput) (*messages.UserNotification, error)
	CreateValidIngredient(context.Context, *messages.ValidIngredientCreationRequestInput) (*messages.ValidIngredient, error)
	CreateValidIngredientGroup(context.Context, *messages.ValidIngredientGroupCreationRequestInput) (*messages.ValidIngredientGroup, error)
	CreateValidIngredientMeasurementUnit(context.Context, *messages.ValidIngredientMeasurementUnitCreationRequestInput) (*messages.ValidIngredientMeasurementUnit, error)
	CreateValidIngredientPreparation(context.Context, *messages.ValidIngredientPreparationCreationRequestInput) (*messages.ValidIngredientPreparation, error)
	CreateValidIngredientState(context.Context, *messages.ValidIngredientStateCreationRequestInput) (*messages.ValidIngredientState, error)
	CreateValidIngredientStateIngredient(context.Context, *messages.ValidIngredientStateIngredientCreationRequestInput) (*messages.ValidIngredientStateIngredient, error)
	CreateValidInstrument(context.Context, *messages.ValidInstrumentCreationRequestInput) (*messages.ValidInstrument, error)
	CreateValidMeasurementUnit(context.Context, *messages.ValidMeasurementUnitCreationRequestInput) (*messages.ValidMeasurementUnit, error)
	CreateValidMeasurementUnitConversion(context.Context, *messages.ValidMeasurementUnitConversionCreationRequestInput) (*messages.ValidMeasurementUnitConversion, error)
	CreateValidPreparation(context.Context, *messages.ValidPreparationCreationRequestInput) (*messages.ValidPreparation, error)
	CreateValidPreparationInstrument(context.Context, *messages.ValidPreparationInstrumentCreationRequestInput) (*messages.ValidPreparationInstrument, error)
	CreateValidPreparationVessel(context.Context, *messages.ValidPreparationVesselCreationRequestInput) (*messages.ValidPreparationVessel, error)
	CreateValidVessel(context.Context, *messages.ValidVesselCreationRequestInput) (*messages.ValidVessel, error)
	CreateWebhook(context.Context, *messages.WebhookCreationRequestInput) (*messages.Webhook, error)
	CreateWebhookTriggerEvent(context.Context, *messages.CreateWebhookTriggerEventRequest) (*messages.WebhookTriggerEvent, error)
	DestroyAllUserData(context.Context, *emptypb.Empty) (*messages.DataDeletionResponse, error)
	FetchUserDataReport(context.Context, *messages.FetchUserDataReportRequest) (*messages.UserDataCollection, error)
	FinalizeMealPlan(context.Context, *messages.FinalizeMealPlanRequest) (*messages.FinalizeMealPlansResponse, error)
	GetActiveHousehold(context.Context, *emptypb.Empty) (*messages.Household, error)
	GetAuditLogEntriesForHousehold(context.Context, *messages.GetAuditLogEntriesForHouseholdRequest) (*messages.AuditLogEntry, error)
	GetAuditLogEntriesForUser(context.Context, *messages.GetAuditLogEntriesForUserRequest) (*messages.AuditLogEntry, error)
	GetAuditLogEntryByID(context.Context, *messages.GetAuditLogEntryByIDRequest) (*messages.AuditLogEntry, error)
	GetAuthStatus(context.Context, *emptypb.Empty) (*messages.UserStatusResponse, error)
	GetHousehold(context.Context, *messages.GetHouseholdRequest) (*messages.Household, error)
	GetHouseholdInstrumentOwnership(context.Context, *messages.GetHouseholdInstrumentOwnershipRequest) (*messages.HouseholdInstrumentOwnership, error)
	GetHouseholdInstrumentOwnerships(context.Context, *messages.GetHouseholdInstrumentOwnershipsRequest) (*messages.HouseholdInstrumentOwnership, error)
	GetHouseholdInvitation(context.Context, *messages.GetHouseholdInvitationRequest) (*messages.HouseholdInvitation, error)
	GetHouseholdInvitationByID(context.Context, *messages.GetHouseholdInvitationByIDRequest) (*messages.HouseholdInvitation, error)
	GetHouseholds(context.Context, *messages.GetHouseholdsRequest) (*messages.Household, error)
	GetMeal(context.Context, *messages.GetMealRequest) (*messages.Meal, error)
	GetMealPlan(context.Context, *messages.GetMealPlanRequest) (*messages.MealPlan, error)
	GetMealPlanEvent(context.Context, *messages.GetMealPlanEventRequest) (*messages.MealPlanEvent, error)
	GetMealPlanEvents(context.Context, *messages.GetMealPlanEventsRequest) (*messages.MealPlanEvent, error)
	GetMealPlanGroceryListItem(context.Context, *messages.GetMealPlanGroceryListItemRequest) (*messages.MealPlanGroceryListItem, error)
	GetMealPlanGroceryListItemsForMealPlan(context.Context, *messages.GetMealPlanGroceryListItemsForMealPlanRequest) (*messages.MealPlanGroceryListItem, error)
	GetMealPlanOption(context.Context, *messages.GetMealPlanOptionRequest) (*messages.MealPlanOption, error)
	GetMealPlanOptionVote(context.Context, *messages.GetMealPlanOptionVoteRequest) (*messages.MealPlanOptionVote, error)
	GetMealPlanOptionVotes(context.Context, *messages.GetMealPlanOptionVotesRequest) (*messages.MealPlanOptionVote, error)
	GetMealPlanOptions(context.Context, *messages.GetMealPlanOptionsRequest) (*messages.MealPlanOption, error)
	GetMealPlanTask(context.Context, *messages.GetMealPlanTaskRequest) (*messages.MealPlanTask, error)
	GetMealPlanTasks(context.Context, *messages.GetMealPlanTasksRequest) (*messages.MealPlanTask, error)
	GetMealPlansForHousehold(context.Context, *messages.GetMealPlansForHouseholdRequest) (*messages.MealPlan, error)
	GetMeals(context.Context, *messages.GetMealsRequest) (*messages.Meal, error)
	GetMermaidDiagramForRecipe(context.Context, *messages.GetMermaidDiagramForRecipeRequest) (*messages.GetMermaidDiagramForRecipeResponse, error)
	GetOAuth2Client(context.Context, *messages.GetOAuth2ClientRequest) (*messages.OAuth2Client, error)
	GetOAuth2Clients(context.Context, *messages.GetOAuth2ClientsRequest) (*messages.OAuth2Client, error)
	GetRandomValidIngredient(context.Context, *emptypb.Empty) (*messages.ValidIngredient, error)
	GetRandomValidInstrument(context.Context, *emptypb.Empty) (*messages.ValidInstrument, error)
	GetRandomValidPreparation(context.Context, *emptypb.Empty) (*messages.ValidPreparation, error)
	GetRandomValidVessel(context.Context, *emptypb.Empty) (*messages.ValidVessel, error)
	GetReceivedHouseholdInvitations(context.Context, *messages.GetReceivedHouseholdInvitationsRequest) (*messages.HouseholdInvitation, error)
	GetRecipe(context.Context, *messages.GetRecipeRequest) (*messages.Recipe, error)
	GetRecipeMealPlanTasks(context.Context, *messages.GetRecipeMealPlanTasksRequest) (*messages.RecipePrepTaskStep, error)
	GetRecipePrepTask(context.Context, *messages.GetRecipePrepTaskRequest) (*messages.RecipePrepTask, error)
	GetRecipePrepTasks(context.Context, *messages.GetRecipePrepTasksRequest) (*messages.RecipePrepTask, error)
	GetRecipeRating(context.Context, *messages.GetRecipeRatingRequest) (*messages.RecipeRating, error)
	GetRecipeRatingsForRecipe(context.Context, *messages.GetRecipeRatingsForRecipeRequest) (*messages.RecipeRating, error)
	GetRecipeStep(context.Context, *messages.GetRecipeStepRequest) (*messages.RecipeStep, error)
	GetRecipeStepCompletionCondition(context.Context, *messages.GetRecipeStepCompletionConditionRequest) (*messages.RecipeStepCompletionCondition, error)
	GetRecipeStepCompletionConditions(context.Context, *messages.GetRecipeStepCompletionConditionsRequest) (*messages.RecipeStepCompletionCondition, error)
	GetRecipeStepIngredient(context.Context, *messages.GetRecipeStepIngredientRequest) (*messages.RecipeStepIngredient, error)
	GetRecipeStepIngredients(context.Context, *messages.GetRecipeStepIngredientsRequest) (*messages.RecipeStepIngredient, error)
	GetRecipeStepInstrument(context.Context, *messages.GetRecipeStepInstrumentRequest) (*messages.RecipeStepInstrument, error)
	GetRecipeStepInstruments(context.Context, *messages.GetRecipeStepInstrumentsRequest) (*messages.RecipeStepInstrument, error)
	GetRecipeStepProduct(context.Context, *messages.GetRecipeStepProductRequest) (*messages.RecipeStepProduct, error)
	GetRecipeStepProducts(context.Context, *messages.GetRecipeStepProductsRequest) (*messages.RecipeStepProduct, error)
	GetRecipeStepVessel(context.Context, *messages.GetRecipeStepVesselRequest) (*messages.RecipeStepVessel, error)
	GetRecipeStepVessels(context.Context, *messages.GetRecipeStepVesselsRequest) (*messages.RecipeStepVessel, error)
	GetRecipeSteps(context.Context, *messages.GetRecipeStepsRequest) (*messages.RecipeStep, error)
	GetRecipes(context.Context, *messages.GetRecipesRequest) (*messages.Recipe, error)
	GetSelf(context.Context, *emptypb.Empty) (*messages.User, error)
	GetSentHouseholdInvitations(context.Context, *messages.GetSentHouseholdInvitationsRequest) (*messages.HouseholdInvitation, error)
	GetServiceSetting(context.Context, *messages.GetServiceSettingRequest) (*messages.ServiceSetting, error)
	GetServiceSettingConfigurationByName(context.Context, *messages.GetServiceSettingConfigurationByNameRequest) (*messages.ServiceSettingConfiguration, error)
	GetServiceSettingConfigurationsForHousehold(context.Context, *messages.GetServiceSettingConfigurationsForHouseholdRequest) (*messages.ServiceSettingConfiguration, error)
	GetServiceSettingConfigurationsForUser(context.Context, *messages.GetServiceSettingConfigurationsForUserRequest) (*messages.ServiceSettingConfiguration, error)
	GetServiceSettings(context.Context, *messages.GetServiceSettingsRequest) (*messages.ServiceSetting, error)
	GetUser(context.Context, *messages.GetUserRequest) (*messages.User, error)
	GetUserIngredientPreferences(context.Context, *messages.GetUserIngredientPreferencesRequest) (*messages.UserIngredientPreference, error)
	GetUserNotification(context.Context, *messages.GetUserNotificationRequest) (*messages.UserNotification, error)
	GetUserNotifications(context.Context, *messages.GetUserNotificationsRequest) (*messages.UserNotification, error)
	GetUsers(context.Context, *messages.GetUsersRequest) (*messages.User, error)
	GetValidIngredient(context.Context, *messages.GetValidIngredientRequest) (*messages.ValidIngredient, error)
	GetValidIngredientGroup(context.Context, *messages.GetValidIngredientGroupRequest) (*messages.ValidIngredientGroup, error)
	GetValidIngredientGroups(context.Context, *messages.GetValidIngredientGroupsRequest) (*messages.ValidIngredientGroup, error)
	GetValidIngredientMeasurementUnit(context.Context, *messages.GetValidIngredientMeasurementUnitRequest) (*messages.ValidIngredientMeasurementUnit, error)
	GetValidIngredientMeasurementUnits(context.Context, *messages.GetValidIngredientMeasurementUnitsRequest) (*messages.ValidIngredientMeasurementUnit, error)
	GetValidIngredientMeasurementUnitsByIngredient(context.Context, *messages.GetValidIngredientMeasurementUnitsByIngredientRequest) (*messages.ValidIngredientMeasurementUnit, error)
	GetValidIngredientMeasurementUnitsByMeasurementUnit(context.Context, *messages.GetValidIngredientMeasurementUnitsByMeasurementUnitRequest) (*messages.ValidIngredientMeasurementUnit, error)
	GetValidIngredientPreparation(context.Context, *messages.GetValidIngredientPreparationRequest) (*messages.ValidIngredientPreparation, error)
	GetValidIngredientPreparations(context.Context, *messages.GetValidIngredientPreparationsRequest) (*messages.ValidIngredientPreparation, error)
	GetValidIngredientPreparationsByIngredient(context.Context, *messages.GetValidIngredientPreparationsByIngredientRequest) (*messages.ValidIngredientPreparation, error)
	GetValidIngredientPreparationsByPreparation(context.Context, *messages.GetValidIngredientPreparationsByPreparationRequest) (*messages.ValidIngredientPreparation, error)
	GetValidIngredientState(context.Context, *messages.GetValidIngredientStateRequest) (*messages.ValidIngredientState, error)
	GetValidIngredientStateIngredient(context.Context, *messages.GetValidIngredientStateIngredientRequest) (*messages.ValidIngredientStateIngredient, error)
	GetValidIngredientStateIngredients(context.Context, *messages.GetValidIngredientStateIngredientsRequest) (*messages.ValidIngredientStateIngredient, error)
	GetValidIngredientStateIngredientsByIngredient(context.Context, *messages.GetValidIngredientStateIngredientsByIngredientRequest) (*messages.ValidIngredientStateIngredient, error)
	GetValidIngredientStateIngredientsByIngredientState(context.Context, *messages.GetValidIngredientStateIngredientsByIngredientStateRequest) (*messages.ValidIngredientStateIngredient, error)
	GetValidIngredientStates(context.Context, *messages.GetValidIngredientStatesRequest) (*messages.ValidIngredientState, error)
	GetValidIngredients(context.Context, *messages.GetValidIngredientsRequest) (*messages.ValidIngredient, error)
	GetValidInstrument(context.Context, *messages.GetValidInstrumentRequest) (*messages.ValidInstrument, error)
	GetValidInstruments(context.Context, *messages.GetValidInstrumentsRequest) (*messages.ValidInstrument, error)
	GetValidMeasurementUnit(context.Context, *messages.GetValidMeasurementUnitRequest) (*messages.ValidMeasurementUnit, error)
	GetValidMeasurementUnitConversion(context.Context, *messages.GetValidMeasurementUnitConversionRequest) (*messages.ValidMeasurementUnitConversion, error)
	GetValidMeasurementUnitConversionsFromUnit(context.Context, *messages.GetValidMeasurementUnitConversionsFromUnitRequest) (*messages.ValidMeasurementUnitConversion, error)
	GetValidMeasurementUnitConversionsToUnit(context.Context, *messages.GetValidMeasurementUnitConversionsToUnitRequest) (*messages.ValidMeasurementUnitConversion, error)
	GetValidMeasurementUnits(context.Context, *messages.GetValidMeasurementUnitsRequest) (*messages.ValidMeasurementUnit, error)
	GetValidPreparation(context.Context, *messages.GetValidPreparationRequest) (*messages.ValidPreparation, error)
	GetValidPreparationInstrument(context.Context, *messages.GetValidPreparationInstrumentRequest) (*messages.ValidPreparationInstrument, error)
	GetValidPreparationInstruments(context.Context, *messages.GetValidPreparationInstrumentsRequest) (*messages.ValidPreparationInstrument, error)
	GetValidPreparationInstrumentsByInstrument(context.Context, *messages.GetValidPreparationInstrumentsByInstrumentRequest) (*messages.ValidPreparationInstrument, error)
	GetValidPreparationInstrumentsByPreparation(context.Context, *messages.GetValidPreparationInstrumentsByPreparationRequest) (*messages.ValidPreparationInstrument, error)
	GetValidPreparationVessel(context.Context, *messages.GetValidPreparationVesselRequest) (*messages.ValidPreparationVessel, error)
	GetValidPreparationVessels(context.Context, *messages.GetValidPreparationVesselsRequest) (*messages.ValidPreparationVessel, error)
	GetValidPreparationVesselsByPreparation(context.Context, *messages.GetValidPreparationVesselsByPreparationRequest) (*messages.ValidPreparationVessel, error)
	GetValidPreparationVesselsByVessel(context.Context, *messages.GetValidPreparationVesselsByVesselRequest) (*messages.ValidPreparationVessel, error)
	GetValidPreparations(context.Context, *messages.GetValidPreparationsRequest) (*messages.ValidPreparation, error)
	GetValidVessel(context.Context, *messages.GetValidVesselRequest) (*messages.ValidVessel, error)
	GetValidVessels(context.Context, *messages.GetValidVesselsRequest) (*messages.ValidVessel, error)
	GetWebhook(context.Context, *messages.GetWebhookRequest) (*messages.Webhook, error)
	GetWebhooks(context.Context, *messages.GetWebhooksRequest) (*messages.Webhook, error)
	LoginForToken(context.Context, *messages.UserLoginInput) (*messages.TokenResponse, error)
	PublishArbitraryQueueMessage(context.Context, *messages.ArbitraryQueueMessageRequestInput) (*messages.ArbitraryQueueMessageResponse, error)
	RedeemPasswordResetToken(context.Context, *messages.PasswordResetTokenRedemptionRequestInput) (*messages.User, error)
	RefreshTOTPSecret(context.Context, *messages.TOTPSecretRefreshInput) (*messages.TOTPSecretRefreshResponse, error)
	RejectHouseholdInvitation(context.Context, *messages.RejectHouseholdInvitationRequest) (*messages.HouseholdInvitation, error)
	RequestEmailVerificationEmail(context.Context, *emptypb.Empty) (*messages.User, error)
	RequestPasswordResetToken(context.Context, *messages.PasswordResetTokenCreationRequestInput) (*messages.PasswordResetToken, error)
	RequestUsernameReminder(context.Context, *messages.UsernameReminderRequestInput) (*messages.User, error)
	RunFinalizeMealPlanWorker(context.Context, *messages.FinalizeMealPlansRequest) (*messages.FinalizeMealPlansResponse, error)
	RunMealPlanGroceryListInitializerWorker(context.Context, *messages.InitializeMealPlanGroceryListRequest) (*messages.InitializeMealPlanGroceryListResponse, error)
	RunMealPlanTaskCreatorWorker(context.Context, *messages.CreateMealPlanTasksRequest) (*messages.CreateMealPlanTasksResponse, error)
	SearchForMeals(context.Context, *messages.SearchForMealsRequest) (*messages.Meal, error)
	SearchForRecipes(context.Context, *messages.SearchForRecipesRequest) (*messages.Recipe, error)
	SearchForServiceSettings(context.Context, *messages.SearchForServiceSettingsRequest) (*messages.ServiceSetting, error)
	SearchForUsers(context.Context, *messages.SearchForUsersRequest) (*messages.User, error)
	SearchForValidIngredientGroups(context.Context, *messages.SearchForValidIngredientGroupsRequest) (*messages.ValidIngredientGroup, error)
	SearchForValidIngredientStates(context.Context, *messages.SearchForValidIngredientStatesRequest) (*messages.ValidIngredientState, error)
	SearchForValidIngredients(context.Context, *messages.SearchForValidIngredientsRequest) (*messages.ValidIngredient, error)
	SearchForValidInstruments(context.Context, *messages.SearchForValidInstrumentsRequest) (*messages.ValidInstrument, error)
	SearchForValidMeasurementUnits(context.Context, *messages.SearchForValidMeasurementUnitsRequest) (*messages.ValidMeasurementUnit, error)
	SearchForValidPreparations(context.Context, *messages.SearchForValidPreparationsRequest) (*messages.ValidPreparation, error)
	SearchForValidVessels(context.Context, *messages.SearchForValidVesselsRequest) (*messages.ValidVessel, error)
	SearchValidIngredientsByPreparation(context.Context, *messages.SearchValidIngredientsByPreparationRequest) (*messages.ValidIngredient, error)
	SearchValidMeasurementUnitsByIngredient(context.Context, *messages.SearchValidMeasurementUnitsByIngredientRequest) (*messages.ValidMeasurementUnit, error)
	SetDefaultHousehold(context.Context, *messages.SetDefaultHouseholdRequest) (*messages.Household, error)
	TransferHouseholdOwnership(context.Context, *messages.TransferHouseholdOwnershipRequest) (*messages.Household, error)
	UpdateHousehold(context.Context, *messages.UpdateHouseholdRequest) (*messages.Household, error)
	UpdateHouseholdInstrumentOwnership(context.Context, *messages.UpdateHouseholdInstrumentOwnershipRequest) (*messages.HouseholdInstrumentOwnership, error)
	UpdateHouseholdMemberPermissions(context.Context, *messages.UpdateHouseholdMemberPermissionsRequest) (*messages.UserPermissionsResponse, error)
	UpdateMealPlan(context.Context, *messages.UpdateMealPlanRequest) (*messages.MealPlan, error)
	UpdateMealPlanEvent(context.Context, *messages.UpdateMealPlanEventRequest) (*messages.MealPlanEvent, error)
	UpdateMealPlanGroceryListItem(context.Context, *messages.UpdateMealPlanGroceryListItemRequest) (*messages.MealPlanGroceryListItem, error)
	UpdateMealPlanOption(context.Context, *messages.UpdateMealPlanOptionRequest) (*messages.MealPlanOption, error)
	UpdateMealPlanOptionVote(context.Context, *messages.UpdateMealPlanOptionVoteRequest) (*messages.MealPlanOptionVote, error)
	UpdateMealPlanTaskStatus(context.Context, *messages.UpdateMealPlanTaskStatusRequest) (*messages.MealPlanTask, error)
	UpdatePassword(context.Context, *messages.PasswordUpdateInput) (*messages.PasswordResetResponse, error)
	UpdateRecipe(context.Context, *messages.UpdateRecipeRequest) (*messages.Recipe, error)
	UpdateRecipePrepTask(context.Context, *messages.UpdateRecipePrepTaskRequest) (*messages.RecipePrepTask, error)
	UpdateRecipeRating(context.Context, *messages.UpdateRecipeRatingRequest) (*messages.RecipeRating, error)
	UpdateRecipeStep(context.Context, *messages.UpdateRecipeStepRequest) (*messages.RecipeStep, error)
	UpdateRecipeStepCompletionCondition(context.Context, *messages.UpdateRecipeStepCompletionConditionRequest) (*messages.RecipeStepCompletionCondition, error)
	UpdateRecipeStepIngredient(context.Context, *messages.UpdateRecipeStepIngredientRequest) (*messages.RecipeStepIngredient, error)
	UpdateRecipeStepInstrument(context.Context, *messages.UpdateRecipeStepInstrumentRequest) (*messages.RecipeStepInstrument, error)
	UpdateRecipeStepProduct(context.Context, *messages.UpdateRecipeStepProductRequest) (*messages.RecipeStepProduct, error)
	UpdateRecipeStepVessel(context.Context, *messages.UpdateRecipeStepVesselRequest) (*messages.RecipeStepVessel, error)
	UpdateServiceSettingConfiguration(context.Context, *messages.UpdateServiceSettingConfigurationRequest) (*messages.ServiceSettingConfiguration, error)
	UpdateUserDetails(context.Context, *messages.UserDetailsUpdateRequestInput) (*messages.User, error)
	UpdateUserEmailAddress(context.Context, *messages.UserEmailAddressUpdateInput) (*messages.User, error)
	UpdateUserIngredientPreference(context.Context, *messages.UpdateUserIngredientPreferenceRequest) (*messages.UserIngredientPreference, error)
	UpdateUserNotification(context.Context, *messages.UpdateUserNotificationRequest) (*messages.UserNotification, error)
	UpdateUserUsername(context.Context, *messages.UsernameUpdateInput) (*messages.User, error)
	UpdateValidIngredient(context.Context, *messages.UpdateValidIngredientRequest) (*messages.ValidIngredient, error)
	UpdateValidIngredientGroup(context.Context, *messages.UpdateValidIngredientGroupRequest) (*messages.ValidIngredientGroup, error)
	UpdateValidIngredientMeasurementUnit(context.Context, *messages.UpdateValidIngredientMeasurementUnitRequest) (*messages.ValidIngredientMeasurementUnit, error)
	UpdateValidIngredientPreparation(context.Context, *messages.UpdateValidIngredientPreparationRequest) (*messages.ValidIngredientPreparation, error)
	UpdateValidIngredientState(context.Context, *messages.UpdateValidIngredientStateRequest) (*messages.ValidIngredientState, error)
	UpdateValidIngredientStateIngredient(context.Context, *messages.UpdateValidIngredientStateIngredientRequest) (*messages.ValidIngredientStateIngredient, error)
	UpdateValidInstrument(context.Context, *messages.UpdateValidInstrumentRequest) (*messages.ValidInstrument, error)
	UpdateValidMeasurementUnit(context.Context, *messages.UpdateValidMeasurementUnitRequest) (*messages.ValidMeasurementUnit, error)
	UpdateValidMeasurementUnitConversion(context.Context, *messages.UpdateValidMeasurementUnitConversionRequest) (*messages.ValidMeasurementUnitConversion, error)
	UpdateValidPreparation(context.Context, *messages.UpdateValidPreparationRequest) (*messages.ValidPreparation, error)
	UpdateValidPreparationInstrument(context.Context, *messages.UpdateValidPreparationInstrumentRequest) (*messages.ValidPreparationInstrument, error)
	UpdateValidPreparationVessel(context.Context, *messages.UpdateValidPreparationVesselRequest) (*messages.ValidPreparationVessel, error)
	UpdateValidVessel(context.Context, *messages.UpdateValidVesselRequest) (*messages.ValidVessel, error)
	UploadUserAvatar(context.Context, *messages.AvatarUpdateInput) (*messages.User, error)
	VerifyEmailAddress(context.Context, *messages.EmailAddressVerificationRequestInput) (*messages.User, error)
	VerifyTOTPSecret(context.Context, *messages.TOTPSecretVerificationInput) (*messages.User, error)
	mustEmbedUnimplementedEatingServiceServer()
}

// UnimplementedEatingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEatingServiceServer struct{}

func (UnimplementedEatingServiceServer) AcceptHouseholdInvitation(context.Context, *messages.AcceptHouseholdInvitationRequest) (*messages.HouseholdInvitation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptHouseholdInvitation not implemented")
}
func (UnimplementedEatingServiceServer) AdminLoginForToken(context.Context, *messages.UserLoginInput) (*messages.TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLoginForToken not implemented")
}
func (UnimplementedEatingServiceServer) AdminUpdateUserStatus(context.Context, *messages.UserAccountStatusUpdateInput) (*messages.UserStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateUserStatus not implemented")
}
func (UnimplementedEatingServiceServer) AggregateUserDataReport(context.Context, *emptypb.Empty) (*messages.UserDataCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AggregateUserDataReport not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveHousehold(context.Context, *messages.ArchiveHouseholdRequest) (*messages.Household, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveHousehold not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveHouseholdInstrumentOwnership(context.Context, *messages.ArchiveHouseholdInstrumentOwnershipRequest) (*messages.HouseholdInstrumentOwnership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveHouseholdInstrumentOwnership not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveMeal(context.Context, *messages.ArchiveMealRequest) (*messages.Meal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveMeal not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveMealPlan(context.Context, *messages.ArchiveMealPlanRequest) (*messages.MealPlan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveMealPlan not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveMealPlanEvent(context.Context, *messages.ArchiveMealPlanEventRequest) (*messages.MealPlanEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveMealPlanEvent not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveMealPlanGroceryListItem(context.Context, *messages.ArchiveMealPlanGroceryListItemRequest) (*messages.MealPlanGroceryListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveMealPlanGroceryListItem not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveMealPlanOption(context.Context, *messages.ArchiveMealPlanOptionRequest) (*messages.MealPlanOption, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveMealPlanOption not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveMealPlanOptionVote(context.Context, *messages.ArchiveMealPlanOptionVoteRequest) (*messages.MealPlanOptionVote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveMealPlanOptionVote not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveOAuth2Client(context.Context, *messages.ArchiveOAuth2ClientRequest) (*messages.OAuth2Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveOAuth2Client not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveRecipe(context.Context, *messages.ArchiveRecipeRequest) (*messages.Recipe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveRecipe not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveRecipePrepTask(context.Context, *messages.ArchiveRecipePrepTaskRequest) (*messages.RecipePrepTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveRecipePrepTask not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveRecipeRating(context.Context, *messages.ArchiveRecipeRatingRequest) (*messages.RecipeRating, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveRecipeRating not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveRecipeStep(context.Context, *messages.ArchiveRecipeStepRequest) (*messages.RecipeStep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveRecipeStep not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveRecipeStepCompletionCondition(context.Context, *messages.ArchiveRecipeStepCompletionConditionRequest) (*messages.RecipeStepCompletionCondition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveRecipeStepCompletionCondition not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveRecipeStepIngredient(context.Context, *messages.ArchiveRecipeStepIngredientRequest) (*messages.RecipeStepIngredient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveRecipeStepIngredient not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveRecipeStepInstrument(context.Context, *messages.ArchiveRecipeStepInstrumentRequest) (*messages.RecipeStepInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveRecipeStepInstrument not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveRecipeStepProduct(context.Context, *messages.ArchiveRecipeStepProductRequest) (*messages.RecipeStepProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveRecipeStepProduct not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveRecipeStepVessel(context.Context, *messages.ArchiveRecipeStepVesselRequest) (*messages.RecipeStepVessel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveRecipeStepVessel not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveServiceSetting(context.Context, *messages.ArchiveServiceSettingRequest) (*messages.ServiceSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveServiceSetting not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveServiceSettingConfiguration(context.Context, *messages.ArchiveServiceSettingConfigurationRequest) (*messages.ServiceSettingConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveServiceSettingConfiguration not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveUser(context.Context, *messages.ArchiveUserRequest) (*messages.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveUser not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveUserIngredientPreference(context.Context, *messages.ArchiveUserIngredientPreferenceRequest) (*messages.UserIngredientPreference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveUserIngredientPreference not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveUserMembership(context.Context, *messages.ArchiveUserMembershipRequest) (*messages.HouseholdUserMembership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveUserMembership not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveValidIngredient(context.Context, *messages.ArchiveValidIngredientRequest) (*messages.ValidIngredient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveValidIngredient not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveValidIngredientGroup(context.Context, *messages.ArchiveValidIngredientGroupRequest) (*messages.ValidIngredientGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveValidIngredientGroup not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveValidIngredientMeasurementUnit(context.Context, *messages.ArchiveValidIngredientMeasurementUnitRequest) (*messages.ValidIngredientMeasurementUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveValidIngredientMeasurementUnit not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveValidIngredientPreparation(context.Context, *messages.ArchiveValidIngredientPreparationRequest) (*messages.ValidIngredientPreparation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveValidIngredientPreparation not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveValidIngredientState(context.Context, *messages.ArchiveValidIngredientStateRequest) (*messages.ValidIngredientState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveValidIngredientState not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveValidIngredientStateIngredient(context.Context, *messages.ArchiveValidIngredientStateIngredientRequest) (*messages.ValidIngredientStateIngredient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveValidIngredientStateIngredient not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveValidInstrument(context.Context, *messages.ArchiveValidInstrumentRequest) (*messages.ValidInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveValidInstrument not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveValidMeasurementUnit(context.Context, *messages.ArchiveValidMeasurementUnitRequest) (*messages.ValidMeasurementUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveValidMeasurementUnit not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveValidMeasurementUnitConversion(context.Context, *messages.ArchiveValidMeasurementUnitConversionRequest) (*messages.ValidMeasurementUnitConversion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveValidMeasurementUnitConversion not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveValidPreparation(context.Context, *messages.ArchiveValidPreparationRequest) (*messages.ValidPreparation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveValidPreparation not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveValidPreparationInstrument(context.Context, *messages.ArchiveValidPreparationInstrumentRequest) (*messages.ValidPreparationInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveValidPreparationInstrument not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveValidPreparationVessel(context.Context, *messages.ArchiveValidPreparationVesselRequest) (*messages.ValidPreparationVessel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveValidPreparationVessel not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveValidVessel(context.Context, *messages.ArchiveValidVesselRequest) (*messages.ValidVessel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveValidVessel not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveWebhook(context.Context, *messages.ArchiveWebhookRequest) (*messages.Webhook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveWebhook not implemented")
}
func (UnimplementedEatingServiceServer) ArchiveWebhookTriggerEvent(context.Context, *messages.ArchiveWebhookTriggerEventRequest) (*messages.WebhookTriggerEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveWebhookTriggerEvent not implemented")
}
func (UnimplementedEatingServiceServer) CancelHouseholdInvitation(context.Context, *messages.CancelHouseholdInvitationRequest) (*messages.HouseholdInvitation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelHouseholdInvitation not implemented")
}
func (UnimplementedEatingServiceServer) CheckForReadiness(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckForReadiness not implemented")
}
func (UnimplementedEatingServiceServer) CheckPermissions(context.Context, *messages.UserPermissionsRequestInput) (*messages.UserPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermissions not implemented")
}
func (UnimplementedEatingServiceServer) CloneRecipe(context.Context, *messages.CloneRecipeRequest) (*messages.Recipe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneRecipe not implemented")
}
func (UnimplementedEatingServiceServer) CreateHousehold(context.Context, *messages.HouseholdCreationRequestInput) (*messages.Household, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHousehold not implemented")
}
func (UnimplementedEatingServiceServer) CreateHouseholdInstrumentOwnership(context.Context, *messages.HouseholdInstrumentOwnershipCreationRequestInput) (*messages.HouseholdInstrumentOwnership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHouseholdInstrumentOwnership not implemented")
}
func (UnimplementedEatingServiceServer) CreateHouseholdInvitation(context.Context, *messages.CreateHouseholdInvitationRequest) (*messages.HouseholdInvitation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHouseholdInvitation not implemented")
}
func (UnimplementedEatingServiceServer) CreateMeal(context.Context, *messages.MealCreationRequestInput) (*messages.Meal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeal not implemented")
}
func (UnimplementedEatingServiceServer) CreateMealPlan(context.Context, *messages.MealPlanCreationRequestInput) (*messages.MealPlan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMealPlan not implemented")
}
func (UnimplementedEatingServiceServer) CreateMealPlanEvent(context.Context, *messages.CreateMealPlanEventRequest) (*messages.MealPlanEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMealPlanEvent not implemented")
}
func (UnimplementedEatingServiceServer) CreateMealPlanGroceryListItem(context.Context, *messages.CreateMealPlanGroceryListItemRequest) (*messages.MealPlanGroceryListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMealPlanGroceryListItem not implemented")
}
func (UnimplementedEatingServiceServer) CreateMealPlanOption(context.Context, *messages.CreateMealPlanOptionRequest) (*messages.MealPlanOption, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMealPlanOption not implemented")
}
func (UnimplementedEatingServiceServer) CreateMealPlanOptionVote(context.Context, *messages.CreateMealPlanOptionVoteRequest) (*messages.MealPlanOptionVote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMealPlanOptionVote not implemented")
}
func (UnimplementedEatingServiceServer) CreateMealPlanTask(context.Context, *messages.CreateMealPlanTaskRequest) (*messages.MealPlanTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMealPlanTask not implemented")
}
func (UnimplementedEatingServiceServer) CreateOAuth2Client(context.Context, *messages.OAuth2ClientCreationRequestInput) (*messages.OAuth2ClientCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOAuth2Client not implemented")
}
func (UnimplementedEatingServiceServer) CreateRecipe(context.Context, *messages.RecipeCreationRequestInput) (*messages.Recipe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecipe not implemented")
}
func (UnimplementedEatingServiceServer) CreateRecipePrepTask(context.Context, *messages.CreateRecipePrepTaskRequest) (*messages.RecipePrepTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecipePrepTask not implemented")
}
func (UnimplementedEatingServiceServer) CreateRecipeRating(context.Context, *messages.CreateRecipeRatingRequest) (*messages.RecipeRating, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecipeRating not implemented")
}
func (UnimplementedEatingServiceServer) CreateRecipeStep(context.Context, *messages.CreateRecipeStepRequest) (*messages.RecipeStep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecipeStep not implemented")
}
func (UnimplementedEatingServiceServer) CreateRecipeStepCompletionCondition(context.Context, *messages.CreateRecipeStepCompletionConditionRequest) (*messages.RecipeStepCompletionCondition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecipeStepCompletionCondition not implemented")
}
func (UnimplementedEatingServiceServer) CreateRecipeStepIngredient(context.Context, *messages.CreateRecipeStepIngredientRequest) (*messages.RecipeStepIngredient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecipeStepIngredient not implemented")
}
func (UnimplementedEatingServiceServer) CreateRecipeStepInstrument(context.Context, *messages.CreateRecipeStepInstrumentRequest) (*messages.RecipeStepInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecipeStepInstrument not implemented")
}
func (UnimplementedEatingServiceServer) CreateRecipeStepProduct(context.Context, *messages.CreateRecipeStepProductRequest) (*messages.RecipeStepProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecipeStepProduct not implemented")
}
func (UnimplementedEatingServiceServer) CreateRecipeStepVessel(context.Context, *messages.CreateRecipeStepVesselRequest) (*messages.RecipeStepVessel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecipeStepVessel not implemented")
}
func (UnimplementedEatingServiceServer) CreateServiceSetting(context.Context, *messages.ServiceSettingCreationRequestInput) (*messages.ServiceSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceSetting not implemented")
}
func (UnimplementedEatingServiceServer) CreateServiceSettingConfiguration(context.Context, *messages.ServiceSettingConfigurationCreationRequestInput) (*messages.ServiceSettingConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceSettingConfiguration not implemented")
}
func (UnimplementedEatingServiceServer) CreateUser(context.Context, *messages.UserRegistrationInput) (*messages.UserCreationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedEatingServiceServer) CreateUserIngredientPreference(context.Context, *messages.UserIngredientPreferenceCreationRequestInput) (*messages.UserIngredientPreference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserIngredientPreference not implemented")
}
func (UnimplementedEatingServiceServer) CreateUserNotification(context.Context, *messages.UserNotificationCreationRequestInput) (*messages.UserNotification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserNotification not implemented")
}
func (UnimplementedEatingServiceServer) CreateValidIngredient(context.Context, *messages.ValidIngredientCreationRequestInput) (*messages.ValidIngredient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateValidIngredient not implemented")
}
func (UnimplementedEatingServiceServer) CreateValidIngredientGroup(context.Context, *messages.ValidIngredientGroupCreationRequestInput) (*messages.ValidIngredientGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateValidIngredientGroup not implemented")
}
func (UnimplementedEatingServiceServer) CreateValidIngredientMeasurementUnit(context.Context, *messages.ValidIngredientMeasurementUnitCreationRequestInput) (*messages.ValidIngredientMeasurementUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateValidIngredientMeasurementUnit not implemented")
}
func (UnimplementedEatingServiceServer) CreateValidIngredientPreparation(context.Context, *messages.ValidIngredientPreparationCreationRequestInput) (*messages.ValidIngredientPreparation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateValidIngredientPreparation not implemented")
}
func (UnimplementedEatingServiceServer) CreateValidIngredientState(context.Context, *messages.ValidIngredientStateCreationRequestInput) (*messages.ValidIngredientState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateValidIngredientState not implemented")
}
func (UnimplementedEatingServiceServer) CreateValidIngredientStateIngredient(context.Context, *messages.ValidIngredientStateIngredientCreationRequestInput) (*messages.ValidIngredientStateIngredient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateValidIngredientStateIngredient not implemented")
}
func (UnimplementedEatingServiceServer) CreateValidInstrument(context.Context, *messages.ValidInstrumentCreationRequestInput) (*messages.ValidInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateValidInstrument not implemented")
}
func (UnimplementedEatingServiceServer) CreateValidMeasurementUnit(context.Context, *messages.ValidMeasurementUnitCreationRequestInput) (*messages.ValidMeasurementUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateValidMeasurementUnit not implemented")
}
func (UnimplementedEatingServiceServer) CreateValidMeasurementUnitConversion(context.Context, *messages.ValidMeasurementUnitConversionCreationRequestInput) (*messages.ValidMeasurementUnitConversion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateValidMeasurementUnitConversion not implemented")
}
func (UnimplementedEatingServiceServer) CreateValidPreparation(context.Context, *messages.ValidPreparationCreationRequestInput) (*messages.ValidPreparation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateValidPreparation not implemented")
}
func (UnimplementedEatingServiceServer) CreateValidPreparationInstrument(context.Context, *messages.ValidPreparationInstrumentCreationRequestInput) (*messages.ValidPreparationInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateValidPreparationInstrument not implemented")
}
func (UnimplementedEatingServiceServer) CreateValidPreparationVessel(context.Context, *messages.ValidPreparationVesselCreationRequestInput) (*messages.ValidPreparationVessel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateValidPreparationVessel not implemented")
}
func (UnimplementedEatingServiceServer) CreateValidVessel(context.Context, *messages.ValidVesselCreationRequestInput) (*messages.ValidVessel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateValidVessel not implemented")
}
func (UnimplementedEatingServiceServer) CreateWebhook(context.Context, *messages.WebhookCreationRequestInput) (*messages.Webhook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebhook not implemented")
}
func (UnimplementedEatingServiceServer) CreateWebhookTriggerEvent(context.Context, *messages.CreateWebhookTriggerEventRequest) (*messages.WebhookTriggerEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebhookTriggerEvent not implemented")
}
func (UnimplementedEatingServiceServer) DestroyAllUserData(context.Context, *emptypb.Empty) (*messages.DataDeletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DestroyAllUserData not implemented")
}
func (UnimplementedEatingServiceServer) FetchUserDataReport(context.Context, *messages.FetchUserDataReportRequest) (*messages.UserDataCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchUserDataReport not implemented")
}
func (UnimplementedEatingServiceServer) FinalizeMealPlan(context.Context, *messages.FinalizeMealPlanRequest) (*messages.FinalizeMealPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeMealPlan not implemented")
}
func (UnimplementedEatingServiceServer) GetActiveHousehold(context.Context, *emptypb.Empty) (*messages.Household, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveHousehold not implemented")
}
func (UnimplementedEatingServiceServer) GetAuditLogEntriesForHousehold(context.Context, *messages.GetAuditLogEntriesForHouseholdRequest) (*messages.AuditLogEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditLogEntriesForHousehold not implemented")
}
func (UnimplementedEatingServiceServer) GetAuditLogEntriesForUser(context.Context, *messages.GetAuditLogEntriesForUserRequest) (*messages.AuditLogEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditLogEntriesForUser not implemented")
}
func (UnimplementedEatingServiceServer) GetAuditLogEntryByID(context.Context, *messages.GetAuditLogEntryByIDRequest) (*messages.AuditLogEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuditLogEntryByID not implemented")
}
func (UnimplementedEatingServiceServer) GetAuthStatus(context.Context, *emptypb.Empty) (*messages.UserStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthStatus not implemented")
}
func (UnimplementedEatingServiceServer) GetHousehold(context.Context, *messages.GetHouseholdRequest) (*messages.Household, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHousehold not implemented")
}
func (UnimplementedEatingServiceServer) GetHouseholdInstrumentOwnership(context.Context, *messages.GetHouseholdInstrumentOwnershipRequest) (*messages.HouseholdInstrumentOwnership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHouseholdInstrumentOwnership not implemented")
}
func (UnimplementedEatingServiceServer) GetHouseholdInstrumentOwnerships(context.Context, *messages.GetHouseholdInstrumentOwnershipsRequest) (*messages.HouseholdInstrumentOwnership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHouseholdInstrumentOwnerships not implemented")
}
func (UnimplementedEatingServiceServer) GetHouseholdInvitation(context.Context, *messages.GetHouseholdInvitationRequest) (*messages.HouseholdInvitation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHouseholdInvitation not implemented")
}
func (UnimplementedEatingServiceServer) GetHouseholdInvitationByID(context.Context, *messages.GetHouseholdInvitationByIDRequest) (*messages.HouseholdInvitation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHouseholdInvitationByID not implemented")
}
func (UnimplementedEatingServiceServer) GetHouseholds(context.Context, *messages.GetHouseholdsRequest) (*messages.Household, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHouseholds not implemented")
}
func (UnimplementedEatingServiceServer) GetMeal(context.Context, *messages.GetMealRequest) (*messages.Meal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeal not implemented")
}
func (UnimplementedEatingServiceServer) GetMealPlan(context.Context, *messages.GetMealPlanRequest) (*messages.MealPlan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMealPlan not implemented")
}
func (UnimplementedEatingServiceServer) GetMealPlanEvent(context.Context, *messages.GetMealPlanEventRequest) (*messages.MealPlanEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMealPlanEvent not implemented")
}
func (UnimplementedEatingServiceServer) GetMealPlanEvents(context.Context, *messages.GetMealPlanEventsRequest) (*messages.MealPlanEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMealPlanEvents not implemented")
}
func (UnimplementedEatingServiceServer) GetMealPlanGroceryListItem(context.Context, *messages.GetMealPlanGroceryListItemRequest) (*messages.MealPlanGroceryListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMealPlanGroceryListItem not implemented")
}
func (UnimplementedEatingServiceServer) GetMealPlanGroceryListItemsForMealPlan(context.Context, *messages.GetMealPlanGroceryListItemsForMealPlanRequest) (*messages.MealPlanGroceryListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMealPlanGroceryListItemsForMealPlan not implemented")
}
func (UnimplementedEatingServiceServer) GetMealPlanOption(context.Context, *messages.GetMealPlanOptionRequest) (*messages.MealPlanOption, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMealPlanOption not implemented")
}
func (UnimplementedEatingServiceServer) GetMealPlanOptionVote(context.Context, *messages.GetMealPlanOptionVoteRequest) (*messages.MealPlanOptionVote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMealPlanOptionVote not implemented")
}
func (UnimplementedEatingServiceServer) GetMealPlanOptionVotes(context.Context, *messages.GetMealPlanOptionVotesRequest) (*messages.MealPlanOptionVote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMealPlanOptionVotes not implemented")
}
func (UnimplementedEatingServiceServer) GetMealPlanOptions(context.Context, *messages.GetMealPlanOptionsRequest) (*messages.MealPlanOption, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMealPlanOptions not implemented")
}
func (UnimplementedEatingServiceServer) GetMealPlanTask(context.Context, *messages.GetMealPlanTaskRequest) (*messages.MealPlanTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMealPlanTask not implemented")
}
func (UnimplementedEatingServiceServer) GetMealPlanTasks(context.Context, *messages.GetMealPlanTasksRequest) (*messages.MealPlanTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMealPlanTasks not implemented")
}
func (UnimplementedEatingServiceServer) GetMealPlansForHousehold(context.Context, *messages.GetMealPlansForHouseholdRequest) (*messages.MealPlan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMealPlansForHousehold not implemented")
}
func (UnimplementedEatingServiceServer) GetMeals(context.Context, *messages.GetMealsRequest) (*messages.Meal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeals not implemented")
}
func (UnimplementedEatingServiceServer) GetMermaidDiagramForRecipe(context.Context, *messages.GetMermaidDiagramForRecipeRequest) (*messages.GetMermaidDiagramForRecipeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMermaidDiagramForRecipe not implemented")
}
func (UnimplementedEatingServiceServer) GetOAuth2Client(context.Context, *messages.GetOAuth2ClientRequest) (*messages.OAuth2Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOAuth2Client not implemented")
}
func (UnimplementedEatingServiceServer) GetOAuth2Clients(context.Context, *messages.GetOAuth2ClientsRequest) (*messages.OAuth2Client, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOAuth2Clients not implemented")
}
func (UnimplementedEatingServiceServer) GetRandomValidIngredient(context.Context, *emptypb.Empty) (*messages.ValidIngredient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomValidIngredient not implemented")
}
func (UnimplementedEatingServiceServer) GetRandomValidInstrument(context.Context, *emptypb.Empty) (*messages.ValidInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomValidInstrument not implemented")
}
func (UnimplementedEatingServiceServer) GetRandomValidPreparation(context.Context, *emptypb.Empty) (*messages.ValidPreparation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomValidPreparation not implemented")
}
func (UnimplementedEatingServiceServer) GetRandomValidVessel(context.Context, *emptypb.Empty) (*messages.ValidVessel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomValidVessel not implemented")
}
func (UnimplementedEatingServiceServer) GetReceivedHouseholdInvitations(context.Context, *messages.GetReceivedHouseholdInvitationsRequest) (*messages.HouseholdInvitation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReceivedHouseholdInvitations not implemented")
}
func (UnimplementedEatingServiceServer) GetRecipe(context.Context, *messages.GetRecipeRequest) (*messages.Recipe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipe not implemented")
}
func (UnimplementedEatingServiceServer) GetRecipeMealPlanTasks(context.Context, *messages.GetRecipeMealPlanTasksRequest) (*messages.RecipePrepTaskStep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipeMealPlanTasks not implemented")
}
func (UnimplementedEatingServiceServer) GetRecipePrepTask(context.Context, *messages.GetRecipePrepTaskRequest) (*messages.RecipePrepTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipePrepTask not implemented")
}
func (UnimplementedEatingServiceServer) GetRecipePrepTasks(context.Context, *messages.GetRecipePrepTasksRequest) (*messages.RecipePrepTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipePrepTasks not implemented")
}
func (UnimplementedEatingServiceServer) GetRecipeRating(context.Context, *messages.GetRecipeRatingRequest) (*messages.RecipeRating, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipeRating not implemented")
}
func (UnimplementedEatingServiceServer) GetRecipeRatingsForRecipe(context.Context, *messages.GetRecipeRatingsForRecipeRequest) (*messages.RecipeRating, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipeRatingsForRecipe not implemented")
}
func (UnimplementedEatingServiceServer) GetRecipeStep(context.Context, *messages.GetRecipeStepRequest) (*messages.RecipeStep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipeStep not implemented")
}
func (UnimplementedEatingServiceServer) GetRecipeStepCompletionCondition(context.Context, *messages.GetRecipeStepCompletionConditionRequest) (*messages.RecipeStepCompletionCondition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipeStepCompletionCondition not implemented")
}
func (UnimplementedEatingServiceServer) GetRecipeStepCompletionConditions(context.Context, *messages.GetRecipeStepCompletionConditionsRequest) (*messages.RecipeStepCompletionCondition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipeStepCompletionConditions not implemented")
}
func (UnimplementedEatingServiceServer) GetRecipeStepIngredient(context.Context, *messages.GetRecipeStepIngredientRequest) (*messages.RecipeStepIngredient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipeStepIngredient not implemented")
}
func (UnimplementedEatingServiceServer) GetRecipeStepIngredients(context.Context, *messages.GetRecipeStepIngredientsRequest) (*messages.RecipeStepIngredient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipeStepIngredients not implemented")
}
func (UnimplementedEatingServiceServer) GetRecipeStepInstrument(context.Context, *messages.GetRecipeStepInstrumentRequest) (*messages.RecipeStepInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipeStepInstrument not implemented")
}
func (UnimplementedEatingServiceServer) GetRecipeStepInstruments(context.Context, *messages.GetRecipeStepInstrumentsRequest) (*messages.RecipeStepInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipeStepInstruments not implemented")
}
func (UnimplementedEatingServiceServer) GetRecipeStepProduct(context.Context, *messages.GetRecipeStepProductRequest) (*messages.RecipeStepProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipeStepProduct not implemented")
}
func (UnimplementedEatingServiceServer) GetRecipeStepProducts(context.Context, *messages.GetRecipeStepProductsRequest) (*messages.RecipeStepProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipeStepProducts not implemented")
}
func (UnimplementedEatingServiceServer) GetRecipeStepVessel(context.Context, *messages.GetRecipeStepVesselRequest) (*messages.RecipeStepVessel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipeStepVessel not implemented")
}
func (UnimplementedEatingServiceServer) GetRecipeStepVessels(context.Context, *messages.GetRecipeStepVesselsRequest) (*messages.RecipeStepVessel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipeStepVessels not implemented")
}
func (UnimplementedEatingServiceServer) GetRecipeSteps(context.Context, *messages.GetRecipeStepsRequest) (*messages.RecipeStep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipeSteps not implemented")
}
func (UnimplementedEatingServiceServer) GetRecipes(context.Context, *messages.GetRecipesRequest) (*messages.Recipe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipes not implemented")
}
func (UnimplementedEatingServiceServer) GetSelf(context.Context, *emptypb.Empty) (*messages.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSelf not implemented")
}
func (UnimplementedEatingServiceServer) GetSentHouseholdInvitations(context.Context, *messages.GetSentHouseholdInvitationsRequest) (*messages.HouseholdInvitation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSentHouseholdInvitations not implemented")
}
func (UnimplementedEatingServiceServer) GetServiceSetting(context.Context, *messages.GetServiceSettingRequest) (*messages.ServiceSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceSetting not implemented")
}
func (UnimplementedEatingServiceServer) GetServiceSettingConfigurationByName(context.Context, *messages.GetServiceSettingConfigurationByNameRequest) (*messages.ServiceSettingConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceSettingConfigurationByName not implemented")
}
func (UnimplementedEatingServiceServer) GetServiceSettingConfigurationsForHousehold(context.Context, *messages.GetServiceSettingConfigurationsForHouseholdRequest) (*messages.ServiceSettingConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceSettingConfigurationsForHousehold not implemented")
}
func (UnimplementedEatingServiceServer) GetServiceSettingConfigurationsForUser(context.Context, *messages.GetServiceSettingConfigurationsForUserRequest) (*messages.ServiceSettingConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceSettingConfigurationsForUser not implemented")
}
func (UnimplementedEatingServiceServer) GetServiceSettings(context.Context, *messages.GetServiceSettingsRequest) (*messages.ServiceSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceSettings not implemented")
}
func (UnimplementedEatingServiceServer) GetUser(context.Context, *messages.GetUserRequest) (*messages.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedEatingServiceServer) GetUserIngredientPreferences(context.Context, *messages.GetUserIngredientPreferencesRequest) (*messages.UserIngredientPreference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserIngredientPreferences not implemented")
}
func (UnimplementedEatingServiceServer) GetUserNotification(context.Context, *messages.GetUserNotificationRequest) (*messages.UserNotification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNotification not implemented")
}
func (UnimplementedEatingServiceServer) GetUserNotifications(context.Context, *messages.GetUserNotificationsRequest) (*messages.UserNotification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNotifications not implemented")
}
func (UnimplementedEatingServiceServer) GetUsers(context.Context, *messages.GetUsersRequest) (*messages.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedEatingServiceServer) GetValidIngredient(context.Context, *messages.GetValidIngredientRequest) (*messages.ValidIngredient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidIngredient not implemented")
}
func (UnimplementedEatingServiceServer) GetValidIngredientGroup(context.Context, *messages.GetValidIngredientGroupRequest) (*messages.ValidIngredientGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidIngredientGroup not implemented")
}
func (UnimplementedEatingServiceServer) GetValidIngredientGroups(context.Context, *messages.GetValidIngredientGroupsRequest) (*messages.ValidIngredientGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidIngredientGroups not implemented")
}
func (UnimplementedEatingServiceServer) GetValidIngredientMeasurementUnit(context.Context, *messages.GetValidIngredientMeasurementUnitRequest) (*messages.ValidIngredientMeasurementUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidIngredientMeasurementUnit not implemented")
}
func (UnimplementedEatingServiceServer) GetValidIngredientMeasurementUnits(context.Context, *messages.GetValidIngredientMeasurementUnitsRequest) (*messages.ValidIngredientMeasurementUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidIngredientMeasurementUnits not implemented")
}
func (UnimplementedEatingServiceServer) GetValidIngredientMeasurementUnitsByIngredient(context.Context, *messages.GetValidIngredientMeasurementUnitsByIngredientRequest) (*messages.ValidIngredientMeasurementUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidIngredientMeasurementUnitsByIngredient not implemented")
}
func (UnimplementedEatingServiceServer) GetValidIngredientMeasurementUnitsByMeasurementUnit(context.Context, *messages.GetValidIngredientMeasurementUnitsByMeasurementUnitRequest) (*messages.ValidIngredientMeasurementUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidIngredientMeasurementUnitsByMeasurementUnit not implemented")
}
func (UnimplementedEatingServiceServer) GetValidIngredientPreparation(context.Context, *messages.GetValidIngredientPreparationRequest) (*messages.ValidIngredientPreparation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidIngredientPreparation not implemented")
}
func (UnimplementedEatingServiceServer) GetValidIngredientPreparations(context.Context, *messages.GetValidIngredientPreparationsRequest) (*messages.ValidIngredientPreparation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidIngredientPreparations not implemented")
}
func (UnimplementedEatingServiceServer) GetValidIngredientPreparationsByIngredient(context.Context, *messages.GetValidIngredientPreparationsByIngredientRequest) (*messages.ValidIngredientPreparation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidIngredientPreparationsByIngredient not implemented")
}
func (UnimplementedEatingServiceServer) GetValidIngredientPreparationsByPreparation(context.Context, *messages.GetValidIngredientPreparationsByPreparationRequest) (*messages.ValidIngredientPreparation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidIngredientPreparationsByPreparation not implemented")
}
func (UnimplementedEatingServiceServer) GetValidIngredientState(context.Context, *messages.GetValidIngredientStateRequest) (*messages.ValidIngredientState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidIngredientState not implemented")
}
func (UnimplementedEatingServiceServer) GetValidIngredientStateIngredient(context.Context, *messages.GetValidIngredientStateIngredientRequest) (*messages.ValidIngredientStateIngredient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidIngredientStateIngredient not implemented")
}
func (UnimplementedEatingServiceServer) GetValidIngredientStateIngredients(context.Context, *messages.GetValidIngredientStateIngredientsRequest) (*messages.ValidIngredientStateIngredient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidIngredientStateIngredients not implemented")
}
func (UnimplementedEatingServiceServer) GetValidIngredientStateIngredientsByIngredient(context.Context, *messages.GetValidIngredientStateIngredientsByIngredientRequest) (*messages.ValidIngredientStateIngredient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidIngredientStateIngredientsByIngredient not implemented")
}
func (UnimplementedEatingServiceServer) GetValidIngredientStateIngredientsByIngredientState(context.Context, *messages.GetValidIngredientStateIngredientsByIngredientStateRequest) (*messages.ValidIngredientStateIngredient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidIngredientStateIngredientsByIngredientState not implemented")
}
func (UnimplementedEatingServiceServer) GetValidIngredientStates(context.Context, *messages.GetValidIngredientStatesRequest) (*messages.ValidIngredientState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidIngredientStates not implemented")
}
func (UnimplementedEatingServiceServer) GetValidIngredients(context.Context, *messages.GetValidIngredientsRequest) (*messages.ValidIngredient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidIngredients not implemented")
}
func (UnimplementedEatingServiceServer) GetValidInstrument(context.Context, *messages.GetValidInstrumentRequest) (*messages.ValidInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidInstrument not implemented")
}
func (UnimplementedEatingServiceServer) GetValidInstruments(context.Context, *messages.GetValidInstrumentsRequest) (*messages.ValidInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidInstruments not implemented")
}
func (UnimplementedEatingServiceServer) GetValidMeasurementUnit(context.Context, *messages.GetValidMeasurementUnitRequest) (*messages.ValidMeasurementUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidMeasurementUnit not implemented")
}
func (UnimplementedEatingServiceServer) GetValidMeasurementUnitConversion(context.Context, *messages.GetValidMeasurementUnitConversionRequest) (*messages.ValidMeasurementUnitConversion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidMeasurementUnitConversion not implemented")
}
func (UnimplementedEatingServiceServer) GetValidMeasurementUnitConversionsFromUnit(context.Context, *messages.GetValidMeasurementUnitConversionsFromUnitRequest) (*messages.ValidMeasurementUnitConversion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidMeasurementUnitConversionsFromUnit not implemented")
}
func (UnimplementedEatingServiceServer) GetValidMeasurementUnitConversionsToUnit(context.Context, *messages.GetValidMeasurementUnitConversionsToUnitRequest) (*messages.ValidMeasurementUnitConversion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidMeasurementUnitConversionsToUnit not implemented")
}
func (UnimplementedEatingServiceServer) GetValidMeasurementUnits(context.Context, *messages.GetValidMeasurementUnitsRequest) (*messages.ValidMeasurementUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidMeasurementUnits not implemented")
}
func (UnimplementedEatingServiceServer) GetValidPreparation(context.Context, *messages.GetValidPreparationRequest) (*messages.ValidPreparation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidPreparation not implemented")
}
func (UnimplementedEatingServiceServer) GetValidPreparationInstrument(context.Context, *messages.GetValidPreparationInstrumentRequest) (*messages.ValidPreparationInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidPreparationInstrument not implemented")
}
func (UnimplementedEatingServiceServer) GetValidPreparationInstruments(context.Context, *messages.GetValidPreparationInstrumentsRequest) (*messages.ValidPreparationInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidPreparationInstruments not implemented")
}
func (UnimplementedEatingServiceServer) GetValidPreparationInstrumentsByInstrument(context.Context, *messages.GetValidPreparationInstrumentsByInstrumentRequest) (*messages.ValidPreparationInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidPreparationInstrumentsByInstrument not implemented")
}
func (UnimplementedEatingServiceServer) GetValidPreparationInstrumentsByPreparation(context.Context, *messages.GetValidPreparationInstrumentsByPreparationRequest) (*messages.ValidPreparationInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidPreparationInstrumentsByPreparation not implemented")
}
func (UnimplementedEatingServiceServer) GetValidPreparationVessel(context.Context, *messages.GetValidPreparationVesselRequest) (*messages.ValidPreparationVessel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidPreparationVessel not implemented")
}
func (UnimplementedEatingServiceServer) GetValidPreparationVessels(context.Context, *messages.GetValidPreparationVesselsRequest) (*messages.ValidPreparationVessel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidPreparationVessels not implemented")
}
func (UnimplementedEatingServiceServer) GetValidPreparationVesselsByPreparation(context.Context, *messages.GetValidPreparationVesselsByPreparationRequest) (*messages.ValidPreparationVessel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidPreparationVesselsByPreparation not implemented")
}
func (UnimplementedEatingServiceServer) GetValidPreparationVesselsByVessel(context.Context, *messages.GetValidPreparationVesselsByVesselRequest) (*messages.ValidPreparationVessel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidPreparationVesselsByVessel not implemented")
}
func (UnimplementedEatingServiceServer) GetValidPreparations(context.Context, *messages.GetValidPreparationsRequest) (*messages.ValidPreparation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidPreparations not implemented")
}
func (UnimplementedEatingServiceServer) GetValidVessel(context.Context, *messages.GetValidVesselRequest) (*messages.ValidVessel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidVessel not implemented")
}
func (UnimplementedEatingServiceServer) GetValidVessels(context.Context, *messages.GetValidVesselsRequest) (*messages.ValidVessel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidVessels not implemented")
}
func (UnimplementedEatingServiceServer) GetWebhook(context.Context, *messages.GetWebhookRequest) (*messages.Webhook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebhook not implemented")
}
func (UnimplementedEatingServiceServer) GetWebhooks(context.Context, *messages.GetWebhooksRequest) (*messages.Webhook, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebhooks not implemented")
}
func (UnimplementedEatingServiceServer) LoginForToken(context.Context, *messages.UserLoginInput) (*messages.TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginForToken not implemented")
}
func (UnimplementedEatingServiceServer) PublishArbitraryQueueMessage(context.Context, *messages.ArbitraryQueueMessageRequestInput) (*messages.ArbitraryQueueMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishArbitraryQueueMessage not implemented")
}
func (UnimplementedEatingServiceServer) RedeemPasswordResetToken(context.Context, *messages.PasswordResetTokenRedemptionRequestInput) (*messages.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemPasswordResetToken not implemented")
}
func (UnimplementedEatingServiceServer) RefreshTOTPSecret(context.Context, *messages.TOTPSecretRefreshInput) (*messages.TOTPSecretRefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshTOTPSecret not implemented")
}
func (UnimplementedEatingServiceServer) RejectHouseholdInvitation(context.Context, *messages.RejectHouseholdInvitationRequest) (*messages.HouseholdInvitation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectHouseholdInvitation not implemented")
}
func (UnimplementedEatingServiceServer) RequestEmailVerificationEmail(context.Context, *emptypb.Empty) (*messages.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestEmailVerificationEmail not implemented")
}
func (UnimplementedEatingServiceServer) RequestPasswordResetToken(context.Context, *messages.PasswordResetTokenCreationRequestInput) (*messages.PasswordResetToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestPasswordResetToken not implemented")
}
func (UnimplementedEatingServiceServer) RequestUsernameReminder(context.Context, *messages.UsernameReminderRequestInput) (*messages.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestUsernameReminder not implemented")
}
func (UnimplementedEatingServiceServer) RunFinalizeMealPlanWorker(context.Context, *messages.FinalizeMealPlansRequest) (*messages.FinalizeMealPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunFinalizeMealPlanWorker not implemented")
}
func (UnimplementedEatingServiceServer) RunMealPlanGroceryListInitializerWorker(context.Context, *messages.InitializeMealPlanGroceryListRequest) (*messages.InitializeMealPlanGroceryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunMealPlanGroceryListInitializerWorker not implemented")
}
func (UnimplementedEatingServiceServer) RunMealPlanTaskCreatorWorker(context.Context, *messages.CreateMealPlanTasksRequest) (*messages.CreateMealPlanTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunMealPlanTaskCreatorWorker not implemented")
}
func (UnimplementedEatingServiceServer) SearchForMeals(context.Context, *messages.SearchForMealsRequest) (*messages.Meal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchForMeals not implemented")
}
func (UnimplementedEatingServiceServer) SearchForRecipes(context.Context, *messages.SearchForRecipesRequest) (*messages.Recipe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchForRecipes not implemented")
}
func (UnimplementedEatingServiceServer) SearchForServiceSettings(context.Context, *messages.SearchForServiceSettingsRequest) (*messages.ServiceSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchForServiceSettings not implemented")
}
func (UnimplementedEatingServiceServer) SearchForUsers(context.Context, *messages.SearchForUsersRequest) (*messages.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchForUsers not implemented")
}
func (UnimplementedEatingServiceServer) SearchForValidIngredientGroups(context.Context, *messages.SearchForValidIngredientGroupsRequest) (*messages.ValidIngredientGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchForValidIngredientGroups not implemented")
}
func (UnimplementedEatingServiceServer) SearchForValidIngredientStates(context.Context, *messages.SearchForValidIngredientStatesRequest) (*messages.ValidIngredientState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchForValidIngredientStates not implemented")
}
func (UnimplementedEatingServiceServer) SearchForValidIngredients(context.Context, *messages.SearchForValidIngredientsRequest) (*messages.ValidIngredient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchForValidIngredients not implemented")
}
func (UnimplementedEatingServiceServer) SearchForValidInstruments(context.Context, *messages.SearchForValidInstrumentsRequest) (*messages.ValidInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchForValidInstruments not implemented")
}
func (UnimplementedEatingServiceServer) SearchForValidMeasurementUnits(context.Context, *messages.SearchForValidMeasurementUnitsRequest) (*messages.ValidMeasurementUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchForValidMeasurementUnits not implemented")
}
func (UnimplementedEatingServiceServer) SearchForValidPreparations(context.Context, *messages.SearchForValidPreparationsRequest) (*messages.ValidPreparation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchForValidPreparations not implemented")
}
func (UnimplementedEatingServiceServer) SearchForValidVessels(context.Context, *messages.SearchForValidVesselsRequest) (*messages.ValidVessel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchForValidVessels not implemented")
}
func (UnimplementedEatingServiceServer) SearchValidIngredientsByPreparation(context.Context, *messages.SearchValidIngredientsByPreparationRequest) (*messages.ValidIngredient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchValidIngredientsByPreparation not implemented")
}
func (UnimplementedEatingServiceServer) SearchValidMeasurementUnitsByIngredient(context.Context, *messages.SearchValidMeasurementUnitsByIngredientRequest) (*messages.ValidMeasurementUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchValidMeasurementUnitsByIngredient not implemented")
}
func (UnimplementedEatingServiceServer) SetDefaultHousehold(context.Context, *messages.SetDefaultHouseholdRequest) (*messages.Household, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultHousehold not implemented")
}
func (UnimplementedEatingServiceServer) TransferHouseholdOwnership(context.Context, *messages.TransferHouseholdOwnershipRequest) (*messages.Household, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferHouseholdOwnership not implemented")
}
func (UnimplementedEatingServiceServer) UpdateHousehold(context.Context, *messages.UpdateHouseholdRequest) (*messages.Household, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHousehold not implemented")
}
func (UnimplementedEatingServiceServer) UpdateHouseholdInstrumentOwnership(context.Context, *messages.UpdateHouseholdInstrumentOwnershipRequest) (*messages.HouseholdInstrumentOwnership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHouseholdInstrumentOwnership not implemented")
}
func (UnimplementedEatingServiceServer) UpdateHouseholdMemberPermissions(context.Context, *messages.UpdateHouseholdMemberPermissionsRequest) (*messages.UserPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHouseholdMemberPermissions not implemented")
}
func (UnimplementedEatingServiceServer) UpdateMealPlan(context.Context, *messages.UpdateMealPlanRequest) (*messages.MealPlan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMealPlan not implemented")
}
func (UnimplementedEatingServiceServer) UpdateMealPlanEvent(context.Context, *messages.UpdateMealPlanEventRequest) (*messages.MealPlanEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMealPlanEvent not implemented")
}
func (UnimplementedEatingServiceServer) UpdateMealPlanGroceryListItem(context.Context, *messages.UpdateMealPlanGroceryListItemRequest) (*messages.MealPlanGroceryListItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMealPlanGroceryListItem not implemented")
}
func (UnimplementedEatingServiceServer) UpdateMealPlanOption(context.Context, *messages.UpdateMealPlanOptionRequest) (*messages.MealPlanOption, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMealPlanOption not implemented")
}
func (UnimplementedEatingServiceServer) UpdateMealPlanOptionVote(context.Context, *messages.UpdateMealPlanOptionVoteRequest) (*messages.MealPlanOptionVote, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMealPlanOptionVote not implemented")
}
func (UnimplementedEatingServiceServer) UpdateMealPlanTaskStatus(context.Context, *messages.UpdateMealPlanTaskStatusRequest) (*messages.MealPlanTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMealPlanTaskStatus not implemented")
}
func (UnimplementedEatingServiceServer) UpdatePassword(context.Context, *messages.PasswordUpdateInput) (*messages.PasswordResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedEatingServiceServer) UpdateRecipe(context.Context, *messages.UpdateRecipeRequest) (*messages.Recipe, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecipe not implemented")
}
func (UnimplementedEatingServiceServer) UpdateRecipePrepTask(context.Context, *messages.UpdateRecipePrepTaskRequest) (*messages.RecipePrepTask, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecipePrepTask not implemented")
}
func (UnimplementedEatingServiceServer) UpdateRecipeRating(context.Context, *messages.UpdateRecipeRatingRequest) (*messages.RecipeRating, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecipeRating not implemented")
}
func (UnimplementedEatingServiceServer) UpdateRecipeStep(context.Context, *messages.UpdateRecipeStepRequest) (*messages.RecipeStep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecipeStep not implemented")
}
func (UnimplementedEatingServiceServer) UpdateRecipeStepCompletionCondition(context.Context, *messages.UpdateRecipeStepCompletionConditionRequest) (*messages.RecipeStepCompletionCondition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecipeStepCompletionCondition not implemented")
}
func (UnimplementedEatingServiceServer) UpdateRecipeStepIngredient(context.Context, *messages.UpdateRecipeStepIngredientRequest) (*messages.RecipeStepIngredient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecipeStepIngredient not implemented")
}
func (UnimplementedEatingServiceServer) UpdateRecipeStepInstrument(context.Context, *messages.UpdateRecipeStepInstrumentRequest) (*messages.RecipeStepInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecipeStepInstrument not implemented")
}
func (UnimplementedEatingServiceServer) UpdateRecipeStepProduct(context.Context, *messages.UpdateRecipeStepProductRequest) (*messages.RecipeStepProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecipeStepProduct not implemented")
}
func (UnimplementedEatingServiceServer) UpdateRecipeStepVessel(context.Context, *messages.UpdateRecipeStepVesselRequest) (*messages.RecipeStepVessel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecipeStepVessel not implemented")
}
func (UnimplementedEatingServiceServer) UpdateServiceSettingConfiguration(context.Context, *messages.UpdateServiceSettingConfigurationRequest) (*messages.ServiceSettingConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceSettingConfiguration not implemented")
}
func (UnimplementedEatingServiceServer) UpdateUserDetails(context.Context, *messages.UserDetailsUpdateRequestInput) (*messages.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserDetails not implemented")
}
func (UnimplementedEatingServiceServer) UpdateUserEmailAddress(context.Context, *messages.UserEmailAddressUpdateInput) (*messages.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserEmailAddress not implemented")
}
func (UnimplementedEatingServiceServer) UpdateUserIngredientPreference(context.Context, *messages.UpdateUserIngredientPreferenceRequest) (*messages.UserIngredientPreference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserIngredientPreference not implemented")
}
func (UnimplementedEatingServiceServer) UpdateUserNotification(context.Context, *messages.UpdateUserNotificationRequest) (*messages.UserNotification, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserNotification not implemented")
}
func (UnimplementedEatingServiceServer) UpdateUserUsername(context.Context, *messages.UsernameUpdateInput) (*messages.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserUsername not implemented")
}
func (UnimplementedEatingServiceServer) UpdateValidIngredient(context.Context, *messages.UpdateValidIngredientRequest) (*messages.ValidIngredient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValidIngredient not implemented")
}
func (UnimplementedEatingServiceServer) UpdateValidIngredientGroup(context.Context, *messages.UpdateValidIngredientGroupRequest) (*messages.ValidIngredientGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValidIngredientGroup not implemented")
}
func (UnimplementedEatingServiceServer) UpdateValidIngredientMeasurementUnit(context.Context, *messages.UpdateValidIngredientMeasurementUnitRequest) (*messages.ValidIngredientMeasurementUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValidIngredientMeasurementUnit not implemented")
}
func (UnimplementedEatingServiceServer) UpdateValidIngredientPreparation(context.Context, *messages.UpdateValidIngredientPreparationRequest) (*messages.ValidIngredientPreparation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValidIngredientPreparation not implemented")
}
func (UnimplementedEatingServiceServer) UpdateValidIngredientState(context.Context, *messages.UpdateValidIngredientStateRequest) (*messages.ValidIngredientState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValidIngredientState not implemented")
}
func (UnimplementedEatingServiceServer) UpdateValidIngredientStateIngredient(context.Context, *messages.UpdateValidIngredientStateIngredientRequest) (*messages.ValidIngredientStateIngredient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValidIngredientStateIngredient not implemented")
}
func (UnimplementedEatingServiceServer) UpdateValidInstrument(context.Context, *messages.UpdateValidInstrumentRequest) (*messages.ValidInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValidInstrument not implemented")
}
func (UnimplementedEatingServiceServer) UpdateValidMeasurementUnit(context.Context, *messages.UpdateValidMeasurementUnitRequest) (*messages.ValidMeasurementUnit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValidMeasurementUnit not implemented")
}
func (UnimplementedEatingServiceServer) UpdateValidMeasurementUnitConversion(context.Context, *messages.UpdateValidMeasurementUnitConversionRequest) (*messages.ValidMeasurementUnitConversion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValidMeasurementUnitConversion not implemented")
}
func (UnimplementedEatingServiceServer) UpdateValidPreparation(context.Context, *messages.UpdateValidPreparationRequest) (*messages.ValidPreparation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValidPreparation not implemented")
}
func (UnimplementedEatingServiceServer) UpdateValidPreparationInstrument(context.Context, *messages.UpdateValidPreparationInstrumentRequest) (*messages.ValidPreparationInstrument, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValidPreparationInstrument not implemented")
}
func (UnimplementedEatingServiceServer) UpdateValidPreparationVessel(context.Context, *messages.UpdateValidPreparationVesselRequest) (*messages.ValidPreparationVessel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValidPreparationVessel not implemented")
}
func (UnimplementedEatingServiceServer) UpdateValidVessel(context.Context, *messages.UpdateValidVesselRequest) (*messages.ValidVessel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValidVessel not implemented")
}
func (UnimplementedEatingServiceServer) UploadUserAvatar(context.Context, *messages.AvatarUpdateInput) (*messages.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadUserAvatar not implemented")
}
func (UnimplementedEatingServiceServer) VerifyEmailAddress(context.Context, *messages.EmailAddressVerificationRequestInput) (*messages.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmailAddress not implemented")
}
func (UnimplementedEatingServiceServer) VerifyTOTPSecret(context.Context, *messages.TOTPSecretVerificationInput) (*messages.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTOTPSecret not implemented")
}
func (UnimplementedEatingServiceServer) mustEmbedUnimplementedEatingServiceServer() {}
func (UnimplementedEatingServiceServer) testEmbeddedByValue()                       {}

// UnsafeEatingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EatingServiceServer will
// result in compilation errors.
type UnsafeEatingServiceServer interface {
	mustEmbedUnimplementedEatingServiceServer()
}

func RegisterEatingServiceServer(s grpc.ServiceRegistrar, srv EatingServiceServer) {
	// If the following call pancis, it indicates UnimplementedEatingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EatingService_ServiceDesc, srv)
}

func _EatingService_AcceptHouseholdInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AcceptHouseholdInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).AcceptHouseholdInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_AcceptHouseholdInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).AcceptHouseholdInvitation(ctx, req.(*messages.AcceptHouseholdInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_AdminLoginForToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UserLoginInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).AdminLoginForToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_AdminLoginForToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).AdminLoginForToken(ctx, req.(*messages.UserLoginInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_AdminUpdateUserStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UserAccountStatusUpdateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).AdminUpdateUserStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_AdminUpdateUserStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).AdminUpdateUserStatus(ctx, req.(*messages.UserAccountStatusUpdateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_AggregateUserDataReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).AggregateUserDataReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_AggregateUserDataReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).AggregateUserDataReport(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveHousehold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveHouseholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveHousehold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveHousehold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveHousehold(ctx, req.(*messages.ArchiveHouseholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveHouseholdInstrumentOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveHouseholdInstrumentOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveHouseholdInstrumentOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveHouseholdInstrumentOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveHouseholdInstrumentOwnership(ctx, req.(*messages.ArchiveHouseholdInstrumentOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveMealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveMeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveMeal(ctx, req.(*messages.ArchiveMealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveMealPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveMealPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveMealPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveMealPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveMealPlan(ctx, req.(*messages.ArchiveMealPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveMealPlanEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveMealPlanEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveMealPlanEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveMealPlanEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveMealPlanEvent(ctx, req.(*messages.ArchiveMealPlanEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveMealPlanGroceryListItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveMealPlanGroceryListItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveMealPlanGroceryListItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveMealPlanGroceryListItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveMealPlanGroceryListItem(ctx, req.(*messages.ArchiveMealPlanGroceryListItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveMealPlanOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveMealPlanOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveMealPlanOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveMealPlanOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveMealPlanOption(ctx, req.(*messages.ArchiveMealPlanOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveMealPlanOptionVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveMealPlanOptionVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveMealPlanOptionVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveMealPlanOptionVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveMealPlanOptionVote(ctx, req.(*messages.ArchiveMealPlanOptionVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveOAuth2Client_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveOAuth2ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveOAuth2Client(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveOAuth2Client_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveOAuth2Client(ctx, req.(*messages.ArchiveOAuth2ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveRecipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveRecipe(ctx, req.(*messages.ArchiveRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveRecipePrepTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveRecipePrepTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveRecipePrepTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveRecipePrepTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveRecipePrepTask(ctx, req.(*messages.ArchiveRecipePrepTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveRecipeRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveRecipeRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveRecipeRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveRecipeRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveRecipeRating(ctx, req.(*messages.ArchiveRecipeRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveRecipeStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveRecipeStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveRecipeStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveRecipeStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveRecipeStep(ctx, req.(*messages.ArchiveRecipeStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveRecipeStepCompletionCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveRecipeStepCompletionConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveRecipeStepCompletionCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveRecipeStepCompletionCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveRecipeStepCompletionCondition(ctx, req.(*messages.ArchiveRecipeStepCompletionConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveRecipeStepIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveRecipeStepIngredientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveRecipeStepIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveRecipeStepIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveRecipeStepIngredient(ctx, req.(*messages.ArchiveRecipeStepIngredientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveRecipeStepInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveRecipeStepInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveRecipeStepInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveRecipeStepInstrument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveRecipeStepInstrument(ctx, req.(*messages.ArchiveRecipeStepInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveRecipeStepProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveRecipeStepProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveRecipeStepProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveRecipeStepProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveRecipeStepProduct(ctx, req.(*messages.ArchiveRecipeStepProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveRecipeStepVessel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveRecipeStepVesselRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveRecipeStepVessel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveRecipeStepVessel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveRecipeStepVessel(ctx, req.(*messages.ArchiveRecipeStepVesselRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveServiceSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveServiceSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveServiceSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveServiceSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveServiceSetting(ctx, req.(*messages.ArchiveServiceSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveServiceSettingConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveServiceSettingConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveServiceSettingConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveServiceSettingConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveServiceSettingConfiguration(ctx, req.(*messages.ArchiveServiceSettingConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveUser(ctx, req.(*messages.ArchiveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveUserIngredientPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveUserIngredientPreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveUserIngredientPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveUserIngredientPreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveUserIngredientPreference(ctx, req.(*messages.ArchiveUserIngredientPreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveUserMembership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveUserMembershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveUserMembership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveUserMembership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveUserMembership(ctx, req.(*messages.ArchiveUserMembershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveValidIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveValidIngredientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveValidIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveValidIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveValidIngredient(ctx, req.(*messages.ArchiveValidIngredientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveValidIngredientGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveValidIngredientGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveValidIngredientGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveValidIngredientGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveValidIngredientGroup(ctx, req.(*messages.ArchiveValidIngredientGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveValidIngredientMeasurementUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveValidIngredientMeasurementUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveValidIngredientMeasurementUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveValidIngredientMeasurementUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveValidIngredientMeasurementUnit(ctx, req.(*messages.ArchiveValidIngredientMeasurementUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveValidIngredientPreparation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveValidIngredientPreparationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveValidIngredientPreparation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveValidIngredientPreparation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveValidIngredientPreparation(ctx, req.(*messages.ArchiveValidIngredientPreparationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveValidIngredientState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveValidIngredientStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveValidIngredientState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveValidIngredientState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveValidIngredientState(ctx, req.(*messages.ArchiveValidIngredientStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveValidIngredientStateIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveValidIngredientStateIngredientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveValidIngredientStateIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveValidIngredientStateIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveValidIngredientStateIngredient(ctx, req.(*messages.ArchiveValidIngredientStateIngredientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveValidInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveValidInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveValidInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveValidInstrument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveValidInstrument(ctx, req.(*messages.ArchiveValidInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveValidMeasurementUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveValidMeasurementUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveValidMeasurementUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveValidMeasurementUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveValidMeasurementUnit(ctx, req.(*messages.ArchiveValidMeasurementUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveValidMeasurementUnitConversion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveValidMeasurementUnitConversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveValidMeasurementUnitConversion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveValidMeasurementUnitConversion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveValidMeasurementUnitConversion(ctx, req.(*messages.ArchiveValidMeasurementUnitConversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveValidPreparation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveValidPreparationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveValidPreparation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveValidPreparation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveValidPreparation(ctx, req.(*messages.ArchiveValidPreparationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveValidPreparationInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveValidPreparationInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveValidPreparationInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveValidPreparationInstrument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveValidPreparationInstrument(ctx, req.(*messages.ArchiveValidPreparationInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveValidPreparationVessel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveValidPreparationVesselRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveValidPreparationVessel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveValidPreparationVessel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveValidPreparationVessel(ctx, req.(*messages.ArchiveValidPreparationVesselRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveValidVessel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveValidVesselRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveValidVessel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveValidVessel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveValidVessel(ctx, req.(*messages.ArchiveValidVesselRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveWebhook(ctx, req.(*messages.ArchiveWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_ArchiveWebhookTriggerEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArchiveWebhookTriggerEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).ArchiveWebhookTriggerEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_ArchiveWebhookTriggerEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).ArchiveWebhookTriggerEvent(ctx, req.(*messages.ArchiveWebhookTriggerEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CancelHouseholdInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.CancelHouseholdInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CancelHouseholdInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CancelHouseholdInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CancelHouseholdInvitation(ctx, req.(*messages.CancelHouseholdInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CheckForReadiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CheckForReadiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CheckForReadiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CheckForReadiness(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CheckPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UserPermissionsRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CheckPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CheckPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CheckPermissions(ctx, req.(*messages.UserPermissionsRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CloneRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.CloneRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CloneRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CloneRecipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CloneRecipe(ctx, req.(*messages.CloneRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateHousehold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.HouseholdCreationRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateHousehold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateHousehold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateHousehold(ctx, req.(*messages.HouseholdCreationRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateHouseholdInstrumentOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.HouseholdInstrumentOwnershipCreationRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateHouseholdInstrumentOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateHouseholdInstrumentOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateHouseholdInstrumentOwnership(ctx, req.(*messages.HouseholdInstrumentOwnershipCreationRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateHouseholdInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.CreateHouseholdInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateHouseholdInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateHouseholdInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateHouseholdInvitation(ctx, req.(*messages.CreateHouseholdInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.MealCreationRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateMeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateMeal(ctx, req.(*messages.MealCreationRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateMealPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.MealPlanCreationRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateMealPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateMealPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateMealPlan(ctx, req.(*messages.MealPlanCreationRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateMealPlanEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.CreateMealPlanEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateMealPlanEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateMealPlanEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateMealPlanEvent(ctx, req.(*messages.CreateMealPlanEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateMealPlanGroceryListItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.CreateMealPlanGroceryListItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateMealPlanGroceryListItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateMealPlanGroceryListItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateMealPlanGroceryListItem(ctx, req.(*messages.CreateMealPlanGroceryListItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateMealPlanOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.CreateMealPlanOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateMealPlanOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateMealPlanOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateMealPlanOption(ctx, req.(*messages.CreateMealPlanOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateMealPlanOptionVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.CreateMealPlanOptionVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateMealPlanOptionVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateMealPlanOptionVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateMealPlanOptionVote(ctx, req.(*messages.CreateMealPlanOptionVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateMealPlanTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.CreateMealPlanTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateMealPlanTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateMealPlanTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateMealPlanTask(ctx, req.(*messages.CreateMealPlanTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateOAuth2Client_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.OAuth2ClientCreationRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateOAuth2Client(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateOAuth2Client_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateOAuth2Client(ctx, req.(*messages.OAuth2ClientCreationRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.RecipeCreationRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateRecipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateRecipe(ctx, req.(*messages.RecipeCreationRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateRecipePrepTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.CreateRecipePrepTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateRecipePrepTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateRecipePrepTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateRecipePrepTask(ctx, req.(*messages.CreateRecipePrepTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateRecipeRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.CreateRecipeRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateRecipeRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateRecipeRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateRecipeRating(ctx, req.(*messages.CreateRecipeRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateRecipeStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.CreateRecipeStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateRecipeStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateRecipeStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateRecipeStep(ctx, req.(*messages.CreateRecipeStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateRecipeStepCompletionCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.CreateRecipeStepCompletionConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateRecipeStepCompletionCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateRecipeStepCompletionCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateRecipeStepCompletionCondition(ctx, req.(*messages.CreateRecipeStepCompletionConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateRecipeStepIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.CreateRecipeStepIngredientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateRecipeStepIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateRecipeStepIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateRecipeStepIngredient(ctx, req.(*messages.CreateRecipeStepIngredientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateRecipeStepInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.CreateRecipeStepInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateRecipeStepInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateRecipeStepInstrument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateRecipeStepInstrument(ctx, req.(*messages.CreateRecipeStepInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateRecipeStepProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.CreateRecipeStepProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateRecipeStepProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateRecipeStepProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateRecipeStepProduct(ctx, req.(*messages.CreateRecipeStepProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateRecipeStepVessel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.CreateRecipeStepVesselRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateRecipeStepVessel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateRecipeStepVessel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateRecipeStepVessel(ctx, req.(*messages.CreateRecipeStepVesselRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateServiceSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ServiceSettingCreationRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateServiceSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateServiceSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateServiceSetting(ctx, req.(*messages.ServiceSettingCreationRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateServiceSettingConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ServiceSettingConfigurationCreationRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateServiceSettingConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateServiceSettingConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateServiceSettingConfiguration(ctx, req.(*messages.ServiceSettingConfigurationCreationRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UserRegistrationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateUser(ctx, req.(*messages.UserRegistrationInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateUserIngredientPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UserIngredientPreferenceCreationRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateUserIngredientPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateUserIngredientPreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateUserIngredientPreference(ctx, req.(*messages.UserIngredientPreferenceCreationRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateUserNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UserNotificationCreationRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateUserNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateUserNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateUserNotification(ctx, req.(*messages.UserNotificationCreationRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateValidIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ValidIngredientCreationRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateValidIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateValidIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateValidIngredient(ctx, req.(*messages.ValidIngredientCreationRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateValidIngredientGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ValidIngredientGroupCreationRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateValidIngredientGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateValidIngredientGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateValidIngredientGroup(ctx, req.(*messages.ValidIngredientGroupCreationRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateValidIngredientMeasurementUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ValidIngredientMeasurementUnitCreationRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateValidIngredientMeasurementUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateValidIngredientMeasurementUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateValidIngredientMeasurementUnit(ctx, req.(*messages.ValidIngredientMeasurementUnitCreationRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateValidIngredientPreparation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ValidIngredientPreparationCreationRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateValidIngredientPreparation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateValidIngredientPreparation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateValidIngredientPreparation(ctx, req.(*messages.ValidIngredientPreparationCreationRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateValidIngredientState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ValidIngredientStateCreationRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateValidIngredientState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateValidIngredientState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateValidIngredientState(ctx, req.(*messages.ValidIngredientStateCreationRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateValidIngredientStateIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ValidIngredientStateIngredientCreationRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateValidIngredientStateIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateValidIngredientStateIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateValidIngredientStateIngredient(ctx, req.(*messages.ValidIngredientStateIngredientCreationRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateValidInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ValidInstrumentCreationRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateValidInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateValidInstrument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateValidInstrument(ctx, req.(*messages.ValidInstrumentCreationRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateValidMeasurementUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ValidMeasurementUnitCreationRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateValidMeasurementUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateValidMeasurementUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateValidMeasurementUnit(ctx, req.(*messages.ValidMeasurementUnitCreationRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateValidMeasurementUnitConversion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ValidMeasurementUnitConversionCreationRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateValidMeasurementUnitConversion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateValidMeasurementUnitConversion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateValidMeasurementUnitConversion(ctx, req.(*messages.ValidMeasurementUnitConversionCreationRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateValidPreparation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ValidPreparationCreationRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateValidPreparation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateValidPreparation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateValidPreparation(ctx, req.(*messages.ValidPreparationCreationRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateValidPreparationInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ValidPreparationInstrumentCreationRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateValidPreparationInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateValidPreparationInstrument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateValidPreparationInstrument(ctx, req.(*messages.ValidPreparationInstrumentCreationRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateValidPreparationVessel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ValidPreparationVesselCreationRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateValidPreparationVessel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateValidPreparationVessel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateValidPreparationVessel(ctx, req.(*messages.ValidPreparationVesselCreationRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateValidVessel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ValidVesselCreationRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateValidVessel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateValidVessel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateValidVessel(ctx, req.(*messages.ValidVesselCreationRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.WebhookCreationRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateWebhook(ctx, req.(*messages.WebhookCreationRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_CreateWebhookTriggerEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.CreateWebhookTriggerEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).CreateWebhookTriggerEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_CreateWebhookTriggerEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).CreateWebhookTriggerEvent(ctx, req.(*messages.CreateWebhookTriggerEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_DestroyAllUserData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).DestroyAllUserData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_DestroyAllUserData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).DestroyAllUserData(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_FetchUserDataReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.FetchUserDataReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).FetchUserDataReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_FetchUserDataReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).FetchUserDataReport(ctx, req.(*messages.FetchUserDataReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_FinalizeMealPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.FinalizeMealPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).FinalizeMealPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_FinalizeMealPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).FinalizeMealPlan(ctx, req.(*messages.FinalizeMealPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetActiveHousehold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetActiveHousehold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetActiveHousehold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetActiveHousehold(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetAuditLogEntriesForHousehold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetAuditLogEntriesForHouseholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetAuditLogEntriesForHousehold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetAuditLogEntriesForHousehold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetAuditLogEntriesForHousehold(ctx, req.(*messages.GetAuditLogEntriesForHouseholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetAuditLogEntriesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetAuditLogEntriesForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetAuditLogEntriesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetAuditLogEntriesForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetAuditLogEntriesForUser(ctx, req.(*messages.GetAuditLogEntriesForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetAuditLogEntryByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetAuditLogEntryByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetAuditLogEntryByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetAuditLogEntryByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetAuditLogEntryByID(ctx, req.(*messages.GetAuditLogEntryByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetAuthStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetAuthStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetAuthStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetAuthStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetHousehold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetHouseholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetHousehold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetHousehold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetHousehold(ctx, req.(*messages.GetHouseholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetHouseholdInstrumentOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetHouseholdInstrumentOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetHouseholdInstrumentOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetHouseholdInstrumentOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetHouseholdInstrumentOwnership(ctx, req.(*messages.GetHouseholdInstrumentOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetHouseholdInstrumentOwnerships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetHouseholdInstrumentOwnershipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetHouseholdInstrumentOwnerships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetHouseholdInstrumentOwnerships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetHouseholdInstrumentOwnerships(ctx, req.(*messages.GetHouseholdInstrumentOwnershipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetHouseholdInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetHouseholdInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetHouseholdInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetHouseholdInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetHouseholdInvitation(ctx, req.(*messages.GetHouseholdInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetHouseholdInvitationByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetHouseholdInvitationByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetHouseholdInvitationByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetHouseholdInvitationByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetHouseholdInvitationByID(ctx, req.(*messages.GetHouseholdInvitationByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetHouseholds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetHouseholdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetHouseholds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetHouseholds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetHouseholds(ctx, req.(*messages.GetHouseholdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetMealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetMeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetMeal(ctx, req.(*messages.GetMealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetMealPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetMealPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetMealPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetMealPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetMealPlan(ctx, req.(*messages.GetMealPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetMealPlanEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetMealPlanEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetMealPlanEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetMealPlanEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetMealPlanEvent(ctx, req.(*messages.GetMealPlanEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetMealPlanEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetMealPlanEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetMealPlanEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetMealPlanEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetMealPlanEvents(ctx, req.(*messages.GetMealPlanEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetMealPlanGroceryListItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetMealPlanGroceryListItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetMealPlanGroceryListItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetMealPlanGroceryListItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetMealPlanGroceryListItem(ctx, req.(*messages.GetMealPlanGroceryListItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetMealPlanGroceryListItemsForMealPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetMealPlanGroceryListItemsForMealPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetMealPlanGroceryListItemsForMealPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetMealPlanGroceryListItemsForMealPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetMealPlanGroceryListItemsForMealPlan(ctx, req.(*messages.GetMealPlanGroceryListItemsForMealPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetMealPlanOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetMealPlanOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetMealPlanOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetMealPlanOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetMealPlanOption(ctx, req.(*messages.GetMealPlanOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetMealPlanOptionVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetMealPlanOptionVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetMealPlanOptionVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetMealPlanOptionVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetMealPlanOptionVote(ctx, req.(*messages.GetMealPlanOptionVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetMealPlanOptionVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetMealPlanOptionVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetMealPlanOptionVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetMealPlanOptionVotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetMealPlanOptionVotes(ctx, req.(*messages.GetMealPlanOptionVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetMealPlanOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetMealPlanOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetMealPlanOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetMealPlanOptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetMealPlanOptions(ctx, req.(*messages.GetMealPlanOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetMealPlanTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetMealPlanTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetMealPlanTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetMealPlanTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetMealPlanTask(ctx, req.(*messages.GetMealPlanTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetMealPlanTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetMealPlanTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetMealPlanTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetMealPlanTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetMealPlanTasks(ctx, req.(*messages.GetMealPlanTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetMealPlansForHousehold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetMealPlansForHouseholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetMealPlansForHousehold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetMealPlansForHousehold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetMealPlansForHousehold(ctx, req.(*messages.GetMealPlansForHouseholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetMeals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetMealsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetMeals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetMeals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetMeals(ctx, req.(*messages.GetMealsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetMermaidDiagramForRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetMermaidDiagramForRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetMermaidDiagramForRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetMermaidDiagramForRecipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetMermaidDiagramForRecipe(ctx, req.(*messages.GetMermaidDiagramForRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetOAuth2Client_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetOAuth2ClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetOAuth2Client(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetOAuth2Client_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetOAuth2Client(ctx, req.(*messages.GetOAuth2ClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetOAuth2Clients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetOAuth2ClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetOAuth2Clients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetOAuth2Clients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetOAuth2Clients(ctx, req.(*messages.GetOAuth2ClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetRandomValidIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetRandomValidIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetRandomValidIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetRandomValidIngredient(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetRandomValidInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetRandomValidInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetRandomValidInstrument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetRandomValidInstrument(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetRandomValidPreparation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetRandomValidPreparation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetRandomValidPreparation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetRandomValidPreparation(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetRandomValidVessel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetRandomValidVessel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetRandomValidVessel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetRandomValidVessel(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetReceivedHouseholdInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetReceivedHouseholdInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetReceivedHouseholdInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetReceivedHouseholdInvitations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetReceivedHouseholdInvitations(ctx, req.(*messages.GetReceivedHouseholdInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetRecipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetRecipe(ctx, req.(*messages.GetRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetRecipeMealPlanTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetRecipeMealPlanTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetRecipeMealPlanTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetRecipeMealPlanTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetRecipeMealPlanTasks(ctx, req.(*messages.GetRecipeMealPlanTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetRecipePrepTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetRecipePrepTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetRecipePrepTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetRecipePrepTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetRecipePrepTask(ctx, req.(*messages.GetRecipePrepTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetRecipePrepTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetRecipePrepTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetRecipePrepTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetRecipePrepTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetRecipePrepTasks(ctx, req.(*messages.GetRecipePrepTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetRecipeRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetRecipeRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetRecipeRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetRecipeRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetRecipeRating(ctx, req.(*messages.GetRecipeRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetRecipeRatingsForRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetRecipeRatingsForRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetRecipeRatingsForRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetRecipeRatingsForRecipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetRecipeRatingsForRecipe(ctx, req.(*messages.GetRecipeRatingsForRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetRecipeStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetRecipeStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetRecipeStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetRecipeStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetRecipeStep(ctx, req.(*messages.GetRecipeStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetRecipeStepCompletionCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetRecipeStepCompletionConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetRecipeStepCompletionCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetRecipeStepCompletionCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetRecipeStepCompletionCondition(ctx, req.(*messages.GetRecipeStepCompletionConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetRecipeStepCompletionConditions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetRecipeStepCompletionConditionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetRecipeStepCompletionConditions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetRecipeStepCompletionConditions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetRecipeStepCompletionConditions(ctx, req.(*messages.GetRecipeStepCompletionConditionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetRecipeStepIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetRecipeStepIngredientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetRecipeStepIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetRecipeStepIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetRecipeStepIngredient(ctx, req.(*messages.GetRecipeStepIngredientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetRecipeStepIngredients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetRecipeStepIngredientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetRecipeStepIngredients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetRecipeStepIngredients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetRecipeStepIngredients(ctx, req.(*messages.GetRecipeStepIngredientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetRecipeStepInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetRecipeStepInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetRecipeStepInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetRecipeStepInstrument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetRecipeStepInstrument(ctx, req.(*messages.GetRecipeStepInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetRecipeStepInstruments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetRecipeStepInstrumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetRecipeStepInstruments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetRecipeStepInstruments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetRecipeStepInstruments(ctx, req.(*messages.GetRecipeStepInstrumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetRecipeStepProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetRecipeStepProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetRecipeStepProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetRecipeStepProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetRecipeStepProduct(ctx, req.(*messages.GetRecipeStepProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetRecipeStepProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetRecipeStepProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetRecipeStepProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetRecipeStepProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetRecipeStepProducts(ctx, req.(*messages.GetRecipeStepProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetRecipeStepVessel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetRecipeStepVesselRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetRecipeStepVessel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetRecipeStepVessel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetRecipeStepVessel(ctx, req.(*messages.GetRecipeStepVesselRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetRecipeStepVessels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetRecipeStepVesselsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetRecipeStepVessels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetRecipeStepVessels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetRecipeStepVessels(ctx, req.(*messages.GetRecipeStepVesselsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetRecipeSteps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetRecipeStepsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetRecipeSteps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetRecipeSteps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetRecipeSteps(ctx, req.(*messages.GetRecipeStepsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetRecipes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetRecipesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetRecipes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetRecipes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetRecipes(ctx, req.(*messages.GetRecipesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetSelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetSelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetSelf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetSelf(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetSentHouseholdInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetSentHouseholdInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetSentHouseholdInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetSentHouseholdInvitations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetSentHouseholdInvitations(ctx, req.(*messages.GetSentHouseholdInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetServiceSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetServiceSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetServiceSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetServiceSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetServiceSetting(ctx, req.(*messages.GetServiceSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetServiceSettingConfigurationByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetServiceSettingConfigurationByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetServiceSettingConfigurationByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetServiceSettingConfigurationByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetServiceSettingConfigurationByName(ctx, req.(*messages.GetServiceSettingConfigurationByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetServiceSettingConfigurationsForHousehold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetServiceSettingConfigurationsForHouseholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetServiceSettingConfigurationsForHousehold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetServiceSettingConfigurationsForHousehold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetServiceSettingConfigurationsForHousehold(ctx, req.(*messages.GetServiceSettingConfigurationsForHouseholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetServiceSettingConfigurationsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetServiceSettingConfigurationsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetServiceSettingConfigurationsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetServiceSettingConfigurationsForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetServiceSettingConfigurationsForUser(ctx, req.(*messages.GetServiceSettingConfigurationsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetServiceSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetServiceSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetServiceSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetServiceSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetServiceSettings(ctx, req.(*messages.GetServiceSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetUser(ctx, req.(*messages.GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetUserIngredientPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetUserIngredientPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetUserIngredientPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetUserIngredientPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetUserIngredientPreferences(ctx, req.(*messages.GetUserIngredientPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetUserNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetUserNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetUserNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetUserNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetUserNotification(ctx, req.(*messages.GetUserNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetUserNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetUserNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetUserNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetUserNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetUserNotifications(ctx, req.(*messages.GetUserNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetUsers(ctx, req.(*messages.GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidIngredientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidIngredient(ctx, req.(*messages.GetValidIngredientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidIngredientGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidIngredientGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidIngredientGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidIngredientGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidIngredientGroup(ctx, req.(*messages.GetValidIngredientGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidIngredientGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidIngredientGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidIngredientGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidIngredientGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidIngredientGroups(ctx, req.(*messages.GetValidIngredientGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidIngredientMeasurementUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidIngredientMeasurementUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidIngredientMeasurementUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidIngredientMeasurementUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidIngredientMeasurementUnit(ctx, req.(*messages.GetValidIngredientMeasurementUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidIngredientMeasurementUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidIngredientMeasurementUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidIngredientMeasurementUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidIngredientMeasurementUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidIngredientMeasurementUnits(ctx, req.(*messages.GetValidIngredientMeasurementUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidIngredientMeasurementUnitsByIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidIngredientMeasurementUnitsByIngredientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidIngredientMeasurementUnitsByIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidIngredientMeasurementUnitsByIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidIngredientMeasurementUnitsByIngredient(ctx, req.(*messages.GetValidIngredientMeasurementUnitsByIngredientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidIngredientMeasurementUnitsByMeasurementUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidIngredientMeasurementUnitsByMeasurementUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidIngredientMeasurementUnitsByMeasurementUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidIngredientMeasurementUnitsByMeasurementUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidIngredientMeasurementUnitsByMeasurementUnit(ctx, req.(*messages.GetValidIngredientMeasurementUnitsByMeasurementUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidIngredientPreparation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidIngredientPreparationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidIngredientPreparation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidIngredientPreparation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidIngredientPreparation(ctx, req.(*messages.GetValidIngredientPreparationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidIngredientPreparations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidIngredientPreparationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidIngredientPreparations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidIngredientPreparations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidIngredientPreparations(ctx, req.(*messages.GetValidIngredientPreparationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidIngredientPreparationsByIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidIngredientPreparationsByIngredientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidIngredientPreparationsByIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidIngredientPreparationsByIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidIngredientPreparationsByIngredient(ctx, req.(*messages.GetValidIngredientPreparationsByIngredientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidIngredientPreparationsByPreparation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidIngredientPreparationsByPreparationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidIngredientPreparationsByPreparation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidIngredientPreparationsByPreparation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidIngredientPreparationsByPreparation(ctx, req.(*messages.GetValidIngredientPreparationsByPreparationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidIngredientState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidIngredientStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidIngredientState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidIngredientState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidIngredientState(ctx, req.(*messages.GetValidIngredientStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidIngredientStateIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidIngredientStateIngredientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidIngredientStateIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidIngredientStateIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidIngredientStateIngredient(ctx, req.(*messages.GetValidIngredientStateIngredientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidIngredientStateIngredients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidIngredientStateIngredientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidIngredientStateIngredients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidIngredientStateIngredients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidIngredientStateIngredients(ctx, req.(*messages.GetValidIngredientStateIngredientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidIngredientStateIngredientsByIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidIngredientStateIngredientsByIngredientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidIngredientStateIngredientsByIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidIngredientStateIngredientsByIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidIngredientStateIngredientsByIngredient(ctx, req.(*messages.GetValidIngredientStateIngredientsByIngredientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidIngredientStateIngredientsByIngredientState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidIngredientStateIngredientsByIngredientStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidIngredientStateIngredientsByIngredientState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidIngredientStateIngredientsByIngredientState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidIngredientStateIngredientsByIngredientState(ctx, req.(*messages.GetValidIngredientStateIngredientsByIngredientStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidIngredientStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidIngredientStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidIngredientStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidIngredientStates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidIngredientStates(ctx, req.(*messages.GetValidIngredientStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidIngredients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidIngredientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidIngredients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidIngredients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidIngredients(ctx, req.(*messages.GetValidIngredientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidInstrument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidInstrument(ctx, req.(*messages.GetValidInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidInstruments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidInstrumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidInstruments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidInstruments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidInstruments(ctx, req.(*messages.GetValidInstrumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidMeasurementUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidMeasurementUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidMeasurementUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidMeasurementUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidMeasurementUnit(ctx, req.(*messages.GetValidMeasurementUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidMeasurementUnitConversion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidMeasurementUnitConversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidMeasurementUnitConversion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidMeasurementUnitConversion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidMeasurementUnitConversion(ctx, req.(*messages.GetValidMeasurementUnitConversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidMeasurementUnitConversionsFromUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidMeasurementUnitConversionsFromUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidMeasurementUnitConversionsFromUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidMeasurementUnitConversionsFromUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidMeasurementUnitConversionsFromUnit(ctx, req.(*messages.GetValidMeasurementUnitConversionsFromUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidMeasurementUnitConversionsToUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidMeasurementUnitConversionsToUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidMeasurementUnitConversionsToUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidMeasurementUnitConversionsToUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidMeasurementUnitConversionsToUnit(ctx, req.(*messages.GetValidMeasurementUnitConversionsToUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidMeasurementUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidMeasurementUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidMeasurementUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidMeasurementUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidMeasurementUnits(ctx, req.(*messages.GetValidMeasurementUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidPreparation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidPreparationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidPreparation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidPreparation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidPreparation(ctx, req.(*messages.GetValidPreparationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidPreparationInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidPreparationInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidPreparationInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidPreparationInstrument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidPreparationInstrument(ctx, req.(*messages.GetValidPreparationInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidPreparationInstruments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidPreparationInstrumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidPreparationInstruments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidPreparationInstruments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidPreparationInstruments(ctx, req.(*messages.GetValidPreparationInstrumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidPreparationInstrumentsByInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidPreparationInstrumentsByInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidPreparationInstrumentsByInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidPreparationInstrumentsByInstrument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidPreparationInstrumentsByInstrument(ctx, req.(*messages.GetValidPreparationInstrumentsByInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidPreparationInstrumentsByPreparation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidPreparationInstrumentsByPreparationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidPreparationInstrumentsByPreparation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidPreparationInstrumentsByPreparation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidPreparationInstrumentsByPreparation(ctx, req.(*messages.GetValidPreparationInstrumentsByPreparationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidPreparationVessel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidPreparationVesselRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidPreparationVessel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidPreparationVessel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidPreparationVessel(ctx, req.(*messages.GetValidPreparationVesselRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidPreparationVessels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidPreparationVesselsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidPreparationVessels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidPreparationVessels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidPreparationVessels(ctx, req.(*messages.GetValidPreparationVesselsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidPreparationVesselsByPreparation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidPreparationVesselsByPreparationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidPreparationVesselsByPreparation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidPreparationVesselsByPreparation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidPreparationVesselsByPreparation(ctx, req.(*messages.GetValidPreparationVesselsByPreparationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidPreparationVesselsByVessel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidPreparationVesselsByVesselRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidPreparationVesselsByVessel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidPreparationVesselsByVessel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidPreparationVesselsByVessel(ctx, req.(*messages.GetValidPreparationVesselsByVesselRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidPreparations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidPreparationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidPreparations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidPreparations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidPreparations(ctx, req.(*messages.GetValidPreparationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidVessel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidVesselRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidVessel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidVessel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidVessel(ctx, req.(*messages.GetValidVesselRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetValidVessels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetValidVesselsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetValidVessels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetValidVessels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetValidVessels(ctx, req.(*messages.GetValidVesselsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetWebhook(ctx, req.(*messages.GetWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_GetWebhooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.GetWebhooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).GetWebhooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_GetWebhooks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).GetWebhooks(ctx, req.(*messages.GetWebhooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_LoginForToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UserLoginInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).LoginForToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_LoginForToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).LoginForToken(ctx, req.(*messages.UserLoginInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_PublishArbitraryQueueMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ArbitraryQueueMessageRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).PublishArbitraryQueueMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_PublishArbitraryQueueMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).PublishArbitraryQueueMessage(ctx, req.(*messages.ArbitraryQueueMessageRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_RedeemPasswordResetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.PasswordResetTokenRedemptionRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).RedeemPasswordResetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_RedeemPasswordResetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).RedeemPasswordResetToken(ctx, req.(*messages.PasswordResetTokenRedemptionRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_RefreshTOTPSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.TOTPSecretRefreshInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).RefreshTOTPSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_RefreshTOTPSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).RefreshTOTPSecret(ctx, req.(*messages.TOTPSecretRefreshInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_RejectHouseholdInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.RejectHouseholdInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).RejectHouseholdInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_RejectHouseholdInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).RejectHouseholdInvitation(ctx, req.(*messages.RejectHouseholdInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_RequestEmailVerificationEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).RequestEmailVerificationEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_RequestEmailVerificationEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).RequestEmailVerificationEmail(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_RequestPasswordResetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.PasswordResetTokenCreationRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).RequestPasswordResetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_RequestPasswordResetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).RequestPasswordResetToken(ctx, req.(*messages.PasswordResetTokenCreationRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_RequestUsernameReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UsernameReminderRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).RequestUsernameReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_RequestUsernameReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).RequestUsernameReminder(ctx, req.(*messages.UsernameReminderRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_RunFinalizeMealPlanWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.FinalizeMealPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).RunFinalizeMealPlanWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_RunFinalizeMealPlanWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).RunFinalizeMealPlanWorker(ctx, req.(*messages.FinalizeMealPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_RunMealPlanGroceryListInitializerWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.InitializeMealPlanGroceryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).RunMealPlanGroceryListInitializerWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_RunMealPlanGroceryListInitializerWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).RunMealPlanGroceryListInitializerWorker(ctx, req.(*messages.InitializeMealPlanGroceryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_RunMealPlanTaskCreatorWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.CreateMealPlanTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).RunMealPlanTaskCreatorWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_RunMealPlanTaskCreatorWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).RunMealPlanTaskCreatorWorker(ctx, req.(*messages.CreateMealPlanTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_SearchForMeals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.SearchForMealsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).SearchForMeals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_SearchForMeals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).SearchForMeals(ctx, req.(*messages.SearchForMealsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_SearchForRecipes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.SearchForRecipesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).SearchForRecipes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_SearchForRecipes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).SearchForRecipes(ctx, req.(*messages.SearchForRecipesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_SearchForServiceSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.SearchForServiceSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).SearchForServiceSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_SearchForServiceSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).SearchForServiceSettings(ctx, req.(*messages.SearchForServiceSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_SearchForUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.SearchForUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).SearchForUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_SearchForUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).SearchForUsers(ctx, req.(*messages.SearchForUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_SearchForValidIngredientGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.SearchForValidIngredientGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).SearchForValidIngredientGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_SearchForValidIngredientGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).SearchForValidIngredientGroups(ctx, req.(*messages.SearchForValidIngredientGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_SearchForValidIngredientStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.SearchForValidIngredientStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).SearchForValidIngredientStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_SearchForValidIngredientStates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).SearchForValidIngredientStates(ctx, req.(*messages.SearchForValidIngredientStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_SearchForValidIngredients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.SearchForValidIngredientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).SearchForValidIngredients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_SearchForValidIngredients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).SearchForValidIngredients(ctx, req.(*messages.SearchForValidIngredientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_SearchForValidInstruments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.SearchForValidInstrumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).SearchForValidInstruments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_SearchForValidInstruments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).SearchForValidInstruments(ctx, req.(*messages.SearchForValidInstrumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_SearchForValidMeasurementUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.SearchForValidMeasurementUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).SearchForValidMeasurementUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_SearchForValidMeasurementUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).SearchForValidMeasurementUnits(ctx, req.(*messages.SearchForValidMeasurementUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_SearchForValidPreparations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.SearchForValidPreparationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).SearchForValidPreparations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_SearchForValidPreparations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).SearchForValidPreparations(ctx, req.(*messages.SearchForValidPreparationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_SearchForValidVessels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.SearchForValidVesselsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).SearchForValidVessels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_SearchForValidVessels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).SearchForValidVessels(ctx, req.(*messages.SearchForValidVesselsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_SearchValidIngredientsByPreparation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.SearchValidIngredientsByPreparationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).SearchValidIngredientsByPreparation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_SearchValidIngredientsByPreparation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).SearchValidIngredientsByPreparation(ctx, req.(*messages.SearchValidIngredientsByPreparationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_SearchValidMeasurementUnitsByIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.SearchValidMeasurementUnitsByIngredientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).SearchValidMeasurementUnitsByIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_SearchValidMeasurementUnitsByIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).SearchValidMeasurementUnitsByIngredient(ctx, req.(*messages.SearchValidMeasurementUnitsByIngredientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_SetDefaultHousehold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.SetDefaultHouseholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).SetDefaultHousehold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_SetDefaultHousehold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).SetDefaultHousehold(ctx, req.(*messages.SetDefaultHouseholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_TransferHouseholdOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.TransferHouseholdOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).TransferHouseholdOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_TransferHouseholdOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).TransferHouseholdOwnership(ctx, req.(*messages.TransferHouseholdOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateHousehold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateHouseholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateHousehold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateHousehold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateHousehold(ctx, req.(*messages.UpdateHouseholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateHouseholdInstrumentOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateHouseholdInstrumentOwnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateHouseholdInstrumentOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateHouseholdInstrumentOwnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateHouseholdInstrumentOwnership(ctx, req.(*messages.UpdateHouseholdInstrumentOwnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateHouseholdMemberPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateHouseholdMemberPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateHouseholdMemberPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateHouseholdMemberPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateHouseholdMemberPermissions(ctx, req.(*messages.UpdateHouseholdMemberPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateMealPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateMealPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateMealPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateMealPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateMealPlan(ctx, req.(*messages.UpdateMealPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateMealPlanEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateMealPlanEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateMealPlanEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateMealPlanEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateMealPlanEvent(ctx, req.(*messages.UpdateMealPlanEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateMealPlanGroceryListItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateMealPlanGroceryListItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateMealPlanGroceryListItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateMealPlanGroceryListItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateMealPlanGroceryListItem(ctx, req.(*messages.UpdateMealPlanGroceryListItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateMealPlanOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateMealPlanOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateMealPlanOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateMealPlanOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateMealPlanOption(ctx, req.(*messages.UpdateMealPlanOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateMealPlanOptionVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateMealPlanOptionVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateMealPlanOptionVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateMealPlanOptionVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateMealPlanOptionVote(ctx, req.(*messages.UpdateMealPlanOptionVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateMealPlanTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateMealPlanTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateMealPlanTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateMealPlanTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateMealPlanTaskStatus(ctx, req.(*messages.UpdateMealPlanTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.PasswordUpdateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdatePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdatePassword(ctx, req.(*messages.PasswordUpdateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateRecipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateRecipe(ctx, req.(*messages.UpdateRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateRecipePrepTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateRecipePrepTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateRecipePrepTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateRecipePrepTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateRecipePrepTask(ctx, req.(*messages.UpdateRecipePrepTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateRecipeRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateRecipeRatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateRecipeRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateRecipeRating_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateRecipeRating(ctx, req.(*messages.UpdateRecipeRatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateRecipeStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateRecipeStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateRecipeStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateRecipeStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateRecipeStep(ctx, req.(*messages.UpdateRecipeStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateRecipeStepCompletionCondition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateRecipeStepCompletionConditionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateRecipeStepCompletionCondition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateRecipeStepCompletionCondition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateRecipeStepCompletionCondition(ctx, req.(*messages.UpdateRecipeStepCompletionConditionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateRecipeStepIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateRecipeStepIngredientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateRecipeStepIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateRecipeStepIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateRecipeStepIngredient(ctx, req.(*messages.UpdateRecipeStepIngredientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateRecipeStepInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateRecipeStepInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateRecipeStepInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateRecipeStepInstrument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateRecipeStepInstrument(ctx, req.(*messages.UpdateRecipeStepInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateRecipeStepProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateRecipeStepProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateRecipeStepProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateRecipeStepProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateRecipeStepProduct(ctx, req.(*messages.UpdateRecipeStepProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateRecipeStepVessel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateRecipeStepVesselRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateRecipeStepVessel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateRecipeStepVessel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateRecipeStepVessel(ctx, req.(*messages.UpdateRecipeStepVesselRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateServiceSettingConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateServiceSettingConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateServiceSettingConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateServiceSettingConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateServiceSettingConfiguration(ctx, req.(*messages.UpdateServiceSettingConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateUserDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UserDetailsUpdateRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateUserDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateUserDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateUserDetails(ctx, req.(*messages.UserDetailsUpdateRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateUserEmailAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UserEmailAddressUpdateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateUserEmailAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateUserEmailAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateUserEmailAddress(ctx, req.(*messages.UserEmailAddressUpdateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateUserIngredientPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateUserIngredientPreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateUserIngredientPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateUserIngredientPreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateUserIngredientPreference(ctx, req.(*messages.UpdateUserIngredientPreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateUserNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateUserNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateUserNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateUserNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateUserNotification(ctx, req.(*messages.UpdateUserNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateUserUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UsernameUpdateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateUserUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateUserUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateUserUsername(ctx, req.(*messages.UsernameUpdateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateValidIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateValidIngredientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateValidIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateValidIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateValidIngredient(ctx, req.(*messages.UpdateValidIngredientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateValidIngredientGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateValidIngredientGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateValidIngredientGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateValidIngredientGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateValidIngredientGroup(ctx, req.(*messages.UpdateValidIngredientGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateValidIngredientMeasurementUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateValidIngredientMeasurementUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateValidIngredientMeasurementUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateValidIngredientMeasurementUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateValidIngredientMeasurementUnit(ctx, req.(*messages.UpdateValidIngredientMeasurementUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateValidIngredientPreparation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateValidIngredientPreparationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateValidIngredientPreparation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateValidIngredientPreparation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateValidIngredientPreparation(ctx, req.(*messages.UpdateValidIngredientPreparationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateValidIngredientState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateValidIngredientStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateValidIngredientState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateValidIngredientState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateValidIngredientState(ctx, req.(*messages.UpdateValidIngredientStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateValidIngredientStateIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateValidIngredientStateIngredientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateValidIngredientStateIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateValidIngredientStateIngredient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateValidIngredientStateIngredient(ctx, req.(*messages.UpdateValidIngredientStateIngredientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateValidInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateValidInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateValidInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateValidInstrument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateValidInstrument(ctx, req.(*messages.UpdateValidInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateValidMeasurementUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateValidMeasurementUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateValidMeasurementUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateValidMeasurementUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateValidMeasurementUnit(ctx, req.(*messages.UpdateValidMeasurementUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateValidMeasurementUnitConversion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateValidMeasurementUnitConversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateValidMeasurementUnitConversion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateValidMeasurementUnitConversion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateValidMeasurementUnitConversion(ctx, req.(*messages.UpdateValidMeasurementUnitConversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateValidPreparation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateValidPreparationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateValidPreparation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateValidPreparation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateValidPreparation(ctx, req.(*messages.UpdateValidPreparationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateValidPreparationInstrument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateValidPreparationInstrumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateValidPreparationInstrument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateValidPreparationInstrument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateValidPreparationInstrument(ctx, req.(*messages.UpdateValidPreparationInstrumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateValidPreparationVessel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateValidPreparationVesselRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateValidPreparationVessel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateValidPreparationVessel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateValidPreparationVessel(ctx, req.(*messages.UpdateValidPreparationVesselRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UpdateValidVessel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.UpdateValidVesselRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UpdateValidVessel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UpdateValidVessel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UpdateValidVessel(ctx, req.(*messages.UpdateValidVesselRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_UploadUserAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.AvatarUpdateInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).UploadUserAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_UploadUserAvatar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).UploadUserAvatar(ctx, req.(*messages.AvatarUpdateInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_VerifyEmailAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.EmailAddressVerificationRequestInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).VerifyEmailAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_VerifyEmailAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).VerifyEmailAddress(ctx, req.(*messages.EmailAddressVerificationRequestInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EatingService_VerifyTOTPSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.TOTPSecretVerificationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EatingServiceServer).VerifyTOTPSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EatingService_VerifyTOTPSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EatingServiceServer).VerifyTOTPSecret(ctx, req.(*messages.TOTPSecretVerificationInput))
	}
	return interceptor(ctx, in, info, handler)
}

// EatingService_ServiceDesc is the grpc.ServiceDesc for EatingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EatingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eating.EatingService",
	HandlerType: (*EatingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcceptHouseholdInvitation",
			Handler:    _EatingService_AcceptHouseholdInvitation_Handler,
		},
		{
			MethodName: "AdminLoginForToken",
			Handler:    _EatingService_AdminLoginForToken_Handler,
		},
		{
			MethodName: "AdminUpdateUserStatus",
			Handler:    _EatingService_AdminUpdateUserStatus_Handler,
		},
		{
			MethodName: "AggregateUserDataReport",
			Handler:    _EatingService_AggregateUserDataReport_Handler,
		},
		{
			MethodName: "ArchiveHousehold",
			Handler:    _EatingService_ArchiveHousehold_Handler,
		},
		{
			MethodName: "ArchiveHouseholdInstrumentOwnership",
			Handler:    _EatingService_ArchiveHouseholdInstrumentOwnership_Handler,
		},
		{
			MethodName: "ArchiveMeal",
			Handler:    _EatingService_ArchiveMeal_Handler,
		},
		{
			MethodName: "ArchiveMealPlan",
			Handler:    _EatingService_ArchiveMealPlan_Handler,
		},
		{
			MethodName: "ArchiveMealPlanEvent",
			Handler:    _EatingService_ArchiveMealPlanEvent_Handler,
		},
		{
			MethodName: "ArchiveMealPlanGroceryListItem",
			Handler:    _EatingService_ArchiveMealPlanGroceryListItem_Handler,
		},
		{
			MethodName: "ArchiveMealPlanOption",
			Handler:    _EatingService_ArchiveMealPlanOption_Handler,
		},
		{
			MethodName: "ArchiveMealPlanOptionVote",
			Handler:    _EatingService_ArchiveMealPlanOptionVote_Handler,
		},
		{
			MethodName: "ArchiveOAuth2Client",
			Handler:    _EatingService_ArchiveOAuth2Client_Handler,
		},
		{
			MethodName: "ArchiveRecipe",
			Handler:    _EatingService_ArchiveRecipe_Handler,
		},
		{
			MethodName: "ArchiveRecipePrepTask",
			Handler:    _EatingService_ArchiveRecipePrepTask_Handler,
		},
		{
			MethodName: "ArchiveRecipeRating",
			Handler:    _EatingService_ArchiveRecipeRating_Handler,
		},
		{
			MethodName: "ArchiveRecipeStep",
			Handler:    _EatingService_ArchiveRecipeStep_Handler,
		},
		{
			MethodName: "ArchiveRecipeStepCompletionCondition",
			Handler:    _EatingService_ArchiveRecipeStepCompletionCondition_Handler,
		},
		{
			MethodName: "ArchiveRecipeStepIngredient",
			Handler:    _EatingService_ArchiveRecipeStepIngredient_Handler,
		},
		{
			MethodName: "ArchiveRecipeStepInstrument",
			Handler:    _EatingService_ArchiveRecipeStepInstrument_Handler,
		},
		{
			MethodName: "ArchiveRecipeStepProduct",
			Handler:    _EatingService_ArchiveRecipeStepProduct_Handler,
		},
		{
			MethodName: "ArchiveRecipeStepVessel",
			Handler:    _EatingService_ArchiveRecipeStepVessel_Handler,
		},
		{
			MethodName: "ArchiveServiceSetting",
			Handler:    _EatingService_ArchiveServiceSetting_Handler,
		},
		{
			MethodName: "ArchiveServiceSettingConfiguration",
			Handler:    _EatingService_ArchiveServiceSettingConfiguration_Handler,
		},
		{
			MethodName: "ArchiveUser",
			Handler:    _EatingService_ArchiveUser_Handler,
		},
		{
			MethodName: "ArchiveUserIngredientPreference",
			Handler:    _EatingService_ArchiveUserIngredientPreference_Handler,
		},
		{
			MethodName: "ArchiveUserMembership",
			Handler:    _EatingService_ArchiveUserMembership_Handler,
		},
		{
			MethodName: "ArchiveValidIngredient",
			Handler:    _EatingService_ArchiveValidIngredient_Handler,
		},
		{
			MethodName: "ArchiveValidIngredientGroup",
			Handler:    _EatingService_ArchiveValidIngredientGroup_Handler,
		},
		{
			MethodName: "ArchiveValidIngredientMeasurementUnit",
			Handler:    _EatingService_ArchiveValidIngredientMeasurementUnit_Handler,
		},
		{
			MethodName: "ArchiveValidIngredientPreparation",
			Handler:    _EatingService_ArchiveValidIngredientPreparation_Handler,
		},
		{
			MethodName: "ArchiveValidIngredientState",
			Handler:    _EatingService_ArchiveValidIngredientState_Handler,
		},
		{
			MethodName: "ArchiveValidIngredientStateIngredient",
			Handler:    _EatingService_ArchiveValidIngredientStateIngredient_Handler,
		},
		{
			MethodName: "ArchiveValidInstrument",
			Handler:    _EatingService_ArchiveValidInstrument_Handler,
		},
		{
			MethodName: "ArchiveValidMeasurementUnit",
			Handler:    _EatingService_ArchiveValidMeasurementUnit_Handler,
		},
		{
			MethodName: "ArchiveValidMeasurementUnitConversion",
			Handler:    _EatingService_ArchiveValidMeasurementUnitConversion_Handler,
		},
		{
			MethodName: "ArchiveValidPreparation",
			Handler:    _EatingService_ArchiveValidPreparation_Handler,
		},
		{
			MethodName: "ArchiveValidPreparationInstrument",
			Handler:    _EatingService_ArchiveValidPreparationInstrument_Handler,
		},
		{
			MethodName: "ArchiveValidPreparationVessel",
			Handler:    _EatingService_ArchiveValidPreparationVessel_Handler,
		},
		{
			MethodName: "ArchiveValidVessel",
			Handler:    _EatingService_ArchiveValidVessel_Handler,
		},
		{
			MethodName: "ArchiveWebhook",
			Handler:    _EatingService_ArchiveWebhook_Handler,
		},
		{
			MethodName: "ArchiveWebhookTriggerEvent",
			Handler:    _EatingService_ArchiveWebhookTriggerEvent_Handler,
		},
		{
			MethodName: "CancelHouseholdInvitation",
			Handler:    _EatingService_CancelHouseholdInvitation_Handler,
		},
		{
			MethodName: "CheckForReadiness",
			Handler:    _EatingService_CheckForReadiness_Handler,
		},
		{
			MethodName: "CheckPermissions",
			Handler:    _EatingService_CheckPermissions_Handler,
		},
		{
			MethodName: "CloneRecipe",
			Handler:    _EatingService_CloneRecipe_Handler,
		},
		{
			MethodName: "CreateHousehold",
			Handler:    _EatingService_CreateHousehold_Handler,
		},
		{
			MethodName: "CreateHouseholdInstrumentOwnership",
			Handler:    _EatingService_CreateHouseholdInstrumentOwnership_Handler,
		},
		{
			MethodName: "CreateHouseholdInvitation",
			Handler:    _EatingService_CreateHouseholdInvitation_Handler,
		},
		{
			MethodName: "CreateMeal",
			Handler:    _EatingService_CreateMeal_Handler,
		},
		{
			MethodName: "CreateMealPlan",
			Handler:    _EatingService_CreateMealPlan_Handler,
		},
		{
			MethodName: "CreateMealPlanEvent",
			Handler:    _EatingService_CreateMealPlanEvent_Handler,
		},
		{
			MethodName: "CreateMealPlanGroceryListItem",
			Handler:    _EatingService_CreateMealPlanGroceryListItem_Handler,
		},
		{
			MethodName: "CreateMealPlanOption",
			Handler:    _EatingService_CreateMealPlanOption_Handler,
		},
		{
			MethodName: "CreateMealPlanOptionVote",
			Handler:    _EatingService_CreateMealPlanOptionVote_Handler,
		},
		{
			MethodName: "CreateMealPlanTask",
			Handler:    _EatingService_CreateMealPlanTask_Handler,
		},
		{
			MethodName: "CreateOAuth2Client",
			Handler:    _EatingService_CreateOAuth2Client_Handler,
		},
		{
			MethodName: "CreateRecipe",
			Handler:    _EatingService_CreateRecipe_Handler,
		},
		{
			MethodName: "CreateRecipePrepTask",
			Handler:    _EatingService_CreateRecipePrepTask_Handler,
		},
		{
			MethodName: "CreateRecipeRating",
			Handler:    _EatingService_CreateRecipeRating_Handler,
		},
		{
			MethodName: "CreateRecipeStep",
			Handler:    _EatingService_CreateRecipeStep_Handler,
		},
		{
			MethodName: "CreateRecipeStepCompletionCondition",
			Handler:    _EatingService_CreateRecipeStepCompletionCondition_Handler,
		},
		{
			MethodName: "CreateRecipeStepIngredient",
			Handler:    _EatingService_CreateRecipeStepIngredient_Handler,
		},
		{
			MethodName: "CreateRecipeStepInstrument",
			Handler:    _EatingService_CreateRecipeStepInstrument_Handler,
		},
		{
			MethodName: "CreateRecipeStepProduct",
			Handler:    _EatingService_CreateRecipeStepProduct_Handler,
		},
		{
			MethodName: "CreateRecipeStepVessel",
			Handler:    _EatingService_CreateRecipeStepVessel_Handler,
		},
		{
			MethodName: "CreateServiceSetting",
			Handler:    _EatingService_CreateServiceSetting_Handler,
		},
		{
			MethodName: "CreateServiceSettingConfiguration",
			Handler:    _EatingService_CreateServiceSettingConfiguration_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _EatingService_CreateUser_Handler,
		},
		{
			MethodName: "CreateUserIngredientPreference",
			Handler:    _EatingService_CreateUserIngredientPreference_Handler,
		},
		{
			MethodName: "CreateUserNotification",
			Handler:    _EatingService_CreateUserNotification_Handler,
		},
		{
			MethodName: "CreateValidIngredient",
			Handler:    _EatingService_CreateValidIngredient_Handler,
		},
		{
			MethodName: "CreateValidIngredientGroup",
			Handler:    _EatingService_CreateValidIngredientGroup_Handler,
		},
		{
			MethodName: "CreateValidIngredientMeasurementUnit",
			Handler:    _EatingService_CreateValidIngredientMeasurementUnit_Handler,
		},
		{
			MethodName: "CreateValidIngredientPreparation",
			Handler:    _EatingService_CreateValidIngredientPreparation_Handler,
		},
		{
			MethodName: "CreateValidIngredientState",
			Handler:    _EatingService_CreateValidIngredientState_Handler,
		},
		{
			MethodName: "CreateValidIngredientStateIngredient",
			Handler:    _EatingService_CreateValidIngredientStateIngredient_Handler,
		},
		{
			MethodName: "CreateValidInstrument",
			Handler:    _EatingService_CreateValidInstrument_Handler,
		},
		{
			MethodName: "CreateValidMeasurementUnit",
			Handler:    _EatingService_CreateValidMeasurementUnit_Handler,
		},
		{
			MethodName: "CreateValidMeasurementUnitConversion",
			Handler:    _EatingService_CreateValidMeasurementUnitConversion_Handler,
		},
		{
			MethodName: "CreateValidPreparation",
			Handler:    _EatingService_CreateValidPreparation_Handler,
		},
		{
			MethodName: "CreateValidPreparationInstrument",
			Handler:    _EatingService_CreateValidPreparationInstrument_Handler,
		},
		{
			MethodName: "CreateValidPreparationVessel",
			Handler:    _EatingService_CreateValidPreparationVessel_Handler,
		},
		{
			MethodName: "CreateValidVessel",
			Handler:    _EatingService_CreateValidVessel_Handler,
		},
		{
			MethodName: "CreateWebhook",
			Handler:    _EatingService_CreateWebhook_Handler,
		},
		{
			MethodName: "CreateWebhookTriggerEvent",
			Handler:    _EatingService_CreateWebhookTriggerEvent_Handler,
		},
		{
			MethodName: "DestroyAllUserData",
			Handler:    _EatingService_DestroyAllUserData_Handler,
		},
		{
			MethodName: "FetchUserDataReport",
			Handler:    _EatingService_FetchUserDataReport_Handler,
		},
		{
			MethodName: "FinalizeMealPlan",
			Handler:    _EatingService_FinalizeMealPlan_Handler,
		},
		{
			MethodName: "GetActiveHousehold",
			Handler:    _EatingService_GetActiveHousehold_Handler,
		},
		{
			MethodName: "GetAuditLogEntriesForHousehold",
			Handler:    _EatingService_GetAuditLogEntriesForHousehold_Handler,
		},
		{
			MethodName: "GetAuditLogEntriesForUser",
			Handler:    _EatingService_GetAuditLogEntriesForUser_Handler,
		},
		{
			MethodName: "GetAuditLogEntryByID",
			Handler:    _EatingService_GetAuditLogEntryByID_Handler,
		},
		{
			MethodName: "GetAuthStatus",
			Handler:    _EatingService_GetAuthStatus_Handler,
		},
		{
			MethodName: "GetHousehold",
			Handler:    _EatingService_GetHousehold_Handler,
		},
		{
			MethodName: "GetHouseholdInstrumentOwnership",
			Handler:    _EatingService_GetHouseholdInstrumentOwnership_Handler,
		},
		{
			MethodName: "GetHouseholdInstrumentOwnerships",
			Handler:    _EatingService_GetHouseholdInstrumentOwnerships_Handler,
		},
		{
			MethodName: "GetHouseholdInvitation",
			Handler:    _EatingService_GetHouseholdInvitation_Handler,
		},
		{
			MethodName: "GetHouseholdInvitationByID",
			Handler:    _EatingService_GetHouseholdInvitationByID_Handler,
		},
		{
			MethodName: "GetHouseholds",
			Handler:    _EatingService_GetHouseholds_Handler,
		},
		{
			MethodName: "GetMeal",
			Handler:    _EatingService_GetMeal_Handler,
		},
		{
			MethodName: "GetMealPlan",
			Handler:    _EatingService_GetMealPlan_Handler,
		},
		{
			MethodName: "GetMealPlanEvent",
			Handler:    _EatingService_GetMealPlanEvent_Handler,
		},
		{
			MethodName: "GetMealPlanEvents",
			Handler:    _EatingService_GetMealPlanEvents_Handler,
		},
		{
			MethodName: "GetMealPlanGroceryListItem",
			Handler:    _EatingService_GetMealPlanGroceryListItem_Handler,
		},
		{
			MethodName: "GetMealPlanGroceryListItemsForMealPlan",
			Handler:    _EatingService_GetMealPlanGroceryListItemsForMealPlan_Handler,
		},
		{
			MethodName: "GetMealPlanOption",
			Handler:    _EatingService_GetMealPlanOption_Handler,
		},
		{
			MethodName: "GetMealPlanOptionVote",
			Handler:    _EatingService_GetMealPlanOptionVote_Handler,
		},
		{
			MethodName: "GetMealPlanOptionVotes",
			Handler:    _EatingService_GetMealPlanOptionVotes_Handler,
		},
		{
			MethodName: "GetMealPlanOptions",
			Handler:    _EatingService_GetMealPlanOptions_Handler,
		},
		{
			MethodName: "GetMealPlanTask",
			Handler:    _EatingService_GetMealPlanTask_Handler,
		},
		{
			MethodName: "GetMealPlanTasks",
			Handler:    _EatingService_GetMealPlanTasks_Handler,
		},
		{
			MethodName: "GetMealPlansForHousehold",
			Handler:    _EatingService_GetMealPlansForHousehold_Handler,
		},
		{
			MethodName: "GetMeals",
			Handler:    _EatingService_GetMeals_Handler,
		},
		{
			MethodName: "GetMermaidDiagramForRecipe",
			Handler:    _EatingService_GetMermaidDiagramForRecipe_Handler,
		},
		{
			MethodName: "GetOAuth2Client",
			Handler:    _EatingService_GetOAuth2Client_Handler,
		},
		{
			MethodName: "GetOAuth2Clients",
			Handler:    _EatingService_GetOAuth2Clients_Handler,
		},
		{
			MethodName: "GetRandomValidIngredient",
			Handler:    _EatingService_GetRandomValidIngredient_Handler,
		},
		{
			MethodName: "GetRandomValidInstrument",
			Handler:    _EatingService_GetRandomValidInstrument_Handler,
		},
		{
			MethodName: "GetRandomValidPreparation",
			Handler:    _EatingService_GetRandomValidPreparation_Handler,
		},
		{
			MethodName: "GetRandomValidVessel",
			Handler:    _EatingService_GetRandomValidVessel_Handler,
		},
		{
			MethodName: "GetReceivedHouseholdInvitations",
			Handler:    _EatingService_GetReceivedHouseholdInvitations_Handler,
		},
		{
			MethodName: "GetRecipe",
			Handler:    _EatingService_GetRecipe_Handler,
		},
		{
			MethodName: "GetRecipeMealPlanTasks",
			Handler:    _EatingService_GetRecipeMealPlanTasks_Handler,
		},
		{
			MethodName: "GetRecipePrepTask",
			Handler:    _EatingService_GetRecipePrepTask_Handler,
		},
		{
			MethodName: "GetRecipePrepTasks",
			Handler:    _EatingService_GetRecipePrepTasks_Handler,
		},
		{
			MethodName: "GetRecipeRating",
			Handler:    _EatingService_GetRecipeRating_Handler,
		},
		{
			MethodName: "GetRecipeRatingsForRecipe",
			Handler:    _EatingService_GetRecipeRatingsForRecipe_Handler,
		},
		{
			MethodName: "GetRecipeStep",
			Handler:    _EatingService_GetRecipeStep_Handler,
		},
		{
			MethodName: "GetRecipeStepCompletionCondition",
			Handler:    _EatingService_GetRecipeStepCompletionCondition_Handler,
		},
		{
			MethodName: "GetRecipeStepCompletionConditions",
			Handler:    _EatingService_GetRecipeStepCompletionConditions_Handler,
		},
		{
			MethodName: "GetRecipeStepIngredient",
			Handler:    _EatingService_GetRecipeStepIngredient_Handler,
		},
		{
			MethodName: "GetRecipeStepIngredients",
			Handler:    _EatingService_GetRecipeStepIngredients_Handler,
		},
		{
			MethodName: "GetRecipeStepInstrument",
			Handler:    _EatingService_GetRecipeStepInstrument_Handler,
		},
		{
			MethodName: "GetRecipeStepInstruments",
			Handler:    _EatingService_GetRecipeStepInstruments_Handler,
		},
		{
			MethodName: "GetRecipeStepProduct",
			Handler:    _EatingService_GetRecipeStepProduct_Handler,
		},
		{
			MethodName: "GetRecipeStepProducts",
			Handler:    _EatingService_GetRecipeStepProducts_Handler,
		},
		{
			MethodName: "GetRecipeStepVessel",
			Handler:    _EatingService_GetRecipeStepVessel_Handler,
		},
		{
			MethodName: "GetRecipeStepVessels",
			Handler:    _EatingService_GetRecipeStepVessels_Handler,
		},
		{
			MethodName: "GetRecipeSteps",
			Handler:    _EatingService_GetRecipeSteps_Handler,
		},
		{
			MethodName: "GetRecipes",
			Handler:    _EatingService_GetRecipes_Handler,
		},
		{
			MethodName: "GetSelf",
			Handler:    _EatingService_GetSelf_Handler,
		},
		{
			MethodName: "GetSentHouseholdInvitations",
			Handler:    _EatingService_GetSentHouseholdInvitations_Handler,
		},
		{
			MethodName: "GetServiceSetting",
			Handler:    _EatingService_GetServiceSetting_Handler,
		},
		{
			MethodName: "GetServiceSettingConfigurationByName",
			Handler:    _EatingService_GetServiceSettingConfigurationByName_Handler,
		},
		{
			MethodName: "GetServiceSettingConfigurationsForHousehold",
			Handler:    _EatingService_GetServiceSettingConfigurationsForHousehold_Handler,
		},
		{
			MethodName: "GetServiceSettingConfigurationsForUser",
			Handler:    _EatingService_GetServiceSettingConfigurationsForUser_Handler,
		},
		{
			MethodName: "GetServiceSettings",
			Handler:    _EatingService_GetServiceSettings_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _EatingService_GetUser_Handler,
		},
		{
			MethodName: "GetUserIngredientPreferences",
			Handler:    _EatingService_GetUserIngredientPreferences_Handler,
		},
		{
			MethodName: "GetUserNotification",
			Handler:    _EatingService_GetUserNotification_Handler,
		},
		{
			MethodName: "GetUserNotifications",
			Handler:    _EatingService_GetUserNotifications_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _EatingService_GetUsers_Handler,
		},
		{
			MethodName: "GetValidIngredient",
			Handler:    _EatingService_GetValidIngredient_Handler,
		},
		{
			MethodName: "GetValidIngredientGroup",
			Handler:    _EatingService_GetValidIngredientGroup_Handler,
		},
		{
			MethodName: "GetValidIngredientGroups",
			Handler:    _EatingService_GetValidIngredientGroups_Handler,
		},
		{
			MethodName: "GetValidIngredientMeasurementUnit",
			Handler:    _EatingService_GetValidIngredientMeasurementUnit_Handler,
		},
		{
			MethodName: "GetValidIngredientMeasurementUnits",
			Handler:    _EatingService_GetValidIngredientMeasurementUnits_Handler,
		},
		{
			MethodName: "GetValidIngredientMeasurementUnitsByIngredient",
			Handler:    _EatingService_GetValidIngredientMeasurementUnitsByIngredient_Handler,
		},
		{
			MethodName: "GetValidIngredientMeasurementUnitsByMeasurementUnit",
			Handler:    _EatingService_GetValidIngredientMeasurementUnitsByMeasurementUnit_Handler,
		},
		{
			MethodName: "GetValidIngredientPreparation",
			Handler:    _EatingService_GetValidIngredientPreparation_Handler,
		},
		{
			MethodName: "GetValidIngredientPreparations",
			Handler:    _EatingService_GetValidIngredientPreparations_Handler,
		},
		{
			MethodName: "GetValidIngredientPreparationsByIngredient",
			Handler:    _EatingService_GetValidIngredientPreparationsByIngredient_Handler,
		},
		{
			MethodName: "GetValidIngredientPreparationsByPreparation",
			Handler:    _EatingService_GetValidIngredientPreparationsByPreparation_Handler,
		},
		{
			MethodName: "GetValidIngredientState",
			Handler:    _EatingService_GetValidIngredientState_Handler,
		},
		{
			MethodName: "GetValidIngredientStateIngredient",
			Handler:    _EatingService_GetValidIngredientStateIngredient_Handler,
		},
		{
			MethodName: "GetValidIngredientStateIngredients",
			Handler:    _EatingService_GetValidIngredientStateIngredients_Handler,
		},
		{
			MethodName: "GetValidIngredientStateIngredientsByIngredient",
			Handler:    _EatingService_GetValidIngredientStateIngredientsByIngredient_Handler,
		},
		{
			MethodName: "GetValidIngredientStateIngredientsByIngredientState",
			Handler:    _EatingService_GetValidIngredientStateIngredientsByIngredientState_Handler,
		},
		{
			MethodName: "GetValidIngredientStates",
			Handler:    _EatingService_GetValidIngredientStates_Handler,
		},
		{
			MethodName: "GetValidIngredients",
			Handler:    _EatingService_GetValidIngredients_Handler,
		},
		{
			MethodName: "GetValidInstrument",
			Handler:    _EatingService_GetValidInstrument_Handler,
		},
		{
			MethodName: "GetValidInstruments",
			Handler:    _EatingService_GetValidInstruments_Handler,
		},
		{
			MethodName: "GetValidMeasurementUnit",
			Handler:    _EatingService_GetValidMeasurementUnit_Handler,
		},
		{
			MethodName: "GetValidMeasurementUnitConversion",
			Handler:    _EatingService_GetValidMeasurementUnitConversion_Handler,
		},
		{
			MethodName: "GetValidMeasurementUnitConversionsFromUnit",
			Handler:    _EatingService_GetValidMeasurementUnitConversionsFromUnit_Handler,
		},
		{
			MethodName: "GetValidMeasurementUnitConversionsToUnit",
			Handler:    _EatingService_GetValidMeasurementUnitConversionsToUnit_Handler,
		},
		{
			MethodName: "GetValidMeasurementUnits",
			Handler:    _EatingService_GetValidMeasurementUnits_Handler,
		},
		{
			MethodName: "GetValidPreparation",
			Handler:    _EatingService_GetValidPreparation_Handler,
		},
		{
			MethodName: "GetValidPreparationInstrument",
			Handler:    _EatingService_GetValidPreparationInstrument_Handler,
		},
		{
			MethodName: "GetValidPreparationInstruments",
			Handler:    _EatingService_GetValidPreparationInstruments_Handler,
		},
		{
			MethodName: "GetValidPreparationInstrumentsByInstrument",
			Handler:    _EatingService_GetValidPreparationInstrumentsByInstrument_Handler,
		},
		{
			MethodName: "GetValidPreparationInstrumentsByPreparation",
			Handler:    _EatingService_GetValidPreparationInstrumentsByPreparation_Handler,
		},
		{
			MethodName: "GetValidPreparationVessel",
			Handler:    _EatingService_GetValidPreparationVessel_Handler,
		},
		{
			MethodName: "GetValidPreparationVessels",
			Handler:    _EatingService_GetValidPreparationVessels_Handler,
		},
		{
			MethodName: "GetValidPreparationVesselsByPreparation",
			Handler:    _EatingService_GetValidPreparationVesselsByPreparation_Handler,
		},
		{
			MethodName: "GetValidPreparationVesselsByVessel",
			Handler:    _EatingService_GetValidPreparationVesselsByVessel_Handler,
		},
		{
			MethodName: "GetValidPreparations",
			Handler:    _EatingService_GetValidPreparations_Handler,
		},
		{
			MethodName: "GetValidVessel",
			Handler:    _EatingService_GetValidVessel_Handler,
		},
		{
			MethodName: "GetValidVessels",
			Handler:    _EatingService_GetValidVessels_Handler,
		},
		{
			MethodName: "GetWebhook",
			Handler:    _EatingService_GetWebhook_Handler,
		},
		{
			MethodName: "GetWebhooks",
			Handler:    _EatingService_GetWebhooks_Handler,
		},
		{
			MethodName: "LoginForToken",
			Handler:    _EatingService_LoginForToken_Handler,
		},
		{
			MethodName: "PublishArbitraryQueueMessage",
			Handler:    _EatingService_PublishArbitraryQueueMessage_Handler,
		},
		{
			MethodName: "RedeemPasswordResetToken",
			Handler:    _EatingService_RedeemPasswordResetToken_Handler,
		},
		{
			MethodName: "RefreshTOTPSecret",
			Handler:    _EatingService_RefreshTOTPSecret_Handler,
		},
		{
			MethodName: "RejectHouseholdInvitation",
			Handler:    _EatingService_RejectHouseholdInvitation_Handler,
		},
		{
			MethodName: "RequestEmailVerificationEmail",
			Handler:    _EatingService_RequestEmailVerificationEmail_Handler,
		},
		{
			MethodName: "RequestPasswordResetToken",
			Handler:    _EatingService_RequestPasswordResetToken_Handler,
		},
		{
			MethodName: "RequestUsernameReminder",
			Handler:    _EatingService_RequestUsernameReminder_Handler,
		},
		{
			MethodName: "RunFinalizeMealPlanWorker",
			Handler:    _EatingService_RunFinalizeMealPlanWorker_Handler,
		},
		{
			MethodName: "RunMealPlanGroceryListInitializerWorker",
			Handler:    _EatingService_RunMealPlanGroceryListInitializerWorker_Handler,
		},
		{
			MethodName: "RunMealPlanTaskCreatorWorker",
			Handler:    _EatingService_RunMealPlanTaskCreatorWorker_Handler,
		},
		{
			MethodName: "SearchForMeals",
			Handler:    _EatingService_SearchForMeals_Handler,
		},
		{
			MethodName: "SearchForRecipes",
			Handler:    _EatingService_SearchForRecipes_Handler,
		},
		{
			MethodName: "SearchForServiceSettings",
			Handler:    _EatingService_SearchForServiceSettings_Handler,
		},
		{
			MethodName: "SearchForUsers",
			Handler:    _EatingService_SearchForUsers_Handler,
		},
		{
			MethodName: "SearchForValidIngredientGroups",
			Handler:    _EatingService_SearchForValidIngredientGroups_Handler,
		},
		{
			MethodName: "SearchForValidIngredientStates",
			Handler:    _EatingService_SearchForValidIngredientStates_Handler,
		},
		{
			MethodName: "SearchForValidIngredients",
			Handler:    _EatingService_SearchForValidIngredients_Handler,
		},
		{
			MethodName: "SearchForValidInstruments",
			Handler:    _EatingService_SearchForValidInstruments_Handler,
		},
		{
			MethodName: "SearchForValidMeasurementUnits",
			Handler:    _EatingService_SearchForValidMeasurementUnits_Handler,
		},
		{
			MethodName: "SearchForValidPreparations",
			Handler:    _EatingService_SearchForValidPreparations_Handler,
		},
		{
			MethodName: "SearchForValidVessels",
			Handler:    _EatingService_SearchForValidVessels_Handler,
		},
		{
			MethodName: "SearchValidIngredientsByPreparation",
			Handler:    _EatingService_SearchValidIngredientsByPreparation_Handler,
		},
		{
			MethodName: "SearchValidMeasurementUnitsByIngredient",
			Handler:    _EatingService_SearchValidMeasurementUnitsByIngredient_Handler,
		},
		{
			MethodName: "SetDefaultHousehold",
			Handler:    _EatingService_SetDefaultHousehold_Handler,
		},
		{
			MethodName: "TransferHouseholdOwnership",
			Handler:    _EatingService_TransferHouseholdOwnership_Handler,
		},
		{
			MethodName: "UpdateHousehold",
			Handler:    _EatingService_UpdateHousehold_Handler,
		},
		{
			MethodName: "UpdateHouseholdInstrumentOwnership",
			Handler:    _EatingService_UpdateHouseholdInstrumentOwnership_Handler,
		},
		{
			MethodName: "UpdateHouseholdMemberPermissions",
			Handler:    _EatingService_UpdateHouseholdMemberPermissions_Handler,
		},
		{
			MethodName: "UpdateMealPlan",
			Handler:    _EatingService_UpdateMealPlan_Handler,
		},
		{
			MethodName: "UpdateMealPlanEvent",
			Handler:    _EatingService_UpdateMealPlanEvent_Handler,
		},
		{
			MethodName: "UpdateMealPlanGroceryListItem",
			Handler:    _EatingService_UpdateMealPlanGroceryListItem_Handler,
		},
		{
			MethodName: "UpdateMealPlanOption",
			Handler:    _EatingService_UpdateMealPlanOption_Handler,
		},
		{
			MethodName: "UpdateMealPlanOptionVote",
			Handler:    _EatingService_UpdateMealPlanOptionVote_Handler,
		},
		{
			MethodName: "UpdateMealPlanTaskStatus",
			Handler:    _EatingService_UpdateMealPlanTaskStatus_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _EatingService_UpdatePassword_Handler,
		},
		{
			MethodName: "UpdateRecipe",
			Handler:    _EatingService_UpdateRecipe_Handler,
		},
		{
			MethodName: "UpdateRecipePrepTask",
			Handler:    _EatingService_UpdateRecipePrepTask_Handler,
		},
		{
			MethodName: "UpdateRecipeRating",
			Handler:    _EatingService_UpdateRecipeRating_Handler,
		},
		{
			MethodName: "UpdateRecipeStep",
			Handler:    _EatingService_UpdateRecipeStep_Handler,
		},
		{
			MethodName: "UpdateRecipeStepCompletionCondition",
			Handler:    _EatingService_UpdateRecipeStepCompletionCondition_Handler,
		},
		{
			MethodName: "UpdateRecipeStepIngredient",
			Handler:    _EatingService_UpdateRecipeStepIngredient_Handler,
		},
		{
			MethodName: "UpdateRecipeStepInstrument",
			Handler:    _EatingService_UpdateRecipeStepInstrument_Handler,
		},
		{
			MethodName: "UpdateRecipeStepProduct",
			Handler:    _EatingService_UpdateRecipeStepProduct_Handler,
		},
		{
			MethodName: "UpdateRecipeStepVessel",
			Handler:    _EatingService_UpdateRecipeStepVessel_Handler,
		},
		{
			MethodName: "UpdateServiceSettingConfiguration",
			Handler:    _EatingService_UpdateServiceSettingConfiguration_Handler,
		},
		{
			MethodName: "UpdateUserDetails",
			Handler:    _EatingService_UpdateUserDetails_Handler,
		},
		{
			MethodName: "UpdateUserEmailAddress",
			Handler:    _EatingService_UpdateUserEmailAddress_Handler,
		},
		{
			MethodName: "UpdateUserIngredientPreference",
			Handler:    _EatingService_UpdateUserIngredientPreference_Handler,
		},
		{
			MethodName: "UpdateUserNotification",
			Handler:    _EatingService_UpdateUserNotification_Handler,
		},
		{
			MethodName: "UpdateUserUsername",
			Handler:    _EatingService_UpdateUserUsername_Handler,
		},
		{
			MethodName: "UpdateValidIngredient",
			Handler:    _EatingService_UpdateValidIngredient_Handler,
		},
		{
			MethodName: "UpdateValidIngredientGroup",
			Handler:    _EatingService_UpdateValidIngredientGroup_Handler,
		},
		{
			MethodName: "UpdateValidIngredientMeasurementUnit",
			Handler:    _EatingService_UpdateValidIngredientMeasurementUnit_Handler,
		},
		{
			MethodName: "UpdateValidIngredientPreparation",
			Handler:    _EatingService_UpdateValidIngredientPreparation_Handler,
		},
		{
			MethodName: "UpdateValidIngredientState",
			Handler:    _EatingService_UpdateValidIngredientState_Handler,
		},
		{
			MethodName: "UpdateValidIngredientStateIngredient",
			Handler:    _EatingService_UpdateValidIngredientStateIngredient_Handler,
		},
		{
			MethodName: "UpdateValidInstrument",
			Handler:    _EatingService_UpdateValidInstrument_Handler,
		},
		{
			MethodName: "UpdateValidMeasurementUnit",
			Handler:    _EatingService_UpdateValidMeasurementUnit_Handler,
		},
		{
			MethodName: "UpdateValidMeasurementUnitConversion",
			Handler:    _EatingService_UpdateValidMeasurementUnitConversion_Handler,
		},
		{
			MethodName: "UpdateValidPreparation",
			Handler:    _EatingService_UpdateValidPreparation_Handler,
		},
		{
			MethodName: "UpdateValidPreparationInstrument",
			Handler:    _EatingService_UpdateValidPreparationInstrument_Handler,
		},
		{
			MethodName: "UpdateValidPreparationVessel",
			Handler:    _EatingService_UpdateValidPreparationVessel_Handler,
		},
		{
			MethodName: "UpdateValidVessel",
			Handler:    _EatingService_UpdateValidVessel_Handler,
		},
		{
			MethodName: "UploadUserAvatar",
			Handler:    _EatingService_UploadUserAvatar_Handler,
		},
		{
			MethodName: "VerifyEmailAddress",
			Handler:    _EatingService_VerifyEmailAddress_Handler,
		},
		{
			MethodName: "VerifyTOTPSecret",
			Handler:    _EatingService_VerifyTOTPSecret_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
