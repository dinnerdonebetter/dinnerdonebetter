// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package grpcapi

import (
	"context"
	"github.com/dinnerdonebetter/backend/internal/config"
	"github.com/dinnerdonebetter/backend/internal/database/postgres"
	"github.com/dinnerdonebetter/backend/internal/grpcimpl/serverimpl"
	"github.com/dinnerdonebetter/backend/internal/lib/observability/logging/config"
	"github.com/dinnerdonebetter/backend/internal/lib/observability/tracing/config"
	"github.com/dinnerdonebetter/backend/internal/lib/server/grpc"
)

// Injectors from build.go:

// Build builds a server.
func Build(ctx context.Context, cfg *config.APIServiceConfig) (*grpc.Server, error) {
	grpcConfig := &cfg.GRPCServer
	observabilityConfig := &cfg.Observability
	loggingcfgConfig := &observabilityConfig.Logging
	logger, err := loggingcfg.ProvideLogger(ctx, loggingcfgConfig)
	if err != nil {
		return nil, err
	}
	tracingcfgConfig := &observabilityConfig.Tracing
	tracerProvider, err := tracingcfg.ProvideTracerProvider(ctx, tracingcfgConfig, logger)
	if err != nil {
		return nil, err
	}
	databasecfgConfig := &cfg.Database
	dataManager, err := postgres.ProvideDatabaseClient(ctx, logger, tracerProvider, databasecfgConfig)
	if err != nil {
		return nil, err
	}
	eatingServiceServer, err := serverimpl.NewServer(tracerProvider, logger, dataManager)
	if err != nil {
		return nil, err
	}
	v := BuildRegistrationFuncs(eatingServiceServer)
	server, err := grpc.NewGRPCServer(grpcConfig, logger, v...)
	if err != nil {
		return nil, err
	}
	return server, nil
}
