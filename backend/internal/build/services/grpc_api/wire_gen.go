// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package grpcapi

import (
	"context"

	"github.com/dinnerdonebetter/backend/internal/config"
	"github.com/dinnerdonebetter/backend/internal/database/postgres"
	"github.com/dinnerdonebetter/backend/internal/grpcimpl/serverimpl"
	"github.com/dinnerdonebetter/backend/internal/lib/analytics/config"
	"github.com/dinnerdonebetter/backend/internal/lib/authentication"
	"github.com/dinnerdonebetter/backend/internal/lib/authentication/tokens/config"
	"github.com/dinnerdonebetter/backend/internal/lib/featureflags/config"
	"github.com/dinnerdonebetter/backend/internal/lib/messagequeue/config"
	"github.com/dinnerdonebetter/backend/internal/lib/observability/logging/config"
	"github.com/dinnerdonebetter/backend/internal/lib/observability/metrics/config"
	"github.com/dinnerdonebetter/backend/internal/lib/observability/tracing"
	"github.com/dinnerdonebetter/backend/internal/lib/observability/tracing/config"
	"github.com/dinnerdonebetter/backend/internal/lib/random"
	"github.com/dinnerdonebetter/backend/internal/lib/server/grpc"
)

// Injectors from build.go:

// Build builds a server.
func Build(ctx context.Context, cfg *config.APIServiceConfig) (*grpc.Server, error) {
	grpcConfig := &cfg.GRPCServer
	observabilityConfig := &cfg.Observability
	loggingcfgConfig := &observabilityConfig.Logging
	logger, err := loggingcfg.ProvideLogger(ctx, loggingcfgConfig)
	if err != nil {
		return nil, err
	}
	authcfgConfig := &cfg.Auth
	queuesConfig := cfg.Queues
	servicesConfig := &cfg.Services
	authenticationConfig := &servicesConfig.Auth
	tokenscfgConfig := &authenticationConfig.Tokens
	tracingcfgConfig := &observabilityConfig.Tracing
	tracerProvider, err := tracingcfg.ProvideTracerProvider(ctx, tracingcfgConfig, logger)
	if err != nil {
		return nil, err
	}
	issuer, err := tokenscfg.ProvideTokenIssuer(tokenscfgConfig, logger, tracerProvider)
	if err != nil {
		return nil, err
	}
	authenticator := authentication.ProvideArgon2Authenticator(logger, tracerProvider)
	featureflagscfgConfig := &cfg.FeatureFlags
	metricscfgConfig := &observabilityConfig.Metrics
	provider, err := metricscfg.ProvideMetricsProvider(ctx, logger, metricscfgConfig)
	if err != nil {
		return nil, err
	}
	client := tracing.BuildTracedHTTPClient()
	featureFlagManager, err := featureflagscfg.ProvideFeatureFlagManager(featureflagscfgConfig, logger, tracerProvider, provider, client)
	if err != nil {
		return nil, err
	}
	msgconfigConfig := &cfg.Events
	publisherProvider, err := msgconfig.ProvidePublisherProvider(ctx, logger, tracerProvider, msgconfigConfig)
	if err != nil {
		return nil, err
	}
	analyticscfgConfig := &cfg.Analytics
	eventReporter, err := analyticscfg.ProvideEventReporter(analyticscfgConfig, logger, tracerProvider, provider)
	if err != nil {
		return nil, err
	}
	databasecfgConfig := &cfg.Database
	dataManager, err := postgres.ProvideDatabaseClient(ctx, logger, tracerProvider, databasecfgConfig)
	if err != nil {
		return nil, err
	}
	userAuthDataManager := authentication.ProvideUserAuthDataManager(dataManager)
	manager, err := authentication.NewManager(authcfgConfig, queuesConfig, issuer, authenticator, tracerProvider, logger, featureFlagManager, publisherProvider, eventReporter, userAuthDataManager)
	if err != nil {
		return nil, err
	}
	generator := random.NewGenerator(logger, tracerProvider)
	server, err := serverimpl.NewServer(cfg, manager, tracerProvider, logger, dataManager, publisherProvider, eventReporter, featureFlagManager, issuer, authenticator, generator)
	if err != nil {
		return nil, err
	}
	v := BuildUnaryServerInterceptors(server)
	v2 := BuildStreamServerInterceptors(server)
	v3 := BuildRegistrationFuncs(server)
	grpcServer, err := grpc.NewGRPCServer(grpcConfig, logger, v, v2, v3...)
	if err != nil {
		return nil, err
	}
	return grpcServer, nil
}
