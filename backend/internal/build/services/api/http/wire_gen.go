// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package api

import (
	"context"

	"github.com/dinnerdonebetter/backend/internal/config"
	"github.com/dinnerdonebetter/backend/internal/database"
	"github.com/dinnerdonebetter/backend/internal/database/postgres"
	"github.com/dinnerdonebetter/backend/internal/lib/analytics/config"
	"github.com/dinnerdonebetter/backend/internal/lib/authentication"
	"github.com/dinnerdonebetter/backend/internal/lib/encoding"
	"github.com/dinnerdonebetter/backend/internal/lib/featureflags/config"
	"github.com/dinnerdonebetter/backend/internal/lib/messagequeue/config"
	"github.com/dinnerdonebetter/backend/internal/lib/observability/logging/config"
	"github.com/dinnerdonebetter/backend/internal/lib/observability/metrics/config"
	"github.com/dinnerdonebetter/backend/internal/lib/observability/tracing"
	"github.com/dinnerdonebetter/backend/internal/lib/observability/tracing/config"
	"github.com/dinnerdonebetter/backend/internal/lib/routing/config"
	"github.com/dinnerdonebetter/backend/internal/lib/server/http"
	authentication2 "github.com/dinnerdonebetter/backend/internal/services/core/handlers/authentication"
)

// Injectors from build.go:

// Build builds a server.
func Build(ctx context.Context, cfg *config.APIServiceConfig) (http.Server, error) {
	httpConfig := cfg.HTTPServer
	observabilityConfig := &cfg.Observability
	loggingcfgConfig := &observabilityConfig.Logging
	logger, err := loggingcfg.ProvideLogger(ctx, loggingcfgConfig)
	if err != nil {
		return nil, err
	}
	routingcfgConfig := cfg.Routing
	tracingcfgConfig := &observabilityConfig.Tracing
	tracerProvider, err := tracingcfg.ProvideTracerProvider(ctx, tracingcfgConfig, logger)
	if err != nil {
		return nil, err
	}
	metricscfgConfig := &observabilityConfig.Metrics
	provider, err := metricscfg.ProvideMetricsProvider(ctx, logger, metricscfgConfig)
	if err != nil {
		return nil, err
	}
	databasecfgConfig := &cfg.Database
	dataManager, err := postgres.ProvideDatabaseClient(ctx, logger, tracerProvider, databasecfgConfig)
	if err != nil {
		return nil, err
	}
	servicesConfig := &cfg.Services
	authenticationConfig := &servicesConfig.Auth
	authenticator := authentication.ProvideArgon2Authenticator(logger, tracerProvider)
	householdUserMembershipDataManager := database.ProvideHouseholdUserMembershipDataManager(dataManager)
	encodingConfig := cfg.Encoding
	contentType := encoding.ProvideContentType(encodingConfig)
	serverEncoderDecoder := encoding.ProvideServerEncoderDecoder(logger, tracerProvider, contentType)
	msgconfigConfig := &cfg.Events
	publisherProvider, err := msgconfig.ProvidePublisherProvider(ctx, logger, tracerProvider, msgconfigConfig)
	if err != nil {
		return nil, err
	}
	featureflagscfgConfig := &cfg.FeatureFlags
	client := tracing.BuildTracedHTTPClient()
	featureFlagManager, err := featureflagscfg.ProvideFeatureFlagManager(featureflagscfgConfig, logger, tracerProvider, provider, client)
	if err != nil {
		return nil, err
	}
	analyticscfgConfig := &cfg.Analytics
	eventReporter, err := analyticscfg.ProvideEventReporter(analyticscfgConfig, logger, tracerProvider, provider)
	if err != nil {
		return nil, err
	}
	config2 := &cfg.Routing
	routeParamManager, err := routingcfg.ProvideRouteParamManager(config2)
	if err != nil {
		return nil, err
	}
	queuesConfig := &cfg.Queues
	authDataService, err := authentication2.ProvideService(logger, authenticationConfig, authenticator, dataManager, householdUserMembershipDataManager, serverEncoderDecoder, tracerProvider, publisherProvider, featureFlagManager, eventReporter, routeParamManager, provider, queuesConfig)
	if err != nil {
		return nil, err
	}
	router, err := ProvideAPIRouter(routingcfgConfig, logger, tracerProvider, provider, dataManager, authDataService)
	if err != nil {
		return nil, err
	}
	server, err := http.ProvideHTTPServer(httpConfig, logger, router, tracerProvider)
	if err != nil {
		return nil, err
	}
	return server, nil
}
