// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package searchdataindexscheduler

import (
	"context"

	"github.com/dinnerdonebetter/backend/internal/config"
	"github.com/dinnerdonebetter/backend/internal/database/postgres"
	msgconfig "github.com/dinnerdonebetter/backend/internal/lib/messagequeue/config"
	loggingcfg "github.com/dinnerdonebetter/backend/internal/lib/observability/logging/config"
	metricscfg "github.com/dinnerdonebetter/backend/internal/lib/observability/metrics/config"
	tracingcfg "github.com/dinnerdonebetter/backend/internal/lib/observability/tracing/config"
	"github.com/dinnerdonebetter/backend/internal/lib/search/text/indexing"
)

// Injectors from build.go:

// Build builds a server.
func Build(ctx context.Context, cfg *config.SearchDataIndexSchedulerConfig) (*indexing.IndexScheduler, error) {
	observabilityConfig := &cfg.Observability
	loggingcfgConfig := &observabilityConfig.Logging
	logger, err := loggingcfg.ProvideLogger(ctx, loggingcfgConfig)
	if err != nil {
		return nil, err
	}
	tracingcfgConfig := &observabilityConfig.Tracing
	tracerProvider, err := tracingcfg.ProvideTracerProvider(ctx, tracingcfgConfig, logger)
	if err != nil {
		return nil, err
	}
	metricscfgConfig := &observabilityConfig.Metrics
	provider, err := metricscfg.ProvideMetricsProvider(ctx, logger, metricscfgConfig)
	if err != nil {
		return nil, err
	}
	msgconfigConfig := &cfg.Events
	publisherProvider, err := msgconfig.ProvidePublisherProvider(ctx, logger, tracerProvider, msgconfigConfig)
	if err != nil {
		return nil, err
	}
	databasecfgConfig := &cfg.Database
	dataManager, err := postgres.ProvideDatabaseClient(ctx, logger, tracerProvider, databasecfgConfig)
	if err != nil {
		return nil, err
	}
	v := ProvideIndexFunctions(dataManager)
	indexScheduler, err := indexing.NewIndexScheduler(logger, tracerProvider, provider, publisherProvider, v)
	if err != nil {
		return nil, err
	}
	return indexScheduler, nil
}
