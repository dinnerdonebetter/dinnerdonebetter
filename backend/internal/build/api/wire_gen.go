// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package api

import (
	"context"

	"github.com/dinnerdonebetter/backend/internal/analytics/config"
	"github.com/dinnerdonebetter/backend/internal/authentication"
	"github.com/dinnerdonebetter/backend/internal/config"
	"github.com/dinnerdonebetter/backend/internal/database"
	"github.com/dinnerdonebetter/backend/internal/database/postgres"
	"github.com/dinnerdonebetter/backend/internal/encoding"
	"github.com/dinnerdonebetter/backend/internal/featureflags/config"
	"github.com/dinnerdonebetter/backend/internal/features/recipeanalysis"
	"github.com/dinnerdonebetter/backend/internal/messagequeue/config"
	"github.com/dinnerdonebetter/backend/internal/observability/logging/config"
	"github.com/dinnerdonebetter/backend/internal/observability/metrics/config"
	"github.com/dinnerdonebetter/backend/internal/observability/tracing"
	"github.com/dinnerdonebetter/backend/internal/observability/tracing/config"
	"github.com/dinnerdonebetter/backend/internal/pkg/random"
	"github.com/dinnerdonebetter/backend/internal/routing/config"
	"github.com/dinnerdonebetter/backend/internal/server/http"
	"github.com/dinnerdonebetter/backend/internal/services/core/admin"
	"github.com/dinnerdonebetter/backend/internal/services/core/auditlogentries"
	authentication2 "github.com/dinnerdonebetter/backend/internal/services/core/authentication"
	"github.com/dinnerdonebetter/backend/internal/services/core/dataprivacy"
	"github.com/dinnerdonebetter/backend/internal/services/core/householdinvitations"
	"github.com/dinnerdonebetter/backend/internal/services/core/households"
	"github.com/dinnerdonebetter/backend/internal/services/core/oauth2clients"
	"github.com/dinnerdonebetter/backend/internal/services/core/servicesettingconfigurations"
	"github.com/dinnerdonebetter/backend/internal/services/core/servicesettings"
	"github.com/dinnerdonebetter/backend/internal/services/core/usernotifications"
	"github.com/dinnerdonebetter/backend/internal/services/core/users"
	"github.com/dinnerdonebetter/backend/internal/services/core/webhooks"
	"github.com/dinnerdonebetter/backend/internal/services/core/workers"
	"github.com/dinnerdonebetter/backend/internal/services/eating/householdinstrumentownerships"
	"github.com/dinnerdonebetter/backend/internal/services/eating/mealplanevents"
	"github.com/dinnerdonebetter/backend/internal/services/eating/mealplangrocerylistitems"
	"github.com/dinnerdonebetter/backend/internal/services/eating/mealplanoptions"
	"github.com/dinnerdonebetter/backend/internal/services/eating/mealplanoptionvotes"
	"github.com/dinnerdonebetter/backend/internal/services/eating/mealplans"
	"github.com/dinnerdonebetter/backend/internal/services/eating/mealplantasks"
	"github.com/dinnerdonebetter/backend/internal/services/eating/meals"
	"github.com/dinnerdonebetter/backend/internal/services/eating/recipe_management"
	"github.com/dinnerdonebetter/backend/internal/services/eating/useringredientpreferences"
	"github.com/dinnerdonebetter/backend/internal/services/eating/valid_enumerations"
	"github.com/dinnerdonebetter/backend/internal/uploads/images"
)

// Injectors from build.go:

// Build builds a server.
func Build(ctx context.Context, cfg *config.APIServiceConfig) (http.Server, error) {
	httpConfig := cfg.Server
	observabilityConfig := &cfg.Observability
	loggingcfgConfig := &observabilityConfig.Logging
	logger := loggingcfg.ProvideLogger(loggingcfgConfig)
	tracingcfgConfig := &observabilityConfig.Tracing
	tracerProvider, err := tracingcfg.ProvideTracerProvider(ctx, tracingcfgConfig, logger)
	if err != nil {
		return nil, err
	}
	databasecfgConfig := &cfg.Database
	dataManager, err := postgres.ProvideDatabaseClient(ctx, logger, tracerProvider, databasecfgConfig)
	if err != nil {
		return nil, err
	}
	routingcfgConfig := &cfg.Routing
	metricscfgConfig := &observabilityConfig.Metrics
	provider, err := metricscfg.ProvideMetricsProvider(ctx, logger, metricscfgConfig)
	if err != nil {
		return nil, err
	}
	router, err := routingcfg.ProvideRouter(routingcfgConfig, logger, tracerProvider, provider)
	if err != nil {
		return nil, err
	}
	servicesConfig := &cfg.Services
	authenticationConfig := &servicesConfig.Auth
	authenticator := authentication.ProvideArgon2Authenticator(logger, tracerProvider)
	householdUserMembershipDataManager := database.ProvideHouseholdUserMembershipDataManager(dataManager)
	encodingConfig := cfg.Encoding
	contentType := encoding.ProvideContentType(encodingConfig)
	serverEncoderDecoder := encoding.ProvideServerEncoderDecoder(logger, tracerProvider, contentType)
	msgconfigConfig := &cfg.Events
	publisherProvider, err := msgconfig.ProvidePublisherProvider(ctx, logger, tracerProvider, msgconfigConfig)
	if err != nil {
		return nil, err
	}
	featureflagscfgConfig := &cfg.FeatureFlags
	client := tracing.BuildTracedHTTPClient()
	featureFlagManager, err := featureflagscfg.ProvideFeatureFlagManager(featureflagscfgConfig, logger, tracerProvider, client)
	if err != nil {
		return nil, err
	}
	analyticscfgConfig := &cfg.Analytics
	eventReporter, err := analyticscfg.ProvideEventReporter(analyticscfgConfig, logger, tracerProvider)
	if err != nil {
		return nil, err
	}
	routeParamManager, err := routingcfg.ProvideRouteParamManager(routingcfgConfig, logger, tracerProvider, provider)
	if err != nil {
		return nil, err
	}
	queuesConfig := &cfg.Queues
	authDataService, err := authentication2.ProvideService(logger, authenticationConfig, authenticator, dataManager, householdUserMembershipDataManager, serverEncoderDecoder, tracerProvider, publisherProvider, featureFlagManager, eventReporter, routeParamManager, provider, queuesConfig)
	if err != nil {
		return nil, err
	}
	userDataManager := database.ProvideUserDataManager(dataManager)
	householdInvitationDataManager := database.ProvideHouseholdInvitationDataManager(dataManager)
	generator := random.NewGenerator(logger, tracerProvider)
	passwordResetTokenDataManager := database.ProvidePasswordResetTokenDataManager(dataManager)
	userDataService, err := users.ProvideUsersService(authenticationConfig, logger, userDataManager, householdInvitationDataManager, householdUserMembershipDataManager, authenticator, serverEncoderDecoder, routeParamManager, tracerProvider, publisherProvider, generator, passwordResetTokenDataManager, featureFlagManager, eventReporter, queuesConfig)
	if err != nil {
		return nil, err
	}
	householdDataManager := database.ProvideHouseholdDataManager(dataManager)
	householdDataService, err := households.ProvideService(logger, householdDataManager, householdUserMembershipDataManager, serverEncoderDecoder, routeParamManager, publisherProvider, tracerProvider, generator, queuesConfig)
	if err != nil {
		return nil, err
	}
	householdInvitationDataService, err := householdinvitations.ProvideHouseholdInvitationsService(logger, userDataManager, householdInvitationDataManager, serverEncoderDecoder, routeParamManager, publisherProvider, tracerProvider, generator, queuesConfig)
	if err != nil {
		return nil, err
	}
	mealsConfig := &servicesConfig.Meals
	textsearchcfgConfig := &cfg.Search
	mealDataManager := database.ProvideMealDataManager(dataManager)
	mealDataService, err := meals.ProvideService(ctx, logger, mealsConfig, textsearchcfgConfig, mealDataManager, serverEncoderDecoder, routeParamManager, publisherProvider, tracerProvider, queuesConfig)
	if err != nil {
		return nil, err
	}
	mealPlanDataManager := database.ProvideMealPlanDataManager(dataManager)
	mealPlanDataService, err := mealplans.ProvideService(logger, mealPlanDataManager, serverEncoderDecoder, routeParamManager, publisherProvider, tracerProvider, queuesConfig)
	if err != nil {
		return nil, err
	}
	mealPlanOptionDataManager := database.ProvideMealPlanOptionDataManager(dataManager)
	mealPlanOptionDataService, err := mealplanoptions.ProvideService(logger, mealPlanOptionDataManager, serverEncoderDecoder, routeParamManager, publisherProvider, tracerProvider, queuesConfig)
	if err != nil {
		return nil, err
	}
	mealPlanOptionVoteDataService, err := mealplanoptionvotes.ProvideService(logger, dataManager, serverEncoderDecoder, routeParamManager, publisherProvider, tracerProvider, queuesConfig)
	if err != nil {
		return nil, err
	}
	mealPlanEventDataManager := database.ProvideMealPlanEventDataManager(dataManager)
	mealPlanEventDataService, err := mealplanevents.ProvideService(logger, mealPlanEventDataManager, serverEncoderDecoder, routeParamManager, publisherProvider, tracerProvider, queuesConfig)
	if err != nil {
		return nil, err
	}
	mealPlanTaskDataManager := database.ProvideMealPlanTaskDataManager(dataManager)
	mealPlanTaskDataService, err := mealplantasks.ProvideService(logger, mealPlanTaskDataManager, serverEncoderDecoder, routeParamManager, publisherProvider, tracerProvider, queuesConfig)
	if err != nil {
		return nil, err
	}
	mealPlanGroceryListItemDataManager := database.ProvideMealPlanGroceryListItemDataManager(dataManager)
	mealPlanGroceryListItemDataService, err := mealplangrocerylistitems.ProvideService(logger, mealPlanGroceryListItemDataManager, serverEncoderDecoder, routeParamManager, publisherProvider, tracerProvider, queuesConfig)
	if err != nil {
		return nil, err
	}
	webhookDataManager := database.ProvideWebhookDataManager(dataManager)
	webhookDataService, err := webhooks.ProvideWebhooksService(logger, webhookDataManager, serverEncoderDecoder, routeParamManager, publisherProvider, tracerProvider, queuesConfig)
	if err != nil {
		return nil, err
	}
	adminUserDataManager := database.ProvideAdminUserDataManager(dataManager)
	adminDataService, err := admin.ProvideService(logger, adminUserDataManager, serverEncoderDecoder, tracerProvider, queuesConfig, publisherProvider)
	if err != nil {
		return nil, err
	}
	serviceSettingDataManager := database.ProvideServiceSettingDataManager(dataManager)
	serviceSettingDataService, err := servicesettings.ProvideService(logger, serviceSettingDataManager, serverEncoderDecoder, routeParamManager, publisherProvider, tracerProvider, queuesConfig)
	if err != nil {
		return nil, err
	}
	serviceSettingConfigurationDataManager := database.ProvideServiceSettingConfigurationDataManager(dataManager)
	serviceSettingConfigurationDataService, err := servicesettingconfigurations.ProvideService(logger, serviceSettingConfigurationDataManager, serverEncoderDecoder, routeParamManager, publisherProvider, tracerProvider, queuesConfig)
	if err != nil {
		return nil, err
	}
	userIngredientPreferenceDataManager := database.ProvideUserIngredientPreferenceDataManager(dataManager)
	userIngredientPreferenceDataService, err := useringredientpreferences.ProvideService(logger, userIngredientPreferenceDataManager, serverEncoderDecoder, routeParamManager, publisherProvider, tracerProvider, queuesConfig)
	if err != nil {
		return nil, err
	}
	householdInstrumentOwnershipDataManager := database.ProvideHouseholdInstrumentOwnershipDataManager(dataManager)
	householdInstrumentOwnershipDataService, err := householdinstrumentownerships.ProvideService(logger, householdInstrumentOwnershipDataManager, serverEncoderDecoder, routeParamManager, publisherProvider, tracerProvider, queuesConfig)
	if err != nil {
		return nil, err
	}
	oauth2clientsConfig := &servicesConfig.OAuth2Clients
	oAuth2ClientDataManager := database.ProvideOAuth2ClientDataManager(dataManager)
	oAuth2ClientDataService, err := oauth2clients.ProvideOAuth2ClientsService(logger, oauth2clientsConfig, oAuth2ClientDataManager, serverEncoderDecoder, routeParamManager, tracerProvider, generator, publisherProvider, queuesConfig)
	if err != nil {
		return nil, err
	}
	recipeAnalyzer := recipeanalysis.NewRecipeAnalyzer(logger, tracerProvider)
	workerService, err := workers.ProvideService(logger, dataManager, serverEncoderDecoder, publisherProvider, tracerProvider, recipeAnalyzer, queuesConfig)
	if err != nil {
		return nil, err
	}
	userNotificationDataManager := database.ProvideUserNotificationDataManager(dataManager)
	userNotificationDataService, err := usernotifications.ProvideService(logger, serverEncoderDecoder, routeParamManager, publisherProvider, tracerProvider, userNotificationDataManager, queuesConfig)
	if err != nil {
		return nil, err
	}
	auditLogEntryDataManager := database.ProvideAuditLogEntryDataManager(dataManager)
	auditLogEntryDataService, err := auditlogentries.ProvideService(logger, auditLogEntryDataManager, serverEncoderDecoder, routeParamManager, tracerProvider)
	if err != nil {
		return nil, err
	}
	dataprivacyConfig := &servicesConfig.DataPrivacy
	dataPrivacyDataManager := database.ProvideDataPrivacyDataManager(dataManager)
	dataPrivacyService, err := dataprivacy.ProvideService(ctx, logger, dataprivacyConfig, dataPrivacyDataManager, serverEncoderDecoder, publisherProvider, tracerProvider, routeParamManager, queuesConfig)
	if err != nil {
		return nil, err
	}
	validenumerationsConfig := &servicesConfig.ValidEnumerations
	validEnumerationDataManager := database.ProvideValidEnumerationDataManager(dataManager)
	validEnumerationDataService, err := validenumerations.ProvideService(validenumerationsConfig, logger, validEnumerationDataManager, serverEncoderDecoder, routeParamManager, publisherProvider, tracerProvider, queuesConfig)
	if err != nil {
		return nil, err
	}
	recipemanagementConfig := &servicesConfig.Recipes
	mediaUploadProcessor := images.NewImageUploadProcessor(logger, tracerProvider)
	recipeManagementDataManager := database.ProvideRecipeManagementDataManager(dataManager)
	recipeManagementDataService, err := recipemanagement.ProvideService(ctx, logger, recipemanagementConfig, textsearchcfgConfig, recipeAnalyzer, serverEncoderDecoder, routeParamManager, publisherProvider, mediaUploadProcessor, tracerProvider, queuesConfig, recipeManagementDataManager)
	if err != nil {
		return nil, err
	}
	server, err := http.ProvideHTTPServer(ctx, httpConfig, dataManager, logger, router, tracerProvider, authDataService, userDataService, householdDataService, householdInvitationDataService, mealDataService, mealPlanDataService, mealPlanOptionDataService, mealPlanOptionVoteDataService, mealPlanEventDataService, mealPlanTaskDataService, mealPlanGroceryListItemDataService, webhookDataService, adminDataService, serviceSettingDataService, serviceSettingConfigurationDataService, userIngredientPreferenceDataService, householdInstrumentOwnershipDataService, oAuth2ClientDataService, workerService, userNotificationDataService, auditLogEntryDataService, dataPrivacyService, validEnumerationDataService, recipeManagementDataService, provider)
	if err != nil {
		return nil, err
	}
	return server, nil
}
