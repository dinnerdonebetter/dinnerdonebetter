# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: dinner-done-better-api-server
  pullPolicy: IfNotPresent
  tag: ""

jobs:
  db_cleaner:
    image:
      repository: dinner-done-better-db-cleaner
      tag: latest
      imagePullPolicy: IfNotPresent
    schedule: "* * * * *"
    failedJobsHistoryLimit: 1
    successfulJobsHistoryLimit: 3
    concurrencyPolicy: Forbid
    restartPolicy: OnFailure
    volumes:
      - name: "config"
        configMap:
          name: "dinner-done-better-config"

    volumeMounts:
      - name: "config"
        mountPath: "/etc/service-config.json"
        subPath: "config.json"


# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
nameOverride: "dinner-done-better"
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

# podSecurityContext: {}
  # fsGroup: 2000

# securityContext:
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  type: ClusterIP
  port: 8000

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: api-server.k8s
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# This is to set up the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /_meta_/live
    port: http
  initialDelaySeconds: 60
  periodSeconds: 3
  failureThreshold: 50
readinessProbe:
  httpGet:
    path: /_meta_/ready
    port: http
  initialDelaySeconds: 60
  periodSeconds: 3
  failureThreshold: 50

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 1
  # targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

resources:
  requests:
    memory: "512Mi"
    cpu: "1000m"

deployment:
  env:
    - name: "CONFIGURATION_FILEPATH"
      value: "/etc/service-config.json"

volumes:
  - name: "config"
    configMap:
      name: "dinner-done-better-config"

volumeMounts:
  - name: "config"
    mountPath: "/etc/service-config.json"
    subPath: "config.json"

nodeSelector: {}

tolerations: []

affinity: {}
