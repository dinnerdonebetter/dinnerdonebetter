run:
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 10m

  # Allow multiple parallel golangci-lint instances running. If false, golangci-lint acquires file lock on start.
  # Default: false
  allow-parallel-runners: true

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate
  formats:
   - format: colored-line-number

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true

# all available settings of specific linters: https://golangci-lint.run/usage/linters/#linters-configuration
linters-settings:
  cyclop:
    # the maximal code complexity to report
    max-complexity: 25
    # the maximal average package complexity. If it's higher than 0.0 (float) the check is enabled (default 0.0)
    package-average: 0.0
    # should ignore tests (default false)
    skip-tests: true
  errcheck:
    # report about not checking of errs in type assertions: `a := b.(MyStruct)`;
    # default is false: such cases aren't reported by default.
    check-type-assertions: true

    # report about assignment of errs to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    # default is false: such cases aren't reported by default.
    check-blank: true

    # # path to a file containing a list of functions to exclude from checking
    # # see https://github.com/kisielk/errcheck#excluding-functions for details
    # exclude: /path/to/file.txt
  forbidigo:
    # Forbid the following identifiers
    forbid:
      - ^t\.SkipNow\(\)$ # no skipped tests
    # Exclude godoc examples from forbidigo checks.  Default is true.
    exclude-godoc-examples: false
  govet:
    # enable or disable analyzers by name
    enable-all: true
    # settings per analyzer
    settings:
      printf: # analyzer name, run `go tool vet help` to see all analyzers
        funcs: # run `go tool vet help printf` to see available settings for `printf` analyzer
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf
      shadow:
        # Whether to be strict about shadowing; can be noisy.
        # Default: false
        strict: true
  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true
  goimports:
    # put imports beginning with prefix after 3rd-party packages;
    # it's a comma-separated list of prefixes
    local-prefixes: github.com/dinnerdonebetter/backend
  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 20
  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 100
  goconst:
    # minimal length of string constant, 3 by default
    min-len: 3
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 3
  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 512
    # tab width in spaces. Default to 1.
    tab-width: 1
  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to 'color'.
    locale: US
    ignore-words:
      - cancelled
      - cancelling
  nestif:
    min-complexity: 8
  wsl:
    allow-cuddle-declarations: true
  unused:
    # Mark all struct fields that have been written to as used.
    # Default: true
    field-writes-are-uses: false
    # Treat IncDec statement (e.g. `i++` or `i--`) as both read and write operation instead of just write.
    # Default: false
    post-statements-are-reads: true
    # Mark all exported identifiers as used.
    # Default: true
    exported-is-used: true
    # Mark all exported fields as used.
    # default: true
    exported-fields-are-used: false
    # Mark all function parameters as used.
    # default: true
    parameters-are-used: true
    # Mark all local variables as used.
    # default: true
    local-variables-are-used: true
    # Mark all identifiers inside generated files as used.
    # Default: true
    generated-is-used: true
  unparam:
    # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
    # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
    # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
    # with golangci-lint call it on a directory with the changed file.
    check-exported: false
  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 4
  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling.
    # For most programs usage of prealloc will be a premature optimization.

    # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
    # True by default.
    simple: true
    range-loops: true # Report preallocation suggestions on range loops, true by default
    for-loops: false # Report preallocation suggestions on for loops, false by default
  gocritic:
    # Which checks should be disabled; can't be combined with 'enabled-checks'; default is empty
    disabled-checks:
      - captLocal
      - singleCaseSwitch
      - sloppyReassign

    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint` run to see all tags and checks.
    # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
    enabled-tags:
      - diagnostic
      - style
      - performance
      - opinionated

    settings: # settings passed to gocritic
      rangeValCopy:
        sizeThreshold: 32

  gci:
    sections:
      - standard # Standard section: captures all standard packages.
      - prefix(github.com/dinnerdonebetter/backend) # Custom section: groups all imports with the specified Prefix.
      - prefix(github.com/dinnerdonebetter) # Custom section: groups all imports with the specified Prefix.
      - default # Default section: contains all imports that could not be matched to another section type.
    skip-generated: true
    custom-order: true

# last updated this list at v1.50.0
linters:
  fast: false
  disable-all: false
  enable:
    - errcheck                     # Errcheck is a program for checking for unchecked errs in go programs. These unchecked errs can be critical bugs in some cases
    - gosimple                     # Linter for Go source code that specializes in simplifying a code
    - govet                        # Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign                  # Detects when assignments to existing variables are not used
    - staticcheck                  # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    - unused                       # Checks Go code for unused constants, variables, functions and types
    - typecheck                    # Like the front-end of a Go compiler, parses and type-checks Go code
    - bodyclose                    # checks whether HTTP response body is closed successfully  # NOTE: disabled because of go 1.18
    - nilerr                       # Finds the code that returns nil even if it checks that the error is not nil.
    - asciicheck                   # Simple linter to check that your code does not contain non-ASCII identifiers
    - dogsled                      # Checks assignments with too many blank identifiers (e.g. x, , , _, := f())
    - durationcheck                # check for two durations multiplied together
    - errorlint                    # errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme introduced in Go 1.13.
    - copyloopvar                  # checks for pointers to enclosing loop variables
    - forbidigo                    # Forbids identifiers
    - forcetypeassert              # finds forced type assertions
    - goconst                      # Finds repeated strings that could be replaced by a constant
    - gocritic                     # Provides diagnostics that check for bugs, performance and style issues.
    - godot                        # Check if comments end in a period
    - gofmt                        # Gofmt checks whether code was gofmt-ed. This tool runs by default with the -s flag to check for code simplification
    - goheader                     # Checks is file header matches to pattern
    - gomoddirectives              # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod.
    - gomodguard                   # Allow and block list linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations.
    - goprintffuncname             # Checks that printf-like functions are named with f at the end
    - gosec                        # Inspects source code for security problems
    - importas                     # Enforces consistent import aliases
    - misspell                     # Finds commonly misspelled English words in comments
    - nakedret                     # Finds naked returns in functions greater than a specified function length
    - noctx                        # noctx finds sending http request without context.Context
    - nolintlint                   # Reports ill-formed or insufficient nolint directives
    - paralleltest                 # paralleltest detects missing usage of t.Parallel() method in your Go test
    - predeclared                  # find code that shadows one of Go's predeclared identifiers
    - promlinter                   # Check Prometheus metrics naming via promlint
    - sqlclosecheck                # Checks that sql.Rows and sql.Stmt are closed.
    - thelper                      # thelper detects golang test helpers without t.Helper() call and checks the consistency of test helpers
    - tparallel                    # tparallel detects inappropriate usage of t.Parallel() method in your Go test codes
    - unconvert                    # Remove unnecessary type conversions
    - unparam                      # Reports unused function parameters
    - wastedassign                 # wastedassign finds wasted assignment statements.
    - whitespace                   # Tool for detection of leading and trailing whitespace
    - gci                          # Gci control golang package import order and make it always deterministic.
    - asasalint                    # check for pass []any as any in variadic func(...any)
    - bidichk                      # Checks for dangerous unicode character sequences
    - contextcheck                 # check whether the function uses a non-inherited context
    - decorder                     # check declaration order and count of types, constants, variables and functions
    - errchkjson                   # Checks types passed to the json encoding functions. Reports unsupported types and optionally reports occasions, where the check for the returned error can be omitted.
    - errname                      # Checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error.
    - grouper                      # An analyzer to analyze expression groups.
    - loggercheck                  # Checks key value pairs for common logger libraries (kitlog,klog,logr,zap).
    - nilnil                       # Checks that there is no simultaneous return of nil error and an invalid value.
    - nosprintfhostport            # Checks for misuse of Sprintf to construct a host with port in a URL.
    - reassign                     # Checks that package variables are not reassigned
    - testableexamples             # linter checks if examples are testable (have an expected output)
    - usestdlibvars                # A linter that detect the possibility to use variables/constants from the Go standard library.
    - gocheckcompilerdirectives    # Checks that go compiler directive comments (//go:) are valid.
    - mirror                       # reports wrong mirror patterns of bytes/strings usage
    - tagalign                     # check that struct tags are well aligned
    - zerologlint                  # Detects the wrong usage of zerolog that a user forgets to dispatch with Send or Msg.
    - testableexamples             # linter checks if examples are testable (have an expected output)
    - gosmopolitan                 # Report certain i18n/l10n anti-patterns in your Go codebase.
    - mirror                       # Reports wrong mirror patterns of bytes/strings usage.

  disable:
    - cyclop                       # checks function and package cyclomatic complexity
    - dupl                         # Tool for code clone detection
    - dupword                      # checks for duplicate words in the source code
    - err113                       # Golang linter to check the errors handling expressions
    - exhaustive                   # checks exhaustiveness of enum switch statements
    - exhaustruct                  # checks if all struct fields are initialized
    - funlen                       # Tool for detection of long functions
    - gochecknoglobals             # check that no global variables exist
    - gochecknoinits               # Checks that no init functions are present in Go code
    - gocognit                     # Computes and checks the cognitive complexity of functions
    - gocyclo                      # Computes and checks the cyclomatic complexity of functions
    - goimports                    # Goimports does everything that gofmt does. Additionally, it checks unused imports. NOTE: disabled in favor of gci.
    - gomnd                        # An analyzer to detect magic numbers.
    - godox                        # Tool for detection of comment keywords
    - gofumpt                      # Gofumpt checks whether code was gofumpt-ed.
    - interfacebloat               # A linter that checks the number of methods inside an interface.
    - lll                          # Reports long lines
    - maintidx                     # measures the maintainability index of each function.
    - makezero                     # Finds slice declarations with non-zero initial length
    - nestif                       # Reports deeply nested if statements
    - nlreturn                     # nlreturn checks for a new line before return and branch statements to increase code clarity
    - prealloc                     # Finds slice declarations that could potentially be preallocated
    - revive                       # Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint.
    - rowserrcheck                 # Checks whether Err of rows is checked successfully; lots of false positives
    - stylecheck                   # Stylecheck is a replacement for golint
    - testpackage                  # linter that makes you use a separate _test package
    - varnamelen                   # Checks that the length of a variable's name matches its scope
    - wrapcheck                    # Checks that errors returned from external packages are wrapped
    - depguard                     # Go linter that checks if package imports are in a list of acceptable packages
    - nonamedreturns               # Reports all named returns
    - musttag                      # enforce field tags in (un)marshaled structs
    - containedctx                 # detects struct contained context.Context field
    - ireturn                      # Accept Interfaces, Return Concrete Types
    - wsl                          # Whitespace Linter - Forces you to use empty lines!
    - tagliatelle                  # Checks the struct tags. Disabled because it expects the `Id` form instead of `ID`.
    - tenv                         # tenv is analyzer that detects using os.Setenv instead of t.Setenv since Go1.17

issues:
  # List of regexps of issue texts to exclude, empty list by default.
  # But independently of this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To list all
  # excluded by default patterns execute `golangci-lint run --help`
  # exclude:
  #   -


  # which dirs to skip: they won't be analyzed;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but next dirs are always skipped independently
  # of this option's value:
  #   	vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  exclude-dirs:
    - cmd/playground
    - tests/integration

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - goconst # I want my tests to repeat themselves
        - errcheck
        - gosec
        - bodyclose
        - unparam
        - unused
        - forcetypeassert
        - nilnil
        - exhaustruct

    - path: wire\.go
      linters:
        - ireturn

    - path: tests/
      linters:
        - gosec

    - path: pkg/apiclient/roundtripper_*
      linters:
        - bodyclose

    - path: tests/testutil/
      linters:
        - bodyclose

    - path: mock_?.*\.go
      linters:
        - mnd
        - forcetypeassert

    - path: cmd/tools/gen_queries
      linters:
        - unused

    - path: pkg/types/mock/
      linters:
        - forcetypeassert

    - path: internal/database/database_mock.go
      linters:
        - forcetypeassert

    - path: internal/encoding/mock
      linters:
        - forcetypeassert

    - path: internal/uploads/images/mock.go
      linters:
        - forcetypeassert

    - path: internal/features/grocerylistpreparation/mocks.go
      linters:
        - forcetypeassert

    - path: internal/messagequeue/mock
      linters:
        - forcetypeassert

    - path: internal/routing/mock
      linters:
        - forcetypeassert

    - path: internal/search/mock
      linters:
        - forcetypeassert

    - path: internal/uploads/mock
      linters:
        - forcetypeassert

    - path: internal/database/postgres
      linters:
        - paralleltest

    - path: cmd/tools/codegen/golang/statics
      linters:
        - unused
        - bodyclose

    - path: cmd/tools/codegen/golang
      linters:
        - gocritic

    ## BEGIN SPECIAL SNOWFLAKES

    - path: cmd/gen_configs/main.go
      linters:
        - gosec

    - path: internal/email/sendgrid
      linters:
        - paralleltest

    - path: internal/featureflags/launchdarkly/mock_client.go
      linters:
        - gocritic

    - path: internal/featureflags/posthog
      linters:
        - paralleltest

    ## END SPECIAL SNOWFLAKES

    # Exclude known linters from partially hard-vendored code, which is impossible to exclude via "nolint" comments.
    # - path: internal/hmac/
    #   text: "weak cryptographic primitive"
    #   linters:
    #     - gosec

    - linters:
        - gocritic
      text: "captLocal: `T' should not be capitalized"

    # ignore this error type because it isn't defined anywhere, and it's detecting a false positive
    - linters:
        - gosec
      text: "G304:"

    # ignore this error type because it isn't defined anywhere, and it's detecting a false positive
    - linters:
        - gosec
      text: "G115:"

    - path: cmd/tools/codegen
      linters:
        - gocritic
      text: "rangeValCopy: each iteration copies"

  # Independently of option `exclude` we use default exclude patterns, it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: false

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files, only those changes are analyzed, else only
  # changes in HEAD~ are analyzed. It's a super-useful option for integration of golangci-lint into existing large
  # codebase. It's not practical to fix all existing issues at the moment of integration: much better don't allow issues
  # in new code. Default is false.
  new: false

  #
  # # Show only new issues created after git revision `REV`
  # new-from-rev: REV
  #
  # # Show only new issues created in git patch with set file path.
  # new-from-patch: path/to/patch/file
  #